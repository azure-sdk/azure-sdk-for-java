// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * An entity describing the publish status of a content item.
 */
@Fluent
public final class JobItem implements JsonSerializable<JobItem> {
    /*
     * The resource id of the content item
     */
    private String resourceId;

    /*
     * Status of the item publication
     */
    private Status status;

    /*
     * The time the item publishing was completed
     */
    private OffsetDateTime executionTime;

    /*
     * The list of error descriptions if the item publication fails.
     */
    private List<Error> errors;

    /**
     * Creates an instance of JobItem class.
     */
    public JobItem() {
    }

    /**
     * Get the resourceId property: The resource id of the content item.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The resource id of the content item.
     * 
     * @param resourceId the resourceId value to set.
     * @return the JobItem object itself.
     */
    public JobItem withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the status property: Status of the item publication.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Get the executionTime property: The time the item publishing was completed.
     * 
     * @return the executionTime value.
     */
    public OffsetDateTime executionTime() {
        return this.executionTime;
    }

    /**
     * Get the errors property: The list of error descriptions if the item publication fails.
     * 
     * @return the errors value.
     */
    public List<Error> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: The list of error descriptions if the item publication fails.
     * 
     * @param errors the errors value to set.
     * @return the JobItem object itself.
     */
    public JobItem withErrors(List<Error> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobItem if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the JobItem.
     */
    public static JobItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobItem deserializedJobItem = new JobItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedJobItem.resourceId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedJobItem.status = Status.fromString(reader.getString());
                } else if ("executionTime".equals(fieldName)) {
                    deserializedJobItem.executionTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("errors".equals(fieldName)) {
                    List<Error> errors = reader.readArray(reader1 -> Error.fromJson(reader1));
                    deserializedJobItem.errors = errors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobItem;
        });
    }
}
