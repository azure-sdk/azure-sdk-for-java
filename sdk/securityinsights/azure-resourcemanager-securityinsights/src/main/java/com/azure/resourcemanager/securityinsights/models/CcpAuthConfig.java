// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base Model for API authentication.
 */
@Immutable
public class CcpAuthConfig implements JsonSerializable<CcpAuthConfig> {
    /*
     * The auth type
     */
    private CcpAuthType type = CcpAuthType.fromString("CcpAuthConfig");

    /**
     * Creates an instance of CcpAuthConfig class.
     */
    public CcpAuthConfig() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CcpAuthConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CcpAuthConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CcpAuthConfig.
     */
    public static CcpAuthConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("APIKey".equals(discriminatorValue)) {
                    return ApiKeyAuthModel.fromJson(readerToUse.reset());
                } else if ("AWS".equals(discriminatorValue)) {
                    return AwsAuthModel.fromJson(readerToUse.reset());
                } else if ("Basic".equals(discriminatorValue)) {
                    return BasicAuthModel.fromJson(readerToUse.reset());
                } else if ("GCP".equals(discriminatorValue)) {
                    return GcpAuthModel.fromJson(readerToUse.reset());
                } else if ("ServiceBus".equals(discriminatorValue)) {
                    return GenericBlobSbsAuthModel.fromJson(readerToUse.reset());
                } else if ("GitHub".equals(discriminatorValue)) {
                    return GitHubAuthModel.fromJson(readerToUse.reset());
                } else if ("None".equals(discriminatorValue)) {
                    return NoneAuthModel.fromJson(readerToUse.reset());
                } else if ("JwtToken".equals(discriminatorValue)) {
                    return JwtAuthModel.fromJson(readerToUse.reset());
                } else if ("OAuth2".equals(discriminatorValue)) {
                    return OAuthModel.fromJson(readerToUse.reset());
                } else if ("Oracle".equals(discriminatorValue)) {
                    return OracleAuthModel.fromJson(readerToUse.reset());
                } else if ("Session".equals(discriminatorValue)) {
                    return SessionAuthModel.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static CcpAuthConfig fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CcpAuthConfig deserializedCcpAuthConfig = new CcpAuthConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedCcpAuthConfig.type = CcpAuthType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCcpAuthConfig;
        });
    }
}
