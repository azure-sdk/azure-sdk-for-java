// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.Category;
import com.azure.resourcemanager.securityinsights.models.Content;
import com.azure.resourcemanager.securityinsights.models.Context;
import com.azure.resourcemanager.securityinsights.models.Instructions;
import com.azure.resourcemanager.securityinsights.models.Priority;
import com.azure.resourcemanager.securityinsights.models.RecommendedAction;
import com.azure.resourcemanager.securityinsights.models.State;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/** Recommendation object. */
@Fluent
public final class RecommendationInner {
    /*
     * id of recommendation.
     */
    @JsonProperty(value = "id", required = true)
    private UUID id;

    /*
     * Instructions of the recommendation.
     */
    @JsonProperty(value = "instructions", required = true)
    private Instructions instructions;

    /*
     * Content of the recommendation.
     */
    @JsonProperty(value = "content")
    private Content content;

    /*
     * Id of the resource this recommendation refers to.
     */
    @JsonProperty(value = "resourceId")
    private String resourceId;

    /*
     * Collection of additional properties for the recommendation.
     */
    @JsonProperty(value = "additionalProperties")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> additionalProperties;

    /*
     * Title of the recommendation.
     */
    @JsonProperty(value = "title", required = true)
    private String title;

    /*
     * Description of the recommendation.
     */
    @JsonProperty(value = "description", required = true)
    private String description;

    /*
     * Title of the recommendation type.
     */
    @JsonProperty(value = "recommendationTypeTitle", required = true)
    private String recommendationTypeTitle;

    /*
     * Id of the recommendation type.
     */
    @JsonProperty(value = "recommendationTypeId", required = true)
    private String recommendationTypeId;

    /*
     * Category of the recommendation.
     */
    @JsonProperty(value = "category", required = true)
    private Category category;

    /*
     * Context of the recommendation.
     */
    @JsonProperty(value = "context", required = true)
    private Context context;

    /*
     * Id of the workspace this recommendation refers to.
     */
    @JsonProperty(value = "workspaceId", required = true)
    private UUID workspaceId;

    /*
     * List of actions to take for this recommendation.
     */
    @JsonProperty(value = "actions", required = true)
    private List<RecommendedAction> actions;

    /*
     * State of the recommendation.
     */
    @JsonProperty(value = "state", required = true)
    private State state;

    /*
     * Priority of the recommendation.
     */
    @JsonProperty(value = "priority", required = true)
    private Priority priority;

    /*
     * The time stamp (UTC) when the recommendation was last evaluated.
     */
    @JsonProperty(value = "lastEvaluatedTimeUtc", required = true)
    private OffsetDateTime lastEvaluatedTimeUtc;

    /*
     * The time stamp (UTC) when the recommendation should be displayed again.
     */
    @JsonProperty(value = "hideUntilTimeUtc")
    private OffsetDateTime hideUntilTimeUtc;

    /*
     * The timestamp (UTC) after which the recommendation should not be displayed anymore.
     */
    @JsonProperty(value = "displayUntilTimeUtc")
    private OffsetDateTime displayUntilTimeUtc;

    /*
     * Value indicating if the recommendation should be displayed or not.
     */
    @JsonProperty(value = "visible")
    private Boolean visible;

    /** Creates an instance of RecommendationInner class. */
    public RecommendationInner() {
    }

    /**
     * Get the id property: id of recommendation.
     *
     * @return the id value.
     */
    public UUID id() {
        return this.id;
    }

    /**
     * Set the id property: id of recommendation.
     *
     * @param id the id value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withId(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Get the instructions property: Instructions of the recommendation.
     *
     * @return the instructions value.
     */
    public Instructions instructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: Instructions of the recommendation.
     *
     * @param instructions the instructions value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withInstructions(Instructions instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the content property: Content of the recommendation.
     *
     * @return the content value.
     */
    public Content content() {
        return this.content;
    }

    /**
     * Set the content property: Content of the recommendation.
     *
     * @param content the content value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withContent(Content content) {
        this.content = content;
        return this;
    }

    /**
     * Get the resourceId property: Id of the resource this recommendation refers to.
     *
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: Id of the resource this recommendation refers to.
     *
     * @param resourceId the resourceId value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the additionalProperties property: Collection of additional properties for the recommendation.
     *
     * @return the additionalProperties value.
     */
    public Map<String, String> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Collection of additional properties for the recommendation.
     *
     * @param additionalProperties the additionalProperties value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withAdditionalProperties(Map<String, String> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Get the title property: Title of the recommendation.
     *
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Title of the recommendation.
     *
     * @param title the title value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: Description of the recommendation.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the recommendation.
     *
     * @param description the description value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the recommendationTypeTitle property: Title of the recommendation type.
     *
     * @return the recommendationTypeTitle value.
     */
    public String recommendationTypeTitle() {
        return this.recommendationTypeTitle;
    }

    /**
     * Set the recommendationTypeTitle property: Title of the recommendation type.
     *
     * @param recommendationTypeTitle the recommendationTypeTitle value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withRecommendationTypeTitle(String recommendationTypeTitle) {
        this.recommendationTypeTitle = recommendationTypeTitle;
        return this;
    }

    /**
     * Get the recommendationTypeId property: Id of the recommendation type.
     *
     * @return the recommendationTypeId value.
     */
    public String recommendationTypeId() {
        return this.recommendationTypeId;
    }

    /**
     * Set the recommendationTypeId property: Id of the recommendation type.
     *
     * @param recommendationTypeId the recommendationTypeId value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withRecommendationTypeId(String recommendationTypeId) {
        this.recommendationTypeId = recommendationTypeId;
        return this;
    }

    /**
     * Get the category property: Category of the recommendation.
     *
     * @return the category value.
     */
    public Category category() {
        return this.category;
    }

    /**
     * Set the category property: Category of the recommendation.
     *
     * @param category the category value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withCategory(Category category) {
        this.category = category;
        return this;
    }

    /**
     * Get the context property: Context of the recommendation.
     *
     * @return the context value.
     */
    public Context context() {
        return this.context;
    }

    /**
     * Set the context property: Context of the recommendation.
     *
     * @param context the context value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withContext(Context context) {
        this.context = context;
        return this;
    }

    /**
     * Get the workspaceId property: Id of the workspace this recommendation refers to.
     *
     * @return the workspaceId value.
     */
    public UUID workspaceId() {
        return this.workspaceId;
    }

    /**
     * Set the workspaceId property: Id of the workspace this recommendation refers to.
     *
     * @param workspaceId the workspaceId value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withWorkspaceId(UUID workspaceId) {
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * Get the actions property: List of actions to take for this recommendation.
     *
     * @return the actions value.
     */
    public List<RecommendedAction> actions() {
        return this.actions;
    }

    /**
     * Set the actions property: List of actions to take for this recommendation.
     *
     * @param actions the actions value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withActions(List<RecommendedAction> actions) {
        this.actions = actions;
        return this;
    }

    /**
     * Get the state property: State of the recommendation.
     *
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the recommendation.
     *
     * @param state the state value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the priority property: Priority of the recommendation.
     *
     * @return the priority value.
     */
    public Priority priority() {
        return this.priority;
    }

    /**
     * Set the priority property: Priority of the recommendation.
     *
     * @param priority the priority value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withPriority(Priority priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the lastEvaluatedTimeUtc property: The time stamp (UTC) when the recommendation was last evaluated.
     *
     * @return the lastEvaluatedTimeUtc value.
     */
    public OffsetDateTime lastEvaluatedTimeUtc() {
        return this.lastEvaluatedTimeUtc;
    }

    /**
     * Set the lastEvaluatedTimeUtc property: The time stamp (UTC) when the recommendation was last evaluated.
     *
     * @param lastEvaluatedTimeUtc the lastEvaluatedTimeUtc value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withLastEvaluatedTimeUtc(OffsetDateTime lastEvaluatedTimeUtc) {
        this.lastEvaluatedTimeUtc = lastEvaluatedTimeUtc;
        return this;
    }

    /**
     * Get the hideUntilTimeUtc property: The time stamp (UTC) when the recommendation should be displayed again.
     *
     * @return the hideUntilTimeUtc value.
     */
    public OffsetDateTime hideUntilTimeUtc() {
        return this.hideUntilTimeUtc;
    }

    /**
     * Set the hideUntilTimeUtc property: The time stamp (UTC) when the recommendation should be displayed again.
     *
     * @param hideUntilTimeUtc the hideUntilTimeUtc value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withHideUntilTimeUtc(OffsetDateTime hideUntilTimeUtc) {
        this.hideUntilTimeUtc = hideUntilTimeUtc;
        return this;
    }

    /**
     * Get the displayUntilTimeUtc property: The timestamp (UTC) after which the recommendation should not be displayed
     * anymore.
     *
     * @return the displayUntilTimeUtc value.
     */
    public OffsetDateTime displayUntilTimeUtc() {
        return this.displayUntilTimeUtc;
    }

    /**
     * Set the displayUntilTimeUtc property: The timestamp (UTC) after which the recommendation should not be displayed
     * anymore.
     *
     * @param displayUntilTimeUtc the displayUntilTimeUtc value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withDisplayUntilTimeUtc(OffsetDateTime displayUntilTimeUtc) {
        this.displayUntilTimeUtc = displayUntilTimeUtc;
        return this;
    }

    /**
     * Get the visible property: Value indicating if the recommendation should be displayed or not.
     *
     * @return the visible value.
     */
    public Boolean visible() {
        return this.visible;
    }

    /**
     * Set the visible property: Value indicating if the recommendation should be displayed or not.
     *
     * @param visible the visible value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withVisible(Boolean visible) {
        this.visible = visible;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property id in model RecommendationInner"));
        }
        if (instructions() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property instructions in model RecommendationInner"));
        } else {
            instructions().validate();
        }
        if (content() != null) {
            content().validate();
        }
        if (title() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property title in model RecommendationInner"));
        }
        if (description() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property description in model RecommendationInner"));
        }
        if (recommendationTypeTitle() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property recommendationTypeTitle in model RecommendationInner"));
        }
        if (recommendationTypeId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property recommendationTypeId in model RecommendationInner"));
        }
        if (category() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property category in model RecommendationInner"));
        }
        if (context() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property context in model RecommendationInner"));
        }
        if (workspaceId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property workspaceId in model RecommendationInner"));
        }
        if (actions() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property actions in model RecommendationInner"));
        } else {
            actions().forEach(e -> e.validate());
        }
        if (state() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property state in model RecommendationInner"));
        }
        if (priority() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property priority in model RecommendationInner"));
        }
        if (lastEvaluatedTimeUtc() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property lastEvaluatedTimeUtc in model RecommendationInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RecommendationInner.class);
}
