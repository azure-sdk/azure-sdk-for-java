// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.models.RecommendedSuggestion;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.azure.resourcemanager.securityinsights.models.State;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Recommendation object.
 */
@Fluent
public final class RecommendationInner extends ResourceWithEtag {
    /*
     * Recommendation properties object.
     */
    @JsonProperty(value = "properties")
    private RecommendationProperties innerProperties;

    /**
     * Creates an instance of RecommendationInner class.
     */
    public RecommendationInner() {
    }

    /**
     * Get the innerProperties property: Recommendation properties object.
     * 
     * @return the innerProperties value.
     */
    private RecommendationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RecommendationInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the recommendationTypeId property: Id of the recommendation type.
     * 
     * @return the recommendationTypeId value.
     */
    public String recommendationTypeId() {
        return this.innerProperties() == null ? null : this.innerProperties().recommendationTypeId();
    }

    /**
     * Set the recommendationTypeId property: Id of the recommendation type.
     * 
     * @param recommendationTypeId the recommendationTypeId value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withRecommendationTypeId(String recommendationTypeId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RecommendationProperties();
        }
        this.innerProperties().withRecommendationTypeId(recommendationTypeId);
        return this;
    }

    /**
     * Get the state property: State of the recommendation.
     * 
     * @return the state value.
     */
    public State state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: State of the recommendation.
     * 
     * @param state the state value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withState(State state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RecommendationProperties();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Get the title property: Title of the recommendation.
     * 
     * @return the title value.
     */
    public String title() {
        return this.innerProperties() == null ? null : this.innerProperties().title();
    }

    /**
     * Set the title property: Title of the recommendation.
     * 
     * @param title the title value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withTitle(String title) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RecommendationProperties();
        }
        this.innerProperties().withTitle(title);
        return this;
    }

    /**
     * Get the description property: Description of the recommendation.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: Description of the recommendation.
     * 
     * @param description the description value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RecommendationProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the creationTimeUtc property: The time stamp (UTC) when the recommendation was created.
     * 
     * @return the creationTimeUtc value.
     */
    public OffsetDateTime creationTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().creationTimeUtc();
    }

    /**
     * Set the creationTimeUtc property: The time stamp (UTC) when the recommendation was created.
     * 
     * @param creationTimeUtc the creationTimeUtc value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withCreationTimeUtc(OffsetDateTime creationTimeUtc) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RecommendationProperties();
        }
        this.innerProperties().withCreationTimeUtc(creationTimeUtc);
        return this;
    }

    /**
     * Get the lastEvaluatedTimeUtc property: The time stamp (UTC) when the recommendation was last evaluated.
     * 
     * @return the lastEvaluatedTimeUtc value.
     */
    public OffsetDateTime lastEvaluatedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastEvaluatedTimeUtc();
    }

    /**
     * Set the lastEvaluatedTimeUtc property: The time stamp (UTC) when the recommendation was last evaluated.
     * 
     * @param lastEvaluatedTimeUtc the lastEvaluatedTimeUtc value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withLastEvaluatedTimeUtc(OffsetDateTime lastEvaluatedTimeUtc) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RecommendationProperties();
        }
        this.innerProperties().withLastEvaluatedTimeUtc(lastEvaluatedTimeUtc);
        return this;
    }

    /**
     * Get the lastModifiedTimeUtc property: The time stamp (UTC) when the recommendation was last modified.
     * 
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedTimeUtc();
    }

    /**
     * Set the lastModifiedTimeUtc property: The time stamp (UTC) when the recommendation was last modified.
     * 
     * @param lastModifiedTimeUtc the lastModifiedTimeUtc value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withLastModifiedTimeUtc(OffsetDateTime lastModifiedTimeUtc) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RecommendationProperties();
        }
        this.innerProperties().withLastModifiedTimeUtc(lastModifiedTimeUtc);
        return this;
    }

    /**
     * Get the suggestions property: List of suggestions to take for this recommendation.
     * 
     * @return the suggestions value.
     */
    public List<RecommendedSuggestion> suggestions() {
        return this.innerProperties() == null ? null : this.innerProperties().suggestions();
    }

    /**
     * Set the suggestions property: List of suggestions to take for this recommendation.
     * 
     * @param suggestions the suggestions value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withSuggestions(List<RecommendedSuggestion> suggestions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RecommendationProperties();
        }
        this.innerProperties().withSuggestions(suggestions);
        return this;
    }

    /**
     * Get the resourceId property: Id of the resource this recommendation refers to.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceId();
    }

    /**
     * Set the resourceId property: Id of the resource this recommendation refers to.
     * 
     * @param resourceId the resourceId value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withResourceId(String resourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RecommendationProperties();
        }
        this.innerProperties().withResourceId(resourceId);
        return this;
    }

    /**
     * Get the additionalProperties property: Collection of additional properties for the recommendation.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, String> additionalProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().additionalProperties();
    }

    /**
     * Set the additionalProperties property: Collection of additional properties for the recommendation.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the RecommendationInner object itself.
     */
    public RecommendationInner withAdditionalProperties(Map<String, String> additionalProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RecommendationProperties();
        }
        this.innerProperties().withAdditionalProperties(additionalProperties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
