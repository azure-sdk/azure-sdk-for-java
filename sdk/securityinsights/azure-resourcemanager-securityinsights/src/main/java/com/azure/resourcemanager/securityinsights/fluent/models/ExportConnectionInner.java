// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.models.ContentType;
import com.azure.resourcemanager.securityinsights.models.ExportType;
import com.azure.resourcemanager.securityinsights.models.RepoType;
import com.azure.resourcemanager.securityinsights.models.Repository;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.azure.resourcemanager.securityinsights.models.Version;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Represents a ExportConnection in Azure Security Insights. */
@Fluent
public final class ExportConnectionInner extends ResourceWithEtag {
    /*
     * export connection properties
     */
    @JsonProperty(value = "properties")
    private ExportConnectionProperties innerProperties;

    /** Creates an instance of ExportConnectionInner class. */
    public ExportConnectionInner() {
    }

    /**
     * Get the innerProperties property: export connection properties.
     *
     * @return the innerProperties value.
     */
    private ExportConnectionProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public ExportConnectionInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the connectionId property: The id (a Guid) of the export connection.
     *
     * @return the connectionId value.
     */
    public String connectionId() {
        return this.innerProperties() == null ? null : this.innerProperties().connectionId();
    }

    /**
     * Set the connectionId property: The id (a Guid) of the export connection.
     *
     * @param connectionId the connectionId value to set.
     * @return the ExportConnectionInner object itself.
     */
    public ExportConnectionInner withConnectionId(String connectionId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExportConnectionProperties();
        }
        this.innerProperties().withConnectionId(connectionId);
        return this;
    }

    /**
     * Get the version property: The version number associated with the export connection.
     *
     * @return the version value.
     */
    public Version version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: The version number associated with the export connection.
     *
     * @param version the version value to set.
     * @return the ExportConnectionInner object itself.
     */
    public ExportConnectionInner withVersion(Version version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExportConnectionProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the displayName property: The display name of the export connection.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The display name of the export connection.
     *
     * @param displayName the displayName value to set.
     * @return the ExportConnectionInner object itself.
     */
    public ExportConnectionInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExportConnectionProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the description property: A description of the export connection.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: A description of the export connection.
     *
     * @param description the description value to set.
     * @return the ExportConnectionInner object itself.
     */
    public ExportConnectionInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExportConnectionProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the repoType property: The repository type of the export connection.
     *
     * @return the repoType value.
     */
    public RepoType repoType() {
        return this.innerProperties() == null ? null : this.innerProperties().repoType();
    }

    /**
     * Set the repoType property: The repository type of the export connection.
     *
     * @param repoType the repoType value to set.
     * @return the ExportConnectionInner object itself.
     */
    public ExportConnectionInner withRepoType(RepoType repoType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExportConnectionProperties();
        }
        this.innerProperties().withRepoType(repoType);
        return this;
    }

    /**
     * Get the contentTypes property: Array of export connection content types.
     *
     * @return the contentTypes value.
     */
    public List<ContentType> contentTypes() {
        return this.innerProperties() == null ? null : this.innerProperties().contentTypes();
    }

    /**
     * Set the contentTypes property: Array of export connection content types.
     *
     * @param contentTypes the contentTypes value to set.
     * @return the ExportConnectionInner object itself.
     */
    public ExportConnectionInner withContentTypes(List<ContentType> contentTypes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExportConnectionProperties();
        }
        this.innerProperties().withContentTypes(contentTypes);
        return this;
    }

    /**
     * Get the repository property: Repository metadata.
     *
     * @return the repository value.
     */
    public Repository repository() {
        return this.innerProperties() == null ? null : this.innerProperties().repository();
    }

    /**
     * Set the repository property: Repository metadata.
     *
     * @param repository the repository value to set.
     * @return the ExportConnectionInner object itself.
     */
    public ExportConnectionInner withRepository(Repository repository) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExportConnectionProperties();
        }
        this.innerProperties().withRepository(repository);
        return this;
    }

    /**
     * Get the exportType property: Export type of the export connection.
     *
     * @return the exportType value.
     */
    public ExportType exportType() {
        return this.innerProperties() == null ? null : this.innerProperties().exportType();
    }

    /**
     * Set the exportType property: Export type of the export connection.
     *
     * @param exportType the exportType value to set.
     * @return the ExportConnectionInner object itself.
     */
    public ExportConnectionInner withExportType(ExportType exportType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExportConnectionProperties();
        }
        this.innerProperties().withExportType(exportType);
        return this;
    }

    /**
     * Get the nextScheduledTime property: Export type of the export connection.
     *
     * @return the nextScheduledTime value.
     */
    public String nextScheduledTime() {
        return this.innerProperties() == null ? null : this.innerProperties().nextScheduledTime();
    }

    /**
     * Set the nextScheduledTime property: Export type of the export connection.
     *
     * @param nextScheduledTime the nextScheduledTime value to set.
     * @return the ExportConnectionInner object itself.
     */
    public ExportConnectionInner withNextScheduledTime(String nextScheduledTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExportConnectionProperties();
        }
        this.innerProperties().withNextScheduledTime(nextScheduledTime);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
