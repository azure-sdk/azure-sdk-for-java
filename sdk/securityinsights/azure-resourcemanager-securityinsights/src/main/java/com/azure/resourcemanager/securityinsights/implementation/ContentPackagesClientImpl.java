// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.securityinsights.fluent.ContentPackagesClient;
import com.azure.resourcemanager.securityinsights.fluent.models.PackageInner;
import com.azure.resourcemanager.securityinsights.models.PackageInstallationProperties;
import com.azure.resourcemanager.securityinsights.models.PackageList;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ContentPackagesClient. */
public final class ContentPackagesClientImpl implements ContentPackagesClient {
    /** The proxy service used to perform REST calls. */
    private final ContentPackagesService service;

    /** The service client containing this operation class. */
    private final SecurityInsightsImpl client;

    /**
     * Initializes an instance of ContentPackagesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ContentPackagesClientImpl(SecurityInsightsImpl client) {
        this.service =
            RestProxy.create(ContentPackagesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityInsightsContentPackages to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityInsightsCont")
    public interface ContentPackagesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights"
                + "/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentPackages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PackageList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sentinelWorkspaceName") String sentinelWorkspaceName,
            @QueryParam("$filter") String filter,
            @QueryParam("$orderby") String orderby,
            @QueryParam("$top") Integer top,
            @QueryParam("$skip") Integer skip,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights"
                + "/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentPackages"
                + "/{packageId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PackageInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sentinelWorkspaceName") String sentinelWorkspaceName,
            @PathParam("packageId") String packageId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights"
                + "/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentPackages/{packageId}"
                + "/install")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PackageInner>> install(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sentinelWorkspaceName") String sentinelWorkspaceName,
            @PathParam("packageId") String packageId,
            @BodyParam("application/json") PackageInstallationProperties packageInstallationProperties,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights"
                + "/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentPackages/{packageId}"
                + "/uninstall")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PackageInner>> uninstall(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sentinelWorkspaceName") String sentinelWorkspaceName,
            @PathParam("packageId") String packageId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PackageList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets all available packages.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param orderby Sorts the results. Optional.
     * @param top Returns only the first n results. Optional.
     * @param skip Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results
     *     if there are any left.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all available packages along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PackageInner>> listSinglePageAsync(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String filter,
        String orderby,
        Integer top,
        Integer skip) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        final String apiVersion = "2022-11-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sentinelWorkspaceName,
                            filter,
                            orderby,
                            top,
                            skip,
                            accept,
                            context))
            .<PagedResponse<PackageInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all available packages.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param orderby Sorts the results. Optional.
     * @param top Returns only the first n results. Optional.
     * @param skip Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results
     *     if there are any left.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all available packages along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PackageInner>> listSinglePageAsync(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String filter,
        String orderby,
        Integer top,
        Integer skip,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        final String apiVersion = "2022-11-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                sentinelWorkspaceName,
                filter,
                orderby,
                top,
                skip,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets all available packages.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param orderby Sorts the results. Optional.
     * @param top Returns only the first n results. Optional.
     * @param skip Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results
     *     if there are any left.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all available packages as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PackageInner> listAsync(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String filter,
        String orderby,
        Integer top,
        Integer skip) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sentinelWorkspaceName, filter, orderby, top, skip),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all available packages.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all available packages as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PackageInner> listAsync(String resourceGroupName, String sentinelWorkspaceName) {
        final String filter = null;
        final String orderby = null;
        final Integer top = null;
        final Integer skip = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sentinelWorkspaceName, filter, orderby, top, skip),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all available packages.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param orderby Sorts the results. Optional.
     * @param top Returns only the first n results. Optional.
     * @param skip Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results
     *     if there are any left.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all available packages as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PackageInner> listAsync(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String filter,
        String orderby,
        Integer top,
        Integer skip,
        Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sentinelWorkspaceName, filter, orderby, top, skip, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all available packages.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all available packages as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PackageInner> list(String resourceGroupName, String sentinelWorkspaceName) {
        final String filter = null;
        final String orderby = null;
        final Integer top = null;
        final Integer skip = null;
        return new PagedIterable<>(listAsync(resourceGroupName, sentinelWorkspaceName, filter, orderby, top, skip));
    }

    /**
     * Gets all available packages.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param orderby Sorts the results. Optional.
     * @param top Returns only the first n results. Optional.
     * @param skip Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results
     *     if there are any left.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all available packages as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PackageInner> list(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String filter,
        String orderby,
        Integer top,
        Integer skip,
        Context context) {
        return new PagedIterable<>(
            listAsync(resourceGroupName, sentinelWorkspaceName, filter, orderby, top, skip, context));
    }

    /**
     * Gets a package byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a package byt its identifier along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PackageInner>> getWithResponseAsync(
        String resourceGroupName, String sentinelWorkspaceName, String packageId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        final String apiVersion = "2022-11-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sentinelWorkspaceName,
                            packageId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a package byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a package byt its identifier along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PackageInner>> getWithResponseAsync(
        String resourceGroupName, String sentinelWorkspaceName, String packageId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        final String apiVersion = "2022-11-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                sentinelWorkspaceName,
                packageId,
                accept,
                context);
    }

    /**
     * Gets a package byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a package byt its identifier on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PackageInner> getAsync(String resourceGroupName, String sentinelWorkspaceName, String packageId) {
        return getWithResponseAsync(resourceGroupName, sentinelWorkspaceName, packageId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a package byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a package byt its identifier along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PackageInner> getWithResponse(
        String resourceGroupName, String sentinelWorkspaceName, String packageId, Context context) {
        return getWithResponseAsync(resourceGroupName, sentinelWorkspaceName, packageId, context).block();
    }

    /**
     * Gets a package byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a package byt its identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PackageInner get(String resourceGroupName, String sentinelWorkspaceName, String packageId) {
        return getWithResponse(resourceGroupName, sentinelWorkspaceName, packageId, Context.NONE).getValue();
    }

    /**
     * Install a package to the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @param packageInstallationProperties Package installation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PackageInner>> installWithResponseAsync(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        if (packageInstallationProperties == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter packageInstallationProperties is required and cannot be null."));
        } else {
            packageInstallationProperties.validate();
        }
        final String apiVersion = "2022-11-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .install(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sentinelWorkspaceName,
                            packageId,
                            packageInstallationProperties,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Install a package to the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @param packageInstallationProperties Package installation properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PackageInner>> installWithResponseAsync(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        if (packageInstallationProperties == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter packageInstallationProperties is required and cannot be null."));
        } else {
            packageInstallationProperties.validate();
        }
        final String apiVersion = "2022-11-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .install(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                sentinelWorkspaceName,
                packageId,
                packageInstallationProperties,
                accept,
                context);
    }

    /**
     * Install a package to the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @param packageInstallationProperties Package installation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PackageInner> installAsync(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties) {
        return installWithResponseAsync(
                resourceGroupName, sentinelWorkspaceName, packageId, packageInstallationProperties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Install a package to the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @param packageInstallationProperties Package installation properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PackageInner> installWithResponse(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties,
        Context context) {
        return installWithResponseAsync(
                resourceGroupName, sentinelWorkspaceName, packageId, packageInstallationProperties, context)
            .block();
    }

    /**
     * Install a package to the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @param packageInstallationProperties Package installation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PackageInner install(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties) {
        return installWithResponse(
                resourceGroupName, sentinelWorkspaceName, packageId, packageInstallationProperties, Context.NONE)
            .getValue();
    }

    /**
     * Uninstall a package from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PackageInner>> uninstallWithResponseAsync(
        String resourceGroupName, String sentinelWorkspaceName, String packageId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        final String apiVersion = "2022-11-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .uninstall(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sentinelWorkspaceName,
                            packageId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Uninstall a package from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PackageInner>> uninstallWithResponseAsync(
        String resourceGroupName, String sentinelWorkspaceName, String packageId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        final String apiVersion = "2022-11-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .uninstall(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                sentinelWorkspaceName,
                packageId,
                accept,
                context);
    }

    /**
     * Uninstall a package from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PackageInner> uninstallAsync(
        String resourceGroupName, String sentinelWorkspaceName, String packageId) {
        return uninstallWithResponseAsync(resourceGroupName, sentinelWorkspaceName, packageId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Uninstall a package from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PackageInner> uninstallWithResponse(
        String resourceGroupName, String sentinelWorkspaceName, String packageId, Context context) {
        return uninstallWithResponseAsync(resourceGroupName, sentinelWorkspaceName, packageId, context).block();
    }

    /**
     * Uninstall a package from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PackageInner uninstall(String resourceGroupName, String sentinelWorkspaceName, String packageId) {
        return uninstallWithResponse(resourceGroupName, sentinelWorkspaceName, packageId, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list available packages along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PackageInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PackageInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list available packages along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PackageInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
