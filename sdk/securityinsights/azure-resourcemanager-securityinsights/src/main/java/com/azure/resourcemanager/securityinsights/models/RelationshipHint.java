// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An object used to help follow relationships from this object to other STIX objects.
 */
@Fluent
public final class RelationshipHint implements JsonSerializable<RelationshipHint> {
    /*
     * The fieldName property.
     */
    private String fieldName;

    /*
     * The source property.
     */
    private String source;

    /**
     * Creates an instance of RelationshipHint class.
     */
    public RelationshipHint() {
    }

    /**
     * Get the fieldName property: The fieldName property.
     * 
     * @return the fieldName value.
     */
    public String fieldName() {
        return this.fieldName;
    }

    /**
     * Set the fieldName property: The fieldName property.
     * 
     * @param fieldName the fieldName value to set.
     * @return the RelationshipHint object itself.
     */
    public RelationshipHint withFieldName(String fieldName) {
        this.fieldName = fieldName;
        return this;
    }

    /**
     * Get the source property: The source property.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: The source property.
     * 
     * @param source the source value to set.
     * @return the RelationshipHint object itself.
     */
    public RelationshipHint withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fieldName", this.fieldName);
        jsonWriter.writeStringField("source", this.source);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RelationshipHint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RelationshipHint if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RelationshipHint.
     */
    public static RelationshipHint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RelationshipHint deserializedRelationshipHint = new RelationshipHint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String jsonFieldName = reader.getFieldName();
                reader.nextToken();

                if ("fieldName".equals(jsonFieldName)) {
                    deserializedRelationshipHint.fieldName = reader.getString();
                } else if ("source".equals(jsonFieldName)) {
                    deserializedRelationshipHint.source = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRelationshipHint;
        });
    }
}
