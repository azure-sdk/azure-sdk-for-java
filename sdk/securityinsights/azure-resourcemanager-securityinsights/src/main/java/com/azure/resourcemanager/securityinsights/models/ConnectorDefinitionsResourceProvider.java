// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The resource provider details include the required permissions for the user to create connections.
 * The user should have the required permissions(Read\Write, ..) in the specified scope ProviderPermissionsScope
 * against the specified resource provider.
 */
@Fluent
public final class ConnectorDefinitionsResourceProvider {
    /*
     * Gets or sets the provider name.
     */
    @JsonProperty(value = "provider", required = true)
    private String provider;

    /*
     * Gets or sets the permissions description text.
     */
    @JsonProperty(value = "permissionsDisplayText", required = true)
    private String permissionsDisplayText;

    /*
     * Gets or sets the permissions provider display name.
     */
    @JsonProperty(value = "providerDisplayName", required = true)
    private String providerDisplayName;

    /*
     * The scope on which the user should have permissions, in order to be able to create connections.
     */
    @JsonProperty(value = "scope", required = true)
    private ProviderPermissionsScope scope;

    /*
     * Required permissions for the connector resource provider that define in ResourceProviders.
     * For more information about the permissions see <see
     * href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see
     * >.
     */
    @JsonProperty(value = "requiredPermissions", required = true)
    private ResourceProviderRequiredPermissions requiredPermissions;

    /**
     * Creates an instance of ConnectorDefinitionsResourceProvider class.
     */
    public ConnectorDefinitionsResourceProvider() {
    }

    /**
     * Get the provider property: Gets or sets the provider name.
     * 
     * @return the provider value.
     */
    public String provider() {
        return this.provider;
    }

    /**
     * Set the provider property: Gets or sets the provider name.
     * 
     * @param provider the provider value to set.
     * @return the ConnectorDefinitionsResourceProvider object itself.
     */
    public ConnectorDefinitionsResourceProvider withProvider(String provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the permissionsDisplayText property: Gets or sets the permissions description text.
     * 
     * @return the permissionsDisplayText value.
     */
    public String permissionsDisplayText() {
        return this.permissionsDisplayText;
    }

    /**
     * Set the permissionsDisplayText property: Gets or sets the permissions description text.
     * 
     * @param permissionsDisplayText the permissionsDisplayText value to set.
     * @return the ConnectorDefinitionsResourceProvider object itself.
     */
    public ConnectorDefinitionsResourceProvider withPermissionsDisplayText(String permissionsDisplayText) {
        this.permissionsDisplayText = permissionsDisplayText;
        return this;
    }

    /**
     * Get the providerDisplayName property: Gets or sets the permissions provider display name.
     * 
     * @return the providerDisplayName value.
     */
    public String providerDisplayName() {
        return this.providerDisplayName;
    }

    /**
     * Set the providerDisplayName property: Gets or sets the permissions provider display name.
     * 
     * @param providerDisplayName the providerDisplayName value to set.
     * @return the ConnectorDefinitionsResourceProvider object itself.
     */
    public ConnectorDefinitionsResourceProvider withProviderDisplayName(String providerDisplayName) {
        this.providerDisplayName = providerDisplayName;
        return this;
    }

    /**
     * Get the scope property: The scope on which the user should have permissions, in order to be able to create
     * connections.
     * 
     * @return the scope value.
     */
    public ProviderPermissionsScope scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The scope on which the user should have permissions, in order to be able to create
     * connections.
     * 
     * @param scope the scope value to set.
     * @return the ConnectorDefinitionsResourceProvider object itself.
     */
    public ConnectorDefinitionsResourceProvider withScope(ProviderPermissionsScope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the requiredPermissions property: Required permissions for the connector resource provider that define in
     * ResourceProviders.
     * For more information about the permissions see &lt;see
     * href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format"&gt;here&lt;/see&gt;.
     * 
     * @return the requiredPermissions value.
     */
    public ResourceProviderRequiredPermissions requiredPermissions() {
        return this.requiredPermissions;
    }

    /**
     * Set the requiredPermissions property: Required permissions for the connector resource provider that define in
     * ResourceProviders.
     * For more information about the permissions see &lt;see
     * href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format"&gt;here&lt;/see&gt;.
     * 
     * @param requiredPermissions the requiredPermissions value to set.
     * @return the ConnectorDefinitionsResourceProvider object itself.
     */
    public ConnectorDefinitionsResourceProvider
        withRequiredPermissions(ResourceProviderRequiredPermissions requiredPermissions) {
        this.requiredPermissions = requiredPermissions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (provider() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property provider in model ConnectorDefinitionsResourceProvider"));
        }
        if (permissionsDisplayText() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property permissionsDisplayText in model ConnectorDefinitionsResourceProvider"));
        }
        if (providerDisplayName() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property providerDisplayName in model ConnectorDefinitionsResourceProvider"));
        }
        if (scope() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property scope in model ConnectorDefinitionsResourceProvider"));
        }
        if (requiredPermissions() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property requiredPermissions in model ConnectorDefinitionsResourceProvider"));
        } else {
            requiredPermissions().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectorDefinitionsResourceProvider.class);
}
