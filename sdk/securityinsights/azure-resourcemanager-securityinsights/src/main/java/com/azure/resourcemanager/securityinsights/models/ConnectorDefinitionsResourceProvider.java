// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The resource provider details include the required permissions for the user to create connections.
 * The user should have the required permissions(Read\Write, ..) in the specified scope ProviderPermissionsScope against
 * the specified resource provider.
 */
@Fluent
public final class ConnectorDefinitionsResourceProvider
    implements JsonSerializable<ConnectorDefinitionsResourceProvider> {
    /*
     * Gets or sets the provider name.
     */
    private String provider;

    /*
     * Gets or sets the permissions description text.
     */
    private String permissionsDisplayText;

    /*
     * Gets or sets the permissions provider display name.
     */
    private String providerDisplayName;

    /*
     * The scope on which the user should have permissions, in order to be able to create connections.
     */
    private ProviderPermissionsScope scope;

    /*
     * Required permissions for the connector resource provider that define in ResourceProviders.
     * For more information about the permissions see <see
     * href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see
     * >.
     */
    private ResourceProviderRequiredPermissions requiredPermissions;

    /**
     * Creates an instance of ConnectorDefinitionsResourceProvider class.
     */
    public ConnectorDefinitionsResourceProvider() {
    }

    /**
     * Get the provider property: Gets or sets the provider name.
     * 
     * @return the provider value.
     */
    public String provider() {
        return this.provider;
    }

    /**
     * Set the provider property: Gets or sets the provider name.
     * 
     * @param provider the provider value to set.
     * @return the ConnectorDefinitionsResourceProvider object itself.
     */
    public ConnectorDefinitionsResourceProvider withProvider(String provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the permissionsDisplayText property: Gets or sets the permissions description text.
     * 
     * @return the permissionsDisplayText value.
     */
    public String permissionsDisplayText() {
        return this.permissionsDisplayText;
    }

    /**
     * Set the permissionsDisplayText property: Gets or sets the permissions description text.
     * 
     * @param permissionsDisplayText the permissionsDisplayText value to set.
     * @return the ConnectorDefinitionsResourceProvider object itself.
     */
    public ConnectorDefinitionsResourceProvider withPermissionsDisplayText(String permissionsDisplayText) {
        this.permissionsDisplayText = permissionsDisplayText;
        return this;
    }

    /**
     * Get the providerDisplayName property: Gets or sets the permissions provider display name.
     * 
     * @return the providerDisplayName value.
     */
    public String providerDisplayName() {
        return this.providerDisplayName;
    }

    /**
     * Set the providerDisplayName property: Gets or sets the permissions provider display name.
     * 
     * @param providerDisplayName the providerDisplayName value to set.
     * @return the ConnectorDefinitionsResourceProvider object itself.
     */
    public ConnectorDefinitionsResourceProvider withProviderDisplayName(String providerDisplayName) {
        this.providerDisplayName = providerDisplayName;
        return this;
    }

    /**
     * Get the scope property: The scope on which the user should have permissions, in order to be able to create
     * connections.
     * 
     * @return the scope value.
     */
    public ProviderPermissionsScope scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The scope on which the user should have permissions, in order to be able to create
     * connections.
     * 
     * @param scope the scope value to set.
     * @return the ConnectorDefinitionsResourceProvider object itself.
     */
    public ConnectorDefinitionsResourceProvider withScope(ProviderPermissionsScope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the requiredPermissions property: Required permissions for the connector resource provider that define in
     * ResourceProviders.
     * For more information about the permissions see &lt;see
     * href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format"&gt;here&lt;/see&gt;.
     * 
     * @return the requiredPermissions value.
     */
    public ResourceProviderRequiredPermissions requiredPermissions() {
        return this.requiredPermissions;
    }

    /**
     * Set the requiredPermissions property: Required permissions for the connector resource provider that define in
     * ResourceProviders.
     * For more information about the permissions see &lt;see
     * href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format"&gt;here&lt;/see&gt;.
     * 
     * @param requiredPermissions the requiredPermissions value to set.
     * @return the ConnectorDefinitionsResourceProvider object itself.
     */
    public ConnectorDefinitionsResourceProvider
        withRequiredPermissions(ResourceProviderRequiredPermissions requiredPermissions) {
        this.requiredPermissions = requiredPermissions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (provider() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property provider in model ConnectorDefinitionsResourceProvider"));
        }
        if (permissionsDisplayText() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property permissionsDisplayText in model ConnectorDefinitionsResourceProvider"));
        }
        if (providerDisplayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property providerDisplayName in model ConnectorDefinitionsResourceProvider"));
        }
        if (scope() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property scope in model ConnectorDefinitionsResourceProvider"));
        }
        if (requiredPermissions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property requiredPermissions in model ConnectorDefinitionsResourceProvider"));
        } else {
            requiredPermissions().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectorDefinitionsResourceProvider.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provider", this.provider);
        jsonWriter.writeStringField("permissionsDisplayText", this.permissionsDisplayText);
        jsonWriter.writeStringField("providerDisplayName", this.providerDisplayName);
        jsonWriter.writeStringField("scope", this.scope == null ? null : this.scope.toString());
        jsonWriter.writeJsonField("requiredPermissions", this.requiredPermissions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectorDefinitionsResourceProvider from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectorDefinitionsResourceProvider if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectorDefinitionsResourceProvider.
     */
    public static ConnectorDefinitionsResourceProvider fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectorDefinitionsResourceProvider deserializedConnectorDefinitionsResourceProvider
                = new ConnectorDefinitionsResourceProvider();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provider".equals(fieldName)) {
                    deserializedConnectorDefinitionsResourceProvider.provider = reader.getString();
                } else if ("permissionsDisplayText".equals(fieldName)) {
                    deserializedConnectorDefinitionsResourceProvider.permissionsDisplayText = reader.getString();
                } else if ("providerDisplayName".equals(fieldName)) {
                    deserializedConnectorDefinitionsResourceProvider.providerDisplayName = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedConnectorDefinitionsResourceProvider.scope
                        = ProviderPermissionsScope.fromString(reader.getString());
                } else if ("requiredPermissions".equals(fieldName)) {
                    deserializedConnectorDefinitionsResourceProvider.requiredPermissions
                        = ResourceProviderRequiredPermissions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectorDefinitionsResourceProvider;
        });
    }
}
