// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Warning details.
 */
@Immutable
public final class WarningBody implements JsonSerializable<WarningBody> {
    /*
     * An identifier for the warning. Codes are invariant and are intended to be consumed programmatically.
     */
    private WarningCode code;

    /*
     * A message describing the warning, intended to be suitable for display in a user interface.
     */
    private String message;

    /*
     * The details property.
     */
    private List<WarningBody> details;

    /**
     * Creates an instance of WarningBody class.
     */
    public WarningBody() {
    }

    /**
     * Get the code property: An identifier for the warning. Codes are invariant and are intended to be consumed
     * programmatically.
     * 
     * @return the code value.
     */
    public WarningCode code() {
        return this.code;
    }

    /**
     * Get the message property: A message describing the warning, intended to be suitable for display in a user
     * interface.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the details property: The details property.
     * 
     * @return the details value.
     */
    public List<WarningBody> details() {
        return this.details;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (details() != null) {
            details().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WarningBody from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WarningBody if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WarningBody.
     */
    public static WarningBody fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WarningBody deserializedWarningBody = new WarningBody();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedWarningBody.code = WarningCode.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedWarningBody.message = reader.getString();
                } else if ("details".equals(fieldName)) {
                    List<WarningBody> details = reader.readArray(reader1 -> WarningBody.fromJson(reader1));
                    deserializedWarningBody.details = details;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWarningBody;
        });
    }
}
