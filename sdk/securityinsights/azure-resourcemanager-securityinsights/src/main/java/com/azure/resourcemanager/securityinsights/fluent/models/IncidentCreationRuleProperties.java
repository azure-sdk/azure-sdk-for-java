// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.ClientInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentCreationRuleCondition;
import com.azure.resourcemanager.securityinsights.models.IncidentCreationRuleGroupingConfiguration;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Incident creation rule properties. */
@Fluent
public final class IncidentCreationRuleProperties {
    /*
     * The display name of the incident creation rule.
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * The description of the incident creation rule.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The order of evaluation of the incident creation rule
     */
    @JsonProperty(value = "order", required = true)
    private int order;

    /*
     * The conditions to evaluate to determine if the incident creation rule should be applied.
     */
    @JsonProperty(value = "conditions")
    private List<IncidentCreationRuleCondition> conditions;

    /*
     * Determines whether to create an incident based on this rule or not.
     */
    @JsonProperty(value = "createIncident", required = true)
    private boolean createIncident;

    /*
     * Describes incident creation rule grouping configuration.
     */
    @JsonProperty(value = "groupingConfiguration")
    private IncidentCreationRuleGroupingConfiguration groupingConfiguration;

    /*
     * Determines whether the incident creation rule is enabled or disabled.
     */
    @JsonProperty(value = "enabled", required = true)
    private boolean enabled;

    /*
     * The last time the incident creation rule was updated.
     */
    @JsonProperty(value = "lastModifiedTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModifiedTimeUtc;

    /*
     * The time the incident creation rule was created.
     */
    @JsonProperty(value = "createdTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdTimeUtc;

    /*
     * Information on the client (user or application) that made some action
     */
    @JsonProperty(value = "lastModifiedBy")
    private ClientInfo lastModifiedBy;

    /*
     * Information on the client (user or application) that made some action
     */
    @JsonProperty(value = "createdBy")
    private ClientInfo createdBy;

    /** Creates an instance of IncidentCreationRuleProperties class. */
    public IncidentCreationRuleProperties() {
    }

    /**
     * Get the displayName property: The display name of the incident creation rule.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the incident creation rule.
     *
     * @param displayName the displayName value to set.
     * @return the IncidentCreationRuleProperties object itself.
     */
    public IncidentCreationRuleProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The description of the incident creation rule.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the incident creation rule.
     *
     * @param description the description value to set.
     * @return the IncidentCreationRuleProperties object itself.
     */
    public IncidentCreationRuleProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the order property: The order of evaluation of the incident creation rule.
     *
     * @return the order value.
     */
    public int order() {
        return this.order;
    }

    /**
     * Set the order property: The order of evaluation of the incident creation rule.
     *
     * @param order the order value to set.
     * @return the IncidentCreationRuleProperties object itself.
     */
    public IncidentCreationRuleProperties withOrder(int order) {
        this.order = order;
        return this;
    }

    /**
     * Get the conditions property: The conditions to evaluate to determine if the incident creation rule should be
     * applied.
     *
     * @return the conditions value.
     */
    public List<IncidentCreationRuleCondition> conditions() {
        return this.conditions;
    }

    /**
     * Set the conditions property: The conditions to evaluate to determine if the incident creation rule should be
     * applied.
     *
     * @param conditions the conditions value to set.
     * @return the IncidentCreationRuleProperties object itself.
     */
    public IncidentCreationRuleProperties withConditions(List<IncidentCreationRuleCondition> conditions) {
        this.conditions = conditions;
        return this;
    }

    /**
     * Get the createIncident property: Determines whether to create an incident based on this rule or not.
     *
     * @return the createIncident value.
     */
    public boolean createIncident() {
        return this.createIncident;
    }

    /**
     * Set the createIncident property: Determines whether to create an incident based on this rule or not.
     *
     * @param createIncident the createIncident value to set.
     * @return the IncidentCreationRuleProperties object itself.
     */
    public IncidentCreationRuleProperties withCreateIncident(boolean createIncident) {
        this.createIncident = createIncident;
        return this;
    }

    /**
     * Get the groupingConfiguration property: Describes incident creation rule grouping configuration.
     *
     * @return the groupingConfiguration value.
     */
    public IncidentCreationRuleGroupingConfiguration groupingConfiguration() {
        return this.groupingConfiguration;
    }

    /**
     * Set the groupingConfiguration property: Describes incident creation rule grouping configuration.
     *
     * @param groupingConfiguration the groupingConfiguration value to set.
     * @return the IncidentCreationRuleProperties object itself.
     */
    public IncidentCreationRuleProperties withGroupingConfiguration(
        IncidentCreationRuleGroupingConfiguration groupingConfiguration) {
        this.groupingConfiguration = groupingConfiguration;
        return this;
    }

    /**
     * Get the enabled property: Determines whether the incident creation rule is enabled or disabled.
     *
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Determines whether the incident creation rule is enabled or disabled.
     *
     * @param enabled the enabled value to set.
     * @return the IncidentCreationRuleProperties object itself.
     */
    public IncidentCreationRuleProperties withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the lastModifiedTimeUtc property: The last time the incident creation rule was updated.
     *
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.lastModifiedTimeUtc;
    }

    /**
     * Get the createdTimeUtc property: The time the incident creation rule was created.
     *
     * @return the createdTimeUtc value.
     */
    public OffsetDateTime createdTimeUtc() {
        return this.createdTimeUtc;
    }

    /**
     * Get the lastModifiedBy property: Information on the client (user or application) that made some action.
     *
     * @return the lastModifiedBy value.
     */
    public ClientInfo lastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * Set the lastModifiedBy property: Information on the client (user or application) that made some action.
     *
     * @param lastModifiedBy the lastModifiedBy value to set.
     * @return the IncidentCreationRuleProperties object itself.
     */
    public IncidentCreationRuleProperties withLastModifiedBy(ClientInfo lastModifiedBy) {
        this.lastModifiedBy = lastModifiedBy;
        return this;
    }

    /**
     * Get the createdBy property: Information on the client (user or application) that made some action.
     *
     * @return the createdBy value.
     */
    public ClientInfo createdBy() {
        return this.createdBy;
    }

    /**
     * Set the createdBy property: Information on the client (user or application) that made some action.
     *
     * @param createdBy the createdBy value to set.
     * @return the IncidentCreationRuleProperties object itself.
     */
    public IncidentCreationRuleProperties withCreatedBy(ClientInfo createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property displayName in model IncidentCreationRuleProperties"));
        }
        if (conditions() != null) {
            conditions().forEach(e -> e.validate());
        }
        if (groupingConfiguration() != null) {
            groupingConfiguration().validate();
        }
        if (lastModifiedBy() != null) {
            lastModifiedBy().validate();
        }
        if (createdBy() != null) {
            createdBy().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IncidentCreationRuleProperties.class);
}
