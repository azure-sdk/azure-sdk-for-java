// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.fluent.models.AnomaliesSettingsProperties;
import com.azure.resourcemanager.securityinsights.fluent.models.SettingsInner;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Settings with single toggle.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "kind", defaultImpl = Anomalies.class, visible = true)
@JsonTypeName("Anomalies")
@Fluent
public final class Anomalies extends SettingsInner {
    /*
     * The kind of the setting
     */
    @JsonTypeId
    @JsonProperty(value = "kind", required = true)
    private SettingKind kind = SettingKind.ANOMALIES;

    /*
     * Anomalies properties
     */
    @JsonProperty(value = "properties")
    private AnomaliesSettingsProperties innerProperties;

    /**
     * Creates an instance of Anomalies class.
     */
    public Anomalies() {
    }

    /**
     * Get the kind property: The kind of the setting.
     * 
     * @return the kind value.
     */
    @Override
    public SettingKind kind() {
        return this.kind;
    }

    /**
     * Get the innerProperties property: Anomalies properties.
     * 
     * @return the innerProperties value.
     */
    private AnomaliesSettingsProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Anomalies withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the isEnabled property: Determines whether the setting is enable or disabled.
     * 
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().isEnabled();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
