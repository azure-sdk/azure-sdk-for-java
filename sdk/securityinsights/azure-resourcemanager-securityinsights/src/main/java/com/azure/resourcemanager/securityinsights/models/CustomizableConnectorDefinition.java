// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.fluent.models.CustomizableConnectorDefinitionProperties;
import com.azure.resourcemanager.securityinsights.fluent.models.DataConnectorDefinitionInner;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;

/**
 * Connector definition for kind 'Customizable'.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "kind",
    defaultImpl = CustomizableConnectorDefinition.class,
    visible = true)
@JsonTypeName("Customizable")
@Fluent
public final class CustomizableConnectorDefinition extends DataConnectorDefinitionInner {
    /*
     * The data connector kind
     */
    @JsonTypeId
    @JsonProperty(value = "kind", required = true)
    private DataConnectorDefinitionKind kind = DataConnectorDefinitionKind.CUSTOMIZABLE;

    /*
     * Customizable properties.
     */
    @JsonProperty(value = "properties")
    private CustomizableConnectorDefinitionProperties innerProperties;

    /**
     * Creates an instance of CustomizableConnectorDefinition class.
     */
    public CustomizableConnectorDefinition() {
    }

    /**
     * Get the kind property: The data connector kind.
     * 
     * @return the kind value.
     */
    @Override
    public DataConnectorDefinitionKind kind() {
        return this.kind;
    }

    /**
     * Get the innerProperties property: Customizable properties.
     * 
     * @return the innerProperties value.
     */
    private CustomizableConnectorDefinitionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomizableConnectorDefinition withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the createdTimeUtc property: Gets or sets the connector definition created date in UTC format.
     * 
     * @return the createdTimeUtc value.
     */
    public OffsetDateTime createdTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().createdTimeUtc();
    }

    /**
     * Set the createdTimeUtc property: Gets or sets the connector definition created date in UTC format.
     * 
     * @param createdTimeUtc the createdTimeUtc value to set.
     * @return the CustomizableConnectorDefinition object itself.
     */
    public CustomizableConnectorDefinition withCreatedTimeUtc(OffsetDateTime createdTimeUtc) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomizableConnectorDefinitionProperties();
        }
        this.innerProperties().withCreatedTimeUtc(createdTimeUtc);
        return this;
    }

    /**
     * Get the lastModifiedUtc property: Gets or sets the connector definition last modified date in UTC format.
     * 
     * @return the lastModifiedUtc value.
     */
    public OffsetDateTime lastModifiedUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedUtc();
    }

    /**
     * Set the lastModifiedUtc property: Gets or sets the connector definition last modified date in UTC format.
     * 
     * @param lastModifiedUtc the lastModifiedUtc value to set.
     * @return the CustomizableConnectorDefinition object itself.
     */
    public CustomizableConnectorDefinition withLastModifiedUtc(OffsetDateTime lastModifiedUtc) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomizableConnectorDefinitionProperties();
        }
        this.innerProperties().withLastModifiedUtc(lastModifiedUtc);
        return this;
    }

    /**
     * Get the connectorUiConfig property: The UiConfig for 'Customizable' connector definition kind.
     * 
     * @return the connectorUiConfig value.
     */
    public CustomizableConnectorUiConfig connectorUiConfig() {
        return this.innerProperties() == null ? null : this.innerProperties().connectorUiConfig();
    }

    /**
     * Set the connectorUiConfig property: The UiConfig for 'Customizable' connector definition kind.
     * 
     * @param connectorUiConfig the connectorUiConfig value to set.
     * @return the CustomizableConnectorDefinition object itself.
     */
    public CustomizableConnectorDefinition withConnectorUiConfig(CustomizableConnectorUiConfig connectorUiConfig) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomizableConnectorDefinitionProperties();
        }
        this.innerProperties().withConnectorUiConfig(connectorUiConfig);
        return this;
    }

    /**
     * Get the connectionsConfig property: The UiConfig for 'Customizable' connector definition kind.
     * 
     * @return the connectionsConfig value.
     */
    public CustomizableConnectionsConfig connectionsConfig() {
        return this.innerProperties() == null ? null : this.innerProperties().connectionsConfig();
    }

    /**
     * Set the connectionsConfig property: The UiConfig for 'Customizable' connector definition kind.
     * 
     * @param connectionsConfig the connectionsConfig value to set.
     * @return the CustomizableConnectorDefinition object itself.
     */
    public CustomizableConnectorDefinition withConnectionsConfig(CustomizableConnectionsConfig connectionsConfig) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomizableConnectorDefinitionProperties();
        }
        this.innerProperties().withConnectionsConfig(connectionsConfig);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
