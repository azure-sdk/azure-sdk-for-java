// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.PackageOperationsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.PackageInner;
import com.azure.resourcemanager.securityinsights.models.Package;
import com.azure.resourcemanager.securityinsights.models.PackageInstallationProperties;
import com.azure.resourcemanager.securityinsights.models.PackageOperations;

public final class PackageOperationsImpl implements PackageOperations {
    private static final ClientLogger LOGGER = new ClientLogger(PackageOperationsImpl.class);

    private final PackageOperationsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public PackageOperationsImpl(
        PackageOperationsClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Package install(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties) {
        PackageInner inner =
            this
                .serviceClient()
                .install(
                    resourceGroupName,
                    operationalInsightsResourceProvider,
                    workspaceName,
                    packageId,
                    packageInstallationProperties);
        if (inner != null) {
            return new PackageImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Package> installWithResponse(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties,
        Context context) {
        Response<PackageInner> inner =
            this
                .serviceClient()
                .installWithResponse(
                    resourceGroupName,
                    operationalInsightsResourceProvider,
                    workspaceName,
                    packageId,
                    packageInstallationProperties,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PackageImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void uninstall(
        String resourceGroupName, String operationalInsightsResourceProvider, String workspaceName, String packageId) {
        this
            .serviceClient()
            .uninstall(resourceGroupName, operationalInsightsResourceProvider, workspaceName, packageId);
    }

    public Response<Void> uninstallWithResponse(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        Context context) {
        return this
            .serviceClient()
            .uninstallWithResponse(
                resourceGroupName, operationalInsightsResourceProvider, workspaceName, packageId, context);
    }

    private PackageOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }
}
