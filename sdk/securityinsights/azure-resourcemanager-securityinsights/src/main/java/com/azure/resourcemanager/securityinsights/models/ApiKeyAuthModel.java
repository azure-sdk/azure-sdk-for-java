// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model for authentication with the API Key. Will result in additional header on the request (default behavior) to the
 * remote server: 'ApiKeyName: ApiKeyIdentifier ApiKey'. If 'IsApiKeyInPostPayload' is true it will send it in the body
 * of the request and not the header.
 */
@Fluent
public final class ApiKeyAuthModel extends CcpAuthConfig {
    /*
     * The auth type
     */
    private CcpAuthType type = CcpAuthType.APIKEY;

    /*
     * API Key for the user secret key credential
     */
    private String apiKey;

    /*
     * API Key name
     */
    private String apiKeyName;

    /*
     * API Key Identifier
     */
    private String apiKeyIdentifier;

    /*
     * Flag to indicate if API key is set in HTTP POST payload
     */
    private Boolean isApiKeyInPostPayload;

    /**
     * Creates an instance of ApiKeyAuthModel class.
     */
    public ApiKeyAuthModel() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    @Override
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Get the apiKey property: API Key for the user secret key credential.
     * 
     * @return the apiKey value.
     */
    public String apiKey() {
        return this.apiKey;
    }

    /**
     * Set the apiKey property: API Key for the user secret key credential.
     * 
     * @param apiKey the apiKey value to set.
     * @return the ApiKeyAuthModel object itself.
     */
    public ApiKeyAuthModel withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Get the apiKeyName property: API Key name.
     * 
     * @return the apiKeyName value.
     */
    public String apiKeyName() {
        return this.apiKeyName;
    }

    /**
     * Set the apiKeyName property: API Key name.
     * 
     * @param apiKeyName the apiKeyName value to set.
     * @return the ApiKeyAuthModel object itself.
     */
    public ApiKeyAuthModel withApiKeyName(String apiKeyName) {
        this.apiKeyName = apiKeyName;
        return this;
    }

    /**
     * Get the apiKeyIdentifier property: API Key Identifier.
     * 
     * @return the apiKeyIdentifier value.
     */
    public String apiKeyIdentifier() {
        return this.apiKeyIdentifier;
    }

    /**
     * Set the apiKeyIdentifier property: API Key Identifier.
     * 
     * @param apiKeyIdentifier the apiKeyIdentifier value to set.
     * @return the ApiKeyAuthModel object itself.
     */
    public ApiKeyAuthModel withApiKeyIdentifier(String apiKeyIdentifier) {
        this.apiKeyIdentifier = apiKeyIdentifier;
        return this;
    }

    /**
     * Get the isApiKeyInPostPayload property: Flag to indicate if API key is set in HTTP POST payload.
     * 
     * @return the isApiKeyInPostPayload value.
     */
    public Boolean isApiKeyInPostPayload() {
        return this.isApiKeyInPostPayload;
    }

    /**
     * Set the isApiKeyInPostPayload property: Flag to indicate if API key is set in HTTP POST payload.
     * 
     * @param isApiKeyInPostPayload the isApiKeyInPostPayload value to set.
     * @return the ApiKeyAuthModel object itself.
     */
    public ApiKeyAuthModel withIsApiKeyInPostPayload(Boolean isApiKeyInPostPayload) {
        this.isApiKeyInPostPayload = isApiKeyInPostPayload;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (apiKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property apiKey in model ApiKeyAuthModel"));
        }
        if (apiKeyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property apiKeyName in model ApiKeyAuthModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApiKeyAuthModel.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("apiKey", this.apiKey);
        jsonWriter.writeStringField("apiKeyName", this.apiKeyName);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("apiKeyIdentifier", this.apiKeyIdentifier);
        jsonWriter.writeBooleanField("isApiKeyInPostPayload", this.isApiKeyInPostPayload);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiKeyAuthModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiKeyAuthModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApiKeyAuthModel.
     */
    public static ApiKeyAuthModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiKeyAuthModel deserializedApiKeyAuthModel = new ApiKeyAuthModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("apiKey".equals(fieldName)) {
                    deserializedApiKeyAuthModel.apiKey = reader.getString();
                } else if ("apiKeyName".equals(fieldName)) {
                    deserializedApiKeyAuthModel.apiKeyName = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedApiKeyAuthModel.type = CcpAuthType.fromString(reader.getString());
                } else if ("apiKeyIdentifier".equals(fieldName)) {
                    deserializedApiKeyAuthModel.apiKeyIdentifier = reader.getString();
                } else if ("isApiKeyInPostPayload".equals(fieldName)) {
                    deserializedApiKeyAuthModel.isApiKeyInPostPayload = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiKeyAuthModel;
        });
    }
}
