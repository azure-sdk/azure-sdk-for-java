// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The request paging configuration for Count base paging type parameters.
 */
@Fluent
public final class RestApiPollerRequestPagingCountBaseConfig extends RestApiPollerRequestPagingConfig {
    /*
     * Indicates whether the count is zero based
     */
    private Boolean zeroBasedIndexing;

    /*
     * JSON path of page count in HTTP response payload
     */
    private String pageCountJsonPath;

    /*
     * Parameter name of page number in HTTP request
     */
    private String pageNumberParaName;

    /*
     * JSON path of page number in HTTP response payload
     */
    private String pageNumberJsonPath;

    /*
     * JSON path of total number of results in HTTP response payload
     */
    private String totalResultsJsonPath;

    /**
     * Creates an instance of RestApiPollerRequestPagingCountBaseConfig class.
     */
    public RestApiPollerRequestPagingCountBaseConfig() {
    }

    /**
     * Get the zeroBasedIndexing property: Indicates whether the count is zero based.
     * 
     * @return the zeroBasedIndexing value.
     */
    public Boolean zeroBasedIndexing() {
        return this.zeroBasedIndexing;
    }

    /**
     * Set the zeroBasedIndexing property: Indicates whether the count is zero based.
     * 
     * @param zeroBasedIndexing the zeroBasedIndexing value to set.
     * @return the RestApiPollerRequestPagingCountBaseConfig object itself.
     */
    public RestApiPollerRequestPagingCountBaseConfig withZeroBasedIndexing(Boolean zeroBasedIndexing) {
        this.zeroBasedIndexing = zeroBasedIndexing;
        return this;
    }

    /**
     * Get the pageCountJsonPath property: JSON path of page count in HTTP response payload.
     * 
     * @return the pageCountJsonPath value.
     */
    public String pageCountJsonPath() {
        return this.pageCountJsonPath;
    }

    /**
     * Set the pageCountJsonPath property: JSON path of page count in HTTP response payload.
     * 
     * @param pageCountJsonPath the pageCountJsonPath value to set.
     * @return the RestApiPollerRequestPagingCountBaseConfig object itself.
     */
    public RestApiPollerRequestPagingCountBaseConfig withPageCountJsonPath(String pageCountJsonPath) {
        this.pageCountJsonPath = pageCountJsonPath;
        return this;
    }

    /**
     * Get the pageNumberParaName property: Parameter name of page number in HTTP request.
     * 
     * @return the pageNumberParaName value.
     */
    public String pageNumberParaName() {
        return this.pageNumberParaName;
    }

    /**
     * Set the pageNumberParaName property: Parameter name of page number in HTTP request.
     * 
     * @param pageNumberParaName the pageNumberParaName value to set.
     * @return the RestApiPollerRequestPagingCountBaseConfig object itself.
     */
    public RestApiPollerRequestPagingCountBaseConfig withPageNumberParaName(String pageNumberParaName) {
        this.pageNumberParaName = pageNumberParaName;
        return this;
    }

    /**
     * Get the pageNumberJsonPath property: JSON path of page number in HTTP response payload.
     * 
     * @return the pageNumberJsonPath value.
     */
    public String pageNumberJsonPath() {
        return this.pageNumberJsonPath;
    }

    /**
     * Set the pageNumberJsonPath property: JSON path of page number in HTTP response payload.
     * 
     * @param pageNumberJsonPath the pageNumberJsonPath value to set.
     * @return the RestApiPollerRequestPagingCountBaseConfig object itself.
     */
    public RestApiPollerRequestPagingCountBaseConfig withPageNumberJsonPath(String pageNumberJsonPath) {
        this.pageNumberJsonPath = pageNumberJsonPath;
        return this;
    }

    /**
     * Get the totalResultsJsonPath property: JSON path of total number of results in HTTP response payload.
     * 
     * @return the totalResultsJsonPath value.
     */
    public String totalResultsJsonPath() {
        return this.totalResultsJsonPath;
    }

    /**
     * Set the totalResultsJsonPath property: JSON path of total number of results in HTTP response payload.
     * 
     * @param totalResultsJsonPath the totalResultsJsonPath value to set.
     * @return the RestApiPollerRequestPagingCountBaseConfig object itself.
     */
    public RestApiPollerRequestPagingCountBaseConfig withTotalResultsJsonPath(String totalResultsJsonPath) {
        this.totalResultsJsonPath = totalResultsJsonPath;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestApiPollerRequestPagingCountBaseConfig withPagingType(RestApiPollerRequestPagingKind pagingType) {
        super.withPagingType(pagingType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestApiPollerRequestPagingCountBaseConfig withPageSize(Integer pageSize) {
        super.withPageSize(pageSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestApiPollerRequestPagingCountBaseConfig withPageSizeParameterName(String pageSizeParameterName) {
        super.withPageSizeParameterName(pageSizeParameterName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (pagingType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property pagingType in model RestApiPollerRequestPagingCountBaseConfig"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RestApiPollerRequestPagingCountBaseConfig.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pagingType", pagingType() == null ? null : pagingType().toString());
        jsonWriter.writeNumberField("pageSize", pageSize());
        jsonWriter.writeStringField("pageSizeParameterName", pageSizeParameterName());
        jsonWriter.writeBooleanField("zeroBasedIndexing", this.zeroBasedIndexing);
        jsonWriter.writeStringField("pageCountJsonPath", this.pageCountJsonPath);
        jsonWriter.writeStringField("pageNumberParaName", this.pageNumberParaName);
        jsonWriter.writeStringField("pageNumberJsonPath", this.pageNumberJsonPath);
        jsonWriter.writeStringField("totalResultsJsonPath", this.totalResultsJsonPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RestApiPollerRequestPagingCountBaseConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RestApiPollerRequestPagingCountBaseConfig if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RestApiPollerRequestPagingCountBaseConfig.
     */
    public static RestApiPollerRequestPagingCountBaseConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RestApiPollerRequestPagingCountBaseConfig deserializedRestApiPollerRequestPagingCountBaseConfig
                = new RestApiPollerRequestPagingCountBaseConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pagingType".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingCountBaseConfig
                        .withPagingType(RestApiPollerRequestPagingKind.fromString(reader.getString()));
                } else if ("pageSize".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingCountBaseConfig
                        .withPageSize(reader.getNullable(JsonReader::getInt));
                } else if ("pageSizeParameterName".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingCountBaseConfig.withPageSizeParameterName(reader.getString());
                } else if ("zeroBasedIndexing".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingCountBaseConfig.zeroBasedIndexing
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("pageCountJsonPath".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingCountBaseConfig.pageCountJsonPath = reader.getString();
                } else if ("pageNumberParaName".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingCountBaseConfig.pageNumberParaName = reader.getString();
                } else if ("pageNumberJsonPath".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingCountBaseConfig.pageNumberJsonPath = reader.getString();
                } else if ("totalResultsJsonPath".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingCountBaseConfig.totalResultsJsonPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRestApiPollerRequestPagingCountBaseConfig;
        });
    }
}
