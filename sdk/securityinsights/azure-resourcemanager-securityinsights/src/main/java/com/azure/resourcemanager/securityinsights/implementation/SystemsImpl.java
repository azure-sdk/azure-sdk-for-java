// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.SystemsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.ListActionsResponseInner;
import com.azure.resourcemanager.securityinsights.fluent.models.SystemInner;
import com.azure.resourcemanager.securityinsights.models.ListActionsResponse;
import com.azure.resourcemanager.securityinsights.models.System;
import com.azure.resourcemanager.securityinsights.models.Systems;
import java.util.UUID;

public final class SystemsImpl implements Systems {
    private static final ClientLogger LOGGER = new ClientLogger(SystemsImpl.class);

    private final SystemsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public SystemsImpl(SystemsClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<System> getWithResponse(String resourceGroupName, String workspaceName, String agentResourceName,
        String systemResourceName, UUID xMsClientWorkspaceId, Context context) {
        Response<SystemInner> inner = this.serviceClient().getWithResponse(resourceGroupName, workspaceName,
            agentResourceName, systemResourceName, xMsClientWorkspaceId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SystemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public System get(String resourceGroupName, String workspaceName, String agentResourceName,
        String systemResourceName) {
        SystemInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, agentResourceName, systemResourceName);
        if (inner != null) {
            return new SystemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName, String agentResourceName,
        String systemResourceName, UUID xMsClientWorkspaceId, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, agentResourceName,
            systemResourceName, xMsClientWorkspaceId, context);
    }

    public void delete(String resourceGroupName, String workspaceName, String agentResourceName,
        String systemResourceName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, agentResourceName, systemResourceName);
    }

    public PagedIterable<System> getAll(String resourceGroupName, String workspaceName, String agentResourceName) {
        PagedIterable<SystemInner> inner
            = this.serviceClient().getAll(resourceGroupName, workspaceName, agentResourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SystemImpl(inner1, this.manager()));
    }

    public PagedIterable<System> getAll(String resourceGroupName, String workspaceName, String agentResourceName,
        UUID xMsClientWorkspaceId, String filter, String orderby, String skipToken, Integer top, Context context) {
        PagedIterable<SystemInner> inner = this.serviceClient().getAll(resourceGroupName, workspaceName,
            agentResourceName, xMsClientWorkspaceId, filter, orderby, skipToken, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SystemImpl(inner1, this.manager()));
    }

    public Response<ListActionsResponse> listActionsWithResponse(String resourceGroupName, String workspaceName,
        String agentResourceName, String systemResourceName, Context context) {
        Response<ListActionsResponseInner> inner = this.serviceClient().listActionsWithResponse(resourceGroupName,
            workspaceName, agentResourceName, systemResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ListActionsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ListActionsResponse listActions(String resourceGroupName, String workspaceName, String agentResourceName,
        String systemResourceName) {
        ListActionsResponseInner inner
            = this.serviceClient().listActions(resourceGroupName, workspaceName, agentResourceName, systemResourceName);
        if (inner != null) {
            return new ListActionsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> performActionWithResponse(String resourceGroupName, String workspaceName,
        String agentResourceName, String systemResourceName, Object payload, Context context) {
        return this.serviceClient().performActionWithResponse(resourceGroupName, workspaceName, agentResourceName,
            systemResourceName, payload, context);
    }

    public void performAction(String resourceGroupName, String workspaceName, String agentResourceName,
        String systemResourceName) {
        this.serviceClient().performAction(resourceGroupName, workspaceName, agentResourceName, systemResourceName);
    }

    public Response<Void> reportActionStatusWithResponse(String resourceGroupName, String workspaceName,
        String agentResourceName, String systemResourceName, Object payload, Context context) {
        return this.serviceClient().reportActionStatusWithResponse(resourceGroupName, workspaceName, agentResourceName,
            systemResourceName, payload, context);
    }

    public void reportActionStatus(String resourceGroupName, String workspaceName, String agentResourceName,
        String systemResourceName) {
        this.serviceClient().reportActionStatus(resourceGroupName, workspaceName, agentResourceName,
            systemResourceName);
    }

    public System getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String agentResourceName = ResourceManagerUtils.getValueFromIdByName(id, "businessApplicationAgents");
        if (agentResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'businessApplicationAgents'.", id)));
        }
        String systemResourceName = ResourceManagerUtils.getValueFromIdByName(id, "systems");
        if (systemResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'systems'.", id)));
        }
        UUID localXMsClientWorkspaceId = null;
        return this.getWithResponse(resourceGroupName, workspaceName, agentResourceName, systemResourceName,
            localXMsClientWorkspaceId, Context.NONE).getValue();
    }

    public Response<System> getByIdWithResponse(String id, UUID xMsClientWorkspaceId, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String agentResourceName = ResourceManagerUtils.getValueFromIdByName(id, "businessApplicationAgents");
        if (agentResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'businessApplicationAgents'.", id)));
        }
        String systemResourceName = ResourceManagerUtils.getValueFromIdByName(id, "systems");
        if (systemResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'systems'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, agentResourceName, systemResourceName,
            xMsClientWorkspaceId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String agentResourceName = ResourceManagerUtils.getValueFromIdByName(id, "businessApplicationAgents");
        if (agentResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'businessApplicationAgents'.", id)));
        }
        String systemResourceName = ResourceManagerUtils.getValueFromIdByName(id, "systems");
        if (systemResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'systems'.", id)));
        }
        UUID localXMsClientWorkspaceId = null;
        this.deleteWithResponse(resourceGroupName, workspaceName, agentResourceName, systemResourceName,
            localXMsClientWorkspaceId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, UUID xMsClientWorkspaceId, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String agentResourceName = ResourceManagerUtils.getValueFromIdByName(id, "businessApplicationAgents");
        if (agentResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'businessApplicationAgents'.", id)));
        }
        String systemResourceName = ResourceManagerUtils.getValueFromIdByName(id, "systems");
        if (systemResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'systems'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, agentResourceName, systemResourceName,
            xMsClientWorkspaceId, context);
    }

    private SystemsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    public SystemImpl define(String name) {
        return new SystemImpl(name, this.manager());
    }
}
