// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The exposure status of the connector to the customers.
 */
@Fluent
public final class ConnectorDefinitionsAvailability implements JsonSerializable<ConnectorDefinitionsAvailability> {
    /*
     * The exposure status of the connector to the customers. Available values are 0-4 (0=None, 1=Available,
     * 2=FeatureFlag, 3=Internal).
     */
    private Integer status;

    /*
     * Gets or sets a value indicating whether the connector is preview.
     */
    private Boolean isPreview;

    /**
     * Creates an instance of ConnectorDefinitionsAvailability class.
     */
    public ConnectorDefinitionsAvailability() {
    }

    /**
     * Get the status property: The exposure status of the connector to the customers. Available values are 0-4 (0=None,
     * 1=Available, 2=FeatureFlag, 3=Internal).
     * 
     * @return the status value.
     */
    public Integer status() {
        return this.status;
    }

    /**
     * Set the status property: The exposure status of the connector to the customers. Available values are 0-4 (0=None,
     * 1=Available, 2=FeatureFlag, 3=Internal).
     * 
     * @param status the status value to set.
     * @return the ConnectorDefinitionsAvailability object itself.
     */
    public ConnectorDefinitionsAvailability withStatus(Integer status) {
        this.status = status;
        return this;
    }

    /**
     * Get the isPreview property: Gets or sets a value indicating whether the connector is preview.
     * 
     * @return the isPreview value.
     */
    public Boolean isPreview() {
        return this.isPreview;
    }

    /**
     * Set the isPreview property: Gets or sets a value indicating whether the connector is preview.
     * 
     * @param isPreview the isPreview value to set.
     * @return the ConnectorDefinitionsAvailability object itself.
     */
    public ConnectorDefinitionsAvailability withIsPreview(Boolean isPreview) {
        this.isPreview = isPreview;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("status", this.status);
        jsonWriter.writeBooleanField("isPreview", this.isPreview);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectorDefinitionsAvailability from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectorDefinitionsAvailability if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectorDefinitionsAvailability.
     */
    public static ConnectorDefinitionsAvailability fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectorDefinitionsAvailability deserializedConnectorDefinitionsAvailability
                = new ConnectorDefinitionsAvailability();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedConnectorDefinitionsAvailability.status = reader.getNullable(JsonReader::getInt);
                } else if ("isPreview".equals(fieldName)) {
                    deserializedConnectorDefinitionsAvailability.isPreview = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectorDefinitionsAvailability;
        });
    }
}
