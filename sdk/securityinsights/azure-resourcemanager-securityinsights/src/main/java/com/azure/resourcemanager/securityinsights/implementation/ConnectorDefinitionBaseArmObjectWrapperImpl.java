// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.securityinsights.fluent.models.ConnectorDefinitionBaseArmObjectWrapperInner;
import com.azure.resourcemanager.securityinsights.models.ConnectorDefinitionBaseArmObjectWrapper;
import com.azure.resourcemanager.securityinsights.models.ConnectorDefinitionBaseArmObjectWrapperWithConverter;
import java.time.OffsetDateTime;

public final class ConnectorDefinitionBaseArmObjectWrapperImpl
    implements ConnectorDefinitionBaseArmObjectWrapper,
        ConnectorDefinitionBaseArmObjectWrapper.Definition,
        ConnectorDefinitionBaseArmObjectWrapper.Update {
    private ConnectorDefinitionBaseArmObjectWrapperInner innerObject;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public OffsetDateTime createdTimeUtc() {
        return this.innerModel().createdTimeUtc();
    }

    public OffsetDateTime lastModifiedUtc() {
        return this.innerModel().lastModifiedUtc();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ConnectorDefinitionBaseArmObjectWrapperInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String workspaceName;

    private String dataConnectorDefinitionName;

    private ConnectorDefinitionBaseArmObjectWrapperWithConverter createConnectorDefinitionInput;

    private ConnectorDefinitionBaseArmObjectWrapperWithConverter updateConnectorDefinitionInput;

    public ConnectorDefinitionBaseArmObjectWrapperImpl withExistingWorkspace(
        String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    public ConnectorDefinitionBaseArmObjectWrapper create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorDefinitions()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    workspaceName,
                    dataConnectorDefinitionName,
                    createConnectorDefinitionInput,
                    Context.NONE)
                .getValue();
        return this;
    }

    public ConnectorDefinitionBaseArmObjectWrapper create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorDefinitions()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    workspaceName,
                    dataConnectorDefinitionName,
                    createConnectorDefinitionInput,
                    context)
                .getValue();
        return this;
    }

    ConnectorDefinitionBaseArmObjectWrapperImpl(
        String name, com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerObject = new ConnectorDefinitionBaseArmObjectWrapperInner();
        this.serviceManager = serviceManager;
        this.dataConnectorDefinitionName = name;
        this.createConnectorDefinitionInput = new ConnectorDefinitionBaseArmObjectWrapperWithConverter();
    }

    public ConnectorDefinitionBaseArmObjectWrapperImpl update() {
        this.updateConnectorDefinitionInput = new ConnectorDefinitionBaseArmObjectWrapperWithConverter();
        return this;
    }

    public ConnectorDefinitionBaseArmObjectWrapper apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorDefinitions()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    workspaceName,
                    dataConnectorDefinitionName,
                    updateConnectorDefinitionInput,
                    Context.NONE)
                .getValue();
        return this;
    }

    public ConnectorDefinitionBaseArmObjectWrapper apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorDefinitions()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    workspaceName,
                    dataConnectorDefinitionName,
                    updateConnectorDefinitionInput,
                    context)
                .getValue();
        return this;
    }

    ConnectorDefinitionBaseArmObjectWrapperImpl(
        ConnectorDefinitionBaseArmObjectWrapperInner innerObject,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = Utils.getValueFromIdByName(innerObject.id(), "workspaces");
        this.dataConnectorDefinitionName = Utils.getValueFromIdByName(innerObject.id(), "dataConnectorDefinitions");
    }

    public ConnectorDefinitionBaseArmObjectWrapper refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorDefinitions()
                .getWithResponse(resourceGroupName, workspaceName, dataConnectorDefinitionName, Context.NONE)
                .getValue();
        return this;
    }

    public ConnectorDefinitionBaseArmObjectWrapper refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorDefinitions()
                .getWithResponse(resourceGroupName, workspaceName, dataConnectorDefinitionName, context)
                .getValue();
        return this;
    }

    public ConnectorDefinitionBaseArmObjectWrapperImpl withEtag(String etag) {
        if (isInCreateMode()) {
            this.createConnectorDefinitionInput.withEtag(etag);
            return this;
        } else {
            this.updateConnectorDefinitionInput.withEtag(etag);
            return this;
        }
    }

    public ConnectorDefinitionBaseArmObjectWrapperImpl withCreatedTimeUtc(OffsetDateTime createdTimeUtc) {
        if (isInCreateMode()) {
            this.createConnectorDefinitionInput.withCreatedTimeUtc(createdTimeUtc);
            return this;
        } else {
            this.updateConnectorDefinitionInput.withCreatedTimeUtc(createdTimeUtc);
            return this;
        }
    }

    public ConnectorDefinitionBaseArmObjectWrapperImpl withLastModifiedUtc(OffsetDateTime lastModifiedUtc) {
        if (isInCreateMode()) {
            this.createConnectorDefinitionInput.withLastModifiedUtc(lastModifiedUtc);
            return this;
        } else {
            this.updateConnectorDefinitionInput.withLastModifiedUtc(lastModifiedUtc);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
