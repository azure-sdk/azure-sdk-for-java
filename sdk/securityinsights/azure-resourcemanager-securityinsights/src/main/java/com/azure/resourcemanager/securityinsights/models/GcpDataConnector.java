// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.fluent.models.DataConnectorInner;
import com.azure.resourcemanager.securityinsights.fluent.models.GcpDataConnectorProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Represents Google Cloud Platform data connector.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("GCP")
@Fluent
public final class GcpDataConnector extends DataConnectorInner {
    /*
     * Google Cloud Platform data connector properties.
     */
    @JsonProperty(value = "properties")
    private GcpDataConnectorProperties innerProperties;

    /**
     * Creates an instance of GcpDataConnector class.
     */
    public GcpDataConnector() {
    }

    /**
     * Get the innerProperties property: Google Cloud Platform data connector properties.
     * 
     * @return the innerProperties value.
     */
    private GcpDataConnectorProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GcpDataConnector withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the connectorDefinitionName property: The name of the connector definition that represents the UI config.
     * 
     * @return the connectorDefinitionName value.
     */
    public String connectorDefinitionName() {
        return this.innerProperties() == null ? null : this.innerProperties().connectorDefinitionName();
    }

    /**
     * Set the connectorDefinitionName property: The name of the connector definition that represents the UI config.
     * 
     * @param connectorDefinitionName the connectorDefinitionName value to set.
     * @return the GcpDataConnector object itself.
     */
    public GcpDataConnector withConnectorDefinitionName(String connectorDefinitionName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GcpDataConnectorProperties();
        }
        this.innerProperties().withConnectorDefinitionName(connectorDefinitionName);
        return this;
    }

    /**
     * Get the auth property: The auth section of the connector.
     * 
     * @return the auth value.
     */
    public GcpAuthProperties auth() {
        return this.innerProperties() == null ? null : this.innerProperties().auth();
    }

    /**
     * Set the auth property: The auth section of the connector.
     * 
     * @param auth the auth value to set.
     * @return the GcpDataConnector object itself.
     */
    public GcpDataConnector withAuth(GcpAuthProperties auth) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GcpDataConnectorProperties();
        }
        this.innerProperties().withAuth(auth);
        return this;
    }

    /**
     * Get the request property: The request section of the connector.
     * 
     * @return the request value.
     */
    public GcpRequestProperties request() {
        return this.innerProperties() == null ? null : this.innerProperties().request();
    }

    /**
     * Set the request property: The request section of the connector.
     * 
     * @param request the request value to set.
     * @return the GcpDataConnector object itself.
     */
    public GcpDataConnector withRequest(GcpRequestProperties request) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GcpDataConnectorProperties();
        }
        this.innerProperties().withRequest(request);
        return this;
    }

    /**
     * Get the dcrConfig property: The configuration of the destination of the data.
     * 
     * @return the dcrConfig value.
     */
    public DcrConfiguration dcrConfig() {
        return this.innerProperties() == null ? null : this.innerProperties().dcrConfig();
    }

    /**
     * Set the dcrConfig property: The configuration of the destination of the data.
     * 
     * @param dcrConfig the dcrConfig value to set.
     * @return the GcpDataConnector object itself.
     */
    public GcpDataConnector withDcrConfig(DcrConfiguration dcrConfig) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GcpDataConnectorProperties();
        }
        this.innerProperties().withDcrConfig(dcrConfig);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
