// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.fluent.models.TIObjectCommonProperties;
import com.azure.resourcemanager.securityinsights.fluent.models.TIObjectInner;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * Represents an indicator in Azure Security Insights.
 */
@Fluent
public final class Indicator extends TIObjectInner {
    /*
     * The kind of the TI object
     */
    private TIObjectKind kind = TIObjectKind.INDICATOR;

    /*
     * The observables of this indicator
     */
    private List<IndicatorObservablesItem> observables;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The properties of the TI object
     */
    private TIObjectCommonProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /**
     * Creates an instance of Indicator class.
     */
    public Indicator() {
    }

    /**
     * Get the kind property: The kind of the TI object.
     * 
     * @return the kind value.
     */
    @Override
    public TIObjectKind kind() {
        return this.kind;
    }

    /**
     * Get the observables property: The observables of this indicator.
     * 
     * @return the observables value.
     */
    public List<IndicatorObservablesItem> observables() {
        return this.observables;
    }

    /**
     * Set the observables property: The observables of this indicator.
     * 
     * @param observables the observables value to set.
     * @return the Indicator object itself.
     */
    public Indicator withObservables(List<IndicatorObservablesItem> observables) {
        this.observables = observables;
        return this;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties of the TI object.
     * 
     * @return the innerProperties value.
     */
    private TIObjectCommonProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the data property: The core STIX object that this TI object represents.
     * 
     * @return the data value.
     */
    public Map<String, Object> data() {
        return this.innerProperties() == null ? null : this.innerProperties().data();
    }

    /**
     * Get the createdBy property: The UserInfo of the user/entity which originally created this TI object.
     * 
     * @return the createdBy value.
     */
    public UserInfoAutoGenerated createdBy() {
        return this.innerProperties() == null ? null : this.innerProperties().createdBy();
    }

    /**
     * Get the source property: The source name for this TI object.
     * 
     * @return the source value.
     */
    public String source() {
        return this.innerProperties() == null ? null : this.innerProperties().source();
    }

    /**
     * Get the firstIngestedTimeUtc property: The timestamp for the first time this object was ingested.
     * 
     * @return the firstIngestedTimeUtc value.
     */
    public OffsetDateTime firstIngestedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().firstIngestedTimeUtc();
    }

    /**
     * Get the lastIngestedTimeUtc property: The timestamp for the last time this object was ingested.
     * 
     * @return the lastIngestedTimeUtc value.
     */
    public OffsetDateTime lastIngestedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastIngestedTimeUtc();
    }

    /**
     * Get the ingestionRulesVersion property: The ID of the rules version that was active when this TI object was last
     * ingested.
     * 
     * @return the ingestionRulesVersion value.
     */
    public UUID ingestionRulesVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().ingestionRulesVersion();
    }

    /**
     * Get the lastUpdateMethod property: The name of the method/application that initiated the last write to this TI
     * object.
     * 
     * @return the lastUpdateMethod value.
     */
    public String lastUpdateMethod() {
        return this.innerProperties() == null ? null : this.innerProperties().lastUpdateMethod();
    }

    /**
     * Get the lastModifiedBy property: The UserInfo of the user/entity which last modified this TI object.
     * 
     * @return the lastModifiedBy value.
     */
    public UserInfoAutoGenerated lastModifiedBy() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedBy();
    }

    /**
     * Get the lastUpdatedDateTimeUtc property: The timestamp for the last time this TI object was updated.
     * 
     * @return the lastUpdatedDateTimeUtc value.
     */
    public OffsetDateTime lastUpdatedDateTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastUpdatedDateTimeUtc();
    }

    /**
     * Get the relationshipHints property: A dictionary used to help follow relationships from this object to other STIX
     * objects. The keys are field names from the STIX object (in the 'data' field), and the values are lists of sources
     * that can be prepended to the object ID in order to efficiently locate the target TI object.
     * 
     * @return the relationshipHints value.
     */
    public List<RelationshipHint> relationshipHints() {
        return this.innerProperties() == null ? null : this.innerProperties().relationshipHints();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (observables() != null) {
            observables().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", innerProperties());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeArrayField("observables", this.observables, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Indicator from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Indicator if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Indicator.
     */
    public static Indicator fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Indicator deserializedIndicator = new Indicator();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedIndicator.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedIndicator.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedIndicator.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedIndicator.innerProperties = TIObjectCommonProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedIndicator.systemData = SystemData.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedIndicator.kind = TIObjectKind.fromString(reader.getString());
                } else if ("observables".equals(fieldName)) {
                    List<IndicatorObservablesItem> observables
                        = reader.readArray(reader1 -> IndicatorObservablesItem.fromJson(reader1));
                    deserializedIndicator.observables = observables;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndicator;
        });
    }
}
