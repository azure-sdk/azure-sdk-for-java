// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The DataConnectorsSectionData model. */
@Fluent
public final class DataConnectorsSectionData {
    /*
     * A dictionary of all active connectors
     */
    @JsonProperty(value = "activeConnectors")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> activeConnectors;

    /*
     * A series of anomaly ingested events
     */
    @JsonProperty(value = "anomaliesVolume")
    private List<String> anomaliesVolume;

    /*
     * Aggregation of all threat intelligence ingested events by type: 'URL',
     * 'IP', 'Email', 'Other', ...
     */
    @JsonProperty(value = "tiByType")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tiByType;

    /*
     * A series of all ingested events
     */
    @JsonProperty(value = "totalVolume")
    private List<String> totalVolume;

    /*
     * A dictionary of all unhealthy connectors
     */
    @JsonProperty(value = "unhealthyConnectors")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> unhealthyConnectors;

    /**
     * Get the activeConnectors property: A dictionary of all active connectors.
     *
     * @return the activeConnectors value.
     */
    public Map<String, String> activeConnectors() {
        return this.activeConnectors;
    }

    /**
     * Set the activeConnectors property: A dictionary of all active connectors.
     *
     * @param activeConnectors the activeConnectors value to set.
     * @return the DataConnectorsSectionData object itself.
     */
    public DataConnectorsSectionData withActiveConnectors(Map<String, String> activeConnectors) {
        this.activeConnectors = activeConnectors;
        return this;
    }

    /**
     * Get the anomaliesVolume property: A series of anomaly ingested events.
     *
     * @return the anomaliesVolume value.
     */
    public List<String> anomaliesVolume() {
        return this.anomaliesVolume;
    }

    /**
     * Set the anomaliesVolume property: A series of anomaly ingested events.
     *
     * @param anomaliesVolume the anomaliesVolume value to set.
     * @return the DataConnectorsSectionData object itself.
     */
    public DataConnectorsSectionData withAnomaliesVolume(List<String> anomaliesVolume) {
        this.anomaliesVolume = anomaliesVolume;
        return this;
    }

    /**
     * Get the tiByType property: Aggregation of all threat intelligence ingested events by type: 'URL', 'IP', 'Email',
     * 'Other', ...
     *
     * @return the tiByType value.
     */
    public Map<String, String> tiByType() {
        return this.tiByType;
    }

    /**
     * Set the tiByType property: Aggregation of all threat intelligence ingested events by type: 'URL', 'IP', 'Email',
     * 'Other', ...
     *
     * @param tiByType the tiByType value to set.
     * @return the DataConnectorsSectionData object itself.
     */
    public DataConnectorsSectionData withTiByType(Map<String, String> tiByType) {
        this.tiByType = tiByType;
        return this;
    }

    /**
     * Get the totalVolume property: A series of all ingested events.
     *
     * @return the totalVolume value.
     */
    public List<String> totalVolume() {
        return this.totalVolume;
    }

    /**
     * Set the totalVolume property: A series of all ingested events.
     *
     * @param totalVolume the totalVolume value to set.
     * @return the DataConnectorsSectionData object itself.
     */
    public DataConnectorsSectionData withTotalVolume(List<String> totalVolume) {
        this.totalVolume = totalVolume;
        return this;
    }

    /**
     * Get the unhealthyConnectors property: A dictionary of all unhealthy connectors.
     *
     * @return the unhealthyConnectors value.
     */
    public Map<String, String> unhealthyConnectors() {
        return this.unhealthyConnectors;
    }

    /**
     * Set the unhealthyConnectors property: A dictionary of all unhealthy connectors.
     *
     * @param unhealthyConnectors the unhealthyConnectors value to set.
     * @return the DataConnectorsSectionData object itself.
     */
    public DataConnectorsSectionData withUnhealthyConnectors(Map<String, String> unhealthyConnectors) {
        this.unhealthyConnectors = unhealthyConnectors;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
