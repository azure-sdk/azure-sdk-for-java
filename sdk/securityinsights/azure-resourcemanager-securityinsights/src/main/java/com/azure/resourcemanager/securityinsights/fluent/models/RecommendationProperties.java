// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.RecommendedSuggestion;
import com.azure.resourcemanager.securityinsights.models.State;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Recommendation properties object.
 */
@Fluent
public final class RecommendationProperties implements JsonSerializable<RecommendationProperties> {
    /*
     * Id of the recommendation type.
     */
    private String recommendationTypeId;

    /*
     * State of the recommendation.
     */
    private State state;

    /*
     * Title of the recommendation.
     */
    private String title;

    /*
     * Description of the recommendation.
     */
    private String description;

    /*
     * The time stamp (UTC) when the recommendation was created.
     */
    private OffsetDateTime creationTimeUtc;

    /*
     * The time stamp (UTC) when the recommendation was last evaluated.
     */
    private OffsetDateTime lastEvaluatedTimeUtc;

    /*
     * The time stamp (UTC) when the recommendation was last modified.
     */
    private OffsetDateTime lastModifiedTimeUtc;

    /*
     * List of suggestions to take for this recommendation.
     */
    private List<RecommendedSuggestion> suggestions;

    /*
     * Id of the resource this recommendation refers to.
     */
    private String resourceId;

    /*
     * Collection of additional properties for the recommendation.
     */
    private Map<String, String> additionalProperties;

    /**
     * Creates an instance of RecommendationProperties class.
     */
    public RecommendationProperties() {
    }

    /**
     * Get the recommendationTypeId property: Id of the recommendation type.
     * 
     * @return the recommendationTypeId value.
     */
    public String recommendationTypeId() {
        return this.recommendationTypeId;
    }

    /**
     * Set the recommendationTypeId property: Id of the recommendation type.
     * 
     * @param recommendationTypeId the recommendationTypeId value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withRecommendationTypeId(String recommendationTypeId) {
        this.recommendationTypeId = recommendationTypeId;
        return this;
    }

    /**
     * Get the state property: State of the recommendation.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the recommendation.
     * 
     * @param state the state value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the title property: Title of the recommendation.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Title of the recommendation.
     * 
     * @param title the title value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: Description of the recommendation.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the recommendation.
     * 
     * @param description the description value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the creationTimeUtc property: The time stamp (UTC) when the recommendation was created.
     * 
     * @return the creationTimeUtc value.
     */
    public OffsetDateTime creationTimeUtc() {
        return this.creationTimeUtc;
    }

    /**
     * Set the creationTimeUtc property: The time stamp (UTC) when the recommendation was created.
     * 
     * @param creationTimeUtc the creationTimeUtc value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withCreationTimeUtc(OffsetDateTime creationTimeUtc) {
        this.creationTimeUtc = creationTimeUtc;
        return this;
    }

    /**
     * Get the lastEvaluatedTimeUtc property: The time stamp (UTC) when the recommendation was last evaluated.
     * 
     * @return the lastEvaluatedTimeUtc value.
     */
    public OffsetDateTime lastEvaluatedTimeUtc() {
        return this.lastEvaluatedTimeUtc;
    }

    /**
     * Set the lastEvaluatedTimeUtc property: The time stamp (UTC) when the recommendation was last evaluated.
     * 
     * @param lastEvaluatedTimeUtc the lastEvaluatedTimeUtc value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withLastEvaluatedTimeUtc(OffsetDateTime lastEvaluatedTimeUtc) {
        this.lastEvaluatedTimeUtc = lastEvaluatedTimeUtc;
        return this;
    }

    /**
     * Get the lastModifiedTimeUtc property: The time stamp (UTC) when the recommendation was last modified.
     * 
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.lastModifiedTimeUtc;
    }

    /**
     * Set the lastModifiedTimeUtc property: The time stamp (UTC) when the recommendation was last modified.
     * 
     * @param lastModifiedTimeUtc the lastModifiedTimeUtc value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withLastModifiedTimeUtc(OffsetDateTime lastModifiedTimeUtc) {
        this.lastModifiedTimeUtc = lastModifiedTimeUtc;
        return this;
    }

    /**
     * Get the suggestions property: List of suggestions to take for this recommendation.
     * 
     * @return the suggestions value.
     */
    public List<RecommendedSuggestion> suggestions() {
        return this.suggestions;
    }

    /**
     * Set the suggestions property: List of suggestions to take for this recommendation.
     * 
     * @param suggestions the suggestions value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withSuggestions(List<RecommendedSuggestion> suggestions) {
        this.suggestions = suggestions;
        return this;
    }

    /**
     * Get the resourceId property: Id of the resource this recommendation refers to.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: Id of the resource this recommendation refers to.
     * 
     * @param resourceId the resourceId value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the additionalProperties property: Collection of additional properties for the recommendation.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, String> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Collection of additional properties for the recommendation.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withAdditionalProperties(Map<String, String> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recommendationTypeId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property recommendationTypeId in model RecommendationProperties"));
        }
        if (state() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property state in model RecommendationProperties"));
        }
        if (title() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property title in model RecommendationProperties"));
        }
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property description in model RecommendationProperties"));
        }
        if (creationTimeUtc() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property creationTimeUtc in model RecommendationProperties"));
        }
        if (lastEvaluatedTimeUtc() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property lastEvaluatedTimeUtc in model RecommendationProperties"));
        }
        if (lastModifiedTimeUtc() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property lastModifiedTimeUtc in model RecommendationProperties"));
        }
        if (suggestions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property suggestions in model RecommendationProperties"));
        } else {
            suggestions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RecommendationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("recommendationTypeId", this.recommendationTypeId);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("creationTimeUtc",
            this.creationTimeUtc == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTimeUtc));
        jsonWriter.writeStringField("lastEvaluatedTimeUtc",
            this.lastEvaluatedTimeUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastEvaluatedTimeUtc));
        jsonWriter.writeStringField("lastModifiedTimeUtc",
            this.lastModifiedTimeUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModifiedTimeUtc));
        jsonWriter.writeArrayField("suggestions", this.suggestions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeMapField("additionalProperties", this.additionalProperties,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecommendationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecommendationProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RecommendationProperties.
     */
    public static RecommendationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecommendationProperties deserializedRecommendationProperties = new RecommendationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recommendationTypeId".equals(fieldName)) {
                    deserializedRecommendationProperties.recommendationTypeId = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedRecommendationProperties.state = State.fromString(reader.getString());
                } else if ("title".equals(fieldName)) {
                    deserializedRecommendationProperties.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedRecommendationProperties.description = reader.getString();
                } else if ("creationTimeUtc".equals(fieldName)) {
                    deserializedRecommendationProperties.creationTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastEvaluatedTimeUtc".equals(fieldName)) {
                    deserializedRecommendationProperties.lastEvaluatedTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedTimeUtc".equals(fieldName)) {
                    deserializedRecommendationProperties.lastModifiedTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("suggestions".equals(fieldName)) {
                    List<RecommendedSuggestion> suggestions
                        = reader.readArray(reader1 -> RecommendedSuggestion.fromJson(reader1));
                    deserializedRecommendationProperties.suggestions = suggestions;
                } else if ("resourceId".equals(fieldName)) {
                    deserializedRecommendationProperties.resourceId = reader.getString();
                } else if ("additionalProperties".equals(fieldName)) {
                    Map<String, String> additionalProperties = reader.readMap(reader1 -> reader1.getString());
                    deserializedRecommendationProperties.additionalProperties = additionalProperties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecommendationProperties;
        });
    }
}
