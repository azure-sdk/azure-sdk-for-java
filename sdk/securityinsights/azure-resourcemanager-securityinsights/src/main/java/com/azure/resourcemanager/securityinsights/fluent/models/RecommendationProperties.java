// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.RecommendedSuggestion;
import com.azure.resourcemanager.securityinsights.models.State;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Recommendation properties object.
 */
@Fluent
public final class RecommendationProperties {
    /*
     * Id of the recommendation type.
     */
    @JsonProperty(value = "recommendationTypeId", required = true)
    private String recommendationTypeId;

    /*
     * State of the recommendation.
     */
    @JsonProperty(value = "state", required = true)
    private State state;

    /*
     * Title of the recommendation.
     */
    @JsonProperty(value = "title", required = true)
    private String title;

    /*
     * Description of the recommendation.
     */
    @JsonProperty(value = "description", required = true)
    private String description;

    /*
     * The time stamp (UTC) when the recommendation was created.
     */
    @JsonProperty(value = "creationTimeUtc", required = true)
    private OffsetDateTime creationTimeUtc;

    /*
     * The time stamp (UTC) when the recommendation was last evaluated.
     */
    @JsonProperty(value = "lastEvaluatedTimeUtc", required = true)
    private OffsetDateTime lastEvaluatedTimeUtc;

    /*
     * The time stamp (UTC) when the recommendation was last modified.
     */
    @JsonProperty(value = "lastModifiedTimeUtc", required = true)
    private OffsetDateTime lastModifiedTimeUtc;

    /*
     * List of suggestions to take for this recommendation.
     */
    @JsonProperty(value = "suggestions", required = true)
    private List<RecommendedSuggestion> suggestions;

    /*
     * Id of the resource this recommendation refers to.
     */
    @JsonProperty(value = "resourceId")
    private String resourceId;

    /*
     * Collection of additional properties for the recommendation.
     */
    @JsonProperty(value = "additionalProperties")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> additionalProperties;

    /**
     * Creates an instance of RecommendationProperties class.
     */
    public RecommendationProperties() {
    }

    /**
     * Get the recommendationTypeId property: Id of the recommendation type.
     * 
     * @return the recommendationTypeId value.
     */
    public String recommendationTypeId() {
        return this.recommendationTypeId;
    }

    /**
     * Set the recommendationTypeId property: Id of the recommendation type.
     * 
     * @param recommendationTypeId the recommendationTypeId value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withRecommendationTypeId(String recommendationTypeId) {
        this.recommendationTypeId = recommendationTypeId;
        return this;
    }

    /**
     * Get the state property: State of the recommendation.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the recommendation.
     * 
     * @param state the state value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the title property: Title of the recommendation.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Title of the recommendation.
     * 
     * @param title the title value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: Description of the recommendation.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the recommendation.
     * 
     * @param description the description value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the creationTimeUtc property: The time stamp (UTC) when the recommendation was created.
     * 
     * @return the creationTimeUtc value.
     */
    public OffsetDateTime creationTimeUtc() {
        return this.creationTimeUtc;
    }

    /**
     * Set the creationTimeUtc property: The time stamp (UTC) when the recommendation was created.
     * 
     * @param creationTimeUtc the creationTimeUtc value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withCreationTimeUtc(OffsetDateTime creationTimeUtc) {
        this.creationTimeUtc = creationTimeUtc;
        return this;
    }

    /**
     * Get the lastEvaluatedTimeUtc property: The time stamp (UTC) when the recommendation was last evaluated.
     * 
     * @return the lastEvaluatedTimeUtc value.
     */
    public OffsetDateTime lastEvaluatedTimeUtc() {
        return this.lastEvaluatedTimeUtc;
    }

    /**
     * Set the lastEvaluatedTimeUtc property: The time stamp (UTC) when the recommendation was last evaluated.
     * 
     * @param lastEvaluatedTimeUtc the lastEvaluatedTimeUtc value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withLastEvaluatedTimeUtc(OffsetDateTime lastEvaluatedTimeUtc) {
        this.lastEvaluatedTimeUtc = lastEvaluatedTimeUtc;
        return this;
    }

    /**
     * Get the lastModifiedTimeUtc property: The time stamp (UTC) when the recommendation was last modified.
     * 
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.lastModifiedTimeUtc;
    }

    /**
     * Set the lastModifiedTimeUtc property: The time stamp (UTC) when the recommendation was last modified.
     * 
     * @param lastModifiedTimeUtc the lastModifiedTimeUtc value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withLastModifiedTimeUtc(OffsetDateTime lastModifiedTimeUtc) {
        this.lastModifiedTimeUtc = lastModifiedTimeUtc;
        return this;
    }

    /**
     * Get the suggestions property: List of suggestions to take for this recommendation.
     * 
     * @return the suggestions value.
     */
    public List<RecommendedSuggestion> suggestions() {
        return this.suggestions;
    }

    /**
     * Set the suggestions property: List of suggestions to take for this recommendation.
     * 
     * @param suggestions the suggestions value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withSuggestions(List<RecommendedSuggestion> suggestions) {
        this.suggestions = suggestions;
        return this;
    }

    /**
     * Get the resourceId property: Id of the resource this recommendation refers to.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: Id of the resource this recommendation refers to.
     * 
     * @param resourceId the resourceId value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the additionalProperties property: Collection of additional properties for the recommendation.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, String> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Collection of additional properties for the recommendation.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the RecommendationProperties object itself.
     */
    public RecommendationProperties withAdditionalProperties(Map<String, String> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recommendationTypeId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property recommendationTypeId in model RecommendationProperties"));
        }
        if (state() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property state in model RecommendationProperties"));
        }
        if (title() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property title in model RecommendationProperties"));
        }
        if (description() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property description in model RecommendationProperties"));
        }
        if (creationTimeUtc() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property creationTimeUtc in model RecommendationProperties"));
        }
        if (lastEvaluatedTimeUtc() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property lastEvaluatedTimeUtc in model RecommendationProperties"));
        }
        if (lastModifiedTimeUtc() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property lastModifiedTimeUtc in model RecommendationProperties"));
        }
        if (suggestions() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property suggestions in model RecommendationProperties"));
        } else {
            suggestions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RecommendationProperties.class);
}
