// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.WorkspaceManagerMembersClient;
import com.azure.resourcemanager.securityinsights.fluent.models.WorkspaceManagerMemberInner;
import com.azure.resourcemanager.securityinsights.models.WorkspaceManagerMember;
import com.azure.resourcemanager.securityinsights.models.WorkspaceManagerMembers;

public final class WorkspaceManagerMembersImpl implements WorkspaceManagerMembers {
    private static final ClientLogger LOGGER = new ClientLogger(WorkspaceManagerMembersImpl.class);

    private final WorkspaceManagerMembersClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public WorkspaceManagerMembersImpl(WorkspaceManagerMembersClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<WorkspaceManagerMember> list(String resourceGroupName, String workspaceName) {
        PagedIterable<WorkspaceManagerMemberInner> inner = this.serviceClient().list(resourceGroupName, workspaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkspaceManagerMemberImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkspaceManagerMember> list(String resourceGroupName, String workspaceName, String orderby,
        Integer top, String skipToken, Context context) {
        PagedIterable<WorkspaceManagerMemberInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, orderby, top, skipToken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkspaceManagerMemberImpl(inner1, this.manager()));
    }

    public Response<WorkspaceManagerMember> getWithResponse(String resourceGroupName, String workspaceName,
        String workspaceManagerMemberName, Context context) {
        Response<WorkspaceManagerMemberInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            workspaceName, workspaceManagerMemberName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new WorkspaceManagerMemberImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WorkspaceManagerMember get(String resourceGroupName, String workspaceName,
        String workspaceManagerMemberName) {
        WorkspaceManagerMemberInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, workspaceManagerMemberName);
        if (inner != null) {
            return new WorkspaceManagerMemberImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName,
        String workspaceManagerMemberName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, workspaceManagerMemberName,
            context);
    }

    public void delete(String resourceGroupName, String workspaceName, String workspaceManagerMemberName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, workspaceManagerMemberName);
    }

    public WorkspaceManagerMember getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String workspaceManagerMemberName = ResourceManagerUtils.getValueFromIdByName(id, "workspaceManagerMembers");
        if (workspaceManagerMemberName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'workspaceManagerMembers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, workspaceManagerMemberName, Context.NONE)
            .getValue();
    }

    public Response<WorkspaceManagerMember> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String workspaceManagerMemberName = ResourceManagerUtils.getValueFromIdByName(id, "workspaceManagerMembers");
        if (workspaceManagerMemberName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'workspaceManagerMembers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, workspaceManagerMemberName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String workspaceManagerMemberName = ResourceManagerUtils.getValueFromIdByName(id, "workspaceManagerMembers");
        if (workspaceManagerMemberName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'workspaceManagerMembers'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, workspaceManagerMemberName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String workspaceManagerMemberName = ResourceManagerUtils.getValueFromIdByName(id, "workspaceManagerMembers");
        if (workspaceManagerMemberName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'workspaceManagerMembers'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, workspaceManagerMemberName, context);
    }

    private WorkspaceManagerMembersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    public WorkspaceManagerMemberImpl define(String name) {
        return new WorkspaceManagerMemberImpl(name, this.manager());
    }
}
