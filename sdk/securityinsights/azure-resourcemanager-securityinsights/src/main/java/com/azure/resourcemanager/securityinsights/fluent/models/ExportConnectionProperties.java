// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.ContentType;
import com.azure.resourcemanager.securityinsights.models.ExportType;
import com.azure.resourcemanager.securityinsights.models.RepoType;
import com.azure.resourcemanager.securityinsights.models.Repository;
import com.azure.resourcemanager.securityinsights.models.Version;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes export connection properties. */
@Fluent
public final class ExportConnectionProperties {
    /*
     * The id (a Guid) of the export connection
     */
    @JsonProperty(value = "connectionId")
    private String connectionId;

    /*
     * The version number associated with the export connection
     */
    @JsonProperty(value = "version")
    private Version version;

    /*
     * The display name of the export connection
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * A description of the export connection
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The repository type of the export connection
     */
    @JsonProperty(value = "repoType", required = true)
    private RepoType repoType;

    /*
     * Array of export connection content types.
     */
    @JsonProperty(value = "contentTypes", required = true)
    private List<ContentType> contentTypes;

    /*
     * Repository metadata.
     */
    @JsonProperty(value = "repository", required = true)
    private Repository repository;

    /*
     * Export type of the export connection.
     */
    @JsonProperty(value = "exportType")
    private ExportType exportType;

    /*
     * Export type of the export connection.
     */
    @JsonProperty(value = "nextScheduledTime")
    private String nextScheduledTime;

    /** Creates an instance of ExportConnectionProperties class. */
    public ExportConnectionProperties() {
    }

    /**
     * Get the connectionId property: The id (a Guid) of the export connection.
     *
     * @return the connectionId value.
     */
    public String connectionId() {
        return this.connectionId;
    }

    /**
     * Set the connectionId property: The id (a Guid) of the export connection.
     *
     * @param connectionId the connectionId value to set.
     * @return the ExportConnectionProperties object itself.
     */
    public ExportConnectionProperties withConnectionId(String connectionId) {
        this.connectionId = connectionId;
        return this;
    }

    /**
     * Get the version property: The version number associated with the export connection.
     *
     * @return the version value.
     */
    public Version version() {
        return this.version;
    }

    /**
     * Set the version property: The version number associated with the export connection.
     *
     * @param version the version value to set.
     * @return the ExportConnectionProperties object itself.
     */
    public ExportConnectionProperties withVersion(Version version) {
        this.version = version;
        return this;
    }

    /**
     * Get the displayName property: The display name of the export connection.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the export connection.
     *
     * @param displayName the displayName value to set.
     * @return the ExportConnectionProperties object itself.
     */
    public ExportConnectionProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: A description of the export connection.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description of the export connection.
     *
     * @param description the description value to set.
     * @return the ExportConnectionProperties object itself.
     */
    public ExportConnectionProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the repoType property: The repository type of the export connection.
     *
     * @return the repoType value.
     */
    public RepoType repoType() {
        return this.repoType;
    }

    /**
     * Set the repoType property: The repository type of the export connection.
     *
     * @param repoType the repoType value to set.
     * @return the ExportConnectionProperties object itself.
     */
    public ExportConnectionProperties withRepoType(RepoType repoType) {
        this.repoType = repoType;
        return this;
    }

    /**
     * Get the contentTypes property: Array of export connection content types.
     *
     * @return the contentTypes value.
     */
    public List<ContentType> contentTypes() {
        return this.contentTypes;
    }

    /**
     * Set the contentTypes property: Array of export connection content types.
     *
     * @param contentTypes the contentTypes value to set.
     * @return the ExportConnectionProperties object itself.
     */
    public ExportConnectionProperties withContentTypes(List<ContentType> contentTypes) {
        this.contentTypes = contentTypes;
        return this;
    }

    /**
     * Get the repository property: Repository metadata.
     *
     * @return the repository value.
     */
    public Repository repository() {
        return this.repository;
    }

    /**
     * Set the repository property: Repository metadata.
     *
     * @param repository the repository value to set.
     * @return the ExportConnectionProperties object itself.
     */
    public ExportConnectionProperties withRepository(Repository repository) {
        this.repository = repository;
        return this;
    }

    /**
     * Get the exportType property: Export type of the export connection.
     *
     * @return the exportType value.
     */
    public ExportType exportType() {
        return this.exportType;
    }

    /**
     * Set the exportType property: Export type of the export connection.
     *
     * @param exportType the exportType value to set.
     * @return the ExportConnectionProperties object itself.
     */
    public ExportConnectionProperties withExportType(ExportType exportType) {
        this.exportType = exportType;
        return this;
    }

    /**
     * Get the nextScheduledTime property: Export type of the export connection.
     *
     * @return the nextScheduledTime value.
     */
    public String nextScheduledTime() {
        return this.nextScheduledTime;
    }

    /**
     * Set the nextScheduledTime property: Export type of the export connection.
     *
     * @param nextScheduledTime the nextScheduledTime value to set.
     * @return the ExportConnectionProperties object itself.
     */
    public ExportConnectionProperties withNextScheduledTime(String nextScheduledTime) {
        this.nextScheduledTime = nextScheduledTime;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property displayName in model ExportConnectionProperties"));
        }
        if (repoType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property repoType in model ExportConnectionProperties"));
        }
        if (contentTypes() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property contentTypes in model ExportConnectionProperties"));
        }
        if (repository() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property repository in model ExportConnectionProperties"));
        } else {
            repository().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExportConnectionProperties.class);
}
