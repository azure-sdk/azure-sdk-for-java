// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.fluent.models.QueryProperties;
import java.io.IOException;

/**
 * Represents a query to run on the TI objects in the workspace.
 */
@Fluent
public final class CountQuery implements JsonSerializable<CountQuery> {
    /*
     * Query properties
     */
    private QueryProperties innerProperties;

    /**
     * Creates an instance of CountQuery class.
     */
    public CountQuery() {
    }

    /**
     * Get the innerProperties property: Query properties.
     * 
     * @return the innerProperties value.
     */
    private QueryProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the condition property: Represents a condition used to query for TI objects.
     * 
     * @return the condition value.
     */
    public ConditionProperties condition() {
        return this.innerProperties() == null ? null : this.innerProperties().condition();
    }

    /**
     * Set the condition property: Represents a condition used to query for TI objects.
     * 
     * @param condition the condition value to set.
     * @return the CountQuery object itself.
     */
    public CountQuery withCondition(ConditionProperties condition) {
        if (this.innerProperties() == null) {
            this.innerProperties = new QueryProperties();
        }
        this.innerProperties().withCondition(condition);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CountQuery from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CountQuery if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the CountQuery.
     */
    public static CountQuery fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CountQuery deserializedCountQuery = new CountQuery();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedCountQuery.innerProperties = QueryProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCountQuery;
        });
    }
}
