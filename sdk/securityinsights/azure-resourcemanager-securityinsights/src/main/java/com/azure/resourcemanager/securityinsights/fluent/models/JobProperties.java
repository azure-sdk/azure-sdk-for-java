// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.JobItem;
import com.azure.resourcemanager.securityinsights.models.ProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The job properties.
 */
@Fluent
public final class JobProperties implements JsonSerializable<JobProperties> {
    /*
     * The time the job completed
     */
    private OffsetDateTime endTime;

    /*
     * List of items published by the job
     */
    private List<JobItem> items;

    /*
     * State of the job
     */
    private ProvisioningState provisioningState;

    /*
     * The time the job started
     */
    private OffsetDateTime startTime;

    /*
     * Message to describe error, if an error exists
     */
    private String errorMessage;

    /**
     * Creates an instance of JobProperties class.
     */
    public JobProperties() {
    }

    /**
     * Get the endTime property: The time the job completed.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the items property: List of items published by the job.
     * 
     * @return the items value.
     */
    public List<JobItem> items() {
        return this.items;
    }

    /**
     * Set the items property: List of items published by the job.
     * 
     * @param items the items value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withItems(List<JobItem> items) {
        this.items = items;
        return this;
    }

    /**
     * Get the provisioningState property: State of the job.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the startTime property: The time the job started.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the errorMessage property: Message to describe error, if an error exists.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (items() != null) {
            items().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("items", this.items, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobProperties.
     */
    public static JobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobProperties deserializedJobProperties = new JobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endTime".equals(fieldName)) {
                    deserializedJobProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("items".equals(fieldName)) {
                    List<JobItem> items = reader.readArray(reader1 -> JobItem.fromJson(reader1));
                    deserializedJobProperties.items = items;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedJobProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedJobProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedJobProperties.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobProperties;
        });
    }
}
