// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.JobItem;
import com.azure.resourcemanager.securityinsights.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** The job properties. */
@Fluent
public final class JobProperties {
    /*
     * The time the job completed
     */
    @JsonProperty(value = "endTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime endTime;

    /*
     * List of items published by the job
     */
    @JsonProperty(value = "items")
    private List<JobItem> items;

    /*
     * State of the job
     */
    @JsonProperty(value = "provisioningState", required = true)
    private ProvisioningState provisioningState;

    /*
     * The time the job started
     */
    @JsonProperty(value = "startTime", required = true)
    private OffsetDateTime startTime;

    /*
     * Message to describe error, if an error exists
     */
    @JsonProperty(value = "errorMessage")
    private String errorMessage;

    /** Creates an instance of JobProperties class. */
    public JobProperties() {
    }

    /**
     * Get the endTime property: The time the job completed.
     *
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the items property: List of items published by the job.
     *
     * @return the items value.
     */
    public List<JobItem> items() {
        return this.items;
    }

    /**
     * Set the items property: List of items published by the job.
     *
     * @param items the items value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withItems(List<JobItem> items) {
        this.items = items;
        return this;
    }

    /**
     * Get the provisioningState property: State of the job.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: State of the job.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the startTime property: The time the job started.
     *
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The time the job started.
     *
     * @param startTime the startTime value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the errorMessage property: Message to describe error, if an error exists.
     *
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: Message to describe error, if an error exists.
     *
     * @param errorMessage the errorMessage value to set.
     * @return the JobProperties object itself.
     */
    public JobProperties withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (items() != null) {
            items().forEach(e -> e.validate());
        }
        if (provisioningState() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property provisioningState in model JobProperties"));
        }
        if (startTime() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property startTime in model JobProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobProperties.class);
}
