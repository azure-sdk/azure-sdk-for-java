// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Encapsulate the data connector definition object. */
@Fluent
public final class ConnectorDefinitionBaseArmObjectWrapperInner extends ResourceWithEtag {
    /*
     * An Azure resource, which encapsulate the entire info requires to display a data connector page in Azure portal,
     * and the info required to define data connections.
     */
    @JsonProperty(value = "properties", required = true)
    private ConnectorDefinitionBase innerProperties = new ConnectorDefinitionBase();

    /** Creates an instance of ConnectorDefinitionBaseArmObjectWrapperInner class. */
    public ConnectorDefinitionBaseArmObjectWrapperInner() {
    }

    /**
     * Get the innerProperties property: An Azure resource, which encapsulate the entire info requires to display a data
     * connector page in Azure portal, and the info required to define data connections.
     *
     * @return the innerProperties value.
     */
    private ConnectorDefinitionBase innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public ConnectorDefinitionBaseArmObjectWrapperInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the createdTimeUtc property: Gets or sets the connector definition created date in UTC format.
     *
     * @return the createdTimeUtc value.
     */
    public OffsetDateTime createdTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().createdTimeUtc();
    }

    /**
     * Set the createdTimeUtc property: Gets or sets the connector definition created date in UTC format.
     *
     * @param createdTimeUtc the createdTimeUtc value to set.
     * @return the ConnectorDefinitionBaseArmObjectWrapperInner object itself.
     */
    public ConnectorDefinitionBaseArmObjectWrapperInner withCreatedTimeUtc(OffsetDateTime createdTimeUtc) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConnectorDefinitionBase();
        }
        this.innerProperties().withCreatedTimeUtc(createdTimeUtc);
        return this;
    }

    /**
     * Get the lastModifiedUtc property: Gets or sets the connector definition last modified date in UTC format.
     *
     * @return the lastModifiedUtc value.
     */
    public OffsetDateTime lastModifiedUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedUtc();
    }

    /**
     * Set the lastModifiedUtc property: Gets or sets the connector definition last modified date in UTC format.
     *
     * @param lastModifiedUtc the lastModifiedUtc value to set.
     * @return the ConnectorDefinitionBaseArmObjectWrapperInner object itself.
     */
    public ConnectorDefinitionBaseArmObjectWrapperInner withLastModifiedUtc(OffsetDateTime lastModifiedUtc) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConnectorDefinitionBase();
        }
        this.innerProperties().withLastModifiedUtc(lastModifiedUtc);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model"
                            + " ConnectorDefinitionBaseArmObjectWrapperInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectorDefinitionBaseArmObjectWrapperInner.class);
}
