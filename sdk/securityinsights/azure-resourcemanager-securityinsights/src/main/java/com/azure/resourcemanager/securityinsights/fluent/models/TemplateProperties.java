// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.TemplateSource;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes template properties. */
@Fluent
public final class TemplateProperties {
    /*
     * The content Id of the template
     */
    @JsonProperty(value = "contentId", required = true)
    private String contentId;

    /*
     * the version number of the template
     */
    @JsonProperty(value = "version", required = true)
    private String version;

    /*
     * The display name of the template
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * A description of the template
     */
    @JsonProperty(value = "contentKind", required = true)
    private String contentKind;

    /*
     * The source of the template
     */
    @JsonProperty(value = "source", required = true)
    private TemplateSource source;

    /*
     * The JSON string of the template
     */
    @JsonProperty(value = "mainTemplate")
    private String mainTemplate;

    /*
     * Array of dependent templates.
     */
    @JsonProperty(value = "dependencies")
    private List<TemplateProperties> dependencies;

    /**
     * Get the contentId property: The content Id of the template.
     *
     * @return the contentId value.
     */
    public String contentId() {
        return this.contentId;
    }

    /**
     * Set the contentId property: The content Id of the template.
     *
     * @param contentId the contentId value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withContentId(String contentId) {
        this.contentId = contentId;
        return this;
    }

    /**
     * Get the version property: the version number of the template.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: the version number of the template.
     *
     * @param version the version value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the displayName property: The display name of the template.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the template.
     *
     * @param displayName the displayName value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the contentKind property: A description of the template.
     *
     * @return the contentKind value.
     */
    public String contentKind() {
        return this.contentKind;
    }

    /**
     * Set the contentKind property: A description of the template.
     *
     * @param contentKind the contentKind value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withContentKind(String contentKind) {
        this.contentKind = contentKind;
        return this;
    }

    /**
     * Get the source property: The source of the template.
     *
     * @return the source value.
     */
    public TemplateSource source() {
        return this.source;
    }

    /**
     * Set the source property: The source of the template.
     *
     * @param source the source value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withSource(TemplateSource source) {
        this.source = source;
        return this;
    }

    /**
     * Get the mainTemplate property: The JSON string of the template.
     *
     * @return the mainTemplate value.
     */
    public String mainTemplate() {
        return this.mainTemplate;
    }

    /**
     * Set the mainTemplate property: The JSON string of the template.
     *
     * @param mainTemplate the mainTemplate value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withMainTemplate(String mainTemplate) {
        this.mainTemplate = mainTemplate;
        return this;
    }

    /**
     * Get the dependencies property: Array of dependent templates.
     *
     * @return the dependencies value.
     */
    public List<TemplateProperties> dependencies() {
        return this.dependencies;
    }

    /**
     * Set the dependencies property: Array of dependent templates.
     *
     * @param dependencies the dependencies value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withDependencies(List<TemplateProperties> dependencies) {
        this.dependencies = dependencies;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (contentId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property contentId in model TemplateProperties"));
        }
        if (version() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property version in model TemplateProperties"));
        }
        if (displayName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property displayName in model TemplateProperties"));
        }
        if (contentKind() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property contentKind in model TemplateProperties"));
        }
        if (source() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property source in model TemplateProperties"));
        } else {
            source().validate();
        }
        if (dependencies() != null) {
            dependencies().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TemplateProperties.class);
}
