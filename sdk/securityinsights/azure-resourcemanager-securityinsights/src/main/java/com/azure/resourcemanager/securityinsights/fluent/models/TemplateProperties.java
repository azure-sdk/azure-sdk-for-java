// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.Flag;
import com.azure.resourcemanager.securityinsights.models.Kind;
import com.azure.resourcemanager.securityinsights.models.MetadataAuthor;
import com.azure.resourcemanager.securityinsights.models.MetadataCategories;
import com.azure.resourcemanager.securityinsights.models.MetadataDependencies;
import com.azure.resourcemanager.securityinsights.models.MetadataSource;
import com.azure.resourcemanager.securityinsights.models.MetadataSupport;
import com.azure.resourcemanager.securityinsights.models.PackageKind;
import com.azure.resourcemanager.securityinsights.models.TemplateBaseProperties;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;

/**
 * Template property bag.
 */
@Fluent
public final class TemplateProperties extends TemplateBaseProperties {
    /*
     * The JSON of the ARM template to deploy active content. Expandable.
     */
    private Object mainTemplate;

    /*
     * Dependant templates. Expandable.
     */
    private List<TemplateProperties> dependantTemplates;

    /*
     * Flag indicates if this template is deprecated
     */
    private Flag isDeprecated;

    /**
     * Creates an instance of TemplateProperties class.
     */
    public TemplateProperties() {
    }

    /**
     * Get the mainTemplate property: The JSON of the ARM template to deploy active content. Expandable.
     * 
     * @return the mainTemplate value.
     */
    public Object mainTemplate() {
        return this.mainTemplate;
    }

    /**
     * Set the mainTemplate property: The JSON of the ARM template to deploy active content. Expandable.
     * 
     * @param mainTemplate the mainTemplate value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withMainTemplate(Object mainTemplate) {
        this.mainTemplate = mainTemplate;
        return this;
    }

    /**
     * Get the dependantTemplates property: Dependant templates. Expandable.
     * 
     * @return the dependantTemplates value.
     */
    public List<TemplateProperties> dependantTemplates() {
        return this.dependantTemplates;
    }

    /**
     * Get the isDeprecated property: Flag indicates if this template is deprecated.
     * 
     * @return the isDeprecated value.
     */
    @Override
    public Flag isDeprecated() {
        return this.isDeprecated;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withContentId(String contentId) {
        super.withContentId(contentId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withContentProductId(String contentProductId) {
        super.withContentProductId(contentProductId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withPackageVersion(String packageVersion) {
        super.withPackageVersion(packageVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withVersion(String version) {
        super.withVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withContentKind(Kind contentKind) {
        super.withContentKind(contentKind);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withSource(MetadataSource source) {
        super.withSource(source);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withAuthor(MetadataAuthor author) {
        super.withAuthor(author);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withSupport(MetadataSupport support) {
        super.withSupport(support);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withDependencies(MetadataDependencies dependencies) {
        super.withDependencies(dependencies);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withCategories(MetadataCategories categories) {
        super.withCategories(categories);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withProviders(List<String> providers) {
        super.withProviders(providers);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withFirstPublishDate(LocalDate firstPublishDate) {
        super.withFirstPublishDate(firstPublishDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withLastPublishDate(LocalDate lastPublishDate) {
        super.withLastPublishDate(lastPublishDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withCustomVersion(String customVersion) {
        super.withCustomVersion(customVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withContentSchemaVersion(String contentSchemaVersion) {
        super.withContentSchemaVersion(contentSchemaVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withIcon(String icon) {
        super.withIcon(icon);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withThreatAnalysisTactics(List<String> threatAnalysisTactics) {
        super.withThreatAnalysisTactics(threatAnalysisTactics);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withThreatAnalysisTechniques(List<String> threatAnalysisTechniques) {
        super.withThreatAnalysisTechniques(threatAnalysisTechniques);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withPreviewImages(List<String> previewImages) {
        super.withPreviewImages(previewImages);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withPreviewImagesDark(List<String> previewImagesDark) {
        super.withPreviewImagesDark(previewImagesDark);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withPackageId(String packageId) {
        super.withPackageId(packageId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withPackageKind(PackageKind packageKind) {
        super.withPackageKind(packageKind);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TemplateProperties withPackageName(String packageName) {
        super.withPackageName(packageName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (dependantTemplates() != null) {
            dependantTemplates().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("contentId", contentId());
        jsonWriter.writeStringField("contentProductId", contentProductId());
        jsonWriter.writeStringField("packageVersion", packageVersion());
        jsonWriter.writeStringField("version", version());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("contentKind", contentKind() == null ? null : contentKind().toString());
        jsonWriter.writeJsonField("source", source());
        jsonWriter.writeJsonField("author", author());
        jsonWriter.writeJsonField("support", support());
        jsonWriter.writeJsonField("dependencies", dependencies());
        jsonWriter.writeJsonField("categories", categories());
        jsonWriter.writeArrayField("providers", providers(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("firstPublishDate", Objects.toString(firstPublishDate(), null));
        jsonWriter.writeStringField("lastPublishDate", Objects.toString(lastPublishDate(), null));
        jsonWriter.writeStringField("customVersion", customVersion());
        jsonWriter.writeStringField("contentSchemaVersion", contentSchemaVersion());
        jsonWriter.writeStringField("icon", icon());
        jsonWriter.writeArrayField("threatAnalysisTactics", threatAnalysisTactics(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("threatAnalysisTechniques", threatAnalysisTechniques(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("previewImages", previewImages(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("previewImagesDark", previewImagesDark(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("packageId", packageId());
        jsonWriter.writeStringField("packageKind", packageKind() == null ? null : packageKind().toString());
        jsonWriter.writeStringField("packageName", packageName());
        jsonWriter.writeUntypedField("mainTemplate", this.mainTemplate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TemplateProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TemplateProperties.
     */
    public static TemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TemplateProperties deserializedTemplateProperties = new TemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contentId".equals(fieldName)) {
                    deserializedTemplateProperties.withContentId(reader.getString());
                } else if ("contentProductId".equals(fieldName)) {
                    deserializedTemplateProperties.withContentProductId(reader.getString());
                } else if ("packageVersion".equals(fieldName)) {
                    deserializedTemplateProperties.withPackageVersion(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedTemplateProperties.withVersion(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedTemplateProperties.withDisplayName(reader.getString());
                } else if ("contentKind".equals(fieldName)) {
                    deserializedTemplateProperties.withContentKind(Kind.fromString(reader.getString()));
                } else if ("source".equals(fieldName)) {
                    deserializedTemplateProperties.withSource(MetadataSource.fromJson(reader));
                } else if ("author".equals(fieldName)) {
                    deserializedTemplateProperties.withAuthor(MetadataAuthor.fromJson(reader));
                } else if ("support".equals(fieldName)) {
                    deserializedTemplateProperties.withSupport(MetadataSupport.fromJson(reader));
                } else if ("dependencies".equals(fieldName)) {
                    deserializedTemplateProperties.withDependencies(MetadataDependencies.fromJson(reader));
                } else if ("categories".equals(fieldName)) {
                    deserializedTemplateProperties.withCategories(MetadataCategories.fromJson(reader));
                } else if ("providers".equals(fieldName)) {
                    List<String> providers = reader.readArray(reader1 -> reader1.getString());
                    deserializedTemplateProperties.withProviders(providers);
                } else if ("firstPublishDate".equals(fieldName)) {
                    deserializedTemplateProperties.withFirstPublishDate(
                        reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString())));
                } else if ("lastPublishDate".equals(fieldName)) {
                    deserializedTemplateProperties.withLastPublishDate(
                        reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString())));
                } else if ("customVersion".equals(fieldName)) {
                    deserializedTemplateProperties.withCustomVersion(reader.getString());
                } else if ("contentSchemaVersion".equals(fieldName)) {
                    deserializedTemplateProperties.withContentSchemaVersion(reader.getString());
                } else if ("icon".equals(fieldName)) {
                    deserializedTemplateProperties.withIcon(reader.getString());
                } else if ("threatAnalysisTactics".equals(fieldName)) {
                    List<String> threatAnalysisTactics = reader.readArray(reader1 -> reader1.getString());
                    deserializedTemplateProperties.withThreatAnalysisTactics(threatAnalysisTactics);
                } else if ("threatAnalysisTechniques".equals(fieldName)) {
                    List<String> threatAnalysisTechniques = reader.readArray(reader1 -> reader1.getString());
                    deserializedTemplateProperties.withThreatAnalysisTechniques(threatAnalysisTechniques);
                } else if ("previewImages".equals(fieldName)) {
                    List<String> previewImages = reader.readArray(reader1 -> reader1.getString());
                    deserializedTemplateProperties.withPreviewImages(previewImages);
                } else if ("previewImagesDark".equals(fieldName)) {
                    List<String> previewImagesDark = reader.readArray(reader1 -> reader1.getString());
                    deserializedTemplateProperties.withPreviewImagesDark(previewImagesDark);
                } else if ("packageId".equals(fieldName)) {
                    deserializedTemplateProperties.withPackageId(reader.getString());
                } else if ("packageKind".equals(fieldName)) {
                    deserializedTemplateProperties.withPackageKind(PackageKind.fromString(reader.getString()));
                } else if ("packageName".equals(fieldName)) {
                    deserializedTemplateProperties.withPackageName(reader.getString());
                } else if ("isDeprecated".equals(fieldName)) {
                    deserializedTemplateProperties.isDeprecated = Flag.fromString(reader.getString());
                } else if ("mainTemplate".equals(fieldName)) {
                    deserializedTemplateProperties.mainTemplate = reader.readUntyped();
                } else if ("dependantTemplates".equals(fieldName)) {
                    List<TemplateProperties> dependantTemplates
                        = reader.readArray(reader1 -> TemplateProperties.fromJson(reader1));
                    deserializedTemplateProperties.dependantTemplates = dependantTemplates;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTemplateProperties;
        });
    }
}
