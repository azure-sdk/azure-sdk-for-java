// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.models.Kind;
import com.azure.resourcemanager.securityinsights.models.MetadataAuthor;
import com.azure.resourcemanager.securityinsights.models.MetadataCategories;
import com.azure.resourcemanager.securityinsights.models.MetadataDependencies;
import com.azure.resourcemanager.securityinsights.models.MetadataSource;
import com.azure.resourcemanager.securityinsights.models.MetadataSupport;
import com.azure.resourcemanager.securityinsights.models.PackageKind;
import com.azure.resourcemanager.securityinsights.models.TemplateBaseProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import java.util.List;

/** Template property bag. */
@Fluent
public final class TemplateProperties extends TemplateBaseProperties {
    /*
     * The JSON of the ARM template to deploy active content. Expandable.
     */
    @JsonProperty(value = "mainTemplate")
    private Object mainTemplate;

    /*
     * Dependant templates. Expandable.
     */
    @JsonProperty(value = "dependantTemplates", access = JsonProperty.Access.WRITE_ONLY)
    private List<TemplateProperties> dependantTemplates;

    /** Creates an instance of TemplateProperties class. */
    public TemplateProperties() {
    }

    /**
     * Get the mainTemplate property: The JSON of the ARM template to deploy active content. Expandable.
     *
     * @return the mainTemplate value.
     */
    public Object mainTemplate() {
        return this.mainTemplate;
    }

    /**
     * Set the mainTemplate property: The JSON of the ARM template to deploy active content. Expandable.
     *
     * @param mainTemplate the mainTemplate value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withMainTemplate(Object mainTemplate) {
        this.mainTemplate = mainTemplate;
        return this;
    }

    /**
     * Get the dependantTemplates property: Dependant templates. Expandable.
     *
     * @return the dependantTemplates value.
     */
    public List<TemplateProperties> dependantTemplates() {
        return this.dependantTemplates;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withContentId(String contentId) {
        super.withContentId(contentId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withContentProductId(String contentProductId) {
        super.withContentProductId(contentProductId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withPackageVersion(String packageVersion) {
        super.withPackageVersion(packageVersion);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withVersion(String version) {
        super.withVersion(version);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withContentKind(Kind contentKind) {
        super.withContentKind(contentKind);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withSource(MetadataSource source) {
        super.withSource(source);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withAuthor(MetadataAuthor author) {
        super.withAuthor(author);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withSupport(MetadataSupport support) {
        super.withSupport(support);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withDependencies(MetadataDependencies dependencies) {
        super.withDependencies(dependencies);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withCategories(MetadataCategories categories) {
        super.withCategories(categories);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withProviders(List<String> providers) {
        super.withProviders(providers);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withFirstPublishDate(LocalDate firstPublishDate) {
        super.withFirstPublishDate(firstPublishDate);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withLastPublishDate(LocalDate lastPublishDate) {
        super.withLastPublishDate(lastPublishDate);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withCustomVersion(String customVersion) {
        super.withCustomVersion(customVersion);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withContentSchemaVersion(String contentSchemaVersion) {
        super.withContentSchemaVersion(contentSchemaVersion);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withIcon(String icon) {
        super.withIcon(icon);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withThreatAnalysisTactics(List<String> threatAnalysisTactics) {
        super.withThreatAnalysisTactics(threatAnalysisTactics);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withThreatAnalysisTechniques(List<String> threatAnalysisTechniques) {
        super.withThreatAnalysisTechniques(threatAnalysisTechniques);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withPreviewImages(List<String> previewImages) {
        super.withPreviewImages(previewImages);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withPreviewImagesDark(List<String> previewImagesDark) {
        super.withPreviewImagesDark(previewImagesDark);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withPackageId(String packageId) {
        super.withPackageId(packageId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withPackageKind(PackageKind packageKind) {
        super.withPackageKind(packageKind);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateProperties withPackageName(String packageName) {
        super.withPackageName(packageName);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (dependantTemplates() != null) {
            dependantTemplates().forEach(e -> e.validate());
        }
    }
}
