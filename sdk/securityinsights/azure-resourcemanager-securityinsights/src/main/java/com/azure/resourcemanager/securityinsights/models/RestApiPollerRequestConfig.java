// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * The request configuration.
 */
@Fluent
public final class RestApiPollerRequestConfig {
    /*
     * The API endpoint.
     */
    @JsonProperty(value = "apiEndpoint", required = true)
    private String apiEndpoint;

    /*
     * The Rate limit queries per second for the request..
     */
    @JsonProperty(value = "rateLimitQPS")
    private Integer rateLimitQps;

    /*
     * The query window in minutes for the request.
     */
    @JsonProperty(value = "queryWindowInMin")
    private Integer queryWindowInMin;

    /*
     * The HTTP method, default value GET.
     */
    @JsonProperty(value = "httpMethod")
    private HttpMethodVerb httpMethod;

    /*
     * The query time format. A remote server can have a query to pull data from range 'start' to 'end'. This property indicate what is the expected time format the remote server know to parse.
     */
    @JsonProperty(value = "queryTimeFormat")
    private String queryTimeFormat;

    /*
     * The retry count.
     */
    @JsonProperty(value = "retryCount")
    private Integer retryCount;

    /*
     * The timeout in seconds.
     */
    @JsonProperty(value = "timeoutInSeconds")
    private Integer timeoutInSeconds;

    /*
     * Flag to indicate if HTTP POST payload is in JSON format (vs form-urlencoded).
     */
    @JsonProperty(value = "isPostPayloadJson")
    private Boolean isPostPayloadJson;

    /*
     * The header for the request for the remote server.
     */
    @JsonProperty(value = "headers")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> headers;

    /*
     * The HTTP query parameters to RESTful API.
     */
    @JsonProperty(value = "queryParameters")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, Object> queryParameters;

    /*
     * the query parameters template. Defines the query parameters template to use when passing query parameters in advanced scenarios.
     */
    @JsonProperty(value = "queryParametersTemplate")
    private String queryParametersTemplate;

    /*
     * The query parameter name which the remote server expect to start query. This property goes hand to hand with `endTimeAttributeName`.
     */
    @JsonProperty(value = "startTimeAttributeName")
    private String startTimeAttributeName;

    /*
     * The query parameter name which the remote server expect to end query. This property goes hand to hand with `startTimeAttributeName`
     */
    @JsonProperty(value = "endTimeAttributeName")
    private String endTimeAttributeName;

    /*
     * The query parameter name which we need to send the server for query logs in time interval. Should be defined with `queryTimeIntervalPrepend` and `queryTimeIntervalDelimiter`
     */
    @JsonProperty(value = "queryTimeIntervalAttributeName")
    private String queryTimeIntervalAttributeName;

    /*
     * The string prepend to the value of the query parameter in `queryTimeIntervalAttributeName`.
     */
    @JsonProperty(value = "queryTimeIntervalPrepend")
    private String queryTimeIntervalPrepend;

    /*
     * The delimiter string between 2 QueryTimeFormat in the query parameter `queryTimeIntervalAttributeName`.
     */
    @JsonProperty(value = "queryTimeIntervalDelimiter")
    private String queryTimeIntervalDelimiter;

    /**
     * Creates an instance of RestApiPollerRequestConfig class.
     */
    public RestApiPollerRequestConfig() {
    }

    /**
     * Get the apiEndpoint property: The API endpoint.
     * 
     * @return the apiEndpoint value.
     */
    public String apiEndpoint() {
        return this.apiEndpoint;
    }

    /**
     * Set the apiEndpoint property: The API endpoint.
     * 
     * @param apiEndpoint the apiEndpoint value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withApiEndpoint(String apiEndpoint) {
        this.apiEndpoint = apiEndpoint;
        return this;
    }

    /**
     * Get the rateLimitQps property: The Rate limit queries per second for the request..
     * 
     * @return the rateLimitQps value.
     */
    public Integer rateLimitQps() {
        return this.rateLimitQps;
    }

    /**
     * Set the rateLimitQps property: The Rate limit queries per second for the request..
     * 
     * @param rateLimitQps the rateLimitQps value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withRateLimitQps(Integer rateLimitQps) {
        this.rateLimitQps = rateLimitQps;
        return this;
    }

    /**
     * Get the queryWindowInMin property: The query window in minutes for the request.
     * 
     * @return the queryWindowInMin value.
     */
    public Integer queryWindowInMin() {
        return this.queryWindowInMin;
    }

    /**
     * Set the queryWindowInMin property: The query window in minutes for the request.
     * 
     * @param queryWindowInMin the queryWindowInMin value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryWindowInMin(Integer queryWindowInMin) {
        this.queryWindowInMin = queryWindowInMin;
        return this;
    }

    /**
     * Get the httpMethod property: The HTTP method, default value GET.
     * 
     * @return the httpMethod value.
     */
    public HttpMethodVerb httpMethod() {
        return this.httpMethod;
    }

    /**
     * Set the httpMethod property: The HTTP method, default value GET.
     * 
     * @param httpMethod the httpMethod value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withHttpMethod(HttpMethodVerb httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }

    /**
     * Get the queryTimeFormat property: The query time format. A remote server can have a query to pull data from range
     * 'start' to 'end'. This property indicate what is the expected time format the remote server know to parse.
     * 
     * @return the queryTimeFormat value.
     */
    public String queryTimeFormat() {
        return this.queryTimeFormat;
    }

    /**
     * Set the queryTimeFormat property: The query time format. A remote server can have a query to pull data from range
     * 'start' to 'end'. This property indicate what is the expected time format the remote server know to parse.
     * 
     * @param queryTimeFormat the queryTimeFormat value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryTimeFormat(String queryTimeFormat) {
        this.queryTimeFormat = queryTimeFormat;
        return this;
    }

    /**
     * Get the retryCount property: The retry count.
     * 
     * @return the retryCount value.
     */
    public Integer retryCount() {
        return this.retryCount;
    }

    /**
     * Set the retryCount property: The retry count.
     * 
     * @param retryCount the retryCount value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withRetryCount(Integer retryCount) {
        this.retryCount = retryCount;
        return this;
    }

    /**
     * Get the timeoutInSeconds property: The timeout in seconds.
     * 
     * @return the timeoutInSeconds value.
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    /**
     * Set the timeoutInSeconds property: The timeout in seconds.
     * 
     * @param timeoutInSeconds the timeoutInSeconds value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withTimeoutInSeconds(Integer timeoutInSeconds) {
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * Get the isPostPayloadJson property: Flag to indicate if HTTP POST payload is in JSON format (vs form-urlencoded).
     * 
     * @return the isPostPayloadJson value.
     */
    public Boolean isPostPayloadJson() {
        return this.isPostPayloadJson;
    }

    /**
     * Set the isPostPayloadJson property: Flag to indicate if HTTP POST payload is in JSON format (vs form-urlencoded).
     * 
     * @param isPostPayloadJson the isPostPayloadJson value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withIsPostPayloadJson(Boolean isPostPayloadJson) {
        this.isPostPayloadJson = isPostPayloadJson;
        return this;
    }

    /**
     * Get the headers property: The header for the request for the remote server.
     * 
     * @return the headers value.
     */
    public Map<String, String> headers() {
        return this.headers;
    }

    /**
     * Set the headers property: The header for the request for the remote server.
     * 
     * @param headers the headers value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withHeaders(Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Get the queryParameters property: The HTTP query parameters to RESTful API.
     * 
     * @return the queryParameters value.
     */
    public Map<String, Object> queryParameters() {
        return this.queryParameters;
    }

    /**
     * Set the queryParameters property: The HTTP query parameters to RESTful API.
     * 
     * @param queryParameters the queryParameters value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryParameters(Map<String, Object> queryParameters) {
        this.queryParameters = queryParameters;
        return this;
    }

    /**
     * Get the queryParametersTemplate property: the query parameters template. Defines the query parameters template to
     * use when passing query parameters in advanced scenarios.
     * 
     * @return the queryParametersTemplate value.
     */
    public String queryParametersTemplate() {
        return this.queryParametersTemplate;
    }

    /**
     * Set the queryParametersTemplate property: the query parameters template. Defines the query parameters template to
     * use when passing query parameters in advanced scenarios.
     * 
     * @param queryParametersTemplate the queryParametersTemplate value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryParametersTemplate(String queryParametersTemplate) {
        this.queryParametersTemplate = queryParametersTemplate;
        return this;
    }

    /**
     * Get the startTimeAttributeName property: The query parameter name which the remote server expect to start query.
     * This property goes hand to hand with `endTimeAttributeName`.
     * 
     * @return the startTimeAttributeName value.
     */
    public String startTimeAttributeName() {
        return this.startTimeAttributeName;
    }

    /**
     * Set the startTimeAttributeName property: The query parameter name which the remote server expect to start query.
     * This property goes hand to hand with `endTimeAttributeName`.
     * 
     * @param startTimeAttributeName the startTimeAttributeName value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withStartTimeAttributeName(String startTimeAttributeName) {
        this.startTimeAttributeName = startTimeAttributeName;
        return this;
    }

    /**
     * Get the endTimeAttributeName property: The query parameter name which the remote server expect to end query. This
     * property goes hand to hand with `startTimeAttributeName`.
     * 
     * @return the endTimeAttributeName value.
     */
    public String endTimeAttributeName() {
        return this.endTimeAttributeName;
    }

    /**
     * Set the endTimeAttributeName property: The query parameter name which the remote server expect to end query. This
     * property goes hand to hand with `startTimeAttributeName`.
     * 
     * @param endTimeAttributeName the endTimeAttributeName value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withEndTimeAttributeName(String endTimeAttributeName) {
        this.endTimeAttributeName = endTimeAttributeName;
        return this;
    }

    /**
     * Get the queryTimeIntervalAttributeName property: The query parameter name which we need to send the server for
     * query logs in time interval. Should be defined with `queryTimeIntervalPrepend` and `queryTimeIntervalDelimiter`.
     * 
     * @return the queryTimeIntervalAttributeName value.
     */
    public String queryTimeIntervalAttributeName() {
        return this.queryTimeIntervalAttributeName;
    }

    /**
     * Set the queryTimeIntervalAttributeName property: The query parameter name which we need to send the server for
     * query logs in time interval. Should be defined with `queryTimeIntervalPrepend` and `queryTimeIntervalDelimiter`.
     * 
     * @param queryTimeIntervalAttributeName the queryTimeIntervalAttributeName value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryTimeIntervalAttributeName(String queryTimeIntervalAttributeName) {
        this.queryTimeIntervalAttributeName = queryTimeIntervalAttributeName;
        return this;
    }

    /**
     * Get the queryTimeIntervalPrepend property: The string prepend to the value of the query parameter in
     * `queryTimeIntervalAttributeName`.
     * 
     * @return the queryTimeIntervalPrepend value.
     */
    public String queryTimeIntervalPrepend() {
        return this.queryTimeIntervalPrepend;
    }

    /**
     * Set the queryTimeIntervalPrepend property: The string prepend to the value of the query parameter in
     * `queryTimeIntervalAttributeName`.
     * 
     * @param queryTimeIntervalPrepend the queryTimeIntervalPrepend value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryTimeIntervalPrepend(String queryTimeIntervalPrepend) {
        this.queryTimeIntervalPrepend = queryTimeIntervalPrepend;
        return this;
    }

    /**
     * Get the queryTimeIntervalDelimiter property: The delimiter string between 2 QueryTimeFormat in the query
     * parameter `queryTimeIntervalAttributeName`.
     * 
     * @return the queryTimeIntervalDelimiter value.
     */
    public String queryTimeIntervalDelimiter() {
        return this.queryTimeIntervalDelimiter;
    }

    /**
     * Set the queryTimeIntervalDelimiter property: The delimiter string between 2 QueryTimeFormat in the query
     * parameter `queryTimeIntervalAttributeName`.
     * 
     * @param queryTimeIntervalDelimiter the queryTimeIntervalDelimiter value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryTimeIntervalDelimiter(String queryTimeIntervalDelimiter) {
        this.queryTimeIntervalDelimiter = queryTimeIntervalDelimiter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (apiEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property apiEndpoint in model RestApiPollerRequestConfig"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RestApiPollerRequestConfig.class);
}
