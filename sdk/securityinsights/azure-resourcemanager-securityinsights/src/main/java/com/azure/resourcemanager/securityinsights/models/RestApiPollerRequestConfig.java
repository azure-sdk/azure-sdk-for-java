// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The request configuration.
 */
@Fluent
public final class RestApiPollerRequestConfig implements JsonSerializable<RestApiPollerRequestConfig> {
    /*
     * The API endpoint.
     */
    private String apiEndpoint;

    /*
     * The Rate limit queries per second for the request..
     */
    private Integer rateLimitQps;

    /*
     * The query window in minutes for the request.
     */
    private Integer queryWindowInMin;

    /*
     * The HTTP method, default value GET.
     */
    private HttpMethodVerb httpMethod;

    /*
     * The query time format. A remote server can have a query to pull data from range 'start' to 'end'. This property
     * indicate what is the expected time format the remote server know to parse.
     */
    private String queryTimeFormat;

    /*
     * The retry count.
     */
    private Integer retryCount;

    /*
     * The timeout in seconds.
     */
    private Integer timeoutInSeconds;

    /*
     * Flag to indicate if HTTP POST payload is in JSON format (vs form-urlencoded).
     */
    private Boolean isPostPayloadJson;

    /*
     * The header for the request for the remote server.
     */
    private Map<String, String> headers;

    /*
     * The HTTP query parameters to RESTful API.
     */
    private Map<String, Object> queryParameters;

    /*
     * the query parameters template. Defines the query parameters template to use when passing query parameters in
     * advanced scenarios.
     */
    private String queryParametersTemplate;

    /*
     * The query parameter name which the remote server expect to start query. This property goes hand to hand with
     * `endTimeAttributeName`.
     */
    private String startTimeAttributeName;

    /*
     * The query parameter name which the remote server expect to end query. This property goes hand to hand with
     * `startTimeAttributeName`
     */
    private String endTimeAttributeName;

    /*
     * The query parameter name which we need to send the server for query logs in time interval. Should be defined with
     * `queryTimeIntervalPrepend` and `queryTimeIntervalDelimiter`
     */
    private String queryTimeIntervalAttributeName;

    /*
     * The string prepend to the value of the query parameter in `queryTimeIntervalAttributeName`.
     */
    private String queryTimeIntervalPrepend;

    /*
     * The delimiter string between 2 QueryTimeFormat in the query parameter `queryTimeIntervalAttributeName`.
     */
    private String queryTimeIntervalDelimiter;

    /**
     * Creates an instance of RestApiPollerRequestConfig class.
     */
    public RestApiPollerRequestConfig() {
    }

    /**
     * Get the apiEndpoint property: The API endpoint.
     * 
     * @return the apiEndpoint value.
     */
    public String apiEndpoint() {
        return this.apiEndpoint;
    }

    /**
     * Set the apiEndpoint property: The API endpoint.
     * 
     * @param apiEndpoint the apiEndpoint value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withApiEndpoint(String apiEndpoint) {
        this.apiEndpoint = apiEndpoint;
        return this;
    }

    /**
     * Get the rateLimitQps property: The Rate limit queries per second for the request..
     * 
     * @return the rateLimitQps value.
     */
    public Integer rateLimitQps() {
        return this.rateLimitQps;
    }

    /**
     * Set the rateLimitQps property: The Rate limit queries per second for the request..
     * 
     * @param rateLimitQps the rateLimitQps value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withRateLimitQps(Integer rateLimitQps) {
        this.rateLimitQps = rateLimitQps;
        return this;
    }

    /**
     * Get the queryWindowInMin property: The query window in minutes for the request.
     * 
     * @return the queryWindowInMin value.
     */
    public Integer queryWindowInMin() {
        return this.queryWindowInMin;
    }

    /**
     * Set the queryWindowInMin property: The query window in minutes for the request.
     * 
     * @param queryWindowInMin the queryWindowInMin value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryWindowInMin(Integer queryWindowInMin) {
        this.queryWindowInMin = queryWindowInMin;
        return this;
    }

    /**
     * Get the httpMethod property: The HTTP method, default value GET.
     * 
     * @return the httpMethod value.
     */
    public HttpMethodVerb httpMethod() {
        return this.httpMethod;
    }

    /**
     * Set the httpMethod property: The HTTP method, default value GET.
     * 
     * @param httpMethod the httpMethod value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withHttpMethod(HttpMethodVerb httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }

    /**
     * Get the queryTimeFormat property: The query time format. A remote server can have a query to pull data from range
     * 'start' to 'end'. This property indicate what is the expected time format the remote server know to parse.
     * 
     * @return the queryTimeFormat value.
     */
    public String queryTimeFormat() {
        return this.queryTimeFormat;
    }

    /**
     * Set the queryTimeFormat property: The query time format. A remote server can have a query to pull data from range
     * 'start' to 'end'. This property indicate what is the expected time format the remote server know to parse.
     * 
     * @param queryTimeFormat the queryTimeFormat value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryTimeFormat(String queryTimeFormat) {
        this.queryTimeFormat = queryTimeFormat;
        return this;
    }

    /**
     * Get the retryCount property: The retry count.
     * 
     * @return the retryCount value.
     */
    public Integer retryCount() {
        return this.retryCount;
    }

    /**
     * Set the retryCount property: The retry count.
     * 
     * @param retryCount the retryCount value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withRetryCount(Integer retryCount) {
        this.retryCount = retryCount;
        return this;
    }

    /**
     * Get the timeoutInSeconds property: The timeout in seconds.
     * 
     * @return the timeoutInSeconds value.
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    /**
     * Set the timeoutInSeconds property: The timeout in seconds.
     * 
     * @param timeoutInSeconds the timeoutInSeconds value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withTimeoutInSeconds(Integer timeoutInSeconds) {
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * Get the isPostPayloadJson property: Flag to indicate if HTTP POST payload is in JSON format (vs form-urlencoded).
     * 
     * @return the isPostPayloadJson value.
     */
    public Boolean isPostPayloadJson() {
        return this.isPostPayloadJson;
    }

    /**
     * Set the isPostPayloadJson property: Flag to indicate if HTTP POST payload is in JSON format (vs form-urlencoded).
     * 
     * @param isPostPayloadJson the isPostPayloadJson value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withIsPostPayloadJson(Boolean isPostPayloadJson) {
        this.isPostPayloadJson = isPostPayloadJson;
        return this;
    }

    /**
     * Get the headers property: The header for the request for the remote server.
     * 
     * @return the headers value.
     */
    public Map<String, String> headers() {
        return this.headers;
    }

    /**
     * Set the headers property: The header for the request for the remote server.
     * 
     * @param headers the headers value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withHeaders(Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Get the queryParameters property: The HTTP query parameters to RESTful API.
     * 
     * @return the queryParameters value.
     */
    public Map<String, Object> queryParameters() {
        return this.queryParameters;
    }

    /**
     * Set the queryParameters property: The HTTP query parameters to RESTful API.
     * 
     * @param queryParameters the queryParameters value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryParameters(Map<String, Object> queryParameters) {
        this.queryParameters = queryParameters;
        return this;
    }

    /**
     * Get the queryParametersTemplate property: the query parameters template. Defines the query parameters template to
     * use when passing query parameters in advanced scenarios.
     * 
     * @return the queryParametersTemplate value.
     */
    public String queryParametersTemplate() {
        return this.queryParametersTemplate;
    }

    /**
     * Set the queryParametersTemplate property: the query parameters template. Defines the query parameters template to
     * use when passing query parameters in advanced scenarios.
     * 
     * @param queryParametersTemplate the queryParametersTemplate value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryParametersTemplate(String queryParametersTemplate) {
        this.queryParametersTemplate = queryParametersTemplate;
        return this;
    }

    /**
     * Get the startTimeAttributeName property: The query parameter name which the remote server expect to start query.
     * This property goes hand to hand with `endTimeAttributeName`.
     * 
     * @return the startTimeAttributeName value.
     */
    public String startTimeAttributeName() {
        return this.startTimeAttributeName;
    }

    /**
     * Set the startTimeAttributeName property: The query parameter name which the remote server expect to start query.
     * This property goes hand to hand with `endTimeAttributeName`.
     * 
     * @param startTimeAttributeName the startTimeAttributeName value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withStartTimeAttributeName(String startTimeAttributeName) {
        this.startTimeAttributeName = startTimeAttributeName;
        return this;
    }

    /**
     * Get the endTimeAttributeName property: The query parameter name which the remote server expect to end query. This
     * property goes hand to hand with `startTimeAttributeName`.
     * 
     * @return the endTimeAttributeName value.
     */
    public String endTimeAttributeName() {
        return this.endTimeAttributeName;
    }

    /**
     * Set the endTimeAttributeName property: The query parameter name which the remote server expect to end query. This
     * property goes hand to hand with `startTimeAttributeName`.
     * 
     * @param endTimeAttributeName the endTimeAttributeName value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withEndTimeAttributeName(String endTimeAttributeName) {
        this.endTimeAttributeName = endTimeAttributeName;
        return this;
    }

    /**
     * Get the queryTimeIntervalAttributeName property: The query parameter name which we need to send the server for
     * query logs in time interval. Should be defined with `queryTimeIntervalPrepend` and `queryTimeIntervalDelimiter`.
     * 
     * @return the queryTimeIntervalAttributeName value.
     */
    public String queryTimeIntervalAttributeName() {
        return this.queryTimeIntervalAttributeName;
    }

    /**
     * Set the queryTimeIntervalAttributeName property: The query parameter name which we need to send the server for
     * query logs in time interval. Should be defined with `queryTimeIntervalPrepend` and `queryTimeIntervalDelimiter`.
     * 
     * @param queryTimeIntervalAttributeName the queryTimeIntervalAttributeName value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryTimeIntervalAttributeName(String queryTimeIntervalAttributeName) {
        this.queryTimeIntervalAttributeName = queryTimeIntervalAttributeName;
        return this;
    }

    /**
     * Get the queryTimeIntervalPrepend property: The string prepend to the value of the query parameter in
     * `queryTimeIntervalAttributeName`.
     * 
     * @return the queryTimeIntervalPrepend value.
     */
    public String queryTimeIntervalPrepend() {
        return this.queryTimeIntervalPrepend;
    }

    /**
     * Set the queryTimeIntervalPrepend property: The string prepend to the value of the query parameter in
     * `queryTimeIntervalAttributeName`.
     * 
     * @param queryTimeIntervalPrepend the queryTimeIntervalPrepend value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryTimeIntervalPrepend(String queryTimeIntervalPrepend) {
        this.queryTimeIntervalPrepend = queryTimeIntervalPrepend;
        return this;
    }

    /**
     * Get the queryTimeIntervalDelimiter property: The delimiter string between 2 QueryTimeFormat in the query
     * parameter `queryTimeIntervalAttributeName`.
     * 
     * @return the queryTimeIntervalDelimiter value.
     */
    public String queryTimeIntervalDelimiter() {
        return this.queryTimeIntervalDelimiter;
    }

    /**
     * Set the queryTimeIntervalDelimiter property: The delimiter string between 2 QueryTimeFormat in the query
     * parameter `queryTimeIntervalAttributeName`.
     * 
     * @param queryTimeIntervalDelimiter the queryTimeIntervalDelimiter value to set.
     * @return the RestApiPollerRequestConfig object itself.
     */
    public RestApiPollerRequestConfig withQueryTimeIntervalDelimiter(String queryTimeIntervalDelimiter) {
        this.queryTimeIntervalDelimiter = queryTimeIntervalDelimiter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (apiEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property apiEndpoint in model RestApiPollerRequestConfig"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RestApiPollerRequestConfig.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("apiEndpoint", this.apiEndpoint);
        jsonWriter.writeNumberField("rateLimitQPS", this.rateLimitQps);
        jsonWriter.writeNumberField("queryWindowInMin", this.queryWindowInMin);
        jsonWriter.writeStringField("httpMethod", this.httpMethod == null ? null : this.httpMethod.toString());
        jsonWriter.writeStringField("queryTimeFormat", this.queryTimeFormat);
        jsonWriter.writeNumberField("retryCount", this.retryCount);
        jsonWriter.writeNumberField("timeoutInSeconds", this.timeoutInSeconds);
        jsonWriter.writeBooleanField("isPostPayloadJson", this.isPostPayloadJson);
        jsonWriter.writeMapField("headers", this.headers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("queryParameters", this.queryParameters,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("queryParametersTemplate", this.queryParametersTemplate);
        jsonWriter.writeStringField("startTimeAttributeName", this.startTimeAttributeName);
        jsonWriter.writeStringField("endTimeAttributeName", this.endTimeAttributeName);
        jsonWriter.writeStringField("queryTimeIntervalAttributeName", this.queryTimeIntervalAttributeName);
        jsonWriter.writeStringField("queryTimeIntervalPrepend", this.queryTimeIntervalPrepend);
        jsonWriter.writeStringField("queryTimeIntervalDelimiter", this.queryTimeIntervalDelimiter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RestApiPollerRequestConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RestApiPollerRequestConfig if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RestApiPollerRequestConfig.
     */
    public static RestApiPollerRequestConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RestApiPollerRequestConfig deserializedRestApiPollerRequestConfig = new RestApiPollerRequestConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("apiEndpoint".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.apiEndpoint = reader.getString();
                } else if ("rateLimitQPS".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.rateLimitQps = reader.getNullable(JsonReader::getInt);
                } else if ("queryWindowInMin".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.queryWindowInMin = reader.getNullable(JsonReader::getInt);
                } else if ("httpMethod".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.httpMethod = HttpMethodVerb.fromString(reader.getString());
                } else if ("queryTimeFormat".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.queryTimeFormat = reader.getString();
                } else if ("retryCount".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.retryCount = reader.getNullable(JsonReader::getInt);
                } else if ("timeoutInSeconds".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.timeoutInSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("isPostPayloadJson".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.isPostPayloadJson
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("headers".equals(fieldName)) {
                    Map<String, String> headers = reader.readMap(reader1 -> reader1.getString());
                    deserializedRestApiPollerRequestConfig.headers = headers;
                } else if ("queryParameters".equals(fieldName)) {
                    Map<String, Object> queryParameters = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedRestApiPollerRequestConfig.queryParameters = queryParameters;
                } else if ("queryParametersTemplate".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.queryParametersTemplate = reader.getString();
                } else if ("startTimeAttributeName".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.startTimeAttributeName = reader.getString();
                } else if ("endTimeAttributeName".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.endTimeAttributeName = reader.getString();
                } else if ("queryTimeIntervalAttributeName".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.queryTimeIntervalAttributeName = reader.getString();
                } else if ("queryTimeIntervalPrepend".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.queryTimeIntervalPrepend = reader.getString();
                } else if ("queryTimeIntervalDelimiter".equals(fieldName)) {
                    deserializedRestApiPollerRequestConfig.queryTimeIntervalDelimiter = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRestApiPollerRequestConfig;
        });
    }
}
