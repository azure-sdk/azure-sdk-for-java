// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Recommendation Fields to update.
 */
@Fluent
public final class RecommendationPatch {
    /*
     * State of the recommendation.
     */
    @JsonProperty(value = "state")
    private State state;

    /*
     * The time stamp (UTC) when the recommendation should be displayed again.
     */
    @JsonProperty(value = "hideUntilTimeUtc")
    private OffsetDateTime hideUntilTimeUtc;

    /**
     * Creates an instance of RecommendationPatch class.
     */
    public RecommendationPatch() {
    }

    /**
     * Get the state property: State of the recommendation.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the recommendation.
     * 
     * @param state the state value to set.
     * @return the RecommendationPatch object itself.
     */
    public RecommendationPatch withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the hideUntilTimeUtc property: The time stamp (UTC) when the recommendation should be displayed again.
     * 
     * @return the hideUntilTimeUtc value.
     */
    public OffsetDateTime hideUntilTimeUtc() {
        return this.hideUntilTimeUtc;
    }

    /**
     * Set the hideUntilTimeUtc property: The time stamp (UTC) when the recommendation should be displayed again.
     * 
     * @param hideUntilTimeUtc the hideUntilTimeUtc value to set.
     * @return the RecommendationPatch object itself.
     */
    public RecommendationPatch withHideUntilTimeUtc(OffsetDateTime hideUntilTimeUtc) {
        this.hideUntilTimeUtc = hideUntilTimeUtc;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
