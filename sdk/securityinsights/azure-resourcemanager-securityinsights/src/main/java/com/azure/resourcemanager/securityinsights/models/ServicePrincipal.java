// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Service principal metadata.
 */
@Fluent
public final class ServicePrincipal implements JsonSerializable<ServicePrincipal> {
    /*
     * Id of service principal.
     */
    private String id;

    /*
     * Tenant id of service principal.
     */
    private String tenantId;

    /*
     * App id of service principal.
     */
    private String appId;

    /*
     * Expiration time of service principal credentials.
     */
    private OffsetDateTime credentialsExpireOn;

    /**
     * Creates an instance of ServicePrincipal class.
     */
    public ServicePrincipal() {
    }

    /**
     * Get the id property: Id of service principal.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the tenantId property: Tenant id of service principal.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the appId property: App id of service principal.
     * 
     * @return the appId value.
     */
    public String appId() {
        return this.appId;
    }

    /**
     * Get the credentialsExpireOn property: Expiration time of service principal credentials.
     * 
     * @return the credentialsExpireOn value.
     */
    public OffsetDateTime credentialsExpireOn() {
        return this.credentialsExpireOn;
    }

    /**
     * Set the credentialsExpireOn property: Expiration time of service principal credentials.
     * 
     * @param credentialsExpireOn the credentialsExpireOn value to set.
     * @return the ServicePrincipal object itself.
     */
    public ServicePrincipal withCredentialsExpireOn(OffsetDateTime credentialsExpireOn) {
        this.credentialsExpireOn = credentialsExpireOn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("credentialsExpireOn",
            this.credentialsExpireOn == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.credentialsExpireOn));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServicePrincipal from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServicePrincipal if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServicePrincipal.
     */
    public static ServicePrincipal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServicePrincipal deserializedServicePrincipal = new ServicePrincipal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedServicePrincipal.id = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedServicePrincipal.tenantId = reader.getString();
                } else if ("appId".equals(fieldName)) {
                    deserializedServicePrincipal.appId = reader.getString();
                } else if ("credentialsExpireOn".equals(fieldName)) {
                    deserializedServicePrincipal.credentialsExpireOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServicePrincipal;
        });
    }
}
