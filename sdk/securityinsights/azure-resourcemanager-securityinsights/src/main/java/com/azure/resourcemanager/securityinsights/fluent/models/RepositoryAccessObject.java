// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.RepositoryAccessKind;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Credentials to access repository.
 */
@Fluent
public final class RepositoryAccessObject {
    /*
     * RepositoryAccess properties
     */
    @JsonProperty(value = "repositoryAccess", required = true)
    private RepositoryAccess innerRepositoryAccess = new RepositoryAccess();

    /**
     * Creates an instance of RepositoryAccessObject class.
     */
    public RepositoryAccessObject() {
    }

    /**
     * Get the innerRepositoryAccess property: RepositoryAccess properties.
     * 
     * @return the innerRepositoryAccess value.
     */
    private RepositoryAccess innerRepositoryAccess() {
        return this.innerRepositoryAccess;
    }

    /**
     * Get the kind property: The kind of repository access credentials.
     * 
     * @return the kind value.
     */
    public RepositoryAccessKind kind() {
        return this.innerRepositoryAccess() == null ? null : this.innerRepositoryAccess().kind();
    }

    /**
     * Set the kind property: The kind of repository access credentials.
     * 
     * @param kind the kind value to set.
     * @return the RepositoryAccessObject object itself.
     */
    public RepositoryAccessObject withKind(RepositoryAccessKind kind) {
        if (this.innerRepositoryAccess() == null) {
            this.innerRepositoryAccess = new RepositoryAccess();
        }
        this.innerRepositoryAccess().withKind(kind);
        return this;
    }

    /**
     * Get the code property: OAuth Code. Required when `kind` is `OAuth`.
     * 
     * @return the code value.
     */
    public String code() {
        return this.innerRepositoryAccess() == null ? null : this.innerRepositoryAccess().code();
    }

    /**
     * Set the code property: OAuth Code. Required when `kind` is `OAuth`.
     * 
     * @param code the code value to set.
     * @return the RepositoryAccessObject object itself.
     */
    public RepositoryAccessObject withCode(String code) {
        if (this.innerRepositoryAccess() == null) {
            this.innerRepositoryAccess = new RepositoryAccess();
        }
        this.innerRepositoryAccess().withCode(code);
        return this;
    }

    /**
     * Get the state property: OAuth State. Required when `kind` is `OAuth`.
     * 
     * @return the state value.
     */
    public String state() {
        return this.innerRepositoryAccess() == null ? null : this.innerRepositoryAccess().state();
    }

    /**
     * Set the state property: OAuth State. Required when `kind` is `OAuth`.
     * 
     * @param state the state value to set.
     * @return the RepositoryAccessObject object itself.
     */
    public RepositoryAccessObject withState(String state) {
        if (this.innerRepositoryAccess() == null) {
            this.innerRepositoryAccess = new RepositoryAccess();
        }
        this.innerRepositoryAccess().withState(state);
        return this;
    }

    /**
     * Get the clientId property: OAuth ClientId. Required when `kind` is `OAuth`.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.innerRepositoryAccess() == null ? null : this.innerRepositoryAccess().clientId();
    }

    /**
     * Set the clientId property: OAuth ClientId. Required when `kind` is `OAuth`.
     * 
     * @param clientId the clientId value to set.
     * @return the RepositoryAccessObject object itself.
     */
    public RepositoryAccessObject withClientId(String clientId) {
        if (this.innerRepositoryAccess() == null) {
            this.innerRepositoryAccess = new RepositoryAccess();
        }
        this.innerRepositoryAccess().withClientId(clientId);
        return this;
    }

    /**
     * Get the token property: Personal Access Token. Required when `kind` is `PAT`.
     * 
     * @return the token value.
     */
    public String token() {
        return this.innerRepositoryAccess() == null ? null : this.innerRepositoryAccess().token();
    }

    /**
     * Set the token property: Personal Access Token. Required when `kind` is `PAT`.
     * 
     * @param token the token value to set.
     * @return the RepositoryAccessObject object itself.
     */
    public RepositoryAccessObject withToken(String token) {
        if (this.innerRepositoryAccess() == null) {
            this.innerRepositoryAccess = new RepositoryAccess();
        }
        this.innerRepositoryAccess().withToken(token);
        return this;
    }

    /**
     * Get the installationId property: Application installation ID. Required when `kind` is `App`. Supported by
     * `GitHub` only.
     * 
     * @return the installationId value.
     */
    public String installationId() {
        return this.innerRepositoryAccess() == null ? null : this.innerRepositoryAccess().installationId();
    }

    /**
     * Set the installationId property: Application installation ID. Required when `kind` is `App`. Supported by
     * `GitHub` only.
     * 
     * @param installationId the installationId value to set.
     * @return the RepositoryAccessObject object itself.
     */
    public RepositoryAccessObject withInstallationId(String installationId) {
        if (this.innerRepositoryAccess() == null) {
            this.innerRepositoryAccess = new RepositoryAccess();
        }
        this.innerRepositoryAccess().withInstallationId(installationId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerRepositoryAccess() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerRepositoryAccess in model RepositoryAccessObject"));
        } else {
            innerRepositoryAccess().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RepositoryAccessObject.class);
}
