// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes a log.
 */
@Fluent
public final class Log implements JsonSerializable<Log> {
    /*
     * Types of logs and tables.
     */
    private LogType type;

    /*
     * Types of ingestion.
     */
    private IngestionType ingestionType;

    /*
     * Types of log status.
     */
    private LogStatusType status;

    /*
     * The schedule interval in seconds.
     */
    private Integer scheduleInterval;

    /*
     * The bulk size for the log.
     */
    private Integer bulkSize;

    /*
     * The filters for the log.
     */
    private List<String> filters;

    /**
     * Creates an instance of Log class.
     */
    public Log() {
    }

    /**
     * Get the type property: Types of logs and tables.
     * 
     * @return the type value.
     */
    public LogType type() {
        return this.type;
    }

    /**
     * Set the type property: Types of logs and tables.
     * 
     * @param type the type value to set.
     * @return the Log object itself.
     */
    public Log withType(LogType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the ingestionType property: Types of ingestion.
     * 
     * @return the ingestionType value.
     */
    public IngestionType ingestionType() {
        return this.ingestionType;
    }

    /**
     * Set the ingestionType property: Types of ingestion.
     * 
     * @param ingestionType the ingestionType value to set.
     * @return the Log object itself.
     */
    public Log withIngestionType(IngestionType ingestionType) {
        this.ingestionType = ingestionType;
        return this;
    }

    /**
     * Get the status property: Types of log status.
     * 
     * @return the status value.
     */
    public LogStatusType status() {
        return this.status;
    }

    /**
     * Set the status property: Types of log status.
     * 
     * @param status the status value to set.
     * @return the Log object itself.
     */
    public Log withStatus(LogStatusType status) {
        this.status = status;
        return this;
    }

    /**
     * Get the scheduleInterval property: The schedule interval in seconds.
     * 
     * @return the scheduleInterval value.
     */
    public Integer scheduleInterval() {
        return this.scheduleInterval;
    }

    /**
     * Set the scheduleInterval property: The schedule interval in seconds.
     * 
     * @param scheduleInterval the scheduleInterval value to set.
     * @return the Log object itself.
     */
    public Log withScheduleInterval(Integer scheduleInterval) {
        this.scheduleInterval = scheduleInterval;
        return this;
    }

    /**
     * Get the bulkSize property: The bulk size for the log.
     * 
     * @return the bulkSize value.
     */
    public Integer bulkSize() {
        return this.bulkSize;
    }

    /**
     * Set the bulkSize property: The bulk size for the log.
     * 
     * @param bulkSize the bulkSize value to set.
     * @return the Log object itself.
     */
    public Log withBulkSize(Integer bulkSize) {
        this.bulkSize = bulkSize;
        return this;
    }

    /**
     * Get the filters property: The filters for the log.
     * 
     * @return the filters value.
     */
    public List<String> filters() {
        return this.filters;
    }

    /**
     * Set the filters property: The filters for the log.
     * 
     * @param filters the filters value to set.
     * @return the Log object itself.
     */
    public Log withFilters(List<String> filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property type in model Log"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Log.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("ingestionType", this.ingestionType == null ? null : this.ingestionType.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeNumberField("scheduleInterval", this.scheduleInterval);
        jsonWriter.writeNumberField("bulkSize", this.bulkSize);
        jsonWriter.writeArrayField("filters", this.filters, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Log from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Log if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Log.
     */
    public static Log fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Log deserializedLog = new Log();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedLog.type = LogType.fromString(reader.getString());
                } else if ("ingestionType".equals(fieldName)) {
                    deserializedLog.ingestionType = IngestionType.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedLog.status = LogStatusType.fromString(reader.getString());
                } else if ("scheduleInterval".equals(fieldName)) {
                    deserializedLog.scheduleInterval = reader.getNullable(JsonReader::getInt);
                } else if ("bulkSize".equals(fieldName)) {
                    deserializedLog.bulkSize = reader.getNullable(JsonReader::getInt);
                } else if ("filters".equals(fieldName)) {
                    List<String> filters = reader.readArray(reader1 -> reader1.getString());
                    deserializedLog.filters = filters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLog;
        });
    }
}
