// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Describes a log.
 */
@Fluent
public final class Log {
    /*
     * Types of logs and tables.
     */
    @JsonProperty(value = "type", required = true)
    private LogType type;

    /*
     * Types of ingestion.
     */
    @JsonProperty(value = "ingestionType")
    private IngestionType ingestionType;

    /*
     * Types of log status.
     */
    @JsonProperty(value = "status")
    private LogStatusType status;

    /*
     * The schedule interval in seconds.
     */
    @JsonProperty(value = "scheduleInterval")
    private Integer scheduleInterval;

    /*
     * The bulk size for the log.
     */
    @JsonProperty(value = "bulkSize")
    private Integer bulkSize;

    /*
     * The filters for the log.
     */
    @JsonProperty(value = "filters")
    private List<String> filters;

    /**
     * Creates an instance of Log class.
     */
    public Log() {
    }

    /**
     * Get the type property: Types of logs and tables.
     * 
     * @return the type value.
     */
    public LogType type() {
        return this.type;
    }

    /**
     * Set the type property: Types of logs and tables.
     * 
     * @param type the type value to set.
     * @return the Log object itself.
     */
    public Log withType(LogType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the ingestionType property: Types of ingestion.
     * 
     * @return the ingestionType value.
     */
    public IngestionType ingestionType() {
        return this.ingestionType;
    }

    /**
     * Set the ingestionType property: Types of ingestion.
     * 
     * @param ingestionType the ingestionType value to set.
     * @return the Log object itself.
     */
    public Log withIngestionType(IngestionType ingestionType) {
        this.ingestionType = ingestionType;
        return this;
    }

    /**
     * Get the status property: Types of log status.
     * 
     * @return the status value.
     */
    public LogStatusType status() {
        return this.status;
    }

    /**
     * Set the status property: Types of log status.
     * 
     * @param status the status value to set.
     * @return the Log object itself.
     */
    public Log withStatus(LogStatusType status) {
        this.status = status;
        return this;
    }

    /**
     * Get the scheduleInterval property: The schedule interval in seconds.
     * 
     * @return the scheduleInterval value.
     */
    public Integer scheduleInterval() {
        return this.scheduleInterval;
    }

    /**
     * Set the scheduleInterval property: The schedule interval in seconds.
     * 
     * @param scheduleInterval the scheduleInterval value to set.
     * @return the Log object itself.
     */
    public Log withScheduleInterval(Integer scheduleInterval) {
        this.scheduleInterval = scheduleInterval;
        return this;
    }

    /**
     * Get the bulkSize property: The bulk size for the log.
     * 
     * @return the bulkSize value.
     */
    public Integer bulkSize() {
        return this.bulkSize;
    }

    /**
     * Set the bulkSize property: The bulk size for the log.
     * 
     * @param bulkSize the bulkSize value to set.
     * @return the Log object itself.
     */
    public Log withBulkSize(Integer bulkSize) {
        this.bulkSize = bulkSize;
        return this;
    }

    /**
     * Get the filters property: The filters for the log.
     * 
     * @return the filters value.
     */
    public List<String> filters() {
        return this.filters;
    }

    /**
     * Set the filters property: The filters for the log.
     * 
     * @param filters the filters value to set.
     * @return the Log object itself.
     */
    public Log withFilters(List<String> filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property type in model Log"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Log.class);
}
