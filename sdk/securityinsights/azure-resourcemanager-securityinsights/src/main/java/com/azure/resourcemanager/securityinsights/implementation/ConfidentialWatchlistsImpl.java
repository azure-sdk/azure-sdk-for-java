// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.ConfidentialWatchlistsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.WatchlistInner;
import com.azure.resourcemanager.securityinsights.models.ConfidentialWatchlists;
import com.azure.resourcemanager.securityinsights.models.ConfidentialWatchlistsCreateOrUpdateResponse;
import com.azure.resourcemanager.securityinsights.models.ConfidentialWatchlistsDeleteResponse;
import com.azure.resourcemanager.securityinsights.models.Watchlist;

public final class ConfidentialWatchlistsImpl implements ConfidentialWatchlists {
    private static final ClientLogger LOGGER = new ClientLogger(ConfidentialWatchlistsImpl.class);

    private final ConfidentialWatchlistsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public ConfidentialWatchlistsImpl(
        ConfidentialWatchlistsClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Watchlist> list(String resourceGroupName, String workspaceName) {
        PagedIterable<WatchlistInner> inner = this.serviceClient().list(resourceGroupName, workspaceName);
        return Utils.mapPage(inner, inner1 -> new WatchlistImpl(inner1, this.manager()));
    }

    public PagedIterable<Watchlist> list(
        String resourceGroupName, String workspaceName, String skipToken, Context context) {
        PagedIterable<WatchlistInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new WatchlistImpl(inner1, this.manager()));
    }

    public Watchlist get(String resourceGroupName, String workspaceName, String watchlistAlias) {
        WatchlistInner inner = this.serviceClient().get(resourceGroupName, workspaceName, watchlistAlias);
        if (inner != null) {
            return new WatchlistImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Watchlist> getWithResponse(
        String resourceGroupName, String workspaceName, String watchlistAlias, Context context) {
        Response<WatchlistInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, workspaceName, watchlistAlias, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WatchlistImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String workspaceName, String watchlistAlias) {
        this.serviceClient().delete(resourceGroupName, workspaceName, watchlistAlias);
    }

    public ConfidentialWatchlistsDeleteResponse deleteWithResponse(
        String resourceGroupName, String workspaceName, String watchlistAlias, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, watchlistAlias, context);
    }

    public Watchlist createOrUpdate(
        String resourceGroupName, String workspaceName, String watchlistAlias, WatchlistInner watchlist) {
        WatchlistInner inner =
            this.serviceClient().createOrUpdate(resourceGroupName, workspaceName, watchlistAlias, watchlist);
        if (inner != null) {
            return new WatchlistImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Watchlist> createOrUpdateWithResponse(
        String resourceGroupName,
        String workspaceName,
        String watchlistAlias,
        WatchlistInner watchlist,
        Context context) {
        ConfidentialWatchlistsCreateOrUpdateResponse inner =
            this
                .serviceClient()
                .createOrUpdateWithResponse(resourceGroupName, workspaceName, watchlistAlias, watchlist, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WatchlistImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ConfidentialWatchlistsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }
}
