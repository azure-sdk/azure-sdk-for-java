// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.securityinsights.fluent.models.PackageModelInner;
import java.time.LocalDate;
import java.util.List;

/** An immutable client-side representation of PackageModel. */
public interface PackageModel {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the etag property: Etag of the azure resource.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the packageId property: The package id.
     *
     * @return the packageId value.
     */
    String packageId();

    /**
     * Gets the packageKind property: The package kind.
     *
     * @return the packageKind value.
     */
    PackageKind packageKind();

    /**
     * Gets the contentSchemaVersion property: The version of the content schema.
     *
     * @return the contentSchemaVersion value.
     */
    String contentSchemaVersion();

    /**
     * Gets the isNew property: Flag indicates if this is a newly published package.
     *
     * @return the isNew value.
     */
    Flag isNew();

    /**
     * Gets the isPreview property: Flag indicates if this package is in preview.
     *
     * @return the isPreview value.
     */
    Flag isPreview();

    /**
     * Gets the isFeatured property: Flag indicates if this package is among the featured list.
     *
     * @return the isFeatured value.
     */
    Flag isFeatured();

    /**
     * Gets the version property: the latest version number of the package.
     *
     * @return the version value.
     */
    String version();

    /**
     * Gets the displayName property: The display name of the package.
     *
     * @return the displayName value.
     */
    String displayName();

    /**
     * Gets the description property: The description of the package.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the publisherDisplayName property: The publisher display name of the package.
     *
     * @return the publisherDisplayName value.
     */
    String publisherDisplayName();

    /**
     * Gets the source property: The source of the package.
     *
     * @return the source value.
     */
    MetadataSource source();

    /**
     * Gets the author property: The author of the package.
     *
     * @return the author value.
     */
    MetadataAuthor author();

    /**
     * Gets the support property: The support tier of the package.
     *
     * @return the support value.
     */
    MetadataSupport support();

    /**
     * Gets the dependencies property: The support tier of the package.
     *
     * @return the dependencies value.
     */
    MetadataDependencies dependencies();

    /**
     * Gets the providers property: Providers for the package item.
     *
     * @return the providers value.
     */
    List<String> providers();

    /**
     * Gets the firstPublishDate property: first publish date package item.
     *
     * @return the firstPublishDate value.
     */
    LocalDate firstPublishDate();

    /**
     * Gets the lastPublishDate property: last publish date for the package item.
     *
     * @return the lastPublishDate value.
     */
    LocalDate lastPublishDate();

    /**
     * Gets the categories property: The categories of the package.
     *
     * @return the categories value.
     */
    MetadataCategories categories();

    /**
     * Gets the tags property: The tags of the package.
     *
     * @return the tags value.
     */
    List<String> tags();

    /**
     * Gets the threatAnalysisTactics property: the tactics the resource covers.
     *
     * @return the threatAnalysisTactics value.
     */
    List<String> threatAnalysisTactics();

    /**
     * Gets the threatAnalyticsTechniques property: the techniques the resource covers, these have to be aligned with
     * the tactics being used.
     *
     * @return the threatAnalyticsTechniques value.
     */
    List<String> threatAnalyticsTechniques();

    /**
     * Gets the icon property: the icon identifier. this id can later be fetched from the content metadata.
     *
     * @return the icon value.
     */
    String icon();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.securityinsights.fluent.models.PackageModelInner object.
     *
     * @return the inner object.
     */
    PackageModelInner innerModel();

    /** The entirety of the PackageModel definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The PackageModel definition stages. */
    interface DefinitionStages {
        /** The first stage of the PackageModel definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the PackageModel definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, workspaceName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param workspaceName The name of the workspace.
             * @return the next definition stage.
             */
            WithCreate withExistingWorkspace(String resourceGroupName, String workspaceName);
        }
        /**
         * The stage of the PackageModel definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithPackageKind,
                DefinitionStages.WithVersion,
                DefinitionStages.WithRelease,
                DefinitionStages.WithDisplayName,
                DefinitionStages.WithDescription,
                DefinitionStages.WithSource,
                DefinitionStages.WithAuthor,
                DefinitionStages.WithSupport,
                DefinitionStages.WithFirstPublishDate,
                DefinitionStages.WithLastPublishDate,
                DefinitionStages.WithCategories,
                DefinitionStages.WithThreatAnalysisTactics,
                DefinitionStages.WithThreatAnalyticsTechniques,
                DefinitionStages.WithDependencies {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            PackageModel create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            PackageModel create(Context context);
        }
        /** The stage of the PackageModel definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags property..
             *
             * @param tags The tags property.
             * @return the next definition stage.
             */
            WithCreate withTags(List<String> tags);
        }
        /** The stage of the PackageModel definition allowing to specify packageKind. */
        interface WithPackageKind {
            /**
             * Specifies the packageKind property: package kind..
             *
             * @param packageKind package kind.
             * @return the next definition stage.
             */
            WithCreate withPackageKind(PackageKind packageKind);
        }
        /** The stage of the PackageModel definition allowing to specify version. */
        interface WithVersion {
            /**
             * Specifies the version property: version of the package to be installed..
             *
             * @param version version of the package to be installed.
             * @return the next definition stage.
             */
            WithCreate withVersion(String version);
        }
        /** The stage of the PackageModel definition allowing to specify release. */
        interface WithRelease {
            /**
             * Specifies the release property: The release property..
             *
             * @param release The release property.
             * @return the next definition stage.
             */
            WithCreate withRelease(String release);
        }
        /** The stage of the PackageModel definition allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The displayName property..
             *
             * @param displayName The displayName property.
             * @return the next definition stage.
             */
            WithCreate withDisplayName(String displayName);
        }
        /** The stage of the PackageModel definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: The description property..
             *
             * @param description The description property.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
        /** The stage of the PackageModel definition allowing to specify source. */
        interface WithSource {
            /**
             * Specifies the source property: The source property..
             *
             * @param source The source property.
             * @return the next definition stage.
             */
            WithCreate withSource(PackageInstallationPropertiesSource source);
        }
        /** The stage of the PackageModel definition allowing to specify author. */
        interface WithAuthor {
            /**
             * Specifies the author property: The author property..
             *
             * @param author The author property.
             * @return the next definition stage.
             */
            WithCreate withAuthor(PackageInstallationPropertiesAuthor author);
        }
        /** The stage of the PackageModel definition allowing to specify support. */
        interface WithSupport {
            /**
             * Specifies the support property: The support property..
             *
             * @param support The support property.
             * @return the next definition stage.
             */
            WithCreate withSupport(PackageInstallationPropertiesSupport support);
        }
        /** The stage of the PackageModel definition allowing to specify firstPublishDate. */
        interface WithFirstPublishDate {
            /**
             * Specifies the firstPublishDate property: The firstPublishDate property..
             *
             * @param firstPublishDate The firstPublishDate property.
             * @return the next definition stage.
             */
            WithCreate withFirstPublishDate(String firstPublishDate);
        }
        /** The stage of the PackageModel definition allowing to specify lastPublishDate. */
        interface WithLastPublishDate {
            /**
             * Specifies the lastPublishDate property: The lastPublishDate property..
             *
             * @param lastPublishDate The lastPublishDate property.
             * @return the next definition stage.
             */
            WithCreate withLastPublishDate(String lastPublishDate);
        }
        /** The stage of the PackageModel definition allowing to specify categories. */
        interface WithCategories {
            /**
             * Specifies the categories property: The categories property..
             *
             * @param categories The categories property.
             * @return the next definition stage.
             */
            WithCreate withCategories(PackageInstallationPropertiesCategories categories);
        }
        /** The stage of the PackageModel definition allowing to specify threatAnalysisTactics. */
        interface WithThreatAnalysisTactics {
            /**
             * Specifies the threatAnalysisTactics property: The threatAnalysisTactics property..
             *
             * @param threatAnalysisTactics The threatAnalysisTactics property.
             * @return the next definition stage.
             */
            WithCreate withThreatAnalysisTactics(List<String> threatAnalysisTactics);
        }
        /** The stage of the PackageModel definition allowing to specify threatAnalyticsTechniques. */
        interface WithThreatAnalyticsTechniques {
            /**
             * Specifies the threatAnalyticsTechniques property: The threatAnalyticsTechniques property..
             *
             * @param threatAnalyticsTechniques The threatAnalyticsTechniques property.
             * @return the next definition stage.
             */
            WithCreate withThreatAnalyticsTechniques(List<String> threatAnalyticsTechniques);
        }
        /** The stage of the PackageModel definition allowing to specify dependencies. */
        interface WithDependencies {
            /**
             * Specifies the dependencies property: Dependencies for the content item, what other content items it
             * requires to work. Can describe more complex dependencies using a recursive/nested structure. For a single
             * dependency an id/kind/version can be supplied or operator/criteria for complex dependencies..
             *
             * @param dependencies Dependencies for the content item, what other content items it requires to work. Can
             *     describe more complex dependencies using a recursive/nested structure. For a single dependency an
             *     id/kind/version can be supplied or operator/criteria for complex dependencies.
             * @return the next definition stage.
             */
            WithCreate withDependencies(MetadataDependenciesAutoGenerated dependencies);
        }
    }
    /**
     * Begins update for the PackageModel resource.
     *
     * @return the stage of resource update.
     */
    PackageModel.Update update();

    /** The template for PackageModel update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithPackageKind,
            UpdateStages.WithVersion,
            UpdateStages.WithRelease,
            UpdateStages.WithDisplayName,
            UpdateStages.WithDescription,
            UpdateStages.WithSource,
            UpdateStages.WithAuthor,
            UpdateStages.WithSupport,
            UpdateStages.WithFirstPublishDate,
            UpdateStages.WithLastPublishDate,
            UpdateStages.WithCategories,
            UpdateStages.WithThreatAnalysisTactics,
            UpdateStages.WithThreatAnalyticsTechniques,
            UpdateStages.WithDependencies {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        PackageModel apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        PackageModel apply(Context context);
    }
    /** The PackageModel update stages. */
    interface UpdateStages {
        /** The stage of the PackageModel update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags property..
             *
             * @param tags The tags property.
             * @return the next definition stage.
             */
            Update withTags(List<String> tags);
        }
        /** The stage of the PackageModel update allowing to specify packageKind. */
        interface WithPackageKind {
            /**
             * Specifies the packageKind property: package kind..
             *
             * @param packageKind package kind.
             * @return the next definition stage.
             */
            Update withPackageKind(PackageKind packageKind);
        }
        /** The stage of the PackageModel update allowing to specify version. */
        interface WithVersion {
            /**
             * Specifies the version property: version of the package to be installed..
             *
             * @param version version of the package to be installed.
             * @return the next definition stage.
             */
            Update withVersion(String version);
        }
        /** The stage of the PackageModel update allowing to specify release. */
        interface WithRelease {
            /**
             * Specifies the release property: The release property..
             *
             * @param release The release property.
             * @return the next definition stage.
             */
            Update withRelease(String release);
        }
        /** The stage of the PackageModel update allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The displayName property..
             *
             * @param displayName The displayName property.
             * @return the next definition stage.
             */
            Update withDisplayName(String displayName);
        }
        /** The stage of the PackageModel update allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: The description property..
             *
             * @param description The description property.
             * @return the next definition stage.
             */
            Update withDescription(String description);
        }
        /** The stage of the PackageModel update allowing to specify source. */
        interface WithSource {
            /**
             * Specifies the source property: The source property..
             *
             * @param source The source property.
             * @return the next definition stage.
             */
            Update withSource(PackageInstallationPropertiesSource source);
        }
        /** The stage of the PackageModel update allowing to specify author. */
        interface WithAuthor {
            /**
             * Specifies the author property: The author property..
             *
             * @param author The author property.
             * @return the next definition stage.
             */
            Update withAuthor(PackageInstallationPropertiesAuthor author);
        }
        /** The stage of the PackageModel update allowing to specify support. */
        interface WithSupport {
            /**
             * Specifies the support property: The support property..
             *
             * @param support The support property.
             * @return the next definition stage.
             */
            Update withSupport(PackageInstallationPropertiesSupport support);
        }
        /** The stage of the PackageModel update allowing to specify firstPublishDate. */
        interface WithFirstPublishDate {
            /**
             * Specifies the firstPublishDate property: The firstPublishDate property..
             *
             * @param firstPublishDate The firstPublishDate property.
             * @return the next definition stage.
             */
            Update withFirstPublishDate(String firstPublishDate);
        }
        /** The stage of the PackageModel update allowing to specify lastPublishDate. */
        interface WithLastPublishDate {
            /**
             * Specifies the lastPublishDate property: The lastPublishDate property..
             *
             * @param lastPublishDate The lastPublishDate property.
             * @return the next definition stage.
             */
            Update withLastPublishDate(String lastPublishDate);
        }
        /** The stage of the PackageModel update allowing to specify categories. */
        interface WithCategories {
            /**
             * Specifies the categories property: The categories property..
             *
             * @param categories The categories property.
             * @return the next definition stage.
             */
            Update withCategories(PackageInstallationPropertiesCategories categories);
        }
        /** The stage of the PackageModel update allowing to specify threatAnalysisTactics. */
        interface WithThreatAnalysisTactics {
            /**
             * Specifies the threatAnalysisTactics property: The threatAnalysisTactics property..
             *
             * @param threatAnalysisTactics The threatAnalysisTactics property.
             * @return the next definition stage.
             */
            Update withThreatAnalysisTactics(List<String> threatAnalysisTactics);
        }
        /** The stage of the PackageModel update allowing to specify threatAnalyticsTechniques. */
        interface WithThreatAnalyticsTechniques {
            /**
             * Specifies the threatAnalyticsTechniques property: The threatAnalyticsTechniques property..
             *
             * @param threatAnalyticsTechniques The threatAnalyticsTechniques property.
             * @return the next definition stage.
             */
            Update withThreatAnalyticsTechniques(List<String> threatAnalyticsTechniques);
        }
        /** The stage of the PackageModel update allowing to specify dependencies. */
        interface WithDependencies {
            /**
             * Specifies the dependencies property: Dependencies for the content item, what other content items it
             * requires to work. Can describe more complex dependencies using a recursive/nested structure. For a single
             * dependency an id/kind/version can be supplied or operator/criteria for complex dependencies..
             *
             * @param dependencies Dependencies for the content item, what other content items it requires to work. Can
             *     describe more complex dependencies using a recursive/nested structure. For a single dependency an
             *     id/kind/version can be supplied or operator/criteria for complex dependencies.
             * @return the next definition stage.
             */
            Update withDependencies(MetadataDependenciesAutoGenerated dependencies);
        }
    }
}
