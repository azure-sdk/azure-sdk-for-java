// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.securityinsights.fluent.models.PackageModelInner;
import java.time.LocalDate;
import java.util.List;

/** An immutable client-side representation of PackageModel. */
public interface PackageModel {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the etag property: Etag of the azure resource.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the contentId property: The package id.
     *
     * @return the contentId value.
     */
    String contentId();

    /**
     * Gets the contentKind property: The package kind.
     *
     * @return the contentKind value.
     */
    PackageKind contentKind();

    /**
     * Gets the contentSchemaVersion property: The version of the content schema.
     *
     * @return the contentSchemaVersion value.
     */
    String contentSchemaVersion();

    /**
     * Gets the isNew property: Flag indicates if this is a newly published package.
     *
     * @return the isNew value.
     */
    Flag isNew();

    /**
     * Gets the isPreview property: Flag indicates if this package is in preview.
     *
     * @return the isPreview value.
     */
    Flag isPreview();

    /**
     * Gets the isFeatured property: Flag indicates if this package is among the featured list.
     *
     * @return the isFeatured value.
     */
    Flag isFeatured();

    /**
     * Gets the version property: the latest version number of the package.
     *
     * @return the version value.
     */
    String version();

    /**
     * Gets the displayName property: The display name of the package.
     *
     * @return the displayName value.
     */
    String displayName();

    /**
     * Gets the description property: The description of the package.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the publisherDisplayName property: The publisher display name of the package.
     *
     * @return the publisherDisplayName value.
     */
    String publisherDisplayName();

    /**
     * Gets the source property: The source of the package.
     *
     * @return the source value.
     */
    MetadataSource source();

    /**
     * Gets the author property: The author of the package.
     *
     * @return the author value.
     */
    MetadataAuthor author();

    /**
     * Gets the support property: The support tier of the package.
     *
     * @return the support value.
     */
    MetadataSupport support();

    /**
     * Gets the dependencies property: The support tier of the package.
     *
     * @return the dependencies value.
     */
    MetadataDependencies dependencies();

    /**
     * Gets the providers property: Providers for the package item.
     *
     * @return the providers value.
     */
    List<String> providers();

    /**
     * Gets the firstPublishDate property: first publish date package item.
     *
     * @return the firstPublishDate value.
     */
    LocalDate firstPublishDate();

    /**
     * Gets the lastPublishDate property: last publish date for the package item.
     *
     * @return the lastPublishDate value.
     */
    LocalDate lastPublishDate();

    /**
     * Gets the categories property: The categories of the package.
     *
     * @return the categories value.
     */
    MetadataCategories categories();

    /**
     * Gets the threatAnalysisTactics property: the tactics the resource covers.
     *
     * @return the threatAnalysisTactics value.
     */
    List<String> threatAnalysisTactics();

    /**
     * Gets the threatAnalyticsTechniques property: the techniques the resource covers, these have to be aligned with
     * the tactics being used.
     *
     * @return the threatAnalyticsTechniques value.
     */
    List<String> threatAnalyticsTechniques();

    /**
     * Gets the icon property: the icon identifier. this id can later be fetched from the content metadata.
     *
     * @return the icon value.
     */
    String icon();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.securityinsights.fluent.models.PackageModelInner object.
     *
     * @return the inner object.
     */
    PackageModelInner innerModel();

    /** The entirety of the PackageModel definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The PackageModel definition stages. */
    interface DefinitionStages {
        /** The first stage of the PackageModel definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the PackageModel definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, workspaceName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param workspaceName The name of the workspace.
             * @return the next definition stage.
             */
            WithCreate withExistingWorkspace(String resourceGroupName, String workspaceName);
        }
        /**
         * The stage of the PackageModel definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithEtag,
                DefinitionStages.WithContentId,
                DefinitionStages.WithContentKind,
                DefinitionStages.WithContentSchemaVersion,
                DefinitionStages.WithIsNew,
                DefinitionStages.WithIsPreview,
                DefinitionStages.WithIsFeatured,
                DefinitionStages.WithVersion,
                DefinitionStages.WithDisplayName,
                DefinitionStages.WithDescription,
                DefinitionStages.WithPublisherDisplayName,
                DefinitionStages.WithSource,
                DefinitionStages.WithAuthor,
                DefinitionStages.WithSupport,
                DefinitionStages.WithDependencies,
                DefinitionStages.WithProviders,
                DefinitionStages.WithFirstPublishDate,
                DefinitionStages.WithLastPublishDate,
                DefinitionStages.WithCategories,
                DefinitionStages.WithThreatAnalysisTactics,
                DefinitionStages.WithThreatAnalyticsTechniques,
                DefinitionStages.WithIcon {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            PackageModel create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            PackageModel create(Context context);
        }
        /** The stage of the PackageModel definition allowing to specify etag. */
        interface WithEtag {
            /**
             * Specifies the etag property: Etag of the azure resource.
             *
             * @param etag Etag of the azure resource.
             * @return the next definition stage.
             */
            WithCreate withEtag(String etag);
        }
        /** The stage of the PackageModel definition allowing to specify contentId. */
        interface WithContentId {
            /**
             * Specifies the contentId property: The package id.
             *
             * @param contentId The package id.
             * @return the next definition stage.
             */
            WithCreate withContentId(String contentId);
        }
        /** The stage of the PackageModel definition allowing to specify contentKind. */
        interface WithContentKind {
            /**
             * Specifies the contentKind property: The package kind.
             *
             * @param contentKind The package kind.
             * @return the next definition stage.
             */
            WithCreate withContentKind(PackageKind contentKind);
        }
        /** The stage of the PackageModel definition allowing to specify contentSchemaVersion. */
        interface WithContentSchemaVersion {
            /**
             * Specifies the contentSchemaVersion property: The version of the content schema..
             *
             * @param contentSchemaVersion The version of the content schema.
             * @return the next definition stage.
             */
            WithCreate withContentSchemaVersion(String contentSchemaVersion);
        }
        /** The stage of the PackageModel definition allowing to specify isNew. */
        interface WithIsNew {
            /**
             * Specifies the isNew property: Flag indicates if this is a newly published package..
             *
             * @param isNew Flag indicates if this is a newly published package.
             * @return the next definition stage.
             */
            WithCreate withIsNew(Flag isNew);
        }
        /** The stage of the PackageModel definition allowing to specify isPreview. */
        interface WithIsPreview {
            /**
             * Specifies the isPreview property: Flag indicates if this package is in preview..
             *
             * @param isPreview Flag indicates if this package is in preview.
             * @return the next definition stage.
             */
            WithCreate withIsPreview(Flag isPreview);
        }
        /** The stage of the PackageModel definition allowing to specify isFeatured. */
        interface WithIsFeatured {
            /**
             * Specifies the isFeatured property: Flag indicates if this package is among the featured list..
             *
             * @param isFeatured Flag indicates if this package is among the featured list.
             * @return the next definition stage.
             */
            WithCreate withIsFeatured(Flag isFeatured);
        }
        /** The stage of the PackageModel definition allowing to specify version. */
        interface WithVersion {
            /**
             * Specifies the version property: the latest version number of the package.
             *
             * @param version the latest version number of the package.
             * @return the next definition stage.
             */
            WithCreate withVersion(String version);
        }
        /** The stage of the PackageModel definition allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The display name of the package.
             *
             * @param displayName The display name of the package.
             * @return the next definition stage.
             */
            WithCreate withDisplayName(String displayName);
        }
        /** The stage of the PackageModel definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: The description of the package.
             *
             * @param description The description of the package.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
        /** The stage of the PackageModel definition allowing to specify publisherDisplayName. */
        interface WithPublisherDisplayName {
            /**
             * Specifies the publisherDisplayName property: The publisher display name of the package.
             *
             * @param publisherDisplayName The publisher display name of the package.
             * @return the next definition stage.
             */
            WithCreate withPublisherDisplayName(String publisherDisplayName);
        }
        /** The stage of the PackageModel definition allowing to specify source. */
        interface WithSource {
            /**
             * Specifies the source property: The source of the package.
             *
             * @param source The source of the package.
             * @return the next definition stage.
             */
            WithCreate withSource(MetadataSource source);
        }
        /** The stage of the PackageModel definition allowing to specify author. */
        interface WithAuthor {
            /**
             * Specifies the author property: The author of the package.
             *
             * @param author The author of the package.
             * @return the next definition stage.
             */
            WithCreate withAuthor(MetadataAuthor author);
        }
        /** The stage of the PackageModel definition allowing to specify support. */
        interface WithSupport {
            /**
             * Specifies the support property: The support tier of the package.
             *
             * @param support The support tier of the package.
             * @return the next definition stage.
             */
            WithCreate withSupport(MetadataSupport support);
        }
        /** The stage of the PackageModel definition allowing to specify dependencies. */
        interface WithDependencies {
            /**
             * Specifies the dependencies property: The support tier of the package.
             *
             * @param dependencies The support tier of the package.
             * @return the next definition stage.
             */
            WithCreate withDependencies(MetadataDependencies dependencies);
        }
        /** The stage of the PackageModel definition allowing to specify providers. */
        interface WithProviders {
            /**
             * Specifies the providers property: Providers for the package item.
             *
             * @param providers Providers for the package item.
             * @return the next definition stage.
             */
            WithCreate withProviders(List<String> providers);
        }
        /** The stage of the PackageModel definition allowing to specify firstPublishDate. */
        interface WithFirstPublishDate {
            /**
             * Specifies the firstPublishDate property: first publish date package item.
             *
             * @param firstPublishDate first publish date package item.
             * @return the next definition stage.
             */
            WithCreate withFirstPublishDate(LocalDate firstPublishDate);
        }
        /** The stage of the PackageModel definition allowing to specify lastPublishDate. */
        interface WithLastPublishDate {
            /**
             * Specifies the lastPublishDate property: last publish date for the package item.
             *
             * @param lastPublishDate last publish date for the package item.
             * @return the next definition stage.
             */
            WithCreate withLastPublishDate(LocalDate lastPublishDate);
        }
        /** The stage of the PackageModel definition allowing to specify categories. */
        interface WithCategories {
            /**
             * Specifies the categories property: The categories of the package.
             *
             * @param categories The categories of the package.
             * @return the next definition stage.
             */
            WithCreate withCategories(MetadataCategories categories);
        }
        /** The stage of the PackageModel definition allowing to specify threatAnalysisTactics. */
        interface WithThreatAnalysisTactics {
            /**
             * Specifies the threatAnalysisTactics property: the tactics the resource covers.
             *
             * @param threatAnalysisTactics the tactics the resource covers.
             * @return the next definition stage.
             */
            WithCreate withThreatAnalysisTactics(List<String> threatAnalysisTactics);
        }
        /** The stage of the PackageModel definition allowing to specify threatAnalyticsTechniques. */
        interface WithThreatAnalyticsTechniques {
            /**
             * Specifies the threatAnalyticsTechniques property: the techniques the resource covers, these have to be
             * aligned with the tactics being used.
             *
             * @param threatAnalyticsTechniques the techniques the resource covers, these have to be aligned with the
             *     tactics being used.
             * @return the next definition stage.
             */
            WithCreate withThreatAnalyticsTechniques(List<String> threatAnalyticsTechniques);
        }
        /** The stage of the PackageModel definition allowing to specify icon. */
        interface WithIcon {
            /**
             * Specifies the icon property: the icon identifier. this id can later be fetched from the content metadata.
             *
             * @param icon the icon identifier. this id can later be fetched from the content metadata.
             * @return the next definition stage.
             */
            WithCreate withIcon(String icon);
        }
    }
    /**
     * Begins update for the PackageModel resource.
     *
     * @return the stage of resource update.
     */
    PackageModel.Update update();

    /** The template for PackageModel update. */
    interface Update
        extends UpdateStages.WithEtag,
            UpdateStages.WithContentId,
            UpdateStages.WithContentKind,
            UpdateStages.WithContentSchemaVersion,
            UpdateStages.WithIsNew,
            UpdateStages.WithIsPreview,
            UpdateStages.WithIsFeatured,
            UpdateStages.WithVersion,
            UpdateStages.WithDisplayName,
            UpdateStages.WithDescription,
            UpdateStages.WithPublisherDisplayName,
            UpdateStages.WithSource,
            UpdateStages.WithAuthor,
            UpdateStages.WithSupport,
            UpdateStages.WithDependencies,
            UpdateStages.WithProviders,
            UpdateStages.WithFirstPublishDate,
            UpdateStages.WithLastPublishDate,
            UpdateStages.WithCategories,
            UpdateStages.WithThreatAnalysisTactics,
            UpdateStages.WithThreatAnalyticsTechniques,
            UpdateStages.WithIcon {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        PackageModel apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        PackageModel apply(Context context);
    }
    /** The PackageModel update stages. */
    interface UpdateStages {
        /** The stage of the PackageModel update allowing to specify etag. */
        interface WithEtag {
            /**
             * Specifies the etag property: Etag of the azure resource.
             *
             * @param etag Etag of the azure resource.
             * @return the next definition stage.
             */
            Update withEtag(String etag);
        }
        /** The stage of the PackageModel update allowing to specify contentId. */
        interface WithContentId {
            /**
             * Specifies the contentId property: The package id.
             *
             * @param contentId The package id.
             * @return the next definition stage.
             */
            Update withContentId(String contentId);
        }
        /** The stage of the PackageModel update allowing to specify contentKind. */
        interface WithContentKind {
            /**
             * Specifies the contentKind property: The package kind.
             *
             * @param contentKind The package kind.
             * @return the next definition stage.
             */
            Update withContentKind(PackageKind contentKind);
        }
        /** The stage of the PackageModel update allowing to specify contentSchemaVersion. */
        interface WithContentSchemaVersion {
            /**
             * Specifies the contentSchemaVersion property: The version of the content schema..
             *
             * @param contentSchemaVersion The version of the content schema.
             * @return the next definition stage.
             */
            Update withContentSchemaVersion(String contentSchemaVersion);
        }
        /** The stage of the PackageModel update allowing to specify isNew. */
        interface WithIsNew {
            /**
             * Specifies the isNew property: Flag indicates if this is a newly published package..
             *
             * @param isNew Flag indicates if this is a newly published package.
             * @return the next definition stage.
             */
            Update withIsNew(Flag isNew);
        }
        /** The stage of the PackageModel update allowing to specify isPreview. */
        interface WithIsPreview {
            /**
             * Specifies the isPreview property: Flag indicates if this package is in preview..
             *
             * @param isPreview Flag indicates if this package is in preview.
             * @return the next definition stage.
             */
            Update withIsPreview(Flag isPreview);
        }
        /** The stage of the PackageModel update allowing to specify isFeatured. */
        interface WithIsFeatured {
            /**
             * Specifies the isFeatured property: Flag indicates if this package is among the featured list..
             *
             * @param isFeatured Flag indicates if this package is among the featured list.
             * @return the next definition stage.
             */
            Update withIsFeatured(Flag isFeatured);
        }
        /** The stage of the PackageModel update allowing to specify version. */
        interface WithVersion {
            /**
             * Specifies the version property: the latest version number of the package.
             *
             * @param version the latest version number of the package.
             * @return the next definition stage.
             */
            Update withVersion(String version);
        }
        /** The stage of the PackageModel update allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The display name of the package.
             *
             * @param displayName The display name of the package.
             * @return the next definition stage.
             */
            Update withDisplayName(String displayName);
        }
        /** The stage of the PackageModel update allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: The description of the package.
             *
             * @param description The description of the package.
             * @return the next definition stage.
             */
            Update withDescription(String description);
        }
        /** The stage of the PackageModel update allowing to specify publisherDisplayName. */
        interface WithPublisherDisplayName {
            /**
             * Specifies the publisherDisplayName property: The publisher display name of the package.
             *
             * @param publisherDisplayName The publisher display name of the package.
             * @return the next definition stage.
             */
            Update withPublisherDisplayName(String publisherDisplayName);
        }
        /** The stage of the PackageModel update allowing to specify source. */
        interface WithSource {
            /**
             * Specifies the source property: The source of the package.
             *
             * @param source The source of the package.
             * @return the next definition stage.
             */
            Update withSource(MetadataSource source);
        }
        /** The stage of the PackageModel update allowing to specify author. */
        interface WithAuthor {
            /**
             * Specifies the author property: The author of the package.
             *
             * @param author The author of the package.
             * @return the next definition stage.
             */
            Update withAuthor(MetadataAuthor author);
        }
        /** The stage of the PackageModel update allowing to specify support. */
        interface WithSupport {
            /**
             * Specifies the support property: The support tier of the package.
             *
             * @param support The support tier of the package.
             * @return the next definition stage.
             */
            Update withSupport(MetadataSupport support);
        }
        /** The stage of the PackageModel update allowing to specify dependencies. */
        interface WithDependencies {
            /**
             * Specifies the dependencies property: The support tier of the package.
             *
             * @param dependencies The support tier of the package.
             * @return the next definition stage.
             */
            Update withDependencies(MetadataDependencies dependencies);
        }
        /** The stage of the PackageModel update allowing to specify providers. */
        interface WithProviders {
            /**
             * Specifies the providers property: Providers for the package item.
             *
             * @param providers Providers for the package item.
             * @return the next definition stage.
             */
            Update withProviders(List<String> providers);
        }
        /** The stage of the PackageModel update allowing to specify firstPublishDate. */
        interface WithFirstPublishDate {
            /**
             * Specifies the firstPublishDate property: first publish date package item.
             *
             * @param firstPublishDate first publish date package item.
             * @return the next definition stage.
             */
            Update withFirstPublishDate(LocalDate firstPublishDate);
        }
        /** The stage of the PackageModel update allowing to specify lastPublishDate. */
        interface WithLastPublishDate {
            /**
             * Specifies the lastPublishDate property: last publish date for the package item.
             *
             * @param lastPublishDate last publish date for the package item.
             * @return the next definition stage.
             */
            Update withLastPublishDate(LocalDate lastPublishDate);
        }
        /** The stage of the PackageModel update allowing to specify categories. */
        interface WithCategories {
            /**
             * Specifies the categories property: The categories of the package.
             *
             * @param categories The categories of the package.
             * @return the next definition stage.
             */
            Update withCategories(MetadataCategories categories);
        }
        /** The stage of the PackageModel update allowing to specify threatAnalysisTactics. */
        interface WithThreatAnalysisTactics {
            /**
             * Specifies the threatAnalysisTactics property: the tactics the resource covers.
             *
             * @param threatAnalysisTactics the tactics the resource covers.
             * @return the next definition stage.
             */
            Update withThreatAnalysisTactics(List<String> threatAnalysisTactics);
        }
        /** The stage of the PackageModel update allowing to specify threatAnalyticsTechniques. */
        interface WithThreatAnalyticsTechniques {
            /**
             * Specifies the threatAnalyticsTechniques property: the techniques the resource covers, these have to be
             * aligned with the tactics being used.
             *
             * @param threatAnalyticsTechniques the techniques the resource covers, these have to be aligned with the
             *     tactics being used.
             * @return the next definition stage.
             */
            Update withThreatAnalyticsTechniques(List<String> threatAnalyticsTechniques);
        }
        /** The stage of the PackageModel update allowing to specify icon. */
        interface WithIcon {
            /**
             * Specifies the icon property: the icon identifier. this id can later be fetched from the content metadata.
             *
             * @param icon the icon identifier. this id can later be fetched from the content metadata.
             * @return the next definition stage.
             */
            Update withIcon(String icon);
        }
    }
}
