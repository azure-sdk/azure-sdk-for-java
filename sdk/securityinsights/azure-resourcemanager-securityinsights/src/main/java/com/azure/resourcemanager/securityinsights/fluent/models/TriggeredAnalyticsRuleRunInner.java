// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.ProvisioningState;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/** The triggered analytics rule run. */
@Fluent
public final class TriggeredAnalyticsRuleRunInner extends ResourceWithEtag {
    /*
     * The triggered analytics rule run Properties
     */
    @JsonProperty(value = "properties", required = true)
    private TriggeredAnalyticsRuleRunProperties innerProperties = new TriggeredAnalyticsRuleRunProperties();

    /** Creates an instance of TriggeredAnalyticsRuleRunInner class. */
    public TriggeredAnalyticsRuleRunInner() {
    }

    /**
     * Get the innerProperties property: The triggered analytics rule run Properties.
     *
     * @return the innerProperties value.
     */
    private TriggeredAnalyticsRuleRunProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public TriggeredAnalyticsRuleRunInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the executionTimeUtc property: The executionTimeUtc property.
     *
     * @return the executionTimeUtc value.
     */
    public OffsetDateTime executionTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().executionTimeUtc();
    }

    /**
     * Set the executionTimeUtc property: The executionTimeUtc property.
     *
     * @param executionTimeUtc the executionTimeUtc value to set.
     * @return the TriggeredAnalyticsRuleRunInner object itself.
     */
    public TriggeredAnalyticsRuleRunInner withExecutionTimeUtc(OffsetDateTime executionTimeUtc) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TriggeredAnalyticsRuleRunProperties();
        }
        this.innerProperties().withExecutionTimeUtc(executionTimeUtc);
        return this;
    }

    /**
     * Get the ruleId property: The ruleId property.
     *
     * @return the ruleId value.
     */
    public String ruleId() {
        return this.innerProperties() == null ? null : this.innerProperties().ruleId();
    }

    /**
     * Set the ruleId property: The ruleId property.
     *
     * @param ruleId the ruleId value to set.
     * @return the TriggeredAnalyticsRuleRunInner object itself.
     */
    public TriggeredAnalyticsRuleRunInner withRuleId(String ruleId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TriggeredAnalyticsRuleRunProperties();
        }
        this.innerProperties().withRuleId(ruleId);
        return this;
    }

    /**
     * Get the triggeredAnalyticsRuleRunId property: The triggeredAnalyticsRuleRunId property.
     *
     * @return the triggeredAnalyticsRuleRunId value.
     */
    public String triggeredAnalyticsRuleRunId() {
        return this.innerProperties() == null ? null : this.innerProperties().triggeredAnalyticsRuleRunId();
    }

    /**
     * Set the triggeredAnalyticsRuleRunId property: The triggeredAnalyticsRuleRunId property.
     *
     * @param triggeredAnalyticsRuleRunId the triggeredAnalyticsRuleRunId value to set.
     * @return the TriggeredAnalyticsRuleRunInner object itself.
     */
    public TriggeredAnalyticsRuleRunInner withTriggeredAnalyticsRuleRunId(String triggeredAnalyticsRuleRunId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TriggeredAnalyticsRuleRunProperties();
        }
        this.innerProperties().withTriggeredAnalyticsRuleRunId(triggeredAnalyticsRuleRunId);
        return this;
    }

    /**
     * Get the provisioningState property: The triggered analytics rule run provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Set the provisioningState property: The triggered analytics rule run provisioning state.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the TriggeredAnalyticsRuleRunInner object itself.
     */
    public TriggeredAnalyticsRuleRunInner withProvisioningState(ProvisioningState provisioningState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TriggeredAnalyticsRuleRunProperties();
        }
        this.innerProperties().withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Get the ruleRunAdditionalData property: Dictionary of &lt;any&gt;.
     *
     * @return the ruleRunAdditionalData value.
     */
    public Map<String, Object> ruleRunAdditionalData() {
        return this.innerProperties() == null ? null : this.innerProperties().ruleRunAdditionalData();
    }

    /**
     * Set the ruleRunAdditionalData property: Dictionary of &lt;any&gt;.
     *
     * @param ruleRunAdditionalData the ruleRunAdditionalData value to set.
     * @return the TriggeredAnalyticsRuleRunInner object itself.
     */
    public TriggeredAnalyticsRuleRunInner withRuleRunAdditionalData(Map<String, Object> ruleRunAdditionalData) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TriggeredAnalyticsRuleRunProperties();
        }
        this.innerProperties().withRuleRunAdditionalData(ruleRunAdditionalData);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model TriggeredAnalyticsRuleRunInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TriggeredAnalyticsRuleRunInner.class);
}
