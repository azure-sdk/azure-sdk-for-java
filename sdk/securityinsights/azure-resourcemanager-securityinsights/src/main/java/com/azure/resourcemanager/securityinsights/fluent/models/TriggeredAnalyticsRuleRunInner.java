// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.ProvisioningState;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * The triggered analytics rule run.
 */
@Fluent
public final class TriggeredAnalyticsRuleRunInner extends ResourceWithEtag {
    /*
     * The triggered analytics rule run Properties
     */
    private TriggeredAnalyticsRuleRunProperties innerProperties = new TriggeredAnalyticsRuleRunProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of TriggeredAnalyticsRuleRunInner class.
     */
    public TriggeredAnalyticsRuleRunInner() {
    }

    /**
     * Get the innerProperties property: The triggered analytics rule run Properties.
     * 
     * @return the innerProperties value.
     */
    private TriggeredAnalyticsRuleRunProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TriggeredAnalyticsRuleRunInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the executionTimeUtc property: The executionTimeUtc property.
     * 
     * @return the executionTimeUtc value.
     */
    public OffsetDateTime executionTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().executionTimeUtc();
    }

    /**
     * Set the executionTimeUtc property: The executionTimeUtc property.
     * 
     * @param executionTimeUtc the executionTimeUtc value to set.
     * @return the TriggeredAnalyticsRuleRunInner object itself.
     */
    public TriggeredAnalyticsRuleRunInner withExecutionTimeUtc(OffsetDateTime executionTimeUtc) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TriggeredAnalyticsRuleRunProperties();
        }
        this.innerProperties().withExecutionTimeUtc(executionTimeUtc);
        return this;
    }

    /**
     * Get the ruleId property: The ruleId property.
     * 
     * @return the ruleId value.
     */
    public String ruleId() {
        return this.innerProperties() == null ? null : this.innerProperties().ruleId();
    }

    /**
     * Set the ruleId property: The ruleId property.
     * 
     * @param ruleId the ruleId value to set.
     * @return the TriggeredAnalyticsRuleRunInner object itself.
     */
    public TriggeredAnalyticsRuleRunInner withRuleId(String ruleId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TriggeredAnalyticsRuleRunProperties();
        }
        this.innerProperties().withRuleId(ruleId);
        return this;
    }

    /**
     * Get the triggeredAnalyticsRuleRunId property: The triggeredAnalyticsRuleRunId property.
     * 
     * @return the triggeredAnalyticsRuleRunId value.
     */
    public String triggeredAnalyticsRuleRunId() {
        return this.innerProperties() == null ? null : this.innerProperties().triggeredAnalyticsRuleRunId();
    }

    /**
     * Set the triggeredAnalyticsRuleRunId property: The triggeredAnalyticsRuleRunId property.
     * 
     * @param triggeredAnalyticsRuleRunId the triggeredAnalyticsRuleRunId value to set.
     * @return the TriggeredAnalyticsRuleRunInner object itself.
     */
    public TriggeredAnalyticsRuleRunInner withTriggeredAnalyticsRuleRunId(String triggeredAnalyticsRuleRunId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TriggeredAnalyticsRuleRunProperties();
        }
        this.innerProperties().withTriggeredAnalyticsRuleRunId(triggeredAnalyticsRuleRunId);
        return this;
    }

    /**
     * Get the provisioningState property: The triggered analytics rule run provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Set the provisioningState property: The triggered analytics rule run provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the TriggeredAnalyticsRuleRunInner object itself.
     */
    public TriggeredAnalyticsRuleRunInner withProvisioningState(ProvisioningState provisioningState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TriggeredAnalyticsRuleRunProperties();
        }
        this.innerProperties().withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Get the ruleRunAdditionalData property: Dictionary of &lt;any&gt;.
     * 
     * @return the ruleRunAdditionalData value.
     */
    public Map<String, Object> ruleRunAdditionalData() {
        return this.innerProperties() == null ? null : this.innerProperties().ruleRunAdditionalData();
    }

    /**
     * Set the ruleRunAdditionalData property: Dictionary of &lt;any&gt;.
     * 
     * @param ruleRunAdditionalData the ruleRunAdditionalData value to set.
     * @return the TriggeredAnalyticsRuleRunInner object itself.
     */
    public TriggeredAnalyticsRuleRunInner withRuleRunAdditionalData(Map<String, Object> ruleRunAdditionalData) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TriggeredAnalyticsRuleRunProperties();
        }
        this.innerProperties().withRuleRunAdditionalData(ruleRunAdditionalData);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model TriggeredAnalyticsRuleRunInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TriggeredAnalyticsRuleRunInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("etag", etag());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TriggeredAnalyticsRuleRunInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TriggeredAnalyticsRuleRunInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TriggeredAnalyticsRuleRunInner.
     */
    public static TriggeredAnalyticsRuleRunInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TriggeredAnalyticsRuleRunInner deserializedTriggeredAnalyticsRuleRunInner
                = new TriggeredAnalyticsRuleRunInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedTriggeredAnalyticsRuleRunInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedTriggeredAnalyticsRuleRunInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedTriggeredAnalyticsRuleRunInner.type = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedTriggeredAnalyticsRuleRunInner.withEtag(reader.getString());
                } else if ("systemData".equals(fieldName)) {
                    deserializedTriggeredAnalyticsRuleRunInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedTriggeredAnalyticsRuleRunInner.innerProperties
                        = TriggeredAnalyticsRuleRunProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTriggeredAnalyticsRuleRunInner;
        });
    }
}
