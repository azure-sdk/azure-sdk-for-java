// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents a query to run on the TI objects in the workspace.
 */
@Fluent
public final class QueryAutoGenerated {
    /*
     * Represents a condition used to query for TI objects.
     */
    @JsonProperty(value = "condition")
    private QueryCondition condition;

    /*
     * Specifies how to sort the query results.
     */
    @JsonProperty(value = "sortBy")
    private QuerySortBy sortBy;

    /*
     * Represents the maximum size of the page that will be returned from the query API.
     */
    @JsonProperty(value = "maxPageSize")
    private Integer maxPageSize;

    /*
     * Represents the minimum size of the page that will be returned from the query API.
     */
    @JsonProperty(value = "minPageSize")
    private Integer minPageSize;

    /**
     * Creates an instance of QueryAutoGenerated class.
     */
    public QueryAutoGenerated() {
    }

    /**
     * Get the condition property: Represents a condition used to query for TI objects.
     * 
     * @return the condition value.
     */
    public QueryCondition condition() {
        return this.condition;
    }

    /**
     * Set the condition property: Represents a condition used to query for TI objects.
     * 
     * @param condition the condition value to set.
     * @return the QueryAutoGenerated object itself.
     */
    public QueryAutoGenerated withCondition(QueryCondition condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the sortBy property: Specifies how to sort the query results.
     * 
     * @return the sortBy value.
     */
    public QuerySortBy sortBy() {
        return this.sortBy;
    }

    /**
     * Set the sortBy property: Specifies how to sort the query results.
     * 
     * @param sortBy the sortBy value to set.
     * @return the QueryAutoGenerated object itself.
     */
    public QueryAutoGenerated withSortBy(QuerySortBy sortBy) {
        this.sortBy = sortBy;
        return this;
    }

    /**
     * Get the maxPageSize property: Represents the maximum size of the page that will be returned from the query API.
     * 
     * @return the maxPageSize value.
     */
    public Integer maxPageSize() {
        return this.maxPageSize;
    }

    /**
     * Set the maxPageSize property: Represents the maximum size of the page that will be returned from the query API.
     * 
     * @param maxPageSize the maxPageSize value to set.
     * @return the QueryAutoGenerated object itself.
     */
    public QueryAutoGenerated withMaxPageSize(Integer maxPageSize) {
        this.maxPageSize = maxPageSize;
        return this;
    }

    /**
     * Get the minPageSize property: Represents the minimum size of the page that will be returned from the query API.
     * 
     * @return the minPageSize value.
     */
    public Integer minPageSize() {
        return this.minPageSize;
    }

    /**
     * Set the minPageSize property: Represents the minimum size of the page that will be returned from the query API.
     * 
     * @param minPageSize the minPageSize value to set.
     * @return the QueryAutoGenerated object itself.
     */
    public QueryAutoGenerated withMinPageSize(Integer minPageSize) {
        this.minPageSize = minPageSize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (condition() != null) {
            condition().validate();
        }
        if (sortBy() != null) {
            sortBy().validate();
        }
    }
}
