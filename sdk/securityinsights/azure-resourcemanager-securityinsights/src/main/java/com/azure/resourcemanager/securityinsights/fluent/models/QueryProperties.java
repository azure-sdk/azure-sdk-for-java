// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.ConditionProperties;
import java.io.IOException;

/**
 * Describes the query properties.
 */
@Fluent
public final class QueryProperties implements JsonSerializable<QueryProperties> {
    /*
     * Represents a condition used to query for TI objects.
     */
    private ConditionProperties condition;

    /**
     * Creates an instance of QueryProperties class.
     */
    public QueryProperties() {
    }

    /**
     * Get the condition property: Represents a condition used to query for TI objects.
     * 
     * @return the condition value.
     */
    public ConditionProperties condition() {
        return this.condition;
    }

    /**
     * Set the condition property: Represents a condition used to query for TI objects.
     * 
     * @param condition the condition value to set.
     * @return the QueryProperties object itself.
     */
    public QueryProperties withCondition(ConditionProperties condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (condition() != null) {
            condition().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("condition", this.condition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueryProperties.
     */
    public static QueryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryProperties deserializedQueryProperties = new QueryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("condition".equals(fieldName)) {
                    deserializedQueryProperties.condition = ConditionProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryProperties;
        });
    }
}
