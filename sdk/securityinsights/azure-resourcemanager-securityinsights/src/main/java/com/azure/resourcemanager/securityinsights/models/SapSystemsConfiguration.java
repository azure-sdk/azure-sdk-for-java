// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes the SAP configuration.
 */
@Fluent
public final class SapSystemsConfiguration extends SystemsConfiguration {
    /*
     * Represents the types of configuration for a system.
     */
    private ConfigurationType type = ConfigurationType.SAP;

    /*
     * azure resource id
     * example:
     * "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"
     */
    private String azureResourceId;

    /*
     * Base Model for SAP System Connector.
     */
    private SystemsConfigurationConnector connector;

    /*
     * The logs configuration.
     */
    private List<Log> logs;

    /**
     * Creates an instance of SapSystemsConfiguration class.
     */
    public SapSystemsConfiguration() {
    }

    /**
     * Get the type property: Represents the types of configuration for a system.
     * 
     * @return the type value.
     */
    @Override
    public ConfigurationType type() {
        return this.type;
    }

    /**
     * Get the azureResourceId property: azure resource id
     * example:
     * "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM".
     * 
     * @return the azureResourceId value.
     */
    public String azureResourceId() {
        return this.azureResourceId;
    }

    /**
     * Set the azureResourceId property: azure resource id
     * example:
     * "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM".
     * 
     * @param azureResourceId the azureResourceId value to set.
     * @return the SapSystemsConfiguration object itself.
     */
    public SapSystemsConfiguration withAzureResourceId(String azureResourceId) {
        this.azureResourceId = azureResourceId;
        return this;
    }

    /**
     * Get the connector property: Base Model for SAP System Connector.
     * 
     * @return the connector value.
     */
    public SystemsConfigurationConnector connector() {
        return this.connector;
    }

    /**
     * Set the connector property: Base Model for SAP System Connector.
     * 
     * @param connector the connector value to set.
     * @return the SapSystemsConfiguration object itself.
     */
    public SapSystemsConfiguration withConnector(SystemsConfigurationConnector connector) {
        this.connector = connector;
        return this;
    }

    /**
     * Get the logs property: The logs configuration.
     * 
     * @return the logs value.
     */
    public List<Log> logs() {
        return this.logs;
    }

    /**
     * Set the logs property: The logs configuration.
     * 
     * @param logs the logs value to set.
     * @return the SapSystemsConfiguration object itself.
     */
    public SapSystemsConfiguration withLogs(List<Log> logs) {
        this.logs = logs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (connector() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connector in model SapSystemsConfiguration"));
        } else {
            connector().validate();
        }
        if (logs() != null) {
            logs().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SapSystemsConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("connector", this.connector);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("azureResourceId", this.azureResourceId);
        jsonWriter.writeArrayField("logs", this.logs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapSystemsConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapSystemsConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SapSystemsConfiguration.
     */
    public static SapSystemsConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapSystemsConfiguration deserializedSapSystemsConfiguration = new SapSystemsConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connector".equals(fieldName)) {
                    deserializedSapSystemsConfiguration.connector = SystemsConfigurationConnector.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    deserializedSapSystemsConfiguration.type = ConfigurationType.fromString(reader.getString());
                } else if ("azureResourceId".equals(fieldName)) {
                    deserializedSapSystemsConfiguration.azureResourceId = reader.getString();
                } else if ("logs".equals(fieldName)) {
                    List<Log> logs = reader.readArray(reader1 -> Log.fromJson(reader1));
                    deserializedSapSystemsConfiguration.logs = logs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapSystemsConfiguration;
        });
    }
}
