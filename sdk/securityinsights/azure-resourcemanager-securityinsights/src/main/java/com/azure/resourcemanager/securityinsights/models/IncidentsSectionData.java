// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The IncidentsSectionData model. */
@Fluent
public final class IncidentsSectionData {
    /*
     * Aggregation of all incidents by status: 'New', 'Active', 'Closed'
     */
    @JsonProperty(value = "incidentsByStatus")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> incidentsByStatus;

    /*
     * Aggregation of all incidents by severity: 'High', 'Medium', 'Low',
     * 'Informational', ...
     */
    @JsonProperty(value = "incidentsBySeverity")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> incidentsBySeverity;

    /*
     * Aggregation of all closed incidents by closed classification reason:
     * 'TruePositive', 'FalsePositive', 'BenignPositive', 'Undetermined', ...
     */
    @JsonProperty(value = "closedIncidentsClassification")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> closedIncidentsClassification;

    /*
     * A series of incidents by status
     */
    @JsonProperty(value = "incidentsStatusByCreationTime")
    private List<Map<String, String>> incidentsStatusByCreationTime;

    /*
     * The mean time it took to acknowledge an incident
     */
    @JsonProperty(value = "meanTimeToAck")
    private MeanTimeToAction meanTimeToAck;

    /*
     * The mean time it took to close an incident
     */
    @JsonProperty(value = "meanTimeToClose")
    private MeanTimeToAction meanTimeToClose;

    /**
     * Get the incidentsByStatus property: Aggregation of all incidents by status: 'New', 'Active', 'Closed'.
     *
     * @return the incidentsByStatus value.
     */
    public Map<String, String> incidentsByStatus() {
        return this.incidentsByStatus;
    }

    /**
     * Set the incidentsByStatus property: Aggregation of all incidents by status: 'New', 'Active', 'Closed'.
     *
     * @param incidentsByStatus the incidentsByStatus value to set.
     * @return the IncidentsSectionData object itself.
     */
    public IncidentsSectionData withIncidentsByStatus(Map<String, String> incidentsByStatus) {
        this.incidentsByStatus = incidentsByStatus;
        return this;
    }

    /**
     * Get the incidentsBySeverity property: Aggregation of all incidents by severity: 'High', 'Medium', 'Low',
     * 'Informational', ...
     *
     * @return the incidentsBySeverity value.
     */
    public Map<String, String> incidentsBySeverity() {
        return this.incidentsBySeverity;
    }

    /**
     * Set the incidentsBySeverity property: Aggregation of all incidents by severity: 'High', 'Medium', 'Low',
     * 'Informational', ...
     *
     * @param incidentsBySeverity the incidentsBySeverity value to set.
     * @return the IncidentsSectionData object itself.
     */
    public IncidentsSectionData withIncidentsBySeverity(Map<String, String> incidentsBySeverity) {
        this.incidentsBySeverity = incidentsBySeverity;
        return this;
    }

    /**
     * Get the closedIncidentsClassification property: Aggregation of all closed incidents by closed classification
     * reason: 'TruePositive', 'FalsePositive', 'BenignPositive', 'Undetermined', ...
     *
     * @return the closedIncidentsClassification value.
     */
    public Map<String, String> closedIncidentsClassification() {
        return this.closedIncidentsClassification;
    }

    /**
     * Set the closedIncidentsClassification property: Aggregation of all closed incidents by closed classification
     * reason: 'TruePositive', 'FalsePositive', 'BenignPositive', 'Undetermined', ...
     *
     * @param closedIncidentsClassification the closedIncidentsClassification value to set.
     * @return the IncidentsSectionData object itself.
     */
    public IncidentsSectionData withClosedIncidentsClassification(Map<String, String> closedIncidentsClassification) {
        this.closedIncidentsClassification = closedIncidentsClassification;
        return this;
    }

    /**
     * Get the incidentsStatusByCreationTime property: A series of incidents by status.
     *
     * @return the incidentsStatusByCreationTime value.
     */
    public List<Map<String, String>> incidentsStatusByCreationTime() {
        return this.incidentsStatusByCreationTime;
    }

    /**
     * Set the incidentsStatusByCreationTime property: A series of incidents by status.
     *
     * @param incidentsStatusByCreationTime the incidentsStatusByCreationTime value to set.
     * @return the IncidentsSectionData object itself.
     */
    public IncidentsSectionData withIncidentsStatusByCreationTime(
        List<Map<String, String>> incidentsStatusByCreationTime) {
        this.incidentsStatusByCreationTime = incidentsStatusByCreationTime;
        return this;
    }

    /**
     * Get the meanTimeToAck property: The mean time it took to acknowledge an incident.
     *
     * @return the meanTimeToAck value.
     */
    public MeanTimeToAction meanTimeToAck() {
        return this.meanTimeToAck;
    }

    /**
     * Set the meanTimeToAck property: The mean time it took to acknowledge an incident.
     *
     * @param meanTimeToAck the meanTimeToAck value to set.
     * @return the IncidentsSectionData object itself.
     */
    public IncidentsSectionData withMeanTimeToAck(MeanTimeToAction meanTimeToAck) {
        this.meanTimeToAck = meanTimeToAck;
        return this;
    }

    /**
     * Get the meanTimeToClose property: The mean time it took to close an incident.
     *
     * @return the meanTimeToClose value.
     */
    public MeanTimeToAction meanTimeToClose() {
        return this.meanTimeToClose;
    }

    /**
     * Set the meanTimeToClose property: The mean time it took to close an incident.
     *
     * @param meanTimeToClose the meanTimeToClose value to set.
     * @return the IncidentsSectionData object itself.
     */
    public IncidentsSectionData withMeanTimeToClose(MeanTimeToAction meanTimeToClose) {
        this.meanTimeToClose = meanTimeToClose;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (meanTimeToAck() != null) {
            meanTimeToAck().validate();
        }
        if (meanTimeToClose() != null) {
            meanTimeToClose().validate();
        }
    }
}
