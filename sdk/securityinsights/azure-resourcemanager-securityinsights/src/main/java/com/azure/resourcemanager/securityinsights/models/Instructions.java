// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Instructions section of a recommendation. */
@Fluent
public final class Instructions {
    /*
     * What actions should be taken to complete the recommendation.
     */
    @JsonProperty(value = "actionsToBePerformed", required = true)
    private String actionsToBePerformed;

    /*
     * Explains why the recommendation is important.
     */
    @JsonProperty(value = "recommendationImportance", required = true)
    private String recommendationImportance;

    /*
     * How should the user complete the recommendation.
     */
    @JsonProperty(value = "howToPerformActionDetails")
    private String howToPerformActionDetails;

    /**
     * Get the actionsToBePerformed property: What actions should be taken to complete the recommendation.
     *
     * @return the actionsToBePerformed value.
     */
    public String actionsToBePerformed() {
        return this.actionsToBePerformed;
    }

    /**
     * Set the actionsToBePerformed property: What actions should be taken to complete the recommendation.
     *
     * @param actionsToBePerformed the actionsToBePerformed value to set.
     * @return the Instructions object itself.
     */
    public Instructions withActionsToBePerformed(String actionsToBePerformed) {
        this.actionsToBePerformed = actionsToBePerformed;
        return this;
    }

    /**
     * Get the recommendationImportance property: Explains why the recommendation is important.
     *
     * @return the recommendationImportance value.
     */
    public String recommendationImportance() {
        return this.recommendationImportance;
    }

    /**
     * Set the recommendationImportance property: Explains why the recommendation is important.
     *
     * @param recommendationImportance the recommendationImportance value to set.
     * @return the Instructions object itself.
     */
    public Instructions withRecommendationImportance(String recommendationImportance) {
        this.recommendationImportance = recommendationImportance;
        return this;
    }

    /**
     * Get the howToPerformActionDetails property: How should the user complete the recommendation.
     *
     * @return the howToPerformActionDetails value.
     */
    public String howToPerformActionDetails() {
        return this.howToPerformActionDetails;
    }

    /**
     * Set the howToPerformActionDetails property: How should the user complete the recommendation.
     *
     * @param howToPerformActionDetails the howToPerformActionDetails value to set.
     * @return the Instructions object itself.
     */
    public Instructions withHowToPerformActionDetails(String howToPerformActionDetails) {
        this.howToPerformActionDetails = howToPerformActionDetails;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (actionsToBePerformed() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property actionsToBePerformed in model Instructions"));
        }
        if (recommendationImportance() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property recommendationImportance in model Instructions"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Instructions.class);
}
