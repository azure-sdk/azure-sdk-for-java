// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.JobItem;
import com.azure.resourcemanager.securityinsights.models.ProvisioningState;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The assignment job.
 */
@Fluent
public final class JobInner extends ResourceWithEtag {
    /*
     * The job object
     */
    private JobProperties innerProperties;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /**
     * Creates an instance of JobInner class.
     */
    public JobInner() {
    }

    /**
     * Get the innerProperties property: The job object.
     * 
     * @return the innerProperties value.
     */
    private JobProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JobInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the endTime property: The time the job completed.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.innerProperties() == null ? null : this.innerProperties().endTime();
    }

    /**
     * Get the items property: List of items published by the job.
     * 
     * @return the items value.
     */
    public List<JobItem> items() {
        return this.innerProperties() == null ? null : this.innerProperties().items();
    }

    /**
     * Set the items property: List of items published by the job.
     * 
     * @param items the items value to set.
     * @return the JobInner object itself.
     */
    public JobInner withItems(List<JobItem> items) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobProperties();
        }
        this.innerProperties().withItems(items);
        return this;
    }

    /**
     * Get the provisioningState property: State of the job.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the startTime property: The time the job started.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.innerProperties() == null ? null : this.innerProperties().startTime();
    }

    /**
     * Get the errorMessage property: Message to describe error, if an error exists.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().errorMessage();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("etag", etag());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobInner if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JobInner.
     */
    public static JobInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobInner deserializedJobInner = new JobInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedJobInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedJobInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedJobInner.type = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedJobInner.withEtag(reader.getString());
                } else if ("systemData".equals(fieldName)) {
                    deserializedJobInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedJobInner.innerProperties = JobProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobInner;
        });
    }
}
