// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The data type which is created by the connector,
 * including a query indicated when was the last time that data type was received in the workspace.
 */
@Fluent
public final class ConnectorDataType implements JsonSerializable<ConnectorDataType> {
    /*
     * Gets or sets the name of the data type to show in the graph.
     */
    private String name;

    /*
     * Gets or sets the query to indicate when relevant data was last received in the workspace.
     */
    private String lastDataReceivedQuery;

    /**
     * Creates an instance of ConnectorDataType class.
     */
    public ConnectorDataType() {
    }

    /**
     * Get the name property: Gets or sets the name of the data type to show in the graph.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets or sets the name of the data type to show in the graph.
     * 
     * @param name the name value to set.
     * @return the ConnectorDataType object itself.
     */
    public ConnectorDataType withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the lastDataReceivedQuery property: Gets or sets the query to indicate when relevant data was last received
     * in the workspace.
     * 
     * @return the lastDataReceivedQuery value.
     */
    public String lastDataReceivedQuery() {
        return this.lastDataReceivedQuery;
    }

    /**
     * Set the lastDataReceivedQuery property: Gets or sets the query to indicate when relevant data was last received
     * in the workspace.
     * 
     * @param lastDataReceivedQuery the lastDataReceivedQuery value to set.
     * @return the ConnectorDataType object itself.
     */
    public ConnectorDataType withLastDataReceivedQuery(String lastDataReceivedQuery) {
        this.lastDataReceivedQuery = lastDataReceivedQuery;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model ConnectorDataType"));
        }
        if (lastDataReceivedQuery() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property lastDataReceivedQuery in model ConnectorDataType"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectorDataType.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("lastDataReceivedQuery", this.lastDataReceivedQuery);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectorDataType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectorDataType if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectorDataType.
     */
    public static ConnectorDataType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectorDataType deserializedConnectorDataType = new ConnectorDataType();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedConnectorDataType.name = reader.getString();
                } else if ("lastDataReceivedQuery".equals(fieldName)) {
                    deserializedConnectorDataType.lastDataReceivedQuery = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectorDataType;
        });
    }
}
