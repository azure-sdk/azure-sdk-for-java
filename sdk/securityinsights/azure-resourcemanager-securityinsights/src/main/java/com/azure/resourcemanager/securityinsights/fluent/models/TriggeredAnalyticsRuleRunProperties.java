// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.ProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * The triggered analytics rule run Properties.
 */
@Fluent
public final class TriggeredAnalyticsRuleRunProperties
    implements JsonSerializable<TriggeredAnalyticsRuleRunProperties> {
    /*
     * The executionTimeUtc property.
     */
    private OffsetDateTime executionTimeUtc;

    /*
     * The ruleId property.
     */
    private String ruleId;

    /*
     * The triggeredAnalyticsRuleRunId property.
     */
    private String triggeredAnalyticsRuleRunId;

    /*
     * The triggered analytics rule run provisioning state
     */
    private ProvisioningState provisioningState;

    /*
     * Dictionary of <any>
     */
    private Map<String, Object> ruleRunAdditionalData;

    /**
     * Creates an instance of TriggeredAnalyticsRuleRunProperties class.
     */
    public TriggeredAnalyticsRuleRunProperties() {
    }

    /**
     * Get the executionTimeUtc property: The executionTimeUtc property.
     * 
     * @return the executionTimeUtc value.
     */
    public OffsetDateTime executionTimeUtc() {
        return this.executionTimeUtc;
    }

    /**
     * Set the executionTimeUtc property: The executionTimeUtc property.
     * 
     * @param executionTimeUtc the executionTimeUtc value to set.
     * @return the TriggeredAnalyticsRuleRunProperties object itself.
     */
    public TriggeredAnalyticsRuleRunProperties withExecutionTimeUtc(OffsetDateTime executionTimeUtc) {
        this.executionTimeUtc = executionTimeUtc;
        return this;
    }

    /**
     * Get the ruleId property: The ruleId property.
     * 
     * @return the ruleId value.
     */
    public String ruleId() {
        return this.ruleId;
    }

    /**
     * Set the ruleId property: The ruleId property.
     * 
     * @param ruleId the ruleId value to set.
     * @return the TriggeredAnalyticsRuleRunProperties object itself.
     */
    public TriggeredAnalyticsRuleRunProperties withRuleId(String ruleId) {
        this.ruleId = ruleId;
        return this;
    }

    /**
     * Get the triggeredAnalyticsRuleRunId property: The triggeredAnalyticsRuleRunId property.
     * 
     * @return the triggeredAnalyticsRuleRunId value.
     */
    public String triggeredAnalyticsRuleRunId() {
        return this.triggeredAnalyticsRuleRunId;
    }

    /**
     * Set the triggeredAnalyticsRuleRunId property: The triggeredAnalyticsRuleRunId property.
     * 
     * @param triggeredAnalyticsRuleRunId the triggeredAnalyticsRuleRunId value to set.
     * @return the TriggeredAnalyticsRuleRunProperties object itself.
     */
    public TriggeredAnalyticsRuleRunProperties withTriggeredAnalyticsRuleRunId(String triggeredAnalyticsRuleRunId) {
        this.triggeredAnalyticsRuleRunId = triggeredAnalyticsRuleRunId;
        return this;
    }

    /**
     * Get the provisioningState property: The triggered analytics rule run provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The triggered analytics rule run provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the TriggeredAnalyticsRuleRunProperties object itself.
     */
    public TriggeredAnalyticsRuleRunProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the ruleRunAdditionalData property: Dictionary of &lt;any&gt;.
     * 
     * @return the ruleRunAdditionalData value.
     */
    public Map<String, Object> ruleRunAdditionalData() {
        return this.ruleRunAdditionalData;
    }

    /**
     * Set the ruleRunAdditionalData property: Dictionary of &lt;any&gt;.
     * 
     * @param ruleRunAdditionalData the ruleRunAdditionalData value to set.
     * @return the TriggeredAnalyticsRuleRunProperties object itself.
     */
    public TriggeredAnalyticsRuleRunProperties withRuleRunAdditionalData(Map<String, Object> ruleRunAdditionalData) {
        this.ruleRunAdditionalData = ruleRunAdditionalData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (executionTimeUtc() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property executionTimeUtc in model TriggeredAnalyticsRuleRunProperties"));
        }
        if (ruleId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ruleId in model TriggeredAnalyticsRuleRunProperties"));
        }
        if (triggeredAnalyticsRuleRunId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property triggeredAnalyticsRuleRunId in model TriggeredAnalyticsRuleRunProperties"));
        }
        if (provisioningState() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property provisioningState in model TriggeredAnalyticsRuleRunProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TriggeredAnalyticsRuleRunProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("executionTimeUtc",
            this.executionTimeUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.executionTimeUtc));
        jsonWriter.writeStringField("ruleId", this.ruleId);
        jsonWriter.writeStringField("triggeredAnalyticsRuleRunId", this.triggeredAnalyticsRuleRunId);
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeMapField("ruleRunAdditionalData", this.ruleRunAdditionalData,
            (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TriggeredAnalyticsRuleRunProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TriggeredAnalyticsRuleRunProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TriggeredAnalyticsRuleRunProperties.
     */
    public static TriggeredAnalyticsRuleRunProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TriggeredAnalyticsRuleRunProperties deserializedTriggeredAnalyticsRuleRunProperties
                = new TriggeredAnalyticsRuleRunProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("executionTimeUtc".equals(fieldName)) {
                    deserializedTriggeredAnalyticsRuleRunProperties.executionTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("ruleId".equals(fieldName)) {
                    deserializedTriggeredAnalyticsRuleRunProperties.ruleId = reader.getString();
                } else if ("triggeredAnalyticsRuleRunId".equals(fieldName)) {
                    deserializedTriggeredAnalyticsRuleRunProperties.triggeredAnalyticsRuleRunId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedTriggeredAnalyticsRuleRunProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("ruleRunAdditionalData".equals(fieldName)) {
                    Map<String, Object> ruleRunAdditionalData = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedTriggeredAnalyticsRuleRunProperties.ruleRunAdditionalData = ruleRunAdditionalData;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTriggeredAnalyticsRuleRunProperties;
        });
    }
}
