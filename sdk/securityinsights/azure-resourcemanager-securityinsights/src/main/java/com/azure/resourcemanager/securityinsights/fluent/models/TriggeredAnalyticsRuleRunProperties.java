// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/** The triggered analytics rule run Properties. */
@Fluent
public final class TriggeredAnalyticsRuleRunProperties {
    /*
     * The executionTimeUtc property.
     */
    @JsonProperty(value = "executionTimeUtc", required = true)
    private OffsetDateTime executionTimeUtc;

    /*
     * The ruleId property.
     */
    @JsonProperty(value = "ruleId", required = true)
    private String ruleId;

    /*
     * The triggeredAnalyticsRuleRunId property.
     */
    @JsonProperty(value = "triggeredAnalyticsRuleRunId", required = true)
    private String triggeredAnalyticsRuleRunId;

    /*
     * The triggered analytics rule run provisioning state
     */
    @JsonProperty(value = "provisioningState", required = true)
    private ProvisioningState provisioningState;

    /*
     * Dictionary of <any>
     */
    @JsonProperty(value = "ruleRunAdditionalData")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, Object> ruleRunAdditionalData;

    /** Creates an instance of TriggeredAnalyticsRuleRunProperties class. */
    public TriggeredAnalyticsRuleRunProperties() {
    }

    /**
     * Get the executionTimeUtc property: The executionTimeUtc property.
     *
     * @return the executionTimeUtc value.
     */
    public OffsetDateTime executionTimeUtc() {
        return this.executionTimeUtc;
    }

    /**
     * Set the executionTimeUtc property: The executionTimeUtc property.
     *
     * @param executionTimeUtc the executionTimeUtc value to set.
     * @return the TriggeredAnalyticsRuleRunProperties object itself.
     */
    public TriggeredAnalyticsRuleRunProperties withExecutionTimeUtc(OffsetDateTime executionTimeUtc) {
        this.executionTimeUtc = executionTimeUtc;
        return this;
    }

    /**
     * Get the ruleId property: The ruleId property.
     *
     * @return the ruleId value.
     */
    public String ruleId() {
        return this.ruleId;
    }

    /**
     * Set the ruleId property: The ruleId property.
     *
     * @param ruleId the ruleId value to set.
     * @return the TriggeredAnalyticsRuleRunProperties object itself.
     */
    public TriggeredAnalyticsRuleRunProperties withRuleId(String ruleId) {
        this.ruleId = ruleId;
        return this;
    }

    /**
     * Get the triggeredAnalyticsRuleRunId property: The triggeredAnalyticsRuleRunId property.
     *
     * @return the triggeredAnalyticsRuleRunId value.
     */
    public String triggeredAnalyticsRuleRunId() {
        return this.triggeredAnalyticsRuleRunId;
    }

    /**
     * Set the triggeredAnalyticsRuleRunId property: The triggeredAnalyticsRuleRunId property.
     *
     * @param triggeredAnalyticsRuleRunId the triggeredAnalyticsRuleRunId value to set.
     * @return the TriggeredAnalyticsRuleRunProperties object itself.
     */
    public TriggeredAnalyticsRuleRunProperties withTriggeredAnalyticsRuleRunId(String triggeredAnalyticsRuleRunId) {
        this.triggeredAnalyticsRuleRunId = triggeredAnalyticsRuleRunId;
        return this;
    }

    /**
     * Get the provisioningState property: The triggered analytics rule run provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The triggered analytics rule run provisioning state.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the TriggeredAnalyticsRuleRunProperties object itself.
     */
    public TriggeredAnalyticsRuleRunProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the ruleRunAdditionalData property: Dictionary of &lt;any&gt;.
     *
     * @return the ruleRunAdditionalData value.
     */
    public Map<String, Object> ruleRunAdditionalData() {
        return this.ruleRunAdditionalData;
    }

    /**
     * Set the ruleRunAdditionalData property: Dictionary of &lt;any&gt;.
     *
     * @param ruleRunAdditionalData the ruleRunAdditionalData value to set.
     * @return the TriggeredAnalyticsRuleRunProperties object itself.
     */
    public TriggeredAnalyticsRuleRunProperties withRuleRunAdditionalData(Map<String, Object> ruleRunAdditionalData) {
        this.ruleRunAdditionalData = ruleRunAdditionalData;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (executionTimeUtc() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property executionTimeUtc in model TriggeredAnalyticsRuleRunProperties"));
        }
        if (ruleId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property ruleId in model TriggeredAnalyticsRuleRunProperties"));
        }
        if (triggeredAnalyticsRuleRunId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property triggeredAnalyticsRuleRunId in model"
                            + " TriggeredAnalyticsRuleRunProperties"));
        }
        if (provisioningState() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property provisioningState in model TriggeredAnalyticsRuleRunProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TriggeredAnalyticsRuleRunProperties.class);
}
