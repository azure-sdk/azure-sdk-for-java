// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.IncidentTasksClient;
import com.azure.resourcemanager.securityinsights.fluent.models.IncidentTaskInner;
import com.azure.resourcemanager.securityinsights.models.IncidentTask;
import com.azure.resourcemanager.securityinsights.models.IncidentTasks;

public final class IncidentTasksImpl implements IncidentTasks {
    private static final ClientLogger LOGGER = new ClientLogger(IncidentTasksImpl.class);

    private final IncidentTasksClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public IncidentTasksImpl(IncidentTasksClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<IncidentTask> list(String resourceGroupName, String workspaceName, String incidentId) {
        PagedIterable<IncidentTaskInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, incidentId);
        return Utils.mapPage(inner, inner1 -> new IncidentTaskImpl(inner1, this.manager()));
    }

    public PagedIterable<IncidentTask> list(String resourceGroupName, String workspaceName, String incidentId,
        Context context) {
        PagedIterable<IncidentTaskInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, incidentId, context);
        return Utils.mapPage(inner, inner1 -> new IncidentTaskImpl(inner1, this.manager()));
    }

    public Response<IncidentTask> getWithResponse(String resourceGroupName, String workspaceName, String incidentId,
        String incidentTaskId, Context context) {
        Response<IncidentTaskInner> inner = this.serviceClient().getWithResponse(resourceGroupName, workspaceName,
            incidentId, incidentTaskId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new IncidentTaskImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IncidentTask get(String resourceGroupName, String workspaceName, String incidentId, String incidentTaskId) {
        IncidentTaskInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, incidentId, incidentTaskId);
        if (inner != null) {
            return new IncidentTaskImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName, String incidentId,
        String incidentTaskId, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, incidentId, incidentTaskId,
            context);
    }

    public void delete(String resourceGroupName, String workspaceName, String incidentId, String incidentTaskId) {
        this.serviceClient().delete(resourceGroupName, workspaceName, incidentId, incidentTaskId);
    }

    public IncidentTask getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String incidentId = Utils.getValueFromIdByName(id, "incidents");
        if (incidentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'incidents'.", id)));
        }
        String incidentTaskId = Utils.getValueFromIdByName(id, "tasks");
        if (incidentTaskId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tasks'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, incidentId, incidentTaskId, Context.NONE)
            .getValue();
    }

    public Response<IncidentTask> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String incidentId = Utils.getValueFromIdByName(id, "incidents");
        if (incidentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'incidents'.", id)));
        }
        String incidentTaskId = Utils.getValueFromIdByName(id, "tasks");
        if (incidentTaskId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tasks'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, incidentId, incidentTaskId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String incidentId = Utils.getValueFromIdByName(id, "incidents");
        if (incidentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'incidents'.", id)));
        }
        String incidentTaskId = Utils.getValueFromIdByName(id, "tasks");
        if (incidentTaskId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tasks'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, incidentId, incidentTaskId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String incidentId = Utils.getValueFromIdByName(id, "incidents");
        if (incidentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'incidents'.", id)));
        }
        String incidentTaskId = Utils.getValueFromIdByName(id, "tasks");
        if (incidentTaskId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tasks'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, incidentId, incidentTaskId, context);
    }

    private IncidentTasksClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    public IncidentTaskImpl define(String name) {
        return new IncidentTaskImpl(name, this.manager());
    }
}
