// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.RepositoryAccessKind;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Credentials to access repository.
 */
@Fluent
public final class RepositoryAccess {
    /*
     * The kind of repository access credentials
     */
    @JsonProperty(value = "kind", required = true)
    private RepositoryAccessKind kind;

    /*
     * OAuth Code. Required when `kind` is `OAuth`
     */
    @JsonProperty(value = "code")
    private String code;

    /*
     * OAuth State. Required when `kind` is `OAuth`
     */
    @JsonProperty(value = "state")
    private String state;

    /*
     * OAuth ClientId. Required when `kind` is `OAuth`
     */
    @JsonProperty(value = "clientId")
    private String clientId;

    /*
     * Personal Access Token. Required when `kind` is `PAT`
     */
    @JsonProperty(value = "token")
    private String token;

    /*
     * Application installation ID. Required when `kind` is `App`. Supported by `GitHub` only.
     */
    @JsonProperty(value = "installationId")
    private String installationId;

    /**
     * Creates an instance of RepositoryAccess class.
     */
    public RepositoryAccess() {
    }

    /**
     * Get the kind property: The kind of repository access credentials.
     * 
     * @return the kind value.
     */
    public RepositoryAccessKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind of repository access credentials.
     * 
     * @param kind the kind value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withKind(RepositoryAccessKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the code property: OAuth Code. Required when `kind` is `OAuth`.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Set the code property: OAuth Code. Required when `kind` is `OAuth`.
     * 
     * @param code the code value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the state property: OAuth State. Required when `kind` is `OAuth`.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: OAuth State. Required when `kind` is `OAuth`.
     * 
     * @param state the state value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the clientId property: OAuth ClientId. Required when `kind` is `OAuth`.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: OAuth ClientId. Required when `kind` is `OAuth`.
     * 
     * @param clientId the clientId value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the token property: Personal Access Token. Required when `kind` is `PAT`.
     * 
     * @return the token value.
     */
    public String token() {
        return this.token;
    }

    /**
     * Set the token property: Personal Access Token. Required when `kind` is `PAT`.
     * 
     * @param token the token value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Get the installationId property: Application installation ID. Required when `kind` is `App`. Supported by
     * `GitHub` only.
     * 
     * @return the installationId value.
     */
    public String installationId() {
        return this.installationId;
    }

    /**
     * Set the installationId property: Application installation ID. Required when `kind` is `App`. Supported by
     * `GitHub` only.
     * 
     * @param installationId the installationId value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withInstallationId(String installationId) {
        this.installationId = installationId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kind() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property kind in model RepositoryAccess"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RepositoryAccess.class);
}
