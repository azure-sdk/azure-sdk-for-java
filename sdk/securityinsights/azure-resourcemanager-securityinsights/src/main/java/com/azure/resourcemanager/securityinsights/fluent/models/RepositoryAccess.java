// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.RepositoryAccessKind;
import java.io.IOException;

/**
 * Credentials to access repository.
 */
@Fluent
public final class RepositoryAccess implements JsonSerializable<RepositoryAccess> {
    /*
     * The kind of repository access credentials
     */
    private RepositoryAccessKind kind;

    /*
     * OAuth Code. Required when `kind` is `OAuth`
     */
    private String code;

    /*
     * OAuth State. Required when `kind` is `OAuth`
     */
    private String state;

    /*
     * OAuth ClientId. Required when `kind` is `OAuth`
     */
    private String clientId;

    /*
     * Personal Access Token. Required when `kind` is `PAT`
     */
    private String token;

    /*
     * Application installation ID. Required when `kind` is `App`. Supported by `GitHub` only.
     */
    private String installationId;

    /**
     * Creates an instance of RepositoryAccess class.
     */
    public RepositoryAccess() {
    }

    /**
     * Get the kind property: The kind of repository access credentials.
     * 
     * @return the kind value.
     */
    public RepositoryAccessKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind of repository access credentials.
     * 
     * @param kind the kind value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withKind(RepositoryAccessKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the code property: OAuth Code. Required when `kind` is `OAuth`.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Set the code property: OAuth Code. Required when `kind` is `OAuth`.
     * 
     * @param code the code value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the state property: OAuth State. Required when `kind` is `OAuth`.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: OAuth State. Required when `kind` is `OAuth`.
     * 
     * @param state the state value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the clientId property: OAuth ClientId. Required when `kind` is `OAuth`.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: OAuth ClientId. Required when `kind` is `OAuth`.
     * 
     * @param clientId the clientId value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the token property: Personal Access Token. Required when `kind` is `PAT`.
     * 
     * @return the token value.
     */
    public String token() {
        return this.token;
    }

    /**
     * Set the token property: Personal Access Token. Required when `kind` is `PAT`.
     * 
     * @param token the token value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Get the installationId property: Application installation ID. Required when `kind` is `App`. Supported by
     * `GitHub` only.
     * 
     * @return the installationId value.
     */
    public String installationId() {
        return this.installationId;
    }

    /**
     * Set the installationId property: Application installation ID. Required when `kind` is `App`. Supported by
     * `GitHub` only.
     * 
     * @param installationId the installationId value to set.
     * @return the RepositoryAccess object itself.
     */
    public RepositoryAccess withInstallationId(String installationId) {
        this.installationId = installationId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kind() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kind in model RepositoryAccess"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RepositoryAccess.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("state", this.state);
        jsonWriter.writeStringField("clientId", this.clientId);
        jsonWriter.writeStringField("token", this.token);
        jsonWriter.writeStringField("installationId", this.installationId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RepositoryAccess from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RepositoryAccess if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RepositoryAccess.
     */
    public static RepositoryAccess fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RepositoryAccess deserializedRepositoryAccess = new RepositoryAccess();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedRepositoryAccess.kind = RepositoryAccessKind.fromString(reader.getString());
                } else if ("code".equals(fieldName)) {
                    deserializedRepositoryAccess.code = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedRepositoryAccess.state = reader.getString();
                } else if ("clientId".equals(fieldName)) {
                    deserializedRepositoryAccess.clientId = reader.getString();
                } else if ("token".equals(fieldName)) {
                    deserializedRepositoryAccess.token = reader.getString();
                } else if ("installationId".equals(fieldName)) {
                    deserializedRepositoryAccess.installationId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRepositoryAccess;
        });
    }
}
