// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.securityinsights.models.RelationshipHint;
import com.azure.resourcemanager.securityinsights.models.UserInfoAutoGenerated;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * Describes properties common to all threat intelligence objects.
 */
@Immutable
public final class TIObjectCommonProperties {
    /*
     * The core STIX object that this TI object represents.
     */
    @JsonProperty(value = "data", access = JsonProperty.Access.WRITE_ONLY)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, Object> data;

    /*
     * The UserInfo of the user/entity which originally created this TI object.
     */
    @JsonProperty(value = "createdBy", access = JsonProperty.Access.WRITE_ONLY)
    private UserInfoAutoGenerated createdBy;

    /*
     * The source name for this TI object.
     */
    @JsonProperty(value = "source", access = JsonProperty.Access.WRITE_ONLY)
    private String source;

    /*
     * The timestamp for the first time this object was ingested.
     */
    @JsonProperty(value = "firstIngestedTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime firstIngestedTimeUtc;

    /*
     * The timestamp for the last time this object was ingested.
     */
    @JsonProperty(value = "lastIngestedTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastIngestedTimeUtc;

    /*
     * The ID of the rules version that was active when this TI object was last ingested.
     */
    @JsonProperty(value = "ingestionRulesVersion", access = JsonProperty.Access.WRITE_ONLY)
    private UUID ingestionRulesVersion;

    /*
     * The name of the method/application that initiated the last write to this TI object.
     */
    @JsonProperty(value = "lastUpdateMethod", access = JsonProperty.Access.WRITE_ONLY)
    private String lastUpdateMethod;

    /*
     * The UserInfo of the user/entity which last modified this TI object.
     */
    @JsonProperty(value = "lastModifiedBy", access = JsonProperty.Access.WRITE_ONLY)
    private UserInfoAutoGenerated lastModifiedBy;

    /*
     * The timestamp for the last time this TI object was updated.
     */
    @JsonProperty(value = "lastUpdatedDateTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastUpdatedDateTimeUtc;

    /*
     * A dictionary used to help follow relationships from this object to other STIX objects. The keys are field names from the STIX object (in the 'data' field), and the values are lists of sources that can be prepended to the object ID in order to efficiently locate the target TI object.
     */
    @JsonProperty(value = "relationshipHints", access = JsonProperty.Access.WRITE_ONLY)
    private List<RelationshipHint> relationshipHints;

    /**
     * Creates an instance of TIObjectCommonProperties class.
     */
    public TIObjectCommonProperties() {
    }

    /**
     * Get the data property: The core STIX object that this TI object represents.
     * 
     * @return the data value.
     */
    public Map<String, Object> data() {
        return this.data;
    }

    /**
     * Get the createdBy property: The UserInfo of the user/entity which originally created this TI object.
     * 
     * @return the createdBy value.
     */
    public UserInfoAutoGenerated createdBy() {
        return this.createdBy;
    }

    /**
     * Get the source property: The source name for this TI object.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Get the firstIngestedTimeUtc property: The timestamp for the first time this object was ingested.
     * 
     * @return the firstIngestedTimeUtc value.
     */
    public OffsetDateTime firstIngestedTimeUtc() {
        return this.firstIngestedTimeUtc;
    }

    /**
     * Get the lastIngestedTimeUtc property: The timestamp for the last time this object was ingested.
     * 
     * @return the lastIngestedTimeUtc value.
     */
    public OffsetDateTime lastIngestedTimeUtc() {
        return this.lastIngestedTimeUtc;
    }

    /**
     * Get the ingestionRulesVersion property: The ID of the rules version that was active when this TI object was last
     * ingested.
     * 
     * @return the ingestionRulesVersion value.
     */
    public UUID ingestionRulesVersion() {
        return this.ingestionRulesVersion;
    }

    /**
     * Get the lastUpdateMethod property: The name of the method/application that initiated the last write to this TI
     * object.
     * 
     * @return the lastUpdateMethod value.
     */
    public String lastUpdateMethod() {
        return this.lastUpdateMethod;
    }

    /**
     * Get the lastModifiedBy property: The UserInfo of the user/entity which last modified this TI object.
     * 
     * @return the lastModifiedBy value.
     */
    public UserInfoAutoGenerated lastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * Get the lastUpdatedDateTimeUtc property: The timestamp for the last time this TI object was updated.
     * 
     * @return the lastUpdatedDateTimeUtc value.
     */
    public OffsetDateTime lastUpdatedDateTimeUtc() {
        return this.lastUpdatedDateTimeUtc;
    }

    /**
     * Get the relationshipHints property: A dictionary used to help follow relationships from this object to other STIX
     * objects. The keys are field names from the STIX object (in the 'data' field), and the values are lists of sources
     * that can be prepended to the object ID in order to efficiently locate the target TI object.
     * 
     * @return the relationshipHints value.
     */
    public List<RelationshipHint> relationshipHints() {
        return this.relationshipHints;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (createdBy() != null) {
            createdBy().validate();
        }
        if (lastModifiedBy() != null) {
            lastModifiedBy().validate();
        }
        if (relationshipHints() != null) {
            relationshipHints().forEach(e -> e.validate());
        }
    }
}
