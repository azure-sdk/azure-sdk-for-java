// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.RelationshipHint;
import com.azure.resourcemanager.securityinsights.models.UserInfo;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * Describes properties common to all threat intelligence objects.
 */
@Immutable
public final class TIObjectCommonProperties implements JsonSerializable<TIObjectCommonProperties> {
    /*
     * The core STIX object that this TI object represents.
     */
    private Map<String, Object> data;

    /*
     * The UserInfo of the user/entity which originally created this TI object.
     */
    private UserInfo createdBy;

    /*
     * The source name for this TI object.
     */
    private String source;

    /*
     * The timestamp for the first time this object was ingested.
     */
    private OffsetDateTime firstIngestedTimeUtc;

    /*
     * The timestamp for the last time this object was ingested.
     */
    private OffsetDateTime lastIngestedTimeUtc;

    /*
     * The ID of the rules version that was active when this TI object was last ingested.
     */
    private UUID ingestionRulesVersion;

    /*
     * The name of the method/application that initiated the last write to this TI object.
     */
    private String lastUpdateMethod;

    /*
     * The UserInfo of the user/entity which last modified this TI object.
     */
    private UserInfo lastModifiedBy;

    /*
     * The timestamp for the last time this TI object was updated.
     */
    private OffsetDateTime lastUpdatedDateTimeUtc;

    /*
     * A dictionary used to help follow relationships from this object to other STIX objects. The keys are field names
     * from the STIX object (in the 'data' field), and the values are lists of sources that can be prepended to the
     * object ID in order to efficiently locate the target TI object.
     */
    private List<RelationshipHint> relationshipHints;

    /**
     * Creates an instance of TIObjectCommonProperties class.
     */
    public TIObjectCommonProperties() {
    }

    /**
     * Get the data property: The core STIX object that this TI object represents.
     * 
     * @return the data value.
     */
    public Map<String, Object> data() {
        return this.data;
    }

    /**
     * Get the createdBy property: The UserInfo of the user/entity which originally created this TI object.
     * 
     * @return the createdBy value.
     */
    public UserInfo createdBy() {
        return this.createdBy;
    }

    /**
     * Get the source property: The source name for this TI object.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Get the firstIngestedTimeUtc property: The timestamp for the first time this object was ingested.
     * 
     * @return the firstIngestedTimeUtc value.
     */
    public OffsetDateTime firstIngestedTimeUtc() {
        return this.firstIngestedTimeUtc;
    }

    /**
     * Get the lastIngestedTimeUtc property: The timestamp for the last time this object was ingested.
     * 
     * @return the lastIngestedTimeUtc value.
     */
    public OffsetDateTime lastIngestedTimeUtc() {
        return this.lastIngestedTimeUtc;
    }

    /**
     * Get the ingestionRulesVersion property: The ID of the rules version that was active when this TI object was last
     * ingested.
     * 
     * @return the ingestionRulesVersion value.
     */
    public UUID ingestionRulesVersion() {
        return this.ingestionRulesVersion;
    }

    /**
     * Get the lastUpdateMethod property: The name of the method/application that initiated the last write to this TI
     * object.
     * 
     * @return the lastUpdateMethod value.
     */
    public String lastUpdateMethod() {
        return this.lastUpdateMethod;
    }

    /**
     * Get the lastModifiedBy property: The UserInfo of the user/entity which last modified this TI object.
     * 
     * @return the lastModifiedBy value.
     */
    public UserInfo lastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * Get the lastUpdatedDateTimeUtc property: The timestamp for the last time this TI object was updated.
     * 
     * @return the lastUpdatedDateTimeUtc value.
     */
    public OffsetDateTime lastUpdatedDateTimeUtc() {
        return this.lastUpdatedDateTimeUtc;
    }

    /**
     * Get the relationshipHints property: A dictionary used to help follow relationships from this object to other STIX
     * objects. The keys are field names from the STIX object (in the 'data' field), and the values are lists of sources
     * that can be prepended to the object ID in order to efficiently locate the target TI object.
     * 
     * @return the relationshipHints value.
     */
    public List<RelationshipHint> relationshipHints() {
        return this.relationshipHints;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (createdBy() != null) {
            createdBy().validate();
        }
        if (lastModifiedBy() != null) {
            lastModifiedBy().validate();
        }
        if (relationshipHints() != null) {
            relationshipHints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TIObjectCommonProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TIObjectCommonProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TIObjectCommonProperties.
     */
    public static TIObjectCommonProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TIObjectCommonProperties deserializedTIObjectCommonProperties = new TIObjectCommonProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    Map<String, Object> data = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedTIObjectCommonProperties.data = data;
                } else if ("createdBy".equals(fieldName)) {
                    deserializedTIObjectCommonProperties.createdBy = UserInfo.fromJson(reader);
                } else if ("source".equals(fieldName)) {
                    deserializedTIObjectCommonProperties.source = reader.getString();
                } else if ("firstIngestedTimeUtc".equals(fieldName)) {
                    deserializedTIObjectCommonProperties.firstIngestedTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastIngestedTimeUtc".equals(fieldName)) {
                    deserializedTIObjectCommonProperties.lastIngestedTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("ingestionRulesVersion".equals(fieldName)) {
                    deserializedTIObjectCommonProperties.ingestionRulesVersion
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("lastUpdateMethod".equals(fieldName)) {
                    deserializedTIObjectCommonProperties.lastUpdateMethod = reader.getString();
                } else if ("lastModifiedBy".equals(fieldName)) {
                    deserializedTIObjectCommonProperties.lastModifiedBy = UserInfo.fromJson(reader);
                } else if ("lastUpdatedDateTimeUtc".equals(fieldName)) {
                    deserializedTIObjectCommonProperties.lastUpdatedDateTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("relationshipHints".equals(fieldName)) {
                    List<RelationshipHint> relationshipHints
                        = reader.readArray(reader1 -> RelationshipHint.fromJson(reader1));
                    deserializedTIObjectCommonProperties.relationshipHints = relationshipHints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTIObjectCommonProperties;
        });
    }
}
