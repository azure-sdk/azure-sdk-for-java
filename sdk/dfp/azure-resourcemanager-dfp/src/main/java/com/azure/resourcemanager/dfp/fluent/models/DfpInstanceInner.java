// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dfp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dfp.models.DfpInstanceAdministrators;
import com.azure.resourcemanager.dfp.models.ProvisioningState;
import java.io.IOException;
import java.util.Map;

/**
 * Represents an instance of a DFP instance resource.
 */
@Fluent
public final class DfpInstanceInner extends ProxyResource {
    /*
     * Properties of the provision operation request.
     */
    private DfpInstanceProperties innerProperties;

    /*
     * Location of the DFP resource.
     */
    private String location;

    /*
     * Key-value pairs of additional resource provisioning properties.
     */
    private Map<String, String> tags;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DfpInstanceInner class.
     */
    public DfpInstanceInner() {
    }

    /**
     * Get the innerProperties property: Properties of the provision operation request.
     * 
     * @return the innerProperties value.
     */
    private DfpInstanceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the location property: Location of the DFP resource.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Location of the DFP resource.
     * 
     * @param location the location value to set.
     * @return the DfpInstanceInner object itself.
     */
    public DfpInstanceInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the tags property: Key-value pairs of additional resource provisioning properties.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Key-value pairs of additional resource provisioning properties.
     * 
     * @param tags the tags value to set.
     * @return the DfpInstanceInner object itself.
     */
    public DfpInstanceInner withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the provisioningState property: The current deployment state of DFP resource. The provisioningState is to
     * indicate states for resource provisioning.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the administration property: A collection of DFP instance administrators.
     * 
     * @return the administration value.
     */
    public DfpInstanceAdministrators administration() {
        return this.innerProperties() == null ? null : this.innerProperties().administration();
    }

    /**
     * Set the administration property: A collection of DFP instance administrators.
     * 
     * @param administration the administration value to set.
     * @return the DfpInstanceInner object itself.
     */
    public DfpInstanceInner withAdministration(DfpInstanceAdministrators administration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DfpInstanceProperties();
        }
        this.innerProperties().withAdministration(administration);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property location in model DfpInstanceInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DfpInstanceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DfpInstanceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DfpInstanceInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DfpInstanceInner.
     */
    public static DfpInstanceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DfpInstanceInner deserializedDfpInstanceInner = new DfpInstanceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDfpInstanceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDfpInstanceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDfpInstanceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedDfpInstanceInner.location = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDfpInstanceInner.innerProperties = DfpInstanceProperties.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDfpInstanceInner.tags = tags;
                } else if ("systemData".equals(fieldName)) {
                    deserializedDfpInstanceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDfpInstanceInner;
        });
    }
}
