// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dfp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dfp.models.DfpInstanceAdministrators;
import java.io.IOException;

/**
 * An object that represents a set of mutable DFP resource properties.
 */
@Fluent
public class DfpInstanceMutableProperties implements JsonSerializable<DfpInstanceMutableProperties> {
    /*
     * A collection of DFP instance administrators
     */
    private DfpInstanceAdministrators administration;

    /**
     * Creates an instance of DfpInstanceMutableProperties class.
     */
    public DfpInstanceMutableProperties() {
    }

    /**
     * Get the administration property: A collection of DFP instance administrators.
     * 
     * @return the administration value.
     */
    public DfpInstanceAdministrators administration() {
        return this.administration;
    }

    /**
     * Set the administration property: A collection of DFP instance administrators.
     * 
     * @param administration the administration value to set.
     * @return the DfpInstanceMutableProperties object itself.
     */
    public DfpInstanceMutableProperties withAdministration(DfpInstanceAdministrators administration) {
        this.administration = administration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (administration() != null) {
            administration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("administration", this.administration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DfpInstanceMutableProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DfpInstanceMutableProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DfpInstanceMutableProperties.
     */
    public static DfpInstanceMutableProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DfpInstanceMutableProperties deserializedDfpInstanceMutableProperties = new DfpInstanceMutableProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("administration".equals(fieldName)) {
                    deserializedDfpInstanceMutableProperties.administration
                        = DfpInstanceAdministrators.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDfpInstanceMutableProperties;
        });
    }
}
