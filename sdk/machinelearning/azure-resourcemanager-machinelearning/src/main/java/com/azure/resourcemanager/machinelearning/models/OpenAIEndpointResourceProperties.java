// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.fluent.models.EndpointDeploymentResourcePropertiesBasicResourceInner;
import java.io.IOException;
import java.util.List;

/**
 * The OpenAIEndpointResourceProperties model.
 */
@Fluent
public final class OpenAIEndpointResourceProperties extends EndpointResourceProperties {
    /*
     * Type of the endpoint.
     */
    private EndpointType endpointType = EndpointType.AZURE_OPEN_AI;

    /*
     * Read-only provision state status property.
     */
    private DefaultResourceProvisioningState provisioningState;

    /**
     * Creates an instance of OpenAIEndpointResourceProperties class.
     */
    public OpenAIEndpointResourceProperties() {
    }

    /**
     * Get the endpointType property: Type of the endpoint.
     * 
     * @return the endpointType value.
     */
    @Override
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Get the provisioningState property: Read-only provision state status property.
     * 
     * @return the provisioningState value.
     */
    @Override
    public DefaultResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OpenAIEndpointResourceProperties withAssociatedResourceId(String associatedResourceId) {
        super.withAssociatedResourceId(associatedResourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OpenAIEndpointResourceProperties
        withDeployments(List<EndpointDeploymentResourcePropertiesBasicResourceInner> deployments) {
        super.withDeployments(deployments);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OpenAIEndpointResourceProperties withEndpointUri(String endpointUri) {
        super.withEndpointUri(endpointUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OpenAIEndpointResourceProperties withFailureReason(String failureReason) {
        super.withFailureReason(failureReason);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OpenAIEndpointResourceProperties withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OpenAIEndpointResourceProperties withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OpenAIEndpointResourceProperties withShouldCreateAiServicesEndpoint(Boolean shouldCreateAiServicesEndpoint) {
        super.withShouldCreateAiServicesEndpoint(shouldCreateAiServicesEndpoint);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("associatedResourceId", associatedResourceId());
        jsonWriter.writeArrayField("deployments", deployments(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("endpointUri", endpointUri());
        jsonWriter.writeStringField("failureReason", failureReason());
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeBooleanField("shouldCreateAiServicesEndpoint", shouldCreateAiServicesEndpoint());
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OpenAIEndpointResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OpenAIEndpointResourceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OpenAIEndpointResourceProperties.
     */
    public static OpenAIEndpointResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OpenAIEndpointResourceProperties deserializedOpenAIEndpointResourceProperties
                = new OpenAIEndpointResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("associatedResourceId".equals(fieldName)) {
                    deserializedOpenAIEndpointResourceProperties.withAssociatedResourceId(reader.getString());
                } else if ("deployments".equals(fieldName)) {
                    List<EndpointDeploymentResourcePropertiesBasicResourceInner> deployments = reader
                        .readArray(reader1 -> EndpointDeploymentResourcePropertiesBasicResourceInner.fromJson(reader1));
                    deserializedOpenAIEndpointResourceProperties.withDeployments(deployments);
                } else if ("endpointUri".equals(fieldName)) {
                    deserializedOpenAIEndpointResourceProperties.withEndpointUri(reader.getString());
                } else if ("failureReason".equals(fieldName)) {
                    deserializedOpenAIEndpointResourceProperties.withFailureReason(reader.getString());
                } else if ("location".equals(fieldName)) {
                    deserializedOpenAIEndpointResourceProperties.withLocation(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedOpenAIEndpointResourceProperties.withName(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOpenAIEndpointResourceProperties.provisioningState
                        = DefaultResourceProvisioningState.fromString(reader.getString());
                } else if ("shouldCreateAiServicesEndpoint".equals(fieldName)) {
                    deserializedOpenAIEndpointResourceProperties
                        .withShouldCreateAiServicesEndpoint(reader.getNullable(JsonReader::getBoolean));
                } else if ("endpointType".equals(fieldName)) {
                    deserializedOpenAIEndpointResourceProperties.endpointType
                        = EndpointType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOpenAIEndpointResourceProperties;
        });
    }
}
