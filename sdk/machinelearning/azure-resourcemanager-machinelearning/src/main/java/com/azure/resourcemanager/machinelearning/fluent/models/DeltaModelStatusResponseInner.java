// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.models.DeltaModelCurrentState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Contract returning to user the delta models.
 */
@Fluent
public final class DeltaModelStatusResponseInner implements JsonSerializable<DeltaModelStatusResponseInner> {
    /*
     * Gets or sets actual instance count.
     */
    private Integer actualInstanceCount;

    /*
     * Gets or sets dictionary representing modelID and its current state.
     */
    private Map<String, List<DeltaModelCurrentState>> deltaModels;

    /*
     * Gets or sets expected instance count.
     */
    private Integer expectedInstanceCount;

    /*
     * Gets or sets revision ID.
     */
    private String revisionId;

    /*
     * Gets or sets target base model.
     */
    private String targetBaseModel;

    /**
     * Creates an instance of DeltaModelStatusResponseInner class.
     */
    public DeltaModelStatusResponseInner() {
    }

    /**
     * Get the actualInstanceCount property: Gets or sets actual instance count.
     * 
     * @return the actualInstanceCount value.
     */
    public Integer actualInstanceCount() {
        return this.actualInstanceCount;
    }

    /**
     * Set the actualInstanceCount property: Gets or sets actual instance count.
     * 
     * @param actualInstanceCount the actualInstanceCount value to set.
     * @return the DeltaModelStatusResponseInner object itself.
     */
    public DeltaModelStatusResponseInner withActualInstanceCount(Integer actualInstanceCount) {
        this.actualInstanceCount = actualInstanceCount;
        return this;
    }

    /**
     * Get the deltaModels property: Gets or sets dictionary representing modelID and its current state.
     * 
     * @return the deltaModels value.
     */
    public Map<String, List<DeltaModelCurrentState>> deltaModels() {
        return this.deltaModels;
    }

    /**
     * Set the deltaModels property: Gets or sets dictionary representing modelID and its current state.
     * 
     * @param deltaModels the deltaModels value to set.
     * @return the DeltaModelStatusResponseInner object itself.
     */
    public DeltaModelStatusResponseInner withDeltaModels(Map<String, List<DeltaModelCurrentState>> deltaModels) {
        this.deltaModels = deltaModels;
        return this;
    }

    /**
     * Get the expectedInstanceCount property: Gets or sets expected instance count.
     * 
     * @return the expectedInstanceCount value.
     */
    public Integer expectedInstanceCount() {
        return this.expectedInstanceCount;
    }

    /**
     * Set the expectedInstanceCount property: Gets or sets expected instance count.
     * 
     * @param expectedInstanceCount the expectedInstanceCount value to set.
     * @return the DeltaModelStatusResponseInner object itself.
     */
    public DeltaModelStatusResponseInner withExpectedInstanceCount(Integer expectedInstanceCount) {
        this.expectedInstanceCount = expectedInstanceCount;
        return this;
    }

    /**
     * Get the revisionId property: Gets or sets revision ID.
     * 
     * @return the revisionId value.
     */
    public String revisionId() {
        return this.revisionId;
    }

    /**
     * Set the revisionId property: Gets or sets revision ID.
     * 
     * @param revisionId the revisionId value to set.
     * @return the DeltaModelStatusResponseInner object itself.
     */
    public DeltaModelStatusResponseInner withRevisionId(String revisionId) {
        this.revisionId = revisionId;
        return this;
    }

    /**
     * Get the targetBaseModel property: Gets or sets target base model.
     * 
     * @return the targetBaseModel value.
     */
    public String targetBaseModel() {
        return this.targetBaseModel;
    }

    /**
     * Set the targetBaseModel property: Gets or sets target base model.
     * 
     * @param targetBaseModel the targetBaseModel value to set.
     * @return the DeltaModelStatusResponseInner object itself.
     */
    public DeltaModelStatusResponseInner withTargetBaseModel(String targetBaseModel) {
        this.targetBaseModel = targetBaseModel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deltaModels() != null) {
            deltaModels().values().forEach(e -> {
                if (e != null) {
                    e.forEach(e1 -> e1.validate());
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("actualInstanceCount", this.actualInstanceCount);
        jsonWriter.writeMapField("deltaModels", this.deltaModels,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeJson(element1)));
        jsonWriter.writeNumberField("expectedInstanceCount", this.expectedInstanceCount);
        jsonWriter.writeStringField("revisionId", this.revisionId);
        jsonWriter.writeStringField("targetBaseModel", this.targetBaseModel);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaModelStatusResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaModelStatusResponseInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeltaModelStatusResponseInner.
     */
    public static DeltaModelStatusResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeltaModelStatusResponseInner deserializedDeltaModelStatusResponseInner
                = new DeltaModelStatusResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actualInstanceCount".equals(fieldName)) {
                    deserializedDeltaModelStatusResponseInner.actualInstanceCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("deltaModels".equals(fieldName)) {
                    Map<String, List<DeltaModelCurrentState>> deltaModels = reader
                        .readMap(reader1 -> reader1.readArray(reader2 -> DeltaModelCurrentState.fromJson(reader2)));
                    deserializedDeltaModelStatusResponseInner.deltaModels = deltaModels;
                } else if ("expectedInstanceCount".equals(fieldName)) {
                    deserializedDeltaModelStatusResponseInner.expectedInstanceCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("revisionId".equals(fieldName)) {
                    deserializedDeltaModelStatusResponseInner.revisionId = reader.getString();
                } else if ("targetBaseModel".equals(fieldName)) {
                    deserializedDeltaModelStatusResponseInner.targetBaseModel = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeltaModelStatusResponseInner;
        });
    }
}
