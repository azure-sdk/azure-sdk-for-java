// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.machinelearning.fluent.models.IndexVersionInner;
import com.azure.resourcemanager.machinelearning.models.IndexVersion;
import java.util.Collections;
import java.util.Map;

public final class IndexVersionImpl implements IndexVersion, IndexVersion.Definition, IndexVersion.Update {
    private IndexVersionInner innerObject;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String storageUri() {
        return this.innerModel().storageUri();
    }

    public Map<String, String> indexConfigurations() {
        Map<String, String> inner = this.innerModel().indexConfigurations();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public boolean isArchived() {
        return this.innerModel().isArchived();
    }

    public boolean isAnonymous() {
        return this.innerModel().isAnonymous();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Map<String, String> properties() {
        Map<String, String> inner = this.innerModel().properties();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public IndexVersionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String workspaceName;

    private String indexName;

    private String versionName;

    public IndexVersionImpl withExistingIndexe(String resourceGroupName, String workspaceName, String indexName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        this.indexName = indexName;
        return this;
    }

    public IndexVersion create() {
        this.innerObject
            = serviceManager.serviceClient().getIndexesVersions().createOrUpdateWithResponse(resourceGroupName,
                workspaceName, indexName, versionName, this.innerModel(), Context.NONE).getValue();
        return this;
    }

    public IndexVersion create(Context context) {
        this.innerObject
            = serviceManager.serviceClient().getIndexesVersions().createOrUpdateWithResponse(resourceGroupName,
                workspaceName, indexName, versionName, this.innerModel(), context).getValue();
        return this;
    }

    IndexVersionImpl(String name, com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = new IndexVersionInner();
        this.serviceManager = serviceManager;
        this.versionName = name;
    }

    public IndexVersionImpl update() {
        return this;
    }

    public IndexVersion apply() {
        this.innerObject
            = serviceManager.serviceClient().getIndexesVersions().createOrUpdateWithResponse(resourceGroupName,
                workspaceName, indexName, versionName, this.innerModel(), Context.NONE).getValue();
        return this;
    }

    public IndexVersion apply(Context context) {
        this.innerObject
            = serviceManager.serviceClient().getIndexesVersions().createOrUpdateWithResponse(resourceGroupName,
                workspaceName, indexName, versionName, this.innerModel(), context).getValue();
        return this;
    }

    IndexVersionImpl(IndexVersionInner innerObject,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = Utils.getValueFromIdByName(innerObject.id(), "workspaces");
        this.indexName = Utils.getValueFromIdByName(innerObject.id(), "indexes");
        this.versionName = Utils.getValueFromIdByName(innerObject.id(), "versions");
    }

    public IndexVersion refresh() {
        this.innerObject = serviceManager.serviceClient().getIndexesVersions()
            .getWithResponse(resourceGroupName, workspaceName, indexName, versionName, Context.NONE).getValue();
        return this;
    }

    public IndexVersion refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getIndexesVersions()
            .getWithResponse(resourceGroupName, workspaceName, indexName, versionName, context).getValue();
        return this;
    }

    public IndexVersionImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public IndexVersionImpl withStorageUri(String storageUri) {
        this.innerModel().withStorageUri(storageUri);
        return this;
    }

    public IndexVersionImpl withIndexConfigurations(Map<String, String> indexConfigurations) {
        this.innerModel().withIndexConfigurations(indexConfigurations);
        return this;
    }

    public IndexVersionImpl withIsArchived(boolean isArchived) {
        this.innerModel().withIsArchived(isArchived);
        return this;
    }

    public IndexVersionImpl withIsAnonymous(boolean isAnonymous) {
        this.innerModel().withIsAnonymous(isAnonymous);
        return this;
    }

    public IndexVersionImpl withProperties(Map<String, String> properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
