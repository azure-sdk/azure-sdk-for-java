// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Configuration for notification. */
@Fluent
public final class NotificationSetting {
    /*
     * Send email notification to user on specified notfication type
     */
    @JsonProperty(value = "emailOn")
    private List<EmailNotificationEnableType> emailOn;

    /*
     * This is the email recipient list which has a limitation of 499 characters in total concat with comma seperator
     */
    @JsonProperty(value = "emails")
    private List<String> emails;

    /*
     * Send webhook callback to a service. Key is a user-provided name for the webhook.
     */
    @JsonProperty(value = "webhooks")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, Webhook> webhooks;

    /** Creates an instance of NotificationSetting class. */
    public NotificationSetting() {
    }

    /**
     * Get the emailOn property: Send email notification to user on specified notfication type.
     *
     * @return the emailOn value.
     */
    public List<EmailNotificationEnableType> emailOn() {
        return this.emailOn;
    }

    /**
     * Set the emailOn property: Send email notification to user on specified notfication type.
     *
     * @param emailOn the emailOn value to set.
     * @return the NotificationSetting object itself.
     */
    public NotificationSetting withEmailOn(List<EmailNotificationEnableType> emailOn) {
        this.emailOn = emailOn;
        return this;
    }

    /**
     * Get the emails property: This is the email recipient list which has a limitation of 499 characters in total
     * concat with comma seperator.
     *
     * @return the emails value.
     */
    public List<String> emails() {
        return this.emails;
    }

    /**
     * Set the emails property: This is the email recipient list which has a limitation of 499 characters in total
     * concat with comma seperator.
     *
     * @param emails the emails value to set.
     * @return the NotificationSetting object itself.
     */
    public NotificationSetting withEmails(List<String> emails) {
        this.emails = emails;
        return this;
    }

    /**
     * Get the webhooks property: Send webhook callback to a service. Key is a user-provided name for the webhook.
     *
     * @return the webhooks value.
     */
    public Map<String, Webhook> webhooks() {
        return this.webhooks;
    }

    /**
     * Set the webhooks property: Send webhook callback to a service. Key is a user-provided name for the webhook.
     *
     * @param webhooks the webhooks value to set.
     * @return the NotificationSetting object itself.
     */
    public NotificationSetting withWebhooks(Map<String, Webhook> webhooks) {
        this.webhooks = webhooks;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (webhooks() != null) {
            webhooks()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
