// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.machinelearning.fluent.models.InferenceGroupInner;
import com.azure.resourcemanager.machinelearning.models.GroupStatus;
import com.azure.resourcemanager.machinelearning.models.InferenceGroup;
import com.azure.resourcemanager.machinelearning.models.InferenceGroupProperties;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.PartialMinimalTrackedResourceWithSku;
import com.azure.resourcemanager.machinelearning.models.PartialSku;
import com.azure.resourcemanager.machinelearning.models.Sku;
import java.util.Collections;
import java.util.Map;

public final class InferenceGroupImpl implements InferenceGroup, InferenceGroup.Definition, InferenceGroup.Update {
    private InferenceGroupInner innerObject;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public InferenceGroupProperties properties() {
        return this.innerModel().properties();
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public InferenceGroupInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String workspaceName;

    private String poolName;

    private String groupName;

    private PartialMinimalTrackedResourceWithSku updateBody;

    public InferenceGroupImpl withExistingInferencePool(String resourceGroupName, String workspaceName,
        String poolName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        this.poolName = poolName;
        return this;
    }

    public InferenceGroup create() {
        this.innerObject = serviceManager.serviceClient().getInferenceGroups().createOrUpdate(resourceGroupName,
            workspaceName, poolName, groupName, this.innerModel(), Context.NONE);
        return this;
    }

    public InferenceGroup create(Context context) {
        this.innerObject = serviceManager.serviceClient().getInferenceGroups().createOrUpdate(resourceGroupName,
            workspaceName, poolName, groupName, this.innerModel(), context);
        return this;
    }

    InferenceGroupImpl(String name, com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = new InferenceGroupInner();
        this.serviceManager = serviceManager;
        this.groupName = name;
    }

    public InferenceGroupImpl update() {
        this.updateBody = new PartialMinimalTrackedResourceWithSku();
        return this;
    }

    public InferenceGroup apply() {
        this.innerObject = serviceManager.serviceClient().getInferenceGroups().update(resourceGroupName, workspaceName,
            poolName, groupName, updateBody, Context.NONE);
        return this;
    }

    public InferenceGroup apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getInferenceGroups().update(resourceGroupName, workspaceName,
            poolName, groupName, updateBody, context);
        return this;
    }

    InferenceGroupImpl(InferenceGroupInner innerObject,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "workspaces");
        this.poolName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "inferencePools");
        this.groupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "groups");
    }

    public InferenceGroup refresh() {
        this.innerObject = serviceManager.serviceClient().getInferenceGroups()
            .getWithResponse(resourceGroupName, workspaceName, poolName, groupName, Context.NONE).getValue();
        return this;
    }

    public InferenceGroup refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getInferenceGroups()
            .getWithResponse(resourceGroupName, workspaceName, poolName, groupName, context).getValue();
        return this;
    }

    public Response<GroupStatus> getStatusWithResponse(Context context) {
        return serviceManager.inferenceGroups().getStatusWithResponse(resourceGroupName, workspaceName, poolName,
            groupName, context);
    }

    public GroupStatus getStatus() {
        return serviceManager.inferenceGroups().getStatus(resourceGroupName, workspaceName, poolName, groupName);
    }

    public InferenceGroupImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public InferenceGroupImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public InferenceGroupImpl withProperties(InferenceGroupProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public InferenceGroupImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public InferenceGroupImpl withIdentity(ManagedServiceIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public InferenceGroupImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public InferenceGroupImpl withSku(Sku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public InferenceGroupImpl withSku(PartialSku sku) {
        this.updateBody.withSku(sku);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
