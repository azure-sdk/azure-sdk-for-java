// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The DeltaModelStatusRequest model.
 */
@Fluent
public final class DeltaModelStatusRequest implements JsonSerializable<DeltaModelStatusRequest> {
    /*
     * Gets or sets collection of delta models to retrieve status for.
     */
    private List<String> deltaModels;

    /*
     * Gets or sets target base model.
     */
    private String targetBaseModel;

    /**
     * Creates an instance of DeltaModelStatusRequest class.
     */
    public DeltaModelStatusRequest() {
    }

    /**
     * Get the deltaModels property: Gets or sets collection of delta models to retrieve status for.
     * 
     * @return the deltaModels value.
     */
    public List<String> deltaModels() {
        return this.deltaModels;
    }

    /**
     * Set the deltaModels property: Gets or sets collection of delta models to retrieve status for.
     * 
     * @param deltaModels the deltaModels value to set.
     * @return the DeltaModelStatusRequest object itself.
     */
    public DeltaModelStatusRequest withDeltaModels(List<String> deltaModels) {
        this.deltaModels = deltaModels;
        return this;
    }

    /**
     * Get the targetBaseModel property: Gets or sets target base model.
     * 
     * @return the targetBaseModel value.
     */
    public String targetBaseModel() {
        return this.targetBaseModel;
    }

    /**
     * Set the targetBaseModel property: Gets or sets target base model.
     * 
     * @param targetBaseModel the targetBaseModel value to set.
     * @return the DeltaModelStatusRequest object itself.
     */
    public DeltaModelStatusRequest withTargetBaseModel(String targetBaseModel) {
        this.targetBaseModel = targetBaseModel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("deltaModels", this.deltaModels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("targetBaseModel", this.targetBaseModel);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaModelStatusRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaModelStatusRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeltaModelStatusRequest.
     */
    public static DeltaModelStatusRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeltaModelStatusRequest deserializedDeltaModelStatusRequest = new DeltaModelStatusRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deltaModels".equals(fieldName)) {
                    List<String> deltaModels = reader.readArray(reader1 -> reader1.getString());
                    deserializedDeltaModelStatusRequest.deltaModels = deltaModels;
                } else if ("targetBaseModel".equals(fieldName)) {
                    deserializedDeltaModelStatusRequest.targetBaseModel = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeltaModelStatusRequest;
        });
    }
}
