// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The DataImport model.
 */
@Fluent
public final class DataImport extends DataVersionBaseProperties {
    /*
     * [Required] Specifies the type of data.
     */
    private DataType dataType = DataType.DATA_IMPORT;

    /*
     * Name of the asset for data import job to create
     */
    private String assetName;

    /*
     * Source data of the asset to import from
     */
    private DataImportSource source;

    /**
     * Creates an instance of DataImport class.
     */
    public DataImport() {
    }

    /**
     * Get the dataType property: [Required] Specifies the type of data.
     * 
     * @return the dataType value.
     */
    @Override
    public DataType dataType() {
        return this.dataType;
    }

    /**
     * Get the assetName property: Name of the asset for data import job to create.
     * 
     * @return the assetName value.
     */
    public String assetName() {
        return this.assetName;
    }

    /**
     * Set the assetName property: Name of the asset for data import job to create.
     * 
     * @param assetName the assetName value to set.
     * @return the DataImport object itself.
     */
    public DataImport withAssetName(String assetName) {
        this.assetName = assetName;
        return this;
    }

    /**
     * Get the source property: Source data of the asset to import from.
     * 
     * @return the source value.
     */
    public DataImportSource source() {
        return this.source;
    }

    /**
     * Set the source property: Source data of the asset to import from.
     * 
     * @param source the source value to set.
     * @return the DataImport object itself.
     */
    public DataImport withSource(DataImportSource source) {
        this.source = source;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withDataUri(String dataUri) {
        super.withDataUri(dataUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withIsArchived(Boolean isArchived) {
        super.withIsArchived(isArchived);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withIsAnonymous(Boolean isAnonymous) {
        super.withIsAnonymous(isAnonymous);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (source() != null) {
            source().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataUri", dataUri());
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", properties(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isArchived", isArchived());
        jsonWriter.writeBooleanField("isAnonymous", isAnonymous());
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        jsonWriter.writeStringField("assetName", this.assetName);
        jsonWriter.writeJsonField("source", this.source);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataImport from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataImport if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataImport.
     */
    public static DataImport fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataImport deserializedDataImport = new DataImport();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataUri".equals(fieldName)) {
                    deserializedDataImport.withDataUri(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedDataImport.withDescription(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDataImport.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedDataImport.withProperties(properties);
                } else if ("isArchived".equals(fieldName)) {
                    deserializedDataImport.withIsArchived(reader.getNullable(JsonReader::getBoolean));
                } else if ("isAnonymous".equals(fieldName)) {
                    deserializedDataImport.withIsAnonymous(reader.getNullable(JsonReader::getBoolean));
                } else if ("dataType".equals(fieldName)) {
                    deserializedDataImport.dataType = DataType.fromString(reader.getString());
                } else if ("assetName".equals(fieldName)) {
                    deserializedDataImport.assetName = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedDataImport.source = DataImportSource.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataImport;
        });
    }
}
