// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/**
 * The DataImport model.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "dataType")
@JsonTypeName("uri_folder")
@Fluent
public final class DataImport extends DataVersionBaseProperties {
    /*
     * Name of the asset for data import job to create
     */
    @JsonProperty(value = "assetName")
    private String assetName;

    /*
     * Source data of the asset to import from
     */
    @JsonProperty(value = "source")
    private DataImportSource source;

    /**
     * Creates an instance of DataImport class.
     */
    public DataImport() {
    }

    /**
     * Get the assetName property: Name of the asset for data import job to create.
     * 
     * @return the assetName value.
     */
    public String assetName() {
        return this.assetName;
    }

    /**
     * Set the assetName property: Name of the asset for data import job to create.
     * 
     * @param assetName the assetName value to set.
     * @return the DataImport object itself.
     */
    public DataImport withAssetName(String assetName) {
        this.assetName = assetName;
        return this;
    }

    /**
     * Get the source property: Source data of the asset to import from.
     * 
     * @return the source value.
     */
    public DataImportSource source() {
        return this.source;
    }

    /**
     * Set the source property: Source data of the asset to import from.
     * 
     * @param source the source value to set.
     * @return the DataImport object itself.
     */
    public DataImport withSource(DataImportSource source) {
        this.source = source;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withDataUri(String dataUri) {
        super.withDataUri(dataUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withIntellectualProperty(IntellectualProperty intellectualProperty) {
        super.withIntellectualProperty(intellectualProperty);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withStage(String stage) {
        super.withStage(stage);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withAutoDeleteSetting(AutoDeleteSetting autoDeleteSetting) {
        super.withAutoDeleteSetting(autoDeleteSetting);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withIsAnonymous(Boolean isAnonymous) {
        super.withIsAnonymous(isAnonymous);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withIsArchived(Boolean isArchived) {
        super.withIsArchived(isArchived);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataImport withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (source() != null) {
            source().validate();
        }
    }
}
