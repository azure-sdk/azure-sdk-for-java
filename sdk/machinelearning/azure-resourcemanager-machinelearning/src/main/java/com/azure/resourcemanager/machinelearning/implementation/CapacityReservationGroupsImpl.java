// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.CapacityReservationGroupsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.CapacityReservationGroupInner;
import com.azure.resourcemanager.machinelearning.models.CapacityReservationGroup;
import com.azure.resourcemanager.machinelearning.models.CapacityReservationGroups;

public final class CapacityReservationGroupsImpl implements CapacityReservationGroups {
    private static final ClientLogger LOGGER = new ClientLogger(CapacityReservationGroupsImpl.class);

    private final CapacityReservationGroupsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public CapacityReservationGroupsImpl(CapacityReservationGroupsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CapacityReservationGroup> list() {
        PagedIterable<CapacityReservationGroupInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CapacityReservationGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<CapacityReservationGroup> list(String skip, Context context) {
        PagedIterable<CapacityReservationGroupInner> inner = this.serviceClient().list(skip, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CapacityReservationGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<CapacityReservationGroup> listByResourceGroup(String resourceGroupName) {
        PagedIterable<CapacityReservationGroupInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CapacityReservationGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<CapacityReservationGroup> listByResourceGroup(String resourceGroupName, String skip,
        Context context) {
        PagedIterable<CapacityReservationGroupInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, skip, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CapacityReservationGroupImpl(inner1, this.manager()));
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String groupId, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, groupId, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String groupId) {
        this.serviceClient().delete(resourceGroupName, groupId);
    }

    public Response<CapacityReservationGroup> getByResourceGroupWithResponse(String resourceGroupName, String groupId,
        Context context) {
        Response<CapacityReservationGroupInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, groupId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CapacityReservationGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CapacityReservationGroup getByResourceGroup(String resourceGroupName, String groupId) {
        CapacityReservationGroupInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, groupId);
        if (inner != null) {
            return new CapacityReservationGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CapacityReservationGroup getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String groupId = ResourceManagerUtils.getValueFromIdByName(id, "capacityReserverationGroups");
        if (groupId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'capacityReserverationGroups'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, groupId, Context.NONE).getValue();
    }

    public Response<CapacityReservationGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String groupId = ResourceManagerUtils.getValueFromIdByName(id, "capacityReserverationGroups");
        if (groupId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'capacityReserverationGroups'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, groupId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String groupId = ResourceManagerUtils.getValueFromIdByName(id, "capacityReserverationGroups");
        if (groupId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'capacityReserverationGroups'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, groupId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String groupId = ResourceManagerUtils.getValueFromIdByName(id, "capacityReserverationGroups");
        if (groupId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'capacityReserverationGroups'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, groupId, context);
    }

    private CapacityReservationGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public CapacityReservationGroupImpl define(String name) {
        return new CapacityReservationGroupImpl(name, this.manager());
    }
}
