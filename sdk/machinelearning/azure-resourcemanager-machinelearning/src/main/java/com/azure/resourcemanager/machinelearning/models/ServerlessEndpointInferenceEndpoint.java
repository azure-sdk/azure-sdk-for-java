// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The ServerlessEndpointInferenceEndpoint model.
 */
@Fluent
public final class ServerlessEndpointInferenceEndpoint
    implements JsonSerializable<ServerlessEndpointInferenceEndpoint> {
    /*
     * Dictionary of <string>
     */
    private Map<String, String> headers;

    /*
     * The uri property.
     */
    private String uri;

    /**
     * Creates an instance of ServerlessEndpointInferenceEndpoint class.
     */
    public ServerlessEndpointInferenceEndpoint() {
    }

    /**
     * Get the headers property: Dictionary of &lt;string&gt;.
     * 
     * @return the headers value.
     */
    public Map<String, String> headers() {
        return this.headers;
    }

    /**
     * Get the uri property: The uri property.
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Set the uri property: The uri property.
     * 
     * @param uri the uri value to set.
     * @return the ServerlessEndpointInferenceEndpoint object itself.
     */
    public ServerlessEndpointInferenceEndpoint withUri(String uri) {
        this.uri = uri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (uri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property uri in model ServerlessEndpointInferenceEndpoint"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ServerlessEndpointInferenceEndpoint.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("uri", this.uri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessEndpointInferenceEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessEndpointInferenceEndpoint if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServerlessEndpointInferenceEndpoint.
     */
    public static ServerlessEndpointInferenceEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessEndpointInferenceEndpoint deserializedServerlessEndpointInferenceEndpoint
                = new ServerlessEndpointInferenceEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("uri".equals(fieldName)) {
                    deserializedServerlessEndpointInferenceEndpoint.uri = reader.getString();
                } else if ("headers".equals(fieldName)) {
                    Map<String, String> headers = reader.readMap(reader1 -> reader1.getString());
                    deserializedServerlessEndpointInferenceEndpoint.headers = headers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessEndpointInferenceEndpoint;
        });
    }
}
