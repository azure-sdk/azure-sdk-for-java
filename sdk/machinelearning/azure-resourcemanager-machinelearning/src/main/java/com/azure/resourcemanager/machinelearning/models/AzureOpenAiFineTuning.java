// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AzureOpenAiFineTuning model.
 */
@Fluent
public final class AzureOpenAiFineTuning extends FineTuningVertical {
    /*
     * [Required] Enum to determine the type of fine tuning.
     */
    private ModelProvider modelProvider = ModelProvider.AZURE_OPEN_AI;

    /*
     * HyperParameters for fine tuning Azure Open AI model.
     */
    private AzureOpenAiHyperParameters hyperParameters;

    /**
     * Creates an instance of AzureOpenAiFineTuning class.
     */
    public AzureOpenAiFineTuning() {
    }

    /**
     * Get the modelProvider property: [Required] Enum to determine the type of fine tuning.
     * 
     * @return the modelProvider value.
     */
    @Override
    public ModelProvider modelProvider() {
        return this.modelProvider;
    }

    /**
     * Get the hyperParameters property: HyperParameters for fine tuning Azure Open AI model.
     * 
     * @return the hyperParameters value.
     */
    public AzureOpenAiHyperParameters hyperParameters() {
        return this.hyperParameters;
    }

    /**
     * Set the hyperParameters property: HyperParameters for fine tuning Azure Open AI model.
     * 
     * @param hyperParameters the hyperParameters value to set.
     * @return the AzureOpenAiFineTuning object itself.
     */
    public AzureOpenAiFineTuning withHyperParameters(AzureOpenAiHyperParameters hyperParameters) {
        this.hyperParameters = hyperParameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureOpenAiFineTuning withModel(MLFlowModelJobInput model) {
        super.withModel(model);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureOpenAiFineTuning withTaskType(FineTuningTaskType taskType) {
        super.withTaskType(taskType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureOpenAiFineTuning withTrainingData(JobInput trainingData) {
        super.withTrainingData(trainingData);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureOpenAiFineTuning withValidationData(JobInput validationData) {
        super.withValidationData(validationData);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (hyperParameters() != null) {
            hyperParameters().validate();
        }
        if (model() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property model in model AzureOpenAiFineTuning"));
        } else {
            model().validate();
        }
        if (taskType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property taskType in model AzureOpenAiFineTuning"));
        }
        if (trainingData() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property trainingData in model AzureOpenAiFineTuning"));
        } else {
            trainingData().validate();
        }
        if (validationData() != null) {
            validationData().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureOpenAiFineTuning.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("model", model());
        jsonWriter.writeStringField("taskType", taskType() == null ? null : taskType().toString());
        jsonWriter.writeJsonField("trainingData", trainingData());
        jsonWriter.writeJsonField("validationData", validationData());
        jsonWriter.writeStringField("modelProvider", this.modelProvider == null ? null : this.modelProvider.toString());
        jsonWriter.writeJsonField("hyperParameters", this.hyperParameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureOpenAiFineTuning from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureOpenAiFineTuning if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureOpenAiFineTuning.
     */
    public static AzureOpenAiFineTuning fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureOpenAiFineTuning deserializedAzureOpenAiFineTuning = new AzureOpenAiFineTuning();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("model".equals(fieldName)) {
                    deserializedAzureOpenAiFineTuning.withModel(MLFlowModelJobInput.fromJson(reader));
                } else if ("taskType".equals(fieldName)) {
                    deserializedAzureOpenAiFineTuning.withTaskType(FineTuningTaskType.fromString(reader.getString()));
                } else if ("trainingData".equals(fieldName)) {
                    deserializedAzureOpenAiFineTuning.withTrainingData(JobInput.fromJson(reader));
                } else if ("validationData".equals(fieldName)) {
                    deserializedAzureOpenAiFineTuning.withValidationData(JobInput.fromJson(reader));
                } else if ("modelProvider".equals(fieldName)) {
                    deserializedAzureOpenAiFineTuning.modelProvider = ModelProvider.fromString(reader.getString());
                } else if ("hyperParameters".equals(fieldName)) {
                    deserializedAzureOpenAiFineTuning.hyperParameters = AzureOpenAiHyperParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureOpenAiFineTuning;
        });
    }
}
