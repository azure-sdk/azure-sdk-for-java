// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.models.EncryptionUpdateProperties;
import com.azure.resourcemanager.machinelearning.models.FeatureStoreSettings;
import com.azure.resourcemanager.machinelearning.models.PublicNetworkAccessType;
import com.azure.resourcemanager.machinelearning.models.ServerlessComputeSettings;
import com.azure.resourcemanager.machinelearning.models.ServiceManagedResourcesSettings;
import java.io.IOException;
import java.util.List;

/**
 * The parameters for updating a machine learning workspace.
 */
@Fluent
public final class WorkspacePropertiesUpdateParametersInner
    implements JsonSerializable<WorkspacePropertiesUpdateParametersInner> {
    /*
     * The allowRoleAssignmentOnRG property.
     */
    private Boolean allowRoleAssignmentOnRG;

    /*
     * ARM id of the application insights associated with this workspace.
     */
    private String applicationInsights;

    /*
     * ARM id of the container registry associated with this workspace.
     */
    private String containerRegistry;

    /*
     * The description of this workspace.
     */
    private String description;

    /*
     * The enableDataIsolation property.
     */
    private Boolean enableDataIsolation;

    /*
     * Flag to tell if SoftwareBillOfMaterials should be enabled for this workspace
     */
    private Boolean enableSoftwareBillOfMaterials;

    /*
     * The encryption property.
     */
    private EncryptionUpdateProperties encryption;

    /*
     * Settings for feature store type workspace.
     */
    private FeatureStoreSettings featureStoreSettings;

    /*
     * The friendly name for this workspace. This name in mutable
     */
    private String friendlyName;

    /*
     * The compute name for image build
     */
    private String imageBuildCompute;

    /*
     * The list of IPv4 addresses that are allowed to access the workspace.
     */
    private List<String> ipAllowlist;

    /*
     * Managed Network settings for a machine learning workspace.
     */
    private ManagedNetworkSettingsInner managedNetwork;

    /*
     * The user assigned identity resource id that represents the workspace identity.
     */
    private String primaryUserAssignedIdentity;

    /*
     * Whether requests from Public Network are allowed.
     */
    private PublicNetworkAccessType publicNetworkAccess;

    /*
     * Settings for serverless compute in a workspace
     */
    private ServerlessComputeSettings serverlessComputeSettings;

    /*
     * The service managed resource settings.
     */
    private ServiceManagedResourcesSettings serviceManagedResourcesSettings;

    /*
     * Retention time in days after workspace get soft deleted.
     */
    private Integer softDeleteRetentionInDays;

    /*
     * Enabling v1_legacy_mode may prevent you from using features provided by the v2 API.
     */
    private Boolean v1LegacyMode;

    /**
     * Creates an instance of WorkspacePropertiesUpdateParametersInner class.
     */
    public WorkspacePropertiesUpdateParametersInner() {
    }

    /**
     * Get the allowRoleAssignmentOnRG property: The allowRoleAssignmentOnRG property.
     * 
     * @return the allowRoleAssignmentOnRG value.
     */
    public Boolean allowRoleAssignmentOnRG() {
        return this.allowRoleAssignmentOnRG;
    }

    /**
     * Set the allowRoleAssignmentOnRG property: The allowRoleAssignmentOnRG property.
     * 
     * @param allowRoleAssignmentOnRG the allowRoleAssignmentOnRG value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withAllowRoleAssignmentOnRG(Boolean allowRoleAssignmentOnRG) {
        this.allowRoleAssignmentOnRG = allowRoleAssignmentOnRG;
        return this;
    }

    /**
     * Get the applicationInsights property: ARM id of the application insights associated with this workspace.
     * 
     * @return the applicationInsights value.
     */
    public String applicationInsights() {
        return this.applicationInsights;
    }

    /**
     * Set the applicationInsights property: ARM id of the application insights associated with this workspace.
     * 
     * @param applicationInsights the applicationInsights value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withApplicationInsights(String applicationInsights) {
        this.applicationInsights = applicationInsights;
        return this;
    }

    /**
     * Get the containerRegistry property: ARM id of the container registry associated with this workspace.
     * 
     * @return the containerRegistry value.
     */
    public String containerRegistry() {
        return this.containerRegistry;
    }

    /**
     * Set the containerRegistry property: ARM id of the container registry associated with this workspace.
     * 
     * @param containerRegistry the containerRegistry value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withContainerRegistry(String containerRegistry) {
        this.containerRegistry = containerRegistry;
        return this;
    }

    /**
     * Get the description property: The description of this workspace.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of this workspace.
     * 
     * @param description the description value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the enableDataIsolation property: The enableDataIsolation property.
     * 
     * @return the enableDataIsolation value.
     */
    public Boolean enableDataIsolation() {
        return this.enableDataIsolation;
    }

    /**
     * Set the enableDataIsolation property: The enableDataIsolation property.
     * 
     * @param enableDataIsolation the enableDataIsolation value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withEnableDataIsolation(Boolean enableDataIsolation) {
        this.enableDataIsolation = enableDataIsolation;
        return this;
    }

    /**
     * Get the enableSoftwareBillOfMaterials property: Flag to tell if SoftwareBillOfMaterials should be enabled for
     * this workspace.
     * 
     * @return the enableSoftwareBillOfMaterials value.
     */
    public Boolean enableSoftwareBillOfMaterials() {
        return this.enableSoftwareBillOfMaterials;
    }

    /**
     * Set the enableSoftwareBillOfMaterials property: Flag to tell if SoftwareBillOfMaterials should be enabled for
     * this workspace.
     * 
     * @param enableSoftwareBillOfMaterials the enableSoftwareBillOfMaterials value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner
        withEnableSoftwareBillOfMaterials(Boolean enableSoftwareBillOfMaterials) {
        this.enableSoftwareBillOfMaterials = enableSoftwareBillOfMaterials;
        return this;
    }

    /**
     * Get the encryption property: The encryption property.
     * 
     * @return the encryption value.
     */
    public EncryptionUpdateProperties encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The encryption property.
     * 
     * @param encryption the encryption value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withEncryption(EncryptionUpdateProperties encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the featureStoreSettings property: Settings for feature store type workspace.
     * 
     * @return the featureStoreSettings value.
     */
    public FeatureStoreSettings featureStoreSettings() {
        return this.featureStoreSettings;
    }

    /**
     * Set the featureStoreSettings property: Settings for feature store type workspace.
     * 
     * @param featureStoreSettings the featureStoreSettings value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner
        withFeatureStoreSettings(FeatureStoreSettings featureStoreSettings) {
        this.featureStoreSettings = featureStoreSettings;
        return this;
    }

    /**
     * Get the friendlyName property: The friendly name for this workspace. This name in mutable.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: The friendly name for this workspace. This name in mutable.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the imageBuildCompute property: The compute name for image build.
     * 
     * @return the imageBuildCompute value.
     */
    public String imageBuildCompute() {
        return this.imageBuildCompute;
    }

    /**
     * Set the imageBuildCompute property: The compute name for image build.
     * 
     * @param imageBuildCompute the imageBuildCompute value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withImageBuildCompute(String imageBuildCompute) {
        this.imageBuildCompute = imageBuildCompute;
        return this;
    }

    /**
     * Get the ipAllowlist property: The list of IPv4 addresses that are allowed to access the workspace.
     * 
     * @return the ipAllowlist value.
     */
    public List<String> ipAllowlist() {
        return this.ipAllowlist;
    }

    /**
     * Set the ipAllowlist property: The list of IPv4 addresses that are allowed to access the workspace.
     * 
     * @param ipAllowlist the ipAllowlist value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withIpAllowlist(List<String> ipAllowlist) {
        this.ipAllowlist = ipAllowlist;
        return this;
    }

    /**
     * Get the managedNetwork property: Managed Network settings for a machine learning workspace.
     * 
     * @return the managedNetwork value.
     */
    public ManagedNetworkSettingsInner managedNetwork() {
        return this.managedNetwork;
    }

    /**
     * Set the managedNetwork property: Managed Network settings for a machine learning workspace.
     * 
     * @param managedNetwork the managedNetwork value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withManagedNetwork(ManagedNetworkSettingsInner managedNetwork) {
        this.managedNetwork = managedNetwork;
        return this;
    }

    /**
     * Get the primaryUserAssignedIdentity property: The user assigned identity resource id that represents the
     * workspace identity.
     * 
     * @return the primaryUserAssignedIdentity value.
     */
    public String primaryUserAssignedIdentity() {
        return this.primaryUserAssignedIdentity;
    }

    /**
     * Set the primaryUserAssignedIdentity property: The user assigned identity resource id that represents the
     * workspace identity.
     * 
     * @param primaryUserAssignedIdentity the primaryUserAssignedIdentity value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner
        withPrimaryUserAssignedIdentity(String primaryUserAssignedIdentity) {
        this.primaryUserAssignedIdentity = primaryUserAssignedIdentity;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Whether requests from Public Network are allowed.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccessType publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Whether requests from Public Network are allowed.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner
        withPublicNetworkAccess(PublicNetworkAccessType publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the serverlessComputeSettings property: Settings for serverless compute in a workspace.
     * 
     * @return the serverlessComputeSettings value.
     */
    public ServerlessComputeSettings serverlessComputeSettings() {
        return this.serverlessComputeSettings;
    }

    /**
     * Set the serverlessComputeSettings property: Settings for serverless compute in a workspace.
     * 
     * @param serverlessComputeSettings the serverlessComputeSettings value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner
        withServerlessComputeSettings(ServerlessComputeSettings serverlessComputeSettings) {
        this.serverlessComputeSettings = serverlessComputeSettings;
        return this;
    }

    /**
     * Get the serviceManagedResourcesSettings property: The service managed resource settings.
     * 
     * @return the serviceManagedResourcesSettings value.
     */
    public ServiceManagedResourcesSettings serviceManagedResourcesSettings() {
        return this.serviceManagedResourcesSettings;
    }

    /**
     * Set the serviceManagedResourcesSettings property: The service managed resource settings.
     * 
     * @param serviceManagedResourcesSettings the serviceManagedResourcesSettings value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner
        withServiceManagedResourcesSettings(ServiceManagedResourcesSettings serviceManagedResourcesSettings) {
        this.serviceManagedResourcesSettings = serviceManagedResourcesSettings;
        return this;
    }

    /**
     * Get the softDeleteRetentionInDays property: Retention time in days after workspace get soft deleted.
     * 
     * @return the softDeleteRetentionInDays value.
     */
    public Integer softDeleteRetentionInDays() {
        return this.softDeleteRetentionInDays;
    }

    /**
     * Set the softDeleteRetentionInDays property: Retention time in days after workspace get soft deleted.
     * 
     * @param softDeleteRetentionInDays the softDeleteRetentionInDays value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withSoftDeleteRetentionInDays(Integer softDeleteRetentionInDays) {
        this.softDeleteRetentionInDays = softDeleteRetentionInDays;
        return this;
    }

    /**
     * Get the v1LegacyMode property: Enabling v1_legacy_mode may prevent you from using features provided by the v2
     * API.
     * 
     * @return the v1LegacyMode value.
     */
    public Boolean v1LegacyMode() {
        return this.v1LegacyMode;
    }

    /**
     * Set the v1LegacyMode property: Enabling v1_legacy_mode may prevent you from using features provided by the v2
     * API.
     * 
     * @param v1LegacyMode the v1LegacyMode value to set.
     * @return the WorkspacePropertiesUpdateParametersInner object itself.
     */
    public WorkspacePropertiesUpdateParametersInner withV1LegacyMode(Boolean v1LegacyMode) {
        this.v1LegacyMode = v1LegacyMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (encryption() != null) {
            encryption().validate();
        }
        if (featureStoreSettings() != null) {
            featureStoreSettings().validate();
        }
        if (managedNetwork() != null) {
            managedNetwork().validate();
        }
        if (serverlessComputeSettings() != null) {
            serverlessComputeSettings().validate();
        }
        if (serviceManagedResourcesSettings() != null) {
            serviceManagedResourcesSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("allowRoleAssignmentOnRG", this.allowRoleAssignmentOnRG);
        jsonWriter.writeStringField("applicationInsights", this.applicationInsights);
        jsonWriter.writeStringField("containerRegistry", this.containerRegistry);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeBooleanField("enableDataIsolation", this.enableDataIsolation);
        jsonWriter.writeBooleanField("enableSoftwareBillOfMaterials", this.enableSoftwareBillOfMaterials);
        jsonWriter.writeJsonField("encryption", this.encryption);
        jsonWriter.writeJsonField("featureStoreSettings", this.featureStoreSettings);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("imageBuildCompute", this.imageBuildCompute);
        jsonWriter.writeArrayField("ipAllowlist", this.ipAllowlist, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("managedNetwork", this.managedNetwork);
        jsonWriter.writeStringField("primaryUserAssignedIdentity", this.primaryUserAssignedIdentity);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeJsonField("serverlessComputeSettings", this.serverlessComputeSettings);
        jsonWriter.writeJsonField("serviceManagedResourcesSettings", this.serviceManagedResourcesSettings);
        jsonWriter.writeNumberField("softDeleteRetentionInDays", this.softDeleteRetentionInDays);
        jsonWriter.writeBooleanField("v1LegacyMode", this.v1LegacyMode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspacePropertiesUpdateParametersInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspacePropertiesUpdateParametersInner if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkspacePropertiesUpdateParametersInner.
     */
    public static WorkspacePropertiesUpdateParametersInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspacePropertiesUpdateParametersInner deserializedWorkspacePropertiesUpdateParametersInner
                = new WorkspacePropertiesUpdateParametersInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowRoleAssignmentOnRG".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.allowRoleAssignmentOnRG
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("applicationInsights".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.applicationInsights = reader.getString();
                } else if ("containerRegistry".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.containerRegistry = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.description = reader.getString();
                } else if ("enableDataIsolation".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.enableDataIsolation
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("enableSoftwareBillOfMaterials".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.enableSoftwareBillOfMaterials
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("encryption".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.encryption
                        = EncryptionUpdateProperties.fromJson(reader);
                } else if ("featureStoreSettings".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.featureStoreSettings
                        = FeatureStoreSettings.fromJson(reader);
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.friendlyName = reader.getString();
                } else if ("imageBuildCompute".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.imageBuildCompute = reader.getString();
                } else if ("ipAllowlist".equals(fieldName)) {
                    List<String> ipAllowlist = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkspacePropertiesUpdateParametersInner.ipAllowlist = ipAllowlist;
                } else if ("managedNetwork".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.managedNetwork
                        = ManagedNetworkSettingsInner.fromJson(reader);
                } else if ("primaryUserAssignedIdentity".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.primaryUserAssignedIdentity
                        = reader.getString();
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.publicNetworkAccess
                        = PublicNetworkAccessType.fromString(reader.getString());
                } else if ("serverlessComputeSettings".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.serverlessComputeSettings
                        = ServerlessComputeSettings.fromJson(reader);
                } else if ("serviceManagedResourcesSettings".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.serviceManagedResourcesSettings
                        = ServiceManagedResourcesSettings.fromJson(reader);
                } else if ("softDeleteRetentionInDays".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.softDeleteRetentionInDays
                        = reader.getNullable(JsonReader::getInt);
                } else if ("v1LegacyMode".equals(fieldName)) {
                    deserializedWorkspacePropertiesUpdateParametersInner.v1LegacyMode
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspacePropertiesUpdateParametersInner;
        });
    }
}
