// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Customer Key vault properties. */
@Fluent
public final class KeyVaultProperties {
    /*
     * Currently, we support only SystemAssigned MSI.
     * We need this when we support UserAssignedIdentities
     */
    @JsonProperty(value = "identityClientId")
    private String identityClientId;

    /*
     * KeyVault key identifier to encrypt the data
     */
    @JsonProperty(value = "keyIdentifier", required = true)
    private String keyIdentifier;

    /*
     * KeyVault Arm Id that contains the data encryption key
     */
    @JsonProperty(value = "keyVaultArmId", required = true)
    private String keyVaultArmId;

    /** Creates an instance of KeyVaultProperties class. */
    public KeyVaultProperties() {
    }

    /**
     * Get the identityClientId property: Currently, we support only SystemAssigned MSI. We need this when we support
     * UserAssignedIdentities.
     *
     * @return the identityClientId value.
     */
    public String identityClientId() {
        return this.identityClientId;
    }

    /**
     * Set the identityClientId property: Currently, we support only SystemAssigned MSI. We need this when we support
     * UserAssignedIdentities.
     *
     * @param identityClientId the identityClientId value to set.
     * @return the KeyVaultProperties object itself.
     */
    public KeyVaultProperties withIdentityClientId(String identityClientId) {
        this.identityClientId = identityClientId;
        return this;
    }

    /**
     * Get the keyIdentifier property: KeyVault key identifier to encrypt the data.
     *
     * @return the keyIdentifier value.
     */
    public String keyIdentifier() {
        return this.keyIdentifier;
    }

    /**
     * Set the keyIdentifier property: KeyVault key identifier to encrypt the data.
     *
     * @param keyIdentifier the keyIdentifier value to set.
     * @return the KeyVaultProperties object itself.
     */
    public KeyVaultProperties withKeyIdentifier(String keyIdentifier) {
        this.keyIdentifier = keyIdentifier;
        return this;
    }

    /**
     * Get the keyVaultArmId property: KeyVault Arm Id that contains the data encryption key.
     *
     * @return the keyVaultArmId value.
     */
    public String keyVaultArmId() {
        return this.keyVaultArmId;
    }

    /**
     * Set the keyVaultArmId property: KeyVault Arm Id that contains the data encryption key.
     *
     * @param keyVaultArmId the keyVaultArmId value to set.
     * @return the KeyVaultProperties object itself.
     */
    public KeyVaultProperties withKeyVaultArmId(String keyVaultArmId) {
        this.keyVaultArmId = keyVaultArmId;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyIdentifier() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property keyIdentifier in model KeyVaultProperties"));
        }
        if (keyVaultArmId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property keyVaultArmId in model KeyVaultProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KeyVaultProperties.class);
}
