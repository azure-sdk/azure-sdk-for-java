// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ImageInfo model.
 */
@Fluent
public final class ImageInfo implements JsonSerializable<ImageInfo> {
    /*
     * Image digest
     */
    private String digest;

    /*
     * Container registry host name
     */
    private String hostname;

    /*
     * Repository name
     */
    private String repository;

    /*
     * Image tag
     */
    private String tag;

    /**
     * Creates an instance of ImageInfo class.
     */
    public ImageInfo() {
    }

    /**
     * Get the digest property: Image digest.
     * 
     * @return the digest value.
     */
    public String digest() {
        return this.digest;
    }

    /**
     * Set the digest property: Image digest.
     * 
     * @param digest the digest value to set.
     * @return the ImageInfo object itself.
     */
    public ImageInfo withDigest(String digest) {
        this.digest = digest;
        return this;
    }

    /**
     * Get the hostname property: Container registry host name.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: Container registry host name.
     * 
     * @param hostname the hostname value to set.
     * @return the ImageInfo object itself.
     */
    public ImageInfo withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the repository property: Repository name.
     * 
     * @return the repository value.
     */
    public String repository() {
        return this.repository;
    }

    /**
     * Set the repository property: Repository name.
     * 
     * @param repository the repository value to set.
     * @return the ImageInfo object itself.
     */
    public ImageInfo withRepository(String repository) {
        this.repository = repository;
        return this;
    }

    /**
     * Get the tag property: Image tag.
     * 
     * @return the tag value.
     */
    public String tag() {
        return this.tag;
    }

    /**
     * Set the tag property: Image tag.
     * 
     * @param tag the tag value to set.
     * @return the ImageInfo object itself.
     */
    public ImageInfo withTag(String tag) {
        this.tag = tag;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("digest", this.digest);
        jsonWriter.writeStringField("hostname", this.hostname);
        jsonWriter.writeStringField("repository", this.repository);
        jsonWriter.writeStringField("tag", this.tag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the ImageInfo.
     */
    public static ImageInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageInfo deserializedImageInfo = new ImageInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("digest".equals(fieldName)) {
                    deserializedImageInfo.digest = reader.getString();
                } else if ("hostname".equals(fieldName)) {
                    deserializedImageInfo.hostname = reader.getString();
                } else if ("repository".equals(fieldName)) {
                    deserializedImageInfo.repository = reader.getString();
                } else if ("tag".equals(fieldName)) {
                    deserializedImageInfo.tag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageInfo;
        });
    }
}
