// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.machinelearning.fluent.ConnectionRaiPolicyOperationsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.RaiPolicyPropertiesBasicResourceInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ConnectionRaiPolicyOperationsClient.
 */
public final class ConnectionRaiPolicyOperationsClientImpl implements ConnectionRaiPolicyOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ConnectionRaiPolicyOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureMachineLearningServicesImpl client;

    /**
     * Initializes an instance of ConnectionRaiPolicyOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ConnectionRaiPolicyOperationsClientImpl(AzureMachineLearningServicesImpl client) {
        this.service = RestProxy.create(ConnectionRaiPolicyOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureMachineLearningServicesConnectionRaiPolicyOperations to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureMachineLearning")
    public interface ConnectionRaiPolicyOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("connectionName") String connectionName, @PathParam("raiPolicyName") String raiPolicyName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RaiPolicyPropertiesBasicResourceInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("connectionName") String connectionName, @PathParam("raiPolicyName") String raiPolicyName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("connectionName") String connectionName, @PathParam("raiPolicyName") String raiPolicyName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RaiPolicyPropertiesBasicResourceInner body,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Deletes the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiPolicyName == null) {
            return Mono.error(new IllegalArgumentException("Parameter raiPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    workspaceName, connectionName, raiPolicyName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiPolicyName == null) {
            return Mono.error(new IllegalArgumentException("Parameter raiPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, connectionName, raiPolicyName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName) {
        return this.beginDeleteAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName).getSyncPoller();
    }

    /**
     * Deletes the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, context)
            .getSyncPoller();
    }

    /**
     * Deletes the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String workspaceName, String connectionName,
        String raiPolicyName) {
        return beginDeleteAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String workspaceName, String connectionName,
        String raiPolicyName, Context context) {
        return beginDeleteAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String workspaceName, String connectionName, String raiPolicyName) {
        deleteAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName).block();
    }

    /**
     * Deletes the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String workspaceName, String connectionName, String raiPolicyName,
        Context context) {
        deleteAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, context).block();
    }

    /**
     * Gets the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Content Filters associated with the Azure OpenAI connection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RaiPolicyPropertiesBasicResourceInner>> getWithResponseAsync(String resourceGroupName,
        String workspaceName, String connectionName, String raiPolicyName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiPolicyName == null) {
            return Mono.error(new IllegalArgumentException("Parameter raiPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    workspaceName, connectionName, raiPolicyName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Content Filters associated with the Azure OpenAI connection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RaiPolicyPropertiesBasicResourceInner>> getWithResponseAsync(String resourceGroupName,
        String workspaceName, String connectionName, String raiPolicyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiPolicyName == null) {
            return Mono.error(new IllegalArgumentException("Parameter raiPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, workspaceName,
            connectionName, raiPolicyName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Content Filters associated with the Azure OpenAI connection on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RaiPolicyPropertiesBasicResourceInner> getAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName) {
        return getWithResponseAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Content Filters associated with the Azure OpenAI connection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RaiPolicyPropertiesBasicResourceInner> getWithResponse(String resourceGroupName,
        String workspaceName, String connectionName, String raiPolicyName, Context context) {
        return getWithResponseAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, context).block();
    }

    /**
     * Gets the specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Content Filters associated with the Azure OpenAI connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RaiPolicyPropertiesBasicResourceInner get(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName) {
        return getWithResponse(resourceGroupName, workspaceName, connectionName, raiPolicyName, Context.NONE)
            .getValue();
    }

    /**
     * Update the state of specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure OpenAI Content Filters resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName, RaiPolicyPropertiesBasicResourceInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiPolicyName == null) {
            return Mono.error(new IllegalArgumentException("Parameter raiPolicyName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.create(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    workspaceName, connectionName, raiPolicyName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update the state of specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure OpenAI Content Filters resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName, RaiPolicyPropertiesBasicResourceInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiPolicyName == null) {
            return Mono.error(new IllegalArgumentException("Parameter raiPolicyName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, connectionName, raiPolicyName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Update the state of specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of azure OpenAI Content Filters resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RaiPolicyPropertiesBasicResourceInner>, RaiPolicyPropertiesBasicResourceInner>
        beginCreateAsync(String resourceGroupName, String workspaceName, String connectionName, String raiPolicyName,
            RaiPolicyPropertiesBasicResourceInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, body);
        return this.client.<RaiPolicyPropertiesBasicResourceInner, RaiPolicyPropertiesBasicResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), RaiPolicyPropertiesBasicResourceInner.class,
            RaiPolicyPropertiesBasicResourceInner.class, this.client.getContext());
    }

    /**
     * Update the state of specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of azure OpenAI Content Filters resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RaiPolicyPropertiesBasicResourceInner>, RaiPolicyPropertiesBasicResourceInner>
        beginCreateAsync(String resourceGroupName, String workspaceName, String connectionName, String raiPolicyName,
            RaiPolicyPropertiesBasicResourceInner body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, body, context);
        return this.client.<RaiPolicyPropertiesBasicResourceInner, RaiPolicyPropertiesBasicResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), RaiPolicyPropertiesBasicResourceInner.class,
            RaiPolicyPropertiesBasicResourceInner.class, context);
    }

    /**
     * Update the state of specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of azure OpenAI Content Filters resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RaiPolicyPropertiesBasicResourceInner>, RaiPolicyPropertiesBasicResourceInner>
        beginCreate(String resourceGroupName, String workspaceName, String connectionName, String raiPolicyName,
            RaiPolicyPropertiesBasicResourceInner body) {
        return this.beginCreateAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, body)
            .getSyncPoller();
    }

    /**
     * Update the state of specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of azure OpenAI Content Filters resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RaiPolicyPropertiesBasicResourceInner>, RaiPolicyPropertiesBasicResourceInner>
        beginCreate(String resourceGroupName, String workspaceName, String connectionName, String raiPolicyName,
            RaiPolicyPropertiesBasicResourceInner body, Context context) {
        return this.beginCreateAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, body, context)
            .getSyncPoller();
    }

    /**
     * Update the state of specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure OpenAI Content Filters resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RaiPolicyPropertiesBasicResourceInner> createAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName, RaiPolicyPropertiesBasicResourceInner body) {
        return beginCreateAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the state of specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure OpenAI Content Filters resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RaiPolicyPropertiesBasicResourceInner> createAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName, RaiPolicyPropertiesBasicResourceInner body, Context context) {
        return beginCreateAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the state of specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure OpenAI Content Filters resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RaiPolicyPropertiesBasicResourceInner create(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName, RaiPolicyPropertiesBasicResourceInner body) {
        return createAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, body).block();
    }

    /**
     * Update the state of specified Content Filters associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiPolicyName Name of the Rai Policy.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure OpenAI Content Filters resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RaiPolicyPropertiesBasicResourceInner create(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName, RaiPolicyPropertiesBasicResourceInner body, Context context) {
        return createAsync(resourceGroupName, workspaceName, connectionName, raiPolicyName, body, context).block();
    }
}
