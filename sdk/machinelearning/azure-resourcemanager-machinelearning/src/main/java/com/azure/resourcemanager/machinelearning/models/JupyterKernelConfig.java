// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Jupyter kernel configuration.
 */
@Fluent
public final class JupyterKernelConfig implements JsonSerializable<JupyterKernelConfig> {
    /*
     * Argument to the the runtime
     */
    private List<String> argv;

    /*
     * Display name of the kernel
     */
    private String displayName;

    /*
     * Language of the kernel [Example value: python]
     */
    private String language;

    /**
     * Creates an instance of JupyterKernelConfig class.
     */
    public JupyterKernelConfig() {
    }

    /**
     * Get the argv property: Argument to the the runtime.
     * 
     * @return the argv value.
     */
    public List<String> argv() {
        return this.argv;
    }

    /**
     * Set the argv property: Argument to the the runtime.
     * 
     * @param argv the argv value to set.
     * @return the JupyterKernelConfig object itself.
     */
    public JupyterKernelConfig withArgv(List<String> argv) {
        this.argv = argv;
        return this;
    }

    /**
     * Get the displayName property: Display name of the kernel.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the kernel.
     * 
     * @param displayName the displayName value to set.
     * @return the JupyterKernelConfig object itself.
     */
    public JupyterKernelConfig withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the language property: Language of the kernel [Example value: python].
     * 
     * @return the language value.
     */
    public String language() {
        return this.language;
    }

    /**
     * Set the language property: Language of the kernel [Example value: python].
     * 
     * @param language the language value to set.
     * @return the JupyterKernelConfig object itself.
     */
    public JupyterKernelConfig withLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("argv", this.argv, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("language", this.language);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JupyterKernelConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JupyterKernelConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JupyterKernelConfig.
     */
    public static JupyterKernelConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JupyterKernelConfig deserializedJupyterKernelConfig = new JupyterKernelConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("argv".equals(fieldName)) {
                    List<String> argv = reader.readArray(reader1 -> reader1.getString());
                    deserializedJupyterKernelConfig.argv = argv;
                } else if ("displayName".equals(fieldName)) {
                    deserializedJupyterKernelConfig.displayName = reader.getString();
                } else if ("language".equals(fieldName)) {
                    deserializedJupyterKernelConfig.language = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJupyterKernelConfig;
        });
    }
}
