// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.machinelearning.fluent.ManagedNetworkSettingsOperationsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.ManagedNetworkSettingsPropertiesBasicResourceInner;
import com.azure.resourcemanager.machinelearning.models.ManagedNetworkListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ManagedNetworkSettingsOperationsClient.
 */
public final class ManagedNetworkSettingsOperationsClientImpl implements ManagedNetworkSettingsOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ManagedNetworkSettingsOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureMachineLearningWorkspacesImpl client;

    /**
     * Initializes an instance of ManagedNetworkSettingsOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ManagedNetworkSettingsOperationsClientImpl(AzureMachineLearningWorkspacesImpl client) {
        this.service = RestProxy.create(ManagedNetworkSettingsOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureMachineLearningWorkspacesManagedNetworkSettingsOperations to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureMachineLearning")
    public interface ManagedNetworkSettingsOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks/{managedNetworkName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ManagedNetworkSettingsPropertiesBasicResourceInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("managedNetworkName") String managedNetworkName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks/{managedNetworkName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ManagedNetworkSettingsPropertiesBasicResourceInner> getSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("managedNetworkName") String managedNetworkName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks/{managedNetworkName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> patch(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("managedNetworkName") String managedNetworkName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ManagedNetworkSettingsPropertiesBasicResourceInner body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks/{managedNetworkName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> patchSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("managedNetworkName") String managedNetworkName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ManagedNetworkSettingsPropertiesBasicResourceInner body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks/{managedNetworkName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> put(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("managedNetworkName") String managedNetworkName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ManagedNetworkSettingsPropertiesBasicResourceInner body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks/{managedNetworkName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> putSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("managedNetworkName") String managedNetworkName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ManagedNetworkSettingsPropertiesBasicResourceInner body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ManagedNetworkListResult>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ManagedNetworkListResult> listSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ManagedNetworkListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ManagedNetworkListResult> listNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI for managed network settings of a machine learning workspace along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ManagedNetworkSettingsPropertiesBasicResourceInner>>
        getWithResponseAsync(String resourceGroupName, String workspaceName, String managedNetworkName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, workspaceName, managedNetworkName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI for managed network settings of a machine learning workspace on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedNetworkSettingsPropertiesBasicResourceInner> getAsync(String resourceGroupName,
        String workspaceName, String managedNetworkName) {
        return getWithResponseAsync(resourceGroupName, workspaceName, managedNetworkName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI for managed network settings of a machine learning workspace along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ManagedNetworkSettingsPropertiesBasicResourceInner> getWithResponse(String resourceGroupName,
        String workspaceName, String managedNetworkName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, managedNetworkName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI for managed network settings of a machine learning workspace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedNetworkSettingsPropertiesBasicResourceInner get(String resourceGroupName, String workspaceName,
        String managedNetworkName) {
        return getWithResponse(resourceGroupName, workspaceName, managedNetworkName, Context.NONE).getValue();
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> patchWithResponseAsync(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsPropertiesBasicResourceInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.patch(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    workspaceName, managedNetworkName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> patchWithResponse(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsPropertiesBasicResourceInner body) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return service.patchSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, managedNetworkName, this.client.getApiVersion(), body, accept, Context.NONE);
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> patchWithResponse(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsPropertiesBasicResourceInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return service.patchSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, managedNetworkName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<ManagedNetworkSettingsPropertiesBasicResourceInner>, ManagedNetworkSettingsPropertiesBasicResourceInner>
        beginPatchAsync(String resourceGroupName, String workspaceName, String managedNetworkName,
            ManagedNetworkSettingsPropertiesBasicResourceInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = patchWithResponseAsync(resourceGroupName, workspaceName, managedNetworkName, body);
        return this.client
            .<ManagedNetworkSettingsPropertiesBasicResourceInner, ManagedNetworkSettingsPropertiesBasicResourceInner>getLroResult(
                mono, this.client.getHttpPipeline(), ManagedNetworkSettingsPropertiesBasicResourceInner.class,
                ManagedNetworkSettingsPropertiesBasicResourceInner.class, this.client.getContext());
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<ManagedNetworkSettingsPropertiesBasicResourceInner>, ManagedNetworkSettingsPropertiesBasicResourceInner>
        beginPatchAsync(String resourceGroupName, String workspaceName, String managedNetworkName) {
        final ManagedNetworkSettingsPropertiesBasicResourceInner body = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = patchWithResponseAsync(resourceGroupName, workspaceName, managedNetworkName, body);
        return this.client
            .<ManagedNetworkSettingsPropertiesBasicResourceInner, ManagedNetworkSettingsPropertiesBasicResourceInner>getLroResult(
                mono, this.client.getHttpPipeline(), ManagedNetworkSettingsPropertiesBasicResourceInner.class,
                ManagedNetworkSettingsPropertiesBasicResourceInner.class, this.client.getContext());
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<ManagedNetworkSettingsPropertiesBasicResourceInner>, ManagedNetworkSettingsPropertiesBasicResourceInner>
        beginPatch(String resourceGroupName, String workspaceName, String managedNetworkName,
            ManagedNetworkSettingsPropertiesBasicResourceInner body) {
        Response<BinaryData> response = patchWithResponse(resourceGroupName, workspaceName, managedNetworkName, body);
        return this.client
            .<ManagedNetworkSettingsPropertiesBasicResourceInner, ManagedNetworkSettingsPropertiesBasicResourceInner>getLroResult(
                response, ManagedNetworkSettingsPropertiesBasicResourceInner.class,
                ManagedNetworkSettingsPropertiesBasicResourceInner.class, Context.NONE);
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<ManagedNetworkSettingsPropertiesBasicResourceInner>, ManagedNetworkSettingsPropertiesBasicResourceInner>
        beginPatch(String resourceGroupName, String workspaceName, String managedNetworkName) {
        final ManagedNetworkSettingsPropertiesBasicResourceInner body = null;
        Response<BinaryData> response = patchWithResponse(resourceGroupName, workspaceName, managedNetworkName, body);
        return this.client
            .<ManagedNetworkSettingsPropertiesBasicResourceInner, ManagedNetworkSettingsPropertiesBasicResourceInner>getLroResult(
                response, ManagedNetworkSettingsPropertiesBasicResourceInner.class,
                ManagedNetworkSettingsPropertiesBasicResourceInner.class, Context.NONE);
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<ManagedNetworkSettingsPropertiesBasicResourceInner>, ManagedNetworkSettingsPropertiesBasicResourceInner>
        beginPatch(String resourceGroupName, String workspaceName, String managedNetworkName,
            ManagedNetworkSettingsPropertiesBasicResourceInner body, Context context) {
        Response<BinaryData> response
            = patchWithResponse(resourceGroupName, workspaceName, managedNetworkName, body, context);
        return this.client
            .<ManagedNetworkSettingsPropertiesBasicResourceInner, ManagedNetworkSettingsPropertiesBasicResourceInner>getLroResult(
                response, ManagedNetworkSettingsPropertiesBasicResourceInner.class,
                ManagedNetworkSettingsPropertiesBasicResourceInner.class, context);
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedNetworkSettingsPropertiesBasicResourceInner> patchAsync(String resourceGroupName,
        String workspaceName, String managedNetworkName, ManagedNetworkSettingsPropertiesBasicResourceInner body) {
        return beginPatchAsync(resourceGroupName, workspaceName, managedNetworkName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedNetworkSettingsPropertiesBasicResourceInner> patchAsync(String resourceGroupName,
        String workspaceName, String managedNetworkName) {
        final ManagedNetworkSettingsPropertiesBasicResourceInner body = null;
        return beginPatchAsync(resourceGroupName, workspaceName, managedNetworkName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedNetworkSettingsPropertiesBasicResourceInner patch(String resourceGroupName, String workspaceName,
        String managedNetworkName) {
        final ManagedNetworkSettingsPropertiesBasicResourceInner body = null;
        return beginPatch(resourceGroupName, workspaceName, managedNetworkName, body).getFinalResult();
    }

    /**
     * Patch API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedNetworkSettingsPropertiesBasicResourceInner patch(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsPropertiesBasicResourceInner body, Context context) {
        return beginPatch(resourceGroupName, workspaceName, managedNetworkName, body, context).getFinalResult();
    }

    /**
     * PUT API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> putWithResponseAsync(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsPropertiesBasicResourceInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.put(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    workspaceName, managedNetworkName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * PUT API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> putWithResponse(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsPropertiesBasicResourceInner body) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return service.putSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, managedNetworkName, this.client.getApiVersion(), body, accept, Context.NONE);
    }

    /**
     * PUT API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> putWithResponse(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsPropertiesBasicResourceInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return service.putSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, managedNetworkName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * PUT API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<ManagedNetworkSettingsPropertiesBasicResourceInner>, ManagedNetworkSettingsPropertiesBasicResourceInner>
        beginPutAsync(String resourceGroupName, String workspaceName, String managedNetworkName,
            ManagedNetworkSettingsPropertiesBasicResourceInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = putWithResponseAsync(resourceGroupName, workspaceName, managedNetworkName, body);
        return this.client
            .<ManagedNetworkSettingsPropertiesBasicResourceInner, ManagedNetworkSettingsPropertiesBasicResourceInner>getLroResult(
                mono, this.client.getHttpPipeline(), ManagedNetworkSettingsPropertiesBasicResourceInner.class,
                ManagedNetworkSettingsPropertiesBasicResourceInner.class, this.client.getContext());
    }

    /**
     * PUT API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<ManagedNetworkSettingsPropertiesBasicResourceInner>, ManagedNetworkSettingsPropertiesBasicResourceInner>
        beginPut(String resourceGroupName, String workspaceName, String managedNetworkName,
            ManagedNetworkSettingsPropertiesBasicResourceInner body) {
        Response<BinaryData> response = putWithResponse(resourceGroupName, workspaceName, managedNetworkName, body);
        return this.client
            .<ManagedNetworkSettingsPropertiesBasicResourceInner, ManagedNetworkSettingsPropertiesBasicResourceInner>getLroResult(
                response, ManagedNetworkSettingsPropertiesBasicResourceInner.class,
                ManagedNetworkSettingsPropertiesBasicResourceInner.class, Context.NONE);
    }

    /**
     * PUT API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<ManagedNetworkSettingsPropertiesBasicResourceInner>, ManagedNetworkSettingsPropertiesBasicResourceInner>
        beginPut(String resourceGroupName, String workspaceName, String managedNetworkName,
            ManagedNetworkSettingsPropertiesBasicResourceInner body, Context context) {
        Response<BinaryData> response
            = putWithResponse(resourceGroupName, workspaceName, managedNetworkName, body, context);
        return this.client
            .<ManagedNetworkSettingsPropertiesBasicResourceInner, ManagedNetworkSettingsPropertiesBasicResourceInner>getLroResult(
                response, ManagedNetworkSettingsPropertiesBasicResourceInner.class,
                ManagedNetworkSettingsPropertiesBasicResourceInner.class, context);
    }

    /**
     * PUT API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedNetworkSettingsPropertiesBasicResourceInner> putAsync(String resourceGroupName,
        String workspaceName, String managedNetworkName, ManagedNetworkSettingsPropertiesBasicResourceInner body) {
        return beginPutAsync(resourceGroupName, workspaceName, managedNetworkName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * PUT API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedNetworkSettingsPropertiesBasicResourceInner put(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsPropertiesBasicResourceInner body) {
        return beginPut(resourceGroupName, workspaceName, managedNetworkName, body).getFinalResult();
    }

    /**
     * PUT API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedNetworkSettingsPropertiesBasicResourceInner put(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsPropertiesBasicResourceInner body, Context context) {
        return beginPut(resourceGroupName, workspaceName, managedNetworkName, body, context).getFinalResult();
    }

    /**
     * List API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of managed networks of a machine learning workspace along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedNetworkSettingsPropertiesBasicResourceInner>>
        listSinglePageAsync(String resourceGroupName, String workspaceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, workspaceName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<ManagedNetworkSettingsPropertiesBasicResourceInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of managed networks of a machine learning workspace as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ManagedNetworkSettingsPropertiesBasicResourceInner> listAsync(String resourceGroupName,
        String workspaceName) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, workspaceName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of managed networks of a machine learning workspace along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ManagedNetworkSettingsPropertiesBasicResourceInner> listSinglePage(String resourceGroupName,
        String workspaceName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ManagedNetworkListResult> res
            = service.listSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                workspaceName, this.client.getApiVersion(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of managed networks of a machine learning workspace along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ManagedNetworkSettingsPropertiesBasicResourceInner> listSinglePage(String resourceGroupName,
        String workspaceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ManagedNetworkListResult> res
            = service.listSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                workspaceName, this.client.getApiVersion(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of managed networks of a machine learning workspace as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ManagedNetworkSettingsPropertiesBasicResourceInner> list(String resourceGroupName,
        String workspaceName) {
        return new PagedIterable<>(() -> listSinglePage(resourceGroupName, workspaceName),
            nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * List API for managed network settings of a machine learning workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of managed networks of a machine learning workspace as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ManagedNetworkSettingsPropertiesBasicResourceInner> list(String resourceGroupName,
        String workspaceName, Context context) {
        return new PagedIterable<>(() -> listSinglePage(resourceGroupName, workspaceName, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of managed networks of a machine learning workspace along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedNetworkSettingsPropertiesBasicResourceInner>>
        listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ManagedNetworkSettingsPropertiesBasicResourceInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of managed networks of a machine learning workspace along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ManagedNetworkSettingsPropertiesBasicResourceInner> listNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ManagedNetworkListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of managed networks of a machine learning workspace along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ManagedNetworkSettingsPropertiesBasicResourceInner> listNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ManagedNetworkListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagedNetworkSettingsOperationsClientImpl.class);
}
