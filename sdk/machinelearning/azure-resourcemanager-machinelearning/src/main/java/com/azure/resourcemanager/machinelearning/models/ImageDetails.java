// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ImageDetails model.
 */
@Fluent
public final class ImageDetails implements JsonSerializable<ImageDetails> {
    /*
     * Indicates if image exists
     */
    private Boolean exists;

    /*
     * Container image details
     */
    private ImageInfo image;

    /*
     * Vulnerability findings details
     */
    private VulnerabilityFindings vulnerabilityFindings;

    /**
     * Creates an instance of ImageDetails class.
     */
    public ImageDetails() {
    }

    /**
     * Get the exists property: Indicates if image exists.
     * 
     * @return the exists value.
     */
    public Boolean exists() {
        return this.exists;
    }

    /**
     * Set the exists property: Indicates if image exists.
     * 
     * @param exists the exists value to set.
     * @return the ImageDetails object itself.
     */
    public ImageDetails withExists(Boolean exists) {
        this.exists = exists;
        return this;
    }

    /**
     * Get the image property: Container image details.
     * 
     * @return the image value.
     */
    public ImageInfo image() {
        return this.image;
    }

    /**
     * Set the image property: Container image details.
     * 
     * @param image the image value to set.
     * @return the ImageDetails object itself.
     */
    public ImageDetails withImage(ImageInfo image) {
        this.image = image;
        return this;
    }

    /**
     * Get the vulnerabilityFindings property: Vulnerability findings details.
     * 
     * @return the vulnerabilityFindings value.
     */
    public VulnerabilityFindings vulnerabilityFindings() {
        return this.vulnerabilityFindings;
    }

    /**
     * Set the vulnerabilityFindings property: Vulnerability findings details.
     * 
     * @param vulnerabilityFindings the vulnerabilityFindings value to set.
     * @return the ImageDetails object itself.
     */
    public ImageDetails withVulnerabilityFindings(VulnerabilityFindings vulnerabilityFindings) {
        this.vulnerabilityFindings = vulnerabilityFindings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (image() != null) {
            image().validate();
        }
        if (vulnerabilityFindings() != null) {
            vulnerabilityFindings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("exists", this.exists);
        jsonWriter.writeJsonField("image", this.image);
        jsonWriter.writeJsonField("vulnerabilityFindings", this.vulnerabilityFindings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageDetails.
     */
    public static ImageDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageDetails deserializedImageDetails = new ImageDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("exists".equals(fieldName)) {
                    deserializedImageDetails.exists = reader.getNullable(JsonReader::getBoolean);
                } else if ("image".equals(fieldName)) {
                    deserializedImageDetails.image = ImageInfo.fromJson(reader);
                } else if ("vulnerabilityFindings".equals(fieldName)) {
                    deserializedImageDetails.vulnerabilityFindings = VulnerabilityFindings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageDetails;
        });
    }
}
