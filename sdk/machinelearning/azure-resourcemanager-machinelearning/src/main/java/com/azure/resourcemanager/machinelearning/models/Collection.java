// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The Collection model.
 */
@Fluent
public final class Collection {
    /*
     * The msi client id used to collect logging to blob storage. If it's null,backend will pick a registered endpoint
     * identity to auth.
     */
    @JsonProperty(value = "clientId")
    private String clientId;

    /*
     * Enable or disable data collection.
     */
    @JsonProperty(value = "dataCollectionMode")
    private DataCollectionMode dataCollectionMode;

    /*
     * The data asset arm resource id. Client side will ensure data asset is pointing to the blob storage, and backend
     * will collect data to the blob storage.
     */
    @JsonProperty(value = "dataId")
    private String dataId;

    /*
     * The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data by default.
     */
    @JsonProperty(value = "samplingRate")
    private Double samplingRate;

    /**
     * Creates an instance of Collection class.
     */
    public Collection() {
    }

    /**
     * Get the clientId property: The msi client id used to collect logging to blob storage. If it's null,backend will
     * pick a registered endpoint identity to auth.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: The msi client id used to collect logging to blob storage. If it's null,backend will
     * pick a registered endpoint identity to auth.
     * 
     * @param clientId the clientId value to set.
     * @return the Collection object itself.
     */
    public Collection withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the dataCollectionMode property: Enable or disable data collection.
     * 
     * @return the dataCollectionMode value.
     */
    public DataCollectionMode dataCollectionMode() {
        return this.dataCollectionMode;
    }

    /**
     * Set the dataCollectionMode property: Enable or disable data collection.
     * 
     * @param dataCollectionMode the dataCollectionMode value to set.
     * @return the Collection object itself.
     */
    public Collection withDataCollectionMode(DataCollectionMode dataCollectionMode) {
        this.dataCollectionMode = dataCollectionMode;
        return this;
    }

    /**
     * Get the dataId property: The data asset arm resource id. Client side will ensure data asset is pointing to the
     * blob storage, and backend will collect data to the blob storage.
     * 
     * @return the dataId value.
     */
    public String dataId() {
        return this.dataId;
    }

    /**
     * Set the dataId property: The data asset arm resource id. Client side will ensure data asset is pointing to the
     * blob storage, and backend will collect data to the blob storage.
     * 
     * @param dataId the dataId value to set.
     * @return the Collection object itself.
     */
    public Collection withDataId(String dataId) {
        this.dataId = dataId;
        return this;
    }

    /**
     * Get the samplingRate property: The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data
     * by default.
     * 
     * @return the samplingRate value.
     */
    public Double samplingRate() {
        return this.samplingRate;
    }

    /**
     * Set the samplingRate property: The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data
     * by default.
     * 
     * @param samplingRate the samplingRate value to set.
     * @return the Collection object itself.
     */
    public Collection withSamplingRate(Double samplingRate) {
        this.samplingRate = samplingRate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
