// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The CapabilityHostProperties model.
 */
@Fluent
public final class CapabilityHostProperties extends ResourceBase {
    /*
     * Represents a request to provision a resource.
     */
    private String customerSubnet;

    /*
     * Provisioning state for the CapabilityHost.
     */
    private CapabilityHostProvisioningState provisioningState;

    /**
     * Creates an instance of CapabilityHostProperties class.
     */
    public CapabilityHostProperties() {
    }

    /**
     * Get the customerSubnet property: Represents a request to provision a resource.
     * 
     * @return the customerSubnet value.
     */
    public String customerSubnet() {
        return this.customerSubnet;
    }

    /**
     * Set the customerSubnet property: Represents a request to provision a resource.
     * 
     * @param customerSubnet the customerSubnet value to set.
     * @return the CapabilityHostProperties object itself.
     */
    public CapabilityHostProperties withCustomerSubnet(String customerSubnet) {
        this.customerSubnet = customerSubnet;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state for the CapabilityHost.
     * 
     * @return the provisioningState value.
     */
    public CapabilityHostProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CapabilityHostProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CapabilityHostProperties withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CapabilityHostProperties withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeMapField("properties", properties(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("customerSubnet", this.customerSubnet);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CapabilityHostProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CapabilityHostProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CapabilityHostProperties.
     */
    public static CapabilityHostProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CapabilityHostProperties deserializedCapabilityHostProperties = new CapabilityHostProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedCapabilityHostProperties.withDescription(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedCapabilityHostProperties.withProperties(properties);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedCapabilityHostProperties.withTags(tags);
                } else if ("customerSubnet".equals(fieldName)) {
                    deserializedCapabilityHostProperties.customerSubnet = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCapabilityHostProperties.provisioningState
                        = CapabilityHostProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCapabilityHostProperties;
        });
    }
}
