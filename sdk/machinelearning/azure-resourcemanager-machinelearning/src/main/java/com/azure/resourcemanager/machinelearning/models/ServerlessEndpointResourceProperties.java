// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.fluent.models.EndpointDeploymentResourcePropertiesBasicResourceInner;
import java.io.IOException;
import java.util.List;

/**
 * The ServerlessEndpointResourceProperties model.
 */
@Fluent
public final class ServerlessEndpointResourceProperties extends EndpointResourceProperties {
    /*
     * Type of the endpoint.
     */
    private EndpointType endpointType = EndpointType.SERVERLESS_ENDPOINT;

    /*
     * The authMode property.
     */
    private ServerlessInferenceEndpointAuthMode authMode;

    /*
     * The capacityReservation property.
     */
    private ServerlessEndpointCapacityReservation capacityReservation;

    /*
     * The contentSafety property.
     */
    private ServerlessEndpointContentSafety contentSafety;

    /*
     * State of the Serverless Endpoint.
     */
    private ServerlessEndpointState endpointState;

    /*
     * The inferenceEndpoint property.
     */
    private ServerlessEndpointInferenceEndpoint inferenceEndpoint;

    /*
     * The marketplaceSubscriptionId property.
     */
    private String marketplaceSubscriptionId;

    /*
     * Anything
     */
    private Object metadata;

    /*
     * The modelSettings property.
     */
    private ServerlessEndpointModelSettings modelSettings;

    /*
     * The offer property.
     */
    private ServerlessOffer offer;

    /*
     * Read-only provision state status property.
     */
    private DefaultResourceProvisioningState provisioningState;

    /**
     * Creates an instance of ServerlessEndpointResourceProperties class.
     */
    public ServerlessEndpointResourceProperties() {
    }

    /**
     * Get the endpointType property: Type of the endpoint.
     * 
     * @return the endpointType value.
     */
    @Override
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Get the authMode property: The authMode property.
     * 
     * @return the authMode value.
     */
    public ServerlessInferenceEndpointAuthMode authMode() {
        return this.authMode;
    }

    /**
     * Set the authMode property: The authMode property.
     * 
     * @param authMode the authMode value to set.
     * @return the ServerlessEndpointResourceProperties object itself.
     */
    public ServerlessEndpointResourceProperties withAuthMode(ServerlessInferenceEndpointAuthMode authMode) {
        this.authMode = authMode;
        return this;
    }

    /**
     * Get the capacityReservation property: The capacityReservation property.
     * 
     * @return the capacityReservation value.
     */
    public ServerlessEndpointCapacityReservation capacityReservation() {
        return this.capacityReservation;
    }

    /**
     * Set the capacityReservation property: The capacityReservation property.
     * 
     * @param capacityReservation the capacityReservation value to set.
     * @return the ServerlessEndpointResourceProperties object itself.
     */
    public ServerlessEndpointResourceProperties
        withCapacityReservation(ServerlessEndpointCapacityReservation capacityReservation) {
        this.capacityReservation = capacityReservation;
        return this;
    }

    /**
     * Get the contentSafety property: The contentSafety property.
     * 
     * @return the contentSafety value.
     */
    public ServerlessEndpointContentSafety contentSafety() {
        return this.contentSafety;
    }

    /**
     * Set the contentSafety property: The contentSafety property.
     * 
     * @param contentSafety the contentSafety value to set.
     * @return the ServerlessEndpointResourceProperties object itself.
     */
    public ServerlessEndpointResourceProperties withContentSafety(ServerlessEndpointContentSafety contentSafety) {
        this.contentSafety = contentSafety;
        return this;
    }

    /**
     * Get the endpointState property: State of the Serverless Endpoint.
     * 
     * @return the endpointState value.
     */
    public ServerlessEndpointState endpointState() {
        return this.endpointState;
    }

    /**
     * Set the endpointState property: State of the Serverless Endpoint.
     * 
     * @param endpointState the endpointState value to set.
     * @return the ServerlessEndpointResourceProperties object itself.
     */
    public ServerlessEndpointResourceProperties withEndpointState(ServerlessEndpointState endpointState) {
        this.endpointState = endpointState;
        return this;
    }

    /**
     * Get the inferenceEndpoint property: The inferenceEndpoint property.
     * 
     * @return the inferenceEndpoint value.
     */
    public ServerlessEndpointInferenceEndpoint inferenceEndpoint() {
        return this.inferenceEndpoint;
    }

    /**
     * Set the inferenceEndpoint property: The inferenceEndpoint property.
     * 
     * @param inferenceEndpoint the inferenceEndpoint value to set.
     * @return the ServerlessEndpointResourceProperties object itself.
     */
    public ServerlessEndpointResourceProperties
        withInferenceEndpoint(ServerlessEndpointInferenceEndpoint inferenceEndpoint) {
        this.inferenceEndpoint = inferenceEndpoint;
        return this;
    }

    /**
     * Get the marketplaceSubscriptionId property: The marketplaceSubscriptionId property.
     * 
     * @return the marketplaceSubscriptionId value.
     */
    public String marketplaceSubscriptionId() {
        return this.marketplaceSubscriptionId;
    }

    /**
     * Set the marketplaceSubscriptionId property: The marketplaceSubscriptionId property.
     * 
     * @param marketplaceSubscriptionId the marketplaceSubscriptionId value to set.
     * @return the ServerlessEndpointResourceProperties object itself.
     */
    public ServerlessEndpointResourceProperties withMarketplaceSubscriptionId(String marketplaceSubscriptionId) {
        this.marketplaceSubscriptionId = marketplaceSubscriptionId;
        return this;
    }

    /**
     * Get the metadata property: Anything.
     * 
     * @return the metadata value.
     */
    public Object metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Anything.
     * 
     * @param metadata the metadata value to set.
     * @return the ServerlessEndpointResourceProperties object itself.
     */
    public ServerlessEndpointResourceProperties withMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the modelSettings property: The modelSettings property.
     * 
     * @return the modelSettings value.
     */
    public ServerlessEndpointModelSettings modelSettings() {
        return this.modelSettings;
    }

    /**
     * Set the modelSettings property: The modelSettings property.
     * 
     * @param modelSettings the modelSettings value to set.
     * @return the ServerlessEndpointResourceProperties object itself.
     */
    public ServerlessEndpointResourceProperties withModelSettings(ServerlessEndpointModelSettings modelSettings) {
        this.modelSettings = modelSettings;
        return this;
    }

    /**
     * Get the offer property: The offer property.
     * 
     * @return the offer value.
     */
    public ServerlessOffer offer() {
        return this.offer;
    }

    /**
     * Set the offer property: The offer property.
     * 
     * @param offer the offer value to set.
     * @return the ServerlessEndpointResourceProperties object itself.
     */
    public ServerlessEndpointResourceProperties withOffer(ServerlessOffer offer) {
        this.offer = offer;
        return this;
    }

    /**
     * Get the provisioningState property: Read-only provision state status property.
     * 
     * @return the provisioningState value.
     */
    @Override
    public DefaultResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServerlessEndpointResourceProperties withAssociatedResourceId(String associatedResourceId) {
        super.withAssociatedResourceId(associatedResourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServerlessEndpointResourceProperties
        withDeployments(List<EndpointDeploymentResourcePropertiesBasicResourceInner> deployments) {
        super.withDeployments(deployments);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServerlessEndpointResourceProperties withEndpointUri(String endpointUri) {
        super.withEndpointUri(endpointUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServerlessEndpointResourceProperties withFailureReason(String failureReason) {
        super.withFailureReason(failureReason);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServerlessEndpointResourceProperties withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServerlessEndpointResourceProperties withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServerlessEndpointResourceProperties
        withShouldCreateAiServicesEndpoint(Boolean shouldCreateAiServicesEndpoint) {
        super.withShouldCreateAiServicesEndpoint(shouldCreateAiServicesEndpoint);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (capacityReservation() != null) {
            capacityReservation().validate();
        }
        if (contentSafety() != null) {
            contentSafety().validate();
        }
        if (inferenceEndpoint() != null) {
            inferenceEndpoint().validate();
        }
        if (modelSettings() != null) {
            modelSettings().validate();
        }
        if (offer() != null) {
            offer().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("associatedResourceId", associatedResourceId());
        jsonWriter.writeArrayField("deployments", deployments(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("endpointUri", endpointUri());
        jsonWriter.writeStringField("failureReason", failureReason());
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeBooleanField("shouldCreateAiServicesEndpoint", shouldCreateAiServicesEndpoint());
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        jsonWriter.writeStringField("authMode", this.authMode == null ? null : this.authMode.toString());
        jsonWriter.writeJsonField("capacityReservation", this.capacityReservation);
        jsonWriter.writeJsonField("contentSafety", this.contentSafety);
        jsonWriter.writeStringField("endpointState", this.endpointState == null ? null : this.endpointState.toString());
        jsonWriter.writeJsonField("inferenceEndpoint", this.inferenceEndpoint);
        jsonWriter.writeStringField("marketplaceSubscriptionId", this.marketplaceSubscriptionId);
        jsonWriter.writeUntypedField("metadata", this.metadata);
        jsonWriter.writeJsonField("modelSettings", this.modelSettings);
        jsonWriter.writeJsonField("offer", this.offer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessEndpointResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessEndpointResourceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerlessEndpointResourceProperties.
     */
    public static ServerlessEndpointResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessEndpointResourceProperties deserializedServerlessEndpointResourceProperties
                = new ServerlessEndpointResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("associatedResourceId".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.withAssociatedResourceId(reader.getString());
                } else if ("deployments".equals(fieldName)) {
                    List<EndpointDeploymentResourcePropertiesBasicResourceInner> deployments = reader
                        .readArray(reader1 -> EndpointDeploymentResourcePropertiesBasicResourceInner.fromJson(reader1));
                    deserializedServerlessEndpointResourceProperties.withDeployments(deployments);
                } else if ("endpointUri".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.withEndpointUri(reader.getString());
                } else if ("failureReason".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.withFailureReason(reader.getString());
                } else if ("location".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.withLocation(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.withName(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.provisioningState
                        = DefaultResourceProvisioningState.fromString(reader.getString());
                } else if ("shouldCreateAiServicesEndpoint".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties
                        .withShouldCreateAiServicesEndpoint(reader.getNullable(JsonReader::getBoolean));
                } else if ("endpointType".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.endpointType
                        = EndpointType.fromString(reader.getString());
                } else if ("authMode".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.authMode
                        = ServerlessInferenceEndpointAuthMode.fromString(reader.getString());
                } else if ("capacityReservation".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.capacityReservation
                        = ServerlessEndpointCapacityReservation.fromJson(reader);
                } else if ("contentSafety".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.contentSafety
                        = ServerlessEndpointContentSafety.fromJson(reader);
                } else if ("endpointState".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.endpointState
                        = ServerlessEndpointState.fromString(reader.getString());
                } else if ("inferenceEndpoint".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.inferenceEndpoint
                        = ServerlessEndpointInferenceEndpoint.fromJson(reader);
                } else if ("marketplaceSubscriptionId".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.marketplaceSubscriptionId = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.metadata = reader.readUntyped();
                } else if ("modelSettings".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.modelSettings
                        = ServerlessEndpointModelSettings.fromJson(reader);
                } else if ("offer".equals(fieldName)) {
                    deserializedServerlessEndpointResourceProperties.offer = ServerlessOffer.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessEndpointResourceProperties;
        });
    }
}
