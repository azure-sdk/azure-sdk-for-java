// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.Duration;

/** The ModelPerformanceSignalBase model. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "signalType")
@JsonTypeName("ModelPerformanceSignalBase")
@Fluent
public final class ModelPerformanceSignalBase extends MonitoringSignalBase {
    /*
     * [Required] The data to calculate drift against.
     */
    @JsonProperty(value = "baselineData", required = true)
    private MonitoringInputData baselineData;

    /*
     * The data segment.
     */
    @JsonProperty(value = "dataSegment")
    private MonitoringDataSegment dataSegment;

    /*
     * [Required] A list of metrics to calculate and their associated thresholds.
     */
    @JsonProperty(value = "metricThreshold", required = true)
    private ModelPerformanceMetricThresholdBase metricThreshold;

    /*
     * [Required] The data produced by the production service which drift will be calculated for.
     */
    @JsonProperty(value = "targetData", required = true)
    private MonitoringInputData targetData;

    /** Creates an instance of ModelPerformanceSignalBase class. */
    public ModelPerformanceSignalBase() {
    }

    /**
     * Get the baselineData property: [Required] The data to calculate drift against.
     *
     * @return the baselineData value.
     */
    public MonitoringInputData baselineData() {
        return this.baselineData;
    }

    /**
     * Set the baselineData property: [Required] The data to calculate drift against.
     *
     * @param baselineData the baselineData value to set.
     * @return the ModelPerformanceSignalBase object itself.
     */
    public ModelPerformanceSignalBase withBaselineData(MonitoringInputData baselineData) {
        this.baselineData = baselineData;
        return this;
    }

    /**
     * Get the dataSegment property: The data segment.
     *
     * @return the dataSegment value.
     */
    public MonitoringDataSegment dataSegment() {
        return this.dataSegment;
    }

    /**
     * Set the dataSegment property: The data segment.
     *
     * @param dataSegment the dataSegment value to set.
     * @return the ModelPerformanceSignalBase object itself.
     */
    public ModelPerformanceSignalBase withDataSegment(MonitoringDataSegment dataSegment) {
        this.dataSegment = dataSegment;
        return this;
    }

    /**
     * Get the metricThreshold property: [Required] A list of metrics to calculate and their associated thresholds.
     *
     * @return the metricThreshold value.
     */
    public ModelPerformanceMetricThresholdBase metricThreshold() {
        return this.metricThreshold;
    }

    /**
     * Set the metricThreshold property: [Required] A list of metrics to calculate and their associated thresholds.
     *
     * @param metricThreshold the metricThreshold value to set.
     * @return the ModelPerformanceSignalBase object itself.
     */
    public ModelPerformanceSignalBase withMetricThreshold(ModelPerformanceMetricThresholdBase metricThreshold) {
        this.metricThreshold = metricThreshold;
        return this;
    }

    /**
     * Get the targetData property: [Required] The data produced by the production service which drift will be
     * calculated for.
     *
     * @return the targetData value.
     */
    public MonitoringInputData targetData() {
        return this.targetData;
    }

    /**
     * Set the targetData property: [Required] The data produced by the production service which drift will be
     * calculated for.
     *
     * @param targetData the targetData value to set.
     * @return the ModelPerformanceSignalBase object itself.
     */
    public ModelPerformanceSignalBase withTargetData(MonitoringInputData targetData) {
        this.targetData = targetData;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelPerformanceSignalBase withLookbackPeriod(Duration lookbackPeriod) {
        super.withLookbackPeriod(lookbackPeriod);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelPerformanceSignalBase withMode(MonitoringNotificationMode mode) {
        super.withMode(mode);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (baselineData() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property baselineData in model ModelPerformanceSignalBase"));
        } else {
            baselineData().validate();
        }
        if (dataSegment() != null) {
            dataSegment().validate();
        }
        if (metricThreshold() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property metricThreshold in model ModelPerformanceSignalBase"));
        } else {
            metricThreshold().validate();
        }
        if (targetData() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property targetData in model ModelPerformanceSignalBase"));
        } else {
            targetData().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ModelPerformanceSignalBase.class);
}
