// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.fluent.models.ManagedNetworkProvisionStatusInner;
import com.azure.resourcemanager.machinelearning.fluent.models.ManagedNetworkSettingsInner;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The ManagedNetworkSettingsEx model.
 */
@Fluent
public final class ManagedNetworkSettingsEx extends ManagedNetworkSettingsInner {
    /*
     * The changeableIsolationModes property.
     */
    private List<IsolationMode> changeableIsolationModes;

    /*
     * Public IP address assigned to the Azure Firewall.
     */
    private String firewallPublicIpAddress;

    /*
     * The networkId property.
     */
    private String networkId;

    /**
     * Creates an instance of ManagedNetworkSettingsEx class.
     */
    public ManagedNetworkSettingsEx() {
    }

    /**
     * Get the changeableIsolationModes property: The changeableIsolationModes property.
     * 
     * @return the changeableIsolationModes value.
     */
    public List<IsolationMode> changeableIsolationModes() {
        return this.changeableIsolationModes;
    }

    /**
     * Get the firewallPublicIpAddress property: Public IP address assigned to the Azure Firewall.
     * 
     * @return the firewallPublicIpAddress value.
     */
    @Override
    public String firewallPublicIpAddress() {
        return this.firewallPublicIpAddress;
    }

    /**
     * Get the networkId property: The networkId property.
     * 
     * @return the networkId value.
     */
    @Override
    public String networkId() {
        return this.networkId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedNetworkSettingsEx withEnableNetworkMonitor(Boolean enableNetworkMonitor) {
        super.withEnableNetworkMonitor(enableNetworkMonitor);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedNetworkSettingsEx withIsolationMode(IsolationMode isolationMode) {
        super.withIsolationMode(isolationMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedNetworkSettingsEx withOutboundRules(Map<String, OutboundRule> outboundRules) {
        super.withOutboundRules(outboundRules);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedNetworkSettingsEx withStatus(ManagedNetworkProvisionStatusInner status) {
        super.withStatus(status);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedNetworkSettingsEx withFirewallSku(FirewallSku firewallSku) {
        super.withFirewallSku(firewallSku);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedNetworkSettingsEx withManagedNetworkKind(ManagedNetworkKind managedNetworkKind) {
        super.withManagedNetworkKind(managedNetworkKind);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (outboundRules() != null) {
            outboundRules().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableNetworkMonitor", enableNetworkMonitor());
        jsonWriter.writeStringField("isolationMode", isolationMode() == null ? null : isolationMode().toString());
        jsonWriter.writeMapField("outboundRules", outboundRules(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("status", status());
        jsonWriter.writeStringField("firewallSku", firewallSku() == null ? null : firewallSku().toString());
        jsonWriter.writeStringField("managedNetworkKind",
            managedNetworkKind() == null ? null : managedNetworkKind().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedNetworkSettingsEx from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedNetworkSettingsEx if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedNetworkSettingsEx.
     */
    public static ManagedNetworkSettingsEx fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedNetworkSettingsEx deserializedManagedNetworkSettingsEx = new ManagedNetworkSettingsEx();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableNetworkMonitor".equals(fieldName)) {
                    deserializedManagedNetworkSettingsEx
                        .withEnableNetworkMonitor(reader.getNullable(JsonReader::getBoolean));
                } else if ("isolationMode".equals(fieldName)) {
                    deserializedManagedNetworkSettingsEx
                        .withIsolationMode(IsolationMode.fromString(reader.getString()));
                } else if ("networkId".equals(fieldName)) {
                    deserializedManagedNetworkSettingsEx.networkId = reader.getString();
                } else if ("outboundRules".equals(fieldName)) {
                    Map<String, OutboundRule> outboundRules = reader.readMap(reader1 -> OutboundRule.fromJson(reader1));
                    deserializedManagedNetworkSettingsEx.withOutboundRules(outboundRules);
                } else if ("status".equals(fieldName)) {
                    deserializedManagedNetworkSettingsEx
                        .withStatus(ManagedNetworkProvisionStatusInner.fromJson(reader));
                } else if ("firewallSku".equals(fieldName)) {
                    deserializedManagedNetworkSettingsEx.withFirewallSku(FirewallSku.fromString(reader.getString()));
                } else if ("managedNetworkKind".equals(fieldName)) {
                    deserializedManagedNetworkSettingsEx
                        .withManagedNetworkKind(ManagedNetworkKind.fromString(reader.getString()));
                } else if ("firewallPublicIpAddress".equals(fieldName)) {
                    deserializedManagedNetworkSettingsEx.firewallPublicIpAddress = reader.getString();
                } else if ("changeableIsolationModes".equals(fieldName)) {
                    List<IsolationMode> changeableIsolationModes
                        = reader.readArray(reader1 -> IsolationMode.fromString(reader1.getString()));
                    deserializedManagedNetworkSettingsEx.changeableIsolationModes = changeableIsolationModes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedNetworkSettingsEx;
        });
    }
}
