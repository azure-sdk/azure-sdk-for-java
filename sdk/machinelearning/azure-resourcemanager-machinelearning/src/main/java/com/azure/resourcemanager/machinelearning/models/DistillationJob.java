// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Distillation Job definition.
 */
@Fluent
public final class DistillationJob extends JobBaseProperties {
    /*
     * [Required] Specifies the type of job.
     */
    private JobType jobType = JobType.DISTILLATION;

    /*
     * [Required]
     */
    private DataGenerationVertical dataGenerationDetails;

    /*
     * [Required]
     */
    private FinetuningDetails finetuningDetails;

    /*
     * [Required]
     */
    private Map<String, JobOutput> outputs;

    /*
     * Queue settings for the job
     */
    private QueueSettings queueSettings;

    /*
     * Instance types and other resources for the job
     */
    private JobResources resources;

    /**
     * Creates an instance of DistillationJob class.
     */
    public DistillationJob() {
    }

    /**
     * Get the jobType property: [Required] Specifies the type of job.
     * 
     * @return the jobType value.
     */
    @Override
    public JobType jobType() {
        return this.jobType;
    }

    /**
     * Get the dataGenerationDetails property: [Required].
     * 
     * @return the dataGenerationDetails value.
     */
    public DataGenerationVertical dataGenerationDetails() {
        return this.dataGenerationDetails;
    }

    /**
     * Set the dataGenerationDetails property: [Required].
     * 
     * @param dataGenerationDetails the dataGenerationDetails value to set.
     * @return the DistillationJob object itself.
     */
    public DistillationJob withDataGenerationDetails(DataGenerationVertical dataGenerationDetails) {
        this.dataGenerationDetails = dataGenerationDetails;
        return this;
    }

    /**
     * Get the finetuningDetails property: [Required].
     * 
     * @return the finetuningDetails value.
     */
    public FinetuningDetails finetuningDetails() {
        return this.finetuningDetails;
    }

    /**
     * Set the finetuningDetails property: [Required].
     * 
     * @param finetuningDetails the finetuningDetails value to set.
     * @return the DistillationJob object itself.
     */
    public DistillationJob withFinetuningDetails(FinetuningDetails finetuningDetails) {
        this.finetuningDetails = finetuningDetails;
        return this;
    }

    /**
     * Get the outputs property: [Required].
     * 
     * @return the outputs value.
     */
    public Map<String, JobOutput> outputs() {
        return this.outputs;
    }

    /**
     * Set the outputs property: [Required].
     * 
     * @param outputs the outputs value to set.
     * @return the DistillationJob object itself.
     */
    public DistillationJob withOutputs(Map<String, JobOutput> outputs) {
        this.outputs = outputs;
        return this;
    }

    /**
     * Get the queueSettings property: Queue settings for the job.
     * 
     * @return the queueSettings value.
     */
    public QueueSettings queueSettings() {
        return this.queueSettings;
    }

    /**
     * Set the queueSettings property: Queue settings for the job.
     * 
     * @param queueSettings the queueSettings value to set.
     * @return the DistillationJob object itself.
     */
    public DistillationJob withQueueSettings(QueueSettings queueSettings) {
        this.queueSettings = queueSettings;
        return this;
    }

    /**
     * Get the resources property: Instance types and other resources for the job.
     * 
     * @return the resources value.
     */
    public JobResources resources() {
        return this.resources;
    }

    /**
     * Set the resources property: Instance types and other resources for the job.
     * 
     * @param resources the resources value to set.
     * @return the DistillationJob object itself.
     */
    public DistillationJob withResources(JobResources resources) {
        this.resources = resources;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withComponentId(String componentId) {
        super.withComponentId(componentId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withComputeId(String computeId) {
        super.withComputeId(computeId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withExperimentName(String experimentName) {
        super.withExperimentName(experimentName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withIdentity(IdentityConfiguration identity) {
        super.withIdentity(identity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withIsArchived(Boolean isArchived) {
        super.withIsArchived(isArchived);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withNotificationSetting(NotificationSetting notificationSetting) {
        super.withNotificationSetting(notificationSetting);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withParentJobName(String parentJobName) {
        super.withParentJobName(parentJobName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withServices(Map<String, JobService> services) {
        super.withServices(services);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DistillationJob withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (dataGenerationDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataGenerationDetails in model DistillationJob"));
        } else {
            dataGenerationDetails().validate();
        }
        if (finetuningDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property finetuningDetails in model DistillationJob"));
        } else {
            finetuningDetails().validate();
        }
        if (outputs() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property outputs in model DistillationJob"));
        } else {
            outputs().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (queueSettings() != null) {
            queueSettings().validate();
        }
        if (resources() != null) {
            resources().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
        if (notificationSetting() != null) {
            notificationSetting().validate();
        }
        if (services() != null) {
            services().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DistillationJob.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeMapField("properties", properties(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("componentId", componentId());
        jsonWriter.writeStringField("computeId", computeId());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("experimentName", experimentName());
        jsonWriter.writeJsonField("identity", identity());
        jsonWriter.writeBooleanField("isArchived", isArchived());
        jsonWriter.writeJsonField("notificationSetting", notificationSetting());
        jsonWriter.writeStringField("parentJobName", parentJobName());
        jsonWriter.writeMapField("services", services(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("dataGenerationDetails", this.dataGenerationDetails);
        jsonWriter.writeJsonField("finetuningDetails", this.finetuningDetails);
        jsonWriter.writeMapField("outputs", this.outputs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("jobType", this.jobType == null ? null : this.jobType.toString());
        jsonWriter.writeJsonField("queueSettings", this.queueSettings);
        jsonWriter.writeJsonField("resources", this.resources);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DistillationJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DistillationJob if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DistillationJob.
     */
    public static DistillationJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DistillationJob deserializedDistillationJob = new DistillationJob();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedDistillationJob.withDescription(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedDistillationJob.withProperties(properties);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDistillationJob.withTags(tags);
                } else if ("componentId".equals(fieldName)) {
                    deserializedDistillationJob.withComponentId(reader.getString());
                } else if ("computeId".equals(fieldName)) {
                    deserializedDistillationJob.withComputeId(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedDistillationJob.withDisplayName(reader.getString());
                } else if ("experimentName".equals(fieldName)) {
                    deserializedDistillationJob.withExperimentName(reader.getString());
                } else if ("identity".equals(fieldName)) {
                    deserializedDistillationJob.withIdentity(IdentityConfiguration.fromJson(reader));
                } else if ("isArchived".equals(fieldName)) {
                    deserializedDistillationJob.withIsArchived(reader.getNullable(JsonReader::getBoolean));
                } else if ("notificationSetting".equals(fieldName)) {
                    deserializedDistillationJob.withNotificationSetting(NotificationSetting.fromJson(reader));
                } else if ("parentJobName".equals(fieldName)) {
                    deserializedDistillationJob.withParentJobName(reader.getString());
                } else if ("services".equals(fieldName)) {
                    Map<String, JobService> services = reader.readMap(reader1 -> JobService.fromJson(reader1));
                    deserializedDistillationJob.withServices(services);
                } else if ("status".equals(fieldName)) {
                    deserializedDistillationJob.withStatus(JobStatus.fromString(reader.getString()));
                } else if ("dataGenerationDetails".equals(fieldName)) {
                    deserializedDistillationJob.dataGenerationDetails = DataGenerationVertical.fromJson(reader);
                } else if ("finetuningDetails".equals(fieldName)) {
                    deserializedDistillationJob.finetuningDetails = FinetuningDetails.fromJson(reader);
                } else if ("outputs".equals(fieldName)) {
                    Map<String, JobOutput> outputs = reader.readMap(reader1 -> JobOutput.fromJson(reader1));
                    deserializedDistillationJob.outputs = outputs;
                } else if ("jobType".equals(fieldName)) {
                    deserializedDistillationJob.jobType = JobType.fromString(reader.getString());
                } else if ("queueSettings".equals(fieldName)) {
                    deserializedDistillationJob.queueSettings = QueueSettings.fromJson(reader);
                } else if ("resources".equals(fieldName)) {
                    deserializedDistillationJob.resources = JobResources.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDistillationJob;
        });
    }
}
