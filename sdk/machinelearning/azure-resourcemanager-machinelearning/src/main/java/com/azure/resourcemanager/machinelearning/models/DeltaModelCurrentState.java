// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Contract for DeltaModelCurrentState.
 */
@Fluent
public final class DeltaModelCurrentState implements JsonSerializable<DeltaModelCurrentState> {
    /*
     * Gets or sets Count of instances with model.
     */
    private Integer count;

    /*
     * Gets or sets sample of instances with model.
     */
    private String sampleInstanceId;

    /*
     * Gets or sets status.
     */
    private String status;

    /**
     * Creates an instance of DeltaModelCurrentState class.
     */
    public DeltaModelCurrentState() {
    }

    /**
     * Get the count property: Gets or sets Count of instances with model.
     * 
     * @return the count value.
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Set the count property: Gets or sets Count of instances with model.
     * 
     * @param count the count value to set.
     * @return the DeltaModelCurrentState object itself.
     */
    public DeltaModelCurrentState withCount(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Get the sampleInstanceId property: Gets or sets sample of instances with model.
     * 
     * @return the sampleInstanceId value.
     */
    public String sampleInstanceId() {
        return this.sampleInstanceId;
    }

    /**
     * Set the sampleInstanceId property: Gets or sets sample of instances with model.
     * 
     * @param sampleInstanceId the sampleInstanceId value to set.
     * @return the DeltaModelCurrentState object itself.
     */
    public DeltaModelCurrentState withSampleInstanceId(String sampleInstanceId) {
        this.sampleInstanceId = sampleInstanceId;
        return this;
    }

    /**
     * Get the status property: Gets or sets status.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: Gets or sets status.
     * 
     * @param status the status value to set.
     * @return the DeltaModelCurrentState object itself.
     */
    public DeltaModelCurrentState withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("sampleInstanceID", this.sampleInstanceId);
        jsonWriter.writeStringField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaModelCurrentState from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaModelCurrentState if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeltaModelCurrentState.
     */
    public static DeltaModelCurrentState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeltaModelCurrentState deserializedDeltaModelCurrentState = new DeltaModelCurrentState();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedDeltaModelCurrentState.count = reader.getNullable(JsonReader::getInt);
                } else if ("sampleInstanceID".equals(fieldName)) {
                    deserializedDeltaModelCurrentState.sampleInstanceId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedDeltaModelCurrentState.status = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeltaModelCurrentState;
        });
    }
}
