// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The Image model.
 */
@Fluent
public final class Image implements JsonSerializable<Image> {
    /*
     * Type of the image. Possible values are: docker - For docker images. azureml - For AzureML Environment images
     * (custom and curated)
     */
    private ImageType type;

    /*
     * Image reference URL if type is docker. Environment name if type is azureml
     */
    private String reference;

    /*
     * Version of image being used. If latest then skip this field
     */
    private String version;

    /*
     * Dictionary of <any>
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of Image class.
     */
    public Image() {
    }

    /**
     * Get the type property: Type of the image. Possible values are: docker - For docker images. azureml - For AzureML
     * Environment images (custom and curated).
     * 
     * @return the type value.
     */
    public ImageType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of the image. Possible values are: docker - For docker images. azureml - For AzureML
     * Environment images (custom and curated).
     * 
     * @param type the type value to set.
     * @return the Image object itself.
     */
    public Image withType(ImageType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the reference property: Image reference URL if type is docker. Environment name if type is azureml.
     * 
     * @return the reference value.
     */
    public String reference() {
        return this.reference;
    }

    /**
     * Set the reference property: Image reference URL if type is docker. Environment name if type is azureml.
     * 
     * @param reference the reference value to set.
     * @return the Image object itself.
     */
    public Image withReference(String reference) {
        this.reference = reference;
        return this;
    }

    /**
     * Get the version property: Version of image being used. If latest then skip this field.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version of image being used. If latest then skip this field.
     * 
     * @param version the version value to set.
     * @return the Image object itself.
     */
    public Image withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the additionalProperties property: Dictionary of &lt;any&gt;.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Dictionary of &lt;any&gt;.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the Image object itself.
     */
    public Image withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("reference", this.reference);
        jsonWriter.writeStringField("version", this.version);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Image from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Image if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Image.
     */
    public static Image fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Image deserializedImage = new Image();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedImage.type = ImageType.fromString(reader.getString());
                } else if ("reference".equals(fieldName)) {
                    deserializedImage.reference = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedImage.version = reader.getString();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedImage.additionalProperties = additionalProperties;

            return deserializedImage;
        });
    }
}
