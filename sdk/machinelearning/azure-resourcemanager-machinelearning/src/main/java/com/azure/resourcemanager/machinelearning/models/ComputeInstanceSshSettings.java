// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Specifies policy and settings for SSH access. */
@Fluent
public final class ComputeInstanceSshSettings {
    /*
     * Access policy for SSH
     *
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on
     * this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet
     * policy if applicable.
     */
    @JsonProperty(value = "sshPublicAccess")
    private SshPublicAccess sshPublicAccess;

    /*
     * Describes the admin user name.
     */
    @JsonProperty(value = "adminUserName", access = JsonProperty.Access.WRITE_ONLY)
    private String adminUsername;

    /*
     * Describes the port for connecting through SSH.
     */
    @JsonProperty(value = "sshPort", access = JsonProperty.Access.WRITE_ONLY)
    private Integer sshPort;

    /*
     * Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key
     * pairs.
     */
    @JsonProperty(value = "adminPublicKey")
    private String adminPublicKey;

    /*
     * List of keys (with friendly names) authorized for SSH. If specified, the value of 'adminPublicKey' is ignored.
     */
    @JsonProperty(value = "adminPublicKeys")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, SshPublicKeyReference> adminPublicKeys;

    /**
     * Get the sshPublicAccess property: Access policy for SSH
     *
     * <p>State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on
     * this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet
     * policy if applicable.
     *
     * @return the sshPublicAccess value.
     */
    public SshPublicAccess sshPublicAccess() {
        return this.sshPublicAccess;
    }

    /**
     * Set the sshPublicAccess property: Access policy for SSH
     *
     * <p>State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on
     * this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet
     * policy if applicable.
     *
     * @param sshPublicAccess the sshPublicAccess value to set.
     * @return the ComputeInstanceSshSettings object itself.
     */
    public ComputeInstanceSshSettings withSshPublicAccess(SshPublicAccess sshPublicAccess) {
        this.sshPublicAccess = sshPublicAccess;
        return this;
    }

    /**
     * Get the adminUsername property: Describes the admin user name.
     *
     * @return the adminUsername value.
     */
    public String adminUsername() {
        return this.adminUsername;
    }

    /**
     * Get the sshPort property: Describes the port for connecting through SSH.
     *
     * @return the sshPort value.
     */
    public Integer sshPort() {
        return this.sshPort;
    }

    /**
     * Get the adminPublicKey property: Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b
     * 2048" to generate your SSH key pairs.
     *
     * @return the adminPublicKey value.
     */
    public String adminPublicKey() {
        return this.adminPublicKey;
    }

    /**
     * Set the adminPublicKey property: Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b
     * 2048" to generate your SSH key pairs.
     *
     * @param adminPublicKey the adminPublicKey value to set.
     * @return the ComputeInstanceSshSettings object itself.
     */
    public ComputeInstanceSshSettings withAdminPublicKey(String adminPublicKey) {
        this.adminPublicKey = adminPublicKey;
        return this;
    }

    /**
     * Get the adminPublicKeys property: List of keys (with friendly names) authorized for SSH. If specified, the value
     * of 'adminPublicKey' is ignored.
     *
     * @return the adminPublicKeys value.
     */
    public Map<String, SshPublicKeyReference> adminPublicKeys() {
        return this.adminPublicKeys;
    }

    /**
     * Set the adminPublicKeys property: List of keys (with friendly names) authorized for SSH. If specified, the value
     * of 'adminPublicKey' is ignored.
     *
     * @param adminPublicKeys the adminPublicKeys value to set.
     * @return the ComputeInstanceSshSettings object itself.
     */
    public ComputeInstanceSshSettings withAdminPublicKeys(Map<String, SshPublicKeyReference> adminPublicKeys) {
        this.adminPublicKeys = adminPublicKeys;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (adminPublicKeys() != null) {
            adminPublicKeys()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
