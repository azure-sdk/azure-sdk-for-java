// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** The DockerCredentialDto model. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "credentialType")
@JsonTypeName("DockerCredentials")
@Fluent
public final class DockerCredentialDto extends DataReferenceCredentialDto {
    /*
     * container registry password
     */
    @JsonProperty(value = "password")
    private String password;

    /*
     * container registry username
     */
    @JsonProperty(value = "userName")
    private String username;

    /** Creates an instance of DockerCredentialDto class. */
    public DockerCredentialDto() {
    }

    /**
     * Get the password property: container registry password.
     *
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: container registry password.
     *
     * @param password the password value to set.
     * @return the DockerCredentialDto object itself.
     */
    public DockerCredentialDto withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the username property: container registry username.
     *
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: container registry username.
     *
     * @param username the username value to set.
     * @return the DockerCredentialDto object itself.
     */
    public DockerCredentialDto withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
