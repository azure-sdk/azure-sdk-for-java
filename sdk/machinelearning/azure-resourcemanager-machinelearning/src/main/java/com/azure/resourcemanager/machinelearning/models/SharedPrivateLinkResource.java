// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.fluent.models.SharedPrivateLinkResourceProperty;
import java.io.IOException;

/**
 * The SharedPrivateLinkResource model.
 */
@Fluent
public final class SharedPrivateLinkResource implements JsonSerializable<SharedPrivateLinkResource> {
    /*
     * Unique name of the private link
     */
    private String name;

    /*
     * Properties of a shared private link resource.
     */
    private SharedPrivateLinkResourceProperty innerProperties;

    /**
     * Creates an instance of SharedPrivateLinkResource class.
     */
    public SharedPrivateLinkResource() {
    }

    /**
     * Get the name property: Unique name of the private link.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Unique name of the private link.
     * 
     * @param name the name value to set.
     * @return the SharedPrivateLinkResource object itself.
     */
    public SharedPrivateLinkResource withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the innerProperties property: Properties of a shared private link resource.
     * 
     * @return the innerProperties value.
     */
    private SharedPrivateLinkResourceProperty innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the groupId property: group id of the private link.
     * 
     * @return the groupId value.
     */
    public String groupId() {
        return this.innerProperties() == null ? null : this.innerProperties().groupId();
    }

    /**
     * Set the groupId property: group id of the private link.
     * 
     * @param groupId the groupId value to set.
     * @return the SharedPrivateLinkResource object itself.
     */
    public SharedPrivateLinkResource withGroupId(String groupId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedPrivateLinkResourceProperty();
        }
        this.innerProperties().withGroupId(groupId);
        return this;
    }

    /**
     * Get the privateLinkResourceId property: the resource id that private link links to.
     * 
     * @return the privateLinkResourceId value.
     */
    public String privateLinkResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().privateLinkResourceId();
    }

    /**
     * Set the privateLinkResourceId property: the resource id that private link links to.
     * 
     * @param privateLinkResourceId the privateLinkResourceId value to set.
     * @return the SharedPrivateLinkResource object itself.
     */
    public SharedPrivateLinkResource withPrivateLinkResourceId(String privateLinkResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedPrivateLinkResourceProperty();
        }
        this.innerProperties().withPrivateLinkResourceId(privateLinkResourceId);
        return this;
    }

    /**
     * Get the requestMessage property: Request message.
     * 
     * @return the requestMessage value.
     */
    public String requestMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().requestMessage();
    }

    /**
     * Set the requestMessage property: Request message.
     * 
     * @param requestMessage the requestMessage value to set.
     * @return the SharedPrivateLinkResource object itself.
     */
    public SharedPrivateLinkResource withRequestMessage(String requestMessage) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedPrivateLinkResourceProperty();
        }
        this.innerProperties().withRequestMessage(requestMessage);
        return this;
    }

    /**
     * Get the status property: Connection status of the service consumer with the service provider.
     * 
     * @return the status value.
     */
    public EndpointServiceConnectionStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: Connection status of the service consumer with the service provider.
     * 
     * @param status the status value to set.
     * @return the SharedPrivateLinkResource object itself.
     */
    public SharedPrivateLinkResource withStatus(EndpointServiceConnectionStatus status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedPrivateLinkResourceProperty();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SharedPrivateLinkResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SharedPrivateLinkResource if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SharedPrivateLinkResource.
     */
    public static SharedPrivateLinkResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SharedPrivateLinkResource deserializedSharedPrivateLinkResource = new SharedPrivateLinkResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSharedPrivateLinkResource.name = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedSharedPrivateLinkResource.innerProperties
                        = SharedPrivateLinkResourceProperty.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSharedPrivateLinkResource;
        });
    }
}
