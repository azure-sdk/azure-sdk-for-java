// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The AssetBase model.
 */
@Fluent
public class AssetBase extends ResourceBase {
    /*
     * If the name version are system generated (anonymous registration).
     */
    private Boolean isAnonymous;

    /*
     * Is the asset archived?
     */
    private Boolean isArchived;

    /**
     * Creates an instance of AssetBase class.
     */
    public AssetBase() {
    }

    /**
     * Get the isAnonymous property: If the name version are system generated (anonymous registration).
     * 
     * @return the isAnonymous value.
     */
    public Boolean isAnonymous() {
        return this.isAnonymous;
    }

    /**
     * Set the isAnonymous property: If the name version are system generated (anonymous registration).
     * 
     * @param isAnonymous the isAnonymous value to set.
     * @return the AssetBase object itself.
     */
    public AssetBase withIsAnonymous(Boolean isAnonymous) {
        this.isAnonymous = isAnonymous;
        return this;
    }

    /**
     * Get the isArchived property: Is the asset archived?.
     * 
     * @return the isArchived value.
     */
    public Boolean isArchived() {
        return this.isArchived;
    }

    /**
     * Set the isArchived property: Is the asset archived?.
     * 
     * @param isArchived the isArchived value to set.
     * @return the AssetBase object itself.
     */
    public AssetBase withIsArchived(Boolean isArchived) {
        this.isArchived = isArchived;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssetBase withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssetBase withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssetBase withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeMapField("properties", properties(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isAnonymous", this.isAnonymous);
        jsonWriter.writeBooleanField("isArchived", this.isArchived);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetBase if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the AssetBase.
     */
    public static AssetBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssetBase deserializedAssetBase = new AssetBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedAssetBase.withDescription(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedAssetBase.withProperties(properties);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAssetBase.withTags(tags);
                } else if ("isAnonymous".equals(fieldName)) {
                    deserializedAssetBase.isAnonymous = reader.getNullable(JsonReader::getBoolean);
                } else if ("isArchived".equals(fieldName)) {
                    deserializedAssetBase.isArchived = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssetBase;
        });
    }
}
