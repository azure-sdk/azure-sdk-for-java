// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * The AssetBase model.
 */
@Fluent
public class AssetBase extends ResourceBase {
    /*
     * Specifies the lifecycle setting of managed data asset.
     */
    @JsonProperty(value = "autoDeleteSetting")
    private AutoDeleteSetting autoDeleteSetting;

    /*
     * If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
     */
    @JsonProperty(value = "isAnonymous")
    private Boolean isAnonymous;

    /*
     * Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
     */
    @JsonProperty(value = "isArchived")
    private Boolean isArchived;

    /**
     * Creates an instance of AssetBase class.
     */
    public AssetBase() {
    }

    /**
     * Get the autoDeleteSetting property: Specifies the lifecycle setting of managed data asset.
     * 
     * @return the autoDeleteSetting value.
     */
    public AutoDeleteSetting autoDeleteSetting() {
        return this.autoDeleteSetting;
    }

    /**
     * Set the autoDeleteSetting property: Specifies the lifecycle setting of managed data asset.
     * 
     * @param autoDeleteSetting the autoDeleteSetting value to set.
     * @return the AssetBase object itself.
     */
    public AssetBase withAutoDeleteSetting(AutoDeleteSetting autoDeleteSetting) {
        this.autoDeleteSetting = autoDeleteSetting;
        return this;
    }

    /**
     * Get the isAnonymous property: If the name version are system generated (anonymous registration). For types where
     * Stage is defined, when Stage is provided it will be used to populate IsAnonymous.
     * 
     * @return the isAnonymous value.
     */
    public Boolean isAnonymous() {
        return this.isAnonymous;
    }

    /**
     * Set the isAnonymous property: If the name version are system generated (anonymous registration). For types where
     * Stage is defined, when Stage is provided it will be used to populate IsAnonymous.
     * 
     * @param isAnonymous the isAnonymous value to set.
     * @return the AssetBase object itself.
     */
    public AssetBase withIsAnonymous(Boolean isAnonymous) {
        this.isAnonymous = isAnonymous;
        return this;
    }

    /**
     * Get the isArchived property: Is the asset archived? For types where Stage is defined, when Stage is provided it
     * will be used to populate IsArchived.
     * 
     * @return the isArchived value.
     */
    public Boolean isArchived() {
        return this.isArchived;
    }

    /**
     * Set the isArchived property: Is the asset archived? For types where Stage is defined, when Stage is provided it
     * will be used to populate IsArchived.
     * 
     * @param isArchived the isArchived value to set.
     * @return the AssetBase object itself.
     */
    public AssetBase withIsArchived(Boolean isArchived) {
        this.isArchived = isArchived;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssetBase withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssetBase withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssetBase withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (autoDeleteSetting() != null) {
            autoDeleteSetting().validate();
        }
    }
}
