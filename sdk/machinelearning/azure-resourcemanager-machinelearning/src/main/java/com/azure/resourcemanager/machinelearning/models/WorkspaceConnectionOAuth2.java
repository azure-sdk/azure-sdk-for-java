// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.UUID;

/**
 * ClientId and ClientSecret are required. Other properties are optional
 * depending on each OAuth2 provider's implementation.
 */
@Fluent
public final class WorkspaceConnectionOAuth2 {
    /*
     * Required by Concur connection category
     */
    @JsonProperty(value = "authUrl")
    private String authUrl;

    /*
     * Client id in the format of UUID
     */
    @JsonProperty(value = "clientId")
    private UUID clientId;

    /*
     * The clientSecret property.
     */
    @JsonProperty(value = "clientSecret")
    private String clientSecret;

    /*
     * Required by GoogleAdWords connection category
     */
    @JsonProperty(value = "developerToken")
    private String developerToken;

    /*
     * The password property.
     */
    @JsonProperty(value = "password")
    private String password;

    /*
     * Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero, Zoho
     * where user needs to get RefreshToken offline
     */
    @JsonProperty(value = "refreshToken")
    private String refreshToken;

    /*
     * Required by QuickBooks and Xero connection categories
     */
    @JsonProperty(value = "tenantId")
    private String tenantId;

    /*
     * Concur, ServiceNow auth server AccessToken grant type is 'Password'
     * which requires UsernamePassword
     */
    @JsonProperty(value = "username")
    private String username;

    /**
     * Creates an instance of WorkspaceConnectionOAuth2 class.
     */
    public WorkspaceConnectionOAuth2() {
    }

    /**
     * Get the authUrl property: Required by Concur connection category.
     * 
     * @return the authUrl value.
     */
    public String authUrl() {
        return this.authUrl;
    }

    /**
     * Set the authUrl property: Required by Concur connection category.
     * 
     * @param authUrl the authUrl value to set.
     * @return the WorkspaceConnectionOAuth2 object itself.
     */
    public WorkspaceConnectionOAuth2 withAuthUrl(String authUrl) {
        this.authUrl = authUrl;
        return this;
    }

    /**
     * Get the clientId property: Client id in the format of UUID.
     * 
     * @return the clientId value.
     */
    public UUID clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: Client id in the format of UUID.
     * 
     * @param clientId the clientId value to set.
     * @return the WorkspaceConnectionOAuth2 object itself.
     */
    public WorkspaceConnectionOAuth2 withClientId(UUID clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the clientSecret property: The clientSecret property.
     * 
     * @return the clientSecret value.
     */
    public String clientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: The clientSecret property.
     * 
     * @param clientSecret the clientSecret value to set.
     * @return the WorkspaceConnectionOAuth2 object itself.
     */
    public WorkspaceConnectionOAuth2 withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Get the developerToken property: Required by GoogleAdWords connection category.
     * 
     * @return the developerToken value.
     */
    public String developerToken() {
        return this.developerToken;
    }

    /**
     * Set the developerToken property: Required by GoogleAdWords connection category.
     * 
     * @param developerToken the developerToken value to set.
     * @return the WorkspaceConnectionOAuth2 object itself.
     */
    public WorkspaceConnectionOAuth2 withDeveloperToken(String developerToken) {
        this.developerToken = developerToken;
        return this;
    }

    /**
     * Get the password property: The password property.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: The password property.
     * 
     * @param password the password value to set.
     * @return the WorkspaceConnectionOAuth2 object itself.
     */
    public WorkspaceConnectionOAuth2 withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the refreshToken property: Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero,
     * Zoho
     * where user needs to get RefreshToken offline.
     * 
     * @return the refreshToken value.
     */
    public String refreshToken() {
        return this.refreshToken;
    }

    /**
     * Set the refreshToken property: Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero,
     * Zoho
     * where user needs to get RefreshToken offline.
     * 
     * @param refreshToken the refreshToken value to set.
     * @return the WorkspaceConnectionOAuth2 object itself.
     */
    public WorkspaceConnectionOAuth2 withRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Get the tenantId property: Required by QuickBooks and Xero connection categories.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Required by QuickBooks and Xero connection categories.
     * 
     * @param tenantId the tenantId value to set.
     * @return the WorkspaceConnectionOAuth2 object itself.
     */
    public WorkspaceConnectionOAuth2 withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the username property: Concur, ServiceNow auth server AccessToken grant type is 'Password'
     * which requires UsernamePassword.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Concur, ServiceNow auth server AccessToken grant type is 'Password'
     * which requires UsernamePassword.
     * 
     * @param username the username value to set.
     * @return the WorkspaceConnectionOAuth2 object itself.
     */
    public WorkspaceConnectionOAuth2 withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
