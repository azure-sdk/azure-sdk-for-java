// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.models.AssetBased;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Index properties.
 */
@Fluent
public final class IndexVersionProperties extends AssetBased {
    /*
     * Default workspace blob storage Uri. Should work across storage types and auth scenarios.
     */
    @JsonProperty(value = "storageUri", required = true)
    private String storageUri;

    /*
     * Placeholder for extras.
     */
    @JsonProperty(value = "indexConfigurations", required = true)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> indexConfigurations;

    /**
     * Creates an instance of IndexVersionProperties class.
     */
    public IndexVersionProperties() {
    }

    /**
     * Get the storageUri property: Default workspace blob storage Uri. Should work across storage types and auth
     * scenarios.
     * 
     * @return the storageUri value.
     */
    public String storageUri() {
        return this.storageUri;
    }

    /**
     * Set the storageUri property: Default workspace blob storage Uri. Should work across storage types and auth
     * scenarios.
     * 
     * @param storageUri the storageUri value to set.
     * @return the IndexVersionProperties object itself.
     */
    public IndexVersionProperties withStorageUri(String storageUri) {
        this.storageUri = storageUri;
        return this;
    }

    /**
     * Get the indexConfigurations property: Placeholder for extras.
     * 
     * @return the indexConfigurations value.
     */
    public Map<String, String> indexConfigurations() {
        return this.indexConfigurations;
    }

    /**
     * Set the indexConfigurations property: Placeholder for extras.
     * 
     * @param indexConfigurations the indexConfigurations value to set.
     * @return the IndexVersionProperties object itself.
     */
    public IndexVersionProperties withIndexConfigurations(Map<String, String> indexConfigurations) {
        this.indexConfigurations = indexConfigurations;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexVersionProperties withIsArchived(boolean isArchived) {
        super.withIsArchived(isArchived);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexVersionProperties withIsAnonymous(boolean isAnonymous) {
        super.withIsAnonymous(isAnonymous);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexVersionProperties withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexVersionProperties withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (storageUri() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property storageUri in model IndexVersionProperties"));
        }
        if (indexConfigurations() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property indexConfigurations in model IndexVersionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IndexVersionProperties.class);
}
