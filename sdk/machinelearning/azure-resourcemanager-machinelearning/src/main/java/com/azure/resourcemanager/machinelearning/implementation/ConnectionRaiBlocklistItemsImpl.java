// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.ConnectionRaiBlocklistItemsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.RaiBlocklistItemPropertiesBasicResourceInner;
import com.azure.resourcemanager.machinelearning.models.ConnectionRaiBlocklistItems;
import com.azure.resourcemanager.machinelearning.models.RaiBlocklistItemBulkRequest;
import com.azure.resourcemanager.machinelearning.models.RaiBlocklistItemPropertiesBasicResource;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class ConnectionRaiBlocklistItemsImpl implements ConnectionRaiBlocklistItems {
    private static final ClientLogger LOGGER = new ClientLogger(ConnectionRaiBlocklistItemsImpl.class);

    private final ConnectionRaiBlocklistItemsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public ConnectionRaiBlocklistItemsImpl(ConnectionRaiBlocklistItemsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public List<RaiBlocklistItemPropertiesBasicResource> addBulk(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, List<RaiBlocklistItemBulkRequest> body) {
        List<RaiBlocklistItemPropertiesBasicResourceInner> inner
            = this.serviceClient().addBulk(resourceGroupName, workspaceName, connectionName, raiBlocklistName, body);
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new RaiBlocklistItemPropertiesBasicResourceImpl(inner1, this.manager()))
                .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public List<RaiBlocklistItemPropertiesBasicResource> addBulk(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, List<RaiBlocklistItemBulkRequest> body, Context context) {
        List<RaiBlocklistItemPropertiesBasicResourceInner> inner = this.serviceClient()
            .addBulk(resourceGroupName, workspaceName, connectionName, raiBlocklistName, body, context);
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new RaiBlocklistItemPropertiesBasicResourceImpl(inner1, this.manager()))
                .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public void deleteBulk(String resourceGroupName, String workspaceName, String connectionName,
        String raiBlocklistName, Object body) {
        this.serviceClient().deleteBulk(resourceGroupName, workspaceName, connectionName, raiBlocklistName, body);
    }

    public void deleteBulk(String resourceGroupName, String workspaceName, String connectionName,
        String raiBlocklistName, Object body, Context context) {
        this.serviceClient()
            .deleteBulk(resourceGroupName, workspaceName, connectionName, raiBlocklistName, body, context);
    }

    public void delete(String resourceGroupName, String workspaceName, String connectionName, String raiBlocklistName,
        String raiBlocklistItemName) {
        this.serviceClient()
            .delete(resourceGroupName, workspaceName, connectionName, raiBlocklistName, raiBlocklistItemName);
    }

    public void delete(String resourceGroupName, String workspaceName, String connectionName, String raiBlocklistName,
        String raiBlocklistItemName, String proxyApiVersion, Context context) {
        this.serviceClient()
            .delete(resourceGroupName, workspaceName, connectionName, raiBlocklistName, raiBlocklistItemName,
                proxyApiVersion, context);
    }

    public Response<RaiBlocklistItemPropertiesBasicResource> getWithResponse(String resourceGroupName,
        String workspaceName, String connectionName, String raiBlocklistName, String raiBlocklistItemName,
        Context context) {
        Response<RaiBlocklistItemPropertiesBasicResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, workspaceName, connectionName, raiBlocklistName, raiBlocklistItemName,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RaiBlocklistItemPropertiesBasicResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RaiBlocklistItemPropertiesBasicResource get(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, String raiBlocklistItemName) {
        RaiBlocklistItemPropertiesBasicResourceInner inner = this.serviceClient()
            .get(resourceGroupName, workspaceName, connectionName, raiBlocklistName, raiBlocklistItemName);
        if (inner != null) {
            return new RaiBlocklistItemPropertiesBasicResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RaiBlocklistItemPropertiesBasicResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, workspaceName, connectionName, raiBlocklistName, raiBlocklistItemName,
                Context.NONE)
            .getValue();
    }

    public Response<RaiBlocklistItemPropertiesBasicResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, connectionName, raiBlocklistName,
            raiBlocklistItemName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        String localProxyApiVersion = null;
        this.delete(resourceGroupName, workspaceName, connectionName, raiBlocklistName, raiBlocklistItemName,
            localProxyApiVersion, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, String proxyApiVersion, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, connectionName, raiBlocklistName, raiBlocklistItemName,
            proxyApiVersion, context);
    }

    private ConnectionRaiBlocklistItemsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public RaiBlocklistItemPropertiesBasicResourceImpl define(String name) {
        return new RaiBlocklistItemPropertiesBasicResourceImpl(name, this.manager());
    }
}
