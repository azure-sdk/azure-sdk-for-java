// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ServerlessOffer model.
 */
@Fluent
public final class ServerlessOffer implements JsonSerializable<ServerlessOffer> {
    /*
     * The offerName property.
     */
    private String offerName;

    /*
     * The publisher property.
     */
    private String publisher;

    /**
     * Creates an instance of ServerlessOffer class.
     */
    public ServerlessOffer() {
    }

    /**
     * Get the offerName property: The offerName property.
     * 
     * @return the offerName value.
     */
    public String offerName() {
        return this.offerName;
    }

    /**
     * Set the offerName property: The offerName property.
     * 
     * @param offerName the offerName value to set.
     * @return the ServerlessOffer object itself.
     */
    public ServerlessOffer withOfferName(String offerName) {
        this.offerName = offerName;
        return this;
    }

    /**
     * Get the publisher property: The publisher property.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Set the publisher property: The publisher property.
     * 
     * @param publisher the publisher value to set.
     * @return the ServerlessOffer object itself.
     */
    public ServerlessOffer withPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (offerName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property offerName in model ServerlessOffer"));
        }
        if (publisher() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property publisher in model ServerlessOffer"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ServerlessOffer.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("offerName", this.offerName);
        jsonWriter.writeStringField("publisher", this.publisher);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessOffer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessOffer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServerlessOffer.
     */
    public static ServerlessOffer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessOffer deserializedServerlessOffer = new ServerlessOffer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("offerName".equals(fieldName)) {
                    deserializedServerlessOffer.offerName = reader.getString();
                } else if ("publisher".equals(fieldName)) {
                    deserializedServerlessOffer.publisher = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessOffer;
        });
    }
}
