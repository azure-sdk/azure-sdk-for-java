// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The RegenerateServiceAccountKeyContent model.
 */
@Fluent
public final class RegenerateServiceAccountKeyContent implements JsonSerializable<RegenerateServiceAccountKeyContent> {
    /*
     * The keyName property.
     */
    private ServiceAccountKeyName keyName;

    /**
     * Creates an instance of RegenerateServiceAccountKeyContent class.
     */
    public RegenerateServiceAccountKeyContent() {
    }

    /**
     * Get the keyName property: The keyName property.
     * 
     * @return the keyName value.
     */
    public ServiceAccountKeyName keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: The keyName property.
     * 
     * @param keyName the keyName value to set.
     * @return the RegenerateServiceAccountKeyContent object itself.
     */
    public RegenerateServiceAccountKeyContent withKeyName(ServiceAccountKeyName keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyName", this.keyName == null ? null : this.keyName.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegenerateServiceAccountKeyContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegenerateServiceAccountKeyContent if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegenerateServiceAccountKeyContent.
     */
    public static RegenerateServiceAccountKeyContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegenerateServiceAccountKeyContent deserializedRegenerateServiceAccountKeyContent
                = new RegenerateServiceAccountKeyContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyName".equals(fieldName)) {
                    deserializedRegenerateServiceAccountKeyContent.keyName
                        = ServiceAccountKeyName.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegenerateServiceAccountKeyContent;
        });
    }
}
