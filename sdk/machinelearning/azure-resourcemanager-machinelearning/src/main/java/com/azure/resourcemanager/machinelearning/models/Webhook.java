// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Webhook base.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "webhookType", defaultImpl = Webhook.class, visible = true)
@JsonTypeName("Webhook")
@JsonSubTypes({ @JsonSubTypes.Type(name = "AzureDevOps", value = AzureDevOpsWebhook.class) })
@Fluent
public class Webhook {
    /*
     * [Required] Specifies the type of service to send a callback
     */
    @JsonTypeId
    @JsonProperty(value = "webhookType", required = true)
    private WebhookType webhookType = WebhookType.fromString("Webhook");

    /*
     * Send callback on a specified notification event
     */
    @JsonProperty(value = "eventType")
    private String eventType;

    /**
     * Creates an instance of Webhook class.
     */
    public Webhook() {
    }

    /**
     * Get the webhookType property: [Required] Specifies the type of service to send a callback.
     * 
     * @return the webhookType value.
     */
    public WebhookType webhookType() {
        return this.webhookType;
    }

    /**
     * Get the eventType property: Send callback on a specified notification event.
     * 
     * @return the eventType value.
     */
    public String eventType() {
        return this.eventType;
    }

    /**
     * Set the eventType property: Send callback on a specified notification event.
     * 
     * @param eventType the eventType value to set.
     * @return the Webhook object itself.
     */
    public Webhook withEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
