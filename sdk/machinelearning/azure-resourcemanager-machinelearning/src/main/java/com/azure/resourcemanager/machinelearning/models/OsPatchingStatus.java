// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Returns metadata about the os patching.
 */
@Fluent
public final class OsPatchingStatus {
    /*
     * The os patching status.
     */
    @JsonProperty(value = "patchStatus")
    private PatchStatus patchStatus;

    /*
     * Time of the latest os patching.
     */
    @JsonProperty(value = "latestPatchTime")
    private String latestPatchTime;

    /*
     * Specifies whether this compute instance is pending for reboot to finish os patching.
     */
    @JsonProperty(value = "rebootPending")
    private Boolean rebootPending;

    /*
     * Time of scheduled reboot.
     */
    @JsonProperty(value = "scheduledRebootTime")
    private String scheduledRebootTime;

    /*
     * Collection of errors encountered when doing os patching.
     */
    @JsonProperty(value = "osPatchingErrors")
    private List<ManagementError> osPatchingErrors;

    /**
     * Creates an instance of OsPatchingStatus class.
     */
    public OsPatchingStatus() {
    }

    /**
     * Get the patchStatus property: The os patching status.
     * 
     * @return the patchStatus value.
     */
    public PatchStatus patchStatus() {
        return this.patchStatus;
    }

    /**
     * Set the patchStatus property: The os patching status.
     * 
     * @param patchStatus the patchStatus value to set.
     * @return the OsPatchingStatus object itself.
     */
    public OsPatchingStatus withPatchStatus(PatchStatus patchStatus) {
        this.patchStatus = patchStatus;
        return this;
    }

    /**
     * Get the latestPatchTime property: Time of the latest os patching.
     * 
     * @return the latestPatchTime value.
     */
    public String latestPatchTime() {
        return this.latestPatchTime;
    }

    /**
     * Set the latestPatchTime property: Time of the latest os patching.
     * 
     * @param latestPatchTime the latestPatchTime value to set.
     * @return the OsPatchingStatus object itself.
     */
    public OsPatchingStatus withLatestPatchTime(String latestPatchTime) {
        this.latestPatchTime = latestPatchTime;
        return this;
    }

    /**
     * Get the rebootPending property: Specifies whether this compute instance is pending for reboot to finish os
     * patching.
     * 
     * @return the rebootPending value.
     */
    public Boolean rebootPending() {
        return this.rebootPending;
    }

    /**
     * Set the rebootPending property: Specifies whether this compute instance is pending for reboot to finish os
     * patching.
     * 
     * @param rebootPending the rebootPending value to set.
     * @return the OsPatchingStatus object itself.
     */
    public OsPatchingStatus withRebootPending(Boolean rebootPending) {
        this.rebootPending = rebootPending;
        return this;
    }

    /**
     * Get the scheduledRebootTime property: Time of scheduled reboot.
     * 
     * @return the scheduledRebootTime value.
     */
    public String scheduledRebootTime() {
        return this.scheduledRebootTime;
    }

    /**
     * Set the scheduledRebootTime property: Time of scheduled reboot.
     * 
     * @param scheduledRebootTime the scheduledRebootTime value to set.
     * @return the OsPatchingStatus object itself.
     */
    public OsPatchingStatus withScheduledRebootTime(String scheduledRebootTime) {
        this.scheduledRebootTime = scheduledRebootTime;
        return this;
    }

    /**
     * Get the osPatchingErrors property: Collection of errors encountered when doing os patching.
     * 
     * @return the osPatchingErrors value.
     */
    public List<ManagementError> osPatchingErrors() {
        return this.osPatchingErrors;
    }

    /**
     * Set the osPatchingErrors property: Collection of errors encountered when doing os patching.
     * 
     * @param osPatchingErrors the osPatchingErrors value to set.
     * @return the OsPatchingStatus object itself.
     */
    public OsPatchingStatus withOsPatchingErrors(List<ManagementError> osPatchingErrors) {
        this.osPatchingErrors = osPatchingErrors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
