// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model configuration options.
 */
@Fluent
public final class GroupModelConfiguration implements JsonSerializable<GroupModelConfiguration> {
    /*
     * The URI path to the model.
     */
    private String modelId;

    /**
     * Creates an instance of GroupModelConfiguration class.
     */
    public GroupModelConfiguration() {
    }

    /**
     * Get the modelId property: The URI path to the model.
     * 
     * @return the modelId value.
     */
    public String modelId() {
        return this.modelId;
    }

    /**
     * Set the modelId property: The URI path to the model.
     * 
     * @param modelId the modelId value to set.
     * @return the GroupModelConfiguration object itself.
     */
    public GroupModelConfiguration withModelId(String modelId) {
        this.modelId = modelId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("modelId", this.modelId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GroupModelConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GroupModelConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GroupModelConfiguration.
     */
    public static GroupModelConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GroupModelConfiguration deserializedGroupModelConfiguration = new GroupModelConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("modelId".equals(fieldName)) {
                    deserializedGroupModelConfiguration.modelId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGroupModelConfiguration;
        });
    }
}
