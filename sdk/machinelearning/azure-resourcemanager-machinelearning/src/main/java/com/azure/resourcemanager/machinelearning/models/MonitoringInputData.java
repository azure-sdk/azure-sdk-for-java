// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The MonitoringInputData model. */
@Fluent
public final class MonitoringInputData {
    /*
     * The data asset input to be leveraged by the monitoring job..
     */
    @JsonProperty(value = "asset")
    private Object asset;

    /*
     * [Required] The context of the data source.
     */
    @JsonProperty(value = "dataContext", required = true)
    private MonitoringInputDataContext dataContext;

    /*
     * The ARM resource ID of the component resource used to preprocess the data.
     */
    @JsonProperty(value = "preprocessingComponentId")
    private String preprocessingComponentId;

    /*
     * The target column in the given data asset to leverage.
     */
    @JsonProperty(value = "targetColumnName")
    private String targetColumnName;

    /** Creates an instance of MonitoringInputData class. */
    public MonitoringInputData() {
    }

    /**
     * Get the asset property: The data asset input to be leveraged by the monitoring job..
     *
     * @return the asset value.
     */
    public Object asset() {
        return this.asset;
    }

    /**
     * Set the asset property: The data asset input to be leveraged by the monitoring job..
     *
     * @param asset the asset value to set.
     * @return the MonitoringInputData object itself.
     */
    public MonitoringInputData withAsset(Object asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get the dataContext property: [Required] The context of the data source.
     *
     * @return the dataContext value.
     */
    public MonitoringInputDataContext dataContext() {
        return this.dataContext;
    }

    /**
     * Set the dataContext property: [Required] The context of the data source.
     *
     * @param dataContext the dataContext value to set.
     * @return the MonitoringInputData object itself.
     */
    public MonitoringInputData withDataContext(MonitoringInputDataContext dataContext) {
        this.dataContext = dataContext;
        return this;
    }

    /**
     * Get the preprocessingComponentId property: The ARM resource ID of the component resource used to preprocess the
     * data.
     *
     * @return the preprocessingComponentId value.
     */
    public String preprocessingComponentId() {
        return this.preprocessingComponentId;
    }

    /**
     * Set the preprocessingComponentId property: The ARM resource ID of the component resource used to preprocess the
     * data.
     *
     * @param preprocessingComponentId the preprocessingComponentId value to set.
     * @return the MonitoringInputData object itself.
     */
    public MonitoringInputData withPreprocessingComponentId(String preprocessingComponentId) {
        this.preprocessingComponentId = preprocessingComponentId;
        return this;
    }

    /**
     * Get the targetColumnName property: The target column in the given data asset to leverage.
     *
     * @return the targetColumnName value.
     */
    public String targetColumnName() {
        return this.targetColumnName;
    }

    /**
     * Set the targetColumnName property: The target column in the given data asset to leverage.
     *
     * @param targetColumnName the targetColumnName value to set.
     * @return the MonitoringInputData object itself.
     */
    public MonitoringInputData withTargetColumnName(String targetColumnName) {
        this.targetColumnName = targetColumnName;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataContext() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property dataContext in model MonitoringInputData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MonitoringInputData.class);
}
