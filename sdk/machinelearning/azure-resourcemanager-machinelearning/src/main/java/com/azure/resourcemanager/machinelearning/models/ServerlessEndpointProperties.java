// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The ServerlessEndpointProperties model.
 */
@Fluent
public final class ServerlessEndpointProperties {
    /*
     * Specifies the authentication mode for the Serverless endpoint.
     */
    @JsonProperty(value = "authMode")
    private ServerlessInferenceEndpointAuthMode authMode;

    /*
     * Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
     * will be allocated capacity from the specified capacity reservation group.
     */
    @JsonProperty(value = "capacityReservation")
    private ServerlessEndpointCapacityReservation capacityReservation;

    /*
     * The inference uri to target when making requests against the serverless endpoint
     */
    @JsonProperty(value = "inferenceEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private ServerlessInferenceEndpoint inferenceEndpoint;

    /*
     * The MarketplaceSubscription ARM ID associated to this ServerlessEndpoint.
     */
    @JsonProperty(value = "marketplaceSubscriptionId", access = JsonProperty.Access.WRITE_ONLY)
    private String marketplaceSubscriptionId;

    /*
     * The model settings (model id) for the model being serviced on the ServerlessEndpoint.
     */
    @JsonProperty(value = "modelSettings")
    private ModelSettings modelSettings;

    /*
     * The publisher-defined Serverless Offer to provision the endpoint with.
     */
    @JsonProperty(value = "offer")
    private ServerlessOffer offer;

    /*
     * Provisioning state for the endpoint.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private EndpointProvisioningState provisioningState;

    /*
     * State of the Serverless Endpoint.
     */
    @JsonProperty(value = "endpointState", access = JsonProperty.Access.WRITE_ONLY)
    private ServerlessEndpointState endpointState;

    /**
     * Creates an instance of ServerlessEndpointProperties class.
     */
    public ServerlessEndpointProperties() {
    }

    /**
     * Get the authMode property: Specifies the authentication mode for the Serverless endpoint.
     * 
     * @return the authMode value.
     */
    public ServerlessInferenceEndpointAuthMode authMode() {
        return this.authMode;
    }

    /**
     * Set the authMode property: Specifies the authentication mode for the Serverless endpoint.
     * 
     * @param authMode the authMode value to set.
     * @return the ServerlessEndpointProperties object itself.
     */
    public ServerlessEndpointProperties withAuthMode(ServerlessInferenceEndpointAuthMode authMode) {
        this.authMode = authMode;
        return this;
    }

    /**
     * Get the capacityReservation property: Optional capacity reservation information for the endpoint. When specified,
     * the Serverless Endpoint
     * will be allocated capacity from the specified capacity reservation group.
     * 
     * @return the capacityReservation value.
     */
    public ServerlessEndpointCapacityReservation capacityReservation() {
        return this.capacityReservation;
    }

    /**
     * Set the capacityReservation property: Optional capacity reservation information for the endpoint. When specified,
     * the Serverless Endpoint
     * will be allocated capacity from the specified capacity reservation group.
     * 
     * @param capacityReservation the capacityReservation value to set.
     * @return the ServerlessEndpointProperties object itself.
     */
    public ServerlessEndpointProperties
        withCapacityReservation(ServerlessEndpointCapacityReservation capacityReservation) {
        this.capacityReservation = capacityReservation;
        return this;
    }

    /**
     * Get the inferenceEndpoint property: The inference uri to target when making requests against the serverless
     * endpoint.
     * 
     * @return the inferenceEndpoint value.
     */
    public ServerlessInferenceEndpoint inferenceEndpoint() {
        return this.inferenceEndpoint;
    }

    /**
     * Get the marketplaceSubscriptionId property: The MarketplaceSubscription ARM ID associated to this
     * ServerlessEndpoint.
     * 
     * @return the marketplaceSubscriptionId value.
     */
    public String marketplaceSubscriptionId() {
        return this.marketplaceSubscriptionId;
    }

    /**
     * Get the modelSettings property: The model settings (model id) for the model being serviced on the
     * ServerlessEndpoint.
     * 
     * @return the modelSettings value.
     */
    public ModelSettings modelSettings() {
        return this.modelSettings;
    }

    /**
     * Set the modelSettings property: The model settings (model id) for the model being serviced on the
     * ServerlessEndpoint.
     * 
     * @param modelSettings the modelSettings value to set.
     * @return the ServerlessEndpointProperties object itself.
     */
    public ServerlessEndpointProperties withModelSettings(ModelSettings modelSettings) {
        this.modelSettings = modelSettings;
        return this;
    }

    /**
     * Get the offer property: The publisher-defined Serverless Offer to provision the endpoint with.
     * 
     * @return the offer value.
     */
    public ServerlessOffer offer() {
        return this.offer;
    }

    /**
     * Set the offer property: The publisher-defined Serverless Offer to provision the endpoint with.
     * 
     * @param offer the offer value to set.
     * @return the ServerlessEndpointProperties object itself.
     */
    public ServerlessEndpointProperties withOffer(ServerlessOffer offer) {
        this.offer = offer;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state for the endpoint.
     * 
     * @return the provisioningState value.
     */
    public EndpointProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the endpointState property: State of the Serverless Endpoint.
     * 
     * @return the endpointState value.
     */
    public ServerlessEndpointState endpointState() {
        return this.endpointState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capacityReservation() != null) {
            capacityReservation().validate();
        }
        if (inferenceEndpoint() != null) {
            inferenceEndpoint().validate();
        }
        if (modelSettings() != null) {
            modelSettings().validate();
        }
        if (offer() != null) {
            offer().validate();
        }
    }
}
