// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Index resource.
 */
@Fluent
public final class IndexInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private IndexContainerProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of IndexInner class.
     */
    public IndexInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private IndexContainerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the indexVersion property: Default workspace blob storage Uri. Should work across storage types and auth
     * scenarios.
     * 
     * @return the indexVersion value.
     */
    public String indexVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().indexVersion();
    }

    /**
     * Set the indexVersion property: Default workspace blob storage Uri. Should work across storage types and auth
     * scenarios.
     * 
     * @param indexVersion the indexVersion value to set.
     * @return the IndexInner object itself.
     */
    public IndexInner withIndexVersion(String indexVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexContainerProperties();
        }
        this.innerProperties().withIndexVersion(indexVersion);
        return this;
    }

    /**
     * Get the indexVersionDefinition property: Placeholder for extras.
     * 
     * @return the indexVersionDefinition value.
     */
    public IndexVersionProperties indexVersionDefinition() {
        return this.innerProperties() == null ? null : this.innerProperties().indexVersionDefinition();
    }

    /**
     * Set the indexVersionDefinition property: Placeholder for extras.
     * 
     * @param indexVersionDefinition the indexVersionDefinition value to set.
     * @return the IndexInner object itself.
     */
    public IndexInner withIndexVersionDefinition(IndexVersionProperties indexVersionDefinition) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexContainerProperties();
        }
        this.innerProperties().withIndexVersionDefinition(indexVersionDefinition);
        return this;
    }

    /**
     * Get the isArchived property: Is the asset archived? For types where Stage is defined, when Stage is provided it
     * will be used to populate IsArchived.
     * 
     * @return the isArchived value.
     */
    public Boolean isArchived() {
        return this.innerProperties() == null ? null : this.innerProperties().isArchived();
    }

    /**
     * Set the isArchived property: Is the asset archived? For types where Stage is defined, when Stage is provided it
     * will be used to populate IsArchived.
     * 
     * @param isArchived the isArchived value to set.
     * @return the IndexInner object itself.
     */
    public IndexInner withIsArchived(Boolean isArchived) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexContainerProperties();
        }
        this.innerProperties().withIsArchived(isArchived);
        return this;
    }

    /**
     * Get the isAnonymous property: If the name version are system generated (anonymous registration). For types where
     * Stage is defined, when Stage is provided it will be used to populate IsAnonymous.
     * 
     * @return the isAnonymous value.
     */
    public Boolean isAnonymous() {
        return this.innerProperties() == null ? null : this.innerProperties().isAnonymous();
    }

    /**
     * Set the isAnonymous property: If the name version are system generated (anonymous registration). For types where
     * Stage is defined, when Stage is provided it will be used to populate IsAnonymous.
     * 
     * @param isAnonymous the isAnonymous value to set.
     * @return the IndexInner object itself.
     */
    public IndexInner withIsAnonymous(Boolean isAnonymous) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexContainerProperties();
        }
        this.innerProperties().withIsAnonymous(isAnonymous);
        return this;
    }

    /**
     * Get the tags property: Tag dictionary. Tags can be added, removed, and updated.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.innerProperties() == null ? null : this.innerProperties().tags();
    }

    /**
     * Set the tags property: Tag dictionary. Tags can be added, removed, and updated.
     * 
     * @param tags the tags value to set.
     * @return the IndexInner object itself.
     */
    public IndexInner withTags(Map<String, String> tags) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexContainerProperties();
        }
        this.innerProperties().withTags(tags);
        return this;
    }

    /**
     * Get the properties property: The asset property dictionary.
     * 
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.innerProperties() == null ? null : this.innerProperties().properties();
    }

    /**
     * Set the properties property: The asset property dictionary.
     * 
     * @param properties the properties value to set.
     * @return the IndexInner object itself.
     */
    public IndexInner withProperties(Map<String, String> properties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IndexContainerProperties();
        }
        this.innerProperties().withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
