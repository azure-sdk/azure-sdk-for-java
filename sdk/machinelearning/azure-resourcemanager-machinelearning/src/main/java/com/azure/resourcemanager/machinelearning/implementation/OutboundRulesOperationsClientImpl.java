// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.machinelearning.fluent.OutboundRulesOperationsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.ManagedNetworkSettingsBasicResourceInner;
import com.azure.resourcemanager.machinelearning.fluent.models.OutboundRuleBasicResourceInner;
import com.azure.resourcemanager.machinelearning.models.OutboundRuleListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in OutboundRulesOperationsClient.
 */
public final class OutboundRulesOperationsClientImpl implements OutboundRulesOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final OutboundRulesOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureMachineLearningWorkspacesImpl client;

    /**
     * Initializes an instance of OutboundRulesOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    OutboundRulesOperationsClientImpl(AzureMachineLearningWorkspacesImpl client) {
        this.service = RestProxy.create(OutboundRulesOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureMachineLearningWorkspacesOutboundRulesOperations to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureMachineLearning")
    public interface OutboundRulesOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks/{managedNetworkName}/batchOutboundRules")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> post(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("managedNetworkName") String managedNetworkName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ManagedNetworkSettingsBasicResourceInner body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OutboundRuleListResult>> postNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * The POST API for updating the outbound rules of the managed network associated with the machine learning
     * workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of outbound rules for the managed network of a machine learning workspace along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OutboundRuleBasicResourceInner>> postSinglePageAsync(String resourceGroupName,
        String workspaceName, String managedNetworkName, ManagedNetworkSettingsBasicResourceInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> {
            Mono<Response<Flux<ByteBuffer>>> mono
                = service
                    .post(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, workspaceName,
                        managedNetworkName, this.client.getApiVersion(), body, accept, context)
                    .cache();
            return Mono.zip(mono,
                this.client
                    .<OutboundRuleListResult, OutboundRuleListResult>getLroResult(mono, this.client.getHttpPipeline(),
                        OutboundRuleListResult.class, OutboundRuleListResult.class, this.client.getContext())
                    .last()
                    .flatMap(this.client::getLroFinalResultOrError));
        })
            .<PagedResponse<OutboundRuleBasicResourceInner>>map(
                res -> new PagedResponseBase<>(res.getT1().getRequest(), res.getT1().getStatusCode(),
                    res.getT1().getHeaders(), res.getT2().value(), res.getT2().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The POST API for updating the outbound rules of the managed network associated with the machine learning
     * workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of outbound rules for the managed network of a machine learning workspace along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OutboundRuleBasicResourceInner>> postSinglePageAsync(String resourceGroupName,
        String workspaceName, String managedNetworkName, ManagedNetworkSettingsBasicResourceInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = service
                .post(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, workspaceName,
                    managedNetworkName, this.client.getApiVersion(), body, accept, context)
                .cache();
        return Mono
            .zip(mono,
                this.client
                    .<OutboundRuleListResult, OutboundRuleListResult>getLroResult(mono, this.client.getHttpPipeline(),
                        OutboundRuleListResult.class, OutboundRuleListResult.class, context)
                    .last()
                    .flatMap(this.client::getLroFinalResultOrError))
            .map(res -> new PagedResponseBase<>(res.getT1().getRequest(), res.getT1().getStatusCode(),
                res.getT1().getHeaders(), res.getT2().value(), res.getT2().nextLink(), null));
    }

    /**
     * The POST API for updating the outbound rules of the managed network associated with the machine learning
     * workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of outbound rules for the managed network of a machine learning workspace as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OutboundRuleBasicResourceInner> postAsync(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsBasicResourceInner body) {
        return new PagedFlux<>(() -> postSinglePageAsync(resourceGroupName, workspaceName, managedNetworkName, body),
            nextLink -> postNextSinglePageAsync(nextLink));
    }

    /**
     * The POST API for updating the outbound rules of the managed network associated with the machine learning
     * workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of outbound rules for the managed network of a machine learning workspace as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OutboundRuleBasicResourceInner> postAsync(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsBasicResourceInner body, Context context) {
        return new PagedFlux<>(
            () -> postSinglePageAsync(resourceGroupName, workspaceName, managedNetworkName, body, context),
            nextLink -> postNextSinglePageAsync(nextLink, context));
    }

    /**
     * The POST API for updating the outbound rules of the managed network associated with the machine learning
     * workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of outbound rules for the managed network of a machine learning workspace as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OutboundRuleBasicResourceInner> post(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsBasicResourceInner body) {
        return new PagedIterable<>(postAsync(resourceGroupName, workspaceName, managedNetworkName, body));
    }

    /**
     * The POST API for updating the outbound rules of the managed network associated with the machine learning
     * workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default' is supported.
     * @param body The Managed Network Settings object of the workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of outbound rules for the managed network of a machine learning workspace as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OutboundRuleBasicResourceInner> post(String resourceGroupName, String workspaceName,
        String managedNetworkName, ManagedNetworkSettingsBasicResourceInner body, Context context) {
        return new PagedIterable<>(postAsync(resourceGroupName, workspaceName, managedNetworkName, body, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of outbound rules for the managed network of a machine learning workspace along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OutboundRuleBasicResourceInner>> postNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.postNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<OutboundRuleBasicResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of outbound rules for the managed network of a machine learning workspace along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OutboundRuleBasicResourceInner>> postNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.postNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
