// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.Map;

/**
 * The PredictionDriftMonitoringSignal model.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "signalType",
    defaultImpl = PredictionDriftMonitoringSignal.class,
    visible = true)
@JsonTypeName("PredictionDrift")
@Fluent
public final class PredictionDriftMonitoringSignal extends MonitoringSignalBase {
    /*
     * [Required] Specifies the type of signal to monitor.
     */
    @JsonTypeId
    @JsonProperty(value = "signalType", required = true)
    private MonitoringSignalType signalType = MonitoringSignalType.PREDICTION_DRIFT;

    /*
     * A dictionary that maps feature names to their respective data types.
     */
    @JsonProperty(value = "featureDataTypeOverride")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, MonitoringFeatureDataType> featureDataTypeOverride;

    /*
     * [Required] A list of metrics to calculate and their associated thresholds.
     */
    @JsonProperty(value = "metricThresholds", required = true)
    private List<PredictionDriftMetricThresholdBase> metricThresholds;

    /*
     * [Required] The data which drift will be calculated for.
     */
    @JsonProperty(value = "productionData", required = true)
    private MonitoringInputDataBase productionData;

    /*
     * [Required] The data to calculate drift against.
     */
    @JsonProperty(value = "referenceData", required = true)
    private MonitoringInputDataBase referenceData;

    /**
     * Creates an instance of PredictionDriftMonitoringSignal class.
     */
    public PredictionDriftMonitoringSignal() {
    }

    /**
     * Get the signalType property: [Required] Specifies the type of signal to monitor.
     * 
     * @return the signalType value.
     */
    @Override
    public MonitoringSignalType signalType() {
        return this.signalType;
    }

    /**
     * Get the featureDataTypeOverride property: A dictionary that maps feature names to their respective data types.
     * 
     * @return the featureDataTypeOverride value.
     */
    public Map<String, MonitoringFeatureDataType> featureDataTypeOverride() {
        return this.featureDataTypeOverride;
    }

    /**
     * Set the featureDataTypeOverride property: A dictionary that maps feature names to their respective data types.
     * 
     * @param featureDataTypeOverride the featureDataTypeOverride value to set.
     * @return the PredictionDriftMonitoringSignal object itself.
     */
    public PredictionDriftMonitoringSignal
        withFeatureDataTypeOverride(Map<String, MonitoringFeatureDataType> featureDataTypeOverride) {
        this.featureDataTypeOverride = featureDataTypeOverride;
        return this;
    }

    /**
     * Get the metricThresholds property: [Required] A list of metrics to calculate and their associated thresholds.
     * 
     * @return the metricThresholds value.
     */
    public List<PredictionDriftMetricThresholdBase> metricThresholds() {
        return this.metricThresholds;
    }

    /**
     * Set the metricThresholds property: [Required] A list of metrics to calculate and their associated thresholds.
     * 
     * @param metricThresholds the metricThresholds value to set.
     * @return the PredictionDriftMonitoringSignal object itself.
     */
    public PredictionDriftMonitoringSignal
        withMetricThresholds(List<PredictionDriftMetricThresholdBase> metricThresholds) {
        this.metricThresholds = metricThresholds;
        return this;
    }

    /**
     * Get the productionData property: [Required] The data which drift will be calculated for.
     * 
     * @return the productionData value.
     */
    public MonitoringInputDataBase productionData() {
        return this.productionData;
    }

    /**
     * Set the productionData property: [Required] The data which drift will be calculated for.
     * 
     * @param productionData the productionData value to set.
     * @return the PredictionDriftMonitoringSignal object itself.
     */
    public PredictionDriftMonitoringSignal withProductionData(MonitoringInputDataBase productionData) {
        this.productionData = productionData;
        return this;
    }

    /**
     * Get the referenceData property: [Required] The data to calculate drift against.
     * 
     * @return the referenceData value.
     */
    public MonitoringInputDataBase referenceData() {
        return this.referenceData;
    }

    /**
     * Set the referenceData property: [Required] The data to calculate drift against.
     * 
     * @param referenceData the referenceData value to set.
     * @return the PredictionDriftMonitoringSignal object itself.
     */
    public PredictionDriftMonitoringSignal withReferenceData(MonitoringInputDataBase referenceData) {
        this.referenceData = referenceData;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PredictionDriftMonitoringSignal withNotificationTypes(List<MonitoringNotificationType> notificationTypes) {
        super.withNotificationTypes(notificationTypes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PredictionDriftMonitoringSignal withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (metricThresholds() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property metricThresholds in model PredictionDriftMonitoringSignal"));
        } else {
            metricThresholds().forEach(e -> e.validate());
        }
        if (productionData() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property productionData in model PredictionDriftMonitoringSignal"));
        } else {
            productionData().validate();
        }
        if (referenceData() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property referenceData in model PredictionDriftMonitoringSignal"));
        } else {
            referenceData().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PredictionDriftMonitoringSignal.class);
}
