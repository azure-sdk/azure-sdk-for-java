// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.Map;

/**
 * The FeatureAttributionDriftMonitoringSignal model.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "signalType")
@JsonTypeName("FeatureAttributionDrift")
@Fluent
public final class FeatureAttributionDriftMonitoringSignal extends MonitoringSignalBase {
    /*
     * A dictionary that maps feature names to their respective data types.
     */
    @JsonProperty(value = "featureDataTypeOverride")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, MonitoringFeatureDataType> featureDataTypeOverride;

    /*
     * [Required] The settings for computing feature importance.
     */
    @JsonProperty(value = "featureImportanceSettings", required = true)
    private FeatureImportanceSettings featureImportanceSettings;

    /*
     * [Required] A list of metrics to calculate and their associated thresholds.
     */
    @JsonProperty(value = "metricThreshold", required = true)
    private FeatureAttributionMetricThreshold metricThreshold;

    /*
     * [Required] The data which drift will be calculated for.
     */
    @JsonProperty(value = "productionData", required = true)
    private List<MonitoringInputDataBase> productionData;

    /*
     * [Required] The data to calculate drift against.
     */
    @JsonProperty(value = "referenceData", required = true)
    private MonitoringInputDataBase referenceData;

    /**
     * Creates an instance of FeatureAttributionDriftMonitoringSignal class.
     */
    public FeatureAttributionDriftMonitoringSignal() {
    }

    /**
     * Get the featureDataTypeOverride property: A dictionary that maps feature names to their respective data types.
     * 
     * @return the featureDataTypeOverride value.
     */
    public Map<String, MonitoringFeatureDataType> featureDataTypeOverride() {
        return this.featureDataTypeOverride;
    }

    /**
     * Set the featureDataTypeOverride property: A dictionary that maps feature names to their respective data types.
     * 
     * @param featureDataTypeOverride the featureDataTypeOverride value to set.
     * @return the FeatureAttributionDriftMonitoringSignal object itself.
     */
    public FeatureAttributionDriftMonitoringSignal
        withFeatureDataTypeOverride(Map<String, MonitoringFeatureDataType> featureDataTypeOverride) {
        this.featureDataTypeOverride = featureDataTypeOverride;
        return this;
    }

    /**
     * Get the featureImportanceSettings property: [Required] The settings for computing feature importance.
     * 
     * @return the featureImportanceSettings value.
     */
    public FeatureImportanceSettings featureImportanceSettings() {
        return this.featureImportanceSettings;
    }

    /**
     * Set the featureImportanceSettings property: [Required] The settings for computing feature importance.
     * 
     * @param featureImportanceSettings the featureImportanceSettings value to set.
     * @return the FeatureAttributionDriftMonitoringSignal object itself.
     */
    public FeatureAttributionDriftMonitoringSignal
        withFeatureImportanceSettings(FeatureImportanceSettings featureImportanceSettings) {
        this.featureImportanceSettings = featureImportanceSettings;
        return this;
    }

    /**
     * Get the metricThreshold property: [Required] A list of metrics to calculate and their associated thresholds.
     * 
     * @return the metricThreshold value.
     */
    public FeatureAttributionMetricThreshold metricThreshold() {
        return this.metricThreshold;
    }

    /**
     * Set the metricThreshold property: [Required] A list of metrics to calculate and their associated thresholds.
     * 
     * @param metricThreshold the metricThreshold value to set.
     * @return the FeatureAttributionDriftMonitoringSignal object itself.
     */
    public FeatureAttributionDriftMonitoringSignal
        withMetricThreshold(FeatureAttributionMetricThreshold metricThreshold) {
        this.metricThreshold = metricThreshold;
        return this;
    }

    /**
     * Get the productionData property: [Required] The data which drift will be calculated for.
     * 
     * @return the productionData value.
     */
    public List<MonitoringInputDataBase> productionData() {
        return this.productionData;
    }

    /**
     * Set the productionData property: [Required] The data which drift will be calculated for.
     * 
     * @param productionData the productionData value to set.
     * @return the FeatureAttributionDriftMonitoringSignal object itself.
     */
    public FeatureAttributionDriftMonitoringSignal withProductionData(List<MonitoringInputDataBase> productionData) {
        this.productionData = productionData;
        return this;
    }

    /**
     * Get the referenceData property: [Required] The data to calculate drift against.
     * 
     * @return the referenceData value.
     */
    public MonitoringInputDataBase referenceData() {
        return this.referenceData;
    }

    /**
     * Set the referenceData property: [Required] The data to calculate drift against.
     * 
     * @param referenceData the referenceData value to set.
     * @return the FeatureAttributionDriftMonitoringSignal object itself.
     */
    public FeatureAttributionDriftMonitoringSignal withReferenceData(MonitoringInputDataBase referenceData) {
        this.referenceData = referenceData;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeatureAttributionDriftMonitoringSignal
        withNotificationTypes(List<MonitoringNotificationType> notificationTypes) {
        super.withNotificationTypes(notificationTypes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeatureAttributionDriftMonitoringSignal withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (featureImportanceSettings() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property featureImportanceSettings in model FeatureAttributionDriftMonitoringSignal"));
        } else {
            featureImportanceSettings().validate();
        }
        if (metricThreshold() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property metricThreshold in model FeatureAttributionDriftMonitoringSignal"));
        } else {
            metricThreshold().validate();
        }
        if (productionData() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property productionData in model FeatureAttributionDriftMonitoringSignal"));
        } else {
            productionData().forEach(e -> e.validate());
        }
        if (referenceData() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property referenceData in model FeatureAttributionDriftMonitoringSignal"));
        } else {
            referenceData().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FeatureAttributionDriftMonitoringSignal.class);
}
