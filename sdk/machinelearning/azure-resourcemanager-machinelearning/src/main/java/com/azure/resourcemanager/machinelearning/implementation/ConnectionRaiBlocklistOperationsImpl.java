// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.ConnectionRaiBlocklistOperationsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.RaiBlocklistPropertiesBasicResourceInner;
import com.azure.resourcemanager.machinelearning.models.ConnectionRaiBlocklistOperations;
import com.azure.resourcemanager.machinelearning.models.RaiBlocklistPropertiesBasicResource;

public final class ConnectionRaiBlocklistOperationsImpl implements ConnectionRaiBlocklistOperations {
    private static final ClientLogger LOGGER = new ClientLogger(ConnectionRaiBlocklistOperationsImpl.class);

    private final ConnectionRaiBlocklistOperationsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public ConnectionRaiBlocklistOperationsImpl(ConnectionRaiBlocklistOperationsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String workspaceName, String connectionName, String raiBlocklistName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, connectionName, raiBlocklistName);
    }

    public void delete(String resourceGroupName, String workspaceName, String connectionName, String raiBlocklistName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceName, connectionName, raiBlocklistName, context);
    }

    public Response<RaiBlocklistPropertiesBasicResource> getWithResponse(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, Context context) {
        Response<RaiBlocklistPropertiesBasicResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, workspaceName, connectionName, raiBlocklistName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RaiBlocklistPropertiesBasicResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RaiBlocklistPropertiesBasicResource get(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName) {
        RaiBlocklistPropertiesBasicResourceInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, connectionName, raiBlocklistName);
        if (inner != null) {
            return new RaiBlocklistPropertiesBasicResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RaiBlocklistPropertiesBasicResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, connectionName, raiBlocklistName, Context.NONE)
            .getValue();
    }

    public Response<RaiBlocklistPropertiesBasicResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, connectionName, raiBlocklistName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, connectionName, raiBlocklistName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, connectionName, raiBlocklistName, context);
    }

    private ConnectionRaiBlocklistOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public RaiBlocklistPropertiesBasicResourceImpl define(String name) {
        return new RaiBlocklistPropertiesBasicResourceImpl(name, this.manager());
    }
}
