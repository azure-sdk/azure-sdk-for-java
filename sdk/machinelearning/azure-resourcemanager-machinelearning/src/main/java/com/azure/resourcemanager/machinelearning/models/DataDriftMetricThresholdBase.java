// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** The DataDriftMetricThresholdBase model. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "dataType",
    defaultImpl = DataDriftMetricThresholdBase.class)
@JsonTypeName("DataDriftMetricThresholdBase")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Categorical", value = CategoricalDataDriftMetricThreshold.class),
    @JsonSubTypes.Type(name = "Numerical", value = NumericalDataDriftMetricThreshold.class)
})
@Fluent
public class DataDriftMetricThresholdBase {
    /*
     * The threshold value. If null, a default value will be set depending on the selected metric.
     */
    @JsonProperty(value = "threshold")
    private MonitoringThreshold threshold;

    /** Creates an instance of DataDriftMetricThresholdBase class. */
    public DataDriftMetricThresholdBase() {
    }

    /**
     * Get the threshold property: The threshold value. If null, a default value will be set depending on the selected
     * metric.
     *
     * @return the threshold value.
     */
    public MonitoringThreshold threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: The threshold value. If null, a default value will be set depending on the selected
     * metric.
     *
     * @param threshold the threshold value to set.
     * @return the DataDriftMetricThresholdBase object itself.
     */
    public DataDriftMetricThresholdBase withThreshold(MonitoringThreshold threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (threshold() != null) {
            threshold().validate();
        }
    }
}
