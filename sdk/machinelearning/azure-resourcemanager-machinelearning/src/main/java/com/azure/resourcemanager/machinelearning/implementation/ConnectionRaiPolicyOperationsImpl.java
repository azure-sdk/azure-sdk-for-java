// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.ConnectionRaiPolicyOperationsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.RaiPolicyPropertiesBasicResourceInner;
import com.azure.resourcemanager.machinelearning.models.ConnectionRaiPolicyOperations;
import com.azure.resourcemanager.machinelearning.models.RaiPolicyPropertiesBasicResource;

public final class ConnectionRaiPolicyOperationsImpl implements ConnectionRaiPolicyOperations {
    private static final ClientLogger LOGGER = new ClientLogger(ConnectionRaiPolicyOperationsImpl.class);

    private final ConnectionRaiPolicyOperationsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public ConnectionRaiPolicyOperationsImpl(ConnectionRaiPolicyOperationsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String workspaceName, String connectionName, String raiPolicyName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, connectionName, raiPolicyName);
    }

    public void delete(String resourceGroupName, String workspaceName, String connectionName, String raiPolicyName,
        String proxyApiVersion, Context context) {
        this.serviceClient()
            .delete(resourceGroupName, workspaceName, connectionName, raiPolicyName, proxyApiVersion, context);
    }

    public Response<RaiPolicyPropertiesBasicResource> getWithResponse(String resourceGroupName, String workspaceName,
        String connectionName, String raiPolicyName, Context context) {
        Response<RaiPolicyPropertiesBasicResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, workspaceName, connectionName, raiPolicyName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RaiPolicyPropertiesBasicResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RaiPolicyPropertiesBasicResource get(String resourceGroupName, String workspaceName, String connectionName,
        String raiPolicyName) {
        RaiPolicyPropertiesBasicResourceInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, connectionName, raiPolicyName);
        if (inner != null) {
            return new RaiPolicyPropertiesBasicResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RaiPolicyPropertiesBasicResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "raiPolicies");
        if (raiPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, connectionName, raiPolicyName, Context.NONE)
            .getValue();
    }

    public Response<RaiPolicyPropertiesBasicResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "raiPolicies");
        if (raiPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, connectionName, raiPolicyName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "raiPolicies");
        if (raiPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiPolicies'.", id)));
        }
        String localProxyApiVersion = null;
        this.delete(resourceGroupName, workspaceName, connectionName, raiPolicyName, localProxyApiVersion,
            Context.NONE);
    }

    public void deleteByIdWithResponse(String id, String proxyApiVersion, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String raiPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "raiPolicies");
        if (raiPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiPolicies'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, connectionName, raiPolicyName, proxyApiVersion, context);
    }

    private ConnectionRaiPolicyOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public RaiPolicyPropertiesBasicResourceImpl define(String name) {
        return new RaiPolicyPropertiesBasicResourceImpl(name, this.manager());
    }
}
