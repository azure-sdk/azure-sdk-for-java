// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Intellectual Property details for a resource. */
@Fluent
public final class IntellectualProperty {
    /*
     * Protection level of the Intellectual Property.
     */
    @JsonProperty(value = "protectionLevel")
    private ProtectionLevel protectionLevel;

    /*
     * [Required] Publisher of the Intellectual Property. Must be the same as Registry publisher name.
     */
    @JsonProperty(value = "publisher", required = true)
    private String publisher;

    /** Creates an instance of IntellectualProperty class. */
    public IntellectualProperty() {
    }

    /**
     * Get the protectionLevel property: Protection level of the Intellectual Property.
     *
     * @return the protectionLevel value.
     */
    public ProtectionLevel protectionLevel() {
        return this.protectionLevel;
    }

    /**
     * Set the protectionLevel property: Protection level of the Intellectual Property.
     *
     * @param protectionLevel the protectionLevel value to set.
     * @return the IntellectualProperty object itself.
     */
    public IntellectualProperty withProtectionLevel(ProtectionLevel protectionLevel) {
        this.protectionLevel = protectionLevel;
        return this;
    }

    /**
     * Get the publisher property: [Required] Publisher of the Intellectual Property. Must be the same as Registry
     * publisher name.
     *
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Set the publisher property: [Required] Publisher of the Intellectual Property. Must be the same as Registry
     * publisher name.
     *
     * @param publisher the publisher value to set.
     * @return the IntellectualProperty object itself.
     */
    public IntellectualProperty withPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publisher() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property publisher in model IntellectualProperty"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IntellectualProperty.class);
}
