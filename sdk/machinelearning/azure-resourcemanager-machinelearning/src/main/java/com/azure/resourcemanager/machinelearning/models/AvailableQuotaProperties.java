// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AvailableQuotaProperties model.
 */
@Fluent
public final class AvailableQuotaProperties implements JsonSerializable<AvailableQuotaProperties> {
    /*
     * The number of available quota
     */
    private Long total;

    /**
     * Creates an instance of AvailableQuotaProperties class.
     */
    public AvailableQuotaProperties() {
    }

    /**
     * Get the total property: The number of available quota.
     * 
     * @return the total value.
     */
    public Long total() {
        return this.total;
    }

    /**
     * Set the total property: The number of available quota.
     * 
     * @param total the total value to set.
     * @return the AvailableQuotaProperties object itself.
     */
    public AvailableQuotaProperties withTotal(Long total) {
        this.total = total;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("total", this.total);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailableQuotaProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailableQuotaProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvailableQuotaProperties.
     */
    public static AvailableQuotaProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailableQuotaProperties deserializedAvailableQuotaProperties = new AvailableQuotaProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("total".equals(fieldName)) {
                    deserializedAvailableQuotaProperties.total = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailableQuotaProperties;
        });
    }
}
