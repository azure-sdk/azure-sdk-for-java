// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The CreateMonitorAction model.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "actionType",
    defaultImpl = CreateMonitorAction.class,
    visible = true)
@JsonTypeName("CreateMonitor")
@Fluent
public final class CreateMonitorAction extends ScheduleActionBase {
    /*
     * [Required] Specifies the action type of the schedule
     */
    @JsonTypeId
    @JsonProperty(value = "actionType", required = true)
    private ScheduleActionType actionType = ScheduleActionType.CREATE_MONITOR;

    /*
     * [Required] Defines the monitor.
     */
    @JsonProperty(value = "monitorDefinition", required = true)
    private MonitorDefinition monitorDefinition;

    /**
     * Creates an instance of CreateMonitorAction class.
     */
    public CreateMonitorAction() {
    }

    /**
     * Get the actionType property: [Required] Specifies the action type of the schedule.
     * 
     * @return the actionType value.
     */
    @Override
    public ScheduleActionType actionType() {
        return this.actionType;
    }

    /**
     * Get the monitorDefinition property: [Required] Defines the monitor.
     * 
     * @return the monitorDefinition value.
     */
    public MonitorDefinition monitorDefinition() {
        return this.monitorDefinition;
    }

    /**
     * Set the monitorDefinition property: [Required] Defines the monitor.
     * 
     * @param monitorDefinition the monitorDefinition value to set.
     * @return the CreateMonitorAction object itself.
     */
    public CreateMonitorAction withMonitorDefinition(MonitorDefinition monitorDefinition) {
        this.monitorDefinition = monitorDefinition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (monitorDefinition() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property monitorDefinition in model CreateMonitorAction"));
        } else {
            monitorDefinition().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CreateMonitorAction.class);
}
