// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ActualCapacityInfo model.
 */
@Fluent
public final class ActualCapacityInfo implements JsonSerializable<ActualCapacityInfo> {
    /*
     * Gets or sets the total number of instances for the group.
     */
    private Integer allocated;

    /*
     * Gets or sets the number of instances which failed to successfully complete assignment.
     */
    private Integer assignmentFailed;

    /*
     * Gets or sets the number of instances which successfully completed assignment.
     */
    private Integer assignmentSuccess;

    /**
     * Creates an instance of ActualCapacityInfo class.
     */
    public ActualCapacityInfo() {
    }

    /**
     * Get the allocated property: Gets or sets the total number of instances for the group.
     * 
     * @return the allocated value.
     */
    public Integer allocated() {
        return this.allocated;
    }

    /**
     * Set the allocated property: Gets or sets the total number of instances for the group.
     * 
     * @param allocated the allocated value to set.
     * @return the ActualCapacityInfo object itself.
     */
    public ActualCapacityInfo withAllocated(Integer allocated) {
        this.allocated = allocated;
        return this;
    }

    /**
     * Get the assignmentFailed property: Gets or sets the number of instances which failed to successfully complete
     * assignment.
     * 
     * @return the assignmentFailed value.
     */
    public Integer assignmentFailed() {
        return this.assignmentFailed;
    }

    /**
     * Set the assignmentFailed property: Gets or sets the number of instances which failed to successfully complete
     * assignment.
     * 
     * @param assignmentFailed the assignmentFailed value to set.
     * @return the ActualCapacityInfo object itself.
     */
    public ActualCapacityInfo withAssignmentFailed(Integer assignmentFailed) {
        this.assignmentFailed = assignmentFailed;
        return this;
    }

    /**
     * Get the assignmentSuccess property: Gets or sets the number of instances which successfully completed assignment.
     * 
     * @return the assignmentSuccess value.
     */
    public Integer assignmentSuccess() {
        return this.assignmentSuccess;
    }

    /**
     * Set the assignmentSuccess property: Gets or sets the number of instances which successfully completed assignment.
     * 
     * @param assignmentSuccess the assignmentSuccess value to set.
     * @return the ActualCapacityInfo object itself.
     */
    public ActualCapacityInfo withAssignmentSuccess(Integer assignmentSuccess) {
        this.assignmentSuccess = assignmentSuccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("allocated", this.allocated);
        jsonWriter.writeNumberField("assignmentFailed", this.assignmentFailed);
        jsonWriter.writeNumberField("assignmentSuccess", this.assignmentSuccess);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActualCapacityInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActualCapacityInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActualCapacityInfo.
     */
    public static ActualCapacityInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActualCapacityInfo deserializedActualCapacityInfo = new ActualCapacityInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allocated".equals(fieldName)) {
                    deserializedActualCapacityInfo.allocated = reader.getNullable(JsonReader::getInt);
                } else if ("assignmentFailed".equals(fieldName)) {
                    deserializedActualCapacityInfo.assignmentFailed = reader.getNullable(JsonReader::getInt);
                } else if ("assignmentSuccess".equals(fieldName)) {
                    deserializedActualCapacityInfo.assignmentSuccess = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActualCapacityInfo;
        });
    }
}
