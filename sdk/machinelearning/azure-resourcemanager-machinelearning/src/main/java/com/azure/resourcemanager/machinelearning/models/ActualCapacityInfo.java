// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ActualCapacityInfo model.
 */
@Fluent
public final class ActualCapacityInfo implements JsonSerializable<ActualCapacityInfo> {
    /*
     * Gets or sets the number of instances (scale units) which have Failed provisioning state and have target group
     * payload.
     */
    private Integer failed;

    /*
     * Gets or sets the number of instances (scale units) which have Failed provisioning state but do not have target
     * group payload.
     */
    private Integer outdatedFailed;

    /*
     * Gets or sets the number of instances (scale units) which have Succeeded provisioning state but do not have target
     * group payload.
     */
    private Integer outdatedSucceeded;

    /*
     * Gets or sets the number of instances (scale units) which have Succeeded provisioning state and target group
     * payload.
     */
    private Integer succeeded;

    /*
     * Gets or sets the total number of instances (scale units) regardless of provisioning state or whether current
     * group payload version matches the target group payload.
     */
    private Integer total;

    /**
     * Creates an instance of ActualCapacityInfo class.
     */
    public ActualCapacityInfo() {
    }

    /**
     * Get the failed property: Gets or sets the number of instances (scale units) which have Failed provisioning state
     * and have target group payload.
     * 
     * @return the failed value.
     */
    public Integer failed() {
        return this.failed;
    }

    /**
     * Set the failed property: Gets or sets the number of instances (scale units) which have Failed provisioning state
     * and have target group payload.
     * 
     * @param failed the failed value to set.
     * @return the ActualCapacityInfo object itself.
     */
    public ActualCapacityInfo withFailed(Integer failed) {
        this.failed = failed;
        return this;
    }

    /**
     * Get the outdatedFailed property: Gets or sets the number of instances (scale units) which have Failed
     * provisioning state but do not have target group payload.
     * 
     * @return the outdatedFailed value.
     */
    public Integer outdatedFailed() {
        return this.outdatedFailed;
    }

    /**
     * Set the outdatedFailed property: Gets or sets the number of instances (scale units) which have Failed
     * provisioning state but do not have target group payload.
     * 
     * @param outdatedFailed the outdatedFailed value to set.
     * @return the ActualCapacityInfo object itself.
     */
    public ActualCapacityInfo withOutdatedFailed(Integer outdatedFailed) {
        this.outdatedFailed = outdatedFailed;
        return this;
    }

    /**
     * Get the outdatedSucceeded property: Gets or sets the number of instances (scale units) which have Succeeded
     * provisioning state but do not have target group payload.
     * 
     * @return the outdatedSucceeded value.
     */
    public Integer outdatedSucceeded() {
        return this.outdatedSucceeded;
    }

    /**
     * Set the outdatedSucceeded property: Gets or sets the number of instances (scale units) which have Succeeded
     * provisioning state but do not have target group payload.
     * 
     * @param outdatedSucceeded the outdatedSucceeded value to set.
     * @return the ActualCapacityInfo object itself.
     */
    public ActualCapacityInfo withOutdatedSucceeded(Integer outdatedSucceeded) {
        this.outdatedSucceeded = outdatedSucceeded;
        return this;
    }

    /**
     * Get the succeeded property: Gets or sets the number of instances (scale units) which have Succeeded provisioning
     * state and target group payload.
     * 
     * @return the succeeded value.
     */
    public Integer succeeded() {
        return this.succeeded;
    }

    /**
     * Set the succeeded property: Gets or sets the number of instances (scale units) which have Succeeded provisioning
     * state and target group payload.
     * 
     * @param succeeded the succeeded value to set.
     * @return the ActualCapacityInfo object itself.
     */
    public ActualCapacityInfo withSucceeded(Integer succeeded) {
        this.succeeded = succeeded;
        return this;
    }

    /**
     * Get the total property: Gets or sets the total number of instances (scale units) regardless of provisioning state
     * or whether current group payload version matches the target group payload.
     * 
     * @return the total value.
     */
    public Integer total() {
        return this.total;
    }

    /**
     * Set the total property: Gets or sets the total number of instances (scale units) regardless of provisioning state
     * or whether current group payload version matches the target group payload.
     * 
     * @param total the total value to set.
     * @return the ActualCapacityInfo object itself.
     */
    public ActualCapacityInfo withTotal(Integer total) {
        this.total = total;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("failed", this.failed);
        jsonWriter.writeNumberField("outdatedFailed", this.outdatedFailed);
        jsonWriter.writeNumberField("outdatedSucceeded", this.outdatedSucceeded);
        jsonWriter.writeNumberField("succeeded", this.succeeded);
        jsonWriter.writeNumberField("total", this.total);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActualCapacityInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActualCapacityInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActualCapacityInfo.
     */
    public static ActualCapacityInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActualCapacityInfo deserializedActualCapacityInfo = new ActualCapacityInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("failed".equals(fieldName)) {
                    deserializedActualCapacityInfo.failed = reader.getNullable(JsonReader::getInt);
                } else if ("outdatedFailed".equals(fieldName)) {
                    deserializedActualCapacityInfo.outdatedFailed = reader.getNullable(JsonReader::getInt);
                } else if ("outdatedSucceeded".equals(fieldName)) {
                    deserializedActualCapacityInfo.outdatedSucceeded = reader.getNullable(JsonReader::getInt);
                } else if ("succeeded".equals(fieldName)) {
                    deserializedActualCapacityInfo.succeeded = reader.getNullable(JsonReader::getInt);
                } else if ("total".equals(fieldName)) {
                    deserializedActualCapacityInfo.total = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActualCapacityInfo;
        });
    }
}
