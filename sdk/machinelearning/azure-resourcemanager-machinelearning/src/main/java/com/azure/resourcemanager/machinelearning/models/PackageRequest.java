// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Model package operation request properties.
 */
@Fluent
public final class PackageRequest {
    /*
     * Base environment to start with.
     */
    @JsonProperty(value = "baseEnvironmentSource")
    private BaseEnvironmentSource baseEnvironmentSource;

    /*
     * Collection of environment variables.
     */
    @JsonProperty(value = "environmentVariables")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> environmentVariables;

    /*
     * [Required] Inferencing server configurations.
     */
    @JsonProperty(value = "inferencingServer", required = true)
    private InferencingServer inferencingServer;

    /*
     * Collection of inputs.
     */
    @JsonProperty(value = "inputs")
    private List<ModelPackageInput> inputs;

    /*
     * Model configuration including the mount mode.
     */
    @JsonProperty(value = "modelConfiguration")
    private ModelConfiguration modelConfiguration;

    /*
     * Property dictionary. Properties can be added, removed, and updated.
     */
    @JsonProperty(value = "properties")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> properties;

    /*
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /*
     * [Required] Arm ID of the target environment to be created by package operation.
     */
    @JsonProperty(value = "targetEnvironmentId", required = true)
    private String targetEnvironmentId;

    /**
     * Creates an instance of PackageRequest class.
     */
    public PackageRequest() {
    }

    /**
     * Get the baseEnvironmentSource property: Base environment to start with.
     * 
     * @return the baseEnvironmentSource value.
     */
    public BaseEnvironmentSource baseEnvironmentSource() {
        return this.baseEnvironmentSource;
    }

    /**
     * Set the baseEnvironmentSource property: Base environment to start with.
     * 
     * @param baseEnvironmentSource the baseEnvironmentSource value to set.
     * @return the PackageRequest object itself.
     */
    public PackageRequest withBaseEnvironmentSource(BaseEnvironmentSource baseEnvironmentSource) {
        this.baseEnvironmentSource = baseEnvironmentSource;
        return this;
    }

    /**
     * Get the environmentVariables property: Collection of environment variables.
     * 
     * @return the environmentVariables value.
     */
    public Map<String, String> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Collection of environment variables.
     * 
     * @param environmentVariables the environmentVariables value to set.
     * @return the PackageRequest object itself.
     */
    public PackageRequest withEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the inferencingServer property: [Required] Inferencing server configurations.
     * 
     * @return the inferencingServer value.
     */
    public InferencingServer inferencingServer() {
        return this.inferencingServer;
    }

    /**
     * Set the inferencingServer property: [Required] Inferencing server configurations.
     * 
     * @param inferencingServer the inferencingServer value to set.
     * @return the PackageRequest object itself.
     */
    public PackageRequest withInferencingServer(InferencingServer inferencingServer) {
        this.inferencingServer = inferencingServer;
        return this;
    }

    /**
     * Get the inputs property: Collection of inputs.
     * 
     * @return the inputs value.
     */
    public List<ModelPackageInput> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: Collection of inputs.
     * 
     * @param inputs the inputs value to set.
     * @return the PackageRequest object itself.
     */
    public PackageRequest withInputs(List<ModelPackageInput> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the modelConfiguration property: Model configuration including the mount mode.
     * 
     * @return the modelConfiguration value.
     */
    public ModelConfiguration modelConfiguration() {
        return this.modelConfiguration;
    }

    /**
     * Set the modelConfiguration property: Model configuration including the mount mode.
     * 
     * @param modelConfiguration the modelConfiguration value to set.
     * @return the PackageRequest object itself.
     */
    public PackageRequest withModelConfiguration(ModelConfiguration modelConfiguration) {
        this.modelConfiguration = modelConfiguration;
        return this;
    }

    /**
     * Get the properties property: Property dictionary. Properties can be added, removed, and updated.
     * 
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Property dictionary. Properties can be added, removed, and updated.
     * 
     * @param properties the properties value to set.
     * @return the PackageRequest object itself.
     */
    public PackageRequest withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the tags property: Tag dictionary. Tags can be added, removed, and updated.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Tag dictionary. Tags can be added, removed, and updated.
     * 
     * @param tags the tags value to set.
     * @return the PackageRequest object itself.
     */
    public PackageRequest withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the targetEnvironmentId property: [Required] Arm ID of the target environment to be created by package
     * operation.
     * 
     * @return the targetEnvironmentId value.
     */
    public String targetEnvironmentId() {
        return this.targetEnvironmentId;
    }

    /**
     * Set the targetEnvironmentId property: [Required] Arm ID of the target environment to be created by package
     * operation.
     * 
     * @param targetEnvironmentId the targetEnvironmentId value to set.
     * @return the PackageRequest object itself.
     */
    public PackageRequest withTargetEnvironmentId(String targetEnvironmentId) {
        this.targetEnvironmentId = targetEnvironmentId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (baseEnvironmentSource() != null) {
            baseEnvironmentSource().validate();
        }
        if (inferencingServer() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property inferencingServer in model PackageRequest"));
        } else {
            inferencingServer().validate();
        }
        if (inputs() != null) {
            inputs().forEach(e -> e.validate());
        }
        if (modelConfiguration() != null) {
            modelConfiguration().validate();
        }
        if (targetEnvironmentId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetEnvironmentId in model PackageRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PackageRequest.class);
}
