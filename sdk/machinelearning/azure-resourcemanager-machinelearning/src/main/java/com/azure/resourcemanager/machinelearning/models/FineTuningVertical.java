// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The FineTuningVertical model.
 */
@Fluent
public class FineTuningVertical implements JsonSerializable<FineTuningVertical> {
    /*
     * [Required] Enum to determine the type of fine tuning.
     */
    private ModelProvider modelProvider = ModelProvider.fromString("FineTuningVertical");

    /*
     * [Required] Fine tuning task type.
     */
    private FineTuningTaskType taskType;

    /*
     * [Required] Training data for fine tuning.
     */
    private JobInput trainingData;

    /*
     * Validation data for fine tuning.
     */
    private JobInput validationData;

    /*
     * [Required] Input model for fine tuning.
     */
    private MLFlowModelJobInput model;

    /**
     * Creates an instance of FineTuningVertical class.
     */
    public FineTuningVertical() {
    }

    /**
     * Get the modelProvider property: [Required] Enum to determine the type of fine tuning.
     * 
     * @return the modelProvider value.
     */
    public ModelProvider modelProvider() {
        return this.modelProvider;
    }

    /**
     * Get the taskType property: [Required] Fine tuning task type.
     * 
     * @return the taskType value.
     */
    public FineTuningTaskType taskType() {
        return this.taskType;
    }

    /**
     * Set the taskType property: [Required] Fine tuning task type.
     * 
     * @param taskType the taskType value to set.
     * @return the FineTuningVertical object itself.
     */
    public FineTuningVertical withTaskType(FineTuningTaskType taskType) {
        this.taskType = taskType;
        return this;
    }

    /**
     * Get the trainingData property: [Required] Training data for fine tuning.
     * 
     * @return the trainingData value.
     */
    public JobInput trainingData() {
        return this.trainingData;
    }

    /**
     * Set the trainingData property: [Required] Training data for fine tuning.
     * 
     * @param trainingData the trainingData value to set.
     * @return the FineTuningVertical object itself.
     */
    public FineTuningVertical withTrainingData(JobInput trainingData) {
        this.trainingData = trainingData;
        return this;
    }

    /**
     * Get the validationData property: Validation data for fine tuning.
     * 
     * @return the validationData value.
     */
    public JobInput validationData() {
        return this.validationData;
    }

    /**
     * Set the validationData property: Validation data for fine tuning.
     * 
     * @param validationData the validationData value to set.
     * @return the FineTuningVertical object itself.
     */
    public FineTuningVertical withValidationData(JobInput validationData) {
        this.validationData = validationData;
        return this;
    }

    /**
     * Get the model property: [Required] Input model for fine tuning.
     * 
     * @return the model value.
     */
    public MLFlowModelJobInput model() {
        return this.model;
    }

    /**
     * Set the model property: [Required] Input model for fine tuning.
     * 
     * @param model the model value to set.
     * @return the FineTuningVertical object itself.
     */
    public FineTuningVertical withModel(MLFlowModelJobInput model) {
        this.model = model;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (taskType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property taskType in model FineTuningVertical"));
        }
        if (trainingData() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property trainingData in model FineTuningVertical"));
        } else {
            trainingData().validate();
        }
        if (validationData() != null) {
            validationData().validate();
        }
        if (model() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property model in model FineTuningVertical"));
        } else {
            model().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FineTuningVertical.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("taskType", this.taskType == null ? null : this.taskType.toString());
        jsonWriter.writeJsonField("trainingData", this.trainingData);
        jsonWriter.writeJsonField("model", this.model);
        jsonWriter.writeStringField("modelProvider", this.modelProvider == null ? null : this.modelProvider.toString());
        jsonWriter.writeJsonField("validationData", this.validationData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FineTuningVertical from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FineTuningVertical if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FineTuningVertical.
     */
    public static FineTuningVertical fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("modelProvider".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureOpenAI".equals(discriminatorValue)) {
                    return AzureOpenAiFineTuning.fromJson(readerToUse.reset());
                } else if ("Custom".equals(discriminatorValue)) {
                    return CustomModelFineTuning.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static FineTuningVertical fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FineTuningVertical deserializedFineTuningVertical = new FineTuningVertical();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("taskType".equals(fieldName)) {
                    deserializedFineTuningVertical.taskType = FineTuningTaskType.fromString(reader.getString());
                } else if ("trainingData".equals(fieldName)) {
                    deserializedFineTuningVertical.trainingData = JobInput.fromJson(reader);
                } else if ("model".equals(fieldName)) {
                    deserializedFineTuningVertical.model = MLFlowModelJobInput.fromJson(reader);
                } else if ("modelProvider".equals(fieldName)) {
                    deserializedFineTuningVertical.modelProvider = ModelProvider.fromString(reader.getString());
                } else if ("validationData".equals(fieldName)) {
                    deserializedFineTuningVertical.validationData = JobInput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFineTuningVertical;
        });
    }
}
