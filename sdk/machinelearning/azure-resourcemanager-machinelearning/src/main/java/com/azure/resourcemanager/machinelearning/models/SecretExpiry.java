// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Secret expiration configuration.
 */
@Fluent
public final class SecretExpiry implements JsonSerializable<SecretExpiry> {
    /*
     * Indicates if the secret is expirable.
     */
    private Boolean expirableSecret;

    /*
     * Number of hours after which the secret will expire.
     */
    private Integer expireAfterHours;

    /**
     * Creates an instance of SecretExpiry class.
     */
    public SecretExpiry() {
    }

    /**
     * Get the expirableSecret property: Indicates if the secret is expirable.
     * 
     * @return the expirableSecret value.
     */
    public Boolean expirableSecret() {
        return this.expirableSecret;
    }

    /**
     * Set the expirableSecret property: Indicates if the secret is expirable.
     * 
     * @param expirableSecret the expirableSecret value to set.
     * @return the SecretExpiry object itself.
     */
    public SecretExpiry withExpirableSecret(Boolean expirableSecret) {
        this.expirableSecret = expirableSecret;
        return this;
    }

    /**
     * Get the expireAfterHours property: Number of hours after which the secret will expire.
     * 
     * @return the expireAfterHours value.
     */
    public Integer expireAfterHours() {
        return this.expireAfterHours;
    }

    /**
     * Set the expireAfterHours property: Number of hours after which the secret will expire.
     * 
     * @param expireAfterHours the expireAfterHours value to set.
     * @return the SecretExpiry object itself.
     */
    public SecretExpiry withExpireAfterHours(Integer expireAfterHours) {
        this.expireAfterHours = expireAfterHours;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("expirableSecret", this.expirableSecret);
        jsonWriter.writeNumberField("expireAfterHours", this.expireAfterHours);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretExpiry from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretExpiry if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecretExpiry.
     */
    public static SecretExpiry fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretExpiry deserializedSecretExpiry = new SecretExpiry();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expirableSecret".equals(fieldName)) {
                    deserializedSecretExpiry.expirableSecret = reader.getNullable(JsonReader::getBoolean);
                } else if ("expireAfterHours".equals(fieldName)) {
                    deserializedSecretExpiry.expireAfterHours = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretExpiry;
        });
    }
}
