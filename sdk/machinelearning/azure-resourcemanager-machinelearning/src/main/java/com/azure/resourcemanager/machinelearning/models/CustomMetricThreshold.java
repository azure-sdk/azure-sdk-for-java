// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The CustomMetricThreshold model.
 */
@Fluent
public final class CustomMetricThreshold {
    /*
     * [Required] The user-defined metric to calculate.
     */
    @JsonProperty(value = "metric", required = true)
    private String metric;

    /*
     * The threshold value. If null, a default value will be set depending on the selected metric.
     */
    @JsonProperty(value = "threshold")
    private MonitoringThreshold threshold;

    /**
     * Creates an instance of CustomMetricThreshold class.
     */
    public CustomMetricThreshold() {
    }

    /**
     * Get the metric property: [Required] The user-defined metric to calculate.
     * 
     * @return the metric value.
     */
    public String metric() {
        return this.metric;
    }

    /**
     * Set the metric property: [Required] The user-defined metric to calculate.
     * 
     * @param metric the metric value to set.
     * @return the CustomMetricThreshold object itself.
     */
    public CustomMetricThreshold withMetric(String metric) {
        this.metric = metric;
        return this;
    }

    /**
     * Get the threshold property: The threshold value. If null, a default value will be set depending on the selected
     * metric.
     * 
     * @return the threshold value.
     */
    public MonitoringThreshold threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: The threshold value. If null, a default value will be set depending on the selected
     * metric.
     * 
     * @param threshold the threshold value to set.
     * @return the CustomMetricThreshold object itself.
     */
    public CustomMetricThreshold withThreshold(MonitoringThreshold threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metric() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property metric in model CustomMetricThreshold"));
        }
        if (threshold() != null) {
            threshold().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomMetricThreshold.class);
}
