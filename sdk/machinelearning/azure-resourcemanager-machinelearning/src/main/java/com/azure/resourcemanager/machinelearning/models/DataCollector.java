// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * The DataCollector model.
 */
@Fluent
public final class DataCollector {
    /*
     * [Required] The collection configuration. Each collection has it own configuration to collect model data and the
     * name of collection can be arbitrary string.
     * Model data collector can be used for either payload logging or custom logging or both of them. Collection request
     * and response are reserved for payload logging, others are for custom logging.
     */
    @JsonProperty(value = "collections", required = true)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, Collection> collections;

    /*
     * The request logging configuration for mdc, it includes advanced logging settings for all collections. It's
     * optional.
     */
    @JsonProperty(value = "requestLogging")
    private RequestLogging requestLogging;

    /*
     * When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of
     * them in a single blob file.
     * If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
     * If it's day, all data will be collected in blob path /yyyy/MM/dd/.
     * The other benefit of rolling path is that model monitoring ui is able to select a time range of data very
     * quickly.
     */
    @JsonProperty(value = "rollingRate")
    private RollingRateType rollingRate;

    /**
     * Creates an instance of DataCollector class.
     */
    public DataCollector() {
    }

    /**
     * Get the collections property: [Required] The collection configuration. Each collection has it own configuration
     * to collect model data and the name of collection can be arbitrary string.
     * Model data collector can be used for either payload logging or custom logging or both of them. Collection request
     * and response are reserved for payload logging, others are for custom logging.
     * 
     * @return the collections value.
     */
    public Map<String, Collection> collections() {
        return this.collections;
    }

    /**
     * Set the collections property: [Required] The collection configuration. Each collection has it own configuration
     * to collect model data and the name of collection can be arbitrary string.
     * Model data collector can be used for either payload logging or custom logging or both of them. Collection request
     * and response are reserved for payload logging, others are for custom logging.
     * 
     * @param collections the collections value to set.
     * @return the DataCollector object itself.
     */
    public DataCollector withCollections(Map<String, Collection> collections) {
        this.collections = collections;
        return this;
    }

    /**
     * Get the requestLogging property: The request logging configuration for mdc, it includes advanced logging settings
     * for all collections. It's optional.
     * 
     * @return the requestLogging value.
     */
    public RequestLogging requestLogging() {
        return this.requestLogging;
    }

    /**
     * Set the requestLogging property: The request logging configuration for mdc, it includes advanced logging settings
     * for all collections. It's optional.
     * 
     * @param requestLogging the requestLogging value to set.
     * @return the DataCollector object itself.
     */
    public DataCollector withRequestLogging(RequestLogging requestLogging) {
        this.requestLogging = requestLogging;
        return this;
    }

    /**
     * Get the rollingRate property: When model data is collected to blob storage, we need to roll the data to different
     * path to avoid logging all of them in a single blob file.
     * If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
     * If it's day, all data will be collected in blob path /yyyy/MM/dd/.
     * The other benefit of rolling path is that model monitoring ui is able to select a time range of data very
     * quickly.
     * 
     * @return the rollingRate value.
     */
    public RollingRateType rollingRate() {
        return this.rollingRate;
    }

    /**
     * Set the rollingRate property: When model data is collected to blob storage, we need to roll the data to different
     * path to avoid logging all of them in a single blob file.
     * If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
     * If it's day, all data will be collected in blob path /yyyy/MM/dd/.
     * The other benefit of rolling path is that model monitoring ui is able to select a time range of data very
     * quickly.
     * 
     * @param rollingRate the rollingRate value to set.
     * @return the DataCollector object itself.
     */
    public DataCollector withRollingRate(RollingRateType rollingRate) {
        this.rollingRate = rollingRate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (collections() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property collections in model DataCollector"));
        } else {
            collections().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (requestLogging() != null) {
            requestLogging().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataCollector.class);
}
