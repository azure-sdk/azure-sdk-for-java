// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.models.PtuDeploymentUsage;
import java.io.IOException;
import java.util.List;

/**
 * The UsageAndQuotaDetails model.
 */
@Fluent
public final class UsageAndQuotaDetailsInner implements JsonSerializable<UsageAndQuotaDetailsInner> {
    /*
     * Model collection name
     */
    private String modelCollection;

    /*
     * The total number of quota
     */
    private Long quota;

    /*
     * Usage details for each deployment
     */
    private List<PtuDeploymentUsage> usageDetails;

    /**
     * Creates an instance of UsageAndQuotaDetailsInner class.
     */
    public UsageAndQuotaDetailsInner() {
    }

    /**
     * Get the modelCollection property: Model collection name.
     * 
     * @return the modelCollection value.
     */
    public String modelCollection() {
        return this.modelCollection;
    }

    /**
     * Set the modelCollection property: Model collection name.
     * 
     * @param modelCollection the modelCollection value to set.
     * @return the UsageAndQuotaDetailsInner object itself.
     */
    public UsageAndQuotaDetailsInner withModelCollection(String modelCollection) {
        this.modelCollection = modelCollection;
        return this;
    }

    /**
     * Get the quota property: The total number of quota.
     * 
     * @return the quota value.
     */
    public Long quota() {
        return this.quota;
    }

    /**
     * Set the quota property: The total number of quota.
     * 
     * @param quota the quota value to set.
     * @return the UsageAndQuotaDetailsInner object itself.
     */
    public UsageAndQuotaDetailsInner withQuota(Long quota) {
        this.quota = quota;
        return this;
    }

    /**
     * Get the usageDetails property: Usage details for each deployment.
     * 
     * @return the usageDetails value.
     */
    public List<PtuDeploymentUsage> usageDetails() {
        return this.usageDetails;
    }

    /**
     * Set the usageDetails property: Usage details for each deployment.
     * 
     * @param usageDetails the usageDetails value to set.
     * @return the UsageAndQuotaDetailsInner object itself.
     */
    public UsageAndQuotaDetailsInner withUsageDetails(List<PtuDeploymentUsage> usageDetails) {
        this.usageDetails = usageDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (usageDetails() != null) {
            usageDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("modelCollection", this.modelCollection);
        jsonWriter.writeNumberField("quota", this.quota);
        jsonWriter.writeArrayField("usageDetails", this.usageDetails, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UsageAndQuotaDetailsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UsageAndQuotaDetailsInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UsageAndQuotaDetailsInner.
     */
    public static UsageAndQuotaDetailsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UsageAndQuotaDetailsInner deserializedUsageAndQuotaDetailsInner = new UsageAndQuotaDetailsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("modelCollection".equals(fieldName)) {
                    deserializedUsageAndQuotaDetailsInner.modelCollection = reader.getString();
                } else if ("quota".equals(fieldName)) {
                    deserializedUsageAndQuotaDetailsInner.quota = reader.getNullable(JsonReader::getLong);
                } else if ("usageDetails".equals(fieldName)) {
                    List<PtuDeploymentUsage> usageDetails
                        = reader.readArray(reader1 -> PtuDeploymentUsage.fromJson(reader1));
                    deserializedUsageAndQuotaDetailsInner.usageDetails = usageDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUsageAndQuotaDetailsInner;
        });
    }
}
