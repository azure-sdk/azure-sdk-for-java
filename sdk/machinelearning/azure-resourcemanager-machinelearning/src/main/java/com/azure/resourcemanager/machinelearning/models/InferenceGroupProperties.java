// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Inference group configuration.
 */
@Fluent
public final class InferenceGroupProperties extends PropertiesBase {
    /*
     * Gets or sets environment configuration for the inference group. Used if PoolType=ScaleUnit.
     */
    private GroupEnvironmentConfiguration environmentConfiguration;

    /*
     * Gets or sets model configuration for the inference group. Used if PoolType=ScaleUnit.
     */
    private GroupModelConfiguration modelConfiguration;

    /*
     * Gets or sets compute instance type.
     */
    private String nodeSkuType;

    /*
     * Provisioning state for the inference group.
     */
    private PoolProvisioningState provisioningState;

    /*
     * Gets or sets Scale Unit size.
     */
    private Integer scaleUnitSize;

    /**
     * Creates an instance of InferenceGroupProperties class.
     */
    public InferenceGroupProperties() {
    }

    /**
     * Get the environmentConfiguration property: Gets or sets environment configuration for the inference group. Used
     * if PoolType=ScaleUnit.
     * 
     * @return the environmentConfiguration value.
     */
    public GroupEnvironmentConfiguration environmentConfiguration() {
        return this.environmentConfiguration;
    }

    /**
     * Set the environmentConfiguration property: Gets or sets environment configuration for the inference group. Used
     * if PoolType=ScaleUnit.
     * 
     * @param environmentConfiguration the environmentConfiguration value to set.
     * @return the InferenceGroupProperties object itself.
     */
    public InferenceGroupProperties
        withEnvironmentConfiguration(GroupEnvironmentConfiguration environmentConfiguration) {
        this.environmentConfiguration = environmentConfiguration;
        return this;
    }

    /**
     * Get the modelConfiguration property: Gets or sets model configuration for the inference group. Used if
     * PoolType=ScaleUnit.
     * 
     * @return the modelConfiguration value.
     */
    public GroupModelConfiguration modelConfiguration() {
        return this.modelConfiguration;
    }

    /**
     * Set the modelConfiguration property: Gets or sets model configuration for the inference group. Used if
     * PoolType=ScaleUnit.
     * 
     * @param modelConfiguration the modelConfiguration value to set.
     * @return the InferenceGroupProperties object itself.
     */
    public InferenceGroupProperties withModelConfiguration(GroupModelConfiguration modelConfiguration) {
        this.modelConfiguration = modelConfiguration;
        return this;
    }

    /**
     * Get the nodeSkuType property: Gets or sets compute instance type.
     * 
     * @return the nodeSkuType value.
     */
    public String nodeSkuType() {
        return this.nodeSkuType;
    }

    /**
     * Set the nodeSkuType property: Gets or sets compute instance type.
     * 
     * @param nodeSkuType the nodeSkuType value to set.
     * @return the InferenceGroupProperties object itself.
     */
    public InferenceGroupProperties withNodeSkuType(String nodeSkuType) {
        this.nodeSkuType = nodeSkuType;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state for the inference group.
     * 
     * @return the provisioningState value.
     */
    public PoolProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the scaleUnitSize property: Gets or sets Scale Unit size.
     * 
     * @return the scaleUnitSize value.
     */
    public Integer scaleUnitSize() {
        return this.scaleUnitSize;
    }

    /**
     * Set the scaleUnitSize property: Gets or sets Scale Unit size.
     * 
     * @param scaleUnitSize the scaleUnitSize value to set.
     * @return the InferenceGroupProperties object itself.
     */
    public InferenceGroupProperties withScaleUnitSize(Integer scaleUnitSize) {
        this.scaleUnitSize = scaleUnitSize;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InferenceGroupProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InferenceGroupProperties withProperties(List<StringKeyValuePair> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (environmentConfiguration() != null) {
            environmentConfiguration().validate();
        }
        if (modelConfiguration() != null) {
            modelConfiguration().validate();
        }
        if (properties() != null) {
            properties().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeArrayField("properties", properties(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("environmentConfiguration", this.environmentConfiguration);
        jsonWriter.writeJsonField("modelConfiguration", this.modelConfiguration);
        jsonWriter.writeStringField("nodeSkuType", this.nodeSkuType);
        jsonWriter.writeNumberField("scaleUnitSize", this.scaleUnitSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InferenceGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InferenceGroupProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InferenceGroupProperties.
     */
    public static InferenceGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InferenceGroupProperties deserializedInferenceGroupProperties = new InferenceGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedInferenceGroupProperties.withDescription(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    List<StringKeyValuePair> properties
                        = reader.readArray(reader1 -> StringKeyValuePair.fromJson(reader1));
                    deserializedInferenceGroupProperties.withProperties(properties);
                } else if ("environmentConfiguration".equals(fieldName)) {
                    deserializedInferenceGroupProperties.environmentConfiguration
                        = GroupEnvironmentConfiguration.fromJson(reader);
                } else if ("modelConfiguration".equals(fieldName)) {
                    deserializedInferenceGroupProperties.modelConfiguration = GroupModelConfiguration.fromJson(reader);
                } else if ("nodeSkuType".equals(fieldName)) {
                    deserializedInferenceGroupProperties.nodeSkuType = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedInferenceGroupProperties.provisioningState
                        = PoolProvisioningState.fromString(reader.getString());
                } else if ("scaleUnitSize".equals(fieldName)) {
                    deserializedInferenceGroupProperties.scaleUnitSize = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInferenceGroupProperties;
        });
    }
}
