// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The JobResources model.
 */
@Fluent
public final class JobResources implements JsonSerializable<JobResources> {
    /*
     * List of instance types to choose from.
     */
    private List<String> instanceTypes;

    /**
     * Creates an instance of JobResources class.
     */
    public JobResources() {
    }

    /**
     * Get the instanceTypes property: List of instance types to choose from.
     * 
     * @return the instanceTypes value.
     */
    public List<String> instanceTypes() {
        return this.instanceTypes;
    }

    /**
     * Set the instanceTypes property: List of instance types to choose from.
     * 
     * @param instanceTypes the instanceTypes value to set.
     * @return the JobResources object itself.
     */
    public JobResources withInstanceTypes(List<String> instanceTypes) {
        this.instanceTypes = instanceTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("instanceTypes", this.instanceTypes,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobResources from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobResources if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobResources.
     */
    public static JobResources fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobResources deserializedJobResources = new JobResources();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceTypes".equals(fieldName)) {
                    List<String> instanceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedJobResources.instanceTypes = instanceTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobResources;
        });
    }
}
