// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.EndpointDeploymentsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.EndpointDeploymentResourcePropertiesBasicResourceInner;
import com.azure.resourcemanager.machinelearning.models.EndpointDeploymentResourcePropertiesBasicResource;
import com.azure.resourcemanager.machinelearning.models.EndpointDeployments;
import com.azure.resourcemanager.machinelearning.models.EndpointType;

public final class EndpointDeploymentsImpl implements EndpointDeployments {
    private static final ClientLogger LOGGER = new ClientLogger(EndpointDeploymentsImpl.class);

    private final EndpointDeploymentsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public EndpointDeploymentsImpl(EndpointDeploymentsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<EndpointDeploymentResourcePropertiesBasicResource> getInWorkspace(String resourceGroupName,
        String workspaceName) {
        PagedIterable<EndpointDeploymentResourcePropertiesBasicResourceInner> inner
            = this.serviceClient().getInWorkspace(resourceGroupName, workspaceName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new EndpointDeploymentResourcePropertiesBasicResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EndpointDeploymentResourcePropertiesBasicResource> getInWorkspace(String resourceGroupName,
        String workspaceName, EndpointType endpointType, String skip, Context context) {
        PagedIterable<EndpointDeploymentResourcePropertiesBasicResourceInner> inner
            = this.serviceClient().getInWorkspace(resourceGroupName, workspaceName, endpointType, skip, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new EndpointDeploymentResourcePropertiesBasicResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EndpointDeploymentResourcePropertiesBasicResource> list(String resourceGroupName,
        String workspaceName, String endpointName) {
        PagedIterable<EndpointDeploymentResourcePropertiesBasicResourceInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, endpointName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new EndpointDeploymentResourcePropertiesBasicResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EndpointDeploymentResourcePropertiesBasicResource> list(String resourceGroupName,
        String workspaceName, String endpointName, Context context) {
        PagedIterable<EndpointDeploymentResourcePropertiesBasicResourceInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, endpointName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new EndpointDeploymentResourcePropertiesBasicResourceImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String workspaceName, String endpointName, String deploymentName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, endpointName, deploymentName);
    }

    public void delete(String resourceGroupName, String workspaceName, String endpointName, String deploymentName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceName, endpointName, deploymentName, context);
    }

    public Response<EndpointDeploymentResourcePropertiesBasicResource> getWithResponse(String resourceGroupName,
        String workspaceName, String endpointName, String deploymentName, Context context) {
        Response<EndpointDeploymentResourcePropertiesBasicResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, workspaceName, endpointName, deploymentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EndpointDeploymentResourcePropertiesBasicResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EndpointDeploymentResourcePropertiesBasicResource get(String resourceGroupName, String workspaceName,
        String endpointName, String deploymentName) {
        EndpointDeploymentResourcePropertiesBasicResourceInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, endpointName, deploymentName);
        if (inner != null) {
            return new EndpointDeploymentResourcePropertiesBasicResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EndpointDeploymentResourcePropertiesBasicResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, endpointName, deploymentName, Context.NONE)
            .getValue();
    }

    public Response<EndpointDeploymentResourcePropertiesBasicResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, endpointName, deploymentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, endpointName, deploymentName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, endpointName, deploymentName, context);
    }

    private EndpointDeploymentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public EndpointDeploymentResourcePropertiesBasicResourceImpl define(String name) {
        return new EndpointDeploymentResourcePropertiesBasicResourceImpl(name, this.manager());
    }
}
