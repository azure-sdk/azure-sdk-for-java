// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.InferenceEndpointsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.InferenceEndpointMinimalTrackedResourceInner;
import com.azure.resourcemanager.machinelearning.models.InferenceEndpointMinimalTrackedResource;
import com.azure.resourcemanager.machinelearning.models.InferenceEndpoints;
import com.azure.resourcemanager.machinelearning.models.OrderString;

public final class InferenceEndpointsImpl implements InferenceEndpoints {
    private static final ClientLogger LOGGER = new ClientLogger(InferenceEndpointsImpl.class);

    private final InferenceEndpointsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public InferenceEndpointsImpl(
        InferenceEndpointsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<InferenceEndpointMinimalTrackedResource> list(
        String resourceGroupName, String workspaceName, String poolName, String groupName) {
        PagedIterable<InferenceEndpointMinimalTrackedResourceInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName, poolName, groupName);
        return Utils.mapPage(inner, inner1 -> new InferenceEndpointMinimalTrackedResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<InferenceEndpointMinimalTrackedResource> list(
        String resourceGroupName,
        String workspaceName,
        String poolName,
        String groupName,
        Integer count,
        String skip,
        String tags,
        String properties,
        OrderString orderBy,
        Context context) {
        PagedIterable<InferenceEndpointMinimalTrackedResourceInner> inner =
            this
                .serviceClient()
                .list(
                    resourceGroupName,
                    workspaceName,
                    poolName,
                    groupName,
                    count,
                    skip,
                    tags,
                    properties,
                    orderBy,
                    context);
        return Utils.mapPage(inner, inner1 -> new InferenceEndpointMinimalTrackedResourceImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String workspaceName, String poolName, String groupName, String name) {
        this.serviceClient().delete(resourceGroupName, workspaceName, poolName, groupName, name);
    }

    public void delete(
        String resourceGroupName,
        String workspaceName,
        String poolName,
        String groupName,
        String name,
        Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceName, poolName, groupName, name, context);
    }

    public Response<InferenceEndpointMinimalTrackedResource> getWithResponse(
        String resourceGroupName,
        String workspaceName,
        String poolName,
        String groupName,
        String name,
        Context context) {
        Response<InferenceEndpointMinimalTrackedResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, workspaceName, poolName, groupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new InferenceEndpointMinimalTrackedResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InferenceEndpointMinimalTrackedResource get(
        String resourceGroupName, String workspaceName, String poolName, String groupName, String name) {
        InferenceEndpointMinimalTrackedResourceInner inner =
            this.serviceClient().get(resourceGroupName, workspaceName, poolName, groupName, name);
        if (inner != null) {
            return new InferenceEndpointMinimalTrackedResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public InferenceEndpointMinimalTrackedResource update(
        String resourceGroupName, String workspaceName, String poolName, String groupName, String name, Object body) {
        InferenceEndpointMinimalTrackedResourceInner inner =
            this.serviceClient().update(resourceGroupName, workspaceName, poolName, groupName, name, body);
        if (inner != null) {
            return new InferenceEndpointMinimalTrackedResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public InferenceEndpointMinimalTrackedResource update(
        String resourceGroupName,
        String workspaceName,
        String poolName,
        String groupName,
        String name,
        Object body,
        Context context) {
        InferenceEndpointMinimalTrackedResourceInner inner =
            this.serviceClient().update(resourceGroupName, workspaceName, poolName, groupName, name, body, context);
        if (inner != null) {
            return new InferenceEndpointMinimalTrackedResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public InferenceEndpointMinimalTrackedResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String groupName = Utils.getValueFromIdByName(id, "groups");
        if (groupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "endpoints");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, workspaceName, poolName, groupName, name, Context.NONE)
            .getValue();
    }

    public Response<InferenceEndpointMinimalTrackedResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String groupName = Utils.getValueFromIdByName(id, "groups");
        if (groupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "endpoints");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, poolName, groupName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String groupName = Utils.getValueFromIdByName(id, "groups");
        if (groupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "endpoints");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, poolName, groupName, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String groupName = Utils.getValueFromIdByName(id, "groups");
        if (groupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "endpoints");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, poolName, groupName, name, context);
    }

    private InferenceEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public InferenceEndpointMinimalTrackedResourceImpl define(String name) {
        return new InferenceEndpointMinimalTrackedResourceImpl(name, this.manager());
    }
}
