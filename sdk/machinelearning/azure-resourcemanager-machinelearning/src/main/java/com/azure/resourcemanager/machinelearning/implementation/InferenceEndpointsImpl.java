// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.InferenceEndpointsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.InferenceEndpointInner;
import com.azure.resourcemanager.machinelearning.models.InferenceEndpoint;
import com.azure.resourcemanager.machinelearning.models.InferenceEndpoints;
import com.azure.resourcemanager.machinelearning.models.OrderString;

public final class InferenceEndpointsImpl implements InferenceEndpoints {
    private static final ClientLogger LOGGER = new ClientLogger(InferenceEndpointsImpl.class);

    private final InferenceEndpointsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public InferenceEndpointsImpl(InferenceEndpointsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<InferenceEndpoint> list(String resourceGroupName, String workspaceName, String poolName) {
        PagedIterable<InferenceEndpointInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, poolName);
        return Utils.mapPage(inner, inner1 -> new InferenceEndpointImpl(inner1, this.manager()));
    }

    public PagedIterable<InferenceEndpoint> list(String resourceGroupName, String workspaceName, String poolName,
        Integer count, String skip, String tags, String properties, OrderString orderBy, Context context) {
        PagedIterable<InferenceEndpointInner> inner = this.serviceClient().list(resourceGroupName, workspaceName,
            poolName, count, skip, tags, properties, orderBy, context);
        return Utils.mapPage(inner, inner1 -> new InferenceEndpointImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String workspaceName, String poolName, String endpointName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, poolName, endpointName);
    }

    public void delete(String resourceGroupName, String workspaceName, String poolName, String endpointName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceName, poolName, endpointName, context);
    }

    public Response<InferenceEndpoint> getWithResponse(String resourceGroupName, String workspaceName, String poolName,
        String endpointName, Context context) {
        Response<InferenceEndpointInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, poolName, endpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new InferenceEndpointImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InferenceEndpoint get(String resourceGroupName, String workspaceName, String poolName, String endpointName) {
        InferenceEndpointInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, poolName, endpointName);
        if (inner != null) {
            return new InferenceEndpointImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public InferenceEndpoint update(String resourceGroupName, String workspaceName, String poolName,
        String endpointName, Object body) {
        InferenceEndpointInner inner
            = this.serviceClient().update(resourceGroupName, workspaceName, poolName, endpointName, body);
        if (inner != null) {
            return new InferenceEndpointImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public InferenceEndpoint update(String resourceGroupName, String workspaceName, String poolName,
        String endpointName, Object body, Context context) {
        InferenceEndpointInner inner
            = this.serviceClient().update(resourceGroupName, workspaceName, poolName, endpointName, body, context);
        if (inner != null) {
            return new InferenceEndpointImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public InferenceEndpoint getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, poolName, endpointName, Context.NONE).getValue();
    }

    public Response<InferenceEndpoint> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, poolName, endpointName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, poolName, endpointName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, poolName, endpointName, context);
    }

    private InferenceEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public InferenceEndpointImpl define(String name) {
        return new InferenceEndpointImpl(name, this.manager());
    }
}
