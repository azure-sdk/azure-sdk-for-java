// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The MaterializationSettings model. */
@Fluent
public final class MaterializationSettings {
    /*
     * Specifies the notification details
     */
    @JsonProperty(value = "notification")
    private NotificationSetting notification;

    /*
     * Specifies the compute resource settings
     */
    @JsonProperty(value = "resource")
    private MaterializationComputeResource resource;

    /*
     * Specifies the schedule details
     */
    @JsonProperty(value = "schedule")
    private RecurrenceTrigger schedule;

    /*
     * Specifies the spark compute settings
     */
    @JsonProperty(value = "sparkConfiguration")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> sparkConfiguration;

    /*
     * Specifies the stores to which materialization should happen
     */
    @JsonProperty(value = "storeType")
    private MaterializationStoreType storeType;

    /** Creates an instance of MaterializationSettings class. */
    public MaterializationSettings() {
    }

    /**
     * Get the notification property: Specifies the notification details.
     *
     * @return the notification value.
     */
    public NotificationSetting notification() {
        return this.notification;
    }

    /**
     * Set the notification property: Specifies the notification details.
     *
     * @param notification the notification value to set.
     * @return the MaterializationSettings object itself.
     */
    public MaterializationSettings withNotification(NotificationSetting notification) {
        this.notification = notification;
        return this;
    }

    /**
     * Get the resource property: Specifies the compute resource settings.
     *
     * @return the resource value.
     */
    public MaterializationComputeResource resource() {
        return this.resource;
    }

    /**
     * Set the resource property: Specifies the compute resource settings.
     *
     * @param resource the resource value to set.
     * @return the MaterializationSettings object itself.
     */
    public MaterializationSettings withResource(MaterializationComputeResource resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Get the schedule property: Specifies the schedule details.
     *
     * @return the schedule value.
     */
    public RecurrenceTrigger schedule() {
        return this.schedule;
    }

    /**
     * Set the schedule property: Specifies the schedule details.
     *
     * @param schedule the schedule value to set.
     * @return the MaterializationSettings object itself.
     */
    public MaterializationSettings withSchedule(RecurrenceTrigger schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Get the sparkConfiguration property: Specifies the spark compute settings.
     *
     * @return the sparkConfiguration value.
     */
    public Map<String, String> sparkConfiguration() {
        return this.sparkConfiguration;
    }

    /**
     * Set the sparkConfiguration property: Specifies the spark compute settings.
     *
     * @param sparkConfiguration the sparkConfiguration value to set.
     * @return the MaterializationSettings object itself.
     */
    public MaterializationSettings withSparkConfiguration(Map<String, String> sparkConfiguration) {
        this.sparkConfiguration = sparkConfiguration;
        return this;
    }

    /**
     * Get the storeType property: Specifies the stores to which materialization should happen.
     *
     * @return the storeType value.
     */
    public MaterializationStoreType storeType() {
        return this.storeType;
    }

    /**
     * Set the storeType property: Specifies the stores to which materialization should happen.
     *
     * @param storeType the storeType value to set.
     * @return the MaterializationSettings object itself.
     */
    public MaterializationSettings withStoreType(MaterializationStoreType storeType) {
        this.storeType = storeType;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (notification() != null) {
            notification().validate();
        }
        if (resource() != null) {
            resource().validate();
        }
        if (schedule() != null) {
            schedule().validate();
        }
    }
}
