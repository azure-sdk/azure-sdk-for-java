// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The EndpointModelSkuProperties model.
 */
@Fluent
public final class EndpointModelSkuProperties implements JsonSerializable<EndpointModelSkuProperties> {
    /*
     * The capacity property.
     */
    private EndpointModelSkuCapacityProperties capacity;

    /*
     * The list of ARM id for the connection support this SKU.
     */
    private List<String> connectionIds;

    /*
     * The datetime of deprecation of the model SKU.
     */
    private OffsetDateTime deprecationDate;

    /*
     * The name of the model SKU.
     */
    private String name;

    /*
     * The rateLimits property.
     */
    private List<EndpointModelSkuRateLimitProperties> rateLimits;

    /*
     * The usage name of the model SKU.
     */
    private String usageName;

    /**
     * Creates an instance of EndpointModelSkuProperties class.
     */
    public EndpointModelSkuProperties() {
    }

    /**
     * Get the capacity property: The capacity property.
     * 
     * @return the capacity value.
     */
    public EndpointModelSkuCapacityProperties capacity() {
        return this.capacity;
    }

    /**
     * Set the capacity property: The capacity property.
     * 
     * @param capacity the capacity value to set.
     * @return the EndpointModelSkuProperties object itself.
     */
    public EndpointModelSkuProperties withCapacity(EndpointModelSkuCapacityProperties capacity) {
        this.capacity = capacity;
        return this;
    }

    /**
     * Get the connectionIds property: The list of ARM id for the connection support this SKU.
     * 
     * @return the connectionIds value.
     */
    public List<String> connectionIds() {
        return this.connectionIds;
    }

    /**
     * Set the connectionIds property: The list of ARM id for the connection support this SKU.
     * 
     * @param connectionIds the connectionIds value to set.
     * @return the EndpointModelSkuProperties object itself.
     */
    public EndpointModelSkuProperties withConnectionIds(List<String> connectionIds) {
        this.connectionIds = connectionIds;
        return this;
    }

    /**
     * Get the deprecationDate property: The datetime of deprecation of the model SKU.
     * 
     * @return the deprecationDate value.
     */
    public OffsetDateTime deprecationDate() {
        return this.deprecationDate;
    }

    /**
     * Set the deprecationDate property: The datetime of deprecation of the model SKU.
     * 
     * @param deprecationDate the deprecationDate value to set.
     * @return the EndpointModelSkuProperties object itself.
     */
    public EndpointModelSkuProperties withDeprecationDate(OffsetDateTime deprecationDate) {
        this.deprecationDate = deprecationDate;
        return this;
    }

    /**
     * Get the name property: The name of the model SKU.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the model SKU.
     * 
     * @param name the name value to set.
     * @return the EndpointModelSkuProperties object itself.
     */
    public EndpointModelSkuProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the rateLimits property: The rateLimits property.
     * 
     * @return the rateLimits value.
     */
    public List<EndpointModelSkuRateLimitProperties> rateLimits() {
        return this.rateLimits;
    }

    /**
     * Set the rateLimits property: The rateLimits property.
     * 
     * @param rateLimits the rateLimits value to set.
     * @return the EndpointModelSkuProperties object itself.
     */
    public EndpointModelSkuProperties withRateLimits(List<EndpointModelSkuRateLimitProperties> rateLimits) {
        this.rateLimits = rateLimits;
        return this;
    }

    /**
     * Get the usageName property: The usage name of the model SKU.
     * 
     * @return the usageName value.
     */
    public String usageName() {
        return this.usageName;
    }

    /**
     * Set the usageName property: The usage name of the model SKU.
     * 
     * @param usageName the usageName value to set.
     * @return the EndpointModelSkuProperties object itself.
     */
    public EndpointModelSkuProperties withUsageName(String usageName) {
        this.usageName = usageName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capacity() != null) {
            capacity().validate();
        }
        if (rateLimits() != null) {
            rateLimits().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("capacity", this.capacity);
        jsonWriter.writeArrayField("connectionIds", this.connectionIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("deprecationDate",
            this.deprecationDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.deprecationDate));
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("rateLimits", this.rateLimits, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("usageName", this.usageName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointModelSkuProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointModelSkuProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EndpointModelSkuProperties.
     */
    public static EndpointModelSkuProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointModelSkuProperties deserializedEndpointModelSkuProperties = new EndpointModelSkuProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("capacity".equals(fieldName)) {
                    deserializedEndpointModelSkuProperties.capacity
                        = EndpointModelSkuCapacityProperties.fromJson(reader);
                } else if ("connectionIds".equals(fieldName)) {
                    List<String> connectionIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedEndpointModelSkuProperties.connectionIds = connectionIds;
                } else if ("deprecationDate".equals(fieldName)) {
                    deserializedEndpointModelSkuProperties.deprecationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("name".equals(fieldName)) {
                    deserializedEndpointModelSkuProperties.name = reader.getString();
                } else if ("rateLimits".equals(fieldName)) {
                    List<EndpointModelSkuRateLimitProperties> rateLimits
                        = reader.readArray(reader1 -> EndpointModelSkuRateLimitProperties.fromJson(reader1));
                    deserializedEndpointModelSkuProperties.rateLimits = rateLimits;
                } else if ("usageName".equals(fieldName)) {
                    deserializedEndpointModelSkuProperties.usageName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointModelSkuProperties;
        });
    }
}
