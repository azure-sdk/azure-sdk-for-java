// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.machinelearning.models.RegistryListCredentialsResult;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The ListWorkspaceKeysResult model.
 */
@Fluent
public final class ListWorkspaceKeysResultInner {
    /*
     * The access key of the workspace app insights
     */
    @JsonProperty(value = "appInsightsInstrumentationKey", access = JsonProperty.Access.WRITE_ONLY)
    private String appInsightsInstrumentationKey;

    /*
     * The containerRegistryCredentials property.
     */
    @JsonProperty(value = "containerRegistryCredentials")
    private RegistryListCredentialsResult containerRegistryCredentials;

    /*
     * The notebookAccessKeys property.
     */
    @JsonProperty(value = "notebookAccessKeys")
    private ListNotebookKeysResultInner notebookAccessKeys;

    /*
     * The arm Id key of the workspace storage
     */
    @JsonProperty(value = "userStorageArmId", access = JsonProperty.Access.WRITE_ONLY)
    private String userStorageArmId;

    /*
     * The access key of the workspace storage
     */
    @JsonProperty(value = "userStorageKey", access = JsonProperty.Access.WRITE_ONLY)
    private String userStorageKey;

    /**
     * Creates an instance of ListWorkspaceKeysResultInner class.
     */
    public ListWorkspaceKeysResultInner() {
    }

    /**
     * Get the appInsightsInstrumentationKey property: The access key of the workspace app insights.
     * 
     * @return the appInsightsInstrumentationKey value.
     */
    public String appInsightsInstrumentationKey() {
        return this.appInsightsInstrumentationKey;
    }

    /**
     * Get the containerRegistryCredentials property: The containerRegistryCredentials property.
     * 
     * @return the containerRegistryCredentials value.
     */
    public RegistryListCredentialsResult containerRegistryCredentials() {
        return this.containerRegistryCredentials;
    }

    /**
     * Set the containerRegistryCredentials property: The containerRegistryCredentials property.
     * 
     * @param containerRegistryCredentials the containerRegistryCredentials value to set.
     * @return the ListWorkspaceKeysResultInner object itself.
     */
    public ListWorkspaceKeysResultInner
        withContainerRegistryCredentials(RegistryListCredentialsResult containerRegistryCredentials) {
        this.containerRegistryCredentials = containerRegistryCredentials;
        return this;
    }

    /**
     * Get the notebookAccessKeys property: The notebookAccessKeys property.
     * 
     * @return the notebookAccessKeys value.
     */
    public ListNotebookKeysResultInner notebookAccessKeys() {
        return this.notebookAccessKeys;
    }

    /**
     * Set the notebookAccessKeys property: The notebookAccessKeys property.
     * 
     * @param notebookAccessKeys the notebookAccessKeys value to set.
     * @return the ListWorkspaceKeysResultInner object itself.
     */
    public ListWorkspaceKeysResultInner withNotebookAccessKeys(ListNotebookKeysResultInner notebookAccessKeys) {
        this.notebookAccessKeys = notebookAccessKeys;
        return this;
    }

    /**
     * Get the userStorageArmId property: The arm Id key of the workspace storage.
     * 
     * @return the userStorageArmId value.
     */
    public String userStorageArmId() {
        return this.userStorageArmId;
    }

    /**
     * Get the userStorageKey property: The access key of the workspace storage.
     * 
     * @return the userStorageKey value.
     */
    public String userStorageKey() {
        return this.userStorageKey;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containerRegistryCredentials() != null) {
            containerRegistryCredentials().validate();
        }
        if (notebookAccessKeys() != null) {
            notebookAccessKeys().validate();
        }
    }
}
