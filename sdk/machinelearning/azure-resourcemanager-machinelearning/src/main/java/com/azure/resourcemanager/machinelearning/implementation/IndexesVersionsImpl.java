// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.IndexesVersionsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.IndexVersionInner;
import com.azure.resourcemanager.machinelearning.models.IndexVersion;
import com.azure.resourcemanager.machinelearning.models.IndexesVersions;

public final class IndexesVersionsImpl implements IndexesVersions {
    private static final ClientLogger LOGGER = new ClientLogger(IndexesVersionsImpl.class);

    private final IndexesVersionsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public IndexesVersionsImpl(IndexesVersionsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<IndexVersion> listByIndex(String resourceGroupName, String workspaceName, String indexName) {
        PagedIterable<IndexVersionInner> inner
            = this.serviceClient().listByIndex(resourceGroupName, workspaceName, indexName);
        return Utils.mapPage(inner, inner1 -> new IndexVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<IndexVersion> listByIndex(String resourceGroupName, String workspaceName, String indexName,
        String label, String listViewType, Integer top, Integer skip, Integer maxPageSize, Context context) {
        PagedIterable<IndexVersionInner> inner = this.serviceClient().listByIndex(resourceGroupName, workspaceName,
            indexName, label, listViewType, top, skip, maxPageSize, context);
        return Utils.mapPage(inner, inner1 -> new IndexVersionImpl(inner1, this.manager()));
    }

    public Response<IndexVersion> getWithResponse(String resourceGroupName, String workspaceName, String indexName,
        String versionName, Context context) {
        Response<IndexVersionInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, indexName, versionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new IndexVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IndexVersion get(String resourceGroupName, String workspaceName, String indexName, String versionName) {
        IndexVersionInner inner = this.serviceClient().get(resourceGroupName, workspaceName, indexName, versionName);
        if (inner != null) {
            return new IndexVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public IndexVersion getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String indexName = Utils.getValueFromIdByName(id, "indexes");
        if (indexName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'indexes'.", id)));
        }
        String versionName = Utils.getValueFromIdByName(id, "versions");
        if (versionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, indexName, versionName, Context.NONE).getValue();
    }

    public Response<IndexVersion> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String indexName = Utils.getValueFromIdByName(id, "indexes");
        if (indexName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'indexes'.", id)));
        }
        String versionName = Utils.getValueFromIdByName(id, "versions");
        if (versionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, indexName, versionName, context);
    }

    private IndexesVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public IndexVersionImpl define(String name) {
        return new IndexVersionImpl(name, this.manager());
    }
}
