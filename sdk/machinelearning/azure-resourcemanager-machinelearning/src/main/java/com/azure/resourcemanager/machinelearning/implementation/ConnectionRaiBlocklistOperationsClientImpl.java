// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.machinelearning.fluent.ConnectionRaiBlocklistOperationsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.RaiBlocklistPropertiesBasicResourceInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ConnectionRaiBlocklistOperationsClient.
 */
public final class ConnectionRaiBlocklistOperationsClientImpl implements ConnectionRaiBlocklistOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ConnectionRaiBlocklistOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureMachineLearningWorkspacesImpl client;

    /**
     * Initializes an instance of ConnectionRaiBlocklistOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ConnectionRaiBlocklistOperationsClientImpl(AzureMachineLearningWorkspacesImpl client) {
        this.service = RestProxy.create(ConnectionRaiBlocklistOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureMachineLearningWorkspacesConnectionRaiBlocklistOperations to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureMachineLearning")
    public interface ConnectionRaiBlocklistOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiBlocklists/{raiBlocklistName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("connectionName") String connectionName, @PathParam("raiBlocklistName") String raiBlocklistName,
            @QueryParam("api-version") String apiVersion, @QueryParam("proxy-api-version") String proxyApiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiBlocklists/{raiBlocklistName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("connectionName") String connectionName, @PathParam("raiBlocklistName") String raiBlocklistName,
            @QueryParam("api-version") String apiVersion, @QueryParam("proxy-api-version") String proxyApiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiBlocklists/{raiBlocklistName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RaiBlocklistPropertiesBasicResourceInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("connectionName") String connectionName, @PathParam("raiBlocklistName") String raiBlocklistName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiBlocklists/{raiBlocklistName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<RaiBlocklistPropertiesBasicResourceInner> getSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("connectionName") String connectionName, @PathParam("raiBlocklistName") String raiBlocklistName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiBlocklists/{raiBlocklistName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("connectionName") String connectionName, @PathParam("raiBlocklistName") String raiBlocklistName,
            @QueryParam("api-version") String apiVersion, @QueryParam("proxy-api-version") String proxyApiVersion,
            @BodyParam("application/json") RaiBlocklistPropertiesBasicResourceInner body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiBlocklists/{raiBlocklistName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("connectionName") String connectionName, @PathParam("raiBlocklistName") String raiBlocklistName,
            @QueryParam("api-version") String apiVersion, @QueryParam("proxy-api-version") String proxyApiVersion,
            @BodyParam("application/json") RaiBlocklistPropertiesBasicResourceInner body,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param proxyApiVersion Api version used by proxy call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, String proxyApiVersion) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, workspaceName, connectionName, raiBlocklistName, this.client.getApiVersion(),
                proxyApiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param proxyApiVersion Api version used by proxy call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, String proxyApiVersion) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, connectionName, raiBlocklistName, this.client.getApiVersion(), proxyApiVersion, accept,
            Context.NONE);
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param proxyApiVersion Api version used by proxy call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, String proxyApiVersion, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, connectionName, raiBlocklistName, this.client.getApiVersion(), proxyApiVersion, accept,
            context);
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param proxyApiVersion Api version used by proxy call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, String proxyApiVersion) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, workspaceName,
            connectionName, raiBlocklistName, proxyApiVersion);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName) {
        final String proxyApiVersion = null;
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, workspaceName,
            connectionName, raiBlocklistName, proxyApiVersion);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param proxyApiVersion Api version used by proxy call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, String proxyApiVersion) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, workspaceName, connectionName, raiBlocklistName, proxyApiVersion);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName) {
        final String proxyApiVersion = null;
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, workspaceName, connectionName, raiBlocklistName, proxyApiVersion);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param proxyApiVersion Api version used by proxy call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, String proxyApiVersion, Context context) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, workspaceName, connectionName,
            raiBlocklistName, proxyApiVersion, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param proxyApiVersion Api version used by proxy call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String workspaceName, String connectionName,
        String raiBlocklistName, String proxyApiVersion) {
        return beginDeleteAsync(resourceGroupName, workspaceName, connectionName, raiBlocklistName, proxyApiVersion)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String workspaceName, String connectionName,
        String raiBlocklistName) {
        final String proxyApiVersion = null;
        return beginDeleteAsync(resourceGroupName, workspaceName, connectionName, raiBlocklistName, proxyApiVersion)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String workspaceName, String connectionName, String raiBlocklistName) {
        final String proxyApiVersion = null;
        beginDelete(resourceGroupName, workspaceName, connectionName, raiBlocklistName, proxyApiVersion)
            .getFinalResult();
    }

    /**
     * Deletes the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param proxyApiVersion Api version used by proxy call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String workspaceName, String connectionName, String raiBlocklistName,
        String proxyApiVersion, Context context) {
        beginDelete(resourceGroupName, workspaceName, connectionName, raiBlocklistName, proxyApiVersion, context)
            .getFinalResult();
    }

    /**
     * Gets the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified custom blocklist associated with the Azure OpenAI connection along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RaiBlocklistPropertiesBasicResourceInner>> getWithResponseAsync(String resourceGroupName,
        String workspaceName, String connectionName, String raiBlocklistName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    workspaceName, connectionName, raiBlocklistName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified custom blocklist associated with the Azure OpenAI connection on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RaiBlocklistPropertiesBasicResourceInner> getAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName) {
        return getWithResponseAsync(resourceGroupName, workspaceName, connectionName, raiBlocklistName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified custom blocklist associated with the Azure OpenAI connection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RaiBlocklistPropertiesBasicResourceInner> getWithResponse(String resourceGroupName,
        String workspaceName, String connectionName, String raiBlocklistName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, connectionName, raiBlocklistName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the specified custom blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified custom blocklist associated with the Azure OpenAI connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RaiBlocklistPropertiesBasicResourceInner get(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName) {
        return getWithResponse(resourceGroupName, workspaceName, connectionName, raiBlocklistName, Context.NONE)
            .getValue();
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @param proxyApiVersion Api version used by proxy call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, RaiBlocklistPropertiesBasicResourceInner body,
        String proxyApiVersion) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, workspaceName, connectionName, raiBlocklistName, this.client.getApiVersion(),
                proxyApiVersion, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @param proxyApiVersion Api version used by proxy call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, RaiBlocklistPropertiesBasicResourceInner body,
        String proxyApiVersion) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, connectionName, raiBlocklistName, this.client.getApiVersion(), proxyApiVersion, body, accept,
            Context.NONE);
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @param proxyApiVersion Api version used by proxy call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, RaiBlocklistPropertiesBasicResourceInner body,
        String proxyApiVersion, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (raiBlocklistName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter raiBlocklistName is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            workspaceName, connectionName, raiBlocklistName, this.client.getApiVersion(), proxyApiVersion, body, accept,
            context);
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @param proxyApiVersion Api version used by proxy call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RaiBlocklistPropertiesBasicResourceInner>, RaiBlocklistPropertiesBasicResourceInner>
        beginCreateAsync(String resourceGroupName, String workspaceName, String connectionName, String raiBlocklistName,
            RaiBlocklistPropertiesBasicResourceInner body, String proxyApiVersion) {
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, workspaceName,
            connectionName, raiBlocklistName, body, proxyApiVersion);
        return this.client
            .<RaiBlocklistPropertiesBasicResourceInner, RaiBlocklistPropertiesBasicResourceInner>getLroResult(mono,
                this.client.getHttpPipeline(), RaiBlocklistPropertiesBasicResourceInner.class,
                RaiBlocklistPropertiesBasicResourceInner.class, this.client.getContext());
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RaiBlocklistPropertiesBasicResourceInner>, RaiBlocklistPropertiesBasicResourceInner>
        beginCreateAsync(String resourceGroupName, String workspaceName, String connectionName, String raiBlocklistName,
            RaiBlocklistPropertiesBasicResourceInner body) {
        final String proxyApiVersion = null;
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, workspaceName,
            connectionName, raiBlocklistName, body, proxyApiVersion);
        return this.client
            .<RaiBlocklistPropertiesBasicResourceInner, RaiBlocklistPropertiesBasicResourceInner>getLroResult(mono,
                this.client.getHttpPipeline(), RaiBlocklistPropertiesBasicResourceInner.class,
                RaiBlocklistPropertiesBasicResourceInner.class, this.client.getContext());
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @param proxyApiVersion Api version used by proxy call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RaiBlocklistPropertiesBasicResourceInner>, RaiBlocklistPropertiesBasicResourceInner>
        beginCreate(String resourceGroupName, String workspaceName, String connectionName, String raiBlocklistName,
            RaiBlocklistPropertiesBasicResourceInner body, String proxyApiVersion) {
        Response<BinaryData> response = createWithResponse(resourceGroupName, workspaceName, connectionName,
            raiBlocklistName, body, proxyApiVersion);
        return this.client
            .<RaiBlocklistPropertiesBasicResourceInner, RaiBlocklistPropertiesBasicResourceInner>getLroResult(response,
                RaiBlocklistPropertiesBasicResourceInner.class, RaiBlocklistPropertiesBasicResourceInner.class,
                Context.NONE);
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RaiBlocklistPropertiesBasicResourceInner>, RaiBlocklistPropertiesBasicResourceInner>
        beginCreate(String resourceGroupName, String workspaceName, String connectionName, String raiBlocklistName,
            RaiBlocklistPropertiesBasicResourceInner body) {
        final String proxyApiVersion = null;
        Response<BinaryData> response = createWithResponse(resourceGroupName, workspaceName, connectionName,
            raiBlocklistName, body, proxyApiVersion);
        return this.client
            .<RaiBlocklistPropertiesBasicResourceInner, RaiBlocklistPropertiesBasicResourceInner>getLroResult(response,
                RaiBlocklistPropertiesBasicResourceInner.class, RaiBlocklistPropertiesBasicResourceInner.class,
                Context.NONE);
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @param proxyApiVersion Api version used by proxy call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RaiBlocklistPropertiesBasicResourceInner>, RaiBlocklistPropertiesBasicResourceInner>
        beginCreate(String resourceGroupName, String workspaceName, String connectionName, String raiBlocklistName,
            RaiBlocklistPropertiesBasicResourceInner body, String proxyApiVersion, Context context) {
        Response<BinaryData> response = createWithResponse(resourceGroupName, workspaceName, connectionName,
            raiBlocklistName, body, proxyApiVersion, context);
        return this.client
            .<RaiBlocklistPropertiesBasicResourceInner, RaiBlocklistPropertiesBasicResourceInner>getLroResult(response,
                RaiBlocklistPropertiesBasicResourceInner.class, RaiBlocklistPropertiesBasicResourceInner.class,
                context);
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @param proxyApiVersion Api version used by proxy call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RaiBlocklistPropertiesBasicResourceInner> createAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, RaiBlocklistPropertiesBasicResourceInner body,
        String proxyApiVersion) {
        return beginCreateAsync(resourceGroupName, workspaceName, connectionName, raiBlocklistName, body,
            proxyApiVersion).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RaiBlocklistPropertiesBasicResourceInner> createAsync(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, RaiBlocklistPropertiesBasicResourceInner body) {
        final String proxyApiVersion = null;
        return beginCreateAsync(resourceGroupName, workspaceName, connectionName, raiBlocklistName, body,
            proxyApiVersion).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RaiBlocklistPropertiesBasicResourceInner create(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, RaiBlocklistPropertiesBasicResourceInner body) {
        final String proxyApiVersion = null;
        return beginCreate(resourceGroupName, workspaceName, connectionName, raiBlocklistName, body, proxyApiVersion)
            .getFinalResult();
    }

    /**
     * Update the state of specified blocklist associated with the Azure OpenAI connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName Azure Machine Learning Workspace Name.
     * @param connectionName Friendly name of the workspace connection.
     * @param raiBlocklistName The name of the RaiBlocklist.
     * @param body The body parameter.
     * @param proxyApiVersion Api version used by proxy call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RaiBlocklistPropertiesBasicResourceInner create(String resourceGroupName, String workspaceName,
        String connectionName, String raiBlocklistName, RaiBlocklistPropertiesBasicResourceInner body,
        String proxyApiVersion, Context context) {
        return beginCreate(resourceGroupName, workspaceName, connectionName, raiBlocklistName, body, proxyApiVersion,
            context).getFinalResult();
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectionRaiBlocklistOperationsClientImpl.class);
}
