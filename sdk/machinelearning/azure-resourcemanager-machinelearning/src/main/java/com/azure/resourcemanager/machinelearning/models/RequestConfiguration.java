// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * Scoring requests configuration.
 */
@Fluent
public final class RequestConfiguration implements JsonSerializable<RequestConfiguration> {
    /*
     * The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
     */
    private Integer maxConcurrentRequestsPerInstance;

    /*
     * The scoring timeout in ISO 8601 format.
     * Defaults to 5000ms.
     */
    private Duration requestTimeout;

    /**
     * Creates an instance of RequestConfiguration class.
     */
    public RequestConfiguration() {
    }

    /**
     * Get the maxConcurrentRequestsPerInstance property: The number of maximum concurrent requests per node allowed per
     * deployment. Defaults to 1.
     * 
     * @return the maxConcurrentRequestsPerInstance value.
     */
    public Integer maxConcurrentRequestsPerInstance() {
        return this.maxConcurrentRequestsPerInstance;
    }

    /**
     * Set the maxConcurrentRequestsPerInstance property: The number of maximum concurrent requests per node allowed per
     * deployment. Defaults to 1.
     * 
     * @param maxConcurrentRequestsPerInstance the maxConcurrentRequestsPerInstance value to set.
     * @return the RequestConfiguration object itself.
     */
    public RequestConfiguration withMaxConcurrentRequestsPerInstance(Integer maxConcurrentRequestsPerInstance) {
        this.maxConcurrentRequestsPerInstance = maxConcurrentRequestsPerInstance;
        return this;
    }

    /**
     * Get the requestTimeout property: The scoring timeout in ISO 8601 format.
     * Defaults to 5000ms.
     * 
     * @return the requestTimeout value.
     */
    public Duration requestTimeout() {
        return this.requestTimeout;
    }

    /**
     * Set the requestTimeout property: The scoring timeout in ISO 8601 format.
     * Defaults to 5000ms.
     * 
     * @param requestTimeout the requestTimeout value to set.
     * @return the RequestConfiguration object itself.
     */
    public RequestConfiguration withRequestTimeout(Duration requestTimeout) {
        this.requestTimeout = requestTimeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxConcurrentRequestsPerInstance", this.maxConcurrentRequestsPerInstance);
        jsonWriter.writeStringField("requestTimeout", CoreUtils.durationToStringWithDays(this.requestTimeout));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RequestConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RequestConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RequestConfiguration.
     */
    public static RequestConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RequestConfiguration deserializedRequestConfiguration = new RequestConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxConcurrentRequestsPerInstance".equals(fieldName)) {
                    deserializedRequestConfiguration.maxConcurrentRequestsPerInstance
                        = reader.getNullable(JsonReader::getInt);
                } else if ("requestTimeout".equals(fieldName)) {
                    deserializedRequestConfiguration.requestTimeout
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRequestConfiguration;
        });
    }
}
