// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Environment configuration options.
 */
@Fluent
public final class PoolEnvironmentConfiguration {
    /*
     * ARM resource ID of the environment specification for the inference pool.
     */
    @JsonProperty(value = "environmentId")
    private String environmentId;

    /*
     * Environment variables configuration for the inference pool.
     */
    @JsonProperty(value = "environmentVariables")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> environmentVariables;

    /*
     * Liveness probe monitors the health of the container regularly.
     */
    @JsonProperty(value = "livenessProbe")
    private ProbeSettings livenessProbe;

    /*
     * Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same
     * as liveness probe.
     */
    @JsonProperty(value = "readinessProbe")
    private ProbeSettings readinessProbe;

    /*
     * This verifies whether the application within a container is started. Startup probes run before any other probe,
     * and, unless it finishes successfully, disables other probes.
     */
    @JsonProperty(value = "startupProbe")
    private ProbeSettings startupProbe;

    /**
     * Creates an instance of PoolEnvironmentConfiguration class.
     */
    public PoolEnvironmentConfiguration() {
    }

    /**
     * Get the environmentId property: ARM resource ID of the environment specification for the inference pool.
     * 
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: ARM resource ID of the environment specification for the inference pool.
     * 
     * @param environmentId the environmentId value to set.
     * @return the PoolEnvironmentConfiguration object itself.
     */
    public PoolEnvironmentConfiguration withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the environmentVariables property: Environment variables configuration for the inference pool.
     * 
     * @return the environmentVariables value.
     */
    public Map<String, String> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables configuration for the inference pool.
     * 
     * @param environmentVariables the environmentVariables value to set.
     * @return the PoolEnvironmentConfiguration object itself.
     */
    public PoolEnvironmentConfiguration withEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the livenessProbe property: Liveness probe monitors the health of the container regularly.
     * 
     * @return the livenessProbe value.
     */
    public ProbeSettings livenessProbe() {
        return this.livenessProbe;
    }

    /**
     * Set the livenessProbe property: Liveness probe monitors the health of the container regularly.
     * 
     * @param livenessProbe the livenessProbe value to set.
     * @return the PoolEnvironmentConfiguration object itself.
     */
    public PoolEnvironmentConfiguration withLivenessProbe(ProbeSettings livenessProbe) {
        this.livenessProbe = livenessProbe;
        return this;
    }

    /**
     * Get the readinessProbe property: Readiness probe validates if the container is ready to serve traffic. The
     * properties and defaults are the same as liveness probe.
     * 
     * @return the readinessProbe value.
     */
    public ProbeSettings readinessProbe() {
        return this.readinessProbe;
    }

    /**
     * Set the readinessProbe property: Readiness probe validates if the container is ready to serve traffic. The
     * properties and defaults are the same as liveness probe.
     * 
     * @param readinessProbe the readinessProbe value to set.
     * @return the PoolEnvironmentConfiguration object itself.
     */
    public PoolEnvironmentConfiguration withReadinessProbe(ProbeSettings readinessProbe) {
        this.readinessProbe = readinessProbe;
        return this;
    }

    /**
     * Get the startupProbe property: This verifies whether the application within a container is started. Startup
     * probes run before any other probe, and, unless it finishes successfully, disables other probes.
     * 
     * @return the startupProbe value.
     */
    public ProbeSettings startupProbe() {
        return this.startupProbe;
    }

    /**
     * Set the startupProbe property: This verifies whether the application within a container is started. Startup
     * probes run before any other probe, and, unless it finishes successfully, disables other probes.
     * 
     * @param startupProbe the startupProbe value to set.
     * @return the PoolEnvironmentConfiguration object itself.
     */
    public PoolEnvironmentConfiguration withStartupProbe(ProbeSettings startupProbe) {
        this.startupProbe = startupProbe;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (livenessProbe() != null) {
            livenessProbe().validate();
        }
        if (readinessProbe() != null) {
            readinessProbe().validate();
        }
        if (startupProbe() != null) {
            startupProbe().validate();
        }
    }
}
