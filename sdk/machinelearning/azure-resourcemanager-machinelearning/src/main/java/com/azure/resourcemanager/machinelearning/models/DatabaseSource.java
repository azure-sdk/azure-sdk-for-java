// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The DatabaseSource model.
 */
@Fluent
public final class DatabaseSource extends DataImportSource {
    /*
     * [Required] Specifies the type of data.
     */
    private DataImportSourceType sourceType = DataImportSourceType.DATABASE;

    /*
     * SQL Query statement for data import Database source
     */
    private String query;

    /*
     * Name of the table on data import Database source
     */
    private String tableName;

    /*
     * SQL StoredProcedure on data import Database source
     */
    private String storedProcedure;

    /*
     * SQL StoredProcedure parameters
     */
    private List<Map<String, String>> storedProcedureParams;

    /**
     * Creates an instance of DatabaseSource class.
     */
    public DatabaseSource() {
    }

    /**
     * Get the sourceType property: [Required] Specifies the type of data.
     * 
     * @return the sourceType value.
     */
    @Override
    public DataImportSourceType sourceType() {
        return this.sourceType;
    }

    /**
     * Get the query property: SQL Query statement for data import Database source.
     * 
     * @return the query value.
     */
    public String query() {
        return this.query;
    }

    /**
     * Set the query property: SQL Query statement for data import Database source.
     * 
     * @param query the query value to set.
     * @return the DatabaseSource object itself.
     */
    public DatabaseSource withQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the tableName property: Name of the table on data import Database source.
     * 
     * @return the tableName value.
     */
    public String tableName() {
        return this.tableName;
    }

    /**
     * Set the tableName property: Name of the table on data import Database source.
     * 
     * @param tableName the tableName value to set.
     * @return the DatabaseSource object itself.
     */
    public DatabaseSource withTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }

    /**
     * Get the storedProcedure property: SQL StoredProcedure on data import Database source.
     * 
     * @return the storedProcedure value.
     */
    public String storedProcedure() {
        return this.storedProcedure;
    }

    /**
     * Set the storedProcedure property: SQL StoredProcedure on data import Database source.
     * 
     * @param storedProcedure the storedProcedure value to set.
     * @return the DatabaseSource object itself.
     */
    public DatabaseSource withStoredProcedure(String storedProcedure) {
        this.storedProcedure = storedProcedure;
        return this;
    }

    /**
     * Get the storedProcedureParams property: SQL StoredProcedure parameters.
     * 
     * @return the storedProcedureParams value.
     */
    public List<Map<String, String>> storedProcedureParams() {
        return this.storedProcedureParams;
    }

    /**
     * Set the storedProcedureParams property: SQL StoredProcedure parameters.
     * 
     * @param storedProcedureParams the storedProcedureParams value to set.
     * @return the DatabaseSource object itself.
     */
    public DatabaseSource withStoredProcedureParams(List<Map<String, String>> storedProcedureParams) {
        this.storedProcedureParams = storedProcedureParams;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseSource withConnection(String connection) {
        super.withConnection(connection);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connection", connection());
        jsonWriter.writeStringField("sourceType", this.sourceType == null ? null : this.sourceType.toString());
        jsonWriter.writeStringField("query", this.query);
        jsonWriter.writeStringField("tableName", this.tableName);
        jsonWriter.writeStringField("storedProcedure", this.storedProcedure);
        jsonWriter.writeArrayField("storedProcedureParams", this.storedProcedureParams,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1.writeString(element1)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseSource.
     */
    public static DatabaseSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseSource deserializedDatabaseSource = new DatabaseSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connection".equals(fieldName)) {
                    deserializedDatabaseSource.withConnection(reader.getString());
                } else if ("sourceType".equals(fieldName)) {
                    deserializedDatabaseSource.sourceType = DataImportSourceType.fromString(reader.getString());
                } else if ("query".equals(fieldName)) {
                    deserializedDatabaseSource.query = reader.getString();
                } else if ("tableName".equals(fieldName)) {
                    deserializedDatabaseSource.tableName = reader.getString();
                } else if ("storedProcedure".equals(fieldName)) {
                    deserializedDatabaseSource.storedProcedure = reader.getString();
                } else if ("storedProcedureParams".equals(fieldName)) {
                    List<Map<String, String>> storedProcedureParams
                        = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2.getString()));
                    deserializedDatabaseSource.storedProcedureParams = storedProcedureParams;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseSource;
        });
    }
}
