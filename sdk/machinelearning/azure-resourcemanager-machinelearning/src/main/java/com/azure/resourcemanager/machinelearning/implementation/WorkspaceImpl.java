// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.machinelearning.fluent.models.ManagedNetworkSettingsInner;
import com.azure.resourcemanager.machinelearning.fluent.models.NotebookResourceInfoInner;
import com.azure.resourcemanager.machinelearning.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.machinelearning.fluent.models.WorkspaceInner;
import com.azure.resourcemanager.machinelearning.models.DiagnoseResponseResult;
import com.azure.resourcemanager.machinelearning.models.DiagnoseWorkspaceParameters;
import com.azure.resourcemanager.machinelearning.models.EncryptionProperty;
import com.azure.resourcemanager.machinelearning.models.EncryptionUpdateProperties;
import com.azure.resourcemanager.machinelearning.models.FeatureStoreSettings;
import com.azure.resourcemanager.machinelearning.models.ListNotebookKeysResult;
import com.azure.resourcemanager.machinelearning.models.ListStorageAccountKeysResult;
import com.azure.resourcemanager.machinelearning.models.ListWorkspaceKeysResult;
import com.azure.resourcemanager.machinelearning.models.ManagedNetworkSettings;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.NetworkAcls;
import com.azure.resourcemanager.machinelearning.models.NotebookAccessTokenResult;
import com.azure.resourcemanager.machinelearning.models.NotebookResourceInfo;
import com.azure.resourcemanager.machinelearning.models.PrivateEndpointConnection;
import com.azure.resourcemanager.machinelearning.models.ProvisioningState;
import com.azure.resourcemanager.machinelearning.models.PublicNetworkAccessType;
import com.azure.resourcemanager.machinelearning.models.ServerlessComputeSettings;
import com.azure.resourcemanager.machinelearning.models.ServiceManagedResourcesSettings;
import com.azure.resourcemanager.machinelearning.models.SharedPrivateLinkResource;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SystemDatastoresAuthMode;
import com.azure.resourcemanager.machinelearning.models.Workspace;
import com.azure.resourcemanager.machinelearning.models.WorkspaceHubConfig;
import com.azure.resourcemanager.machinelearning.models.WorkspaceUpdateParameters;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class WorkspaceImpl implements Workspace, Workspace.Definition, Workspace.Update {
    private WorkspaceInner innerObject;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String agentsEndpointUri() {
        return this.innerModel().agentsEndpointUri();
    }

    public Boolean allowPublicAccessWhenBehindVnet() {
        return this.innerModel().allowPublicAccessWhenBehindVnet();
    }

    public Boolean allowRoleAssignmentOnRG() {
        return this.innerModel().allowRoleAssignmentOnRG();
    }

    public String applicationInsights() {
        return this.innerModel().applicationInsights();
    }

    public List<String> associatedWorkspaces() {
        List<String> inner = this.innerModel().associatedWorkspaces();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> containerRegistries() {
        List<String> inner = this.innerModel().containerRegistries();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String containerRegistry() {
        return this.innerModel().containerRegistry();
    }

    public String description() {
        return this.innerModel().description();
    }

    public String discoveryUrl() {
        return this.innerModel().discoveryUrl();
    }

    public Boolean enableDataIsolation() {
        return this.innerModel().enableDataIsolation();
    }

    public Boolean enableServiceSideCmkEncryption() {
        return this.innerModel().enableServiceSideCmkEncryption();
    }

    public Boolean enableSimplifiedCmk() {
        return this.innerModel().enableSimplifiedCmk();
    }

    public Boolean enableSoftwareBillOfMaterials() {
        return this.innerModel().enableSoftwareBillOfMaterials();
    }

    public EncryptionProperty encryption() {
        return this.innerModel().encryption();
    }

    public List<String> existingWorkspaces() {
        List<String> inner = this.innerModel().existingWorkspaces();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public FeatureStoreSettings featureStoreSettings() {
        return this.innerModel().featureStoreSettings();
    }

    public String friendlyName() {
        return this.innerModel().friendlyName();
    }

    public Boolean hbiWorkspace() {
        return this.innerModel().hbiWorkspace();
    }

    public String hubResourceId() {
        return this.innerModel().hubResourceId();
    }

    public String imageBuildCompute() {
        return this.innerModel().imageBuildCompute();
    }

    public List<String> ipAllowlist() {
        List<String> inner = this.innerModel().ipAllowlist();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String keyVault() {
        return this.innerModel().keyVault();
    }

    public List<String> keyVaults() {
        List<String> inner = this.innerModel().keyVaults();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ManagedNetworkSettings managedNetwork() {
        ManagedNetworkSettingsInner inner = this.innerModel().managedNetwork();
        if (inner != null) {
            return new ManagedNetworkSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public String mlFlowTrackingUri() {
        return this.innerModel().mlFlowTrackingUri();
    }

    public NetworkAcls networkAcls() {
        return this.innerModel().networkAcls();
    }

    public NotebookResourceInfo notebookInfo() {
        NotebookResourceInfoInner inner = this.innerModel().notebookInfo();
        if (inner != null) {
            return new NotebookResourceInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public String primaryUserAssignedIdentity() {
        return this.innerModel().primaryUserAssignedIdentity();
    }

    public List<PrivateEndpointConnection> privateEndpointConnections() {
        List<PrivateEndpointConnectionInner> inner = this.innerModel().privateEndpointConnections();
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()))
                .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Integer privateLinkCount() {
        return this.innerModel().privateLinkCount();
    }

    public Boolean provisionNetworkNow() {
        return this.innerModel().provisionNetworkNow();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public PublicNetworkAccessType publicNetworkAccess() {
        return this.innerModel().publicNetworkAccess();
    }

    public ServerlessComputeSettings serverlessComputeSettings() {
        return this.innerModel().serverlessComputeSettings();
    }

    public ServiceManagedResourcesSettings serviceManagedResourcesSettings() {
        return this.innerModel().serviceManagedResourcesSettings();
    }

    public String serviceProvisionedResourceGroup() {
        return this.innerModel().serviceProvisionedResourceGroup();
    }

    public List<SharedPrivateLinkResource> sharedPrivateLinkResources() {
        List<SharedPrivateLinkResource> inner = this.innerModel().sharedPrivateLinkResources();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Integer softDeleteRetentionInDays() {
        return this.innerModel().softDeleteRetentionInDays();
    }

    public String storageAccount() {
        return this.innerModel().storageAccount();
    }

    public List<String> storageAccounts() {
        List<String> inner = this.innerModel().storageAccounts();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Boolean storageHnsEnabled() {
        return this.innerModel().storageHnsEnabled();
    }

    public SystemDatastoresAuthMode systemDatastoresAuthMode() {
        return this.innerModel().systemDatastoresAuthMode();
    }

    public String tenantId() {
        return this.innerModel().tenantId();
    }

    public Boolean v1LegacyMode() {
        return this.innerModel().v1LegacyMode();
    }

    public WorkspaceHubConfig workspaceHubConfig() {
        return this.innerModel().workspaceHubConfig();
    }

    public String workspaceId() {
        return this.innerModel().workspaceId();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public WorkspaceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String workspaceName;

    private WorkspaceUpdateParameters updateBody;

    public WorkspaceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Workspace create() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaces()
            .createOrUpdate(resourceGroupName, workspaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public Workspace create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaces()
            .createOrUpdate(resourceGroupName, workspaceName, this.innerModel(), context);
        return this;
    }

    WorkspaceImpl(String name, com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = new WorkspaceInner();
        this.serviceManager = serviceManager;
        this.workspaceName = name;
    }

    public WorkspaceImpl update() {
        this.updateBody = new WorkspaceUpdateParameters();
        return this;
    }

    public Workspace apply() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaces()
            .update(resourceGroupName, workspaceName, updateBody, Context.NONE);
        return this;
    }

    public Workspace apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaces()
            .update(resourceGroupName, workspaceName, updateBody, context);
        return this;
    }

    WorkspaceImpl(WorkspaceInner innerObject,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "workspaces");
    }

    public Workspace refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaces()
            .getByResourceGroupWithResponse(resourceGroupName, workspaceName, Context.NONE)
            .getValue();
        return this;
    }

    public Workspace refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaces()
            .getByResourceGroupWithResponse(resourceGroupName, workspaceName, context)
            .getValue();
        return this;
    }

    public DiagnoseResponseResult diagnose() {
        return serviceManager.workspaces().diagnose(resourceGroupName, workspaceName);
    }

    public DiagnoseResponseResult diagnose(DiagnoseWorkspaceParameters body, Context context) {
        return serviceManager.workspaces().diagnose(resourceGroupName, workspaceName, body, context);
    }

    public Response<ListWorkspaceKeysResult> listKeysWithResponse(Context context) {
        return serviceManager.workspaces().listKeysWithResponse(resourceGroupName, workspaceName, context);
    }

    public ListWorkspaceKeysResult listKeys() {
        return serviceManager.workspaces().listKeys(resourceGroupName, workspaceName);
    }

    public Response<NotebookAccessTokenResult> listNotebookAccessTokenWithResponse(Context context) {
        return serviceManager.workspaces()
            .listNotebookAccessTokenWithResponse(resourceGroupName, workspaceName, context);
    }

    public NotebookAccessTokenResult listNotebookAccessToken() {
        return serviceManager.workspaces().listNotebookAccessToken(resourceGroupName, workspaceName);
    }

    public Response<ListNotebookKeysResult> listNotebookKeysWithResponse(Context context) {
        return serviceManager.workspaces().listNotebookKeysWithResponse(resourceGroupName, workspaceName, context);
    }

    public ListNotebookKeysResult listNotebookKeys() {
        return serviceManager.workspaces().listNotebookKeys(resourceGroupName, workspaceName);
    }

    public Response<ListStorageAccountKeysResult> listStorageAccountKeysWithResponse(Context context) {
        return serviceManager.workspaces()
            .listStorageAccountKeysWithResponse(resourceGroupName, workspaceName, context);
    }

    public ListStorageAccountKeysResult listStorageAccountKeys() {
        return serviceManager.workspaces().listStorageAccountKeys(resourceGroupName, workspaceName);
    }

    public NotebookResourceInfo prepareNotebook() {
        return serviceManager.workspaces().prepareNotebook(resourceGroupName, workspaceName);
    }

    public NotebookResourceInfo prepareNotebook(Context context) {
        return serviceManager.workspaces().prepareNotebook(resourceGroupName, workspaceName, context);
    }

    public void resyncKeys() {
        serviceManager.workspaces().resyncKeys(resourceGroupName, workspaceName);
    }

    public void resyncKeys(Context context) {
        serviceManager.workspaces().resyncKeys(resourceGroupName, workspaceName, context);
    }

    public WorkspaceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public WorkspaceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public WorkspaceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public WorkspaceImpl withIdentity(ManagedServiceIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateBody.withIdentity(identity);
            return this;
        }
    }

    public WorkspaceImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public WorkspaceImpl withSku(Sku sku) {
        if (isInCreateMode()) {
            this.innerModel().withSku(sku);
            return this;
        } else {
            this.updateBody.withSku(sku);
            return this;
        }
    }

    public WorkspaceImpl withAllowPublicAccessWhenBehindVnet(Boolean allowPublicAccessWhenBehindVnet) {
        this.innerModel().withAllowPublicAccessWhenBehindVnet(allowPublicAccessWhenBehindVnet);
        return this;
    }

    public WorkspaceImpl withAllowRoleAssignmentOnRG(Boolean allowRoleAssignmentOnRG) {
        if (isInCreateMode()) {
            this.innerModel().withAllowRoleAssignmentOnRG(allowRoleAssignmentOnRG);
            return this;
        } else {
            this.updateBody.withAllowRoleAssignmentOnRG(allowRoleAssignmentOnRG);
            return this;
        }
    }

    public WorkspaceImpl withApplicationInsights(String applicationInsights) {
        if (isInCreateMode()) {
            this.innerModel().withApplicationInsights(applicationInsights);
            return this;
        } else {
            this.updateBody.withApplicationInsights(applicationInsights);
            return this;
        }
    }

    public WorkspaceImpl withAssociatedWorkspaces(List<String> associatedWorkspaces) {
        this.innerModel().withAssociatedWorkspaces(associatedWorkspaces);
        return this;
    }

    public WorkspaceImpl withContainerRegistries(List<String> containerRegistries) {
        this.innerModel().withContainerRegistries(containerRegistries);
        return this;
    }

    public WorkspaceImpl withContainerRegistry(String containerRegistry) {
        if (isInCreateMode()) {
            this.innerModel().withContainerRegistry(containerRegistry);
            return this;
        } else {
            this.updateBody.withContainerRegistry(containerRegistry);
            return this;
        }
    }

    public WorkspaceImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.innerModel().withDescription(description);
            return this;
        } else {
            this.updateBody.withDescription(description);
            return this;
        }
    }

    public WorkspaceImpl withDiscoveryUrl(String discoveryUrl) {
        this.innerModel().withDiscoveryUrl(discoveryUrl);
        return this;
    }

    public WorkspaceImpl withEnableDataIsolation(Boolean enableDataIsolation) {
        if (isInCreateMode()) {
            this.innerModel().withEnableDataIsolation(enableDataIsolation);
            return this;
        } else {
            this.updateBody.withEnableDataIsolation(enableDataIsolation);
            return this;
        }
    }

    public WorkspaceImpl withEnableServiceSideCmkEncryption(Boolean enableServiceSideCmkEncryption) {
        this.innerModel().withEnableServiceSideCmkEncryption(enableServiceSideCmkEncryption);
        return this;
    }

    public WorkspaceImpl withEnableSimplifiedCmk(Boolean enableSimplifiedCmk) {
        this.innerModel().withEnableSimplifiedCmk(enableSimplifiedCmk);
        return this;
    }

    public WorkspaceImpl withEnableSoftwareBillOfMaterials(Boolean enableSoftwareBillOfMaterials) {
        if (isInCreateMode()) {
            this.innerModel().withEnableSoftwareBillOfMaterials(enableSoftwareBillOfMaterials);
            return this;
        } else {
            this.updateBody.withEnableSoftwareBillOfMaterials(enableSoftwareBillOfMaterials);
            return this;
        }
    }

    public WorkspaceImpl withEncryption(EncryptionProperty encryption) {
        this.innerModel().withEncryption(encryption);
        return this;
    }

    public WorkspaceImpl withExistingWorkspaces(List<String> existingWorkspaces) {
        this.innerModel().withExistingWorkspaces(existingWorkspaces);
        return this;
    }

    public WorkspaceImpl withFeatureStoreSettings(FeatureStoreSettings featureStoreSettings) {
        if (isInCreateMode()) {
            this.innerModel().withFeatureStoreSettings(featureStoreSettings);
            return this;
        } else {
            this.updateBody.withFeatureStoreSettings(featureStoreSettings);
            return this;
        }
    }

    public WorkspaceImpl withFriendlyName(String friendlyName) {
        if (isInCreateMode()) {
            this.innerModel().withFriendlyName(friendlyName);
            return this;
        } else {
            this.updateBody.withFriendlyName(friendlyName);
            return this;
        }
    }

    public WorkspaceImpl withHbiWorkspace(Boolean hbiWorkspace) {
        this.innerModel().withHbiWorkspace(hbiWorkspace);
        return this;
    }

    public WorkspaceImpl withHubResourceId(String hubResourceId) {
        this.innerModel().withHubResourceId(hubResourceId);
        return this;
    }

    public WorkspaceImpl withImageBuildCompute(String imageBuildCompute) {
        if (isInCreateMode()) {
            this.innerModel().withImageBuildCompute(imageBuildCompute);
            return this;
        } else {
            this.updateBody.withImageBuildCompute(imageBuildCompute);
            return this;
        }
    }

    public WorkspaceImpl withIpAllowlist(List<String> ipAllowlist) {
        if (isInCreateMode()) {
            this.innerModel().withIpAllowlist(ipAllowlist);
            return this;
        } else {
            this.updateBody.withIpAllowlist(ipAllowlist);
            return this;
        }
    }

    public WorkspaceImpl withKeyVault(String keyVault) {
        this.innerModel().withKeyVault(keyVault);
        return this;
    }

    public WorkspaceImpl withKeyVaults(List<String> keyVaults) {
        this.innerModel().withKeyVaults(keyVaults);
        return this;
    }

    public WorkspaceImpl withManagedNetwork(ManagedNetworkSettingsInner managedNetwork) {
        if (isInCreateMode()) {
            this.innerModel().withManagedNetwork(managedNetwork);
            return this;
        } else {
            this.updateBody.withManagedNetwork(managedNetwork);
            return this;
        }
    }

    public WorkspaceImpl withNetworkAcls(NetworkAcls networkAcls) {
        if (isInCreateMode()) {
            this.innerModel().withNetworkAcls(networkAcls);
            return this;
        } else {
            this.updateBody.withNetworkAcls(networkAcls);
            return this;
        }
    }

    public WorkspaceImpl withPrimaryUserAssignedIdentity(String primaryUserAssignedIdentity) {
        if (isInCreateMode()) {
            this.innerModel().withPrimaryUserAssignedIdentity(primaryUserAssignedIdentity);
            return this;
        } else {
            this.updateBody.withPrimaryUserAssignedIdentity(primaryUserAssignedIdentity);
            return this;
        }
    }

    public WorkspaceImpl withProvisionNetworkNow(Boolean provisionNetworkNow) {
        this.innerModel().withProvisionNetworkNow(provisionNetworkNow);
        return this;
    }

    public WorkspaceImpl withPublicNetworkAccess(PublicNetworkAccessType publicNetworkAccess) {
        if (isInCreateMode()) {
            this.innerModel().withPublicNetworkAccess(publicNetworkAccess);
            return this;
        } else {
            this.updateBody.withPublicNetworkAccess(publicNetworkAccess);
            return this;
        }
    }

    public WorkspaceImpl withServerlessComputeSettings(ServerlessComputeSettings serverlessComputeSettings) {
        if (isInCreateMode()) {
            this.innerModel().withServerlessComputeSettings(serverlessComputeSettings);
            return this;
        } else {
            this.updateBody.withServerlessComputeSettings(serverlessComputeSettings);
            return this;
        }
    }

    public WorkspaceImpl
        withServiceManagedResourcesSettings(ServiceManagedResourcesSettings serviceManagedResourcesSettings) {
        if (isInCreateMode()) {
            this.innerModel().withServiceManagedResourcesSettings(serviceManagedResourcesSettings);
            return this;
        } else {
            this.updateBody.withServiceManagedResourcesSettings(serviceManagedResourcesSettings);
            return this;
        }
    }

    public WorkspaceImpl withSharedPrivateLinkResources(List<SharedPrivateLinkResource> sharedPrivateLinkResources) {
        this.innerModel().withSharedPrivateLinkResources(sharedPrivateLinkResources);
        return this;
    }

    public WorkspaceImpl withSoftDeleteRetentionInDays(Integer softDeleteRetentionInDays) {
        if (isInCreateMode()) {
            this.innerModel().withSoftDeleteRetentionInDays(softDeleteRetentionInDays);
            return this;
        } else {
            this.updateBody.withSoftDeleteRetentionInDays(softDeleteRetentionInDays);
            return this;
        }
    }

    public WorkspaceImpl withStorageAccount(String storageAccount) {
        this.innerModel().withStorageAccount(storageAccount);
        return this;
    }

    public WorkspaceImpl withStorageAccounts(List<String> storageAccounts) {
        this.innerModel().withStorageAccounts(storageAccounts);
        return this;
    }

    public WorkspaceImpl withSystemDatastoresAuthMode(SystemDatastoresAuthMode systemDatastoresAuthMode) {
        if (isInCreateMode()) {
            this.innerModel().withSystemDatastoresAuthMode(systemDatastoresAuthMode);
            return this;
        } else {
            this.updateBody.withSystemDatastoresAuthMode(systemDatastoresAuthMode);
            return this;
        }
    }

    public WorkspaceImpl withV1LegacyMode(Boolean v1LegacyMode) {
        if (isInCreateMode()) {
            this.innerModel().withV1LegacyMode(v1LegacyMode);
            return this;
        } else {
            this.updateBody.withV1LegacyMode(v1LegacyMode);
            return this;
        }
    }

    public WorkspaceImpl withWorkspaceHubConfig(WorkspaceHubConfig workspaceHubConfig) {
        this.innerModel().withWorkspaceHubConfig(workspaceHubConfig);
        return this;
    }

    public WorkspaceImpl withEncryption(EncryptionUpdateProperties encryption) {
        this.updateBody.withEncryption(encryption);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
