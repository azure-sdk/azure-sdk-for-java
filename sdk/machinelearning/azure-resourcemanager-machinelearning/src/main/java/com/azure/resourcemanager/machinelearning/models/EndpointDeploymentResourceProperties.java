// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The EndpointDeploymentResourceProperties model.
 */
@Fluent
public class EndpointDeploymentResourceProperties implements JsonSerializable<EndpointDeploymentResourceProperties> {
    /*
     * Kind of the deployment.
     */
    private String type = "EndpointDeploymentResourceProperties";

    /*
     * The failure reason if the creation failed.
     */
    private String failureReason;

    /*
     * Read-only provision state status property.
     */
    private DefaultResourceProvisioningState provisioningState;

    /**
     * Creates an instance of EndpointDeploymentResourceProperties class.
     */
    public EndpointDeploymentResourceProperties() {
    }

    /**
     * Get the type property: Kind of the deployment.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the failureReason property: The failure reason if the creation failed.
     * 
     * @return the failureReason value.
     */
    public String failureReason() {
        return this.failureReason;
    }

    /**
     * Set the failureReason property: The failure reason if the creation failed.
     * 
     * @param failureReason the failureReason value to set.
     * @return the EndpointDeploymentResourceProperties object itself.
     */
    public EndpointDeploymentResourceProperties withFailureReason(String failureReason) {
        this.failureReason = failureReason;
        return this;
    }

    /**
     * Get the provisioningState property: Read-only provision state status property.
     * 
     * @return the provisioningState value.
     */
    public DefaultResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Read-only provision state status property.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the EndpointDeploymentResourceProperties object itself.
     */
    EndpointDeploymentResourceProperties withProvisioningState(DefaultResourceProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("failureReason", this.failureReason);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointDeploymentResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointDeploymentResourceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EndpointDeploymentResourceProperties.
     */
    public static EndpointDeploymentResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Azure.ContentSafety".equals(discriminatorValue)) {
                    return ContentSafetyEndpointDeploymentResourceProperties.fromJson(readerToUse.reset());
                } else if ("managedOnlineEndpoint".equals(discriminatorValue)) {
                    return ManagedOnlineEndpointDeploymentResourceProperties.fromJson(readerToUse.reset());
                } else if ("Azure.OpenAI".equals(discriminatorValue)) {
                    return OpenAIEndpointDeploymentResourceProperties.fromJson(readerToUse.reset());
                } else if ("Azure.Speech".equals(discriminatorValue)) {
                    return SpeechEndpointDeploymentResourceProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static EndpointDeploymentResourceProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointDeploymentResourceProperties deserializedEndpointDeploymentResourceProperties
                = new EndpointDeploymentResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedEndpointDeploymentResourceProperties.type = reader.getString();
                } else if ("failureReason".equals(fieldName)) {
                    deserializedEndpointDeploymentResourceProperties.failureReason = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEndpointDeploymentResourceProperties.provisioningState
                        = DefaultResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointDeploymentResourceProperties;
        });
    }
}
