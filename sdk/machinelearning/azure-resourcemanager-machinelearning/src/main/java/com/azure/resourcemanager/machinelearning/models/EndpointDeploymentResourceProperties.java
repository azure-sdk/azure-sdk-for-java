// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The EndpointDeploymentResourceProperties model.
 */
@Fluent
public final class EndpointDeploymentResourceProperties extends CognitiveServiceEndpointDeploymentResourceProperties {
    /*
     * Read-only provision state status property.
     */
    private DefaultResourceProvisioningState provisioningState;

    /**
     * Creates an instance of EndpointDeploymentResourceProperties class.
     */
    public EndpointDeploymentResourceProperties() {
    }

    /**
     * Get the provisioningState property: Read-only provision state status property.
     * 
     * @return the provisioningState value.
     */
    public DefaultResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EndpointDeploymentResourceProperties withModel(EndpointDeploymentModel model) {
        super.withModel(model);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EndpointDeploymentResourceProperties withRaiPolicyName(String raiPolicyName) {
        super.withRaiPolicyName(raiPolicyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EndpointDeploymentResourceProperties
        withVersionUpgradeOption(DeploymentModelVersionUpgradeOption versionUpgradeOption) {
        super.withVersionUpgradeOption(versionUpgradeOption);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("model", model());
        jsonWriter.writeStringField("raiPolicyName", raiPolicyName());
        jsonWriter.writeStringField("versionUpgradeOption",
            versionUpgradeOption() == null ? null : versionUpgradeOption().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointDeploymentResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointDeploymentResourceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EndpointDeploymentResourceProperties.
     */
    public static EndpointDeploymentResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointDeploymentResourceProperties deserializedEndpointDeploymentResourceProperties
                = new EndpointDeploymentResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("model".equals(fieldName)) {
                    deserializedEndpointDeploymentResourceProperties
                        .withModel(EndpointDeploymentModel.fromJson(reader));
                } else if ("raiPolicyName".equals(fieldName)) {
                    deserializedEndpointDeploymentResourceProperties.withRaiPolicyName(reader.getString());
                } else if ("versionUpgradeOption".equals(fieldName)) {
                    deserializedEndpointDeploymentResourceProperties
                        .withVersionUpgradeOption(DeploymentModelVersionUpgradeOption.fromString(reader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEndpointDeploymentResourceProperties.provisioningState
                        = DefaultResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointDeploymentResourceProperties;
        });
    }
}
