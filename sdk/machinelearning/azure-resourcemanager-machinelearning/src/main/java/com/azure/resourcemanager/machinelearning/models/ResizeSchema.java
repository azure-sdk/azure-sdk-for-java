// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema for Compute Instance resize.
 */
@Fluent
public final class ResizeSchema implements JsonSerializable<ResizeSchema> {
    /*
     * The name of the virtual machine size.
     */
    private String targetVMSize;

    /**
     * Creates an instance of ResizeSchema class.
     */
    public ResizeSchema() {
    }

    /**
     * Get the targetVMSize property: The name of the virtual machine size.
     * 
     * @return the targetVMSize value.
     */
    public String targetVMSize() {
        return this.targetVMSize;
    }

    /**
     * Set the targetVMSize property: The name of the virtual machine size.
     * 
     * @param targetVMSize the targetVMSize value to set.
     * @return the ResizeSchema object itself.
     */
    public ResizeSchema withTargetVMSize(String targetVMSize) {
        this.targetVMSize = targetVMSize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetVMSize", this.targetVMSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResizeSchema from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResizeSchema if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResizeSchema.
     */
    public static ResizeSchema fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResizeSchema deserializedResizeSchema = new ResizeSchema();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetVMSize".equals(fieldName)) {
                    deserializedResizeSchema.targetVMSize = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResizeSchema;
        });
    }
}
