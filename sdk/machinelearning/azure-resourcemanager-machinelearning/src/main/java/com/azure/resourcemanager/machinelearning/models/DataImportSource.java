// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DataImportSource model.
 */
@Fluent
public class DataImportSource implements JsonSerializable<DataImportSource> {
    /*
     * [Required] Specifies the type of data.
     */
    private DataImportSourceType sourceType = DataImportSourceType.fromString("DataImportSource");

    /*
     * Workspace connection for data import source storage
     */
    private String connection;

    /**
     * Creates an instance of DataImportSource class.
     */
    public DataImportSource() {
    }

    /**
     * Get the sourceType property: [Required] Specifies the type of data.
     * 
     * @return the sourceType value.
     */
    public DataImportSourceType sourceType() {
        return this.sourceType;
    }

    /**
     * Get the connection property: Workspace connection for data import source storage.
     * 
     * @return the connection value.
     */
    public String connection() {
        return this.connection;
    }

    /**
     * Set the connection property: Workspace connection for data import source storage.
     * 
     * @param connection the connection value to set.
     * @return the DataImportSource object itself.
     */
    public DataImportSource withConnection(String connection) {
        this.connection = connection;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceType", this.sourceType == null ? null : this.sourceType.toString());
        jsonWriter.writeStringField("connection", this.connection);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataImportSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataImportSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataImportSource.
     */
    public static DataImportSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("sourceType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("database".equals(discriminatorValue)) {
                    return DatabaseSource.fromJson(readerToUse.reset());
                } else if ("file_system".equals(discriminatorValue)) {
                    return FileSystemSource.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DataImportSource fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataImportSource deserializedDataImportSource = new DataImportSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceType".equals(fieldName)) {
                    deserializedDataImportSource.sourceType = DataImportSourceType.fromString(reader.getString());
                } else if ("connection".equals(fieldName)) {
                    deserializedDataImportSource.connection = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataImportSource;
        });
    }
}
