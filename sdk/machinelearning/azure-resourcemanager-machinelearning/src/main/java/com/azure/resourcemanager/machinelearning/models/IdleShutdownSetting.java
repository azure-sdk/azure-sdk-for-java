// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Stops compute instance after user defined period of inactivity.
 */
@Fluent
public final class IdleShutdownSetting implements JsonSerializable<IdleShutdownSetting> {
    /*
     * Time is defined in ISO8601 format. Minimum is 15 min, maximum is 3 days.
     */
    private String idleTimeBeforeShutdown;

    /**
     * Creates an instance of IdleShutdownSetting class.
     */
    public IdleShutdownSetting() {
    }

    /**
     * Get the idleTimeBeforeShutdown property: Time is defined in ISO8601 format. Minimum is 15 min, maximum is 3 days.
     * 
     * @return the idleTimeBeforeShutdown value.
     */
    public String idleTimeBeforeShutdown() {
        return this.idleTimeBeforeShutdown;
    }

    /**
     * Set the idleTimeBeforeShutdown property: Time is defined in ISO8601 format. Minimum is 15 min, maximum is 3 days.
     * 
     * @param idleTimeBeforeShutdown the idleTimeBeforeShutdown value to set.
     * @return the IdleShutdownSetting object itself.
     */
    public IdleShutdownSetting withIdleTimeBeforeShutdown(String idleTimeBeforeShutdown) {
        this.idleTimeBeforeShutdown = idleTimeBeforeShutdown;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("idleTimeBeforeShutdown", this.idleTimeBeforeShutdown);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IdleShutdownSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IdleShutdownSetting if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IdleShutdownSetting.
     */
    public static IdleShutdownSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IdleShutdownSetting deserializedIdleShutdownSetting = new IdleShutdownSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("idleTimeBeforeShutdown".equals(fieldName)) {
                    deserializedIdleShutdownSetting.idleTimeBeforeShutdown = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIdleShutdownSetting;
        });
    }
}
