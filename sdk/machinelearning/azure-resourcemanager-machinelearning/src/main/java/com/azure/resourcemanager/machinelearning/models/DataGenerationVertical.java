// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DataGenerationVertical model.
 */
@Fluent
public class DataGenerationVertical implements JsonSerializable<DataGenerationVertical> {
    /*
     * [Required] Enum to determine the type of Data Generation.
     */
    private DataGenerationType dataGenerationType = DataGenerationType.fromString("DataGenerationVertical");

    /*
     * [Required] DataGeneration Task type.
     */
    private DataGenerationTaskType dataGenerationTaskType;

    /*
     * PromptSettings.
     */
    private PromptSettings promptSettings;

    /*
     * [Required] Teacher Model Endpoint Details.
     */
    private TeacherModelEndpoint teacherModelEndpoint;

    /*
     * The teacherModelSettings property.
     */
    private TeacherModelSettings teacherModelSettings;

    /**
     * Creates an instance of DataGenerationVertical class.
     */
    public DataGenerationVertical() {
    }

    /**
     * Get the dataGenerationType property: [Required] Enum to determine the type of Data Generation.
     * 
     * @return the dataGenerationType value.
     */
    public DataGenerationType dataGenerationType() {
        return this.dataGenerationType;
    }

    /**
     * Get the dataGenerationTaskType property: [Required] DataGeneration Task type.
     * 
     * @return the dataGenerationTaskType value.
     */
    public DataGenerationTaskType dataGenerationTaskType() {
        return this.dataGenerationTaskType;
    }

    /**
     * Set the dataGenerationTaskType property: [Required] DataGeneration Task type.
     * 
     * @param dataGenerationTaskType the dataGenerationTaskType value to set.
     * @return the DataGenerationVertical object itself.
     */
    public DataGenerationVertical withDataGenerationTaskType(DataGenerationTaskType dataGenerationTaskType) {
        this.dataGenerationTaskType = dataGenerationTaskType;
        return this;
    }

    /**
     * Get the promptSettings property: PromptSettings.
     * 
     * @return the promptSettings value.
     */
    public PromptSettings promptSettings() {
        return this.promptSettings;
    }

    /**
     * Set the promptSettings property: PromptSettings.
     * 
     * @param promptSettings the promptSettings value to set.
     * @return the DataGenerationVertical object itself.
     */
    public DataGenerationVertical withPromptSettings(PromptSettings promptSettings) {
        this.promptSettings = promptSettings;
        return this;
    }

    /**
     * Get the teacherModelEndpoint property: [Required] Teacher Model Endpoint Details.
     * 
     * @return the teacherModelEndpoint value.
     */
    public TeacherModelEndpoint teacherModelEndpoint() {
        return this.teacherModelEndpoint;
    }

    /**
     * Set the teacherModelEndpoint property: [Required] Teacher Model Endpoint Details.
     * 
     * @param teacherModelEndpoint the teacherModelEndpoint value to set.
     * @return the DataGenerationVertical object itself.
     */
    public DataGenerationVertical withTeacherModelEndpoint(TeacherModelEndpoint teacherModelEndpoint) {
        this.teacherModelEndpoint = teacherModelEndpoint;
        return this;
    }

    /**
     * Get the teacherModelSettings property: The teacherModelSettings property.
     * 
     * @return the teacherModelSettings value.
     */
    public TeacherModelSettings teacherModelSettings() {
        return this.teacherModelSettings;
    }

    /**
     * Set the teacherModelSettings property: The teacherModelSettings property.
     * 
     * @param teacherModelSettings the teacherModelSettings value to set.
     * @return the DataGenerationVertical object itself.
     */
    public DataGenerationVertical withTeacherModelSettings(TeacherModelSettings teacherModelSettings) {
        this.teacherModelSettings = teacherModelSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataGenerationTaskType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataGenerationTaskType in model DataGenerationVertical"));
        }
        if (promptSettings() != null) {
            promptSettings().validate();
        }
        if (teacherModelEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property teacherModelEndpoint in model DataGenerationVertical"));
        } else {
            teacherModelEndpoint().validate();
        }
        if (teacherModelSettings() != null) {
            teacherModelSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataGenerationVertical.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataGenerationTaskType",
            this.dataGenerationTaskType == null ? null : this.dataGenerationTaskType.toString());
        jsonWriter.writeJsonField("teacherModelEndpoint", this.teacherModelEndpoint);
        jsonWriter.writeStringField("dataGenerationType",
            this.dataGenerationType == null ? null : this.dataGenerationType.toString());
        jsonWriter.writeJsonField("promptSettings", this.promptSettings);
        jsonWriter.writeJsonField("teacherModelSettings", this.teacherModelSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataGenerationVertical from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataGenerationVertical if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataGenerationVertical.
     */
    public static DataGenerationVertical fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("dataGenerationType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("LabelGeneration".equals(discriminatorValue)) {
                    return LabelGeneration.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DataGenerationVertical fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataGenerationVertical deserializedDataGenerationVertical = new DataGenerationVertical();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataGenerationTaskType".equals(fieldName)) {
                    deserializedDataGenerationVertical.dataGenerationTaskType
                        = DataGenerationTaskType.fromString(reader.getString());
                } else if ("teacherModelEndpoint".equals(fieldName)) {
                    deserializedDataGenerationVertical.teacherModelEndpoint = TeacherModelEndpoint.fromJson(reader);
                } else if ("dataGenerationType".equals(fieldName)) {
                    deserializedDataGenerationVertical.dataGenerationType
                        = DataGenerationType.fromString(reader.getString());
                } else if ("promptSettings".equals(fieldName)) {
                    deserializedDataGenerationVertical.promptSettings = PromptSettings.fromJson(reader);
                } else if ("teacherModelSettings".equals(fieldName)) {
                    deserializedDataGenerationVertical.teacherModelSettings = TeacherModelSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataGenerationVertical;
        });
    }
}
