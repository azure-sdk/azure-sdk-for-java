// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.EndpointsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.AccountApiKeysInner;
import com.azure.resourcemanager.machinelearning.fluent.models.EndpointKeysInner;
import com.azure.resourcemanager.machinelearning.fluent.models.EndpointModelPropertiesInner;
import com.azure.resourcemanager.machinelearning.fluent.models.EndpointResourcePropertiesBasicResourceInner;
import com.azure.resourcemanager.machinelearning.models.AccountApiKeys;
import com.azure.resourcemanager.machinelearning.models.EndpointKeys;
import com.azure.resourcemanager.machinelearning.models.EndpointModelProperties;
import com.azure.resourcemanager.machinelearning.models.EndpointResourcePropertiesBasicResource;
import com.azure.resourcemanager.machinelearning.models.Endpoints;
import com.azure.resourcemanager.machinelearning.models.EndpointType;
import com.azure.resourcemanager.machinelearning.models.RegenerateServiceAccountKeyContent;

public final class EndpointsImpl implements Endpoints {
    private static final ClientLogger LOGGER = new ClientLogger(EndpointsImpl.class);

    private final EndpointsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public EndpointsImpl(EndpointsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<EndpointResourcePropertiesBasicResource> list(String resourceGroupName, String workspaceName) {
        PagedIterable<EndpointResourcePropertiesBasicResourceInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new EndpointResourcePropertiesBasicResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EndpointResourcePropertiesBasicResource> list(String resourceGroupName, String workspaceName,
        EndpointType endpointType, Boolean includeOnlineEndpoints, Boolean includeServerlessEndpoints,
        Boolean includeConnections, String skip, String expand, Context context) {
        PagedIterable<EndpointResourcePropertiesBasicResourceInner> inner = this.serviceClient()
            .list(resourceGroupName, workspaceName, endpointType, includeOnlineEndpoints, includeServerlessEndpoints,
                includeConnections, skip, expand, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new EndpointResourcePropertiesBasicResourceImpl(inner1, this.manager()));
    }

    public Response<EndpointResourcePropertiesBasicResource> getWithResponse(String resourceGroupName,
        String workspaceName, String endpointName, Context context) {
        Response<EndpointResourcePropertiesBasicResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, endpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EndpointResourcePropertiesBasicResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EndpointResourcePropertiesBasicResource get(String resourceGroupName, String workspaceName,
        String endpointName) {
        EndpointResourcePropertiesBasicResourceInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, endpointName);
        if (inner != null) {
            return new EndpointResourcePropertiesBasicResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EndpointKeys> listKeysWithResponse(String resourceGroupName, String workspaceName,
        String endpointName, Context context) {
        Response<EndpointKeysInner> inner
            = this.serviceClient().listKeysWithResponse(resourceGroupName, workspaceName, endpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EndpointKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EndpointKeys listKeys(String resourceGroupName, String workspaceName, String endpointName) {
        EndpointKeysInner inner = this.serviceClient().listKeys(resourceGroupName, workspaceName, endpointName);
        if (inner != null) {
            return new EndpointKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<EndpointModelProperties> getModels(String resourceGroupName, String workspaceName,
        String endpointName) {
        PagedIterable<EndpointModelPropertiesInner> inner
            = this.serviceClient().getModels(resourceGroupName, workspaceName, endpointName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EndpointModelPropertiesImpl(inner1, this.manager()));
    }

    public PagedIterable<EndpointModelProperties> getModels(String resourceGroupName, String workspaceName,
        String endpointName, Context context) {
        PagedIterable<EndpointModelPropertiesInner> inner
            = this.serviceClient().getModels(resourceGroupName, workspaceName, endpointName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EndpointModelPropertiesImpl(inner1, this.manager()));
    }

    public Response<AccountApiKeys> regenerateKeysWithResponse(String resourceGroupName, String workspaceName,
        String endpointName, RegenerateServiceAccountKeyContent body, Context context) {
        Response<AccountApiKeysInner> inner = this.serviceClient()
            .regenerateKeysWithResponse(resourceGroupName, workspaceName, endpointName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AccountApiKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AccountApiKeys regenerateKeys(String resourceGroupName, String workspaceName, String endpointName,
        RegenerateServiceAccountKeyContent body) {
        AccountApiKeysInner inner
            = this.serviceClient().regenerateKeys(resourceGroupName, workspaceName, endpointName, body);
        if (inner != null) {
            return new AccountApiKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EndpointResourcePropertiesBasicResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, endpointName, Context.NONE).getValue();
    }

    public Response<EndpointResourcePropertiesBasicResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, endpointName, context);
    }

    private EndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public EndpointResourcePropertiesBasicResourceImpl define(String name) {
        return new EndpointResourcePropertiesBasicResourceImpl(name, this.manager());
    }
}
