// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.Map;

/**
 * Generation token usage signal definition.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "signalType",
    defaultImpl = GenerationTokenUsageSignal.class,
    visible = true)
@JsonTypeName("GenerationTokenStatistics")
@Fluent
public final class GenerationTokenUsageSignal extends MonitoringSignalBase {
    /*
     * [Required] Specifies the type of signal to monitor.
     */
    @JsonTypeId
    @JsonProperty(value = "signalType", required = true)
    private MonitoringSignalType signalType = MonitoringSignalType.GENERATION_TOKEN_STATISTICS;

    /*
     * [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
     */
    @JsonProperty(value = "metricThresholds", required = true)
    private List<GenerationTokenUsageMetricThreshold> metricThresholds;

    /*
     * Gets or sets the production data for computing metrics.
     */
    @JsonProperty(value = "productionData")
    private List<MonitoringInputDataBase> productionData;

    /*
     * [Required] The sample rate of the production data, should be greater than 0 and at most 1.
     */
    @JsonProperty(value = "samplingRate", required = true)
    private double samplingRate;

    /**
     * Creates an instance of GenerationTokenUsageSignal class.
     */
    public GenerationTokenUsageSignal() {
    }

    /**
     * Get the signalType property: [Required] Specifies the type of signal to monitor.
     * 
     * @return the signalType value.
     */
    @Override
    public MonitoringSignalType signalType() {
        return this.signalType;
    }

    /**
     * Get the metricThresholds property: [Required] Gets or sets the metrics to calculate and the corresponding
     * thresholds.
     * 
     * @return the metricThresholds value.
     */
    public List<GenerationTokenUsageMetricThreshold> metricThresholds() {
        return this.metricThresholds;
    }

    /**
     * Set the metricThresholds property: [Required] Gets or sets the metrics to calculate and the corresponding
     * thresholds.
     * 
     * @param metricThresholds the metricThresholds value to set.
     * @return the GenerationTokenUsageSignal object itself.
     */
    public GenerationTokenUsageSignal withMetricThresholds(List<GenerationTokenUsageMetricThreshold> metricThresholds) {
        this.metricThresholds = metricThresholds;
        return this;
    }

    /**
     * Get the productionData property: Gets or sets the production data for computing metrics.
     * 
     * @return the productionData value.
     */
    public List<MonitoringInputDataBase> productionData() {
        return this.productionData;
    }

    /**
     * Set the productionData property: Gets or sets the production data for computing metrics.
     * 
     * @param productionData the productionData value to set.
     * @return the GenerationTokenUsageSignal object itself.
     */
    public GenerationTokenUsageSignal withProductionData(List<MonitoringInputDataBase> productionData) {
        this.productionData = productionData;
        return this;
    }

    /**
     * Get the samplingRate property: [Required] The sample rate of the production data, should be greater than 0 and at
     * most 1.
     * 
     * @return the samplingRate value.
     */
    public double samplingRate() {
        return this.samplingRate;
    }

    /**
     * Set the samplingRate property: [Required] The sample rate of the production data, should be greater than 0 and at
     * most 1.
     * 
     * @param samplingRate the samplingRate value to set.
     * @return the GenerationTokenUsageSignal object itself.
     */
    public GenerationTokenUsageSignal withSamplingRate(double samplingRate) {
        this.samplingRate = samplingRate;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GenerationTokenUsageSignal withNotificationTypes(List<MonitoringNotificationType> notificationTypes) {
        super.withNotificationTypes(notificationTypes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GenerationTokenUsageSignal withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (metricThresholds() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property metricThresholds in model GenerationTokenUsageSignal"));
        } else {
            metricThresholds().forEach(e -> e.validate());
        }
        if (productionData() != null) {
            productionData().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GenerationTokenUsageSignal.class);
}
