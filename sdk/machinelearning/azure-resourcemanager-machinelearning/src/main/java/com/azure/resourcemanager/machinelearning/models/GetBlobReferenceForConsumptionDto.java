// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The GetBlobReferenceForConsumptionDto model.
 */
@Fluent
public final class GetBlobReferenceForConsumptionDto implements JsonSerializable<GetBlobReferenceForConsumptionDto> {
    /*
     * Blob uri, example: https://blob.windows.core.net/Container/Path
     */
    private String blobUri;

    /*
     * Credential info to access storage account
     */
    private DataReferenceCredential credential;

    /*
     * The ARM id of the storage account
     */
    private String storageAccountArmId;

    /**
     * Creates an instance of GetBlobReferenceForConsumptionDto class.
     */
    public GetBlobReferenceForConsumptionDto() {
    }

    /**
     * Get the blobUri property: Blob uri, example: https://blob.windows.core.net/Container/Path.
     * 
     * @return the blobUri value.
     */
    public String blobUri() {
        return this.blobUri;
    }

    /**
     * Set the blobUri property: Blob uri, example: https://blob.windows.core.net/Container/Path.
     * 
     * @param blobUri the blobUri value to set.
     * @return the GetBlobReferenceForConsumptionDto object itself.
     */
    public GetBlobReferenceForConsumptionDto withBlobUri(String blobUri) {
        this.blobUri = blobUri;
        return this;
    }

    /**
     * Get the credential property: Credential info to access storage account.
     * 
     * @return the credential value.
     */
    public DataReferenceCredential credential() {
        return this.credential;
    }

    /**
     * Set the credential property: Credential info to access storage account.
     * 
     * @param credential the credential value to set.
     * @return the GetBlobReferenceForConsumptionDto object itself.
     */
    public GetBlobReferenceForConsumptionDto withCredential(DataReferenceCredential credential) {
        this.credential = credential;
        return this;
    }

    /**
     * Get the storageAccountArmId property: The ARM id of the storage account.
     * 
     * @return the storageAccountArmId value.
     */
    public String storageAccountArmId() {
        return this.storageAccountArmId;
    }

    /**
     * Set the storageAccountArmId property: The ARM id of the storage account.
     * 
     * @param storageAccountArmId the storageAccountArmId value to set.
     * @return the GetBlobReferenceForConsumptionDto object itself.
     */
    public GetBlobReferenceForConsumptionDto withStorageAccountArmId(String storageAccountArmId) {
        this.storageAccountArmId = storageAccountArmId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (credential() != null) {
            credential().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("blobUri", this.blobUri);
        jsonWriter.writeJsonField("credential", this.credential);
        jsonWriter.writeStringField("storageAccountArmId", this.storageAccountArmId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetBlobReferenceForConsumptionDto from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetBlobReferenceForConsumptionDto if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GetBlobReferenceForConsumptionDto.
     */
    public static GetBlobReferenceForConsumptionDto fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetBlobReferenceForConsumptionDto deserializedGetBlobReferenceForConsumptionDto
                = new GetBlobReferenceForConsumptionDto();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("blobUri".equals(fieldName)) {
                    deserializedGetBlobReferenceForConsumptionDto.blobUri = reader.getString();
                } else if ("credential".equals(fieldName)) {
                    deserializedGetBlobReferenceForConsumptionDto.credential = DataReferenceCredential.fromJson(reader);
                } else if ("storageAccountArmId".equals(fieldName)) {
                    deserializedGetBlobReferenceForConsumptionDto.storageAccountArmId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetBlobReferenceForConsumptionDto;
        });
    }
}
