// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/**
 * Monitoring input data base definition.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "inputDataType",
    defaultImpl = MonitoringInputDataBase.class,
    visible = true)
@JsonTypeName("MonitoringInputDataBase")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Fixed", value = FixedInputData.class),
    @JsonSubTypes.Type(name = "Rolling", value = RollingInputData.class),
    @JsonSubTypes.Type(name = "Static", value = StaticInputData.class) })
@Fluent
public class MonitoringInputDataBase {
    /*
     * [Required] Specifies the type of signal to monitor.
     */
    @JsonTypeId
    @JsonProperty(value = "inputDataType", required = true)
    private MonitoringInputDataType inputDataType = MonitoringInputDataType.fromString("MonitoringInputDataBase");

    /*
     * Mapping of column names to special uses.
     */
    @JsonProperty(value = "columns")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> columns;

    /*
     * The context metadata of the data source.
     */
    @JsonProperty(value = "dataContext")
    private String dataContext;

    /*
     * [Required] Specifies the type of job.
     */
    @JsonProperty(value = "jobInputType", required = true)
    private JobInputType jobInputType;

    /*
     * [Required] Input Asset URI.
     */
    @JsonProperty(value = "uri", required = true)
    private String uri;

    /**
     * Creates an instance of MonitoringInputDataBase class.
     */
    public MonitoringInputDataBase() {
    }

    /**
     * Get the inputDataType property: [Required] Specifies the type of signal to monitor.
     * 
     * @return the inputDataType value.
     */
    public MonitoringInputDataType inputDataType() {
        return this.inputDataType;
    }

    /**
     * Get the columns property: Mapping of column names to special uses.
     * 
     * @return the columns value.
     */
    public Map<String, String> columns() {
        return this.columns;
    }

    /**
     * Set the columns property: Mapping of column names to special uses.
     * 
     * @param columns the columns value to set.
     * @return the MonitoringInputDataBase object itself.
     */
    public MonitoringInputDataBase withColumns(Map<String, String> columns) {
        this.columns = columns;
        return this;
    }

    /**
     * Get the dataContext property: The context metadata of the data source.
     * 
     * @return the dataContext value.
     */
    public String dataContext() {
        return this.dataContext;
    }

    /**
     * Set the dataContext property: The context metadata of the data source.
     * 
     * @param dataContext the dataContext value to set.
     * @return the MonitoringInputDataBase object itself.
     */
    public MonitoringInputDataBase withDataContext(String dataContext) {
        this.dataContext = dataContext;
        return this;
    }

    /**
     * Get the jobInputType property: [Required] Specifies the type of job.
     * 
     * @return the jobInputType value.
     */
    public JobInputType jobInputType() {
        return this.jobInputType;
    }

    /**
     * Set the jobInputType property: [Required] Specifies the type of job.
     * 
     * @param jobInputType the jobInputType value to set.
     * @return the MonitoringInputDataBase object itself.
     */
    public MonitoringInputDataBase withJobInputType(JobInputType jobInputType) {
        this.jobInputType = jobInputType;
        return this;
    }

    /**
     * Get the uri property: [Required] Input Asset URI.
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Set the uri property: [Required] Input Asset URI.
     * 
     * @param uri the uri value to set.
     * @return the MonitoringInputDataBase object itself.
     */
    public MonitoringInputDataBase withUri(String uri) {
        this.uri = uri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (jobInputType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property jobInputType in model MonitoringInputDataBase"));
        }
        if (uri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property uri in model MonitoringInputDataBase"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MonitoringInputDataBase.class);
}
