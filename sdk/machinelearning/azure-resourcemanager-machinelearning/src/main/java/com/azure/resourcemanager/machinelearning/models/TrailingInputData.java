// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.Duration;
import java.util.Map;

/** Trailing input data definition. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "inputDataType")
@JsonTypeName("Trailing")
@Fluent
public final class TrailingInputData extends MonitoringInputDataBase {
    /*
     * The ARM resource ID of the component resource used to preprocess the data.
     */
    @JsonProperty(value = "preprocessingComponentId")
    private String preprocessingComponentId;

    /*
     * [Required] The time offset between the end of the data window and the monitor's current run time.
     */
    @JsonProperty(value = "windowOffset", required = true)
    private Duration windowOffset;

    /*
     * [Required] The size of the trailing data window.
     */
    @JsonProperty(value = "windowSize", required = true)
    private Duration windowSize;

    /** Creates an instance of TrailingInputData class. */
    public TrailingInputData() {
    }

    /**
     * Get the preprocessingComponentId property: The ARM resource ID of the component resource used to preprocess the
     * data.
     *
     * @return the preprocessingComponentId value.
     */
    public String preprocessingComponentId() {
        return this.preprocessingComponentId;
    }

    /**
     * Set the preprocessingComponentId property: The ARM resource ID of the component resource used to preprocess the
     * data.
     *
     * @param preprocessingComponentId the preprocessingComponentId value to set.
     * @return the TrailingInputData object itself.
     */
    public TrailingInputData withPreprocessingComponentId(String preprocessingComponentId) {
        this.preprocessingComponentId = preprocessingComponentId;
        return this;
    }

    /**
     * Get the windowOffset property: [Required] The time offset between the end of the data window and the monitor's
     * current run time.
     *
     * @return the windowOffset value.
     */
    public Duration windowOffset() {
        return this.windowOffset;
    }

    /**
     * Set the windowOffset property: [Required] The time offset between the end of the data window and the monitor's
     * current run time.
     *
     * @param windowOffset the windowOffset value to set.
     * @return the TrailingInputData object itself.
     */
    public TrailingInputData withWindowOffset(Duration windowOffset) {
        this.windowOffset = windowOffset;
        return this;
    }

    /**
     * Get the windowSize property: [Required] The size of the trailing data window.
     *
     * @return the windowSize value.
     */
    public Duration windowSize() {
        return this.windowSize;
    }

    /**
     * Set the windowSize property: [Required] The size of the trailing data window.
     *
     * @param windowSize the windowSize value to set.
     * @return the TrailingInputData object itself.
     */
    public TrailingInputData withWindowSize(Duration windowSize) {
        this.windowSize = windowSize;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TrailingInputData withColumns(Map<String, String> columns) {
        super.withColumns(columns);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TrailingInputData withDataContext(String dataContext) {
        super.withDataContext(dataContext);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TrailingInputData withJobInputType(JobInputType jobInputType) {
        super.withJobInputType(jobInputType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TrailingInputData withUri(String uri) {
        super.withUri(uri);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (windowOffset() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property windowOffset in model TrailingInputData"));
        }
        if (windowSize() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property windowSize in model TrailingInputData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TrailingInputData.class);
}
