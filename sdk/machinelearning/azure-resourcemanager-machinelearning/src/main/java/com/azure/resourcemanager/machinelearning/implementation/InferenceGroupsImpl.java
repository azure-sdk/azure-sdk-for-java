// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.InferenceGroupsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.GroupStatusInner;
import com.azure.resourcemanager.machinelearning.fluent.models.InferenceGroupMinimalTrackedResourceWithSkuInner;
import com.azure.resourcemanager.machinelearning.fluent.models.SkuResourceInner;
import com.azure.resourcemanager.machinelearning.models.GroupStatus;
import com.azure.resourcemanager.machinelearning.models.InferenceGroupMinimalTrackedResourceWithSku;
import com.azure.resourcemanager.machinelearning.models.InferenceGroups;
import com.azure.resourcemanager.machinelearning.models.OrderString;
import com.azure.resourcemanager.machinelearning.models.SkuResource;

public final class InferenceGroupsImpl implements InferenceGroups {
    private static final ClientLogger LOGGER = new ClientLogger(InferenceGroupsImpl.class);

    private final InferenceGroupsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public InferenceGroupsImpl(
        InferenceGroupsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<InferenceGroupMinimalTrackedResourceWithSku> list(
        String resourceGroupName, String workspaceName, String poolName) {
        PagedIterable<InferenceGroupMinimalTrackedResourceWithSkuInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName, poolName);
        return Utils
            .mapPage(inner, inner1 -> new InferenceGroupMinimalTrackedResourceWithSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<InferenceGroupMinimalTrackedResourceWithSku> list(
        String resourceGroupName,
        String workspaceName,
        String poolName,
        Integer count,
        String skip,
        String tags,
        String properties,
        OrderString orderBy,
        Context context) {
        PagedIterable<InferenceGroupMinimalTrackedResourceWithSkuInner> inner =
            this
                .serviceClient()
                .list(resourceGroupName, workspaceName, poolName, count, skip, tags, properties, orderBy, context);
        return Utils
            .mapPage(inner, inner1 -> new InferenceGroupMinimalTrackedResourceWithSkuImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String workspaceName, String poolName, String name) {
        this.serviceClient().delete(resourceGroupName, workspaceName, poolName, name);
    }

    public void delete(String resourceGroupName, String workspaceName, String poolName, String name, Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceName, poolName, name, context);
    }

    public Response<InferenceGroupMinimalTrackedResourceWithSku> getWithResponse(
        String resourceGroupName, String workspaceName, String poolName, String name, Context context) {
        Response<InferenceGroupMinimalTrackedResourceWithSkuInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, workspaceName, poolName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new InferenceGroupMinimalTrackedResourceWithSkuImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InferenceGroupMinimalTrackedResourceWithSku get(
        String resourceGroupName, String workspaceName, String poolName, String name) {
        InferenceGroupMinimalTrackedResourceWithSkuInner inner =
            this.serviceClient().get(resourceGroupName, workspaceName, poolName, name);
        if (inner != null) {
            return new InferenceGroupMinimalTrackedResourceWithSkuImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SkuResource> listSkus(
        String resourceGroupName, String workspaceName, String poolName, String name) {
        PagedIterable<SkuResourceInner> inner =
            this.serviceClient().listSkus(resourceGroupName, workspaceName, poolName, name);
        return Utils.mapPage(inner, inner1 -> new SkuResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SkuResource> listSkus(
        String resourceGroupName,
        String workspaceName,
        String poolName,
        String name,
        Integer count,
        String skip,
        Context context) {
        PagedIterable<SkuResourceInner> inner =
            this.serviceClient().listSkus(resourceGroupName, workspaceName, poolName, name, count, skip, context);
        return Utils.mapPage(inner, inner1 -> new SkuResourceImpl(inner1, this.manager()));
    }

    public Response<GroupStatus> getStatusWithResponse(
        String resourceGroupName, String workspaceName, String poolName, String name, Context context) {
        Response<GroupStatusInner> inner =
            this.serviceClient().getStatusWithResponse(resourceGroupName, workspaceName, poolName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GroupStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GroupStatus getStatus(String resourceGroupName, String workspaceName, String poolName, String name) {
        GroupStatusInner inner = this.serviceClient().getStatus(resourceGroupName, workspaceName, poolName, name);
        if (inner != null) {
            return new GroupStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public InferenceGroupMinimalTrackedResourceWithSku getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "groups");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, poolName, name, Context.NONE).getValue();
    }

    public Response<InferenceGroupMinimalTrackedResourceWithSku> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "groups");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, poolName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "groups");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, poolName, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "groups");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, poolName, name, context);
    }

    private InferenceGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public InferenceGroupMinimalTrackedResourceWithSkuImpl define(String name) {
        return new InferenceGroupMinimalTrackedResourceWithSkuImpl(name, this.manager());
    }
}
