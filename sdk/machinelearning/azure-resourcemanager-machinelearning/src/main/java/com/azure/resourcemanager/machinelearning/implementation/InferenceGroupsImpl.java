// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.InferenceGroupsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.DeltaModelStatusResponseInner;
import com.azure.resourcemanager.machinelearning.fluent.models.GroupStatusInner;
import com.azure.resourcemanager.machinelearning.fluent.models.InferenceGroupInner;
import com.azure.resourcemanager.machinelearning.fluent.models.SkuResourceInner;
import com.azure.resourcemanager.machinelearning.models.DeltaModelListRequest;
import com.azure.resourcemanager.machinelearning.models.DeltaModelModifyRequest;
import com.azure.resourcemanager.machinelearning.models.DeltaModelStatusRequest;
import com.azure.resourcemanager.machinelearning.models.DeltaModelStatusResponse;
import com.azure.resourcemanager.machinelearning.models.GroupStatus;
import com.azure.resourcemanager.machinelearning.models.InferenceGroup;
import com.azure.resourcemanager.machinelearning.models.InferenceGroups;
import com.azure.resourcemanager.machinelearning.models.OrderString;
import com.azure.resourcemanager.machinelearning.models.SkuResource;

public final class InferenceGroupsImpl implements InferenceGroups {
    private static final ClientLogger LOGGER = new ClientLogger(InferenceGroupsImpl.class);

    private final InferenceGroupsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public InferenceGroupsImpl(InferenceGroupsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<InferenceGroup> list(String resourceGroupName, String workspaceName, String poolName) {
        PagedIterable<InferenceGroupInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, poolName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new InferenceGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<InferenceGroup> list(String resourceGroupName, String workspaceName, String poolName,
        Integer count, String skip, String tags, String properties, OrderString orderBy, Context context) {
        PagedIterable<InferenceGroupInner> inner = this.serviceClient()
            .list(resourceGroupName, workspaceName, poolName, count, skip, tags, properties, orderBy, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new InferenceGroupImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String workspaceName, String poolName, String groupName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, poolName, groupName);
    }

    public void delete(String resourceGroupName, String workspaceName, String poolName, String groupName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceName, poolName, groupName, context);
    }

    public Response<InferenceGroup> getWithResponse(String resourceGroupName, String workspaceName, String poolName,
        String groupName, Context context) {
        Response<InferenceGroupInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, poolName, groupName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new InferenceGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InferenceGroup get(String resourceGroupName, String workspaceName, String poolName, String groupName) {
        InferenceGroupInner inner = this.serviceClient().get(resourceGroupName, workspaceName, poolName, groupName);
        if (inner != null) {
            return new InferenceGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeltaModelStatusResponse> getDeltaModelsStatusAsyncWithResponse(String resourceGroupName,
        String workspaceName, String poolName, String groupName, DeltaModelStatusRequest body, Context context) {
        Response<DeltaModelStatusResponseInner> inner = this.serviceClient()
            .getDeltaModelsStatusAsyncWithResponse(resourceGroupName, workspaceName, poolName, groupName, body,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DeltaModelStatusResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeltaModelStatusResponse getDeltaModelsStatusAsync(String resourceGroupName, String workspaceName,
        String poolName, String groupName, DeltaModelStatusRequest body) {
        DeltaModelStatusResponseInner inner = this.serviceClient()
            .getDeltaModelsStatusAsync(resourceGroupName, workspaceName, poolName, groupName, body);
        if (inner != null) {
            return new DeltaModelStatusResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<String> listDeltaModelsAsync(String resourceGroupName, String workspaceName, String poolName,
        String groupName, DeltaModelListRequest body) {
        return this.serviceClient().listDeltaModelsAsync(resourceGroupName, workspaceName, poolName, groupName, body);
    }

    public PagedIterable<String> listDeltaModelsAsync(String resourceGroupName, String workspaceName, String poolName,
        String groupName, DeltaModelListRequest body, Context context) {
        return this.serviceClient()
            .listDeltaModelsAsync(resourceGroupName, workspaceName, poolName, groupName, body, context);
    }

    public Response<Void> modifyDeltaModelsAsyncWithResponse(String resourceGroupName, String workspaceName,
        String poolName, String groupName, DeltaModelModifyRequest body, Context context) {
        return this.serviceClient()
            .modifyDeltaModelsAsyncWithResponse(resourceGroupName, workspaceName, poolName, groupName, body, context);
    }

    public void modifyDeltaModelsAsync(String resourceGroupName, String workspaceName, String poolName,
        String groupName, DeltaModelModifyRequest body) {
        this.serviceClient().modifyDeltaModelsAsync(resourceGroupName, workspaceName, poolName, groupName, body);
    }

    public Response<GroupStatus> getStatusWithResponse(String resourceGroupName, String workspaceName, String poolName,
        String groupName, Context context) {
        Response<GroupStatusInner> inner = this.serviceClient()
            .getStatusWithResponse(resourceGroupName, workspaceName, poolName, groupName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GroupStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GroupStatus getStatus(String resourceGroupName, String workspaceName, String poolName, String groupName) {
        GroupStatusInner inner = this.serviceClient().getStatus(resourceGroupName, workspaceName, poolName, groupName);
        if (inner != null) {
            return new GroupStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SkuResource> listSkus(String resourceGroupName, String workspaceName, String poolName,
        String groupName) {
        PagedIterable<SkuResourceInner> inner
            = this.serviceClient().listSkus(resourceGroupName, workspaceName, poolName, groupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SkuResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SkuResource> listSkus(String resourceGroupName, String workspaceName, String poolName,
        String groupName, Integer count, String skip, Context context) {
        PagedIterable<SkuResourceInner> inner = this.serviceClient()
            .listSkus(resourceGroupName, workspaceName, poolName, groupName, count, skip, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SkuResourceImpl(inner1, this.manager()));
    }

    public InferenceGroup getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String groupName = ResourceManagerUtils.getValueFromIdByName(id, "groups");
        if (groupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, poolName, groupName, Context.NONE).getValue();
    }

    public Response<InferenceGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String groupName = ResourceManagerUtils.getValueFromIdByName(id, "groups");
        if (groupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, poolName, groupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String groupName = ResourceManagerUtils.getValueFromIdByName(id, "groups");
        if (groupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, poolName, groupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "inferencePools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        String groupName = ResourceManagerUtils.getValueFromIdByName(id, "groups");
        if (groupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'groups'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, poolName, groupName, context);
    }

    private InferenceGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public InferenceGroupImpl define(String name) {
        return new InferenceGroupImpl(name, this.manager());
    }
}
