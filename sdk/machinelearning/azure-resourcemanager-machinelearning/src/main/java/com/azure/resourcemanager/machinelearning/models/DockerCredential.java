// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Credential for docker with username and password.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "credentialType",
    defaultImpl = DockerCredential.class,
    visible = true)
@JsonTypeName("DockerCredentials")
@Fluent
public final class DockerCredential extends DataReferenceCredential {
    /*
     * [Required] Credential type used to authentication with storage.
     */
    @JsonTypeId
    @JsonProperty(value = "credentialType", required = true)
    private DataReferenceCredentialType credentialType = DataReferenceCredentialType.DOCKER_CREDENTIALS;

    /*
     * DockerCredential user password
     */
    @JsonProperty(value = "password")
    private String password;

    /*
     * DockerCredential user name
     */
    @JsonProperty(value = "userName")
    private String username;

    /**
     * Creates an instance of DockerCredential class.
     */
    public DockerCredential() {
    }

    /**
     * Get the credentialType property: [Required] Credential type used to authentication with storage.
     * 
     * @return the credentialType value.
     */
    @Override
    public DataReferenceCredentialType credentialType() {
        return this.credentialType;
    }

    /**
     * Get the password property: DockerCredential user password.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: DockerCredential user password.
     * 
     * @param password the password value to set.
     * @return the DockerCredential object itself.
     */
    public DockerCredential withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the username property: DockerCredential user name.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: DockerCredential user name.
     * 
     * @param username the username value to set.
     * @return the DockerCredential object itself.
     */
    public DockerCredential withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
