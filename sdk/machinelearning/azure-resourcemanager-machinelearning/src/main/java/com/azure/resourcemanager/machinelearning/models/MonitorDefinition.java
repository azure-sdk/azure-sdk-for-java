// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * The MonitorDefinition model.
 */
@Fluent
public final class MonitorDefinition {
    /*
     * The monitor's notification settings.
     */
    @JsonProperty(value = "alertNotificationSettings")
    private MonitorNotificationSettings alertNotificationSettings;

    /*
     * [Required] The ARM resource ID of the compute resource to run the monitoring job on.
     */
    @JsonProperty(value = "computeConfiguration", required = true)
    private MonitorComputeConfigurationBase computeConfiguration;

    /*
     * The ARM resource ID of either the model or deployment targeted by this monitor.
     */
    @JsonProperty(value = "monitoringTarget")
    private MonitoringTarget monitoringTarget;

    /*
     * [Required] The signals to monitor.
     */
    @JsonProperty(value = "signals", required = true)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, MonitoringSignalBase> signals;

    /**
     * Creates an instance of MonitorDefinition class.
     */
    public MonitorDefinition() {
    }

    /**
     * Get the alertNotificationSettings property: The monitor's notification settings.
     * 
     * @return the alertNotificationSettings value.
     */
    public MonitorNotificationSettings alertNotificationSettings() {
        return this.alertNotificationSettings;
    }

    /**
     * Set the alertNotificationSettings property: The monitor's notification settings.
     * 
     * @param alertNotificationSettings the alertNotificationSettings value to set.
     * @return the MonitorDefinition object itself.
     */
    public MonitorDefinition withAlertNotificationSettings(MonitorNotificationSettings alertNotificationSettings) {
        this.alertNotificationSettings = alertNotificationSettings;
        return this;
    }

    /**
     * Get the computeConfiguration property: [Required] The ARM resource ID of the compute resource to run the
     * monitoring job on.
     * 
     * @return the computeConfiguration value.
     */
    public MonitorComputeConfigurationBase computeConfiguration() {
        return this.computeConfiguration;
    }

    /**
     * Set the computeConfiguration property: [Required] The ARM resource ID of the compute resource to run the
     * monitoring job on.
     * 
     * @param computeConfiguration the computeConfiguration value to set.
     * @return the MonitorDefinition object itself.
     */
    public MonitorDefinition withComputeConfiguration(MonitorComputeConfigurationBase computeConfiguration) {
        this.computeConfiguration = computeConfiguration;
        return this;
    }

    /**
     * Get the monitoringTarget property: The ARM resource ID of either the model or deployment targeted by this
     * monitor.
     * 
     * @return the monitoringTarget value.
     */
    public MonitoringTarget monitoringTarget() {
        return this.monitoringTarget;
    }

    /**
     * Set the monitoringTarget property: The ARM resource ID of either the model or deployment targeted by this
     * monitor.
     * 
     * @param monitoringTarget the monitoringTarget value to set.
     * @return the MonitorDefinition object itself.
     */
    public MonitorDefinition withMonitoringTarget(MonitoringTarget monitoringTarget) {
        this.monitoringTarget = monitoringTarget;
        return this;
    }

    /**
     * Get the signals property: [Required] The signals to monitor.
     * 
     * @return the signals value.
     */
    public Map<String, MonitoringSignalBase> signals() {
        return this.signals;
    }

    /**
     * Set the signals property: [Required] The signals to monitor.
     * 
     * @param signals the signals value to set.
     * @return the MonitorDefinition object itself.
     */
    public MonitorDefinition withSignals(Map<String, MonitoringSignalBase> signals) {
        this.signals = signals;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (alertNotificationSettings() != null) {
            alertNotificationSettings().validate();
        }
        if (computeConfiguration() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property computeConfiguration in model MonitorDefinition"));
        } else {
            computeConfiguration().validate();
        }
        if (monitoringTarget() != null) {
            monitoringTarget().validate();
        }
        if (signals() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property signals in model MonitorDefinition"));
        } else {
            signals().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MonitorDefinition.class);
}
