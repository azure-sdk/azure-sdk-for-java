// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Base definition for pool resources.
 */
@Fluent
public class PropertiesBase implements JsonSerializable<PropertiesBase> {
    /*
     * Description of the resource.
     */
    private String description;

    /*
     * Property dictionary. Properties can be added, but not removed or altered.
     */
    private List<StringKeyValuePair> properties;

    /**
     * Creates an instance of PropertiesBase class.
     */
    public PropertiesBase() {
    }

    /**
     * Get the description property: Description of the resource.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the resource.
     * 
     * @param description the description value to set.
     * @return the PropertiesBase object itself.
     */
    public PropertiesBase withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the properties property: Property dictionary. Properties can be added, but not removed or altered.
     * 
     * @return the properties value.
     */
    public List<StringKeyValuePair> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Property dictionary. Properties can be added, but not removed or altered.
     * 
     * @param properties the properties value to set.
     * @return the PropertiesBase object itself.
     */
    public PropertiesBase withProperties(List<StringKeyValuePair> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("properties", this.properties, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PropertiesBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PropertiesBase if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PropertiesBase.
     */
    public static PropertiesBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PropertiesBase deserializedPropertiesBase = new PropertiesBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedPropertiesBase.description = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    List<StringKeyValuePair> properties
                        = reader.readArray(reader1 -> StringKeyValuePair.fromJson(reader1));
                    deserializedPropertiesBase.properties = properties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPropertiesBase;
        });
    }
}
