// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The PredictionDriftMetricThresholdBase model.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "dataType",
    defaultImpl = PredictionDriftMetricThresholdBase.class,
    visible = true)
@JsonTypeName("PredictionDriftMetricThresholdBase")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Categorical", value = CategoricalPredictionDriftMetricThreshold.class),
    @JsonSubTypes.Type(name = "Numerical", value = NumericalPredictionDriftMetricThreshold.class) })
@Fluent
public class PredictionDriftMetricThresholdBase {
    /*
     * [Required] Specifies the data type of the metric threshold.
     */
    @JsonTypeId
    @JsonProperty(value = "dataType", required = true)
    private MonitoringFeatureDataType dataType
        = MonitoringFeatureDataType.fromString("PredictionDriftMetricThresholdBase");

    /*
     * The threshold value. If null, a default value will be set depending on the selected metric.
     */
    @JsonProperty(value = "threshold")
    private MonitoringThreshold threshold;

    /**
     * Creates an instance of PredictionDriftMetricThresholdBase class.
     */
    public PredictionDriftMetricThresholdBase() {
    }

    /**
     * Get the dataType property: [Required] Specifies the data type of the metric threshold.
     * 
     * @return the dataType value.
     */
    public MonitoringFeatureDataType dataType() {
        return this.dataType;
    }

    /**
     * Get the threshold property: The threshold value. If null, a default value will be set depending on the selected
     * metric.
     * 
     * @return the threshold value.
     */
    public MonitoringThreshold threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: The threshold value. If null, a default value will be set depending on the selected
     * metric.
     * 
     * @param threshold the threshold value to set.
     * @return the PredictionDriftMetricThresholdBase object itself.
     */
    public PredictionDriftMetricThresholdBase withThreshold(MonitoringThreshold threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (threshold() != null) {
            threshold().validate();
        }
    }
}
