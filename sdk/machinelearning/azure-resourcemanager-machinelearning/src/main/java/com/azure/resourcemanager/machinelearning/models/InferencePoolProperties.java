// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Inference pool configuration.
 */
@Fluent
public final class InferencePoolProperties extends PropertiesBase {
    /*
     * Provisioning state for the pool.
     */
    private PoolProvisioningState provisioningState;

    /*
     * Gets or sets ScaleUnitConfiguration for the inference pool. Used if PoolType=ScaleUnit.
     */
    private ScaleUnitConfiguration scaleUnitConfiguration;

    /**
     * Creates an instance of InferencePoolProperties class.
     */
    public InferencePoolProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state for the pool.
     * 
     * @return the provisioningState value.
     */
    public PoolProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the scaleUnitConfiguration property: Gets or sets ScaleUnitConfiguration for the inference pool. Used if
     * PoolType=ScaleUnit.
     * 
     * @return the scaleUnitConfiguration value.
     */
    public ScaleUnitConfiguration scaleUnitConfiguration() {
        return this.scaleUnitConfiguration;
    }

    /**
     * Set the scaleUnitConfiguration property: Gets or sets ScaleUnitConfiguration for the inference pool. Used if
     * PoolType=ScaleUnit.
     * 
     * @param scaleUnitConfiguration the scaleUnitConfiguration value to set.
     * @return the InferencePoolProperties object itself.
     */
    public InferencePoolProperties withScaleUnitConfiguration(ScaleUnitConfiguration scaleUnitConfiguration) {
        this.scaleUnitConfiguration = scaleUnitConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InferencePoolProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InferencePoolProperties withProperties(List<StringKeyValuePair> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (scaleUnitConfiguration() != null) {
            scaleUnitConfiguration().validate();
        }
        if (properties() != null) {
            properties().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeArrayField("properties", properties(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("scaleUnitConfiguration", this.scaleUnitConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InferencePoolProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InferencePoolProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InferencePoolProperties.
     */
    public static InferencePoolProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InferencePoolProperties deserializedInferencePoolProperties = new InferencePoolProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedInferencePoolProperties.withDescription(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    List<StringKeyValuePair> properties
                        = reader.readArray(reader1 -> StringKeyValuePair.fromJson(reader1));
                    deserializedInferencePoolProperties.withProperties(properties);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedInferencePoolProperties.provisioningState
                        = PoolProvisioningState.fromString(reader.getString());
                } else if ("scaleUnitConfiguration".equals(fieldName)) {
                    deserializedInferencePoolProperties.scaleUnitConfiguration
                        = ScaleUnitConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInferencePoolProperties;
        });
    }
}
