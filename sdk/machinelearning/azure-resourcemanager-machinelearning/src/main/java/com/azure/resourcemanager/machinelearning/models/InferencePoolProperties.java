// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Inference pool configuration.
 */
@Fluent
public final class InferencePoolProperties extends PropertiesBase {
    /*
     * Code configuration for the inference pool.
     */
    @JsonProperty(value = "codeConfiguration")
    private CodeConfiguration codeConfiguration;

    /*
     * EnvironmentConfiguration for the inference pool.
     */
    @JsonProperty(value = "environmentConfiguration")
    private PoolEnvironmentConfiguration environmentConfiguration;

    /*
     * ModelConfiguration for the inference pool.
     */
    @JsonProperty(value = "modelConfiguration")
    private PoolModelConfiguration modelConfiguration;

    /*
     * [Required] Compute instance type.
     */
    @JsonProperty(value = "nodeSkuType", required = true)
    private String nodeSkuType;

    /*
     * Provisioning state for the pool.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private PoolProvisioningState provisioningState;

    /*
     * Request configuration for the inference pool.
     */
    @JsonProperty(value = "requestConfiguration")
    private RequestConfiguration requestConfiguration;

    /**
     * Creates an instance of InferencePoolProperties class.
     */
    public InferencePoolProperties() {
    }

    /**
     * Get the codeConfiguration property: Code configuration for the inference pool.
     * 
     * @return the codeConfiguration value.
     */
    public CodeConfiguration codeConfiguration() {
        return this.codeConfiguration;
    }

    /**
     * Set the codeConfiguration property: Code configuration for the inference pool.
     * 
     * @param codeConfiguration the codeConfiguration value to set.
     * @return the InferencePoolProperties object itself.
     */
    public InferencePoolProperties withCodeConfiguration(CodeConfiguration codeConfiguration) {
        this.codeConfiguration = codeConfiguration;
        return this;
    }

    /**
     * Get the environmentConfiguration property: EnvironmentConfiguration for the inference pool.
     * 
     * @return the environmentConfiguration value.
     */
    public PoolEnvironmentConfiguration environmentConfiguration() {
        return this.environmentConfiguration;
    }

    /**
     * Set the environmentConfiguration property: EnvironmentConfiguration for the inference pool.
     * 
     * @param environmentConfiguration the environmentConfiguration value to set.
     * @return the InferencePoolProperties object itself.
     */
    public InferencePoolProperties withEnvironmentConfiguration(PoolEnvironmentConfiguration environmentConfiguration) {
        this.environmentConfiguration = environmentConfiguration;
        return this;
    }

    /**
     * Get the modelConfiguration property: ModelConfiguration for the inference pool.
     * 
     * @return the modelConfiguration value.
     */
    public PoolModelConfiguration modelConfiguration() {
        return this.modelConfiguration;
    }

    /**
     * Set the modelConfiguration property: ModelConfiguration for the inference pool.
     * 
     * @param modelConfiguration the modelConfiguration value to set.
     * @return the InferencePoolProperties object itself.
     */
    public InferencePoolProperties withModelConfiguration(PoolModelConfiguration modelConfiguration) {
        this.modelConfiguration = modelConfiguration;
        return this;
    }

    /**
     * Get the nodeSkuType property: [Required] Compute instance type.
     * 
     * @return the nodeSkuType value.
     */
    public String nodeSkuType() {
        return this.nodeSkuType;
    }

    /**
     * Set the nodeSkuType property: [Required] Compute instance type.
     * 
     * @param nodeSkuType the nodeSkuType value to set.
     * @return the InferencePoolProperties object itself.
     */
    public InferencePoolProperties withNodeSkuType(String nodeSkuType) {
        this.nodeSkuType = nodeSkuType;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state for the pool.
     * 
     * @return the provisioningState value.
     */
    public PoolProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the requestConfiguration property: Request configuration for the inference pool.
     * 
     * @return the requestConfiguration value.
     */
    public RequestConfiguration requestConfiguration() {
        return this.requestConfiguration;
    }

    /**
     * Set the requestConfiguration property: Request configuration for the inference pool.
     * 
     * @param requestConfiguration the requestConfiguration value to set.
     * @return the InferencePoolProperties object itself.
     */
    public InferencePoolProperties withRequestConfiguration(RequestConfiguration requestConfiguration) {
        this.requestConfiguration = requestConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InferencePoolProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InferencePoolProperties withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (codeConfiguration() != null) {
            codeConfiguration().validate();
        }
        if (environmentConfiguration() != null) {
            environmentConfiguration().validate();
        }
        if (modelConfiguration() != null) {
            modelConfiguration().validate();
        }
        if (nodeSkuType() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property nodeSkuType in model InferencePoolProperties"));
        }
        if (requestConfiguration() != null) {
            requestConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InferencePoolProperties.class);
}
