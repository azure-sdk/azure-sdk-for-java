// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/**
 * OneLake (Trident) datastore configuration.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "datastoreType",
    defaultImpl = OneLakeDatastore.class,
    visible = true)
@JsonTypeName("OneLake")
@Fluent
public final class OneLakeDatastore extends DatastoreProperties {
    /*
     * [Required] Storage type backing the datastore.
     */
    @JsonTypeId
    @JsonProperty(value = "datastoreType", required = true)
    private DatastoreType datastoreType = DatastoreType.ONE_LAKE;

    /*
     * [Required] OneLake artifact backing the datastore.
     */
    @JsonProperty(value = "artifact", required = true)
    private OneLakeArtifact artifact;

    /*
     * OneLake endpoint to use for the datastore.
     */
    @JsonProperty(value = "endpoint")
    private String endpoint;

    /*
     * [Required] OneLake workspace name.
     */
    @JsonProperty(value = "oneLakeWorkspaceName", required = true)
    private String oneLakeWorkspaceName;

    /*
     * Indicates which identity to use to authenticate service data access to customer's storage.
     */
    @JsonProperty(value = "serviceDataAccessAuthIdentity")
    private ServiceDataAccessAuthIdentity serviceDataAccessAuthIdentity;

    /**
     * Creates an instance of OneLakeDatastore class.
     */
    public OneLakeDatastore() {
    }

    /**
     * Get the datastoreType property: [Required] Storage type backing the datastore.
     * 
     * @return the datastoreType value.
     */
    @Override
    public DatastoreType datastoreType() {
        return this.datastoreType;
    }

    /**
     * Get the artifact property: [Required] OneLake artifact backing the datastore.
     * 
     * @return the artifact value.
     */
    public OneLakeArtifact artifact() {
        return this.artifact;
    }

    /**
     * Set the artifact property: [Required] OneLake artifact backing the datastore.
     * 
     * @param artifact the artifact value to set.
     * @return the OneLakeDatastore object itself.
     */
    public OneLakeDatastore withArtifact(OneLakeArtifact artifact) {
        this.artifact = artifact;
        return this;
    }

    /**
     * Get the endpoint property: OneLake endpoint to use for the datastore.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: OneLake endpoint to use for the datastore.
     * 
     * @param endpoint the endpoint value to set.
     * @return the OneLakeDatastore object itself.
     */
    public OneLakeDatastore withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the oneLakeWorkspaceName property: [Required] OneLake workspace name.
     * 
     * @return the oneLakeWorkspaceName value.
     */
    public String oneLakeWorkspaceName() {
        return this.oneLakeWorkspaceName;
    }

    /**
     * Set the oneLakeWorkspaceName property: [Required] OneLake workspace name.
     * 
     * @param oneLakeWorkspaceName the oneLakeWorkspaceName value to set.
     * @return the OneLakeDatastore object itself.
     */
    public OneLakeDatastore withOneLakeWorkspaceName(String oneLakeWorkspaceName) {
        this.oneLakeWorkspaceName = oneLakeWorkspaceName;
        return this;
    }

    /**
     * Get the serviceDataAccessAuthIdentity property: Indicates which identity to use to authenticate service data
     * access to customer's storage.
     * 
     * @return the serviceDataAccessAuthIdentity value.
     */
    public ServiceDataAccessAuthIdentity serviceDataAccessAuthIdentity() {
        return this.serviceDataAccessAuthIdentity;
    }

    /**
     * Set the serviceDataAccessAuthIdentity property: Indicates which identity to use to authenticate service data
     * access to customer's storage.
     * 
     * @param serviceDataAccessAuthIdentity the serviceDataAccessAuthIdentity value to set.
     * @return the OneLakeDatastore object itself.
     */
    public OneLakeDatastore
        withServiceDataAccessAuthIdentity(ServiceDataAccessAuthIdentity serviceDataAccessAuthIdentity) {
        this.serviceDataAccessAuthIdentity = serviceDataAccessAuthIdentity;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OneLakeDatastore withCredentials(DatastoreCredentials credentials) {
        super.withCredentials(credentials);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OneLakeDatastore withIntellectualProperty(IntellectualProperty intellectualProperty) {
        super.withIntellectualProperty(intellectualProperty);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OneLakeDatastore withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OneLakeDatastore withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OneLakeDatastore withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (artifact() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property artifact in model OneLakeDatastore"));
        } else {
            artifact().validate();
        }
        if (oneLakeWorkspaceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property oneLakeWorkspaceName in model OneLakeDatastore"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OneLakeDatastore.class);
}
