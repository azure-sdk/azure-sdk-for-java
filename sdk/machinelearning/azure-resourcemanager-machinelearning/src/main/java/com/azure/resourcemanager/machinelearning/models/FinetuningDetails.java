// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The FinetuningDetails model.
 */
@Fluent
public final class FinetuningDetails implements JsonSerializable<FinetuningDetails> {
    /*
     * Finetuning Hyperparameters
     */
    private Map<String, String> hyperParameters;

    /*
     * [Required] Student model for fine tuning.
     */
    private JobInput studentModel;

    /**
     * Creates an instance of FinetuningDetails class.
     */
    public FinetuningDetails() {
    }

    /**
     * Get the hyperParameters property: Finetuning Hyperparameters.
     * 
     * @return the hyperParameters value.
     */
    public Map<String, String> hyperParameters() {
        return this.hyperParameters;
    }

    /**
     * Set the hyperParameters property: Finetuning Hyperparameters.
     * 
     * @param hyperParameters the hyperParameters value to set.
     * @return the FinetuningDetails object itself.
     */
    public FinetuningDetails withHyperParameters(Map<String, String> hyperParameters) {
        this.hyperParameters = hyperParameters;
        return this;
    }

    /**
     * Get the studentModel property: [Required] Student model for fine tuning.
     * 
     * @return the studentModel value.
     */
    public JobInput studentModel() {
        return this.studentModel;
    }

    /**
     * Set the studentModel property: [Required] Student model for fine tuning.
     * 
     * @param studentModel the studentModel value to set.
     * @return the FinetuningDetails object itself.
     */
    public FinetuningDetails withStudentModel(JobInput studentModel) {
        this.studentModel = studentModel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (studentModel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property studentModel in model FinetuningDetails"));
        } else {
            studentModel().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FinetuningDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("studentModel", this.studentModel);
        jsonWriter.writeMapField("hyperParameters", this.hyperParameters,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FinetuningDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FinetuningDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FinetuningDetails.
     */
    public static FinetuningDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FinetuningDetails deserializedFinetuningDetails = new FinetuningDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("studentModel".equals(fieldName)) {
                    deserializedFinetuningDetails.studentModel = JobInput.fromJson(reader);
                } else if ("hyperParameters".equals(fieldName)) {
                    Map<String, String> hyperParameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedFinetuningDetails.hyperParameters = hyperParameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFinetuningDetails;
        });
    }
}
