// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A DataLakeAnalytics compute.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "computeType",
    defaultImpl = DataLakeAnalytics.class,
    visible = true)
@JsonTypeName("DataLakeAnalytics")
@Fluent
public final class DataLakeAnalytics extends Compute {
    /*
     * The type of compute
     */
    @JsonTypeId
    @JsonProperty(value = "computeType", required = true)
    private ComputeType computeType = ComputeType.DATA_LAKE_ANALYTICS;

    /*
     * The properties property.
     */
    @JsonProperty(value = "properties")
    private DataLakeAnalyticsSchemaProperties properties;

    /**
     * Creates an instance of DataLakeAnalytics class.
     */
    public DataLakeAnalytics() {
    }

    /**
     * Get the computeType property: The type of compute.
     * 
     * @return the computeType value.
     */
    @Override
    public ComputeType computeType() {
        return this.computeType;
    }

    /**
     * Get the properties property: The properties property.
     * 
     * @return the properties value.
     */
    public DataLakeAnalyticsSchemaProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The properties property.
     * 
     * @param properties the properties value to set.
     * @return the DataLakeAnalytics object itself.
     */
    public DataLakeAnalytics withProperties(DataLakeAnalyticsSchemaProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataLakeAnalytics withComputeLocation(String computeLocation) {
        super.withComputeLocation(computeLocation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataLakeAnalytics withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataLakeAnalytics withResourceId(String resourceId) {
        super.withResourceId(resourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataLakeAnalytics withDisableLocalAuth(Boolean disableLocalAuth) {
        super.withDisableLocalAuth(disableLocalAuth);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (properties() != null) {
            properties().validate();
        }
    }
}
