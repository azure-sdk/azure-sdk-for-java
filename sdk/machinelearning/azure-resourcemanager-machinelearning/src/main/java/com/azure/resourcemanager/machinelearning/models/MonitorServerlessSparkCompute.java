// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Monitor serverless spark compute definition.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "computeType",
    defaultImpl = MonitorServerlessSparkCompute.class,
    visible = true)
@JsonTypeName("ServerlessSpark")
@Fluent
public final class MonitorServerlessSparkCompute extends MonitorComputeConfigurationBase {
    /*
     * [Required] Specifies the type of signal to monitor.
     */
    @JsonTypeId
    @JsonProperty(value = "computeType", required = true)
    private MonitorComputeType computeType = MonitorComputeType.SERVERLESS_SPARK;

    /*
     * [Required] The identity scheme leveraged to by the spark jobs running on serverless Spark.
     */
    @JsonProperty(value = "computeIdentity", required = true)
    private MonitorComputeIdentityBase computeIdentity;

    /*
     * [Required] The instance type running the Spark job.
     */
    @JsonProperty(value = "instanceType", required = true)
    private String instanceType;

    /*
     * [Required] The Spark runtime version.
     */
    @JsonProperty(value = "runtimeVersion", required = true)
    private String runtimeVersion;

    /**
     * Creates an instance of MonitorServerlessSparkCompute class.
     */
    public MonitorServerlessSparkCompute() {
    }

    /**
     * Get the computeType property: [Required] Specifies the type of signal to monitor.
     * 
     * @return the computeType value.
     */
    @Override
    public MonitorComputeType computeType() {
        return this.computeType;
    }

    /**
     * Get the computeIdentity property: [Required] The identity scheme leveraged to by the spark jobs running on
     * serverless Spark.
     * 
     * @return the computeIdentity value.
     */
    public MonitorComputeIdentityBase computeIdentity() {
        return this.computeIdentity;
    }

    /**
     * Set the computeIdentity property: [Required] The identity scheme leveraged to by the spark jobs running on
     * serverless Spark.
     * 
     * @param computeIdentity the computeIdentity value to set.
     * @return the MonitorServerlessSparkCompute object itself.
     */
    public MonitorServerlessSparkCompute withComputeIdentity(MonitorComputeIdentityBase computeIdentity) {
        this.computeIdentity = computeIdentity;
        return this;
    }

    /**
     * Get the instanceType property: [Required] The instance type running the Spark job.
     * 
     * @return the instanceType value.
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Set the instanceType property: [Required] The instance type running the Spark job.
     * 
     * @param instanceType the instanceType value to set.
     * @return the MonitorServerlessSparkCompute object itself.
     */
    public MonitorServerlessSparkCompute withInstanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }

    /**
     * Get the runtimeVersion property: [Required] The Spark runtime version.
     * 
     * @return the runtimeVersion value.
     */
    public String runtimeVersion() {
        return this.runtimeVersion;
    }

    /**
     * Set the runtimeVersion property: [Required] The Spark runtime version.
     * 
     * @param runtimeVersion the runtimeVersion value to set.
     * @return the MonitorServerlessSparkCompute object itself.
     */
    public MonitorServerlessSparkCompute withRuntimeVersion(String runtimeVersion) {
        this.runtimeVersion = runtimeVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (computeIdentity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property computeIdentity in model MonitorServerlessSparkCompute"));
        } else {
            computeIdentity().validate();
        }
        if (instanceType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property instanceType in model MonitorServerlessSparkCompute"));
        }
        if (runtimeVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property runtimeVersion in model MonitorServerlessSparkCompute"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MonitorServerlessSparkCompute.class);
}
