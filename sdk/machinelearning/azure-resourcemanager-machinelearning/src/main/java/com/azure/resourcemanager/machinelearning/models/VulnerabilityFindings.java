// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The VulnerabilityFindings model.
 */
@Fluent
public final class VulnerabilityFindings implements JsonSerializable<VulnerabilityFindings> {
    /*
     * AssetId (Image digest).
     */
    private String assetId;

    /*
     * Number of critical findings.
     */
    private Integer criticalFindingsCount;

    /*
     * List of vulnerability findings.
     */
    private List<VulnerabilityDetails> data;

    /*
     * Time the report was generated.
     */
    private OffsetDateTime generatedTime;

    /*
     * Number of high findings.
     */
    private Integer highFindingsCount;

    /*
     * Scan result date.
     */
    private OffsetDateTime lastScanDate;

    /*
     * Vulnerability scanner name.
     */
    private String scanner;

    /*
     * Data source (internal).
     */
    private String source;

    /*
     * Total findings count.
     */
    private Integer totalFindingsCount;

    /**
     * Creates an instance of VulnerabilityFindings class.
     */
    public VulnerabilityFindings() {
    }

    /**
     * Get the assetId property: AssetId (Image digest).
     * 
     * @return the assetId value.
     */
    public String assetId() {
        return this.assetId;
    }

    /**
     * Set the assetId property: AssetId (Image digest).
     * 
     * @param assetId the assetId value to set.
     * @return the VulnerabilityFindings object itself.
     */
    public VulnerabilityFindings withAssetId(String assetId) {
        this.assetId = assetId;
        return this;
    }

    /**
     * Get the criticalFindingsCount property: Number of critical findings.
     * 
     * @return the criticalFindingsCount value.
     */
    public Integer criticalFindingsCount() {
        return this.criticalFindingsCount;
    }

    /**
     * Get the data property: List of vulnerability findings.
     * 
     * @return the data value.
     */
    public List<VulnerabilityDetails> data() {
        return this.data;
    }

    /**
     * Set the data property: List of vulnerability findings.
     * 
     * @param data the data value to set.
     * @return the VulnerabilityFindings object itself.
     */
    public VulnerabilityFindings withData(List<VulnerabilityDetails> data) {
        this.data = data;
        return this;
    }

    /**
     * Get the generatedTime property: Time the report was generated.
     * 
     * @return the generatedTime value.
     */
    public OffsetDateTime generatedTime() {
        return this.generatedTime;
    }

    /**
     * Set the generatedTime property: Time the report was generated.
     * 
     * @param generatedTime the generatedTime value to set.
     * @return the VulnerabilityFindings object itself.
     */
    public VulnerabilityFindings withGeneratedTime(OffsetDateTime generatedTime) {
        this.generatedTime = generatedTime;
        return this;
    }

    /**
     * Get the highFindingsCount property: Number of high findings.
     * 
     * @return the highFindingsCount value.
     */
    public Integer highFindingsCount() {
        return this.highFindingsCount;
    }

    /**
     * Get the lastScanDate property: Scan result date.
     * 
     * @return the lastScanDate value.
     */
    public OffsetDateTime lastScanDate() {
        return this.lastScanDate;
    }

    /**
     * Set the lastScanDate property: Scan result date.
     * 
     * @param lastScanDate the lastScanDate value to set.
     * @return the VulnerabilityFindings object itself.
     */
    public VulnerabilityFindings withLastScanDate(OffsetDateTime lastScanDate) {
        this.lastScanDate = lastScanDate;
        return this;
    }

    /**
     * Get the scanner property: Vulnerability scanner name.
     * 
     * @return the scanner value.
     */
    public String scanner() {
        return this.scanner;
    }

    /**
     * Set the scanner property: Vulnerability scanner name.
     * 
     * @param scanner the scanner value to set.
     * @return the VulnerabilityFindings object itself.
     */
    public VulnerabilityFindings withScanner(String scanner) {
        this.scanner = scanner;
        return this;
    }

    /**
     * Get the source property: Data source (internal).
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: Data source (internal).
     * 
     * @param source the source value to set.
     * @return the VulnerabilityFindings object itself.
     */
    public VulnerabilityFindings withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the totalFindingsCount property: Total findings count.
     * 
     * @return the totalFindingsCount value.
     */
    public Integer totalFindingsCount() {
        return this.totalFindingsCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (data() != null) {
            data().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assetId", this.assetId);
        jsonWriter.writeArrayField("data", this.data, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("generatedTime",
            this.generatedTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.generatedTime));
        jsonWriter.writeStringField("lastScanDate",
            this.lastScanDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastScanDate));
        jsonWriter.writeStringField("scanner", this.scanner);
        jsonWriter.writeStringField("source", this.source);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VulnerabilityFindings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VulnerabilityFindings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VulnerabilityFindings.
     */
    public static VulnerabilityFindings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VulnerabilityFindings deserializedVulnerabilityFindings = new VulnerabilityFindings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assetId".equals(fieldName)) {
                    deserializedVulnerabilityFindings.assetId = reader.getString();
                } else if ("criticalFindingsCount".equals(fieldName)) {
                    deserializedVulnerabilityFindings.criticalFindingsCount = reader.getNullable(JsonReader::getInt);
                } else if ("data".equals(fieldName)) {
                    List<VulnerabilityDetails> data
                        = reader.readArray(reader1 -> VulnerabilityDetails.fromJson(reader1));
                    deserializedVulnerabilityFindings.data = data;
                } else if ("generatedTime".equals(fieldName)) {
                    deserializedVulnerabilityFindings.generatedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("highFindingsCount".equals(fieldName)) {
                    deserializedVulnerabilityFindings.highFindingsCount = reader.getNullable(JsonReader::getInt);
                } else if ("lastScanDate".equals(fieldName)) {
                    deserializedVulnerabilityFindings.lastScanDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("scanner".equals(fieldName)) {
                    deserializedVulnerabilityFindings.scanner = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedVulnerabilityFindings.source = reader.getString();
                } else if ("totalFindingsCount".equals(fieldName)) {
                    deserializedVulnerabilityFindings.totalFindingsCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVulnerabilityFindings;
        });
    }
}
