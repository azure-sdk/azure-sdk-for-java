// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.models.AssetBased;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Index properties.
 */
@Fluent
public final class IndexContainerProperties extends AssetBased {
    /*
     * Default workspace blob storage Uri. Should work across storage types and auth scenarios.
     */
    @JsonProperty(value = "indexVersion", required = true)
    private String indexVersion;

    /*
     * Placeholder for extras.
     */
    @JsonProperty(value = "indexVersionDefinition", required = true)
    private IndexVersionProperties indexVersionDefinition;

    /**
     * Creates an instance of IndexContainerProperties class.
     */
    public IndexContainerProperties() {
    }

    /**
     * Get the indexVersion property: Default workspace blob storage Uri. Should work across storage types and auth
     * scenarios.
     * 
     * @return the indexVersion value.
     */
    public String indexVersion() {
        return this.indexVersion;
    }

    /**
     * Set the indexVersion property: Default workspace blob storage Uri. Should work across storage types and auth
     * scenarios.
     * 
     * @param indexVersion the indexVersion value to set.
     * @return the IndexContainerProperties object itself.
     */
    public IndexContainerProperties withIndexVersion(String indexVersion) {
        this.indexVersion = indexVersion;
        return this;
    }

    /**
     * Get the indexVersionDefinition property: Placeholder for extras.
     * 
     * @return the indexVersionDefinition value.
     */
    public IndexVersionProperties indexVersionDefinition() {
        return this.indexVersionDefinition;
    }

    /**
     * Set the indexVersionDefinition property: Placeholder for extras.
     * 
     * @param indexVersionDefinition the indexVersionDefinition value to set.
     * @return the IndexContainerProperties object itself.
     */
    public IndexContainerProperties withIndexVersionDefinition(IndexVersionProperties indexVersionDefinition) {
        this.indexVersionDefinition = indexVersionDefinition;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexContainerProperties withIsArchived(boolean isArchived) {
        super.withIsArchived(isArchived);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexContainerProperties withIsAnonymous(boolean isAnonymous) {
        super.withIsAnonymous(isAnonymous);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexContainerProperties withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndexContainerProperties withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (indexVersion() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property indexVersion in model IndexContainerProperties"));
        }
        if (indexVersionDefinition() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property indexVersionDefinition in model IndexContainerProperties"));
        } else {
            indexVersionDefinition().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IndexContainerProperties.class);
}
