// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The EndpointModelSkuRateLimitProperties model.
 */
@Fluent
public final class EndpointModelSkuRateLimitProperties
    implements JsonSerializable<EndpointModelSkuRateLimitProperties> {
    /*
     * The count value of Call Rate Limit.
     */
    private Float count;

    /*
     * The renewal period in seconds of Call Rate Limit.
     */
    private Float renewalPeriod;

    /*
     * The call rate limit for the model.
     */
    private List<EndpointModelSkuRateLimitRuleProperties> rules;

    /**
     * Creates an instance of EndpointModelSkuRateLimitProperties class.
     */
    public EndpointModelSkuRateLimitProperties() {
    }

    /**
     * Get the count property: The count value of Call Rate Limit.
     * 
     * @return the count value.
     */
    public Float count() {
        return this.count;
    }

    /**
     * Set the count property: The count value of Call Rate Limit.
     * 
     * @param count the count value to set.
     * @return the EndpointModelSkuRateLimitProperties object itself.
     */
    public EndpointModelSkuRateLimitProperties withCount(Float count) {
        this.count = count;
        return this;
    }

    /**
     * Get the renewalPeriod property: The renewal period in seconds of Call Rate Limit.
     * 
     * @return the renewalPeriod value.
     */
    public Float renewalPeriod() {
        return this.renewalPeriod;
    }

    /**
     * Set the renewalPeriod property: The renewal period in seconds of Call Rate Limit.
     * 
     * @param renewalPeriod the renewalPeriod value to set.
     * @return the EndpointModelSkuRateLimitProperties object itself.
     */
    public EndpointModelSkuRateLimitProperties withRenewalPeriod(Float renewalPeriod) {
        this.renewalPeriod = renewalPeriod;
        return this;
    }

    /**
     * Get the rules property: The call rate limit for the model.
     * 
     * @return the rules value.
     */
    public List<EndpointModelSkuRateLimitRuleProperties> rules() {
        return this.rules;
    }

    /**
     * Set the rules property: The call rate limit for the model.
     * 
     * @param rules the rules value to set.
     * @return the EndpointModelSkuRateLimitProperties object itself.
     */
    public EndpointModelSkuRateLimitProperties withRules(List<EndpointModelSkuRateLimitRuleProperties> rules) {
        this.rules = rules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rules() != null) {
            rules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeNumberField("renewalPeriod", this.renewalPeriod);
        jsonWriter.writeArrayField("rules", this.rules, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointModelSkuRateLimitProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointModelSkuRateLimitProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EndpointModelSkuRateLimitProperties.
     */
    public static EndpointModelSkuRateLimitProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointModelSkuRateLimitProperties deserializedEndpointModelSkuRateLimitProperties
                = new EndpointModelSkuRateLimitProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedEndpointModelSkuRateLimitProperties.count = reader.getNullable(JsonReader::getFloat);
                } else if ("renewalPeriod".equals(fieldName)) {
                    deserializedEndpointModelSkuRateLimitProperties.renewalPeriod
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("rules".equals(fieldName)) {
                    List<EndpointModelSkuRateLimitRuleProperties> rules
                        = reader.readArray(reader1 -> EndpointModelSkuRateLimitRuleProperties.fromJson(reader1));
                    deserializedEndpointModelSkuRateLimitProperties.rules = rules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointModelSkuRateLimitProperties;
        });
    }
}
