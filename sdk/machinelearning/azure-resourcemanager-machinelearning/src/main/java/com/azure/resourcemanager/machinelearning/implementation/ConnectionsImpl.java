// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.ConnectionsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.EndpointDeploymentResourcePropertiesBasicResourceInner;
import com.azure.resourcemanager.machinelearning.fluent.models.EndpointModelPropertiesInner;
import com.azure.resourcemanager.machinelearning.fluent.models.EndpointModelsInner;
import com.azure.resourcemanager.machinelearning.models.Connections;
import com.azure.resourcemanager.machinelearning.models.EndpointDeploymentResourcePropertiesBasicResource;
import com.azure.resourcemanager.machinelearning.models.EndpointModelProperties;
import com.azure.resourcemanager.machinelearning.models.EndpointModels;

public final class ConnectionsImpl implements Connections {
    private static final ClientLogger LOGGER = new ClientLogger(ConnectionsImpl.class);

    private final ConnectionsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public ConnectionsImpl(ConnectionsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<EndpointDeploymentResourcePropertiesBasicResource> listDeployments(String resourceGroupName,
        String workspaceName, String connectionName) {
        PagedIterable<EndpointDeploymentResourcePropertiesBasicResourceInner> inner
            = this.serviceClient().listDeployments(resourceGroupName, workspaceName, connectionName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new EndpointDeploymentResourcePropertiesBasicResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EndpointDeploymentResourcePropertiesBasicResource> listDeployments(String resourceGroupName,
        String workspaceName, String connectionName, String proxyApiVersion, Context context) {
        PagedIterable<EndpointDeploymentResourcePropertiesBasicResourceInner> inner = this.serviceClient()
            .listDeployments(resourceGroupName, workspaceName, connectionName, proxyApiVersion, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new EndpointDeploymentResourcePropertiesBasicResourceImpl(inner1, this.manager()));
    }

    public void deleteDeployment(String resourceGroupName, String workspaceName, String connectionName,
        String deploymentName) {
        this.serviceClient().deleteDeployment(resourceGroupName, workspaceName, connectionName, deploymentName);
    }

    public void deleteDeployment(String resourceGroupName, String workspaceName, String connectionName,
        String deploymentName, String proxyApiVersion, Context context) {
        this.serviceClient()
            .deleteDeployment(resourceGroupName, workspaceName, connectionName, deploymentName, proxyApiVersion,
                context);
    }

    public Response<EndpointDeploymentResourcePropertiesBasicResource> getDeploymentWithResponse(
        String resourceGroupName, String workspaceName, String connectionName, String deploymentName, Context context) {
        Response<EndpointDeploymentResourcePropertiesBasicResourceInner> inner = this.serviceClient()
            .getDeploymentWithResponse(resourceGroupName, workspaceName, connectionName, deploymentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EndpointDeploymentResourcePropertiesBasicResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EndpointDeploymentResourcePropertiesBasicResource getDeployment(String resourceGroupName,
        String workspaceName, String connectionName, String deploymentName) {
        EndpointDeploymentResourcePropertiesBasicResourceInner inner
            = this.serviceClient().getDeployment(resourceGroupName, workspaceName, connectionName, deploymentName);
        if (inner != null) {
            return new EndpointDeploymentResourcePropertiesBasicResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<EndpointModelProperties> getModels(String resourceGroupName, String workspaceName,
        String connectionName) {
        PagedIterable<EndpointModelPropertiesInner> inner
            = this.serviceClient().getModels(resourceGroupName, workspaceName, connectionName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EndpointModelPropertiesImpl(inner1, this.manager()));
    }

    public PagedIterable<EndpointModelProperties> getModels(String resourceGroupName, String workspaceName,
        String connectionName, String proxyApiVersion, Context context) {
        PagedIterable<EndpointModelPropertiesInner> inner = this.serviceClient()
            .getModels(resourceGroupName, workspaceName, connectionName, proxyApiVersion, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EndpointModelPropertiesImpl(inner1, this.manager()));
    }

    public Response<EndpointModels> getAllModelsWithResponse(String resourceGroupName, String workspaceName,
        Context context) {
        Response<EndpointModelsInner> inner
            = this.serviceClient().getAllModelsWithResponse(resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EndpointModelsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EndpointModels getAllModels(String resourceGroupName, String workspaceName) {
        EndpointModelsInner inner = this.serviceClient().getAllModels(resourceGroupName, workspaceName);
        if (inner != null) {
            return new EndpointModelsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EndpointDeploymentResourcePropertiesBasicResource getDeploymentById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        return this
            .getDeploymentWithResponse(resourceGroupName, workspaceName, connectionName, deploymentName, Context.NONE)
            .getValue();
    }

    public Response<EndpointDeploymentResourcePropertiesBasicResource> getDeploymentByIdWithResponse(String id,
        Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        return this.getDeploymentWithResponse(resourceGroupName, workspaceName, connectionName, deploymentName,
            context);
    }

    public void deleteDeploymentById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        String localProxyApiVersion = null;
        this.deleteDeployment(resourceGroupName, workspaceName, connectionName, deploymentName, localProxyApiVersion,
            Context.NONE);
    }

    public void deleteDeploymentByIdWithResponse(String id, String proxyApiVersion, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        this.deleteDeployment(resourceGroupName, workspaceName, connectionName, deploymentName, proxyApiVersion,
            context);
    }

    private ConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public EndpointDeploymentResourcePropertiesBasicResourceImpl define(String name) {
        return new EndpointDeploymentResourcePropertiesBasicResourceImpl(name, this.manager());
    }
}
