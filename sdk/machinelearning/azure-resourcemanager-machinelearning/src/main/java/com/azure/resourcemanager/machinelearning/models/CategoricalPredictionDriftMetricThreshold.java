// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The CategoricalPredictionDriftMetricThreshold model.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "dataType")
@JsonTypeName("Categorical")
@Fluent
public final class CategoricalPredictionDriftMetricThreshold extends PredictionDriftMetricThresholdBase {
    /*
     * [Required] The categorical prediction drift metric to calculate.
     */
    @JsonProperty(value = "metric", required = true)
    private CategoricalPredictionDriftMetric metric;

    /**
     * Creates an instance of CategoricalPredictionDriftMetricThreshold class.
     */
    public CategoricalPredictionDriftMetricThreshold() {
    }

    /**
     * Get the metric property: [Required] The categorical prediction drift metric to calculate.
     * 
     * @return the metric value.
     */
    public CategoricalPredictionDriftMetric metric() {
        return this.metric;
    }

    /**
     * Set the metric property: [Required] The categorical prediction drift metric to calculate.
     * 
     * @param metric the metric value to set.
     * @return the CategoricalPredictionDriftMetricThreshold object itself.
     */
    public CategoricalPredictionDriftMetricThreshold withMetric(CategoricalPredictionDriftMetric metric) {
        this.metric = metric;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CategoricalPredictionDriftMetricThreshold withThreshold(MonitoringThreshold threshold) {
        super.withThreshold(threshold);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (metric() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property metric in model CategoricalPredictionDriftMetricThreshold"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CategoricalPredictionDriftMetricThreshold.class);
}
