// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/**
 * FineTuning Job definition.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "jobType")
@JsonTypeName("FineTuning")
@Fluent
public final class FineTuningJob extends JobBaseProperties {
    /*
     * [Required]
     */
    @JsonProperty(value = "fineTuningDetails", required = true)
    private FineTuningVertical fineTuningDetails;

    /*
     * [Required]
     */
    @JsonProperty(value = "outputs", required = true)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, JobOutput> outputs;

    /**
     * Creates an instance of FineTuningJob class.
     */
    public FineTuningJob() {
    }

    /**
     * Get the fineTuningDetails property: [Required].
     * 
     * @return the fineTuningDetails value.
     */
    public FineTuningVertical fineTuningDetails() {
        return this.fineTuningDetails;
    }

    /**
     * Set the fineTuningDetails property: [Required].
     * 
     * @param fineTuningDetails the fineTuningDetails value to set.
     * @return the FineTuningJob object itself.
     */
    public FineTuningJob withFineTuningDetails(FineTuningVertical fineTuningDetails) {
        this.fineTuningDetails = fineTuningDetails;
        return this;
    }

    /**
     * Get the outputs property: [Required].
     * 
     * @return the outputs value.
     */
    public Map<String, JobOutput> outputs() {
        return this.outputs;
    }

    /**
     * Set the outputs property: [Required].
     * 
     * @param outputs the outputs value to set.
     * @return the FineTuningJob object itself.
     */
    public FineTuningJob withOutputs(Map<String, JobOutput> outputs) {
        this.outputs = outputs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withComponentId(String componentId) {
        super.withComponentId(componentId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withComputeId(String computeId) {
        super.withComputeId(computeId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withExperimentName(String experimentName) {
        super.withExperimentName(experimentName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withIdentity(IdentityConfiguration identity) {
        super.withIdentity(identity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withIsArchived(Boolean isArchived) {
        super.withIsArchived(isArchived);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withNotificationSetting(NotificationSetting notificationSetting) {
        super.withNotificationSetting(notificationSetting);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withSecretsConfiguration(Map<String, SecretConfiguration> secretsConfiguration) {
        super.withSecretsConfiguration(secretsConfiguration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withServices(Map<String, JobService> services) {
        super.withServices(services);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FineTuningJob withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (fineTuningDetails() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property fineTuningDetails in model FineTuningJob"));
        } else {
            fineTuningDetails().validate();
        }
        if (outputs() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property outputs in model FineTuningJob"));
        } else {
            outputs().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FineTuningJob.class);
}
