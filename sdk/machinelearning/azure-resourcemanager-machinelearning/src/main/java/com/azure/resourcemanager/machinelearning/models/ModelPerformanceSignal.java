// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.Map;

/** Model performance signal definition. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "signalType")
@JsonTypeName("ModelPerformance")
@Fluent
public final class ModelPerformanceSignal extends MonitoringSignalBase {
    /*
     * The data segment.
     */
    @JsonProperty(value = "dataSegment")
    private MonitoringDataSegment dataSegment;

    /*
     * [Required] A list of metrics to calculate and their associated thresholds.
     */
    @JsonProperty(value = "metricThreshold", required = true)
    private ModelPerformanceMetricThresholdBase metricThreshold;

    /*
     * [Required] The data produced by the production service which drift will be calculated for.
     */
    @JsonProperty(value = "productionData", required = true)
    private List<MonitoringInputDataBase> productionData;

    /*
     * [Required] The data to calculate drift against.
     */
    @JsonProperty(value = "referenceData", required = true)
    private MonitoringInputDataBase referenceData;

    /** Creates an instance of ModelPerformanceSignal class. */
    public ModelPerformanceSignal() {
    }

    /**
     * Get the dataSegment property: The data segment.
     *
     * @return the dataSegment value.
     */
    public MonitoringDataSegment dataSegment() {
        return this.dataSegment;
    }

    /**
     * Set the dataSegment property: The data segment.
     *
     * @param dataSegment the dataSegment value to set.
     * @return the ModelPerformanceSignal object itself.
     */
    public ModelPerformanceSignal withDataSegment(MonitoringDataSegment dataSegment) {
        this.dataSegment = dataSegment;
        return this;
    }

    /**
     * Get the metricThreshold property: [Required] A list of metrics to calculate and their associated thresholds.
     *
     * @return the metricThreshold value.
     */
    public ModelPerformanceMetricThresholdBase metricThreshold() {
        return this.metricThreshold;
    }

    /**
     * Set the metricThreshold property: [Required] A list of metrics to calculate and their associated thresholds.
     *
     * @param metricThreshold the metricThreshold value to set.
     * @return the ModelPerformanceSignal object itself.
     */
    public ModelPerformanceSignal withMetricThreshold(ModelPerformanceMetricThresholdBase metricThreshold) {
        this.metricThreshold = metricThreshold;
        return this;
    }

    /**
     * Get the productionData property: [Required] The data produced by the production service which drift will be
     * calculated for.
     *
     * @return the productionData value.
     */
    public List<MonitoringInputDataBase> productionData() {
        return this.productionData;
    }

    /**
     * Set the productionData property: [Required] The data produced by the production service which drift will be
     * calculated for.
     *
     * @param productionData the productionData value to set.
     * @return the ModelPerformanceSignal object itself.
     */
    public ModelPerformanceSignal withProductionData(List<MonitoringInputDataBase> productionData) {
        this.productionData = productionData;
        return this;
    }

    /**
     * Get the referenceData property: [Required] The data to calculate drift against.
     *
     * @return the referenceData value.
     */
    public MonitoringInputDataBase referenceData() {
        return this.referenceData;
    }

    /**
     * Set the referenceData property: [Required] The data to calculate drift against.
     *
     * @param referenceData the referenceData value to set.
     * @return the ModelPerformanceSignal object itself.
     */
    public ModelPerformanceSignal withReferenceData(MonitoringInputDataBase referenceData) {
        this.referenceData = referenceData;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelPerformanceSignal withMode(MonitoringNotificationMode mode) {
        super.withMode(mode);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ModelPerformanceSignal withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (dataSegment() != null) {
            dataSegment().validate();
        }
        if (metricThreshold() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property metricThreshold in model ModelPerformanceSignal"));
        } else {
            metricThreshold().validate();
        }
        if (productionData() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property productionData in model ModelPerformanceSignal"));
        } else {
            productionData().forEach(e -> e.validate());
        }
        if (referenceData() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property referenceData in model ModelPerformanceSignal"));
        } else {
            referenceData().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ModelPerformanceSignal.class);
}
