// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The PackageDetails model.
 */
@Fluent
public final class PackageDetails implements JsonSerializable<PackageDetails> {
    /*
     * Install path.
     */
    private String installPath;

    /*
     * Installed version.
     */
    private String installedVersion;

    /*
     * Package or dependency name.
     */
    private String name;

    /*
     * Patched version.
     */
    private String patchedVersion;

    /**
     * Creates an instance of PackageDetails class.
     */
    public PackageDetails() {
    }

    /**
     * Get the installPath property: Install path.
     * 
     * @return the installPath value.
     */
    public String installPath() {
        return this.installPath;
    }

    /**
     * Set the installPath property: Install path.
     * 
     * @param installPath the installPath value to set.
     * @return the PackageDetails object itself.
     */
    public PackageDetails withInstallPath(String installPath) {
        this.installPath = installPath;
        return this;
    }

    /**
     * Get the installedVersion property: Installed version.
     * 
     * @return the installedVersion value.
     */
    public String installedVersion() {
        return this.installedVersion;
    }

    /**
     * Set the installedVersion property: Installed version.
     * 
     * @param installedVersion the installedVersion value to set.
     * @return the PackageDetails object itself.
     */
    public PackageDetails withInstalledVersion(String installedVersion) {
        this.installedVersion = installedVersion;
        return this;
    }

    /**
     * Get the name property: Package or dependency name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Package or dependency name.
     * 
     * @param name the name value to set.
     * @return the PackageDetails object itself.
     */
    public PackageDetails withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the patchedVersion property: Patched version.
     * 
     * @return the patchedVersion value.
     */
    public String patchedVersion() {
        return this.patchedVersion;
    }

    /**
     * Set the patchedVersion property: Patched version.
     * 
     * @param patchedVersion the patchedVersion value to set.
     * @return the PackageDetails object itself.
     */
    public PackageDetails withPatchedVersion(String patchedVersion) {
        this.patchedVersion = patchedVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("installPath", this.installPath);
        jsonWriter.writeStringField("installedVersion", this.installedVersion);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("patchedVersion", this.patchedVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PackageDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PackageDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PackageDetails.
     */
    public static PackageDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PackageDetails deserializedPackageDetails = new PackageDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("installPath".equals(fieldName)) {
                    deserializedPackageDetails.installPath = reader.getString();
                } else if ("installedVersion".equals(fieldName)) {
                    deserializedPackageDetails.installedVersion = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPackageDetails.name = reader.getString();
                } else if ("patchedVersion".equals(fieldName)) {
                    deserializedPackageDetails.patchedVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPackageDetails;
        });
    }
}
