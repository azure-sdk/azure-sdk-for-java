// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearning.fluent.InferencePoolsClient;
import com.azure.resourcemanager.machinelearning.fluent.models.InferencePoolInner;
import com.azure.resourcemanager.machinelearning.fluent.models.PoolStatusInner;
import com.azure.resourcemanager.machinelearning.fluent.models.SkuResourceInner;
import com.azure.resourcemanager.machinelearning.models.InferencePool;
import com.azure.resourcemanager.machinelearning.models.InferencePools;
import com.azure.resourcemanager.machinelearning.models.OrderString;
import com.azure.resourcemanager.machinelearning.models.PoolStatus;
import com.azure.resourcemanager.machinelearning.models.SkuResource;

public final class InferencePoolsImpl implements InferencePools {
    private static final ClientLogger LOGGER = new ClientLogger(InferencePoolsImpl.class);

    private final InferencePoolsClient innerClient;

    private final com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager;

    public InferencePoolsImpl(
        InferencePoolsClient innerClient,
        com.azure.resourcemanager.machinelearning.MachineLearningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<InferencePool> list(String resourceGroupName, String workspaceName) {
        PagedIterable<InferencePoolInner> inner = this.serviceClient().list(resourceGroupName, workspaceName);
        return Utils.mapPage(inner, inner1 -> new InferencePoolImpl(inner1, this.manager()));
    }

    public PagedIterable<InferencePool> list(
        String resourceGroupName,
        String workspaceName,
        Integer count,
        String skip,
        String tags,
        String properties,
        OrderString orderBy,
        Context context) {
        PagedIterable<InferencePoolInner> inner =
            this
                .serviceClient()
                .list(resourceGroupName, workspaceName, count, skip, tags, properties, orderBy, context);
        return Utils.mapPage(inner, inner1 -> new InferencePoolImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String workspaceName, String inferencePoolName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, inferencePoolName);
    }

    public void delete(String resourceGroupName, String workspaceName, String inferencePoolName, Context context) {
        this.serviceClient().delete(resourceGroupName, workspaceName, inferencePoolName, context);
    }

    public Response<InferencePool> getWithResponse(
        String resourceGroupName, String workspaceName, String inferencePoolName, Context context) {
        Response<InferencePoolInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, workspaceName, inferencePoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new InferencePoolImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InferencePool get(String resourceGroupName, String workspaceName, String inferencePoolName) {
        InferencePoolInner inner = this.serviceClient().get(resourceGroupName, workspaceName, inferencePoolName);
        if (inner != null) {
            return new InferencePoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PoolStatus> getStatusWithResponse(
        String resourceGroupName, String workspaceName, String inferencePoolName, Context context) {
        Response<PoolStatusInner> inner =
            this.serviceClient().getStatusWithResponse(resourceGroupName, workspaceName, inferencePoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PoolStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PoolStatus getStatus(String resourceGroupName, String workspaceName, String inferencePoolName) {
        PoolStatusInner inner = this.serviceClient().getStatus(resourceGroupName, workspaceName, inferencePoolName);
        if (inner != null) {
            return new PoolStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SkuResource> listSkus(
        String resourceGroupName, String workspaceName, String inferencePoolName) {
        PagedIterable<SkuResourceInner> inner =
            this.serviceClient().listSkus(resourceGroupName, workspaceName, inferencePoolName);
        return Utils.mapPage(inner, inner1 -> new SkuResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SkuResource> listSkus(
        String resourceGroupName,
        String workspaceName,
        String inferencePoolName,
        Integer count,
        String skip,
        Context context) {
        PagedIterable<SkuResourceInner> inner =
            this.serviceClient().listSkus(resourceGroupName, workspaceName, inferencePoolName, count, skip, context);
        return Utils.mapPage(inner, inner1 -> new SkuResourceImpl(inner1, this.manager()));
    }

    public InferencePool getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String inferencePoolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (inferencePoolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, inferencePoolName, Context.NONE).getValue();
    }

    public Response<InferencePool> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String inferencePoolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (inferencePoolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, inferencePoolName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String inferencePoolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (inferencePoolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, inferencePoolName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String inferencePoolName = Utils.getValueFromIdByName(id, "inferencePools");
        if (inferencePoolName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inferencePools'.", id)));
        }
        this.delete(resourceGroupName, workspaceName, inferencePoolName, context);
    }

    private InferencePoolsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearning.MachineLearningManager manager() {
        return this.serviceManager;
    }

    public InferencePoolImpl define(String name) {
        return new InferencePoolImpl(name, this.manager());
    }
}
