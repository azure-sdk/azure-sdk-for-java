// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CognitiveServiceEndpointDeploymentResourceProperties model.
 */
@Fluent
public class CognitiveServiceEndpointDeploymentResourceProperties
    implements JsonSerializable<CognitiveServiceEndpointDeploymentResourceProperties> {
    /*
     * Model used for the endpoint deployment.
     */
    private EndpointDeploymentModel model;

    /*
     * The name of RAI policy.
     */
    private String raiPolicyName;

    /*
     * The sku property.
     */
    private CognitiveServicesSku sku;

    /*
     * Deployment model version upgrade option.
     */
    private DeploymentModelVersionUpgradeOption versionUpgradeOption;

    /**
     * Creates an instance of CognitiveServiceEndpointDeploymentResourceProperties class.
     */
    public CognitiveServiceEndpointDeploymentResourceProperties() {
    }

    /**
     * Get the model property: Model used for the endpoint deployment.
     * 
     * @return the model value.
     */
    public EndpointDeploymentModel model() {
        return this.model;
    }

    /**
     * Set the model property: Model used for the endpoint deployment.
     * 
     * @param model the model value to set.
     * @return the CognitiveServiceEndpointDeploymentResourceProperties object itself.
     */
    public CognitiveServiceEndpointDeploymentResourceProperties withModel(EndpointDeploymentModel model) {
        this.model = model;
        return this;
    }

    /**
     * Get the raiPolicyName property: The name of RAI policy.
     * 
     * @return the raiPolicyName value.
     */
    public String raiPolicyName() {
        return this.raiPolicyName;
    }

    /**
     * Set the raiPolicyName property: The name of RAI policy.
     * 
     * @param raiPolicyName the raiPolicyName value to set.
     * @return the CognitiveServiceEndpointDeploymentResourceProperties object itself.
     */
    public CognitiveServiceEndpointDeploymentResourceProperties withRaiPolicyName(String raiPolicyName) {
        this.raiPolicyName = raiPolicyName;
        return this;
    }

    /**
     * Get the sku property: The sku property.
     * 
     * @return the sku value.
     */
    public CognitiveServicesSku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The sku property.
     * 
     * @param sku the sku value to set.
     * @return the CognitiveServiceEndpointDeploymentResourceProperties object itself.
     */
    public CognitiveServiceEndpointDeploymentResourceProperties withSku(CognitiveServicesSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the versionUpgradeOption property: Deployment model version upgrade option.
     * 
     * @return the versionUpgradeOption value.
     */
    public DeploymentModelVersionUpgradeOption versionUpgradeOption() {
        return this.versionUpgradeOption;
    }

    /**
     * Set the versionUpgradeOption property: Deployment model version upgrade option.
     * 
     * @param versionUpgradeOption the versionUpgradeOption value to set.
     * @return the CognitiveServiceEndpointDeploymentResourceProperties object itself.
     */
    public CognitiveServiceEndpointDeploymentResourceProperties
        withVersionUpgradeOption(DeploymentModelVersionUpgradeOption versionUpgradeOption) {
        this.versionUpgradeOption = versionUpgradeOption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (model() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property model in model CognitiveServiceEndpointDeploymentResourceProperties"));
        } else {
            model().validate();
        }
        if (sku() != null) {
            sku().validate();
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(CognitiveServiceEndpointDeploymentResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("model", this.model);
        jsonWriter.writeStringField("raiPolicyName", this.raiPolicyName);
        jsonWriter.writeJsonField("sku", this.sku);
        jsonWriter.writeStringField("versionUpgradeOption",
            this.versionUpgradeOption == null ? null : this.versionUpgradeOption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CognitiveServiceEndpointDeploymentResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CognitiveServiceEndpointDeploymentResourceProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CognitiveServiceEndpointDeploymentResourceProperties.
     */
    public static CognitiveServiceEndpointDeploymentResourceProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            CognitiveServiceEndpointDeploymentResourceProperties deserializedCognitiveServiceEndpointDeploymentResourceProperties
                = new CognitiveServiceEndpointDeploymentResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("model".equals(fieldName)) {
                    deserializedCognitiveServiceEndpointDeploymentResourceProperties.model
                        = EndpointDeploymentModel.fromJson(reader);
                } else if ("raiPolicyName".equals(fieldName)) {
                    deserializedCognitiveServiceEndpointDeploymentResourceProperties.raiPolicyName = reader.getString();
                } else if ("sku".equals(fieldName)) {
                    deserializedCognitiveServiceEndpointDeploymentResourceProperties.sku
                        = CognitiveServicesSku.fromJson(reader);
                } else if ("versionUpgradeOption".equals(fieldName)) {
                    deserializedCognitiveServiceEndpointDeploymentResourceProperties.versionUpgradeOption
                        = DeploymentModelVersionUpgradeOption.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCognitiveServiceEndpointDeploymentResourceProperties;
        });
    }
}
