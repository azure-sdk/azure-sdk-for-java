// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The FileSystemSource model.
 */
@Fluent
public final class FileSystemSource extends DataImportSource {
    /*
     * [Required] Specifies the type of data.
     */
    private DataImportSourceType sourceType = DataImportSourceType.FILE_SYSTEM;

    /*
     * Path on data import FileSystem source
     */
    private String path;

    /**
     * Creates an instance of FileSystemSource class.
     */
    public FileSystemSource() {
    }

    /**
     * Get the sourceType property: [Required] Specifies the type of data.
     * 
     * @return the sourceType value.
     */
    @Override
    public DataImportSourceType sourceType() {
        return this.sourceType;
    }

    /**
     * Get the path property: Path on data import FileSystem source.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: Path on data import FileSystem source.
     * 
     * @param path the path value to set.
     * @return the FileSystemSource object itself.
     */
    public FileSystemSource withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileSystemSource withConnection(String connection) {
        super.withConnection(connection);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connection", connection());
        jsonWriter.writeStringField("sourceType", this.sourceType == null ? null : this.sourceType.toString());
        jsonWriter.writeStringField("path", this.path);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileSystemSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileSystemSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileSystemSource.
     */
    public static FileSystemSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileSystemSource deserializedFileSystemSource = new FileSystemSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connection".equals(fieldName)) {
                    deserializedFileSystemSource.withConnection(reader.getString());
                } else if ("sourceType".equals(fieldName)) {
                    deserializedFileSystemSource.sourceType = DataImportSourceType.fromString(reader.getString());
                } else if ("path".equals(fieldName)) {
                    deserializedFileSystemSource.path = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFileSystemSource;
        });
    }
}
