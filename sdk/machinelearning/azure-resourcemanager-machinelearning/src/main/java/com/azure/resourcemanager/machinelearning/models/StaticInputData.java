// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.Map;

/** Static input data definition. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "inputDataType")
@JsonTypeName("Static")
@Fluent
public final class StaticInputData extends MonitoringInputDataBase {
    /*
     * Reference to the component asset used to preprocess the data.
     */
    @JsonProperty(value = "preprocessingComponentId")
    private String preprocessingComponentId;

    /*
     * [Required] The end date of the data window.
     */
    @JsonProperty(value = "windowEnd", required = true)
    private OffsetDateTime windowEnd;

    /*
     * [Required] The start date of the data window.
     */
    @JsonProperty(value = "windowStart", required = true)
    private OffsetDateTime windowStart;

    /** Creates an instance of StaticInputData class. */
    public StaticInputData() {
    }

    /**
     * Get the preprocessingComponentId property: Reference to the component asset used to preprocess the data.
     *
     * @return the preprocessingComponentId value.
     */
    public String preprocessingComponentId() {
        return this.preprocessingComponentId;
    }

    /**
     * Set the preprocessingComponentId property: Reference to the component asset used to preprocess the data.
     *
     * @param preprocessingComponentId the preprocessingComponentId value to set.
     * @return the StaticInputData object itself.
     */
    public StaticInputData withPreprocessingComponentId(String preprocessingComponentId) {
        this.preprocessingComponentId = preprocessingComponentId;
        return this;
    }

    /**
     * Get the windowEnd property: [Required] The end date of the data window.
     *
     * @return the windowEnd value.
     */
    public OffsetDateTime windowEnd() {
        return this.windowEnd;
    }

    /**
     * Set the windowEnd property: [Required] The end date of the data window.
     *
     * @param windowEnd the windowEnd value to set.
     * @return the StaticInputData object itself.
     */
    public StaticInputData withWindowEnd(OffsetDateTime windowEnd) {
        this.windowEnd = windowEnd;
        return this;
    }

    /**
     * Get the windowStart property: [Required] The start date of the data window.
     *
     * @return the windowStart value.
     */
    public OffsetDateTime windowStart() {
        return this.windowStart;
    }

    /**
     * Set the windowStart property: [Required] The start date of the data window.
     *
     * @param windowStart the windowStart value to set.
     * @return the StaticInputData object itself.
     */
    public StaticInputData withWindowStart(OffsetDateTime windowStart) {
        this.windowStart = windowStart;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public StaticInputData withColumns(Map<String, String> columns) {
        super.withColumns(columns);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public StaticInputData withDataContext(String dataContext) {
        super.withDataContext(dataContext);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public StaticInputData withJobInputType(JobInputType jobInputType) {
        super.withJobInputType(jobInputType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public StaticInputData withUri(String uri) {
        super.withUri(uri);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (windowEnd() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property windowEnd in model StaticInputData"));
        }
        if (windowStart() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property windowStart in model StaticInputData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StaticInputData.class);
}
