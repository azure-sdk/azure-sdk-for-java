// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.machinelearning.models.FirewallSku;
import com.azure.resourcemanager.machinelearning.models.IsolationMode;
import com.azure.resourcemanager.machinelearning.models.ManagedNetworkKind;
import com.azure.resourcemanager.machinelearning.models.OutboundRule;
import java.io.IOException;
import java.util.Map;

/**
 * Managed Network settings for a machine learning workspace.
 */
@Fluent
public final class ManagedNetworkSettingsInner implements JsonSerializable<ManagedNetworkSettingsInner> {
    /*
     * Isolation mode for the managed network of a machine learning workspace.
     */
    private IsolationMode isolationMode;

    /*
     * The networkId property.
     */
    private String networkId;

    /*
     * Dictionary of <OutboundRule>
     */
    private Map<String, OutboundRule> outboundRules;

    /*
     * Status of the Provisioning for the managed network of a machine learning workspace.
     */
    private ManagedNetworkProvisionStatusInner status;

    /*
     * Firewall Sku used for FQDN Rules
     */
    private FirewallSku firewallSku;

    /*
     * The Kind of the managed network. Users can switch from V1 to V2 for granular access controls, but cannot switch
     * back to V1 once V2 is enabled.
     */
    private ManagedNetworkKind managedNetworkKind;

    /*
     * Public IP address assigned to the Azure Firewall.
     */
    private String firewallPublicIpAddress;

    /**
     * Creates an instance of ManagedNetworkSettingsInner class.
     */
    public ManagedNetworkSettingsInner() {
    }

    /**
     * Get the isolationMode property: Isolation mode for the managed network of a machine learning workspace.
     * 
     * @return the isolationMode value.
     */
    public IsolationMode isolationMode() {
        return this.isolationMode;
    }

    /**
     * Set the isolationMode property: Isolation mode for the managed network of a machine learning workspace.
     * 
     * @param isolationMode the isolationMode value to set.
     * @return the ManagedNetworkSettingsInner object itself.
     */
    public ManagedNetworkSettingsInner withIsolationMode(IsolationMode isolationMode) {
        this.isolationMode = isolationMode;
        return this;
    }

    /**
     * Get the networkId property: The networkId property.
     * 
     * @return the networkId value.
     */
    public String networkId() {
        return this.networkId;
    }

    /**
     * Get the outboundRules property: Dictionary of &lt;OutboundRule&gt;.
     * 
     * @return the outboundRules value.
     */
    public Map<String, OutboundRule> outboundRules() {
        return this.outboundRules;
    }

    /**
     * Set the outboundRules property: Dictionary of &lt;OutboundRule&gt;.
     * 
     * @param outboundRules the outboundRules value to set.
     * @return the ManagedNetworkSettingsInner object itself.
     */
    public ManagedNetworkSettingsInner withOutboundRules(Map<String, OutboundRule> outboundRules) {
        this.outboundRules = outboundRules;
        return this;
    }

    /**
     * Get the status property: Status of the Provisioning for the managed network of a machine learning workspace.
     * 
     * @return the status value.
     */
    public ManagedNetworkProvisionStatusInner status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the Provisioning for the managed network of a machine learning workspace.
     * 
     * @param status the status value to set.
     * @return the ManagedNetworkSettingsInner object itself.
     */
    public ManagedNetworkSettingsInner withStatus(ManagedNetworkProvisionStatusInner status) {
        this.status = status;
        return this;
    }

    /**
     * Get the firewallSku property: Firewall Sku used for FQDN Rules.
     * 
     * @return the firewallSku value.
     */
    public FirewallSku firewallSku() {
        return this.firewallSku;
    }

    /**
     * Set the firewallSku property: Firewall Sku used for FQDN Rules.
     * 
     * @param firewallSku the firewallSku value to set.
     * @return the ManagedNetworkSettingsInner object itself.
     */
    public ManagedNetworkSettingsInner withFirewallSku(FirewallSku firewallSku) {
        this.firewallSku = firewallSku;
        return this;
    }

    /**
     * Get the managedNetworkKind property: The Kind of the managed network. Users can switch from V1 to V2 for granular
     * access controls, but cannot switch back to V1 once V2 is enabled.
     * 
     * @return the managedNetworkKind value.
     */
    public ManagedNetworkKind managedNetworkKind() {
        return this.managedNetworkKind;
    }

    /**
     * Set the managedNetworkKind property: The Kind of the managed network. Users can switch from V1 to V2 for granular
     * access controls, but cannot switch back to V1 once V2 is enabled.
     * 
     * @param managedNetworkKind the managedNetworkKind value to set.
     * @return the ManagedNetworkSettingsInner object itself.
     */
    public ManagedNetworkSettingsInner withManagedNetworkKind(ManagedNetworkKind managedNetworkKind) {
        this.managedNetworkKind = managedNetworkKind;
        return this;
    }

    /**
     * Get the firewallPublicIpAddress property: Public IP address assigned to the Azure Firewall.
     * 
     * @return the firewallPublicIpAddress value.
     */
    public String firewallPublicIpAddress() {
        return this.firewallPublicIpAddress;
    }

    /**
     * Set the firewallPublicIpAddress property: Public IP address assigned to the Azure Firewall.
     * 
     * @param firewallPublicIpAddress the firewallPublicIpAddress value to set.
     * @return the ManagedNetworkSettingsInner object itself.
     */
    public ManagedNetworkSettingsInner withFirewallPublicIpAddress(String firewallPublicIpAddress) {
        this.firewallPublicIpAddress = firewallPublicIpAddress;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (outboundRules() != null) {
            outboundRules().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("isolationMode", this.isolationMode == null ? null : this.isolationMode.toString());
        jsonWriter.writeMapField("outboundRules", this.outboundRules, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("status", this.status);
        jsonWriter.writeStringField("firewallSku", this.firewallSku == null ? null : this.firewallSku.toString());
        jsonWriter.writeStringField("managedNetworkKind",
            this.managedNetworkKind == null ? null : this.managedNetworkKind.toString());
        jsonWriter.writeStringField("firewallPublicIpAddress", this.firewallPublicIpAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedNetworkSettingsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedNetworkSettingsInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedNetworkSettingsInner.
     */
    public static ManagedNetworkSettingsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedNetworkSettingsInner deserializedManagedNetworkSettingsInner = new ManagedNetworkSettingsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isolationMode".equals(fieldName)) {
                    deserializedManagedNetworkSettingsInner.isolationMode
                        = IsolationMode.fromString(reader.getString());
                } else if ("networkId".equals(fieldName)) {
                    deserializedManagedNetworkSettingsInner.networkId = reader.getString();
                } else if ("outboundRules".equals(fieldName)) {
                    Map<String, OutboundRule> outboundRules = reader.readMap(reader1 -> OutboundRule.fromJson(reader1));
                    deserializedManagedNetworkSettingsInner.outboundRules = outboundRules;
                } else if ("status".equals(fieldName)) {
                    deserializedManagedNetworkSettingsInner.status
                        = ManagedNetworkProvisionStatusInner.fromJson(reader);
                } else if ("firewallSku".equals(fieldName)) {
                    deserializedManagedNetworkSettingsInner.firewallSku = FirewallSku.fromString(reader.getString());
                } else if ("managedNetworkKind".equals(fieldName)) {
                    deserializedManagedNetworkSettingsInner.managedNetworkKind
                        = ManagedNetworkKind.fromString(reader.getString());
                } else if ("firewallPublicIpAddress".equals(fieldName)) {
                    deserializedManagedNetworkSettingsInner.firewallPublicIpAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedNetworkSettingsInner;
        });
    }
}
