// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Contract base for DeltaModelChangeRequest. Used for adding or removing.
 */
@Fluent
public final class DeltaModelModifyRequest implements JsonSerializable<DeltaModelModifyRequest> {
    /*
     * Gets or sets delta models to remove.
     */
    private List<String> addDeltaModels;

    /*
     * Gets or sets delta models to remove.
     */
    private List<String> removeDeltaModels;

    /*
     * Gets or sets target base model.
     */
    private String targetBaseModel;

    /**
     * Creates an instance of DeltaModelModifyRequest class.
     */
    public DeltaModelModifyRequest() {
    }

    /**
     * Get the addDeltaModels property: Gets or sets delta models to remove.
     * 
     * @return the addDeltaModels value.
     */
    public List<String> addDeltaModels() {
        return this.addDeltaModels;
    }

    /**
     * Set the addDeltaModels property: Gets or sets delta models to remove.
     * 
     * @param addDeltaModels the addDeltaModels value to set.
     * @return the DeltaModelModifyRequest object itself.
     */
    public DeltaModelModifyRequest withAddDeltaModels(List<String> addDeltaModels) {
        this.addDeltaModels = addDeltaModels;
        return this;
    }

    /**
     * Get the removeDeltaModels property: Gets or sets delta models to remove.
     * 
     * @return the removeDeltaModels value.
     */
    public List<String> removeDeltaModels() {
        return this.removeDeltaModels;
    }

    /**
     * Set the removeDeltaModels property: Gets or sets delta models to remove.
     * 
     * @param removeDeltaModels the removeDeltaModels value to set.
     * @return the DeltaModelModifyRequest object itself.
     */
    public DeltaModelModifyRequest withRemoveDeltaModels(List<String> removeDeltaModels) {
        this.removeDeltaModels = removeDeltaModels;
        return this;
    }

    /**
     * Get the targetBaseModel property: Gets or sets target base model.
     * 
     * @return the targetBaseModel value.
     */
    public String targetBaseModel() {
        return this.targetBaseModel;
    }

    /**
     * Set the targetBaseModel property: Gets or sets target base model.
     * 
     * @param targetBaseModel the targetBaseModel value to set.
     * @return the DeltaModelModifyRequest object itself.
     */
    public DeltaModelModifyRequest withTargetBaseModel(String targetBaseModel) {
        this.targetBaseModel = targetBaseModel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("addDeltaModels", this.addDeltaModels,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("removeDeltaModels", this.removeDeltaModels,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("targetBaseModel", this.targetBaseModel);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaModelModifyRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaModelModifyRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeltaModelModifyRequest.
     */
    public static DeltaModelModifyRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeltaModelModifyRequest deserializedDeltaModelModifyRequest = new DeltaModelModifyRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("addDeltaModels".equals(fieldName)) {
                    List<String> addDeltaModels = reader.readArray(reader1 -> reader1.getString());
                    deserializedDeltaModelModifyRequest.addDeltaModels = addDeltaModels;
                } else if ("removeDeltaModels".equals(fieldName)) {
                    List<String> removeDeltaModels = reader.readArray(reader1 -> reader1.getString());
                    deserializedDeltaModelModifyRequest.removeDeltaModels = removeDeltaModels;
                } else if ("targetBaseModel".equals(fieldName)) {
                    deserializedDeltaModelModifyRequest.targetBaseModel = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeltaModelModifyRequest;
        });
    }
}
