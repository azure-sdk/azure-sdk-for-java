// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * InferenceEndpoint configuration.
 */
@Fluent
public final class InferenceEndpointProperties extends PropertiesBase {
    /*
     * [Required] Authentication mode for the endpoint.
     */
    private AuthMode authMode;

    /*
     * Endpoint URI for the inference endpoint.
     */
    private String endpointUri;

    /*
     * [Required] Group within the same pool with which this endpoint needs to be associated with.
     */
    private String groupName;

    /*
     * Provisioning state for the endpoint.
     */
    private PoolProvisioningState provisioningState;

    /*
     * RequestConfiguration for endpoint.
     */
    private RequestConfiguration requestConfiguration;

    /**
     * Creates an instance of InferenceEndpointProperties class.
     */
    public InferenceEndpointProperties() {
    }

    /**
     * Get the authMode property: [Required] Authentication mode for the endpoint.
     * 
     * @return the authMode value.
     */
    public AuthMode authMode() {
        return this.authMode;
    }

    /**
     * Set the authMode property: [Required] Authentication mode for the endpoint.
     * 
     * @param authMode the authMode value to set.
     * @return the InferenceEndpointProperties object itself.
     */
    public InferenceEndpointProperties withAuthMode(AuthMode authMode) {
        this.authMode = authMode;
        return this;
    }

    /**
     * Get the endpointUri property: Endpoint URI for the inference endpoint.
     * 
     * @return the endpointUri value.
     */
    public String endpointUri() {
        return this.endpointUri;
    }

    /**
     * Get the groupName property: [Required] Group within the same pool with which this endpoint needs to be associated
     * with.
     * 
     * @return the groupName value.
     */
    public String groupName() {
        return this.groupName;
    }

    /**
     * Set the groupName property: [Required] Group within the same pool with which this endpoint needs to be associated
     * with.
     * 
     * @param groupName the groupName value to set.
     * @return the InferenceEndpointProperties object itself.
     */
    public InferenceEndpointProperties withGroupName(String groupName) {
        this.groupName = groupName;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state for the endpoint.
     * 
     * @return the provisioningState value.
     */
    public PoolProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the requestConfiguration property: RequestConfiguration for endpoint.
     * 
     * @return the requestConfiguration value.
     */
    public RequestConfiguration requestConfiguration() {
        return this.requestConfiguration;
    }

    /**
     * Set the requestConfiguration property: RequestConfiguration for endpoint.
     * 
     * @param requestConfiguration the requestConfiguration value to set.
     * @return the InferenceEndpointProperties object itself.
     */
    public InferenceEndpointProperties withRequestConfiguration(RequestConfiguration requestConfiguration) {
        this.requestConfiguration = requestConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InferenceEndpointProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InferenceEndpointProperties withProperties(List<StringKeyValuePair> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (authMode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authMode in model InferenceEndpointProperties"));
        }
        if (groupName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property groupName in model InferenceEndpointProperties"));
        }
        if (requestConfiguration() != null) {
            requestConfiguration().validate();
        }
        if (properties() != null) {
            properties().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InferenceEndpointProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeArrayField("properties", properties(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("authMode", this.authMode == null ? null : this.authMode.toString());
        jsonWriter.writeStringField("groupName", this.groupName);
        jsonWriter.writeJsonField("requestConfiguration", this.requestConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InferenceEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InferenceEndpointProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InferenceEndpointProperties.
     */
    public static InferenceEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InferenceEndpointProperties deserializedInferenceEndpointProperties = new InferenceEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedInferenceEndpointProperties.withDescription(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    List<StringKeyValuePair> properties
                        = reader.readArray(reader1 -> StringKeyValuePair.fromJson(reader1));
                    deserializedInferenceEndpointProperties.withProperties(properties);
                } else if ("authMode".equals(fieldName)) {
                    deserializedInferenceEndpointProperties.authMode = AuthMode.fromString(reader.getString());
                } else if ("groupName".equals(fieldName)) {
                    deserializedInferenceEndpointProperties.groupName = reader.getString();
                } else if ("endpointUri".equals(fieldName)) {
                    deserializedInferenceEndpointProperties.endpointUri = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedInferenceEndpointProperties.provisioningState
                        = PoolProvisioningState.fromString(reader.getString());
                } else if ("requestConfiguration".equals(fieldName)) {
                    deserializedInferenceEndpointProperties.requestConfiguration
                        = RequestConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInferenceEndpointProperties;
        });
    }
}
