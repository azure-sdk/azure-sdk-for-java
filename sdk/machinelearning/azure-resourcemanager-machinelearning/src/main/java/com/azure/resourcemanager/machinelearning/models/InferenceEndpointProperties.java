// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * InferenceEndpoint configuration.
 */
@Fluent
public final class InferenceEndpointProperties extends PropertiesBase {
    /*
     * [Required] Authentication mode for the endpoint.
     */
    @JsonProperty(value = "authMode", required = true)
    private AuthMode authMode;

    /*
     * Endpoint URI for the inference endpoint.
     */
    @JsonProperty(value = "endpointUri", access = JsonProperty.Access.WRITE_ONLY)
    private String endpointUri;

    /*
     * [Required] Group within the same pool with which this endpoint needs to be associated with.
     */
    @JsonProperty(value = "groupId", required = true)
    private String groupId;

    /*
     * Provisioning state for the endpoint.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private PoolProvisioningState provisioningState;

    /**
     * Creates an instance of InferenceEndpointProperties class.
     */
    public InferenceEndpointProperties() {
    }

    /**
     * Get the authMode property: [Required] Authentication mode for the endpoint.
     * 
     * @return the authMode value.
     */
    public AuthMode authMode() {
        return this.authMode;
    }

    /**
     * Set the authMode property: [Required] Authentication mode for the endpoint.
     * 
     * @param authMode the authMode value to set.
     * @return the InferenceEndpointProperties object itself.
     */
    public InferenceEndpointProperties withAuthMode(AuthMode authMode) {
        this.authMode = authMode;
        return this;
    }

    /**
     * Get the endpointUri property: Endpoint URI for the inference endpoint.
     * 
     * @return the endpointUri value.
     */
    public String endpointUri() {
        return this.endpointUri;
    }

    /**
     * Get the groupId property: [Required] Group within the same pool with which this endpoint needs to be associated
     * with.
     * 
     * @return the groupId value.
     */
    public String groupId() {
        return this.groupId;
    }

    /**
     * Set the groupId property: [Required] Group within the same pool with which this endpoint needs to be associated
     * with.
     * 
     * @param groupId the groupId value to set.
     * @return the InferenceEndpointProperties object itself.
     */
    public InferenceEndpointProperties withGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state for the endpoint.
     * 
     * @return the provisioningState value.
     */
    public PoolProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InferenceEndpointProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InferenceEndpointProperties withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (authMode() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property authMode in model InferenceEndpointProperties"));
        }
        if (groupId() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property groupId in model InferenceEndpointProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InferenceEndpointProperties.class);
}
