// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Environment configuration options.
 */
@Fluent
public final class GroupEnvironmentConfiguration implements JsonSerializable<GroupEnvironmentConfiguration> {
    /*
     * ARM resource ID of the environment specification for the inference pool.
     */
    private String environmentId;

    /*
     * Environment variables configuration for the inference pool.
     */
    private List<StringKeyValuePair> environmentVariables;

    /*
     * Liveness probe monitors the health of the container regularly.
     */
    private ProbeSettings livenessProbe;

    /*
     * Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as
     * liveness probe.
     */
    private ProbeSettings readinessProbe;

    /*
     * This verifies whether the application within a container is started. Startup probes run before any other probe,
     * and, unless it finishes successfully, disables other probes.
     */
    private ProbeSettings startupProbe;

    /**
     * Creates an instance of GroupEnvironmentConfiguration class.
     */
    public GroupEnvironmentConfiguration() {
    }

    /**
     * Get the environmentId property: ARM resource ID of the environment specification for the inference pool.
     * 
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: ARM resource ID of the environment specification for the inference pool.
     * 
     * @param environmentId the environmentId value to set.
     * @return the GroupEnvironmentConfiguration object itself.
     */
    public GroupEnvironmentConfiguration withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the environmentVariables property: Environment variables configuration for the inference pool.
     * 
     * @return the environmentVariables value.
     */
    public List<StringKeyValuePair> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables configuration for the inference pool.
     * 
     * @param environmentVariables the environmentVariables value to set.
     * @return the GroupEnvironmentConfiguration object itself.
     */
    public GroupEnvironmentConfiguration withEnvironmentVariables(List<StringKeyValuePair> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the livenessProbe property: Liveness probe monitors the health of the container regularly.
     * 
     * @return the livenessProbe value.
     */
    public ProbeSettings livenessProbe() {
        return this.livenessProbe;
    }

    /**
     * Set the livenessProbe property: Liveness probe monitors the health of the container regularly.
     * 
     * @param livenessProbe the livenessProbe value to set.
     * @return the GroupEnvironmentConfiguration object itself.
     */
    public GroupEnvironmentConfiguration withLivenessProbe(ProbeSettings livenessProbe) {
        this.livenessProbe = livenessProbe;
        return this;
    }

    /**
     * Get the readinessProbe property: Readiness probe validates if the container is ready to serve traffic. The
     * properties and defaults are the same as liveness probe.
     * 
     * @return the readinessProbe value.
     */
    public ProbeSettings readinessProbe() {
        return this.readinessProbe;
    }

    /**
     * Set the readinessProbe property: Readiness probe validates if the container is ready to serve traffic. The
     * properties and defaults are the same as liveness probe.
     * 
     * @param readinessProbe the readinessProbe value to set.
     * @return the GroupEnvironmentConfiguration object itself.
     */
    public GroupEnvironmentConfiguration withReadinessProbe(ProbeSettings readinessProbe) {
        this.readinessProbe = readinessProbe;
        return this;
    }

    /**
     * Get the startupProbe property: This verifies whether the application within a container is started. Startup
     * probes run before any other probe, and, unless it finishes successfully, disables other probes.
     * 
     * @return the startupProbe value.
     */
    public ProbeSettings startupProbe() {
        return this.startupProbe;
    }

    /**
     * Set the startupProbe property: This verifies whether the application within a container is started. Startup
     * probes run before any other probe, and, unless it finishes successfully, disables other probes.
     * 
     * @param startupProbe the startupProbe value to set.
     * @return the GroupEnvironmentConfiguration object itself.
     */
    public GroupEnvironmentConfiguration withStartupProbe(ProbeSettings startupProbe) {
        this.startupProbe = startupProbe;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (environmentVariables() != null) {
            environmentVariables().forEach(e -> e.validate());
        }
        if (livenessProbe() != null) {
            livenessProbe().validate();
        }
        if (readinessProbe() != null) {
            readinessProbe().validate();
        }
        if (startupProbe() != null) {
            startupProbe().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("environmentId", this.environmentId);
        jsonWriter.writeArrayField("environmentVariables", this.environmentVariables,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("livenessProbe", this.livenessProbe);
        jsonWriter.writeJsonField("readinessProbe", this.readinessProbe);
        jsonWriter.writeJsonField("startupProbe", this.startupProbe);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GroupEnvironmentConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GroupEnvironmentConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GroupEnvironmentConfiguration.
     */
    public static GroupEnvironmentConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GroupEnvironmentConfiguration deserializedGroupEnvironmentConfiguration
                = new GroupEnvironmentConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("environmentId".equals(fieldName)) {
                    deserializedGroupEnvironmentConfiguration.environmentId = reader.getString();
                } else if ("environmentVariables".equals(fieldName)) {
                    List<StringKeyValuePair> environmentVariables
                        = reader.readArray(reader1 -> StringKeyValuePair.fromJson(reader1));
                    deserializedGroupEnvironmentConfiguration.environmentVariables = environmentVariables;
                } else if ("livenessProbe".equals(fieldName)) {
                    deserializedGroupEnvironmentConfiguration.livenessProbe = ProbeSettings.fromJson(reader);
                } else if ("readinessProbe".equals(fieldName)) {
                    deserializedGroupEnvironmentConfiguration.readinessProbe = ProbeSettings.fromJson(reader);
                } else if ("startupProbe".equals(fieldName)) {
                    deserializedGroupEnvironmentConfiguration.startupProbe = ProbeSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGroupEnvironmentConfiguration;
        });
    }
}
