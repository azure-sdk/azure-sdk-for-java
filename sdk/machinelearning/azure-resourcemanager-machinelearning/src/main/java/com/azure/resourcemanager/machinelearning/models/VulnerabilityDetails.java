// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The VulnerabilityDetails model.
 */
@Fluent
public final class VulnerabilityDetails implements JsonSerializable<VulnerabilityDetails> {
    /*
     * CVE id.
     */
    private String cve;

    /*
     * CVE url.
     */
    private String cveUrl;

    /*
     * DueDate for vulnerability. Provider data or PublishDate + 30 days.
     */
    private OffsetDateTime dueDate;

    /*
     * Vulnerability ID.
     */
    private String id;

    /*
     * Dependency details.
     */
    private List<PackageDetails> packageDetails;

    /*
     * Indicates if there is a known patch for vulnerability.
     */
    private Boolean patchable;

    /*
     * Vulnerability ID from provider.
     */
    private String providerId;

    /*
     * Vulnerability publish date.
     */
    private OffsetDateTime publishDate;

    /*
     * Vulnerability Risk value.
     */
    private VulnerabilityRisk risk;

    /*
     * Vulnerability description.
     */
    private String solution;

    /*
     * Vulnerability name.
     */
    private String title;

    /*
     * Vendor vulnerability ID (USN, GH Advisory, etc).
     */
    private String vendorId;

    /*
     * Vendor vulnerability url.
     */
    private String vendorUrl;

    /**
     * Creates an instance of VulnerabilityDetails class.
     */
    public VulnerabilityDetails() {
    }

    /**
     * Get the cve property: CVE id.
     * 
     * @return the cve value.
     */
    public String cve() {
        return this.cve;
    }

    /**
     * Set the cve property: CVE id.
     * 
     * @param cve the cve value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withCve(String cve) {
        this.cve = cve;
        return this;
    }

    /**
     * Get the cveUrl property: CVE url.
     * 
     * @return the cveUrl value.
     */
    public String cveUrl() {
        return this.cveUrl;
    }

    /**
     * Set the cveUrl property: CVE url.
     * 
     * @param cveUrl the cveUrl value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withCveUrl(String cveUrl) {
        this.cveUrl = cveUrl;
        return this;
    }

    /**
     * Get the dueDate property: DueDate for vulnerability. Provider data or PublishDate + 30 days.
     * 
     * @return the dueDate value.
     */
    public OffsetDateTime dueDate() {
        return this.dueDate;
    }

    /**
     * Set the dueDate property: DueDate for vulnerability. Provider data or PublishDate + 30 days.
     * 
     * @param dueDate the dueDate value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withDueDate(OffsetDateTime dueDate) {
        this.dueDate = dueDate;
        return this;
    }

    /**
     * Get the id property: Vulnerability ID.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the packageDetails property: Dependency details.
     * 
     * @return the packageDetails value.
     */
    public List<PackageDetails> packageDetails() {
        return this.packageDetails;
    }

    /**
     * Set the packageDetails property: Dependency details.
     * 
     * @param packageDetails the packageDetails value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withPackageDetails(List<PackageDetails> packageDetails) {
        this.packageDetails = packageDetails;
        return this;
    }

    /**
     * Get the patchable property: Indicates if there is a known patch for vulnerability.
     * 
     * @return the patchable value.
     */
    public Boolean patchable() {
        return this.patchable;
    }

    /**
     * Set the patchable property: Indicates if there is a known patch for vulnerability.
     * 
     * @param patchable the patchable value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withPatchable(Boolean patchable) {
        this.patchable = patchable;
        return this;
    }

    /**
     * Get the providerId property: Vulnerability ID from provider.
     * 
     * @return the providerId value.
     */
    public String providerId() {
        return this.providerId;
    }

    /**
     * Set the providerId property: Vulnerability ID from provider.
     * 
     * @param providerId the providerId value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withProviderId(String providerId) {
        this.providerId = providerId;
        return this;
    }

    /**
     * Get the publishDate property: Vulnerability publish date.
     * 
     * @return the publishDate value.
     */
    public OffsetDateTime publishDate() {
        return this.publishDate;
    }

    /**
     * Set the publishDate property: Vulnerability publish date.
     * 
     * @param publishDate the publishDate value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withPublishDate(OffsetDateTime publishDate) {
        this.publishDate = publishDate;
        return this;
    }

    /**
     * Get the risk property: Vulnerability Risk value.
     * 
     * @return the risk value.
     */
    public VulnerabilityRisk risk() {
        return this.risk;
    }

    /**
     * Set the risk property: Vulnerability Risk value.
     * 
     * @param risk the risk value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withRisk(VulnerabilityRisk risk) {
        this.risk = risk;
        return this;
    }

    /**
     * Get the solution property: Vulnerability description.
     * 
     * @return the solution value.
     */
    public String solution() {
        return this.solution;
    }

    /**
     * Set the solution property: Vulnerability description.
     * 
     * @param solution the solution value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withSolution(String solution) {
        this.solution = solution;
        return this;
    }

    /**
     * Get the title property: Vulnerability name.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Vulnerability name.
     * 
     * @param title the title value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the vendorId property: Vendor vulnerability ID (USN, GH Advisory, etc).
     * 
     * @return the vendorId value.
     */
    public String vendorId() {
        return this.vendorId;
    }

    /**
     * Set the vendorId property: Vendor vulnerability ID (USN, GH Advisory, etc).
     * 
     * @param vendorId the vendorId value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withVendorId(String vendorId) {
        this.vendorId = vendorId;
        return this;
    }

    /**
     * Get the vendorUrl property: Vendor vulnerability url.
     * 
     * @return the vendorUrl value.
     */
    public String vendorUrl() {
        return this.vendorUrl;
    }

    /**
     * Set the vendorUrl property: Vendor vulnerability url.
     * 
     * @param vendorUrl the vendorUrl value to set.
     * @return the VulnerabilityDetails object itself.
     */
    public VulnerabilityDetails withVendorUrl(String vendorUrl) {
        this.vendorUrl = vendorUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (packageDetails() != null) {
            packageDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cve", this.cve);
        jsonWriter.writeStringField("cveUrl", this.cveUrl);
        jsonWriter.writeStringField("dueDate",
            this.dueDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.dueDate));
        jsonWriter.writeArrayField("packageDetails", this.packageDetails,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("patchable", this.patchable);
        jsonWriter.writeStringField("providerId", this.providerId);
        jsonWriter.writeStringField("publishDate",
            this.publishDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.publishDate));
        jsonWriter.writeStringField("risk", this.risk == null ? null : this.risk.toString());
        jsonWriter.writeStringField("solution", this.solution);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("vendorId", this.vendorId);
        jsonWriter.writeStringField("vendorUrl", this.vendorUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VulnerabilityDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VulnerabilityDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VulnerabilityDetails.
     */
    public static VulnerabilityDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VulnerabilityDetails deserializedVulnerabilityDetails = new VulnerabilityDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cve".equals(fieldName)) {
                    deserializedVulnerabilityDetails.cve = reader.getString();
                } else if ("cveUrl".equals(fieldName)) {
                    deserializedVulnerabilityDetails.cveUrl = reader.getString();
                } else if ("dueDate".equals(fieldName)) {
                    deserializedVulnerabilityDetails.dueDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("id".equals(fieldName)) {
                    deserializedVulnerabilityDetails.id = reader.getString();
                } else if ("packageDetails".equals(fieldName)) {
                    List<PackageDetails> packageDetails = reader.readArray(reader1 -> PackageDetails.fromJson(reader1));
                    deserializedVulnerabilityDetails.packageDetails = packageDetails;
                } else if ("patchable".equals(fieldName)) {
                    deserializedVulnerabilityDetails.patchable = reader.getNullable(JsonReader::getBoolean);
                } else if ("providerId".equals(fieldName)) {
                    deserializedVulnerabilityDetails.providerId = reader.getString();
                } else if ("publishDate".equals(fieldName)) {
                    deserializedVulnerabilityDetails.publishDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("risk".equals(fieldName)) {
                    deserializedVulnerabilityDetails.risk = VulnerabilityRisk.fromString(reader.getString());
                } else if ("solution".equals(fieldName)) {
                    deserializedVulnerabilityDetails.solution = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedVulnerabilityDetails.title = reader.getString();
                } else if ("vendorId".equals(fieldName)) {
                    deserializedVulnerabilityDetails.vendorId = reader.getString();
                } else if ("vendorUrl".equals(fieldName)) {
                    deserializedVulnerabilityDetails.vendorUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVulnerabilityDetails;
        });
    }
}
