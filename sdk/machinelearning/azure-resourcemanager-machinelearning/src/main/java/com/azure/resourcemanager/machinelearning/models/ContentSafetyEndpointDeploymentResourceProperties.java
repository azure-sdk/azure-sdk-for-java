// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ContentSafetyEndpointDeploymentResourceProperties model.
 */
@Fluent
public final class ContentSafetyEndpointDeploymentResourceProperties extends EndpointDeploymentResourceProperties {
    /*
     * Kind of the deployment.
     */
    private String type = "Azure.ContentSafety";

    /*
     * Model used for the endpoint deployment.
     */
    private EndpointDeploymentModel model;

    /*
     * The name of RAI policy.
     */
    private String raiPolicyName;

    /*
     * Deployment model version upgrade option.
     */
    private DeploymentModelVersionUpgradeOption versionUpgradeOption;

    /*
     * Read-only provision state status property.
     */
    private DefaultResourceProvisioningState provisioningState;

    /**
     * Creates an instance of ContentSafetyEndpointDeploymentResourceProperties class.
     */
    public ContentSafetyEndpointDeploymentResourceProperties() {
    }

    /**
     * Get the type property: Kind of the deployment.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the model property: Model used for the endpoint deployment.
     * 
     * @return the model value.
     */
    public EndpointDeploymentModel model() {
        return this.model;
    }

    /**
     * Set the model property: Model used for the endpoint deployment.
     * 
     * @param model the model value to set.
     * @return the ContentSafetyEndpointDeploymentResourceProperties object itself.
     */
    public ContentSafetyEndpointDeploymentResourceProperties withModel(EndpointDeploymentModel model) {
        this.model = model;
        return this;
    }

    /**
     * Get the raiPolicyName property: The name of RAI policy.
     * 
     * @return the raiPolicyName value.
     */
    public String raiPolicyName() {
        return this.raiPolicyName;
    }

    /**
     * Set the raiPolicyName property: The name of RAI policy.
     * 
     * @param raiPolicyName the raiPolicyName value to set.
     * @return the ContentSafetyEndpointDeploymentResourceProperties object itself.
     */
    public ContentSafetyEndpointDeploymentResourceProperties withRaiPolicyName(String raiPolicyName) {
        this.raiPolicyName = raiPolicyName;
        return this;
    }

    /**
     * Get the versionUpgradeOption property: Deployment model version upgrade option.
     * 
     * @return the versionUpgradeOption value.
     */
    public DeploymentModelVersionUpgradeOption versionUpgradeOption() {
        return this.versionUpgradeOption;
    }

    /**
     * Set the versionUpgradeOption property: Deployment model version upgrade option.
     * 
     * @param versionUpgradeOption the versionUpgradeOption value to set.
     * @return the ContentSafetyEndpointDeploymentResourceProperties object itself.
     */
    public ContentSafetyEndpointDeploymentResourceProperties
        withVersionUpgradeOption(DeploymentModelVersionUpgradeOption versionUpgradeOption) {
        this.versionUpgradeOption = versionUpgradeOption;
        return this;
    }

    /**
     * Get the provisioningState property: Read-only provision state status property.
     * 
     * @return the provisioningState value.
     */
    @Override
    public DefaultResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContentSafetyEndpointDeploymentResourceProperties withFailureReason(String failureReason) {
        super.withFailureReason(failureReason);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (model() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property model in model ContentSafetyEndpointDeploymentResourceProperties"));
        } else {
            model().validate();
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(ContentSafetyEndpointDeploymentResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("failureReason", failureReason());
        jsonWriter.writeJsonField("model", this.model);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("raiPolicyName", this.raiPolicyName);
        jsonWriter.writeStringField("versionUpgradeOption",
            this.versionUpgradeOption == null ? null : this.versionUpgradeOption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContentSafetyEndpointDeploymentResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContentSafetyEndpointDeploymentResourceProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContentSafetyEndpointDeploymentResourceProperties.
     */
    public static ContentSafetyEndpointDeploymentResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContentSafetyEndpointDeploymentResourceProperties deserializedContentSafetyEndpointDeploymentResourceProperties
                = new ContentSafetyEndpointDeploymentResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("failureReason".equals(fieldName)) {
                    deserializedContentSafetyEndpointDeploymentResourceProperties.withFailureReason(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedContentSafetyEndpointDeploymentResourceProperties.provisioningState
                        = DefaultResourceProvisioningState.fromString(reader.getString());
                } else if ("model".equals(fieldName)) {
                    deserializedContentSafetyEndpointDeploymentResourceProperties.model
                        = EndpointDeploymentModel.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    deserializedContentSafetyEndpointDeploymentResourceProperties.type = reader.getString();
                } else if ("raiPolicyName".equals(fieldName)) {
                    deserializedContentSafetyEndpointDeploymentResourceProperties.raiPolicyName = reader.getString();
                } else if ("versionUpgradeOption".equals(fieldName)) {
                    deserializedContentSafetyEndpointDeploymentResourceProperties.versionUpgradeOption
                        = DeploymentModelVersionUpgradeOption.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContentSafetyEndpointDeploymentResourceProperties;
        });
    }
}
