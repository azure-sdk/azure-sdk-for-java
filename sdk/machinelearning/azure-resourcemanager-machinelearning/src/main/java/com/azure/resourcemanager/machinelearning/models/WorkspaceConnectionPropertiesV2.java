// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The WorkspaceConnectionPropertiesV2 model.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "authType",
    defaultImpl = WorkspaceConnectionPropertiesV2.class)
@JsonTypeName("WorkspaceConnectionPropertiesV2")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "AAD", value = AadAuthTypeWorkspaceConnectionProperties.class),
    @JsonSubTypes.Type(name = "AccessKey", value = AccessKeyAuthTypeWorkspaceConnectionProperties.class),
    @JsonSubTypes.Type(name = "AccountKey", value = AccountKeyAuthTypeWorkspaceConnectionProperties.class),
    @JsonSubTypes.Type(name = "ApiKey", value = ApiKeyAuthWorkspaceConnectionProperties.class),
    @JsonSubTypes.Type(name = "CustomKeys", value = CustomKeysWorkspaceConnectionProperties.class),
    @JsonSubTypes.Type(name = "ManagedIdentity", value = ManagedIdentityAuthTypeWorkspaceConnectionProperties.class),
    @JsonSubTypes.Type(name = "None", value = NoneAuthTypeWorkspaceConnectionProperties.class),
    @JsonSubTypes.Type(name = "OAuth2", value = OAuth2AuthTypeWorkspaceConnectionProperties.class),
    @JsonSubTypes.Type(name = "PAT", value = PatAuthTypeWorkspaceConnectionProperties.class),
    @JsonSubTypes.Type(name = "SAS", value = SasAuthTypeWorkspaceConnectionProperties.class),
    @JsonSubTypes.Type(name = "ServicePrincipal", value = ServicePrincipalAuthTypeWorkspaceConnectionProperties.class),
    @JsonSubTypes.Type(
        name = "UsernamePassword",
        value = UsernamePasswordAuthTypeWorkspaceConnectionProperties.class) })
@Fluent
public class WorkspaceConnectionPropertiesV2 {
    /*
     * Category of the connection
     */
    @JsonProperty(value = "category")
    private ConnectionCategory category;

    /*
     * The createdByWorkspaceArmId property.
     */
    @JsonProperty(value = "createdByWorkspaceArmId", access = JsonProperty.Access.WRITE_ONLY)
    private String createdByWorkspaceArmId;

    /*
     * The expiryTime property.
     */
    @JsonProperty(value = "expiryTime")
    private OffsetDateTime expiryTime;

    /*
     * Group based on connection category
     */
    @JsonProperty(value = "group", access = JsonProperty.Access.WRITE_ONLY)
    private ConnectionGroup group;

    /*
     * The isSharedToAll property.
     */
    @JsonProperty(value = "isSharedToAll")
    private Boolean isSharedToAll;

    /*
     * Any object
     */
    @JsonProperty(value = "metadata")
    private Object metadata;

    /*
     * The sharedUserList property.
     */
    @JsonProperty(value = "sharedUserList")
    private List<String> sharedUserList;

    /*
     * The target property.
     */
    @JsonProperty(value = "target")
    private String target;

    /**
     * Creates an instance of WorkspaceConnectionPropertiesV2 class.
     */
    public WorkspaceConnectionPropertiesV2() {
    }

    /**
     * Get the category property: Category of the connection.
     * 
     * @return the category value.
     */
    public ConnectionCategory category() {
        return this.category;
    }

    /**
     * Set the category property: Category of the connection.
     * 
     * @param category the category value to set.
     * @return the WorkspaceConnectionPropertiesV2 object itself.
     */
    public WorkspaceConnectionPropertiesV2 withCategory(ConnectionCategory category) {
        this.category = category;
        return this;
    }

    /**
     * Get the createdByWorkspaceArmId property: The createdByWorkspaceArmId property.
     * 
     * @return the createdByWorkspaceArmId value.
     */
    public String createdByWorkspaceArmId() {
        return this.createdByWorkspaceArmId;
    }

    /**
     * Get the expiryTime property: The expiryTime property.
     * 
     * @return the expiryTime value.
     */
    public OffsetDateTime expiryTime() {
        return this.expiryTime;
    }

    /**
     * Set the expiryTime property: The expiryTime property.
     * 
     * @param expiryTime the expiryTime value to set.
     * @return the WorkspaceConnectionPropertiesV2 object itself.
     */
    public WorkspaceConnectionPropertiesV2 withExpiryTime(OffsetDateTime expiryTime) {
        this.expiryTime = expiryTime;
        return this;
    }

    /**
     * Get the group property: Group based on connection category.
     * 
     * @return the group value.
     */
    public ConnectionGroup group() {
        return this.group;
    }

    /**
     * Get the isSharedToAll property: The isSharedToAll property.
     * 
     * @return the isSharedToAll value.
     */
    public Boolean isSharedToAll() {
        return this.isSharedToAll;
    }

    /**
     * Set the isSharedToAll property: The isSharedToAll property.
     * 
     * @param isSharedToAll the isSharedToAll value to set.
     * @return the WorkspaceConnectionPropertiesV2 object itself.
     */
    public WorkspaceConnectionPropertiesV2 withIsSharedToAll(Boolean isSharedToAll) {
        this.isSharedToAll = isSharedToAll;
        return this;
    }

    /**
     * Get the metadata property: Any object.
     * 
     * @return the metadata value.
     */
    public Object metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Any object.
     * 
     * @param metadata the metadata value to set.
     * @return the WorkspaceConnectionPropertiesV2 object itself.
     */
    public WorkspaceConnectionPropertiesV2 withMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the sharedUserList property: The sharedUserList property.
     * 
     * @return the sharedUserList value.
     */
    public List<String> sharedUserList() {
        return this.sharedUserList;
    }

    /**
     * Set the sharedUserList property: The sharedUserList property.
     * 
     * @param sharedUserList the sharedUserList value to set.
     * @return the WorkspaceConnectionPropertiesV2 object itself.
     */
    public WorkspaceConnectionPropertiesV2 withSharedUserList(List<String> sharedUserList) {
        this.sharedUserList = sharedUserList;
        return this;
    }

    /**
     * Get the target property: The target property.
     * 
     * @return the target value.
     */
    public String target() {
        return this.target;
    }

    /**
     * Set the target property: The target property.
     * 
     * @param target the target value to set.
     * @return the WorkspaceConnectionPropertiesV2 object itself.
     */
    public WorkspaceConnectionPropertiesV2 withTarget(String target) {
        this.target = target;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
