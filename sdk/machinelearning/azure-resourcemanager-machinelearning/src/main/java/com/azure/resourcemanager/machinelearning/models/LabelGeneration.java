// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LabelGeneration model.
 */
@Fluent
public final class LabelGeneration extends DataGenerationVertical {
    /*
     * [Required] Enum to determine the type of Data Generation.
     */
    private DataGenerationType dataGenerationType = DataGenerationType.LABEL_GENERATION;

    /*
     * Training data for fine tuning.
     */
    private JobInput trainingData;

    /*
     * Validation data for fine tuning.
     */
    private JobInput validationData;

    /**
     * Creates an instance of LabelGeneration class.
     */
    public LabelGeneration() {
    }

    /**
     * Get the dataGenerationType property: [Required] Enum to determine the type of Data Generation.
     * 
     * @return the dataGenerationType value.
     */
    @Override
    public DataGenerationType dataGenerationType() {
        return this.dataGenerationType;
    }

    /**
     * Get the trainingData property: Training data for fine tuning.
     * 
     * @return the trainingData value.
     */
    public JobInput trainingData() {
        return this.trainingData;
    }

    /**
     * Set the trainingData property: Training data for fine tuning.
     * 
     * @param trainingData the trainingData value to set.
     * @return the LabelGeneration object itself.
     */
    public LabelGeneration withTrainingData(JobInput trainingData) {
        this.trainingData = trainingData;
        return this;
    }

    /**
     * Get the validationData property: Validation data for fine tuning.
     * 
     * @return the validationData value.
     */
    public JobInput validationData() {
        return this.validationData;
    }

    /**
     * Set the validationData property: Validation data for fine tuning.
     * 
     * @param validationData the validationData value to set.
     * @return the LabelGeneration object itself.
     */
    public LabelGeneration withValidationData(JobInput validationData) {
        this.validationData = validationData;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabelGeneration withDataGenerationTaskType(DataGenerationTaskType dataGenerationTaskType) {
        super.withDataGenerationTaskType(dataGenerationTaskType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabelGeneration withPromptSettings(PromptSettings promptSettings) {
        super.withPromptSettings(promptSettings);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabelGeneration withTeacherModelEndpoint(TeacherModelEndpoint teacherModelEndpoint) {
        super.withTeacherModelEndpoint(teacherModelEndpoint);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabelGeneration withTeacherModelSettings(TeacherModelSettings teacherModelSettings) {
        super.withTeacherModelSettings(teacherModelSettings);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (trainingData() != null) {
            trainingData().validate();
        }
        if (validationData() != null) {
            validationData().validate();
        }
        if (dataGenerationTaskType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataGenerationTaskType in model LabelGeneration"));
        }
        if (promptSettings() != null) {
            promptSettings().validate();
        }
        if (teacherModelEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property teacherModelEndpoint in model LabelGeneration"));
        } else {
            teacherModelEndpoint().validate();
        }
        if (teacherModelSettings() != null) {
            teacherModelSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LabelGeneration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataGenerationTaskType",
            dataGenerationTaskType() == null ? null : dataGenerationTaskType().toString());
        jsonWriter.writeJsonField("teacherModelEndpoint", teacherModelEndpoint());
        jsonWriter.writeJsonField("promptSettings", promptSettings());
        jsonWriter.writeJsonField("teacherModelSettings", teacherModelSettings());
        jsonWriter.writeStringField("dataGenerationType",
            this.dataGenerationType == null ? null : this.dataGenerationType.toString());
        jsonWriter.writeJsonField("trainingData", this.trainingData);
        jsonWriter.writeJsonField("validationData", this.validationData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabelGeneration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabelGeneration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LabelGeneration.
     */
    public static LabelGeneration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabelGeneration deserializedLabelGeneration = new LabelGeneration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataGenerationTaskType".equals(fieldName)) {
                    deserializedLabelGeneration
                        .withDataGenerationTaskType(DataGenerationTaskType.fromString(reader.getString()));
                } else if ("teacherModelEndpoint".equals(fieldName)) {
                    deserializedLabelGeneration.withTeacherModelEndpoint(TeacherModelEndpoint.fromJson(reader));
                } else if ("promptSettings".equals(fieldName)) {
                    deserializedLabelGeneration.withPromptSettings(PromptSettings.fromJson(reader));
                } else if ("teacherModelSettings".equals(fieldName)) {
                    deserializedLabelGeneration.withTeacherModelSettings(TeacherModelSettings.fromJson(reader));
                } else if ("dataGenerationType".equals(fieldName)) {
                    deserializedLabelGeneration.dataGenerationType = DataGenerationType.fromString(reader.getString());
                } else if ("trainingData".equals(fieldName)) {
                    deserializedLabelGeneration.trainingData = JobInput.fromJson(reader);
                } else if ("validationData".equals(fieldName)) {
                    deserializedLabelGeneration.validationData = JobInput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabelGeneration;
        });
    }
}
