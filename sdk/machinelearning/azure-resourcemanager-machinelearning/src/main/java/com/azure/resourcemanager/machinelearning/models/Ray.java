// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Ray distribution configuration. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "distributionType")
@JsonTypeName("Ray")
@Fluent
public final class Ray extends DistributionConfiguration {
    /*
     * The address of Ray head node.
     */
    @JsonProperty(value = "address")
    private String address;

    /*
     * The port to bind the dashboard server to.
     */
    @JsonProperty(value = "dashboardPort")
    private Integer dashboardPort;

    /*
     * Additional arguments passed to ray start in head node.
     */
    @JsonProperty(value = "headNodeAdditionalArgs")
    private String headNodeAdditionalArgs;

    /*
     * Provide this argument to start the Ray dashboard GUI.
     */
    @JsonProperty(value = "includeDashboard")
    private Boolean includeDashboard;

    /*
     * The port of the head ray process.
     */
    @JsonProperty(value = "port")
    private Integer port;

    /*
     * Additional arguments passed to ray start in worker node.
     */
    @JsonProperty(value = "workerNodeAdditionalArgs")
    private String workerNodeAdditionalArgs;

    /** Creates an instance of Ray class. */
    public Ray() {
    }

    /**
     * Get the address property: The address of Ray head node.
     *
     * @return the address value.
     */
    public String address() {
        return this.address;
    }

    /**
     * Set the address property: The address of Ray head node.
     *
     * @param address the address value to set.
     * @return the Ray object itself.
     */
    public Ray withAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * Get the dashboardPort property: The port to bind the dashboard server to.
     *
     * @return the dashboardPort value.
     */
    public Integer dashboardPort() {
        return this.dashboardPort;
    }

    /**
     * Set the dashboardPort property: The port to bind the dashboard server to.
     *
     * @param dashboardPort the dashboardPort value to set.
     * @return the Ray object itself.
     */
    public Ray withDashboardPort(Integer dashboardPort) {
        this.dashboardPort = dashboardPort;
        return this;
    }

    /**
     * Get the headNodeAdditionalArgs property: Additional arguments passed to ray start in head node.
     *
     * @return the headNodeAdditionalArgs value.
     */
    public String headNodeAdditionalArgs() {
        return this.headNodeAdditionalArgs;
    }

    /**
     * Set the headNodeAdditionalArgs property: Additional arguments passed to ray start in head node.
     *
     * @param headNodeAdditionalArgs the headNodeAdditionalArgs value to set.
     * @return the Ray object itself.
     */
    public Ray withHeadNodeAdditionalArgs(String headNodeAdditionalArgs) {
        this.headNodeAdditionalArgs = headNodeAdditionalArgs;
        return this;
    }

    /**
     * Get the includeDashboard property: Provide this argument to start the Ray dashboard GUI.
     *
     * @return the includeDashboard value.
     */
    public Boolean includeDashboard() {
        return this.includeDashboard;
    }

    /**
     * Set the includeDashboard property: Provide this argument to start the Ray dashboard GUI.
     *
     * @param includeDashboard the includeDashboard value to set.
     * @return the Ray object itself.
     */
    public Ray withIncludeDashboard(Boolean includeDashboard) {
        this.includeDashboard = includeDashboard;
        return this;
    }

    /**
     * Get the port property: The port of the head ray process.
     *
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: The port of the head ray process.
     *
     * @param port the port value to set.
     * @return the Ray object itself.
     */
    public Ray withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the workerNodeAdditionalArgs property: Additional arguments passed to ray start in worker node.
     *
     * @return the workerNodeAdditionalArgs value.
     */
    public String workerNodeAdditionalArgs() {
        return this.workerNodeAdditionalArgs;
    }

    /**
     * Set the workerNodeAdditionalArgs property: Additional arguments passed to ray start in worker node.
     *
     * @param workerNodeAdditionalArgs the workerNodeAdditionalArgs value to set.
     * @return the Ray object itself.
     */
    public Ray withWorkerNodeAdditionalArgs(String workerNodeAdditionalArgs) {
        this.workerNodeAdditionalArgs = workerNodeAdditionalArgs;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
