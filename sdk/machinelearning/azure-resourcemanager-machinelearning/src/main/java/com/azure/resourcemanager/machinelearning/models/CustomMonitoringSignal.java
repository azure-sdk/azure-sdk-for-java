// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.Map;

/** The CustomMonitoringSignal model. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "signalType")
@JsonTypeName("Custom")
@Fluent
public final class CustomMonitoringSignal extends MonitoringSignalBase {
    /*
     * [Required] Reference to the component asset used to calculate the custom metrics.
     */
    @JsonProperty(value = "componentId", required = true)
    private String componentId;

    /*
     * Monitoring assets to take as input. Key is the component input port name, value is the data asset.
     */
    @JsonProperty(value = "inputAssets")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, MonitoringInputDataBase> inputAssets;

    /*
     * Extra component parameters to take as input. Key is the component literal input port name, value is the
     * parameter value.
     */
    @JsonProperty(value = "inputs")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, JobInput> inputs;

    /*
     * [Required] A list of metrics to calculate and their associated thresholds.
     */
    @JsonProperty(value = "metricThresholds", required = true)
    private List<CustomMetricThreshold> metricThresholds;

    /** Creates an instance of CustomMonitoringSignal class. */
    public CustomMonitoringSignal() {
    }

    /**
     * Get the componentId property: [Required] Reference to the component asset used to calculate the custom metrics.
     *
     * @return the componentId value.
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Set the componentId property: [Required] Reference to the component asset used to calculate the custom metrics.
     *
     * @param componentId the componentId value to set.
     * @return the CustomMonitoringSignal object itself.
     */
    public CustomMonitoringSignal withComponentId(String componentId) {
        this.componentId = componentId;
        return this;
    }

    /**
     * Get the inputAssets property: Monitoring assets to take as input. Key is the component input port name, value is
     * the data asset.
     *
     * @return the inputAssets value.
     */
    public Map<String, MonitoringInputDataBase> inputAssets() {
        return this.inputAssets;
    }

    /**
     * Set the inputAssets property: Monitoring assets to take as input. Key is the component input port name, value is
     * the data asset.
     *
     * @param inputAssets the inputAssets value to set.
     * @return the CustomMonitoringSignal object itself.
     */
    public CustomMonitoringSignal withInputAssets(Map<String, MonitoringInputDataBase> inputAssets) {
        this.inputAssets = inputAssets;
        return this;
    }

    /**
     * Get the inputs property: Extra component parameters to take as input. Key is the component literal input port
     * name, value is the parameter value.
     *
     * @return the inputs value.
     */
    public Map<String, JobInput> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: Extra component parameters to take as input. Key is the component literal input port
     * name, value is the parameter value.
     *
     * @param inputs the inputs value to set.
     * @return the CustomMonitoringSignal object itself.
     */
    public CustomMonitoringSignal withInputs(Map<String, JobInput> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the metricThresholds property: [Required] A list of metrics to calculate and their associated thresholds.
     *
     * @return the metricThresholds value.
     */
    public List<CustomMetricThreshold> metricThresholds() {
        return this.metricThresholds;
    }

    /**
     * Set the metricThresholds property: [Required] A list of metrics to calculate and their associated thresholds.
     *
     * @param metricThresholds the metricThresholds value to set.
     * @return the CustomMonitoringSignal object itself.
     */
    public CustomMonitoringSignal withMetricThresholds(List<CustomMetricThreshold> metricThresholds) {
        this.metricThresholds = metricThresholds;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CustomMonitoringSignal withNotificationTypes(List<MonitoringNotificationType> notificationTypes) {
        super.withNotificationTypes(notificationTypes);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CustomMonitoringSignal withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (componentId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property componentId in model CustomMonitoringSignal"));
        }
        if (inputAssets() != null) {
            inputAssets()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (inputs() != null) {
            inputs()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (metricThresholds() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property metricThresholds in model CustomMonitoringSignal"));
        } else {
            metricThresholds().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomMonitoringSignal.class);
}
