// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DeltaModelListRequest model.
 */
@Fluent
public final class DeltaModelListRequest implements JsonSerializable<DeltaModelListRequest> {
    /*
     * Gets or sets number of delta models to return. Default: -1, means that all will be returned.
     */
    private Integer count;

    /*
     * Gets or sets skip token for paginated response.
     */
    private String skipToken;

    /*
     * Gets or sets target base model.
     */
    private String targetBaseModel;

    /**
     * Creates an instance of DeltaModelListRequest class.
     */
    public DeltaModelListRequest() {
    }

    /**
     * Get the count property: Gets or sets number of delta models to return. Default: -1, means that all will be
     * returned.
     * 
     * @return the count value.
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Set the count property: Gets or sets number of delta models to return. Default: -1, means that all will be
     * returned.
     * 
     * @param count the count value to set.
     * @return the DeltaModelListRequest object itself.
     */
    public DeltaModelListRequest withCount(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Get the skipToken property: Gets or sets skip token for paginated response.
     * 
     * @return the skipToken value.
     */
    public String skipToken() {
        return this.skipToken;
    }

    /**
     * Set the skipToken property: Gets or sets skip token for paginated response.
     * 
     * @param skipToken the skipToken value to set.
     * @return the DeltaModelListRequest object itself.
     */
    public DeltaModelListRequest withSkipToken(String skipToken) {
        this.skipToken = skipToken;
        return this;
    }

    /**
     * Get the targetBaseModel property: Gets or sets target base model.
     * 
     * @return the targetBaseModel value.
     */
    public String targetBaseModel() {
        return this.targetBaseModel;
    }

    /**
     * Set the targetBaseModel property: Gets or sets target base model.
     * 
     * @param targetBaseModel the targetBaseModel value to set.
     * @return the DeltaModelListRequest object itself.
     */
    public DeltaModelListRequest withTargetBaseModel(String targetBaseModel) {
        this.targetBaseModel = targetBaseModel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("skipToken", this.skipToken);
        jsonWriter.writeStringField("targetBaseModel", this.targetBaseModel);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaModelListRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaModelListRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeltaModelListRequest.
     */
    public static DeltaModelListRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeltaModelListRequest deserializedDeltaModelListRequest = new DeltaModelListRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedDeltaModelListRequest.count = reader.getNullable(JsonReader::getInt);
                } else if ("skipToken".equals(fieldName)) {
                    deserializedDeltaModelListRequest.skipToken = reader.getString();
                } else if ("targetBaseModel".equals(fieldName)) {
                    deserializedDeltaModelListRequest.targetBaseModel = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeltaModelListRequest;
        });
    }
}
