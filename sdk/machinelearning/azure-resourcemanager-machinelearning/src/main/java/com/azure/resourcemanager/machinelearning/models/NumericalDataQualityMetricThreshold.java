// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The NumericalDataQualityMetricThreshold model.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "dataType",
    defaultImpl = NumericalDataQualityMetricThreshold.class,
    visible = true)
@JsonTypeName("Numerical")
@Fluent
public final class NumericalDataQualityMetricThreshold extends DataQualityMetricThresholdBase {
    /*
     * [Required] Specifies the data type of the metric threshold.
     */
    @JsonTypeId
    @JsonProperty(value = "dataType", required = true)
    private MonitoringFeatureDataType dataType = MonitoringFeatureDataType.NUMERICAL;

    /*
     * [Required] The numerical data quality metric to calculate.
     */
    @JsonProperty(value = "metric", required = true)
    private NumericalDataQualityMetric metric;

    /**
     * Creates an instance of NumericalDataQualityMetricThreshold class.
     */
    public NumericalDataQualityMetricThreshold() {
    }

    /**
     * Get the dataType property: [Required] Specifies the data type of the metric threshold.
     * 
     * @return the dataType value.
     */
    @Override
    public MonitoringFeatureDataType dataType() {
        return this.dataType;
    }

    /**
     * Get the metric property: [Required] The numerical data quality metric to calculate.
     * 
     * @return the metric value.
     */
    public NumericalDataQualityMetric metric() {
        return this.metric;
    }

    /**
     * Set the metric property: [Required] The numerical data quality metric to calculate.
     * 
     * @param metric the metric value to set.
     * @return the NumericalDataQualityMetricThreshold object itself.
     */
    public NumericalDataQualityMetricThreshold withMetric(NumericalDataQualityMetric metric) {
        this.metric = metric;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NumericalDataQualityMetricThreshold withThreshold(MonitoringThreshold threshold) {
        super.withThreshold(threshold);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (metric() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property metric in model NumericalDataQualityMetricThreshold"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NumericalDataQualityMetricThreshold.class);
}
