// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.machinelearning.models.BaseEnvironmentSource;
import com.azure.resourcemanager.machinelearning.models.InferencingServer;
import com.azure.resourcemanager.machinelearning.models.ModelConfiguration;
import com.azure.resourcemanager.machinelearning.models.ModelPackageInput;
import com.azure.resourcemanager.machinelearning.models.PackageBuildState;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Package response returned after async package operation completes successfully. */
@Immutable
public final class PackageResponseInner {
    /*
     * Base environment to start with.
     */
    @JsonProperty(value = "baseEnvironmentSource", access = JsonProperty.Access.WRITE_ONLY)
    private BaseEnvironmentSource baseEnvironmentSource;

    /*
     * Build id of the image build operation.
     */
    @JsonProperty(value = "buildId", access = JsonProperty.Access.WRITE_ONLY)
    private String buildId;

    /*
     * Build state of the image build operation.
     */
    @JsonProperty(value = "buildState", access = JsonProperty.Access.WRITE_ONLY)
    private PackageBuildState buildState;

    /*
     * Collection of environment variables.
     */
    @JsonProperty(value = "environmentVariables", access = JsonProperty.Access.WRITE_ONLY)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> environmentVariables;

    /*
     * Inferencing server configurations.
     */
    @JsonProperty(value = "inferencingServer", access = JsonProperty.Access.WRITE_ONLY)
    private InferencingServer inferencingServer;

    /*
     * Collection of inputs.
     */
    @JsonProperty(value = "inputs", access = JsonProperty.Access.WRITE_ONLY)
    private List<ModelPackageInput> inputs;

    /*
     * Log url of the image build operation.
     */
    @JsonProperty(value = "logUrl", access = JsonProperty.Access.WRITE_ONLY)
    private String logUrl;

    /*
     * Model configuration including the mount mode.
     */
    @JsonProperty(value = "modelConfiguration", access = JsonProperty.Access.WRITE_ONLY)
    private ModelConfiguration modelConfiguration;

    /*
     * Property dictionary. Tags can be added, removed, and updated.
     */
    @JsonProperty(value = "properties", access = JsonProperty.Access.WRITE_ONLY)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> properties;

    /*
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    @JsonProperty(value = "tags", access = JsonProperty.Access.WRITE_ONLY)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /*
     * Asset ID of the target environment created by package operation.
     */
    @JsonProperty(value = "targetEnvironmentId", access = JsonProperty.Access.WRITE_ONLY)
    private String targetEnvironmentId;

    /** Creates an instance of PackageResponseInner class. */
    public PackageResponseInner() {
    }

    /**
     * Get the baseEnvironmentSource property: Base environment to start with.
     *
     * @return the baseEnvironmentSource value.
     */
    public BaseEnvironmentSource baseEnvironmentSource() {
        return this.baseEnvironmentSource;
    }

    /**
     * Get the buildId property: Build id of the image build operation.
     *
     * @return the buildId value.
     */
    public String buildId() {
        return this.buildId;
    }

    /**
     * Get the buildState property: Build state of the image build operation.
     *
     * @return the buildState value.
     */
    public PackageBuildState buildState() {
        return this.buildState;
    }

    /**
     * Get the environmentVariables property: Collection of environment variables.
     *
     * @return the environmentVariables value.
     */
    public Map<String, String> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Get the inferencingServer property: Inferencing server configurations.
     *
     * @return the inferencingServer value.
     */
    public InferencingServer inferencingServer() {
        return this.inferencingServer;
    }

    /**
     * Get the inputs property: Collection of inputs.
     *
     * @return the inputs value.
     */
    public List<ModelPackageInput> inputs() {
        return this.inputs;
    }

    /**
     * Get the logUrl property: Log url of the image build operation.
     *
     * @return the logUrl value.
     */
    public String logUrl() {
        return this.logUrl;
    }

    /**
     * Get the modelConfiguration property: Model configuration including the mount mode.
     *
     * @return the modelConfiguration value.
     */
    public ModelConfiguration modelConfiguration() {
        return this.modelConfiguration;
    }

    /**
     * Get the properties property: Property dictionary. Tags can be added, removed, and updated.
     *
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Get the tags property: Tag dictionary. Tags can be added, removed, and updated.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Get the targetEnvironmentId property: Asset ID of the target environment created by package operation.
     *
     * @return the targetEnvironmentId value.
     */
    public String targetEnvironmentId() {
        return this.targetEnvironmentId;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (baseEnvironmentSource() != null) {
            baseEnvironmentSource().validate();
        }
        if (inferencingServer() != null) {
            inferencingServer().validate();
        }
        if (inputs() != null) {
            inputs().forEach(e -> e.validate());
        }
        if (modelConfiguration() != null) {
            modelConfiguration().validate();
        }
    }
}
