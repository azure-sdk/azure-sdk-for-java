// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.machinelearning.models.AccessKeyAuthTypeWorkspaceConnectionProperties;
import com.azure.resourcemanager.machinelearning.models.ConnectionCategory;
import com.azure.resourcemanager.machinelearning.models.WorkspaceConnectionAccessKey;
import com.azure.resourcemanager.machinelearning.models.WorkspaceConnectionPropertiesV2BasicResource;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Samples for WorkspaceConnections Update.
 */
public final class WorkspaceConnectionsUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2024-01-01-
     * preview/examples/WorkspaceConnection/update.json
     */
    /**
     * Sample code: UpdateWorkspaceConnection.
     * 
     * @param manager Entry point to MachineLearningManager.
     */
    public static void updateWorkspaceConnection(
        com.azure.resourcemanager.machinelearning.MachineLearningManager manager) throws IOException {
        WorkspaceConnectionPropertiesV2BasicResource resource = manager.workspaceConnections()
            .getWithResponse("test-rg", "aml-workspace-name", "some_string", null, com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withProperties(new AccessKeyAuthTypeWorkspaceConnectionProperties()
                .withCategory(ConnectionCategory.ADLSGEN2).withExpiryTime(OffsetDateTime.parse("2020-01-01T00:00:00Z"))
                .withMetadata(SerializerFactory.createDefaultManagementSerializerAdapter().deserialize("{}",
                    Object.class, SerializerEncoding.JSON))
                .withTarget("some_string").withCredentials(new WorkspaceConnectionAccessKey()
                    .withAccessKeyId("fakeTokenPlaceholder").withSecretAccessKey("fakeTokenPlaceholder")))
            .apply();
    }
}
