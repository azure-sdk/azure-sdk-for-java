// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.resourcemanager.machinelearning.fluent.models.ManagedNetworkSettingsBasicResourceInner;
import com.azure.resourcemanager.machinelearning.fluent.models.ManagedNetworkSettingsInner;
import com.azure.resourcemanager.machinelearning.models.FirewallSku;
import com.azure.resourcemanager.machinelearning.models.FqdnOutboundRule;
import com.azure.resourcemanager.machinelearning.models.IsolationMode;
import com.azure.resourcemanager.machinelearning.models.RuleCategory;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for OutboundRulesOperation Post.
 */
public final class OutboundRulesOperationPostSamples {
    /*
     * x-ms-original-file:
     * specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2025-04-01-
     * preview/examples/ManagedNetwork/postOutboundRulesV2.json
     */
    /**
     * Sample code: Post OutboundRules.
     * 
     * @param manager Entry point to MachineLearningManager.
     */
    public static void postOutboundRules(com.azure.resourcemanager.machinelearning.MachineLearningManager manager) {
        manager.outboundRulesOperations()
            .post("test-rg", "aml-workspace-name", "default",
                new ManagedNetworkSettingsBasicResourceInner()
                    .withProperties(new ManagedNetworkSettingsInner().withEnableNetworkMonitor(true)
                        .withIsolationMode(IsolationMode.ALLOW_ONLY_APPROVED_OUTBOUND)
                        .withOutboundRules(mapOf("rule_name_1",
                            new FqdnOutboundRule().withCategory(RuleCategory.USER_DEFINED)
                                .withDestination("destination_endpoint")))
                        .withFirewallSku(FirewallSku.STANDARD)),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
