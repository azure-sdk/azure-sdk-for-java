// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.resourcemanager.machinelearning.models.InferenceGroupProperties;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.Sku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import com.azure.resourcemanager.machinelearning.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for InferenceGroups CreateOrUpdate.
 */
public final class InferenceGroupsCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2024-04-01-
     * preview/examples/Workspace/InferenceGroup/createOrUpdate.json
     */
    /**
     * Sample code: CreateOrUpdate Workspace Inference Group.
     * 
     * @param manager Entry point to MachineLearningManager.
     */
    public static void createOrUpdateWorkspaceInferenceGroup(
        com.azure.resourcemanager.machinelearning.MachineLearningManager manager) {
        manager.inferenceGroups().define("string").withRegion("string")
            .withExistingInferencePool("test-rg", "my-aml-workspace", "string")
            .withProperties(
                new InferenceGroupProperties().withDescription("string").withProperties(mapOf("string", "string"))
                    .withBonusExtraCapacity(1).withMetadata("string").withPriority(1))
            .withTags(mapOf())
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("string", new UserAssignedIdentity())))
            .withKind("string").withSku(new Sku().withName("string").withTier(SkuTier.FREE).withSize("string")
                .withFamily("string").withCapacity(1))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
