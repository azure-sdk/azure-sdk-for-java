// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.machinelearning.models.InferencePool;
import com.azure.resourcemanager.machinelearning.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.machinelearning.models.PartialManagedServiceIdentity;
import com.azure.resourcemanager.machinelearning.models.PartialSku;
import com.azure.resourcemanager.machinelearning.models.SkuTier;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for InferencePools Update.
 */
public final class InferencePoolsUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2024-04-01-
     * preview/examples/Workspace/InferencePool/update.json
     */
    /**
     * Sample code: Update Workspace Inference Pool.
     * 
     * @param manager Entry point to MachineLearningManager.
     */
    public static void updateWorkspaceInferencePool(
        com.azure.resourcemanager.machinelearning.MachineLearningManager manager) throws IOException {
        InferencePool resource = manager.inferencePools()
            .getWithResponse("test-rg", "my-aml-workspace", "string", com.azure.core.util.Context.NONE).getValue();
        resource.update().withTags(mapOf())
            .withIdentity(new PartialManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("string",
                    SerializerFactory.createDefaultManagementSerializerAdapter().deserialize("{}", Object.class,
                        SerializerEncoding.JSON))))
            .withSku(new PartialSku().withCapacity(1).withFamily("string").withName("string").withSize("string")
                .withTier(SkuTier.STANDARD))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
