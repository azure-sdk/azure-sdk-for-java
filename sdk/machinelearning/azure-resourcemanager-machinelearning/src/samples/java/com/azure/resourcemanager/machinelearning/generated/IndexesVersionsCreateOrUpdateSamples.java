// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import java.util.HashMap;
import java.util.Map;

/**
 * Samples for IndexesVersions CreateOrUpdate.
 */
public final class IndexesVersionsCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2024-01-01-
     * preview/examples/IndexesVersions_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: IndexesVersions_CreateOrUpdate - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to MachineLearningManager.
     */
    public static void indexesVersionsCreateOrUpdateGeneratedByMaximumSetRule(
        com.azure.resourcemanager.machinelearning.MachineLearningManager manager) {
        manager.indexesVersions().define("2B4W5")
            .withExistingIndexe("rgazure-ai", "T8__H3_6Vh-F_H3--JB71_", "1NGRe67-Oq2-8-x").withTags(mapOf())
            .withStorageUri("aqsywhcpoehzoqirvndbyefhbk").withIndexConfigurations(mapOf()).withIsArchived(true)
            .withIsAnonymous(true).withProperties(mapOf()).create();
    }

    /*
     * x-ms-original-file:
     * specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2024-01-01-
     * preview/examples/IndexesVersions_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: IndexesVersions_CreateOrUpdate_MaximumSet_Gen.
     * 
     * @param manager Entry point to MachineLearningManager.
     */
    public static void indexesVersionsCreateOrUpdateMaximumSetGen(
        com.azure.resourcemanager.machinelearning.MachineLearningManager manager) {
        manager.indexesVersions().define("2B4W5")
            .withExistingIndexe("rgazure-ai", "T8__H3_6Vh-F_H3--JB71_", "1NGRe67-Oq2-8-x").withTags(mapOf())
            .withStorageUri("aqsywhcpoehzoqirvndbyefhbk").withIndexConfigurations(mapOf()).withIsArchived(true)
            .withIsAnonymous(true).withProperties(mapOf()).create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
