// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearning.generated;

import com.azure.resourcemanager.machinelearning.models.AzureMLBatchInferencingServer;
import com.azure.resourcemanager.machinelearning.models.BaseEnvironmentId;
import com.azure.resourcemanager.machinelearning.models.CodeConfiguration;
import com.azure.resourcemanager.machinelearning.models.ModelConfiguration;
import com.azure.resourcemanager.machinelearning.models.ModelPackageInput;
import com.azure.resourcemanager.machinelearning.models.PackageInputDeliveryMode;
import com.azure.resourcemanager.machinelearning.models.PackageInputPathUrl;
import com.azure.resourcemanager.machinelearning.models.PackageInputType;
import com.azure.resourcemanager.machinelearning.models.PackageRequest;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ModelVersions PackageMethod.
 */
public final class ModelVersionsPackageMethodSamples {
    /*
     * x-ms-original-file: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2024-04-01-preview/examples/Workspace/ModelVersion/package.json
     */
    /**
     * Sample code: Package Workspace Model Version.
     * 
     * @param manager Entry point to MachineLearningManager.
     */
    public static void
        packageWorkspaceModelVersion(com.azure.resourcemanager.machinelearning.MachineLearningManager manager) {
        manager.modelVersions()
            .packageMethod("test-rg", "my-aml-workspace", "string", "string",
                new PackageRequest().withBaseEnvironmentSource(new BaseEnvironmentId().withResourceId("string"))
                    .withEnvironmentVariables(mapOf("string", "string"))
                    .withInferencingServer(new AzureMLBatchInferencingServer().withCodeConfiguration(
                        new CodeConfiguration().withCodeId("fakeTokenPlaceholder").withScoringScript("string")))
                    .withInputs(Arrays.asList(new ModelPackageInput().withInputType(PackageInputType.URI_FILE)
                        .withMode(PackageInputDeliveryMode.DOWNLOAD)
                        .withMountPath("string")
                        .withPath(new PackageInputPathUrl().withUrl("string"))))
                    .withModelConfiguration(
                        new ModelConfiguration().withMode(PackageInputDeliveryMode.fromString("ReadOnlyMount"))
                            .withMountPath("string"))
                    .withTags(mapOf("string", "string"))
                    .withTargetEnvironmentId("string"),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
