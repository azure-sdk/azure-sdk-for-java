// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol.generated;

import com.azure.ai.chatprotocol.models.ChatCompletionChunk;
import com.azure.ai.chatprotocol.models.ChatMessageDelta;
import com.azure.ai.chatprotocol.models.ChatRole;
import com.azure.ai.chatprotocol.models.ChoiceDelta;
import com.azure.ai.chatprotocol.models.FinishReason;
import com.azure.ai.chatprotocol.models.MessageKind;
import com.azure.ai.chatprotocol.models.TextChatMessage;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class CreatesAChatCompletionForTheProvidedPromptUsingStreamingTests extends ChatProtocolClientTestBase {
    @Test
    @Disabled
    public void testCreatesAChatCompletionForTheProvidedPromptUsingStreamingTests() {
        // method invocation
        ChatCompletionChunk response = chatProtocolClient.createStreaming("chat",
            Arrays.asList(new TextChatMessage(ChatRole.USER, "Tell me a joke")), null, mapOf());

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "choices"
        List<ChoiceDelta> responseChoices = response.getChoices();
        ChoiceDelta responseChoicesFirstItem = responseChoices.iterator().next();
        Assertions.assertNotNull(responseChoicesFirstItem);
        Assertions.assertEquals(0L, responseChoicesFirstItem.getIndex());
        ChatMessageDelta responseChoicesFirstItemDelta = responseChoicesFirstItem.getDelta();
        Assertions.assertNotNull(responseChoicesFirstItemDelta);
        Assertions.assertEquals(MessageKind.TEXT, responseChoicesFirstItemDelta.getKind());
        Assertions.assertEquals(ChatRole.ASSISTANT, responseChoicesFirstItemDelta.getRole());
        Assertions.assertNotNull(responseChoicesFirstItemDelta.getSessionState());
        Assertions.assertNotNull(responseChoicesFirstItem.getSessionState());
        Assertions.assertNotNull(responseChoicesFirstItem.getContext());
        Assertions.assertEquals(FinishReason.STOPPED, responseChoicesFirstItem.getFinishReason());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
