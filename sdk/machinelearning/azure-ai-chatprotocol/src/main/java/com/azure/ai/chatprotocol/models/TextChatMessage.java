// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A single, role-attributed text message within a chat completion interaction.
 */
@Fluent
public final class TextChatMessage extends ChatMessage {
    /*
     * The type of the message. If not specified, the message is assumed to be text.
     */
    @Generated
    private MessageKind kind = MessageKind.TEXT;

    /*
     * The text associated with the message.
     */
    @Generated
    private final String content;

    /**
     * Creates an instance of TextChatMessage class.
     * 
     * @param role the role value to set.
     * @param content the content value to set.
     */
    @Generated
    public TextChatMessage(ChatRole role, String content) {
        super(role);
        this.content = content;
    }

    /**
     * Get the kind property: The type of the message. If not specified, the message is assumed to be text.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public MessageKind getKind() {
        return this.kind;
    }

    /**
     * Get the content property: The text associated with the message.
     * 
     * @return the content value.
     */
    @Generated
    public String getContent() {
        return this.content;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public TextChatMessage setSessionState(BinaryData sessionState) {
        super.setSessionState(sessionState);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", getRole() == null ? null : getRole().toString());
        if (getSessionState() != null) {
            jsonWriter.writeFieldName("sessionState");
            getSessionState().writeTo(jsonWriter);
        }
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextChatMessage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextChatMessage if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextChatMessage.
     */
    @Generated
    public static TextChatMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChatRole role = null;
            BinaryData sessionState = null;
            String content = null;
            MessageKind kind = MessageKind.TEXT;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    role = ChatRole.fromString(reader.getString());
                } else if ("sessionState".equals(fieldName)) {
                    sessionState
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("content".equals(fieldName)) {
                    content = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = MessageKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TextChatMessage deserializedTextChatMessage = new TextChatMessage(role, content);
            deserializedTextChatMessage.setSessionState(sessionState);
            deserializedTextChatMessage.kind = kind;

            return deserializedTextChatMessage;
        });
    }
}
