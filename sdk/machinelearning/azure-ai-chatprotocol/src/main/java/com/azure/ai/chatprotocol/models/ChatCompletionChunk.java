// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A single response to a streaming completion request.
 */
@Immutable
public final class ChatCompletionChunk implements JsonSerializable<ChatCompletionChunk> {
    /*
     * The collection of choice deltas received in this chunk.
     */
    @Generated
    private final List<ChoiceDelta> choices;

    /**
     * Creates an instance of ChatCompletionChunk class.
     * 
     * @param choices the choices value to set.
     */
    @Generated
    private ChatCompletionChunk(List<ChoiceDelta> choices) {
        this.choices = choices;
    }

    /**
     * Get the choices property: The collection of choice deltas received in this chunk.
     * 
     * @return the choices value.
     */
    @Generated
    public List<ChoiceDelta> getChoices() {
        return this.choices;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("choices", this.choices, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionChunk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionChunk if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionChunk.
     */
    @Generated
    public static ChatCompletionChunk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ChoiceDelta> choices = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("choices".equals(fieldName)) {
                    choices = reader.readArray(reader1 -> ChoiceDelta.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new ChatCompletionChunk(choices);
        });
    }
}
