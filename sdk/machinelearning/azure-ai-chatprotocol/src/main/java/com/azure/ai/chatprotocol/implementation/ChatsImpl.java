// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol.implementation;

import com.azure.ai.chatprotocol.ChatProtocolServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Chats.
 */
public final class ChatsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ChatsService service;

    /**
     * The service client containing this operation class.
     */
    private final ChatProtocolClientImpl client;

    /**
     * Initializes an instance of ChatsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ChatsImpl(ChatProtocolClientImpl client) {
        this.service = RestProxy.create(ChatsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public ChatProtocolServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for ChatProtocolClientChats to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ChatProtocolClientCh")
    public interface ChatsService {
        @Post("/{operationRoute}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createStreaming(@HostParam("endpoint") String endpoint,
            @PathParam("operationRoute") String operationRoute, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData streamingChatCompletionOptions, RequestOptions requestOptions,
            Context context);

        @Post("/{operationRoute}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createStreamingSync(@HostParam("endpoint") String endpoint,
            @PathParam("operationRoute") String operationRoute, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData streamingChatCompletionOptions, RequestOptions requestOptions,
            Context context);

        @Post("/{operationRoute}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> create(@HostParam("endpoint") String endpoint,
            @PathParam("operationRoute") String operationRoute, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData chatCompletionOptions, RequestOptions requestOptions,
            Context context);

        @Post("/{operationRoute}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @PathParam("operationRoute") String operationRoute, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData chatCompletionOptions, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Creates a new streaming chat completion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             kind: String(text) (Required)
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             delta (Required): {
     *                 kind: String(text) (Required)
     *                 role: String(user/system/assistant) (Optional)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Required)
     *             }
     *             finishReason: String(stop/length) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param streamingChatCompletionOptions The configuration for a streaming chat completion request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single response to a streaming completion request along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createStreamingWithResponseAsync(String operationRoute,
        BinaryData streamingChatCompletionOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createStreaming(this.client.getEndpoint(), operationRoute,
            accept, streamingChatCompletionOptions, requestOptions, context));
    }

    /**
     * Creates a new streaming chat completion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             kind: String(text) (Required)
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             delta (Required): {
     *                 kind: String(text) (Required)
     *                 role: String(user/system/assistant) (Optional)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Required)
     *             }
     *             finishReason: String(stop/length) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param streamingChatCompletionOptions The configuration for a streaming chat completion request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single response to a streaming completion request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createStreamingWithResponse(String operationRoute,
        BinaryData streamingChatCompletionOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createStreamingSync(this.client.getEndpoint(), operationRoute, accept,
            streamingChatCompletionOptions, requestOptions, Context.NONE);
    }

    /**
     * Creates a new chat completion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             kind: String(text) (Required)
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             message (Required): {
     *                 kind: String(text) (Required)
     *                 role: String(user/system/assistant) (Required)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Required)
     *             }
     *             finishReason: String(stop/length) (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param chatCompletionOptions The configuration for a chat completion request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return representation of the response to a chat completion request along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(String operationRoute, BinaryData chatCompletionOptions,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.create(this.client.getEndpoint(), operationRoute, accept,
            chatCompletionOptions, requestOptions, context));
    }

    /**
     * Creates a new chat completion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             kind: String(text) (Required)
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             message (Required): {
     *                 kind: String(text) (Required)
     *                 role: String(user/system/assistant) (Required)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Required)
     *             }
     *             finishReason: String(stop/length) (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param chatCompletionOptions The configuration for a chat completion request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return representation of the response to a chat completion request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(String operationRoute, BinaryData chatCompletionOptions,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), operationRoute, accept, chatCompletionOptions,
            requestOptions, Context.NONE);
    }
}
