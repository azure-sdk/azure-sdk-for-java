// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The representation of a delta text message received in a streaming completion.
 */
@Immutable
public final class TextChatMessageDelta extends ChatMessageDelta {
    /*
     * The type of the message. If not specified, the message is assumed to be text.
     */
    @Generated
    private MessageKind kind = MessageKind.TEXT;

    /*
     * An incremental part of the text associated with the message.
     */
    @Generated
    private String content;

    /*
     * The role associated with the message.
     */
    @Generated
    private ChatRole role;

    /*
     * Field that allows the chat app to store and retrieve data, the structure of such data is dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     */
    @Generated
    private Object sessionState;

    /**
     * Creates an instance of TextChatMessageDelta class.
     */
    @Generated
    private TextChatMessageDelta() {
    }

    /**
     * Get the kind property: The type of the message. If not specified, the message is assumed to be text.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public MessageKind getKind() {
        return this.kind;
    }

    /**
     * Get the content property: An incremental part of the text associated with the message.
     * 
     * @return the content value.
     */
    @Generated
    public String getContent() {
        return this.content;
    }

    /**
     * Get the role property: The role associated with the message.
     * 
     * @return the role value.
     */
    @Generated
    @Override
    public ChatRole getRole() {
        return this.role;
    }

    /**
     * Get the sessionState property: Field that allows the chat app to store and retrieve data, the structure of such
     * data is dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     * 
     * @return the sessionState value.
     */
    @Generated
    @Override
    public Object getSessionState() {
        return this.sessionState;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", getRole() == null ? null : getRole().toString());
        jsonWriter.writeUntypedField("sessionState", getSessionState());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("content", this.content);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextChatMessageDelta from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextChatMessageDelta if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TextChatMessageDelta.
     */
    @Generated
    public static TextChatMessageDelta fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TextChatMessageDelta deserializedTextChatMessageDelta = new TextChatMessageDelta();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    deserializedTextChatMessageDelta.role = ChatRole.fromString(reader.getString());
                } else if ("sessionState".equals(fieldName)) {
                    deserializedTextChatMessageDelta.sessionState = reader.readUntyped();
                } else if ("kind".equals(fieldName)) {
                    deserializedTextChatMessageDelta.kind = MessageKind.fromString(reader.getString());
                } else if ("content".equals(fieldName)) {
                    deserializedTextChatMessageDelta.content = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTextChatMessageDelta;
        });
    }
}
