// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol.implementation.models;

import com.azure.ai.chatprotocol.models.ChatMessage;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The CreateRequest model.
 */
@Fluent
public final class CreateRequest implements JsonSerializable<CreateRequest> {
    /*
     * The collection of context messages associated with this completion request.
     */
    @Generated
    private final List<ChatMessage> messages;

    /*
     * Indicates whether the completion is a streaming or non-streaming completion.
     */
    @Generated
    private final boolean stream = false;

    /*
     * Field that allows the chat app to store and retrieve data, the structure of such data is dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     */
    @Generated
    private Object sessionState;

    /*
     * Context allows the chat app to receive extra parameters from the client, such as temperature, functions, or
     * customer_info. These parameters are specific to the chat app and not understood by the generic clients.
     */
    @Generated
    private Map<String, Object> context;

    /**
     * Creates an instance of CreateRequest class.
     * 
     * @param messages the messages value to set.
     */
    @Generated
    public CreateRequest(List<ChatMessage> messages) {
        this.messages = messages;
    }

    /**
     * Get the messages property: The collection of context messages associated with this completion request.
     * 
     * @return the messages value.
     */
    @Generated
    public List<ChatMessage> getMessages() {
        return this.messages;
    }

    /**
     * Get the stream property: Indicates whether the completion is a streaming or non-streaming completion.
     * 
     * @return the stream value.
     */
    @Generated
    public boolean isStream() {
        return this.stream;
    }

    /**
     * Get the sessionState property: Field that allows the chat app to store and retrieve data, the structure of such
     * data is dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     * 
     * @return the sessionState value.
     */
    @Generated
    public Object getSessionState() {
        return this.sessionState;
    }

    /**
     * Set the sessionState property: Field that allows the chat app to store and retrieve data, the structure of such
     * data is dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     * 
     * @param sessionState the sessionState value to set.
     * @return the CreateRequest object itself.
     */
    @Generated
    public CreateRequest setSessionState(Object sessionState) {
        this.sessionState = sessionState;
        return this;
    }

    /**
     * Get the context property: Context allows the chat app to receive extra parameters from the client, such as
     * temperature, functions, or
     * customer_info. These parameters are specific to the chat app and not understood by the generic clients.
     * 
     * @return the context value.
     */
    @Generated
    public Map<String, Object> getContext() {
        return this.context;
    }

    /**
     * Set the context property: Context allows the chat app to receive extra parameters from the client, such as
     * temperature, functions, or
     * customer_info. These parameters are specific to the chat app and not understood by the generic clients.
     * 
     * @param context the context value to set.
     * @return the CreateRequest object itself.
     */
    @Generated
    public CreateRequest setContext(Map<String, Object> context) {
        this.context = context;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("messages", this.messages, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("stream", this.stream);
        jsonWriter.writeUntypedField("sessionState", this.sessionState);
        jsonWriter.writeMapField("context", this.context, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateRequest.
     */
    @Generated
    public static CreateRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ChatMessage> messages = null;
            Object sessionState = null;
            Map<String, Object> context = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messages".equals(fieldName)) {
                    messages = reader.readArray(reader1 -> ChatMessage.fromJson(reader1));
                } else if ("sessionState".equals(fieldName)) {
                    sessionState = reader.readUntyped();
                } else if ("context".equals(fieldName)) {
                    context = reader.readMap(reader1 -> reader1.readUntyped());
                } else {
                    reader.skipChildren();
                }
            }
            CreateRequest deserializedCreateRequest = new CreateRequest(messages);
            deserializedCreateRequest.sessionState = sessionState;
            deserializedCreateRequest.context = context;

            return deserializedCreateRequest;
        });
    }
}
