// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The representation of a delta message received in a streaming completion.
 */
@Immutable
public class ChatMessageDelta implements JsonSerializable<ChatMessageDelta> {
    /*
     * The type of the message. If not specified, the message is assumed to be text.
     */
    @Generated
    private MessageKind kind = MessageKind.fromString("ChatMessageDelta");

    /*
     * The role associated with the message.
     */
    @Generated
    private ChatRole role;

    /*
     * Field that allows the chat app to store and retrieve data, the structure of such data is dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     */
    @Generated
    private Object sessionState;

    /**
     * Creates an instance of ChatMessageDelta class.
     */
    @Generated
    protected ChatMessageDelta() {
    }

    /**
     * Get the kind property: The type of the message. If not specified, the message is assumed to be text.
     * 
     * @return the kind value.
     */
    @Generated
    public MessageKind getKind() {
        return this.kind;
    }

    /**
     * Get the role property: The role associated with the message.
     * 
     * @return the role value.
     */
    @Generated
    public ChatRole getRole() {
        return this.role;
    }

    /**
     * Set the role property: The role associated with the message.
     * 
     * @param role the role value to set.
     * @return the ChatMessageDelta object itself.
     */
    @Generated
    ChatMessageDelta setRole(ChatRole role) {
        this.role = role;
        return this;
    }

    /**
     * Get the sessionState property: Field that allows the chat app to store and retrieve data, the structure of such
     * data is dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     * 
     * @return the sessionState value.
     */
    @Generated
    public Object getSessionState() {
        return this.sessionState;
    }

    /**
     * Set the sessionState property: Field that allows the chat app to store and retrieve data, the structure of such
     * data is dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     * 
     * @param sessionState the sessionState value to set.
     * @return the ChatMessageDelta object itself.
     */
    @Generated
    ChatMessageDelta setSessionState(Object sessionState) {
        this.sessionState = sessionState;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeUntypedField("sessionState", this.sessionState);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatMessageDelta from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatMessageDelta if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ChatMessageDelta.
     */
    @Generated
    public static ChatMessageDelta fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("text".equals(discriminatorValue)) {
                    return TextChatMessageDelta.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static ChatMessageDelta fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChatMessageDelta deserializedChatMessageDelta = new ChatMessageDelta();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedChatMessageDelta.kind = MessageKind.fromString(reader.getString());
                } else if ("role".equals(fieldName)) {
                    deserializedChatMessageDelta.role = ChatRole.fromString(reader.getString());
                } else if ("sessionState".equals(fieldName)) {
                    deserializedChatMessageDelta.sessionState = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChatMessageDelta;
        });
    }
}
