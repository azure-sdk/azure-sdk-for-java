// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol;

import com.azure.ai.chatprotocol.implementation.ChatsImpl;
import com.azure.ai.chatprotocol.implementation.models.CreateRequest;
import com.azure.ai.chatprotocol.implementation.models.CreateStreamingRequest;
import com.azure.ai.chatprotocol.models.ChatCompletion;
import com.azure.ai.chatprotocol.models.ChatCompletionChunk;
import com.azure.ai.chatprotocol.models.ChatMessage;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import java.util.List;
import java.util.Map;

/**
 * Initializes a new instance of the synchronous ChatProtocolClient type.
 */
@ServiceClient(builder = ChatProtocolClientBuilder.class)
public final class ChatProtocolClient {
    @Generated
    private final ChatsImpl serviceClient;

    /**
     * Initializes an instance of ChatProtocolClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ChatProtocolClient(ChatsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new streaming chat completion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             kind: String(text) (Required)
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             delta (Required): {
     *                 kind: String(text) (Required)
     *                 role: String(user/system/assistant) (Optional)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Required)
     *             }
     *             finishReason: String(stop/length) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param createStreamingRequest The createStreamingRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single response to a streaming completion request along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createStreamingWithResponse(String operationRoute, BinaryData createStreamingRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createStreamingWithResponse(operationRoute, createStreamingRequest, requestOptions);
    }

    /**
     * Creates a new chat completion.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     messages (Required): [
     *          (Required){
     *             kind: String(text) (Required)
     *             role: String(user/system/assistant) (Required)
     *             sessionState: Object (Optional)
     *         }
     *     ]
     *     stream: boolean (Required)
     *     sessionState: Object (Optional)
     *     context (Optional): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             message (Required): {
     *                 kind: String(text) (Required)
     *                 role: String(user/system/assistant) (Required)
     *                 sessionState: Object (Optional)
     *             }
     *             sessionState: Object (Optional)
     *             context (Optional): {
     *                 String: Object (Required)
     *             }
     *             finishReason: String(stop/length) (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param createRequest The createRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return representation of the response to a chat completion request along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(String operationRoute, BinaryData createRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(operationRoute, createRequest, requestOptions);
    }

    /**
     * Creates a new streaming chat completion.
     * 
     * @param messages The collection of context messages associated with this completion request.
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param sessionState Field that allows the chat app to store and retrieve data, the structure of such data is
     * dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     * @param context Context allows the chat app to receive extra parameters from the client, such as temperature,
     * functions, or
     * customer_info. These parameters are specific to the chat app and not understood by the generic clients.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single response to a streaming completion request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatCompletionChunk createStreaming(List<ChatMessage> messages, String operationRoute, Object sessionState,
        Map<String, Object> context) {
        // Generated convenience method for createStreamingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateStreamingRequest createStreamingRequestObj
            = new CreateStreamingRequest(messages).setSessionState(sessionState).setContext(context);
        BinaryData createStreamingRequest = BinaryData.fromObject(createStreamingRequestObj);
        return createStreamingWithResponse(operationRoute, createStreamingRequest, requestOptions).getValue()
            .toObject(ChatCompletionChunk.class);
    }

    /**
     * Creates a new streaming chat completion.
     * 
     * @param messages The collection of context messages associated with this completion request.
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single response to a streaming completion request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatCompletionChunk createStreaming(List<ChatMessage> messages, String operationRoute) {
        // Generated convenience method for createStreamingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateStreamingRequest createStreamingRequestObj = new CreateStreamingRequest(messages);
        BinaryData createStreamingRequest = BinaryData.fromObject(createStreamingRequestObj);
        return createStreamingWithResponse(operationRoute, createStreamingRequest, requestOptions).getValue()
            .toObject(ChatCompletionChunk.class);
    }

    /**
     * Creates a new chat completion.
     * 
     * @param messages The collection of context messages associated with this completion request.
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @param sessionState Field that allows the chat app to store and retrieve data, the structure of such data is
     * dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     * @param context Context allows the chat app to receive extra parameters from the client, such as temperature,
     * functions, or
     * customer_info. These parameters are specific to the chat app and not understood by the generic clients.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return representation of the response to a chat completion request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatCompletion create(List<ChatMessage> messages, String operationRoute, Object sessionState,
        Map<String, Object> context) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateRequest createRequestObj = new CreateRequest(messages).setSessionState(sessionState).setContext(context);
        BinaryData createRequest = BinaryData.fromObject(createRequestObj);
        return createWithResponse(operationRoute, createRequest, requestOptions).getValue()
            .toObject(ChatCompletion.class);
    }

    /**
     * Creates a new chat completion.
     * 
     * @param messages The collection of context messages associated with this completion request.
     * @param operationRoute The route where the endpoint exposes the chat operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return representation of the response to a chat completion request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatCompletion create(List<ChatMessage> messages, String operationRoute) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateRequest createRequestObj = new CreateRequest(messages);
        BinaryData createRequest = BinaryData.fromObject(createRequestObj);
        return createWithResponse(operationRoute, createRequest, requestOptions).getValue()
            .toObject(ChatCompletion.class);
    }
}
