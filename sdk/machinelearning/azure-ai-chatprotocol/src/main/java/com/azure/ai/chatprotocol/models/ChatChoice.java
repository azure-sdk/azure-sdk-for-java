// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.chatprotocol.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The representation of a single generated completion.
 */
@Immutable
public final class ChatChoice implements JsonSerializable<ChatChoice> {
    /*
     * The index of the of the chat choice, relative to the other choices in the same completion.
     */
    @Generated
    private final long index;

    /*
     * The chat message for a given chat completion.
     */
    @Generated
    private final ChatMessage message;

    /*
     * Field that allows the chat app to store and retrieve data, the structure of such data is dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     */
    @Generated
    private Object sessionState;

    /*
     * Context allows the chat app to receive extra parameters from the client, such as temperature, functions, or
     * customer_info. These parameters are specific to the chat app and not understood by the generic clients.
     */
    @Generated
    private Map<String, Object> context;

    /*
     * The reason this chat completion completed its generation.
     */
    @Generated
    private final FinishReason finishReason;

    /**
     * Creates an instance of ChatChoice class.
     * 
     * @param index the index value to set.
     * @param message the message value to set.
     * @param finishReason the finishReason value to set.
     */
    @Generated
    private ChatChoice(long index, ChatMessage message, FinishReason finishReason) {
        this.index = index;
        this.message = message;
        this.finishReason = finishReason;
    }

    /**
     * Get the index property: The index of the of the chat choice, relative to the other choices in the same
     * completion.
     * 
     * @return the index value.
     */
    @Generated
    public long getIndex() {
        return this.index;
    }

    /**
     * Get the message property: The chat message for a given chat completion.
     * 
     * @return the message value.
     */
    @Generated
    public ChatMessage getMessage() {
        return this.message;
    }

    /**
     * Get the sessionState property: Field that allows the chat app to store and retrieve data, the structure of such
     * data is dependant on the backend
     * being used. The client must send back the data in this field unchanged in subsequent requests, until the chat app
     * sends a new one. The data in this field can be used to implement stateful services, such as remembering previous
     * conversations or user preferences.
     * 
     * @return the sessionState value.
     */
    @Generated
    public Object getSessionState() {
        return this.sessionState;
    }

    /**
     * Get the context property: Context allows the chat app to receive extra parameters from the client, such as
     * temperature, functions, or
     * customer_info. These parameters are specific to the chat app and not understood by the generic clients.
     * 
     * @return the context value.
     */
    @Generated
    public Map<String, Object> getContext() {
        return this.context;
    }

    /**
     * Get the finishReason property: The reason this chat completion completed its generation.
     * 
     * @return the finishReason value.
     */
    @Generated
    public FinishReason getFinishReason() {
        return this.finishReason;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("index", this.index);
        jsonWriter.writeJsonField("message", this.message);
        jsonWriter.writeStringField("finishReason", this.finishReason == null ? null : this.finishReason.toString());
        jsonWriter.writeUntypedField("sessionState", this.sessionState);
        jsonWriter.writeMapField("context", this.context, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatChoice from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatChoice if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatChoice.
     */
    @Generated
    public static ChatChoice fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            long index = 0L;
            ChatMessage message = null;
            FinishReason finishReason = null;
            Object sessionState = null;
            Map<String, Object> context = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("index".equals(fieldName)) {
                    index = reader.getLong();
                } else if ("message".equals(fieldName)) {
                    message = ChatMessage.fromJson(reader);
                } else if ("finishReason".equals(fieldName)) {
                    finishReason = FinishReason.fromString(reader.getString());
                } else if ("sessionState".equals(fieldName)) {
                    sessionState = reader.readUntyped();
                } else if ("context".equals(fieldName)) {
                    context = reader.readMap(reader1 -> reader1.readUntyped());
                } else {
                    reader.skipChildren();
                }
            }
            ChatChoice deserializedChatChoice = new ChatChoice(index, message, finishReason);
            deserializedChatChoice.sessionState = sessionState;
            deserializedChatChoice.context = context;

            return deserializedChatChoice;
        });
    }
}
