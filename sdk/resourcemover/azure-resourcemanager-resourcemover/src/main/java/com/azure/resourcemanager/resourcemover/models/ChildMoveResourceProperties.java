// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the child move resource properties.
 */
@Fluent
public final class ChildMoveResourceProperties implements JsonSerializable<ChildMoveResourceProperties> {
    /*
     * Gets or sets the Source ARM Id of the child resource.
     */
    private String sourceId;

    /*
     * Gets or sets the resource settings.
     */
    private ResourceSettings resourceSettings;

    /*
     * Gets or sets the source resource settings.
     */
    private ResourceSettings sourceResourceSettings;

    /*
     * Defines the child move resource state.
     */
    private MoveState moveState;

    /*
     * Defines the child move resource errors.
     */
    private ChildMoveResourcePropertiesErrors errors;

    /**
     * Creates an instance of ChildMoveResourceProperties class.
     */
    public ChildMoveResourceProperties() {
    }

    /**
     * Get the sourceId property: Gets or sets the Source ARM Id of the child resource.
     * 
     * @return the sourceId value.
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Set the sourceId property: Gets or sets the Source ARM Id of the child resource.
     * 
     * @param sourceId the sourceId value to set.
     * @return the ChildMoveResourceProperties object itself.
     */
    public ChildMoveResourceProperties withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Get the resourceSettings property: Gets or sets the resource settings.
     * 
     * @return the resourceSettings value.
     */
    public ResourceSettings resourceSettings() {
        return this.resourceSettings;
    }

    /**
     * Set the resourceSettings property: Gets or sets the resource settings.
     * 
     * @param resourceSettings the resourceSettings value to set.
     * @return the ChildMoveResourceProperties object itself.
     */
    public ChildMoveResourceProperties withResourceSettings(ResourceSettings resourceSettings) {
        this.resourceSettings = resourceSettings;
        return this;
    }

    /**
     * Get the sourceResourceSettings property: Gets or sets the source resource settings.
     * 
     * @return the sourceResourceSettings value.
     */
    public ResourceSettings sourceResourceSettings() {
        return this.sourceResourceSettings;
    }

    /**
     * Get the moveState property: Defines the child move resource state.
     * 
     * @return the moveState value.
     */
    public MoveState moveState() {
        return this.moveState;
    }

    /**
     * Get the errors property: Defines the child move resource errors.
     * 
     * @return the errors value.
     */
    public ChildMoveResourcePropertiesErrors errors() {
        return this.errors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceId in model ChildMoveResourceProperties"));
        }
        if (resourceSettings() != null) {
            resourceSettings().validate();
        }
        if (sourceResourceSettings() != null) {
            sourceResourceSettings().validate();
        }
        if (errors() != null) {
            errors().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ChildMoveResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceId", this.sourceId);
        jsonWriter.writeJsonField("resourceSettings", this.resourceSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChildMoveResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChildMoveResourceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChildMoveResourceProperties.
     */
    public static ChildMoveResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChildMoveResourceProperties deserializedChildMoveResourceProperties = new ChildMoveResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceId".equals(fieldName)) {
                    deserializedChildMoveResourceProperties.sourceId = reader.getString();
                } else if ("resourceSettings".equals(fieldName)) {
                    deserializedChildMoveResourceProperties.resourceSettings = ResourceSettings.fromJson(reader);
                } else if ("sourceResourceSettings".equals(fieldName)) {
                    deserializedChildMoveResourceProperties.sourceResourceSettings = ResourceSettings.fromJson(reader);
                } else if ("moveState".equals(fieldName)) {
                    deserializedChildMoveResourceProperties.moveState = MoveState.fromString(reader.getString());
                } else if ("errors".equals(fieldName)) {
                    deserializedChildMoveResourceProperties.errors = ChildMoveResourcePropertiesErrors.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChildMoveResourceProperties;
        });
    }
}
