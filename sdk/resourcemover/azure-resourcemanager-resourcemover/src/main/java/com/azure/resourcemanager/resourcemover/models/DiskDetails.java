// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the virtual machine disk details.
 */
@Fluent
public final class DiskDetails implements JsonSerializable<DiskDetails> {
    /*
     * Gets or sets the source disk Id.
     */
    private String sourceId;

    /*
     * Gets or sets the target disk name.
     */
    private String targetDiskName;

    /**
     * Creates an instance of DiskDetails class.
     */
    public DiskDetails() {
    }

    /**
     * Get the sourceId property: Gets or sets the source disk Id.
     * 
     * @return the sourceId value.
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Set the sourceId property: Gets or sets the source disk Id.
     * 
     * @param sourceId the sourceId value to set.
     * @return the DiskDetails object itself.
     */
    public DiskDetails withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Get the targetDiskName property: Gets or sets the target disk name.
     * 
     * @return the targetDiskName value.
     */
    public String targetDiskName() {
        return this.targetDiskName;
    }

    /**
     * Set the targetDiskName property: Gets or sets the target disk name.
     * 
     * @param targetDiskName the targetDiskName value to set.
     * @return the DiskDetails object itself.
     */
    public DiskDetails withTargetDiskName(String targetDiskName) {
        this.targetDiskName = targetDiskName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceId", this.sourceId);
        jsonWriter.writeStringField("targetDiskName", this.targetDiskName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiskDetails.
     */
    public static DiskDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskDetails deserializedDiskDetails = new DiskDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceId".equals(fieldName)) {
                    deserializedDiskDetails.sourceId = reader.getString();
                } else if ("targetDiskName".equals(fieldName)) {
                    deserializedDiskDetails.targetDiskName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskDetails;
        });
    }
}
