// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.onlineexperimentation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The result of validating an experiment metric.
 */
@Immutable
public final class ExperimentMetricValidationResult implements JsonSerializable<ExperimentMetricValidationResult> {
    /*
     * Diagnostic details from the validation process.
     */
    @Generated
    private List<DiagnosticDetail> diagnostics;

    /*
     * Indicates whether the experiment metric is valid.
     */
    @Generated
    private final ValidationResult result;

    /**
     * Creates an instance of ExperimentMetricValidationResult class.
     * 
     * @param result the result value to set.
     */
    @Generated
    private ExperimentMetricValidationResult(ValidationResult result) {
        this.result = result;
    }

    /**
     * Get the diagnostics property: Diagnostic details from the validation process.
     * 
     * @return the diagnostics value.
     */
    @Generated
    public List<DiagnosticDetail> getDiagnostics() {
        return this.diagnostics;
    }

    /**
     * Get the result property: Indicates whether the experiment metric is valid.
     * 
     * @return the result value.
     */
    @Generated
    public ValidationResult getResult() {
        return this.result;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("result", this.result == null ? null : this.result.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExperimentMetricValidationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExperimentMetricValidationResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExperimentMetricValidationResult.
     */
    @Generated
    public static ExperimentMetricValidationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<DiagnosticDetail> diagnostics = null;
            ValidationResult result = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diagnostics".equals(fieldName)) {
                    diagnostics = reader.readArray(reader1 -> DiagnosticDetail.fromJson(reader1));
                } else if ("result".equals(fieldName)) {
                    result = ValidationResult.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ExperimentMetricValidationResult deserializedExperimentMetricValidationResult
                = new ExperimentMetricValidationResult(result);
            deserializedExperimentMetricValidationResult.diagnostics = diagnostics;

            return deserializedExperimentMetricValidationResult;
        });
    }
}
