// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerregistry.generated.models.ConnectedRegistryUpdateProperties;
import com.azure.resourcemanager.containerregistry.generated.models.GarbageCollectionProperties;
import com.azure.resourcemanager.containerregistry.generated.models.LoggingProperties;
import com.azure.resourcemanager.containerregistry.generated.models.SyncUpdateProperties;
import java.io.IOException;
import java.util.List;

/**
 * The ConnectedRegistryUpdateParametersProperties model.
 */
@Fluent
public final class ConnectedRegistryUpdateParametersProperties extends ConnectedRegistryUpdateProperties {
    /**
     * Creates an instance of ConnectedRegistryUpdateParametersProperties class.
     */
    public ConnectedRegistryUpdateParametersProperties() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryUpdateParametersProperties withSyncProperties(SyncUpdateProperties syncProperties) {
        super.withSyncProperties(syncProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryUpdateParametersProperties withLogging(LoggingProperties logging) {
        super.withLogging(logging);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryUpdateParametersProperties withClientTokenIds(List<String> clientTokenIds) {
        super.withClientTokenIds(clientTokenIds);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryUpdateParametersProperties withNotificationsList(List<String> notificationsList) {
        super.withNotificationsList(notificationsList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryUpdateParametersProperties
        withGarbageCollection(GarbageCollectionProperties garbageCollection) {
        super.withGarbageCollection(garbageCollection);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (syncProperties() != null) {
            syncProperties().validate();
        }
        if (logging() != null) {
            logging().validate();
        }
        if (garbageCollection() != null) {
            garbageCollection().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("syncProperties", syncProperties());
        jsonWriter.writeJsonField("logging", logging());
        jsonWriter.writeArrayField("clientTokenIds", clientTokenIds(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("notificationsList", notificationsList(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("garbageCollection", garbageCollection());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectedRegistryUpdateParametersProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectedRegistryUpdateParametersProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectedRegistryUpdateParametersProperties.
     */
    public static ConnectedRegistryUpdateParametersProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectedRegistryUpdateParametersProperties deserializedConnectedRegistryUpdateParametersProperties
                = new ConnectedRegistryUpdateParametersProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("syncProperties".equals(fieldName)) {
                    deserializedConnectedRegistryUpdateParametersProperties
                        .withSyncProperties(SyncUpdateProperties.fromJson(reader));
                } else if ("logging".equals(fieldName)) {
                    deserializedConnectedRegistryUpdateParametersProperties
                        .withLogging(LoggingProperties.fromJson(reader));
                } else if ("clientTokenIds".equals(fieldName)) {
                    List<String> clientTokenIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectedRegistryUpdateParametersProperties.withClientTokenIds(clientTokenIds);
                } else if ("notificationsList".equals(fieldName)) {
                    List<String> notificationsList = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectedRegistryUpdateParametersProperties.withNotificationsList(notificationsList);
                } else if ("garbageCollection".equals(fieldName)) {
                    deserializedConnectedRegistryUpdateParametersProperties
                        .withGarbageCollection(GarbageCollectionProperties.fromJson(reader));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectedRegistryUpdateParametersProperties;
        });
    }
}
