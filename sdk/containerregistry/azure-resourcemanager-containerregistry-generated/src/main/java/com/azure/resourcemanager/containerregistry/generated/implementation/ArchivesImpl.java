// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerregistry.generated.fluent.ArchivesClient;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.ArchiveInner;
import com.azure.resourcemanager.containerregistry.generated.models.Archive;
import com.azure.resourcemanager.containerregistry.generated.models.Archives;

public final class ArchivesImpl implements Archives {
    private static final ClientLogger LOGGER = new ClientLogger(ArchivesImpl.class);

    private final ArchivesClient innerClient;

    private final com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager;

    public ArchivesImpl(ArchivesClient innerClient,
        com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Archive> list(String resourceGroupName, String registryName, String packageType) {
        PagedIterable<ArchiveInner> inner = this.serviceClient().list(resourceGroupName, registryName, packageType);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ArchiveImpl(inner1, this.manager()));
    }

    public PagedIterable<Archive> list(String resourceGroupName, String registryName, String packageType,
        Context context) {
        PagedIterable<ArchiveInner> inner
            = this.serviceClient().list(resourceGroupName, registryName, packageType, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ArchiveImpl(inner1, this.manager()));
    }

    public Response<Archive> getWithResponse(String resourceGroupName, String registryName, String packageType,
        String archiveName, Context context) {
        Response<ArchiveInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, registryName, packageType, archiveName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ArchiveImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Archive get(String resourceGroupName, String registryName, String packageType, String archiveName) {
        ArchiveInner inner = this.serviceClient().get(resourceGroupName, registryName, packageType, archiveName);
        if (inner != null) {
            return new ArchiveImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String registryName, String packageType, String archiveName) {
        this.serviceClient().delete(resourceGroupName, registryName, packageType, archiveName);
    }

    public void delete(String resourceGroupName, String registryName, String packageType, String archiveName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, registryName, packageType, archiveName, context);
    }

    public Archive getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String packageType = ResourceManagerUtils.getValueFromIdByName(id, "packages");
        if (packageType == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'packages'.", id)));
        }
        String archiveName = ResourceManagerUtils.getValueFromIdByName(id, "archives");
        if (archiveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'archives'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, packageType, archiveName, Context.NONE).getValue();
    }

    public Response<Archive> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String packageType = ResourceManagerUtils.getValueFromIdByName(id, "packages");
        if (packageType == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'packages'.", id)));
        }
        String archiveName = ResourceManagerUtils.getValueFromIdByName(id, "archives");
        if (archiveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'archives'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, packageType, archiveName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String packageType = ResourceManagerUtils.getValueFromIdByName(id, "packages");
        if (packageType == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'packages'.", id)));
        }
        String archiveName = ResourceManagerUtils.getValueFromIdByName(id, "archives");
        if (archiveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'archives'.", id)));
        }
        this.delete(resourceGroupName, registryName, packageType, archiveName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = ResourceManagerUtils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String packageType = ResourceManagerUtils.getValueFromIdByName(id, "packages");
        if (packageType == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'packages'.", id)));
        }
        String archiveName = ResourceManagerUtils.getValueFromIdByName(id, "archives");
        if (archiveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'archives'.", id)));
        }
        this.delete(resourceGroupName, registryName, packageType, archiveName, context);
    }

    private ArchivesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager manager() {
        return this.serviceManager;
    }

    public ArchiveImpl define(String name) {
        return new ArchiveImpl(name, this.manager());
    }
}
