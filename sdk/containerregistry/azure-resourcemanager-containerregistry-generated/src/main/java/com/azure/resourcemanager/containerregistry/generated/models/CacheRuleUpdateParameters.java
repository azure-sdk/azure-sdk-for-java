// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.CacheRuleUpdateProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The parameters for updating a cache rule.
 */
@Fluent
public final class CacheRuleUpdateParameters {
    /*
     * The parameters for updating cache rule properties.
     */
    @JsonProperty(value = "properties")
    private CacheRuleUpdateProperties innerProperties;

    /**
     * Creates an instance of CacheRuleUpdateParameters class.
     */
    public CacheRuleUpdateParameters() {
    }

    /**
     * Get the innerProperties property: The parameters for updating cache rule properties.
     * 
     * @return the innerProperties value.
     */
    private CacheRuleUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the credentialSetResourceId property: The ARM resource ID of the credential store which is associated with
     * the Cache rule.
     * 
     * @return the credentialSetResourceId value.
     */
    public String credentialSetResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().credentialSetResourceId();
    }

    /**
     * Set the credentialSetResourceId property: The ARM resource ID of the credential store which is associated with
     * the Cache rule.
     * 
     * @param credentialSetResourceId the credentialSetResourceId value to set.
     * @return the CacheRuleUpdateParameters object itself.
     */
    public CacheRuleUpdateParameters withCredentialSetResourceId(String credentialSetResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CacheRuleUpdateProperties();
        }
        this.innerProperties().withCredentialSetResourceId(credentialSetResourceId);
        return this;
    }

    /**
     * Get the artifactSyncStatus property: The status of artifact sync.
     * 
     * @return the artifactSyncStatus value.
     */
    public ArtifactSyncStatus artifactSyncStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().artifactSyncStatus();
    }

    /**
     * Set the artifactSyncStatus property: The status of artifact sync.
     * 
     * @param artifactSyncStatus the artifactSyncStatus value to set.
     * @return the CacheRuleUpdateParameters object itself.
     */
    public CacheRuleUpdateParameters withArtifactSyncStatus(ArtifactSyncStatus artifactSyncStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CacheRuleUpdateProperties();
        }
        this.innerProperties().withArtifactSyncStatus(artifactSyncStatus);
        return this;
    }

    /**
     * Get the artifactSyncScopeFilterProperties property: The scope filter properties of artifact sync.
     * 
     * @return the artifactSyncScopeFilterProperties value.
     */
    public ArtifactSyncScopeFilterProperties artifactSyncScopeFilterProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().artifactSyncScopeFilterProperties();
    }

    /**
     * Set the artifactSyncScopeFilterProperties property: The scope filter properties of artifact sync.
     * 
     * @param artifactSyncScopeFilterProperties the artifactSyncScopeFilterProperties value to set.
     * @return the CacheRuleUpdateParameters object itself.
     */
    public CacheRuleUpdateParameters
        withArtifactSyncScopeFilterProperties(ArtifactSyncScopeFilterProperties artifactSyncScopeFilterProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CacheRuleUpdateProperties();
        }
        this.innerProperties().withArtifactSyncScopeFilterProperties(artifactSyncScopeFilterProperties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
