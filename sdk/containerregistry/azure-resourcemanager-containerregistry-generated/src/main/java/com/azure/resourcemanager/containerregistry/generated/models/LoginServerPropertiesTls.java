// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LoginServerPropertiesTls model.
 */
@Immutable
public final class LoginServerPropertiesTls extends TlsProperties {
    /*
     * The certificate property.
     */
    private TlsPropertiesCertificate certificate;

    /*
     * Indicates whether HTTPS is enabled for the login server.
     */
    private TlsStatus status;

    /**
     * Creates an instance of LoginServerPropertiesTls class.
     */
    public LoginServerPropertiesTls() {
    }

    /**
     * Get the certificate property: The certificate property.
     * 
     * @return the certificate value.
     */
    @Override
    public TlsPropertiesCertificate certificate() {
        return this.certificate;
    }

    /**
     * Get the status property: Indicates whether HTTPS is enabled for the login server.
     * 
     * @return the status value.
     */
    @Override
    public TlsStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (certificate() != null) {
            certificate().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoginServerPropertiesTls from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoginServerPropertiesTls if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoginServerPropertiesTls.
     */
    public static LoginServerPropertiesTls fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoginServerPropertiesTls deserializedLoginServerPropertiesTls = new LoginServerPropertiesTls();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedLoginServerPropertiesTls.status = TlsStatus.fromString(reader.getString());
                } else if ("certificate".equals(fieldName)) {
                    deserializedLoginServerPropertiesTls.certificate = TlsPropertiesCertificate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoginServerPropertiesTls;
        });
    }
}
