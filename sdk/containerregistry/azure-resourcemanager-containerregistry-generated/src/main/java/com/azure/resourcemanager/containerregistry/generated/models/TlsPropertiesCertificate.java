// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The TlsPropertiesCertificate model.
 */
@Immutable
public final class TlsPropertiesCertificate extends TlsCertificateProperties {
    /*
     * Indicates the location of the certificates.
     */
    private String location;

    /*
     * The type of certificate location.
     */
    private CertificateType type;

    /**
     * Creates an instance of TlsPropertiesCertificate class.
     */
    public TlsPropertiesCertificate() {
    }

    /**
     * Get the location property: Indicates the location of the certificates.
     * 
     * @return the location value.
     */
    @Override
    public String location() {
        return this.location;
    }

    /**
     * Get the type property: The type of certificate location.
     * 
     * @return the type value.
     */
    @Override
    public CertificateType type() {
        return this.type;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TlsPropertiesCertificate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TlsPropertiesCertificate if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TlsPropertiesCertificate.
     */
    public static TlsPropertiesCertificate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TlsPropertiesCertificate deserializedTlsPropertiesCertificate = new TlsPropertiesCertificate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedTlsPropertiesCertificate.type = CertificateType.fromString(reader.getString());
                } else if ("location".equals(fieldName)) {
                    deserializedTlsPropertiesCertificate.location = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTlsPropertiesCertificate;
        });
    }
}
