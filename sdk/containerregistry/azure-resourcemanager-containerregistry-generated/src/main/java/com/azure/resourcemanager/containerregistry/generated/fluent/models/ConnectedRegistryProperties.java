// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerregistry.generated.models.ConnectedRegistryMode;
import com.azure.resourcemanager.containerregistry.generated.models.ConnectedRegistryPropertiesActivation;
import com.azure.resourcemanager.containerregistry.generated.models.ConnectedRegistryPropertiesAutoGenerated;
import com.azure.resourcemanager.containerregistry.generated.models.ConnectionState;
import com.azure.resourcemanager.containerregistry.generated.models.GarbageCollectionProperties;
import com.azure.resourcemanager.containerregistry.generated.models.LoggingProperties;
import com.azure.resourcemanager.containerregistry.generated.models.LoginServerProperties;
import com.azure.resourcemanager.containerregistry.generated.models.ParentProperties;
import com.azure.resourcemanager.containerregistry.generated.models.ProvisioningState;
import com.azure.resourcemanager.containerregistry.generated.models.StatusDetailProperties;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The ConnectedRegistryProperties model.
 */
@Fluent
public final class ConnectedRegistryProperties extends ConnectedRegistryPropertiesAutoGenerated {
    /*
     * The list of current statuses of the connected registry.
     */
    private List<StatusDetailProperties> statusDetails;

    /*
     * The activation property.
     */
    private ConnectedRegistryPropertiesActivation activation;

    /*
     * The last activity time of the connected registry.
     */
    private OffsetDateTime lastActivityTime;

    /*
     * The current connection state of the connected registry.
     */
    private ConnectionState connectionState;

    /*
     * The current version of ACR runtime on the connected registry.
     */
    private String version;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ConnectedRegistryProperties class.
     */
    public ConnectedRegistryProperties() {
    }

    /**
     * Get the statusDetails property: The list of current statuses of the connected registry.
     * 
     * @return the statusDetails value.
     */
    @Override
    public List<StatusDetailProperties> statusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the activation property: The activation property.
     * 
     * @return the activation value.
     */
    @Override
    public ConnectedRegistryPropertiesActivation activation() {
        return this.activation;
    }

    /**
     * Get the lastActivityTime property: The last activity time of the connected registry.
     * 
     * @return the lastActivityTime value.
     */
    @Override
    public OffsetDateTime lastActivityTime() {
        return this.lastActivityTime;
    }

    /**
     * Get the connectionState property: The current connection state of the connected registry.
     * 
     * @return the connectionState value.
     */
    @Override
    public ConnectionState connectionState() {
        return this.connectionState;
    }

    /**
     * Get the version property: The current version of ACR runtime on the connected registry.
     * 
     * @return the version value.
     */
    @Override
    public String version() {
        return this.version;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryProperties withMode(ConnectedRegistryMode mode) {
        super.withMode(mode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryProperties withParent(ParentProperties parent) {
        super.withParent(parent);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryProperties withClientTokenIds(List<String> clientTokenIds) {
        super.withClientTokenIds(clientTokenIds);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryProperties withLoginServer(LoginServerProperties loginServer) {
        super.withLoginServer(loginServer);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryProperties withLogging(LoggingProperties logging) {
        super.withLogging(logging);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryProperties withNotificationsList(List<String> notificationsList) {
        super.withNotificationsList(notificationsList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConnectedRegistryProperties withGarbageCollection(GarbageCollectionProperties garbageCollection) {
        super.withGarbageCollection(garbageCollection);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (mode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property mode in model ConnectedRegistryProperties"));
        }
        if (activation() != null) {
            activation().validate();
        }
        if (parent() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property parent in model ConnectedRegistryProperties"));
        } else {
            parent().validate();
        }
        if (loginServer() != null) {
            loginServer().validate();
        }
        if (logging() != null) {
            logging().validate();
        }
        if (statusDetails() != null) {
            statusDetails().forEach(e -> e.validate());
        }
        if (garbageCollection() != null) {
            garbageCollection().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectedRegistryProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", mode() == null ? null : mode().toString());
        jsonWriter.writeJsonField("parent", parent());
        jsonWriter.writeArrayField("clientTokenIds", clientTokenIds(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("loginServer", loginServer());
        jsonWriter.writeJsonField("logging", logging());
        jsonWriter.writeArrayField("notificationsList", notificationsList(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("garbageCollection", garbageCollection());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectedRegistryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectedRegistryProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectedRegistryProperties.
     */
    public static ConnectedRegistryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectedRegistryProperties deserializedConnectedRegistryProperties = new ConnectedRegistryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedConnectedRegistryProperties
                        .withMode(ConnectedRegistryMode.fromString(reader.getString()));
                } else if ("parent".equals(fieldName)) {
                    deserializedConnectedRegistryProperties.withParent(ParentProperties.fromJson(reader));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedConnectedRegistryProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedConnectedRegistryProperties.version = reader.getString();
                } else if ("connectionState".equals(fieldName)) {
                    deserializedConnectedRegistryProperties.connectionState
                        = ConnectionState.fromString(reader.getString());
                } else if ("lastActivityTime".equals(fieldName)) {
                    deserializedConnectedRegistryProperties.lastActivityTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("activation".equals(fieldName)) {
                    deserializedConnectedRegistryProperties.activation
                        = ConnectedRegistryPropertiesActivation.fromJson(reader);
                } else if ("clientTokenIds".equals(fieldName)) {
                    List<String> clientTokenIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectedRegistryProperties.withClientTokenIds(clientTokenIds);
                } else if ("loginServer".equals(fieldName)) {
                    deserializedConnectedRegistryProperties.withLoginServer(LoginServerProperties.fromJson(reader));
                } else if ("logging".equals(fieldName)) {
                    deserializedConnectedRegistryProperties.withLogging(LoggingProperties.fromJson(reader));
                } else if ("statusDetails".equals(fieldName)) {
                    List<StatusDetailProperties> statusDetails
                        = reader.readArray(reader1 -> StatusDetailProperties.fromJson(reader1));
                    deserializedConnectedRegistryProperties.statusDetails = statusDetails;
                } else if ("notificationsList".equals(fieldName)) {
                    List<String> notificationsList = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectedRegistryProperties.withNotificationsList(notificationsList);
                } else if ("garbageCollection".equals(fieldName)) {
                    deserializedConnectedRegistryProperties
                        .withGarbageCollection(GarbageCollectionProperties.fromJson(reader));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectedRegistryProperties;
        });
    }
}
