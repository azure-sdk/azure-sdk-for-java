// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerregistry.generated.fluent.ArchiveVersionsClient;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.ArchiveVersionInner;
import com.azure.resourcemanager.containerregistry.generated.models.ArchiveVersion;
import com.azure.resourcemanager.containerregistry.generated.models.ArchiveVersions;

public final class ArchiveVersionsImpl implements ArchiveVersions {
    private static final ClientLogger LOGGER = new ClientLogger(ArchiveVersionsImpl.class);

    private final ArchiveVersionsClient innerClient;

    private final com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager;

    public ArchiveVersionsImpl(ArchiveVersionsClient innerClient,
        com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ArchiveVersion> list(String resourceGroupName, String registryName, String packageType,
        String archiveName) {
        PagedIterable<ArchiveVersionInner> inner
            = this.serviceClient().list(resourceGroupName, registryName, packageType, archiveName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ArchiveVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<ArchiveVersion> list(String resourceGroupName, String registryName, String packageType,
        String archiveName, Context context) {
        PagedIterable<ArchiveVersionInner> inner
            = this.serviceClient().list(resourceGroupName, registryName, packageType, archiveName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ArchiveVersionImpl(inner1, this.manager()));
    }

    public Response<ArchiveVersion> getWithResponse(String resourceGroupName, String registryName, String packageType,
        String archiveName, String archiveVersionName, Context context) {
        Response<ArchiveVersionInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, registryName, packageType, archiveName, archiveVersionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ArchiveVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ArchiveVersion get(String resourceGroupName, String registryName, String packageType, String archiveName,
        String archiveVersionName) {
        ArchiveVersionInner inner
            = this.serviceClient().get(resourceGroupName, registryName, packageType, archiveName, archiveVersionName);
        if (inner != null) {
            return new ArchiveVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ArchiveVersion create(String resourceGroupName, String registryName, String packageType, String archiveName,
        String archiveVersionName) {
        ArchiveVersionInner inner = this.serviceClient()
            .create(resourceGroupName, registryName, packageType, archiveName, archiveVersionName);
        if (inner != null) {
            return new ArchiveVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ArchiveVersion create(String resourceGroupName, String registryName, String packageType, String archiveName,
        String archiveVersionName, Context context) {
        ArchiveVersionInner inner = this.serviceClient()
            .create(resourceGroupName, registryName, packageType, archiveName, archiveVersionName, context);
        if (inner != null) {
            return new ArchiveVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String registryName, String packageType, String archiveName,
        String archiveVersionName) {
        this.serviceClient().delete(resourceGroupName, registryName, packageType, archiveName, archiveVersionName);
    }

    public void delete(String resourceGroupName, String registryName, String packageType, String archiveName,
        String archiveVersionName, Context context) {
        this.serviceClient()
            .delete(resourceGroupName, registryName, packageType, archiveName, archiveVersionName, context);
    }

    private ArchiveVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager manager() {
        return this.serviceManager;
    }
}
