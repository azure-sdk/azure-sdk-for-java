// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.Duration;

/**
 * Attaches a worker selector where the value is passed through from a job's label with the same key.
 */
@Fluent
public final class PassThroughWorkerSelectorAttachment extends WorkerSelectorAttachment {

    /*
     * The label key to query against
     */
    @JsonProperty(value = "key")
    private String key;

    /*
     * Describes how the value of the label is compared to the value pass through
     */
    @JsonProperty(value = "labelOperator")
    private LabelOperator labelOperator;

    /*
     * Describes how long the attached label selector is valid in seconds.
     */
    @JsonProperty(value = "expiresAfterSeconds")
    @JsonDeserialize(using = DurationDeserializer.class)
    @JsonSerialize(using = DurationSerializer.class)
    private Duration expiresAfter;

    /**
     * Creates an instance of PassThroughWorkerSelectorAttachment class.
     *
     * @param key the key value to set.
     * @param labelOperator the labelOperator value to set.
     */
    @JsonCreator
    public PassThroughWorkerSelectorAttachment(@JsonProperty(value = "key") String key,
        @JsonProperty(value = "labelOperator") LabelOperator labelOperator) {
        this.key = key;
        this.labelOperator = labelOperator;
    }

    /**
     * Returns kind discriminator.
     * 
     * @return kind.
     */
    public WorkerSelectorAttachmentKind getKind() {
        return WorkerSelectorAttachmentKind.PASS_THROUGH;
    }

    /**
     * Get the key property: The label key to query against.
     *
     * @return the key value.
     */
    public String getKey() {
        return this.key;
    }

    /**
     * Get the labelOperator property: Describes how the value of the label is compared to the value pass through.
     *
     * @return the labelOperator value.
     */
    public LabelOperator getLabelOperator() {
        return this.labelOperator;
    }

    /**
     * Get the expiresAfter property: Describes how long the attached label selector is valid in seconds.
     *
     * @return the expiresAfter value.
     */
    public Duration getExpiresAfter() {
        return this.expiresAfter;
    }

    /**
     * Set the expiresAfter property: Describes how long the attached label selector is valid in seconds.
     *
     * @param expiresAfter the expiresAfter value to set.
     * @return the PassThroughWorkerSelectorAttachment object itself.
     */
    public PassThroughWorkerSelectorAttachment setExpiresAfter(Duration expiresAfter) {
        this.expiresAfter = expiresAfter;
        return this;
    }

    /*
     * The type discriminator describing a sub-type of WorkerSelectorAttachment.
     */
    @Generated
    private WorkerSelectorAttachmentKind kind = WorkerSelectorAttachmentKind.PASS_THROUGH;

    /*
     * Describes how long the attached label selector is valid in seconds.
     */
    @Generated
    private Double expiresAfterSeconds;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Set the key property: The label key to query against.
     * <p>Required when create the resource.</p>
     *
     * @param key the key value to set.
     * @return the PassThroughWorkerSelectorAttachment object itself.
     */
    @Generated
    public PassThroughWorkerSelectorAttachment setKey(String key) {
        this.key = key;
        this.updatedProperties.add("key");
        return this;
    }

    /**
     * Set the labelOperator property: Describes how the value of the label is compared to the value pass through.
     * <p>Required when create the resource.</p>
     *
     * @param labelOperator the labelOperator value to set.
     * @return the PassThroughWorkerSelectorAttachment object itself.
     */
    @Generated
    public PassThroughWorkerSelectorAttachment setLabelOperator(LabelOperator labelOperator) {
        this.labelOperator = labelOperator;
        this.updatedProperties.add("labelOperator");
        return this;
    }

    /**
     * Get the expiresAfterSeconds property: Describes how long the attached label selector is valid in seconds.
     *
     * @return the expiresAfterSeconds value.
     */
    @Generated
    public Double getExpiresAfterSeconds() {
        return this.expiresAfterSeconds;
    }

    /**
     * Set the expiresAfterSeconds property: Describes how long the attached label selector is valid in seconds.
     *
     * @param expiresAfterSeconds the expiresAfterSeconds value to set.
     * @return the PassThroughWorkerSelectorAttachment object itself.
     */
    @Generated
    public PassThroughWorkerSelectorAttachment setExpiresAfterSeconds(Double expiresAfterSeconds) {
        this.expiresAfterSeconds = expiresAfterSeconds;
        this.updatedProperties.add("expiresAfterSeconds");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getWorkerSelectorAttachmentAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeStringField("key", this.key);
            jsonWriter.writeStringField("labelOperator",
                this.labelOperator == null ? null : this.labelOperator.toString());
            jsonWriter.writeNumberField("expiresAfterSeconds", this.expiresAfterSeconds);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind.toString());
        if (updatedProperties.contains("key")) {
            if (this.key == null) {
                jsonWriter.writeNullField("key");
            } else {
                jsonWriter.writeStringField("key", this.key);
            }
        }
        if (updatedProperties.contains("labelOperator")) {
            if (this.labelOperator == null) {
                jsonWriter.writeNullField("labelOperator");
            } else {
                jsonWriter.writeStringField("labelOperator", this.labelOperator.toString());
            }
        }
        if (updatedProperties.contains("expiresAfterSeconds")) {
            if (this.expiresAfterSeconds == null) {
                jsonWriter.writeNullField("expiresAfterSeconds");
            } else {
                jsonWriter.writeNumberField("expiresAfterSeconds", this.expiresAfterSeconds);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PassThroughWorkerSelectorAttachment from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PassThroughWorkerSelectorAttachment if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PassThroughWorkerSelectorAttachment.
     */
    @Generated
    public static PassThroughWorkerSelectorAttachment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PassThroughWorkerSelectorAttachment deserializedPassThroughWorkerSelectorAttachment
                = new PassThroughWorkerSelectorAttachment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedPassThroughWorkerSelectorAttachment.kind
                        = WorkerSelectorAttachmentKind.fromString(reader.getString());
                } else if ("key".equals(fieldName)) {
                    deserializedPassThroughWorkerSelectorAttachment.key = reader.getString();
                } else if ("labelOperator".equals(fieldName)) {
                    deserializedPassThroughWorkerSelectorAttachment.labelOperator
                        = LabelOperator.fromString(reader.getString());
                } else if ("expiresAfterSeconds".equals(fieldName)) {
                    deserializedPassThroughWorkerSelectorAttachment.expiresAfterSeconds
                        = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedPassThroughWorkerSelectorAttachment;
        });
    }
}
