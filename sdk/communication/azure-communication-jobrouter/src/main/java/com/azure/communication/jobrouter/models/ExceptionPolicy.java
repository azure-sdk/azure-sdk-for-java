// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A policy that defines actions to execute when exception are triggered.
 */
@Fluent
public final class ExceptionPolicy implements JsonSerializable<ExceptionPolicy> {

    /**
     * Create new instance
     */
    public ExceptionPolicy() {
    }

    /*
     * The Id of the exception policy
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * The name of the exception policy.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * A collection of exception rules on the exception policy.
     */
    @JsonProperty(value = "exceptionRules")
    private List<ExceptionRule> exceptionRules;

    /**
     * Get the id property: The Id of the exception policy.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The name of the exception policy.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the exception policy.
     *
     * @param name the name value to set.
     * @return the ExceptionPolicy object itself.
     */
    public ExceptionPolicy setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the exceptionRules property: A collection of exception rules on the exception policy.
     *
     * @return the exceptionRules value.
     */
    public List<ExceptionRule> getExceptionRules() {
        return this.exceptionRules;
    }

    /*
     * The entity tag for this resource.
     */
    @JsonProperty(value = "etag")
    private String etag;

    /**
     * Get the etag property: The entity tag for this resource.
     *
     * @return the etag value.
     */
    public String getEtag() {
        return this.etag;
    }

    /**
     * Set the exceptionRules property: A collection of exception rules on the exception policy.
     *
     * @param exceptionRules the exceptionRules value to set.
     * @return the ExceptionPolicy object itself.
     */
    public ExceptionPolicy setExceptionRules(List<ExceptionRule> exceptionRules) {
        this.exceptionRules = exceptionRules;
        return this;
    }

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setExceptionPolicyAccessor(new JsonMergePatchHelper.ExceptionPolicyAccessor() {

            @Override
            public ExceptionPolicy prepareModelForJsonMergePatch(ExceptionPolicy model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(ExceptionPolicy model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("name", this.name);
            jsonWriter.writeArrayField("exceptionRules", this.exceptionRules,
                (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("name")) {
            if (this.name == null) {
                jsonWriter.writeNullField("name");
            } else {
                jsonWriter.writeStringField("name", this.name);
            }
        }
        if (updatedProperties.contains("exceptionRules")) {
            if (this.exceptionRules == null) {
                jsonWriter.writeNullField("exceptionRules");
            } else {
                jsonWriter.writeArrayField("exceptionRules", this.exceptionRules,
                    (writer, element) -> writer.writeJson(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExceptionPolicy from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExceptionPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExceptionPolicy.
     */
    @Generated
    public static ExceptionPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExceptionPolicy deserializedExceptionPolicy = new ExceptionPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("etag".equals(fieldName)) {
                    deserializedExceptionPolicy.etag = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedExceptionPolicy.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedExceptionPolicy.name = reader.getString();
                } else if ("exceptionRules".equals(fieldName)) {
                    List<ExceptionRule> exceptionRules = reader.readArray(reader1 -> ExceptionRule.fromJson(reader1));
                    deserializedExceptionPolicy.exceptionRules = exceptionRules;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedExceptionPolicy;
        });
    }
}
