// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A rule that defines actions to execute upon a specific trigger.
 */
@Fluent
public final class ExceptionRule implements JsonSerializable<ExceptionRule> {

    /*
     * The trigger for this exception rule
     */
    @JsonProperty(value = "trigger")
    private ExceptionTrigger trigger;

    /*
     * A collection of actions to perform once the exception is triggered.
     */
    @JsonProperty(value = "actions")
    private List<ExceptionAction> actions;

    /**
     * Get the trigger property: The trigger for this exception rule.
     *
     * @return the trigger value.
     */
    public ExceptionTrigger getTrigger() {
        return this.trigger;
    }

    /**
     * Get the actions property: A collection of actions to perform once the exception is triggered.
     *
     * @return the actions value.
     */
    public List<ExceptionAction> getActions() {
        return this.actions;
    }

    /*
     * Id of the exception rule.
     */
    @JsonProperty(value = "id")
    private String id;

    /**
     * Creates an instance of ExceptionRule class.
     *
     * @param id the id value to set.
     * @param trigger the trigger value to set.
     * @param actions the actions value to set.
     */
    @JsonCreator
    public ExceptionRule(@JsonProperty(value = "id") String id,
        @JsonProperty(value = "trigger") ExceptionTrigger trigger,
        @JsonProperty(value = "actions") List<ExceptionAction> actions) {
        this.id = id;
        this.trigger = trigger;
        this.actions = actions;
    }

    /**
     * Get the id property: Id of the exception rule.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setExceptionRuleAccessor(new JsonMergePatchHelper.ExceptionRuleAccessor() {

            @Override
            public ExceptionRule prepareModelForJsonMergePatch(ExceptionRule model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(ExceptionRule model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Set the id property: Id of an exception rule.
     * <p>Required when create the resource.</p>
     *
     * @param id the id value to set.
     * @return the ExceptionRule object itself.
     */
    @Generated
    public ExceptionRule setId(String id) {
        this.id = id;
        this.updatedProperties.add("id");
        return this;
    }

    /**
     * Set the trigger property: The trigger for this exception rule.
     * <p>Required when create the resource.</p>
     *
     * @param trigger the trigger value to set.
     * @return the ExceptionRule object itself.
     */
    @Generated
    public ExceptionRule setTrigger(ExceptionTrigger trigger) {
        this.trigger = trigger;
        this.updatedProperties.add("trigger");
        return this;
    }

    /**
     * Set the actions property: A collection of actions to perform once the exception is triggered.
     * <p>Required when create the resource.</p>
     *
     * @param actions the actions value to set.
     * @return the ExceptionRule object itself.
     */
    @Generated
    public ExceptionRule setActions(List<ExceptionAction> actions) {
        this.actions = actions;
        this.updatedProperties.add("actions");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("id", this.id);
            jsonWriter.writeJsonField("trigger", this.trigger);
            jsonWriter.writeArrayField("actions", this.actions, (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("id")) {
            if (this.id == null) {
                jsonWriter.writeNullField("id");
            } else {
                jsonWriter.writeStringField("id", this.id);
            }
        }
        if (updatedProperties.contains("trigger")) {
            if (this.trigger == null) {
                jsonWriter.writeNullField("trigger");
            } else {
                JsonMergePatchHelper.getExceptionTriggerAccessor().prepareModelForJsonMergePatch(this.trigger, true);
                jsonWriter.writeJsonField("trigger", this.trigger);
                JsonMergePatchHelper.getExceptionTriggerAccessor().prepareModelForJsonMergePatch(this.trigger, false);
            }
        }
        if (updatedProperties.contains("actions")) {
            if (this.actions == null) {
                jsonWriter.writeNullField("actions");
            } else {
                jsonWriter.writeArrayField("actions", this.actions, (writer, element) -> writer.writeJson(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExceptionRule from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExceptionRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExceptionRule.
     */
    @Generated
    public static ExceptionRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExceptionRule deserializedExceptionRule = new ExceptionRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedExceptionRule.id = reader.getString();
                } else if ("trigger".equals(fieldName)) {
                    deserializedExceptionRule.trigger = ExceptionTrigger.fromJson(reader);
                } else if ("actions".equals(fieldName)) {
                    List<ExceptionAction> actions = reader.readArray(reader1 -> ExceptionAction.fromJson(reader1));
                    deserializedExceptionRule.actions = actions;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedExceptionRule;
        });
    }
}
