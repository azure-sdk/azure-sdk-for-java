// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * A matching mode of one of the following types:
 * QueueAndMatchMode: Used when matching worker to a job is required to be done right after job is queued.
 * ScheduleAndSuspendMode: Used for scheduling jobs to be queued at a future time. At specified time, matching of a
 * worker to the job will not start automatically.
 * SuspendMode: Used when matching workers to a job needs to be suspended.
 */
@Fluent
public class JobMatchingMode implements JsonSerializable<JobMatchingMode> {

    /*
     * The type discriminator describing a kind of JobMatchingMode.
     */
    @Generated
    private String kind = "JobMatchingMode";

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setJobMatchingModeAccessor(new JsonMergePatchHelper.JobMatchingModeAccessor() {

            @Override
            public JobMatchingMode prepareModelForJsonMergePatch(JobMatchingMode model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(JobMatchingMode model) {
                return model.jsonMergePatch;
            }

            @Override
            public void setJobMatchingModeKind(JobMatchingMode model, JobMatchingModeKind jobMatchingModeKind) {
                model.jobMatchingModeKind = jobMatchingModeKind;
            }
        });
    }

    /**
     * Creates an instance of JobMatchingMode class.
     */
    @Generated
    public JobMatchingMode() {
    }

    /**
     * Get the kind property: The type discriminator describing a kind of JobMatchingMode.
     *
     * @return the kind value.
     */
    @Generated
    public String getKind() {
        return this.kind;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind);
            jsonWriter.writeStringField("jobMatchingModeKind",
                this.jobMatchingModeKind == null ? null : this.jobMatchingModeKind.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        if (updatedProperties.contains("jobMatchingModeKind")) {
            if (this.jobMatchingModeKind == null) {
                jsonWriter.writeNullField("jobMatchingModeKind");
            } else {
                jsonWriter.writeStringField("jobMatchingModeKind", this.jobMatchingModeKind.toString());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobMatchingMode from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobMatchingMode if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobMatchingMode.
     */
    @Generated
    public static JobMatchingMode fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("scheduleAndSuspend".equals(discriminatorValue)) {
                    return ScheduleAndSuspendMode.fromJson(readerToUse.reset());
                } else if ("queueAndMatch".equals(discriminatorValue)) {
                    return QueueAndMatchMode.fromJson(readerToUse.reset());
                } else if ("suspend".equals(discriminatorValue)) {
                    return SuspendMode.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static JobMatchingMode fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobMatchingMode deserializedJobMatchingMode = new JobMatchingMode();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedJobMatchingMode.kind = reader.getString();
                } else if ("jobMatchingModeKind".equals(fieldName)) {
                    deserializedJobMatchingMode.jobMatchingModeKind
                        = JobMatchingModeKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedJobMatchingMode;
        });
    }

    /*
     * The type discriminator describing a sub-type of JobMatchingMode.
     */
    @Generated
    private JobMatchingModeKind jobMatchingModeKind;

    /**
     * Get the jobMatchingModeKind property: The type discriminator describing a sub-type of JobMatchingMode.
     *
     * @return the jobMatchingModeKind value.
     */
    @Generated
    public JobMatchingModeKind getJobMatchingModeKind() {
        return this.jobMatchingModeKind;
    }

    /**
     * Set the jobMatchingModeKind property: The type discriminator describing a sub-type of JobMatchingMode.
     * <p>Required when create the resource.</p>
     *
     * @param jobMatchingModeKind the jobMatchingModeKind value to set.
     * @return the JobMatchingMode object itself.
     */
    @Generated
    public JobMatchingMode setJobMatchingModeKind(JobMatchingModeKind jobMatchingModeKind) {
        this.jobMatchingModeKind = jobMatchingModeKind;
        this.updatedProperties.add("jobMatchingModeKind");
        return this;
    }
}
