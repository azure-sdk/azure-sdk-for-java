// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Contains the weight percentage and worker selectors to be applied if selected for weighted distributions.
 */
@Fluent
public final class WorkerWeightedAllocation implements JsonSerializable<WorkerWeightedAllocation> {

    /*
     * The percentage of this weight, expressed as a fraction of 1.
     */
    @JsonProperty(value = "weight")
    private double weight;

    /*
     * A collection of worker selectors that will be applied if this allocation is
     * selected.
     */
    @JsonProperty(value = "workerSelectors")
    private List<RouterWorkerSelector> workerSelectors;

    /**
     * Creates an instance of WorkerWeightedAllocation class.
     *
     * @param weight the weight value to set.
     * @param workerSelectors the workerSelectors value to set.
     */
    @JsonCreator
    public WorkerWeightedAllocation(@JsonProperty(value = "weight") double weight,
        @JsonProperty(value = "workerSelectors") List<RouterWorkerSelector> workerSelectors) {
        this.weight = weight;
        this.workerSelectors = workerSelectors;
    }

    /**
     * Get the weight property: The percentage of this weight, expressed as a fraction of 1.
     *
     * @return the weight value.
     */
    public double getWeight() {
        return this.weight;
    }

    /**
     * Get the workerSelectors property: A collection of worker selectors that will be applied if this allocation is
     * selected.
     *
     * @return the workerSelectors value.
     */
    public List<RouterWorkerSelector> getWorkerSelectors() {
        return this.workerSelectors;
    }

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setWorkerWeightedAllocationAccessor(new JsonMergePatchHelper.WorkerWeightedAllocationAccessor() {

                @Override
                public WorkerWeightedAllocation prepareModelForJsonMergePatch(WorkerWeightedAllocation model,
                    boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(WorkerWeightedAllocation model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * Set the weight property: The percentage of this weight, expressed as a fraction of 1.
     * <p>Required when create the resource.</p>
     *
     * @param weight the weight value to set.
     * @return the WorkerWeightedAllocation object itself.
     */
    @Generated
    public WorkerWeightedAllocation setWeight(double weight) {
        this.weight = weight;
        this.updatedProperties.add("weight");
        return this;
    }

    /**
     * Set the workerSelectors property: A collection of worker selectors that will be applied if this allocation is
     * selected.
     * <p>Required when create the resource.</p>
     *
     * @param workerSelectors the workerSelectors value to set.
     * @return the WorkerWeightedAllocation object itself.
     */
    @Generated
    public WorkerWeightedAllocation setWorkerSelectors(List<RouterWorkerSelector> workerSelectors) {
        this.workerSelectors = workerSelectors;
        this.updatedProperties.add("workerSelectors");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeDoubleField("weight", this.weight);
            jsonWriter.writeArrayField("workerSelectors", this.workerSelectors,
                (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("weight")) {
            jsonWriter.writeDoubleField("weight", this.weight);
        }
        if (updatedProperties.contains("workerSelectors")) {
            if (this.workerSelectors == null) {
                jsonWriter.writeNullField("workerSelectors");
            } else {
                jsonWriter.writeArrayField("workerSelectors", this.workerSelectors,
                    (writer, element) -> writer.writeJson(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkerWeightedAllocation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkerWeightedAllocation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkerWeightedAllocation.
     */
    @Generated
    public static WorkerWeightedAllocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkerWeightedAllocation deserializedWorkerWeightedAllocation = new WorkerWeightedAllocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("weight".equals(fieldName)) {
                    deserializedWorkerWeightedAllocation.weight = reader.getDouble();
                } else if ("workerSelectors".equals(fieldName)) {
                    List<RouterWorkerSelector> workerSelectors
                        = reader.readArray(reader1 -> RouterWorkerSelector.fromJson(reader1));
                    deserializedWorkerWeightedAllocation.workerSelectors = workerSelectors;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWorkerWeightedAllocation;
        });
    }
}
