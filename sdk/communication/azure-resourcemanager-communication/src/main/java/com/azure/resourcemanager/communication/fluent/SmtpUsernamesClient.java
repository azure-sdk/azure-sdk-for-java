// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.communication.fluent.models.SmtpUsernameResourceInner;

/**
 * An instance of this class provides access to all the operations defined in SmtpUsernamesClient.
 */
public interface SmtpUsernamesClient {
    /**
     * Get
     * 
     * Get all SmtpUsernameResources for a Communication resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all SmtpUsernameResources for a Communication resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SmtpUsernameResourceInner> list(String resourceGroupName, String communicationServiceName);

    /**
     * Get
     * 
     * Get all SmtpUsernameResources for a Communication resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all SmtpUsernameResources for a Communication resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SmtpUsernameResourceInner> list(String resourceGroupName, String communicationServiceName,
        Context context);

    /**
     * Get
     * 
     * Get a SmtpUsernameResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param smtpUsername The name of the SmtpUsernameResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SmtpUsernameResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SmtpUsernameResourceInner> getWithResponse(String resourceGroupName, String communicationServiceName,
        String smtpUsername, Context context);

    /**
     * Get
     * 
     * Get a SmtpUsernameResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param smtpUsername The name of the SmtpUsernameResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SmtpUsernameResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SmtpUsernameResourceInner get(String resourceGroupName, String communicationServiceName, String smtpUsername);

    /**
     * Create Or Update
     * 
     * Create or update an SmtpUsernameResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param smtpUsername The name of the SmtpUsernameResource.
     * @param parameters Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the object describing the smtp username resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SmtpUsernameResourceInner> createOrUpdateWithResponse(String resourceGroupName,
        String communicationServiceName, String smtpUsername, SmtpUsernameResourceInner parameters, Context context);

    /**
     * Create Or Update
     * 
     * Create or update an SmtpUsernameResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param smtpUsername The name of the SmtpUsernameResource.
     * @param parameters Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the object describing the smtp username resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SmtpUsernameResourceInner createOrUpdate(String resourceGroupName, String communicationServiceName,
        String smtpUsername, SmtpUsernameResourceInner parameters);

    /**
     * Delete
     * 
     * Operation to delete a single SmtpUsername resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param smtpUsername The name of the SmtpUsernameResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String communicationServiceName, String smtpUsername,
        Context context);

    /**
     * Delete
     * 
     * Operation to delete a single SmtpUsername resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param smtpUsername The name of the SmtpUsernameResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String communicationServiceName, String smtpUsername);
}
