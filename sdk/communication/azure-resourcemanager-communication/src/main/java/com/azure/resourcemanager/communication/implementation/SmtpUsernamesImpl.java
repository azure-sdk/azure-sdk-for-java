// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.communication.fluent.SmtpUsernamesClient;
import com.azure.resourcemanager.communication.fluent.models.SmtpUsernameResourceInner;
import com.azure.resourcemanager.communication.models.SmtpUsernameResource;
import com.azure.resourcemanager.communication.models.SmtpUsernames;

public final class SmtpUsernamesImpl implements SmtpUsernames {
    private static final ClientLogger LOGGER = new ClientLogger(SmtpUsernamesImpl.class);

    private final SmtpUsernamesClient innerClient;

    private final com.azure.resourcemanager.communication.CommunicationManager serviceManager;

    public SmtpUsernamesImpl(SmtpUsernamesClient innerClient,
        com.azure.resourcemanager.communication.CommunicationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SmtpUsernameResource> list(String resourceGroupName, String communicationServiceName) {
        PagedIterable<SmtpUsernameResourceInner> inner
            = this.serviceClient().list(resourceGroupName, communicationServiceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SmtpUsernameResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SmtpUsernameResource> list(String resourceGroupName, String communicationServiceName,
        Context context) {
        PagedIterable<SmtpUsernameResourceInner> inner
            = this.serviceClient().list(resourceGroupName, communicationServiceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SmtpUsernameResourceImpl(inner1, this.manager()));
    }

    public Response<SmtpUsernameResource> getWithResponse(String resourceGroupName, String communicationServiceName,
        String smtpUsername, Context context) {
        Response<SmtpUsernameResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, communicationServiceName, smtpUsername, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SmtpUsernameResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SmtpUsernameResource get(String resourceGroupName, String communicationServiceName, String smtpUsername) {
        SmtpUsernameResourceInner inner
            = this.serviceClient().get(resourceGroupName, communicationServiceName, smtpUsername);
        if (inner != null) {
            return new SmtpUsernameResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String communicationServiceName,
        String smtpUsername, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, communicationServiceName, smtpUsername, context);
    }

    public void delete(String resourceGroupName, String communicationServiceName, String smtpUsername) {
        this.serviceClient().delete(resourceGroupName, communicationServiceName, smtpUsername);
    }

    public SmtpUsernameResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communicationServiceName = ResourceManagerUtils.getValueFromIdByName(id, "communicationServices");
        if (communicationServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communicationServices'.", id)));
        }
        String smtpUsername = ResourceManagerUtils.getValueFromIdByName(id, "smtpUsernames");
        if (smtpUsername == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'smtpUsernames'.", id)));
        }
        return this.getWithResponse(resourceGroupName, communicationServiceName, smtpUsername, Context.NONE).getValue();
    }

    public Response<SmtpUsernameResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communicationServiceName = ResourceManagerUtils.getValueFromIdByName(id, "communicationServices");
        if (communicationServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communicationServices'.", id)));
        }
        String smtpUsername = ResourceManagerUtils.getValueFromIdByName(id, "smtpUsernames");
        if (smtpUsername == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'smtpUsernames'.", id)));
        }
        return this.getWithResponse(resourceGroupName, communicationServiceName, smtpUsername, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communicationServiceName = ResourceManagerUtils.getValueFromIdByName(id, "communicationServices");
        if (communicationServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communicationServices'.", id)));
        }
        String smtpUsername = ResourceManagerUtils.getValueFromIdByName(id, "smtpUsernames");
        if (smtpUsername == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'smtpUsernames'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, communicationServiceName, smtpUsername, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communicationServiceName = ResourceManagerUtils.getValueFromIdByName(id, "communicationServices");
        if (communicationServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communicationServices'.", id)));
        }
        String smtpUsername = ResourceManagerUtils.getValueFromIdByName(id, "smtpUsernames");
        if (smtpUsername == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'smtpUsernames'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, communicationServiceName, smtpUsername, context);
    }

    private SmtpUsernamesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.communication.CommunicationManager manager() {
        return this.serviceManager;
    }

    public SmtpUsernameResourceImpl define(String name) {
        return new SmtpUsernameResourceImpl(name, this.manager());
    }
}
