// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

/**
 * A class that describes the properties of a SmtpUsername resource.
 */
@Fluent
public final class SmtpUsernameProperties implements JsonSerializable<SmtpUsernameProperties> {
    /*
     * The SMTP username. Could be free form or in the email address format.
     */
    private String username;

    /*
     * The application Id for the linked Entra Application.
     */
    private UUID entraApplicationId;

    /*
     * The tenant of the linked Entra Application.
     */
    private UUID tenantId;

    /**
     * Creates an instance of SmtpUsernameProperties class.
     */
    public SmtpUsernameProperties() {
    }

    /**
     * Get the username property: The SMTP username. Could be free form or in the email address format.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: The SMTP username. Could be free form or in the email address format.
     * 
     * @param username the username value to set.
     * @return the SmtpUsernameProperties object itself.
     */
    public SmtpUsernameProperties withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the entraApplicationId property: The application Id for the linked Entra Application.
     * 
     * @return the entraApplicationId value.
     */
    public UUID entraApplicationId() {
        return this.entraApplicationId;
    }

    /**
     * Set the entraApplicationId property: The application Id for the linked Entra Application.
     * 
     * @param entraApplicationId the entraApplicationId value to set.
     * @return the SmtpUsernameProperties object itself.
     */
    public SmtpUsernameProperties withEntraApplicationId(UUID entraApplicationId) {
        this.entraApplicationId = entraApplicationId;
        return this;
    }

    /**
     * Get the tenantId property: The tenant of the linked Entra Application.
     * 
     * @return the tenantId value.
     */
    public UUID tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The tenant of the linked Entra Application.
     * 
     * @param tenantId the tenantId value to set.
     * @return the SmtpUsernameProperties object itself.
     */
    public SmtpUsernameProperties withTenantId(UUID tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (username() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property username in model SmtpUsernameProperties"));
        }
        if (entraApplicationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property entraApplicationId in model SmtpUsernameProperties"));
        }
        if (tenantId() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property tenantId in model SmtpUsernameProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SmtpUsernameProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("entraApplicationId", Objects.toString(this.entraApplicationId, null));
        jsonWriter.writeStringField("tenantId", Objects.toString(this.tenantId, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SmtpUsernameProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SmtpUsernameProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SmtpUsernameProperties.
     */
    public static SmtpUsernameProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SmtpUsernameProperties deserializedSmtpUsernameProperties = new SmtpUsernameProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("username".equals(fieldName)) {
                    deserializedSmtpUsernameProperties.username = reader.getString();
                } else if ("entraApplicationId".equals(fieldName)) {
                    deserializedSmtpUsernameProperties.entraApplicationId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("tenantId".equals(fieldName)) {
                    deserializedSmtpUsernameProperties.tenantId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSmtpUsernameProperties;
        });
    }
}
