// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The failover state of the replication.
 */
@Immutable
public final class WorkspaceFailoverProperties implements JsonSerializable<WorkspaceFailoverProperties> {
    /*
     * The failover state of the replication.
     */
    private WorkspaceFailoverState state;

    /*
     * The last time when the failover state was updated.
     */
    private OffsetDateTime lastModifiedDate;

    /**
     * Creates an instance of WorkspaceFailoverProperties class.
     */
    public WorkspaceFailoverProperties() {
    }

    /**
     * Get the state property: The failover state of the replication.
     * 
     * @return the state value.
     */
    public WorkspaceFailoverState state() {
        return this.state;
    }

    /**
     * Get the lastModifiedDate property: The last time when the failover state was updated.
     * 
     * @return the lastModifiedDate value.
     */
    public OffsetDateTime lastModifiedDate() {
        return this.lastModifiedDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspaceFailoverProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspaceFailoverProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkspaceFailoverProperties.
     */
    public static WorkspaceFailoverProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspaceFailoverProperties deserializedWorkspaceFailoverProperties = new WorkspaceFailoverProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedWorkspaceFailoverProperties.state
                        = WorkspaceFailoverState.fromString(reader.getString());
                } else if ("lastModifiedDate".equals(fieldName)) {
                    deserializedWorkspaceFailoverProperties.lastModifiedDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspaceFailoverProperties;
        });
    }
}
