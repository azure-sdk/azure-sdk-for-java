// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Workspace replication properties.
 */
@Fluent
public final class WorkspaceReplicationProperties implements JsonSerializable<WorkspaceReplicationProperties> {
    /*
     * The location of the replication.
     */
    private String location;

    /*
     * Specifies whether the replication is enabled or not. When true, workspace configuration and data is replicated to
     * the specified location. If replication is been enabled, location must be provided.
     */
    private Boolean enabled;

    /*
     * The provisioning state of the replication.
     */
    private WorkspaceReplicationState provisioningState;

    /*
     * The last time when the replication was enabled.
     */
    private OffsetDateTime createdDate;

    /*
     * The last time when the replication was updated.
     */
    private OffsetDateTime lastModifiedDate;

    /**
     * Creates an instance of WorkspaceReplicationProperties class.
     */
    public WorkspaceReplicationProperties() {
    }

    /**
     * Get the location property: The location of the replication.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The location of the replication.
     * 
     * @param location the location value to set.
     * @return the WorkspaceReplicationProperties object itself.
     */
    public WorkspaceReplicationProperties withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the enabled property: Specifies whether the replication is enabled or not. When true, workspace configuration
     * and data is replicated to the specified location. If replication is been enabled, location must be provided.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Specifies whether the replication is enabled or not. When true, workspace configuration
     * and data is replicated to the specified location. If replication is been enabled, location must be provided.
     * 
     * @param enabled the enabled value to set.
     * @return the WorkspaceReplicationProperties object itself.
     */
    public WorkspaceReplicationProperties withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the replication.
     * 
     * @return the provisioningState value.
     */
    public WorkspaceReplicationState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the createdDate property: The last time when the replication was enabled.
     * 
     * @return the createdDate value.
     */
    public OffsetDateTime createdDate() {
        return this.createdDate;
    }

    /**
     * Get the lastModifiedDate property: The last time when the replication was updated.
     * 
     * @return the lastModifiedDate value.
     */
    public OffsetDateTime lastModifiedDate() {
        return this.lastModifiedDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspaceReplicationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspaceReplicationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkspaceReplicationProperties.
     */
    public static WorkspaceReplicationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspaceReplicationProperties deserializedWorkspaceReplicationProperties
                = new WorkspaceReplicationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    deserializedWorkspaceReplicationProperties.location = reader.getString();
                } else if ("enabled".equals(fieldName)) {
                    deserializedWorkspaceReplicationProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWorkspaceReplicationProperties.provisioningState
                        = WorkspaceReplicationState.fromString(reader.getString());
                } else if ("createdDate".equals(fieldName)) {
                    deserializedWorkspaceReplicationProperties.createdDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedDate".equals(fieldName)) {
                    deserializedWorkspaceReplicationProperties.lastModifiedDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspaceReplicationProperties;
        });
    }
}
