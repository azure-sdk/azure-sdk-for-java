// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.scvmm.fluent.VirtualMachineInstancesClient;
import com.azure.resourcemanager.scvmm.fluent.models.VirtualMachineInstanceInner;
import com.azure.resourcemanager.scvmm.fluent.models.VirtualMachineInstanceListResultInner;
import com.azure.resourcemanager.scvmm.models.StopVirtualMachineOptions;
import com.azure.resourcemanager.scvmm.models.VirtualMachineCreateCheckpoint;
import com.azure.resourcemanager.scvmm.models.VirtualMachineDeleteCheckpoint;
import com.azure.resourcemanager.scvmm.models.VirtualMachineInstance;
import com.azure.resourcemanager.scvmm.models.VirtualMachineInstanceListResult;
import com.azure.resourcemanager.scvmm.models.VirtualMachineInstanceUpdate;
import com.azure.resourcemanager.scvmm.models.VirtualMachineInstances;
import com.azure.resourcemanager.scvmm.models.VirtualMachineRestoreCheckpoint;

public final class VirtualMachineInstancesImpl implements VirtualMachineInstances {
    private static final ClientLogger LOGGER = new ClientLogger(VirtualMachineInstancesImpl.class);

    private final VirtualMachineInstancesClient innerClient;

    private final com.azure.resourcemanager.scvmm.ScvmmManager serviceManager;

    public VirtualMachineInstancesImpl(
        VirtualMachineInstancesClient innerClient, com.azure.resourcemanager.scvmm.ScvmmManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<VirtualMachineInstance> getWithResponse(String resourceUri, Context context) {
        Response<VirtualMachineInstanceInner> inner = this.serviceClient().getWithResponse(resourceUri, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VirtualMachineInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VirtualMachineInstance get(String resourceUri) {
        VirtualMachineInstanceInner inner = this.serviceClient().get(resourceUri);
        if (inner != null) {
            return new VirtualMachineInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public VirtualMachineInstance createOrUpdate(String resourceUri) {
        VirtualMachineInstanceInner inner = this.serviceClient().createOrUpdate(resourceUri);
        if (inner != null) {
            return new VirtualMachineInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public VirtualMachineInstance createOrUpdate(
        String resourceUri, VirtualMachineInstanceInner body, Context context) {
        VirtualMachineInstanceInner inner = this.serviceClient().createOrUpdate(resourceUri, body, context);
        if (inner != null) {
            return new VirtualMachineInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public VirtualMachineInstance update(String resourceUri) {
        VirtualMachineInstanceInner inner = this.serviceClient().update(resourceUri);
        if (inner != null) {
            return new VirtualMachineInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public VirtualMachineInstance update(String resourceUri, VirtualMachineInstanceUpdate body, Context context) {
        VirtualMachineInstanceInner inner = this.serviceClient().update(resourceUri, body, context);
        if (inner != null) {
            return new VirtualMachineInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceUri) {
        this.serviceClient().delete(resourceUri);
    }

    public void delete(String resourceUri, Boolean force, Boolean deleteFromHost, Context context) {
        this.serviceClient().delete(resourceUri, force, deleteFromHost, context);
    }

    public Response<VirtualMachineInstanceListResult> listWithResponse(String resourceUri, Context context) {
        Response<VirtualMachineInstanceListResultInner> inner =
            this.serviceClient().listWithResponse(resourceUri, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VirtualMachineInstanceListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VirtualMachineInstanceListResult list(String resourceUri) {
        VirtualMachineInstanceListResultInner inner = this.serviceClient().list(resourceUri);
        if (inner != null) {
            return new VirtualMachineInstanceListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void stop(String resourceUri) {
        this.serviceClient().stop(resourceUri);
    }

    public void stop(String resourceUri, StopVirtualMachineOptions body, Context context) {
        this.serviceClient().stop(resourceUri, body, context);
    }

    public void start(String resourceUri) {
        this.serviceClient().start(resourceUri);
    }

    public void start(String resourceUri, Context context) {
        this.serviceClient().start(resourceUri, context);
    }

    public void restart(String resourceUri) {
        this.serviceClient().restart(resourceUri);
    }

    public void restart(String resourceUri, Context context) {
        this.serviceClient().restart(resourceUri, context);
    }

    public void createCheckpoint(String resourceUri) {
        this.serviceClient().createCheckpoint(resourceUri);
    }

    public void createCheckpoint(String resourceUri, VirtualMachineCreateCheckpoint body, Context context) {
        this.serviceClient().createCheckpoint(resourceUri, body, context);
    }

    public void deleteCheckpoint(String resourceUri) {
        this.serviceClient().deleteCheckpoint(resourceUri);
    }

    public void deleteCheckpoint(String resourceUri, VirtualMachineDeleteCheckpoint body, Context context) {
        this.serviceClient().deleteCheckpoint(resourceUri, body, context);
    }

    public void restoreCheckpoint(String resourceUri) {
        this.serviceClient().restoreCheckpoint(resourceUri);
    }

    public void restoreCheckpoint(String resourceUri, VirtualMachineRestoreCheckpoint body, Context context) {
        this.serviceClient().restoreCheckpoint(resourceUri, body, context);
    }

    private VirtualMachineInstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.scvmm.ScvmmManager manager() {
        return this.serviceManager;
    }
}
