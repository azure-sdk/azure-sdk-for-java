// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the resource properties.
 */
@Fluent
public final class OsProfileForVmInstance implements JsonSerializable<OsProfileForVmInstance> {
    /*
     * Gets or sets the admin username.
     */
    private String adminUsername;

    /*
     * Admin password of the virtual machine.
     */
    private String adminPassword;

    /*
     * Gets or sets computer name.
     */
    private String computerName;

    /*
     * Gets the type of the os.
     */
    private OsType osType;

    /*
     * Gets os sku.
     */
    private String osSku;

    /*
     * Gets os version.
     */
    private String osVersion;

    /*
     * Gets or sets the domain name.
     */
    private String domainName;

    /*
     * Gets or sets the domain username.
     */
    private String domainUsername;

    /*
     * Password of the domain the VM has to join.
     */
    private String domainPassword;

    /*
     * Gets or sets the workgroup.
     */
    private String workgroup;

    /*
     * Gets or sets the product key.Input format xxxxx-xxxxx-xxxxx-xxxxx-xxxxx
     */
    private String productKey;

    /*
     * Gets or sets the index value of the timezone.
     */
    private Integer timezone;

    /*
     * Get or sets the commands to be run once at the time of creation separated by semicolons.
     */
    private String runOnceCommands;

    /**
     * Creates an instance of OsProfileForVmInstance class.
     */
    public OsProfileForVmInstance() {
    }

    /**
     * Get the adminUsername property: Gets or sets the admin username.
     * 
     * @return the adminUsername value.
     */
    public String adminUsername() {
        return this.adminUsername;
    }

    /**
     * Set the adminUsername property: Gets or sets the admin username.
     * 
     * @param adminUsername the adminUsername value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withAdminUsername(String adminUsername) {
        this.adminUsername = adminUsername;
        return this;
    }

    /**
     * Get the adminPassword property: Admin password of the virtual machine.
     * 
     * @return the adminPassword value.
     */
    public String adminPassword() {
        return this.adminPassword;
    }

    /**
     * Set the adminPassword property: Admin password of the virtual machine.
     * 
     * @param adminPassword the adminPassword value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
        return this;
    }

    /**
     * Get the computerName property: Gets or sets computer name.
     * 
     * @return the computerName value.
     */
    public String computerName() {
        return this.computerName;
    }

    /**
     * Set the computerName property: Gets or sets computer name.
     * 
     * @param computerName the computerName value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withComputerName(String computerName) {
        this.computerName = computerName;
        return this;
    }

    /**
     * Get the osType property: Gets the type of the os.
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Get the osSku property: Gets os sku.
     * 
     * @return the osSku value.
     */
    public String osSku() {
        return this.osSku;
    }

    /**
     * Get the osVersion property: Gets os version.
     * 
     * @return the osVersion value.
     */
    public String osVersion() {
        return this.osVersion;
    }

    /**
     * Get the domainName property: Gets or sets the domain name.
     * 
     * @return the domainName value.
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the domainName property: Gets or sets the domain name.
     * 
     * @param domainName the domainName value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Get the domainUsername property: Gets or sets the domain username.
     * 
     * @return the domainUsername value.
     */
    public String domainUsername() {
        return this.domainUsername;
    }

    /**
     * Set the domainUsername property: Gets or sets the domain username.
     * 
     * @param domainUsername the domainUsername value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withDomainUsername(String domainUsername) {
        this.domainUsername = domainUsername;
        return this;
    }

    /**
     * Get the domainPassword property: Password of the domain the VM has to join.
     * 
     * @return the domainPassword value.
     */
    public String domainPassword() {
        return this.domainPassword;
    }

    /**
     * Set the domainPassword property: Password of the domain the VM has to join.
     * 
     * @param domainPassword the domainPassword value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withDomainPassword(String domainPassword) {
        this.domainPassword = domainPassword;
        return this;
    }

    /**
     * Get the workgroup property: Gets or sets the workgroup.
     * 
     * @return the workgroup value.
     */
    public String workgroup() {
        return this.workgroup;
    }

    /**
     * Set the workgroup property: Gets or sets the workgroup.
     * 
     * @param workgroup the workgroup value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withWorkgroup(String workgroup) {
        this.workgroup = workgroup;
        return this;
    }

    /**
     * Get the productKey property: Gets or sets the product key.Input format xxxxx-xxxxx-xxxxx-xxxxx-xxxxx.
     * 
     * @return the productKey value.
     */
    public String productKey() {
        return this.productKey;
    }

    /**
     * Set the productKey property: Gets or sets the product key.Input format xxxxx-xxxxx-xxxxx-xxxxx-xxxxx.
     * 
     * @param productKey the productKey value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withProductKey(String productKey) {
        this.productKey = productKey;
        return this;
    }

    /**
     * Get the timezone property: Gets or sets the index value of the timezone.
     * 
     * @return the timezone value.
     */
    public Integer timezone() {
        return this.timezone;
    }

    /**
     * Set the timezone property: Gets or sets the index value of the timezone.
     * 
     * @param timezone the timezone value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withTimezone(Integer timezone) {
        this.timezone = timezone;
        return this;
    }

    /**
     * Get the runOnceCommands property: Get or sets the commands to be run once at the time of creation separated by
     * semicolons.
     * 
     * @return the runOnceCommands value.
     */
    public String runOnceCommands() {
        return this.runOnceCommands;
    }

    /**
     * Set the runOnceCommands property: Get or sets the commands to be run once at the time of creation separated by
     * semicolons.
     * 
     * @param runOnceCommands the runOnceCommands value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withRunOnceCommands(String runOnceCommands) {
        this.runOnceCommands = runOnceCommands;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adminUsername", this.adminUsername);
        jsonWriter.writeStringField("adminPassword", this.adminPassword);
        jsonWriter.writeStringField("computerName", this.computerName);
        jsonWriter.writeStringField("domainName", this.domainName);
        jsonWriter.writeStringField("domainUsername", this.domainUsername);
        jsonWriter.writeStringField("domainPassword", this.domainPassword);
        jsonWriter.writeStringField("workgroup", this.workgroup);
        jsonWriter.writeStringField("productKey", this.productKey);
        jsonWriter.writeNumberField("timezone", this.timezone);
        jsonWriter.writeStringField("runOnceCommands", this.runOnceCommands);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OsProfileForVmInstance from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OsProfileForVmInstance if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OsProfileForVmInstance.
     */
    public static OsProfileForVmInstance fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OsProfileForVmInstance deserializedOsProfileForVmInstance = new OsProfileForVmInstance();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adminUsername".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.adminUsername = reader.getString();
                } else if ("adminPassword".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.adminPassword = reader.getString();
                } else if ("computerName".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.computerName = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.osType = OsType.fromString(reader.getString());
                } else if ("osSku".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.osSku = reader.getString();
                } else if ("osVersion".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.osVersion = reader.getString();
                } else if ("domainName".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.domainName = reader.getString();
                } else if ("domainUsername".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.domainUsername = reader.getString();
                } else if ("domainPassword".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.domainPassword = reader.getString();
                } else if ("workgroup".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.workgroup = reader.getString();
                } else if ("productKey".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.productKey = reader.getString();
                } else if ("timezone".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.timezone = reader.getNullable(JsonReader::getInt);
                } else if ("runOnceCommands".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.runOnceCommands = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOsProfileForVmInstance;
        });
    }
}
