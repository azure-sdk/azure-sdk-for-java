// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.scvmm.SCVMMManager;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import com.azure.resourcemanager.scvmm.models.VirtualNetwork;
import com.azure.resourcemanager.scvmm.models.VirtualNetworkProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VirtualNetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"inventoryItemId\":\"zhajoylhjlmuo\",\"uuid\":\"primr\",\"vmmServerId\":\"pteecjme\",\"networkName\":\"ls\",\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"ylw\",\"name\":\"zaum\"},\"location\":\"oohgu\",\"tags\":{\"olbaemwmdx\":\"zboyjathwt\",\"f\":\"ebwjscjpahlxvea\",\"qcttadijaeukmrsi\":\"xnmwmqtibxyijddt\"},\"id\":\"ekpndzaapmudq\",\"name\":\"eqw\",\"type\":\"gp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SCVMMManager manager = SCVMMManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        VirtualNetwork response = manager.virtualNetworks()
            .define("bwnhhtql")
            .withRegion("h")
            .withExistingResourceGroup("wxezwzhok")
            .withExtendedLocation(new ExtendedLocation().withType("sr").withName("mks"))
            .withTags(mapOf("rhptilluc", "txfkfweg", "cwsldri", "iqtgdqoh"))
            .withProperties(
                new VirtualNetworkProperties().withInventoryItemId("gppipifh").withUuid("e").withVmmServerId("jvgcxtx"))
            .create();

        Assertions.assertEquals("oohgu", response.location());
        Assertions.assertEquals("zboyjathwt", response.tags().get("olbaemwmdx"));
        Assertions.assertEquals("zhajoylhjlmuo", response.properties().inventoryItemId());
        Assertions.assertEquals("primr", response.properties().uuid());
        Assertions.assertEquals("pteecjme", response.properties().vmmServerId());
        Assertions.assertEquals("ylw", response.extendedLocation().type());
        Assertions.assertEquals("zaum", response.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
