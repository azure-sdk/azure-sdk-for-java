// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.fluent.models.VirtualMachineInstanceUpdateProperties;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.AvailabilitySetListItem;
import com.azure.resourcemanager.scvmm.models.DynamicMemoryEnabled;
import com.azure.resourcemanager.scvmm.models.HardwareProfileUpdate;
import com.azure.resourcemanager.scvmm.models.InfrastructureProfileUpdate;
import com.azure.resourcemanager.scvmm.models.LimitCpuForMigration;
import com.azure.resourcemanager.scvmm.models.NetworkInterfaceUpdate;
import com.azure.resourcemanager.scvmm.models.NetworkProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageQosPolicyDetails;
import com.azure.resourcemanager.scvmm.models.VirtualDiskUpdate;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstanceUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstanceUpdateProperties model = BinaryData.fromString(
            "{\"availabilitySets\":[{\"id\":\"ltfnhtbaxkgx\",\"name\":\"rc\"}],\"hardwareProfile\":{\"memoryMB\":479149992,\"cpuCount\":2090411231,\"limitCpuForMigration\":\"true\",\"dynamicMemoryEnabled\":\"true\",\"dynamicMemoryMaxMB\":1794429860,\"dynamicMemoryMinMB\":1007815098},\"networkProfile\":{\"networkInterfaces\":[{\"name\":\"lgzi\",\"macAddress\":\"hostgktstvdxecl\",\"virtualNetworkId\":\"dqbcvhzlhplod\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"bum\"},{\"name\":\"xtrqjfs\",\"macAddress\":\"mbtxhwgf\",\"virtualNetworkId\":\"rtawcoezb\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Dynamic\",\"nicId\":\"dyg\"},{\"name\":\"okkqfqjbvleo\",\"macAddress\":\"ml\",\"virtualNetworkId\":\"qtqzfavyv\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Dynamic\",\"nicId\":\"euayjkqabqgzsles\"},{\"name\":\"bhernntiew\",\"macAddress\":\"cv\",\"virtualNetworkId\":\"uwrbehwagoh\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Static\",\"nicId\":\"emvvhm\"}]},\"storageProfile\":{\"disks\":[{\"name\":\"futacoebjvewzc\",\"diskId\":\"nmwcpmgu\",\"diskSizeGB\":607473544,\"bus\":1984994243,\"lun\":1430460397,\"busType\":\"ctkahzov\",\"vhdType\":\"j\",\"storageQoSPolicy\":{\"name\":\"xxpshneeku\",\"id\":\"gs\"}},{\"name\":\"ubkwdle\",\"diskId\":\"d\",\"diskSizeGB\":203229589,\"bus\":1171802077,\"lun\":168697362,\"busType\":\"pjuohminyfl\",\"vhdType\":\"rwm\",\"storageQoSPolicy\":{\"name\":\"wpklvxw\",\"id\":\"gdxpg\"}}]},\"infrastructureProfile\":{\"checkpointType\":\"hiszepnnbjcrxgib\"}}")
            .toObject(VirtualMachineInstanceUpdateProperties.class);
        Assertions.assertEquals("ltfnhtbaxkgx", model.availabilitySets().get(0).id());
        Assertions.assertEquals("rc", model.availabilitySets().get(0).name());
        Assertions.assertEquals(479149992, model.hardwareProfile().memoryMB());
        Assertions.assertEquals(2090411231, model.hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.TRUE, model.hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.TRUE, model.hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(1794429860, model.hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(1007815098, model.hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("lgzi", model.networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("hostgktstvdxecl", model.networkProfile().networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("dqbcvhzlhplod", model.networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("bum", model.networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("futacoebjvewzc", model.storageProfile().disks().get(0).name());
        Assertions.assertEquals("nmwcpmgu", model.storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(607473544, model.storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(1984994243, model.storageProfile().disks().get(0).bus());
        Assertions.assertEquals(1430460397, model.storageProfile().disks().get(0).lun());
        Assertions.assertEquals("ctkahzov", model.storageProfile().disks().get(0).busType());
        Assertions.assertEquals("j", model.storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("xxpshneeku", model.storageProfile().disks().get(0).storageQosPolicy().name());
        Assertions.assertEquals("gs", model.storageProfile().disks().get(0).storageQosPolicy().id());
        Assertions.assertEquals("hiszepnnbjcrxgib", model.infrastructureProfile().checkpointType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstanceUpdateProperties model = new VirtualMachineInstanceUpdateProperties()
            .withAvailabilitySets(Arrays.asList(new AvailabilitySetListItem().withId("ltfnhtbaxkgx").withName("rc")))
            .withHardwareProfile(new HardwareProfileUpdate().withMemoryMB(479149992)
                .withCpuCount(2090411231)
                .withLimitCpuForMigration(LimitCpuForMigration.TRUE)
                .withDynamicMemoryEnabled(DynamicMemoryEnabled.TRUE)
                .withDynamicMemoryMaxMB(1794429860)
                .withDynamicMemoryMinMB(1007815098))
            .withNetworkProfile(new NetworkProfileUpdate().withNetworkInterfaces(Arrays.asList(
                new NetworkInterfaceUpdate().withName("lgzi")
                    .withMacAddress("hostgktstvdxecl")
                    .withVirtualNetworkId("dqbcvhzlhplod")
                    .withIpv4AddressType(AllocationMethod.STATIC)
                    .withIpv6AddressType(AllocationMethod.STATIC)
                    .withMacAddressType(AllocationMethod.STATIC)
                    .withNicId("bum"),
                new NetworkInterfaceUpdate().withName("xtrqjfs")
                    .withMacAddress("mbtxhwgf")
                    .withVirtualNetworkId("rtawcoezb")
                    .withIpv4AddressType(AllocationMethod.STATIC)
                    .withIpv6AddressType(AllocationMethod.DYNAMIC)
                    .withMacAddressType(AllocationMethod.DYNAMIC)
                    .withNicId("dyg"),
                new NetworkInterfaceUpdate().withName("okkqfqjbvleo")
                    .withMacAddress("ml")
                    .withVirtualNetworkId("qtqzfavyv")
                    .withIpv4AddressType(AllocationMethod.STATIC)
                    .withIpv6AddressType(AllocationMethod.DYNAMIC)
                    .withMacAddressType(AllocationMethod.DYNAMIC)
                    .withNicId("euayjkqabqgzsles"),
                new NetworkInterfaceUpdate().withName("bhernntiew")
                    .withMacAddress("cv")
                    .withVirtualNetworkId("uwrbehwagoh")
                    .withIpv4AddressType(AllocationMethod.DYNAMIC)
                    .withIpv6AddressType(AllocationMethod.DYNAMIC)
                    .withMacAddressType(AllocationMethod.STATIC)
                    .withNicId("emvvhm"))))
            .withStorageProfile(new StorageProfileUpdate().withDisks(Arrays.asList(
                new VirtualDiskUpdate().withName("futacoebjvewzc")
                    .withDiskId("nmwcpmgu")
                    .withDiskSizeGB(607473544)
                    .withBus(1984994243)
                    .withLun(1430460397)
                    .withBusType("ctkahzov")
                    .withVhdType("j")
                    .withStorageQosPolicy(new StorageQosPolicyDetails().withName("xxpshneeku").withId("gs")),
                new VirtualDiskUpdate().withName("ubkwdle")
                    .withDiskId("d")
                    .withDiskSizeGB(203229589)
                    .withBus(1171802077)
                    .withLun(168697362)
                    .withBusType("pjuohminyfl")
                    .withVhdType("rwm")
                    .withStorageQosPolicy(new StorageQosPolicyDetails().withName("wpklvxw").withId("gdxpg")))))
            .withInfrastructureProfile(new InfrastructureProfileUpdate().withCheckpointType("hiszepnnbjcrxgib"));
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstanceUpdateProperties.class);
        Assertions.assertEquals("ltfnhtbaxkgx", model.availabilitySets().get(0).id());
        Assertions.assertEquals("rc", model.availabilitySets().get(0).name());
        Assertions.assertEquals(479149992, model.hardwareProfile().memoryMB());
        Assertions.assertEquals(2090411231, model.hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.TRUE, model.hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.TRUE, model.hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(1794429860, model.hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(1007815098, model.hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("lgzi", model.networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("hostgktstvdxecl", model.networkProfile().networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("dqbcvhzlhplod", model.networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("bum", model.networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("futacoebjvewzc", model.storageProfile().disks().get(0).name());
        Assertions.assertEquals("nmwcpmgu", model.storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(607473544, model.storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(1984994243, model.storageProfile().disks().get(0).bus());
        Assertions.assertEquals(1430460397, model.storageProfile().disks().get(0).lun());
        Assertions.assertEquals("ctkahzov", model.storageProfile().disks().get(0).busType());
        Assertions.assertEquals("j", model.storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("xxpshneeku", model.storageProfile().disks().get(0).storageQosPolicy().name());
        Assertions.assertEquals("gs", model.storageProfile().disks().get(0).storageQosPolicy().id());
        Assertions.assertEquals("hiszepnnbjcrxgib", model.infrastructureProfile().checkpointType());
    }
}
