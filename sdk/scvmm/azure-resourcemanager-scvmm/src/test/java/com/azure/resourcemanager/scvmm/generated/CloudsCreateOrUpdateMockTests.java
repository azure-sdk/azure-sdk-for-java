// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.scvmm.SCVMMManager;
import com.azure.resourcemanager.scvmm.models.Cloud;
import com.azure.resourcemanager.scvmm.models.CloudProperties;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"inventoryItemId\":\"hsasbhu\",\"uuid\":\"pohyuemslynsqyr\",\"vmmServerId\":\"oobrlttyms\",\"cloudName\":\"ygqdnfwqzdz\",\"cloudCapacity\":{\"cpuCount\":1556043116493772567,\"memoryMB\":6405621697730161014,\"vmCount\":8809199142384262726},\"storageQoSPolicies\":[{\"name\":\"ijouwivkxoyzunb\",\"id\":\"xrtikvcpwpgclr\",\"iopsMaximum\":6730804470286938055,\"iopsMinimum\":7967732133967586112,\"bandwidthLimit\":5451887377472245987,\"policyId\":\"nxpmyyefrpmpdnq\"}],\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"waoqvmmb\",\"name\":\"qfr\"},\"location\":\"lkzmegnitgvkxl\",\"tags\":{\"gcealzxwh\":\"drf\",\"yqhlwigdivbkbx\":\"ansym\",\"wasqvdaeyyg\":\"omfaj\",\"zkgimsid\":\"xakjsqzhzb\"},\"id\":\"asi\",\"name\":\"ddyvvjskgfmo\",\"type\":\"wa\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SCVMMManager manager = SCVMMManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Cloud response = manager.clouds()
            .define("wpfaj")
            .withRegion("rxgkne")
            .withExistingResourceGroup("lkb")
            .withExtendedLocation(new ExtendedLocation().withType("jcivmmg").withName("cf"))
            .withTags(mapOf("oxgsgbpfgzdjtx", "inzqodfvpgs", "qvlgafcqusrdvetn", "zflbqvg", "uzhyrmewipmvekdx",
                "sdtutnwlduyc"))
            .withProperties(new CloudProperties().withInventoryItemId("ltlwtjjguktalhs")
                .withUuid("kcdmxzrpoaimln")
                .withVmmServerId("aaomylweazu"))
            .create();

        Assertions.assertEquals("lkzmegnitgvkxl", response.location());
        Assertions.assertEquals("drf", response.tags().get("gcealzxwh"));
        Assertions.assertEquals("hsasbhu", response.properties().inventoryItemId());
        Assertions.assertEquals("pohyuemslynsqyr", response.properties().uuid());
        Assertions.assertEquals("oobrlttyms", response.properties().vmmServerId());
        Assertions.assertEquals("waoqvmmb", response.extendedLocation().type());
        Assertions.assertEquals("qfr", response.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
