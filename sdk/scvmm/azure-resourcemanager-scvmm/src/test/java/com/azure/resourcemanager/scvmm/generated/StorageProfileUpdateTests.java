// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.StorageProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageQosPolicyDetails;
import com.azure.resourcemanager.scvmm.models.VirtualDiskUpdate;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StorageProfileUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageProfileUpdate model = BinaryData.fromString(
            "{\"disks\":[{\"name\":\"oljxkcgx\",\"diskId\":\"xsffgcviz\",\"diskSizeGB\":546640275,\"bus\":27871888,\"lun\":94477387,\"busType\":\"youpfgfbkj\",\"vhdType\":\"dyhgkfminsg\",\"storageQoSPolicy\":{\"name\":\"fttsttk\",\"id\":\"ahbqactxtgzuk\"}}]}")
            .toObject(StorageProfileUpdate.class);
        Assertions.assertEquals("oljxkcgx", model.disks().get(0).name());
        Assertions.assertEquals("xsffgcviz", model.disks().get(0).diskId());
        Assertions.assertEquals(546640275, model.disks().get(0).diskSizeGB());
        Assertions.assertEquals(27871888, model.disks().get(0).bus());
        Assertions.assertEquals(94477387, model.disks().get(0).lun());
        Assertions.assertEquals("youpfgfbkj", model.disks().get(0).busType());
        Assertions.assertEquals("dyhgkfminsg", model.disks().get(0).vhdType());
        Assertions.assertEquals("fttsttk", model.disks().get(0).storageQosPolicy().name());
        Assertions.assertEquals("ahbqactxtgzuk", model.disks().get(0).storageQosPolicy().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageProfileUpdate model
            = new StorageProfileUpdate().withDisks(Arrays.asList(new VirtualDiskUpdate().withName("oljxkcgx")
                .withDiskId("xsffgcviz")
                .withDiskSizeGB(546640275)
                .withBus(27871888)
                .withLun(94477387)
                .withBusType("youpfgfbkj")
                .withVhdType("dyhgkfminsg")
                .withStorageQosPolicy(new StorageQosPolicyDetails().withName("fttsttk").withId("ahbqactxtgzuk"))));
        model = BinaryData.fromObject(model).toObject(StorageProfileUpdate.class);
        Assertions.assertEquals("oljxkcgx", model.disks().get(0).name());
        Assertions.assertEquals("xsffgcviz", model.disks().get(0).diskId());
        Assertions.assertEquals(546640275, model.disks().get(0).diskSizeGB());
        Assertions.assertEquals(27871888, model.disks().get(0).bus());
        Assertions.assertEquals(94477387, model.disks().get(0).lun());
        Assertions.assertEquals("youpfgfbkj", model.disks().get(0).busType());
        Assertions.assertEquals("dyhgkfminsg", model.disks().get(0).vhdType());
        Assertions.assertEquals("fttsttk", model.disks().get(0).storageQosPolicy().name());
        Assertions.assertEquals("ahbqactxtgzuk", model.disks().get(0).storageQosPolicy().id());
    }
}
