// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.NetworkInterface;
import org.junit.jupiter.api.Assertions;

public final class NetworkInterfaceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkInterface model = BinaryData.fromString(
            "{\"name\":\"ni\",\"displayName\":\"x\",\"ipv4Addresses\":[\"py\",\"gklwn\",\"nhjdauw\",\"vylwzbtdhxuj\"],\"ipv6Addresses\":[\"mpowuwpr\"],\"macAddress\":\"lve\",\"virtualNetworkId\":\"lupj\",\"networkName\":\"hfxobbcswsrtj\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"ewtghfgblcgw\"}")
            .toObject(NetworkInterface.class);
        Assertions.assertEquals("ni", model.name());
        Assertions.assertEquals("lve", model.macAddress());
        Assertions.assertEquals("lupj", model.virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.macAddressType());
        Assertions.assertEquals("ewtghfgblcgw", model.nicId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkInterface model = new NetworkInterface().withName("ni")
            .withMacAddress("lve")
            .withVirtualNetworkId("lupj")
            .withIpv4AddressType(AllocationMethod.STATIC)
            .withIpv6AddressType(AllocationMethod.STATIC)
            .withMacAddressType(AllocationMethod.STATIC)
            .withNicId("ewtghfgblcgw");
        model = BinaryData.fromObject(model).toObject(NetworkInterface.class);
        Assertions.assertEquals("ni", model.name());
        Assertions.assertEquals("lve", model.macAddress());
        Assertions.assertEquals("lupj", model.virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.macAddressType());
        Assertions.assertEquals("ewtghfgblcgw", model.nicId());
    }
}
