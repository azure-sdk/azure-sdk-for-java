// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.NetworkInterfaceUpdate;
import com.azure.resourcemanager.scvmm.models.NetworkProfileUpdate;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkProfileUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkProfileUpdate model = BinaryData.fromString(
            "{\"networkInterfaces\":[{\"name\":\"kokwbqplhlvnu\",\"macAddress\":\"pzlrphw\",\"virtualNetworkId\":\"oldweyuqdu\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"biorktal\"},{\"name\":\"jhhgdnhxmsi\",\"macAddress\":\"omi\",\"virtualNetworkId\":\"xggdufi\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Static\",\"nicId\":\"ofjchvcyyysf\"},{\"name\":\"otcubi\",\"macAddress\":\"uipwoqonmacje\",\"virtualNetworkId\":\"izsh\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Dynamic\",\"nicId\":\"fgmblrrilbywdxsm\"}]}")
            .toObject(NetworkProfileUpdate.class);
        Assertions.assertEquals("kokwbqplhlvnu", model.networkInterfaces().get(0).name());
        Assertions.assertEquals("pzlrphw", model.networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("oldweyuqdu", model.networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("biorktal", model.networkInterfaces().get(0).nicId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkProfileUpdate model = new NetworkProfileUpdate().withNetworkInterfaces(Arrays.asList(
            new NetworkInterfaceUpdate().withName("kokwbqplhlvnu")
                .withMacAddress("pzlrphw")
                .withVirtualNetworkId("oldweyuqdu")
                .withIpv4AddressType(AllocationMethod.DYNAMIC)
                .withIpv6AddressType(AllocationMethod.STATIC)
                .withMacAddressType(AllocationMethod.DYNAMIC)
                .withNicId("biorktal"),
            new NetworkInterfaceUpdate().withName("jhhgdnhxmsi")
                .withMacAddress("omi")
                .withVirtualNetworkId("xggdufi")
                .withIpv4AddressType(AllocationMethod.STATIC)
                .withIpv6AddressType(AllocationMethod.DYNAMIC)
                .withMacAddressType(AllocationMethod.STATIC)
                .withNicId("ofjchvcyyysf"),
            new NetworkInterfaceUpdate().withName("otcubi")
                .withMacAddress("uipwoqonmacje")
                .withVirtualNetworkId("izsh")
                .withIpv4AddressType(AllocationMethod.DYNAMIC)
                .withIpv6AddressType(AllocationMethod.DYNAMIC)
                .withMacAddressType(AllocationMethod.DYNAMIC)
                .withNicId("fgmblrrilbywdxsm")));
        model = BinaryData.fromObject(model).toObject(NetworkProfileUpdate.class);
        Assertions.assertEquals("kokwbqplhlvnu", model.networkInterfaces().get(0).name());
        Assertions.assertEquals("pzlrphw", model.networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("oldweyuqdu", model.networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("biorktal", model.networkInterfaces().get(0).nicId());
    }
}
