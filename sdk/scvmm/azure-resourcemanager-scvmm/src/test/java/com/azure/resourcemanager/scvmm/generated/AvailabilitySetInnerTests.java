// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.fluent.models.AvailabilitySetInner;
import com.azure.resourcemanager.scvmm.models.AvailabilitySetProperties;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AvailabilitySetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvailabilitySetInner model = BinaryData.fromString(
            "{\"properties\":{\"availabilitySetName\":\"fdwoyuhh\",\"vmmServerId\":\"u\",\"provisioningState\":\"Created\"},\"extendedLocation\":{\"type\":\"zbhd\",\"name\":\"mlmz\"},\"location\":\"oftrmaequia\",\"tags\":{\"nswhcc\":\"cslfaoqzpiyylha\",\"aivwitqscywu\":\"ph\"},\"id\":\"gwol\",\"name\":\"h\",\"type\":\"zbwemh\"}")
            .toObject(AvailabilitySetInner.class);
        Assertions.assertEquals("oftrmaequia", model.location());
        Assertions.assertEquals("cslfaoqzpiyylha", model.tags().get("nswhcc"));
        Assertions.assertEquals("fdwoyuhh", model.properties().availabilitySetName());
        Assertions.assertEquals("u", model.properties().vmmServerId());
        Assertions.assertEquals("zbhd", model.extendedLocation().type());
        Assertions.assertEquals("mlmz", model.extendedLocation().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvailabilitySetInner model = new AvailabilitySetInner().withLocation("oftrmaequia")
            .withTags(mapOf("nswhcc", "cslfaoqzpiyylha", "aivwitqscywu", "ph"))
            .withProperties(new AvailabilitySetProperties().withAvailabilitySetName("fdwoyuhh").withVmmServerId("u"))
            .withExtendedLocation(new ExtendedLocation().withType("zbhd").withName("mlmz"));
        model = BinaryData.fromObject(model).toObject(AvailabilitySetInner.class);
        Assertions.assertEquals("oftrmaequia", model.location());
        Assertions.assertEquals("cslfaoqzpiyylha", model.tags().get("nswhcc"));
        Assertions.assertEquals("fdwoyuhh", model.properties().availabilitySetName());
        Assertions.assertEquals("u", model.properties().vmmServerId());
        Assertions.assertEquals("zbhd", model.extendedLocation().type());
        Assertions.assertEquals("mlmz", model.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
