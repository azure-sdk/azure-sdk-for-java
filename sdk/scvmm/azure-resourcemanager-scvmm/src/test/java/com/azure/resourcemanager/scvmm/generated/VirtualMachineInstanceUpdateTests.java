// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.AvailabilitySetListItem;
import com.azure.resourcemanager.scvmm.models.DynamicMemoryEnabled;
import com.azure.resourcemanager.scvmm.models.HardwareProfileUpdate;
import com.azure.resourcemanager.scvmm.models.InfrastructureProfileUpdate;
import com.azure.resourcemanager.scvmm.models.LimitCpuForMigration;
import com.azure.resourcemanager.scvmm.models.NetworkInterfaceUpdate;
import com.azure.resourcemanager.scvmm.models.NetworkProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageQosPolicyDetails;
import com.azure.resourcemanager.scvmm.models.VirtualDiskUpdate;
import com.azure.resourcemanager.scvmm.models.VirtualMachineInstanceUpdate;
import com.azure.resourcemanager.scvmm.models.VirtualMachineInstanceUpdateProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstanceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstanceUpdate model = BinaryData.fromString(
            "{\"properties\":{\"availabilitySets\":[{\"id\":\"frymsgaojfmwnc\",\"name\":\"mrfhirctymox\"}],\"hardwareProfile\":{\"memoryMB\":1311357803,\"cpuCount\":1701654181,\"limitCpuForMigration\":\"true\",\"dynamicMemoryEnabled\":\"false\",\"dynamicMemoryMaxMB\":422952763,\"dynamicMemoryMinMB\":1967043899},\"networkProfile\":{\"networkInterfaces\":[{\"name\":\"jlihhyus\",\"macAddress\":\"kasdvlm\",\"virtualNetworkId\":\"dgzxulucvpamrsr\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"sjnhn\"},{\"name\":\"xifqjzgxm\",\"macAddress\":\"ublwpcesutrg\",\"virtualNetworkId\":\"pauutpw\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Dynamic\",\"nicId\":\"g\"},{\"name\":\"pnfqntcyp\",\"macAddress\":\"jv\",\"virtualNetworkId\":\"imwkslircizj\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"cvlhv\"}]},\"storageProfile\":{\"disks\":[{\"name\":\"t\",\"diskId\":\"rtwnawjslbi\",\"diskSizeGB\":1632414232,\"bus\":1225451286,\"lun\":1848766300,\"busType\":\"tsf\",\"vhdType\":\"nbaeqphchqn\",\"storageQoSPolicy\":{\"name\":\"pxehuwrykqga\",\"id\":\"mvikl\"}},{\"name\":\"dvk\",\"diskId\":\"ejd\",\"diskSizeGB\":732496831,\"bus\":246152016,\"lun\":2045200930,\"busType\":\"hnjivo\",\"vhdType\":\"tnovqfzgemjdftul\",\"storageQoSPolicy\":{\"name\":\"duceamtmc\",\"id\":\"o\"}},{\"name\":\"jw\",\"diskId\":\"wqiok\",\"diskSizeGB\":373495652,\"bus\":1563475651,\"lun\":2133935833,\"busType\":\"sv\",\"vhdType\":\"jpr\",\"storageQoSPolicy\":{\"name\":\"cfzq\",\"id\":\"yxgtczh\"}}]},\"infrastructureProfile\":{\"checkpointType\":\"bsdshmkxmaehvbbx\"}}}")
            .toObject(VirtualMachineInstanceUpdate.class);
        Assertions.assertEquals("frymsgaojfmwnc", model.properties().availabilitySets().get(0).id());
        Assertions.assertEquals("mrfhirctymox", model.properties().availabilitySets().get(0).name());
        Assertions.assertEquals(1311357803, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals(1701654181, model.properties().hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.TRUE, model.properties().hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.FALSE,
            model.properties().hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(422952763, model.properties().hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(1967043899, model.properties().hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("jlihhyus", model.properties().networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("kasdvlm", model.properties().networkProfile().networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("dgzxulucvpamrsr",
            model.properties().networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.properties().networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.properties().networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.properties().networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("sjnhn", model.properties().networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("t", model.properties().storageProfile().disks().get(0).name());
        Assertions.assertEquals("rtwnawjslbi", model.properties().storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(1632414232, model.properties().storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(1225451286, model.properties().storageProfile().disks().get(0).bus());
        Assertions.assertEquals(1848766300, model.properties().storageProfile().disks().get(0).lun());
        Assertions.assertEquals("tsf", model.properties().storageProfile().disks().get(0).busType());
        Assertions.assertEquals("nbaeqphchqn", model.properties().storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("pxehuwrykqga",
            model.properties().storageProfile().disks().get(0).storageQosPolicy().name());
        Assertions.assertEquals("mvikl", model.properties().storageProfile().disks().get(0).storageQosPolicy().id());
        Assertions.assertEquals("bsdshmkxmaehvbbx", model.properties().infrastructureProfile().checkpointType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstanceUpdate model
            = new VirtualMachineInstanceUpdate().withProperties(new VirtualMachineInstanceUpdateProperties()
                .withAvailabilitySets(
                    Arrays.asList(new AvailabilitySetListItem().withId("frymsgaojfmwnc").withName("mrfhirctymox")))
                .withHardwareProfile(new HardwareProfileUpdate().withMemoryMB(1311357803)
                    .withCpuCount(1701654181)
                    .withLimitCpuForMigration(LimitCpuForMigration.TRUE)
                    .withDynamicMemoryEnabled(DynamicMemoryEnabled.FALSE)
                    .withDynamicMemoryMaxMB(422952763)
                    .withDynamicMemoryMinMB(1967043899))
                .withNetworkProfile(new NetworkProfileUpdate().withNetworkInterfaces(Arrays.asList(
                    new NetworkInterfaceUpdate().withName("jlihhyus")
                        .withMacAddress("kasdvlm")
                        .withVirtualNetworkId("dgzxulucvpamrsr")
                        .withIpv4AddressType(AllocationMethod.STATIC)
                        .withIpv6AddressType(AllocationMethod.STATIC)
                        .withMacAddressType(AllocationMethod.STATIC)
                        .withNicId("sjnhn"),
                    new NetworkInterfaceUpdate().withName("xifqjzgxm")
                        .withMacAddress("ublwpcesutrg")
                        .withVirtualNetworkId("pauutpw")
                        .withIpv4AddressType(AllocationMethod.STATIC)
                        .withIpv6AddressType(AllocationMethod.DYNAMIC)
                        .withMacAddressType(AllocationMethod.DYNAMIC)
                        .withNicId("g"),
                    new NetworkInterfaceUpdate().withName("pnfqntcyp")
                        .withMacAddress("jv")
                        .withVirtualNetworkId("imwkslircizj")
                        .withIpv4AddressType(AllocationMethod.DYNAMIC)
                        .withIpv6AddressType(AllocationMethod.STATIC)
                        .withMacAddressType(AllocationMethod.DYNAMIC)
                        .withNicId("cvlhv"))))
                .withStorageProfile(new StorageProfileUpdate().withDisks(Arrays.asList(
                    new VirtualDiskUpdate().withName("t")
                        .withDiskId("rtwnawjslbi")
                        .withDiskSizeGB(1632414232)
                        .withBus(1225451286)
                        .withLun(1848766300)
                        .withBusType("tsf")
                        .withVhdType("nbaeqphchqn")
                        .withStorageQosPolicy(new StorageQosPolicyDetails().withName("pxehuwrykqga").withId("mvikl")),
                    new VirtualDiskUpdate().withName("dvk")
                        .withDiskId("ejd")
                        .withDiskSizeGB(732496831)
                        .withBus(246152016)
                        .withLun(2045200930)
                        .withBusType("hnjivo")
                        .withVhdType("tnovqfzgemjdftul")
                        .withStorageQosPolicy(new StorageQosPolicyDetails().withName("duceamtmc").withId("o")),
                    new VirtualDiskUpdate().withName("jw")
                        .withDiskId("wqiok")
                        .withDiskSizeGB(373495652)
                        .withBus(1563475651)
                        .withLun(2133935833)
                        .withBusType("sv")
                        .withVhdType("jpr")
                        .withStorageQosPolicy(new StorageQosPolicyDetails().withName("cfzq").withId("yxgtczh")))))
                .withInfrastructureProfile(new InfrastructureProfileUpdate().withCheckpointType("bsdshmkxmaehvbbx")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstanceUpdate.class);
        Assertions.assertEquals("frymsgaojfmwnc", model.properties().availabilitySets().get(0).id());
        Assertions.assertEquals("mrfhirctymox", model.properties().availabilitySets().get(0).name());
        Assertions.assertEquals(1311357803, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals(1701654181, model.properties().hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.TRUE, model.properties().hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.FALSE,
            model.properties().hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(422952763, model.properties().hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(1967043899, model.properties().hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("jlihhyus", model.properties().networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("kasdvlm", model.properties().networkProfile().networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("dgzxulucvpamrsr",
            model.properties().networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.properties().networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.properties().networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.properties().networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("sjnhn", model.properties().networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("t", model.properties().storageProfile().disks().get(0).name());
        Assertions.assertEquals("rtwnawjslbi", model.properties().storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(1632414232, model.properties().storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(1225451286, model.properties().storageProfile().disks().get(0).bus());
        Assertions.assertEquals(1848766300, model.properties().storageProfile().disks().get(0).lun());
        Assertions.assertEquals("tsf", model.properties().storageProfile().disks().get(0).busType());
        Assertions.assertEquals("nbaeqphchqn", model.properties().storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("pxehuwrykqga",
            model.properties().storageProfile().disks().get(0).storageQosPolicy().name());
        Assertions.assertEquals("mvikl", model.properties().storageProfile().disks().get(0).storageQosPolicy().id());
        Assertions.assertEquals("bsdshmkxmaehvbbx", model.properties().infrastructureProfile().checkpointType());
    }
}
