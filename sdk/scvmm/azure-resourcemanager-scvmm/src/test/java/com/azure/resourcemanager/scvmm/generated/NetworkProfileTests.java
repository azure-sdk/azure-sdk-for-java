// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.NetworkInterface;
import com.azure.resourcemanager.scvmm.models.NetworkProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkProfile model = BinaryData.fromString(
            "{\"networkInterfaces\":[{\"name\":\"yvblmhvkzu\",\"displayName\":\"xvvy\",\"ipv4Addresses\":[\"opbyrqufegxu\"],\"ipv6Addresses\":[\"fbn\"],\"macAddress\":\"mctlpdngitv\",\"virtualNetworkId\":\"mhrixkwmyijejve\",\"networkName\":\"hbpnaixexccbd\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"drrvqahqkght\"},{\"name\":\"ijnhyjsvfycxzbf\",\"displayName\":\"owvrvmtgjqppyos\",\"ipv4Addresses\":[\"nzm\"],\"ipv6Addresses\":[\"fipns\",\"kmcwaekrrjreafx\"],\"macAddress\":\"gumhjglikkxws\",\"virtualNetworkId\":\"lbqpvuzlmvfelf\",\"networkName\":\"gplcrpwjxeznoigb\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Dynamic\",\"nicId\":\"nbsazejjoqkag\"},{\"name\":\"sxtta\",\"displayName\":\"zxnfaaz\",\"ipv4Addresses\":[\"tnkdmkqj\",\"lwuenvrkp\"],\"ipv6Addresses\":[\"aibrebqaaysjkixq\",\"nqttezl\",\"fffiak\",\"jpqqmted\"],\"macAddress\":\"mmji\",\"virtualNetworkId\":\"eozphv\",\"networkName\":\"uyqncygupkvipmd\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Dynamic\",\"nicId\":\"vzhfstotxhoj\"}]}")
            .toObject(NetworkProfile.class);
        Assertions.assertEquals("yvblmhvkzu", model.networkInterfaces().get(0).name());
        Assertions.assertEquals("mctlpdngitv", model.networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("mhrixkwmyijejve", model.networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("drrvqahqkght", model.networkInterfaces().get(0).nicId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkProfile model = new NetworkProfile().withNetworkInterfaces(Arrays.asList(
            new NetworkInterface().withName("yvblmhvkzu")
                .withMacAddress("mctlpdngitv")
                .withVirtualNetworkId("mhrixkwmyijejve")
                .withIpv4AddressType(AllocationMethod.DYNAMIC)
                .withIpv6AddressType(AllocationMethod.STATIC)
                .withMacAddressType(AllocationMethod.STATIC)
                .withNicId("drrvqahqkght"),
            new NetworkInterface().withName("ijnhyjsvfycxzbf")
                .withMacAddress("gumhjglikkxws")
                .withVirtualNetworkId("lbqpvuzlmvfelf")
                .withIpv4AddressType(AllocationMethod.STATIC)
                .withIpv6AddressType(AllocationMethod.DYNAMIC)
                .withMacAddressType(AllocationMethod.DYNAMIC)
                .withNicId("nbsazejjoqkag"),
            new NetworkInterface().withName("sxtta")
                .withMacAddress("mmji")
                .withVirtualNetworkId("eozphv")
                .withIpv4AddressType(AllocationMethod.DYNAMIC)
                .withIpv6AddressType(AllocationMethod.DYNAMIC)
                .withMacAddressType(AllocationMethod.DYNAMIC)
                .withNicId("vzhfstotxhoj")));
        model = BinaryData.fromObject(model).toObject(NetworkProfile.class);
        Assertions.assertEquals("yvblmhvkzu", model.networkInterfaces().get(0).name());
        Assertions.assertEquals("mctlpdngitv", model.networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("mhrixkwmyijejve", model.networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("drrvqahqkght", model.networkInterfaces().get(0).nicId());
    }
}
