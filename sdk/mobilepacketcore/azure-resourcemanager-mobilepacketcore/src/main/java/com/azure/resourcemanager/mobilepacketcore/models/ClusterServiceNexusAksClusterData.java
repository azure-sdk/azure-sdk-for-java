// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilepacketcore.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Nexus AKS Cluster specific data.
 */
@Fluent
public final class ClusterServiceNexusAksClusterData extends ClusterServiceClusterTypeSpecificData {
    /*
     * Cluster Type
     */
    private ClusterType type = ClusterType.NEXUS_AKS;

    /**
     * Creates an instance of ClusterServiceNexusAksClusterData class.
     */
    public ClusterServiceNexusAksClusterData() {
    }

    /**
     * Get the type property: Cluster Type.
     * 
     * @return the type value.
     */
    @Override
    public ClusterType type() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterServiceNexusAksClusterData withCustomLocationId(String customLocationId) {
        super.withCustomLocationId(customLocationId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("customLocationId", customLocationId());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterServiceNexusAksClusterData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterServiceNexusAksClusterData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterServiceNexusAksClusterData.
     */
    public static ClusterServiceNexusAksClusterData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterServiceNexusAksClusterData deserializedClusterServiceNexusAksClusterData
                = new ClusterServiceNexusAksClusterData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("customLocationId".equals(fieldName)) {
                    deserializedClusterServiceNexusAksClusterData.withCustomLocationId(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedClusterServiceNexusAksClusterData.type = ClusterType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterServiceNexusAksClusterData;
        });
    }
}
