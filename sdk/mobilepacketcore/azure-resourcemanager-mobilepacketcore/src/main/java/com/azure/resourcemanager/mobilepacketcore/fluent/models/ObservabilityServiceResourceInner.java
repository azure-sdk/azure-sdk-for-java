// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilepacketcore.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mobilepacketcore.models.OperationalStatus;
import com.azure.resourcemanager.mobilepacketcore.models.ProvisioningState;
import com.azure.resourcemanager.mobilepacketcore.models.QualifiedComponentDeploymentParameters;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Azure for Operators 5G Core Observability Service Resource.
 */
@Fluent
public final class ObservabilityServiceResourceInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    private ObservabilityServiceResourceProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ObservabilityServiceResourceInner class.
     */
    public ObservabilityServiceResourceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private ObservabilityServiceResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ObservabilityServiceResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ObservabilityServiceResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the componentParameters property: Azure for Operators 5G Core Observability component parameters. One set per
     * component type.
     * 
     * @return the componentParameters value.
     */
    public List<QualifiedComponentDeploymentParameters> componentParameters() {
        return this.innerProperties() == null ? null : this.innerProperties().componentParameters();
    }

    /**
     * Set the componentParameters property: Azure for Operators 5G Core Observability component parameters. One set per
     * component type.
     * 
     * @param componentParameters the componentParameters value to set.
     * @return the ObservabilityServiceResourceInner object itself.
     */
    public ObservabilityServiceResourceInner
        withComponentParameters(List<QualifiedComponentDeploymentParameters> componentParameters) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ObservabilityServiceResourceProperties();
        }
        this.innerProperties().withComponentParameters(componentParameters);
        return this;
    }

    /**
     * Get the clusterService property: Reference to cluster where the observability components are deployed.
     * 
     * @return the clusterService value.
     */
    public String clusterService() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterService();
    }

    /**
     * Set the clusterService property: Reference to cluster where the observability components are deployed.
     * 
     * @param clusterService the clusterService value to set.
     * @return the ObservabilityServiceResourceInner object itself.
     */
    public ObservabilityServiceResourceInner withClusterService(String clusterService) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ObservabilityServiceResourceProperties();
        }
        this.innerProperties().withClusterService(clusterService);
        return this;
    }

    /**
     * Get the releaseVersion property: Release version. This is inherited from the cluster.
     * 
     * @return the releaseVersion value.
     */
    public String releaseVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().releaseVersion();
    }

    /**
     * Get the operationalStatus property: Operational status.
     * 
     * @return the operationalStatus value.
     */
    public OperationalStatus operationalStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().operationalStatus();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property location in model ObservabilityServiceResourceInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ObservabilityServiceResourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ObservabilityServiceResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ObservabilityServiceResourceInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ObservabilityServiceResourceInner.
     */
    public static ObservabilityServiceResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ObservabilityServiceResourceInner deserializedObservabilityServiceResourceInner
                = new ObservabilityServiceResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedObservabilityServiceResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedObservabilityServiceResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedObservabilityServiceResourceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedObservabilityServiceResourceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedObservabilityServiceResourceInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedObservabilityServiceResourceInner.innerProperties
                        = ObservabilityServiceResourceProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedObservabilityServiceResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedObservabilityServiceResourceInner;
        });
    }
}
