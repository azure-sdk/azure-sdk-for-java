// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilepacketcore.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Operational Status of the resource.
 */
@Immutable
public final class OperationalStatus implements JsonSerializable<OperationalStatus> {
    /*
     * Status of the deployed workload
     */
    private String workload;

    /*
     * Health check results
     */
    private String healthCheck;

    /**
     * Creates an instance of OperationalStatus class.
     */
    public OperationalStatus() {
    }

    /**
     * Get the workload property: Status of the deployed workload.
     * 
     * @return the workload value.
     */
    public String workload() {
        return this.workload;
    }

    /**
     * Get the healthCheck property: Health check results.
     * 
     * @return the healthCheck value.
     */
    public String healthCheck() {
        return this.healthCheck;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationalStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationalStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperationalStatus.
     */
    public static OperationalStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationalStatus deserializedOperationalStatus = new OperationalStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workload".equals(fieldName)) {
                    deserializedOperationalStatus.workload = reader.getString();
                } else if ("healthCheck".equals(fieldName)) {
                    deserializedOperationalStatus.healthCheck = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationalStatus;
        });
    }
}
