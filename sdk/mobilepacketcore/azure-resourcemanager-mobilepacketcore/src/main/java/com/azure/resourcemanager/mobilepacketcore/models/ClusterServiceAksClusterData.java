// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilepacketcore.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AKS Cluster specific data.
 */
@Fluent
public final class ClusterServiceAksClusterData extends ClusterServiceClusterTypeSpecificData {
    /*
     * Cluster Type
     */
    private ClusterType type = ClusterType.AKS;

    /**
     * Creates an instance of ClusterServiceAksClusterData class.
     */
    public ClusterServiceAksClusterData() {
    }

    /**
     * Get the type property: Cluster Type.
     * 
     * @return the type value.
     */
    @Override
    public ClusterType type() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterServiceAksClusterData withCustomLocationId(String customLocationId) {
        super.withCustomLocationId(customLocationId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (customLocationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property customLocationId in model ClusterServiceAksClusterData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterServiceAksClusterData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("customLocationId", customLocationId());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterServiceAksClusterData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterServiceAksClusterData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterServiceAksClusterData.
     */
    public static ClusterServiceAksClusterData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterServiceAksClusterData deserializedClusterServiceAksClusterData = new ClusterServiceAksClusterData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("customLocationId".equals(fieldName)) {
                    deserializedClusterServiceAksClusterData.withCustomLocationId(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedClusterServiceAksClusterData.type = ClusterType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterServiceAksClusterData;
        });
    }
}
