// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilepacketcore.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cluster Service cluster type specific data.
 */
@Fluent
public class ClusterServiceClusterTypeSpecificData implements JsonSerializable<ClusterServiceClusterTypeSpecificData> {
    /*
     * Cluster Type
     */
    private ClusterType type = ClusterType.fromString("ClusterServiceClusterTypeSpecificData");

    /*
     * Custom Location resource ID
     */
    private String customLocationId;

    /**
     * Creates an instance of ClusterServiceClusterTypeSpecificData class.
     */
    public ClusterServiceClusterTypeSpecificData() {
    }

    /**
     * Get the type property: Cluster Type.
     * 
     * @return the type value.
     */
    public ClusterType type() {
        return this.type;
    }

    /**
     * Get the customLocationId property: Custom Location resource ID.
     * 
     * @return the customLocationId value.
     */
    public String customLocationId() {
        return this.customLocationId;
    }

    /**
     * Set the customLocationId property: Custom Location resource ID.
     * 
     * @param customLocationId the customLocationId value to set.
     * @return the ClusterServiceClusterTypeSpecificData object itself.
     */
    public ClusterServiceClusterTypeSpecificData withCustomLocationId(String customLocationId) {
        this.customLocationId = customLocationId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (customLocationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property customLocationId in model ClusterServiceClusterTypeSpecificData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterServiceClusterTypeSpecificData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("customLocationId", this.customLocationId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterServiceClusterTypeSpecificData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterServiceClusterTypeSpecificData if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterServiceClusterTypeSpecificData.
     */
    public static ClusterServiceClusterTypeSpecificData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Aks".equals(discriminatorValue)) {
                    return ClusterServiceAksClusterData.fromJson(readerToUse.reset());
                } else if ("NexusAks".equals(discriminatorValue)) {
                    return ClusterServiceNexusAksClusterData.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static ClusterServiceClusterTypeSpecificData fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterServiceClusterTypeSpecificData deserializedClusterServiceClusterTypeSpecificData
                = new ClusterServiceClusterTypeSpecificData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("customLocationId".equals(fieldName)) {
                    deserializedClusterServiceClusterTypeSpecificData.customLocationId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedClusterServiceClusterTypeSpecificData.type = ClusterType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterServiceClusterTypeSpecificData;
        });
    }
}
