// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilepacketcore.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mobilepacketcore.fluent.models.ClusterServiceResourceInner;
import com.azure.resourcemanager.mobilepacketcore.models.ClusterServiceClusterTypeSpecificData;
import com.azure.resourcemanager.mobilepacketcore.models.ClusterServiceResource;
import com.azure.resourcemanager.mobilepacketcore.models.ClusterServiceResourceTagsUpdate;
import com.azure.resourcemanager.mobilepacketcore.models.OperationalStatus;
import com.azure.resourcemanager.mobilepacketcore.models.ProvisioningState;
import com.azure.resourcemanager.mobilepacketcore.models.QualifiedComponentDeploymentParameters;
import com.azure.resourcemanager.mobilepacketcore.models.SkuDeploymentType;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ClusterServiceResourceImpl
    implements ClusterServiceResource, ClusterServiceResource.Definition, ClusterServiceResource.Update {
    private ClusterServiceResourceInner innerObject;

    private final com.azure.resourcemanager.mobilepacketcore.MobilepacketcoreManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public SkuDeploymentType deploymentType() {
        return this.innerModel().deploymentType();
    }

    public String releaseVersion() {
        return this.innerModel().releaseVersion();
    }

    public ClusterServiceClusterTypeSpecificData clusterTypeSpecificData() {
        return this.innerModel().clusterTypeSpecificData();
    }

    public List<QualifiedComponentDeploymentParameters> componentParameters() {
        List<QualifiedComponentDeploymentParameters> inner = this.innerModel().componentParameters();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public OperationalStatus operationalStatus() {
        return this.innerModel().operationalStatus();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ClusterServiceResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mobilepacketcore.MobilepacketcoreManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterServiceName;

    private ClusterServiceResourceTagsUpdate updateProperties;

    public ClusterServiceResourceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ClusterServiceResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getClusterServices()
            .createOrUpdate(resourceGroupName, clusterServiceName, this.innerModel(), Context.NONE);
        return this;
    }

    public ClusterServiceResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getClusterServices()
            .createOrUpdate(resourceGroupName, clusterServiceName, this.innerModel(), context);
        return this;
    }

    ClusterServiceResourceImpl(String name,
        com.azure.resourcemanager.mobilepacketcore.MobilepacketcoreManager serviceManager) {
        this.innerObject = new ClusterServiceResourceInner();
        this.serviceManager = serviceManager;
        this.clusterServiceName = name;
    }

    public ClusterServiceResourceImpl update() {
        this.updateProperties = new ClusterServiceResourceTagsUpdate();
        return this;
    }

    public ClusterServiceResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getClusterServices()
            .updateTagsWithResponse(resourceGroupName, clusterServiceName, updateProperties, Context.NONE)
            .getValue();
        return this;
    }

    public ClusterServiceResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getClusterServices()
            .updateTagsWithResponse(resourceGroupName, clusterServiceName, updateProperties, context)
            .getValue();
        return this;
    }

    ClusterServiceResourceImpl(ClusterServiceResourceInner innerObject,
        com.azure.resourcemanager.mobilepacketcore.MobilepacketcoreManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterServiceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "clusterServices");
    }

    public ClusterServiceResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getClusterServices()
            .getByResourceGroupWithResponse(resourceGroupName, clusterServiceName, Context.NONE)
            .getValue();
        return this;
    }

    public ClusterServiceResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getClusterServices()
            .getByResourceGroupWithResponse(resourceGroupName, clusterServiceName, context)
            .getValue();
        return this;
    }

    public ClusterServiceResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ClusterServiceResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ClusterServiceResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public ClusterServiceResourceImpl withDeploymentType(SkuDeploymentType deploymentType) {
        this.innerModel().withDeploymentType(deploymentType);
        return this;
    }

    public ClusterServiceResourceImpl withReleaseVersion(String releaseVersion) {
        this.innerModel().withReleaseVersion(releaseVersion);
        return this;
    }

    public ClusterServiceResourceImpl
        withClusterTypeSpecificData(ClusterServiceClusterTypeSpecificData clusterTypeSpecificData) {
        this.innerModel().withClusterTypeSpecificData(clusterTypeSpecificData);
        return this;
    }

    public ClusterServiceResourceImpl
        withComponentParameters(List<QualifiedComponentDeploymentParameters> componentParameters) {
        this.innerModel().withComponentParameters(componentParameters);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
