// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilepacketcore.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mobilepacketcore.fluent.AmfDeploymentsClient;
import com.azure.resourcemanager.mobilepacketcore.fluent.models.AmfDeploymentResourceInner;
import com.azure.resourcemanager.mobilepacketcore.models.AmfDeploymentResource;
import com.azure.resourcemanager.mobilepacketcore.models.AmfDeployments;

public final class AmfDeploymentsImpl implements AmfDeployments {
    private static final ClientLogger LOGGER = new ClientLogger(AmfDeploymentsImpl.class);

    private final AmfDeploymentsClient innerClient;

    private final com.azure.resourcemanager.mobilepacketcore.MobilepacketcoreManager serviceManager;

    public AmfDeploymentsImpl(AmfDeploymentsClient innerClient,
        com.azure.resourcemanager.mobilepacketcore.MobilepacketcoreManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AmfDeploymentResource> list() {
        PagedIterable<AmfDeploymentResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AmfDeploymentResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AmfDeploymentResource> list(Context context) {
        PagedIterable<AmfDeploymentResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AmfDeploymentResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AmfDeploymentResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AmfDeploymentResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AmfDeploymentResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AmfDeploymentResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<AmfDeploymentResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AmfDeploymentResourceImpl(inner1, this.manager()));
    }

    public Response<AmfDeploymentResource> getByResourceGroupWithResponse(String resourceGroupName,
        String amfDeploymentName, Context context) {
        Response<AmfDeploymentResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, amfDeploymentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AmfDeploymentResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AmfDeploymentResource getByResourceGroup(String resourceGroupName, String amfDeploymentName) {
        AmfDeploymentResourceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, amfDeploymentName);
        if (inner != null) {
            return new AmfDeploymentResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String amfDeploymentName) {
        this.serviceClient().delete(resourceGroupName, amfDeploymentName);
    }

    public void delete(String resourceGroupName, String amfDeploymentName, Context context) {
        this.serviceClient().delete(resourceGroupName, amfDeploymentName, context);
    }

    public AmfDeploymentResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String amfDeploymentName = ResourceManagerUtils.getValueFromIdByName(id, "amfDeployments");
        if (amfDeploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'amfDeployments'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, amfDeploymentName, Context.NONE).getValue();
    }

    public Response<AmfDeploymentResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String amfDeploymentName = ResourceManagerUtils.getValueFromIdByName(id, "amfDeployments");
        if (amfDeploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'amfDeployments'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, amfDeploymentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String amfDeploymentName = ResourceManagerUtils.getValueFromIdByName(id, "amfDeployments");
        if (amfDeploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'amfDeployments'.", id)));
        }
        this.delete(resourceGroupName, amfDeploymentName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String amfDeploymentName = ResourceManagerUtils.getValueFromIdByName(id, "amfDeployments");
        if (amfDeploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'amfDeployments'.", id)));
        }
        this.delete(resourceGroupName, amfDeploymentName, context);
    }

    private AmfDeploymentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.mobilepacketcore.MobilepacketcoreManager manager() {
        return this.serviceManager;
    }

    public AmfDeploymentResourceImpl define(String name) {
        return new AmfDeploymentResourceImpl(name, this.manager());
    }
}
