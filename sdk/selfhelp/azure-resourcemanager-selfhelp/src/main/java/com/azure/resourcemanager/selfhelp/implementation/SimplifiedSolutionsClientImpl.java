// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.selfhelp.fluent.SimplifiedSolutionsClient;
import com.azure.resourcemanager.selfhelp.fluent.models.SimplifiedSolutionsResourceInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SimplifiedSolutionsClient.
 */
public final class SimplifiedSolutionsClientImpl implements SimplifiedSolutionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SimplifiedSolutionsService service;

    /**
     * The service client containing this operation class.
     */
    private final HelpRPImpl client;

    /**
     * Initializes an instance of SimplifiedSolutionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SimplifiedSolutionsClientImpl(HelpRPImpl client) {
        this.service = RestProxy.create(SimplifiedSolutionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HelpRPSimplifiedSolutions to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HelpRPSimplifiedSolu")
    public interface SimplifiedSolutionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SimplifiedSolutionsResourceInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("simplifiedSolutionsResourceName") String simplifiedSolutionsResourceName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SimplifiedSolutionsResourceInner> getSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("simplifiedSolutionsResourceName") String simplifiedSolutionsResourceName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("simplifiedSolutionsResourceName") String simplifiedSolutionsResourceName,
            @BodyParam("application/json") SimplifiedSolutionsResourceInner simplifiedSolutionsRequestBody,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("simplifiedSolutionsResourceName") String simplifiedSolutionsResourceName,
            @BodyParam("application/json") SimplifiedSolutionsResourceInner simplifiedSolutionsRequestBody,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get the simplified Solutions using the applicable solutionResourceName while creating the simplified Solutions.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the simplified Solutions using the applicable solutionResourceName while creating the simplified
     * Solutions along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SimplifiedSolutionsResourceInner>> getWithResponseAsync(String scope,
        String simplifiedSolutionsResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (simplifiedSolutionsResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter simplifiedSolutionsResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), scope,
                simplifiedSolutionsResourceName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the simplified Solutions using the applicable solutionResourceName while creating the simplified Solutions.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the simplified Solutions using the applicable solutionResourceName while creating the simplified
     * Solutions on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SimplifiedSolutionsResourceInner> getAsync(String scope, String simplifiedSolutionsResourceName) {
        return getWithResponseAsync(scope, simplifiedSolutionsResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the simplified Solutions using the applicable solutionResourceName while creating the simplified Solutions.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the simplified Solutions using the applicable solutionResourceName while creating the simplified
     * Solutions along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SimplifiedSolutionsResourceInner> getWithResponse(String scope,
        String simplifiedSolutionsResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (simplifiedSolutionsResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter simplifiedSolutionsResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), scope,
            simplifiedSolutionsResourceName, accept, context);
    }

    /**
     * Get the simplified Solutions using the applicable solutionResourceName while creating the simplified Solutions.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the simplified Solutions using the applicable solutionResourceName while creating the simplified
     * Solutions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SimplifiedSolutionsResourceInner get(String scope, String simplifiedSolutionsResourceName) {
        return getWithResponse(scope, simplifiedSolutionsResourceName, Context.NONE).getValue();
    }

    /**
     * Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions as the input.
     * &lt;br/&gt;&lt;br/&gt; Simplified Solutions API makes the consumption of solutions APIs easier while still
     * providing access to the same powerful solutions rendered in Solutions API. With Simplified Solutions, users don't
     * have to worry about stitching together the article using replacement maps and can use the content in the API
     * response to directly render as HTML content.&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @param simplifiedSolutionsRequestBody The required request body for simplified Solutions resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return simplified Solutions response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String scope,
        String simplifiedSolutionsResourceName, SimplifiedSolutionsResourceInner simplifiedSolutionsRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (simplifiedSolutionsResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter simplifiedSolutionsResourceName is required and cannot be null."));
        }
        if (simplifiedSolutionsRequestBody == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter simplifiedSolutionsRequestBody is required and cannot be null."));
        } else {
            simplifiedSolutionsRequestBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(), scope,
                simplifiedSolutionsResourceName, simplifiedSolutionsRequestBody, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions as the input.
     * &lt;br/&gt;&lt;br/&gt; Simplified Solutions API makes the consumption of solutions APIs easier while still
     * providing access to the same powerful solutions rendered in Solutions API. With Simplified Solutions, users don't
     * have to worry about stitching together the article using replacement maps and can use the content in the API
     * response to directly render as HTML content.&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @param simplifiedSolutionsRequestBody The required request body for simplified Solutions resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return simplified Solutions response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String scope, String simplifiedSolutionsResourceName,
        SimplifiedSolutionsResourceInner simplifiedSolutionsRequestBody) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (simplifiedSolutionsResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter simplifiedSolutionsResourceName is required and cannot be null."));
        }
        if (simplifiedSolutionsRequestBody == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter simplifiedSolutionsRequestBody is required and cannot be null."));
        } else {
            simplifiedSolutionsRequestBody.validate();
        }
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(), scope,
            simplifiedSolutionsResourceName, simplifiedSolutionsRequestBody, accept, Context.NONE);
    }

    /**
     * Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions as the input.
     * &lt;br/&gt;&lt;br/&gt; Simplified Solutions API makes the consumption of solutions APIs easier while still
     * providing access to the same powerful solutions rendered in Solutions API. With Simplified Solutions, users don't
     * have to worry about stitching together the article using replacement maps and can use the content in the API
     * response to directly render as HTML content.&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @param simplifiedSolutionsRequestBody The required request body for simplified Solutions resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return simplified Solutions response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String scope, String simplifiedSolutionsResourceName,
        SimplifiedSolutionsResourceInner simplifiedSolutionsRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (simplifiedSolutionsResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter simplifiedSolutionsResourceName is required and cannot be null."));
        }
        if (simplifiedSolutionsRequestBody == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter simplifiedSolutionsRequestBody is required and cannot be null."));
        } else {
            simplifiedSolutionsRequestBody.validate();
        }
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(), scope,
            simplifiedSolutionsResourceName, simplifiedSolutionsRequestBody, accept, context);
    }

    /**
     * Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions as the input.
     * &lt;br/&gt;&lt;br/&gt; Simplified Solutions API makes the consumption of solutions APIs easier while still
     * providing access to the same powerful solutions rendered in Solutions API. With Simplified Solutions, users don't
     * have to worry about stitching together the article using replacement maps and can use the content in the API
     * response to directly render as HTML content.&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @param simplifiedSolutionsRequestBody The required request body for simplified Solutions resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of simplified Solutions response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SimplifiedSolutionsResourceInner>, SimplifiedSolutionsResourceInner> beginCreateAsync(
        String scope, String simplifiedSolutionsResourceName,
        SimplifiedSolutionsResourceInner simplifiedSolutionsRequestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(scope, simplifiedSolutionsResourceName, simplifiedSolutionsRequestBody);
        return this.client.<SimplifiedSolutionsResourceInner, SimplifiedSolutionsResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), SimplifiedSolutionsResourceInner.class,
            SimplifiedSolutionsResourceInner.class, this.client.getContext());
    }

    /**
     * Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions as the input.
     * &lt;br/&gt;&lt;br/&gt; Simplified Solutions API makes the consumption of solutions APIs easier while still
     * providing access to the same powerful solutions rendered in Solutions API. With Simplified Solutions, users don't
     * have to worry about stitching together the article using replacement maps and can use the content in the API
     * response to directly render as HTML content.&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @param simplifiedSolutionsRequestBody The required request body for simplified Solutions resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of simplified Solutions response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SimplifiedSolutionsResourceInner>, SimplifiedSolutionsResourceInner> beginCreate(
        String scope, String simplifiedSolutionsResourceName,
        SimplifiedSolutionsResourceInner simplifiedSolutionsRequestBody) {
        Response<BinaryData> response
            = createWithResponse(scope, simplifiedSolutionsResourceName, simplifiedSolutionsRequestBody);
        return this.client.<SimplifiedSolutionsResourceInner, SimplifiedSolutionsResourceInner>getLroResult(response,
            SimplifiedSolutionsResourceInner.class, SimplifiedSolutionsResourceInner.class, Context.NONE);
    }

    /**
     * Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions as the input.
     * &lt;br/&gt;&lt;br/&gt; Simplified Solutions API makes the consumption of solutions APIs easier while still
     * providing access to the same powerful solutions rendered in Solutions API. With Simplified Solutions, users don't
     * have to worry about stitching together the article using replacement maps and can use the content in the API
     * response to directly render as HTML content.&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @param simplifiedSolutionsRequestBody The required request body for simplified Solutions resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of simplified Solutions response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SimplifiedSolutionsResourceInner>, SimplifiedSolutionsResourceInner> beginCreate(
        String scope, String simplifiedSolutionsResourceName,
        SimplifiedSolutionsResourceInner simplifiedSolutionsRequestBody, Context context) {
        Response<BinaryData> response
            = createWithResponse(scope, simplifiedSolutionsResourceName, simplifiedSolutionsRequestBody, context);
        return this.client.<SimplifiedSolutionsResourceInner, SimplifiedSolutionsResourceInner>getLroResult(response,
            SimplifiedSolutionsResourceInner.class, SimplifiedSolutionsResourceInner.class, context);
    }

    /**
     * Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions as the input.
     * &lt;br/&gt;&lt;br/&gt; Simplified Solutions API makes the consumption of solutions APIs easier while still
     * providing access to the same powerful solutions rendered in Solutions API. With Simplified Solutions, users don't
     * have to worry about stitching together the article using replacement maps and can use the content in the API
     * response to directly render as HTML content.&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @param simplifiedSolutionsRequestBody The required request body for simplified Solutions resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return simplified Solutions response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SimplifiedSolutionsResourceInner> createAsync(String scope, String simplifiedSolutionsResourceName,
        SimplifiedSolutionsResourceInner simplifiedSolutionsRequestBody) {
        return beginCreateAsync(scope, simplifiedSolutionsResourceName, simplifiedSolutionsRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions as the input.
     * &lt;br/&gt;&lt;br/&gt; Simplified Solutions API makes the consumption of solutions APIs easier while still
     * providing access to the same powerful solutions rendered in Solutions API. With Simplified Solutions, users don't
     * have to worry about stitching together the article using replacement maps and can use the content in the API
     * response to directly render as HTML content.&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @param simplifiedSolutionsRequestBody The required request body for simplified Solutions resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return simplified Solutions response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SimplifiedSolutionsResourceInner create(String scope, String simplifiedSolutionsResourceName,
        SimplifiedSolutionsResourceInner simplifiedSolutionsRequestBody) {
        return beginCreate(scope, simplifiedSolutionsResourceName, simplifiedSolutionsRequestBody).getFinalResult();
    }

    /**
     * Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions as the input.
     * &lt;br/&gt;&lt;br/&gt; Simplified Solutions API makes the consumption of solutions APIs easier while still
     * providing access to the same powerful solutions rendered in Solutions API. With Simplified Solutions, users don't
     * have to worry about stitching together the article using replacement maps and can use the content in the API
     * response to directly render as HTML content.&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
     * @param simplifiedSolutionsRequestBody The required request body for simplified Solutions resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return simplified Solutions response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SimplifiedSolutionsResourceInner create(String scope, String simplifiedSolutionsResourceName,
        SimplifiedSolutionsResourceInner simplifiedSolutionsRequestBody, Context context) {
        return beginCreate(scope, simplifiedSolutionsResourceName, simplifiedSolutionsRequestBody, context)
            .getFinalResult();
    }

    private static final ClientLogger LOGGER = new ClientLogger(SimplifiedSolutionsClientImpl.class);
}
