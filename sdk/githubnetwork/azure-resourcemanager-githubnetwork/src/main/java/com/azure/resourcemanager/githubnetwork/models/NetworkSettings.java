// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.githubnetwork.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of NetworkSettings.
 */
public interface NetworkSettings {
    /**
     * Retrieves the properties of all GitHub.Network networkSettings resources.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NetworkSettingsResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<NetworkSettingsResource> list();

    /**
     * Retrieves the properties of all GitHub.Network networkSettings resources.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NetworkSettingsResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<NetworkSettingsResource> list(Context context);

    /**
     * Retrieves the properties of all GitHub.Network networkSettings resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NetworkSettingsResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<NetworkSettingsResource> listByResourceGroup(String resourceGroupName);

    /**
     * Retrieves the properties of all GitHub.Network networkSettings resources.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NetworkSettingsResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<NetworkSettingsResource> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieves the properties of a GitHub.Network networkSettings resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSettingsName Name of the GitHub.Network resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return gitHub.Network networkSettings resource along with {@link Response}.
     */
    Response<NetworkSettingsResource> getByResourceGroupWithResponse(String resourceGroupName,
        String networkSettingsName, Context context);

    /**
     * Retrieves the properties of a GitHub.Network networkSettings resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSettingsName Name of the GitHub.Network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return gitHub.Network networkSettings resource.
     */
    NetworkSettingsResource getByResourceGroup(String resourceGroupName, String networkSettingsName);

    /**
     * Deletes an existing GitHub.Network networkSettings resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSettingsName Name of the GitHub.Network resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String networkSettingsName,
        Context context);

    /**
     * Deletes an existing GitHub.Network networkSettings resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSettingsName Name of the GitHub.Network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String networkSettingsName);

    /**
     * Retrieves the properties of a GitHub.Network networkSettings resource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return gitHub.Network networkSettings resource along with {@link Response}.
     */
    NetworkSettingsResource getById(String id);

    /**
     * Retrieves the properties of a GitHub.Network networkSettings resource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return gitHub.Network networkSettings resource along with {@link Response}.
     */
    Response<NetworkSettingsResource> getByIdWithResponse(String id, Context context);

    /**
     * Deletes an existing GitHub.Network networkSettings resource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes an existing GitHub.Network networkSettings resource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new NetworkSettingsResource resource.
     * 
     * @param name resource name.
     * @return the first stage of the new NetworkSettingsResource definition.
     */
    NetworkSettingsResource.DefinitionStages.Blank define(String name);
}
