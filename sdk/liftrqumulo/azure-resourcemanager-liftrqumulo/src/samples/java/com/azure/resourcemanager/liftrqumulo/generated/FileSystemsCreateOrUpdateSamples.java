// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.liftrqumulo.generated;

import com.azure.resourcemanager.liftrqumulo.models.CompanyDetails;
import com.azure.resourcemanager.liftrqumulo.models.ManagedServiceIdentity;
import com.azure.resourcemanager.liftrqumulo.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.liftrqumulo.models.MarketplaceDetails;
import com.azure.resourcemanager.liftrqumulo.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.liftrqumulo.models.ProvisioningState;
import com.azure.resourcemanager.liftrqumulo.models.StorageSku;
import com.azure.resourcemanager.liftrqumulo.models.UserAssignedIdentity;
import com.azure.resourcemanager.liftrqumulo.models.UserDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for FileSystems CreateOrUpdate. */
public final class FileSystemsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/liftrqumulo/resource-manager/Qumulo.Storage/preview/2022-10-12-preview/examples/FileSystems_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: FileSystems_CreateOrUpdate.
     *
     * @param manager Entry point to LiftrqumuloManager.
     */
    public static void fileSystemsCreateOrUpdate(com.azure.resourcemanager.liftrqumulo.LiftrqumuloManager manager) {
        manager
            .fileSystems()
            .define("ijosiuxfhkqtswgsjiilcbyraqrp")
            .withRegion("od")
            .withExistingResourceGroup("rgQumulo")
            .withTags(mapOf("key2901", "bmzbihobnlbtafhwnpryicdsbwfmf"))
            .withIdentity(
                new ManagedServiceIdentity()
                    .withType(ManagedServiceIdentityType.NONE)
                    .withUserAssignedIdentities(mapOf("key2756", new UserAssignedIdentity())))
            .withSubscriptionId("smnqbzudwydzudyqurzum")
            .withMarketplaceDetails(
                new MarketplaceDetails()
                    .withMarketplaceSubscriptionId("ikghltucwsxnr")
                    .withPlanId("xtzclejvlyxmsaildd")
                    .withOfferId("lo")
                    .withPublisherId("djjmggyxisvitqhhmcmhfn")
                    .withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START))
            .withProvisioningState(ProvisioningState.ACCEPTED)
            .withUserDetails(
                new UserDetails()
                    .withFirstName("cilpifwcfpblpetscouvqsvbcu")
                    .withLastName("aquxvkp")
                    .withEmail("ynfwsgxfasiwrijwhihviiisolml")
                    .withAlternateEmail("qbcednrlrdadhbyfqer")
                    .withUpn("azhdvxcnxtxlffnvgdezoqaaubbjs")
                    .withAddress("ejpoelmtcsurftxomz")
                    .withContactPhoneNumber("jpvopjdokqpa"))
            .withCompanyDetails(
                new CompanyDetails()
                    .withCompanyName("dvwtrpcj")
                    .withOfficeAddress("dfexlqjp")
                    .withCountry("isvjcoxcfehppmokvbfwwsepfna")
                    .withDomain("ruxunoatndj")
                    .withBusiness("qbjsixscgcfexmquofdbxhdjh")
                    .withNumberOfEmployees(12))
            .withDelegatedSubnetId("capcwnggttgpprwfmzqundh")
            .withClusterLoginUrl("mgujvlhdlhoejfkhaq")
            .withPrivateIPs(Arrays.asList("gblgqxeeshzxodifjofoubnk"))
            .withAdminPassword("xxjmjkugnimtajejftdqauhphfjhg")
            .withInitialCapacity(11)
            .withAvailabilityZone("tkjirtjhr")
            .withStorageSku(StorageSku.STANDARD)
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
