// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.impact.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.impact.fluent.UploadServicesClient;
import com.azure.resourcemanager.impact.fluent.models.UploadTokenResponseInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in UploadServicesClient.
 */
public final class UploadServicesClientImpl implements UploadServicesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final UploadServicesService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftImpactImpl client;

    /**
     * Initializes an instance of UploadServicesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    UploadServicesClientImpl(MicrosoftImpactImpl client) {
        this.service
            = RestProxy.create(UploadServicesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftImpactUploadServices to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftImpactUploa")
    public interface UploadServicesService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Impact/getUploadToken")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UploadTokenResponseInner>> getUploadToken(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Customer can use this POST endpoint to trigger an action, where the UserRP/AzImpactRP service creates and returns
     * a user-delegate SAS token for the storage account/container unique to the customer (identified by subscription
     * ID).
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a successful response from getUploadToken will contain an "uploadUrl" field along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<UploadTokenResponseInner>> getUploadTokenWithResponseAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getUploadToken(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Customer can use this POST endpoint to trigger an action, where the UserRP/AzImpactRP service creates and returns
     * a user-delegate SAS token for the storage account/container unique to the customer (identified by subscription
     * ID).
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a successful response from getUploadToken will contain an "uploadUrl" field along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<UploadTokenResponseInner>> getUploadTokenWithResponseAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getUploadToken(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Customer can use this POST endpoint to trigger an action, where the UserRP/AzImpactRP service creates and returns
     * a user-delegate SAS token for the storage account/container unique to the customer (identified by subscription
     * ID).
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a successful response from getUploadToken will contain an "uploadUrl" field on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UploadTokenResponseInner> getUploadTokenAsync() {
        return getUploadTokenWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Customer can use this POST endpoint to trigger an action, where the UserRP/AzImpactRP service creates and returns
     * a user-delegate SAS token for the storage account/container unique to the customer (identified by subscription
     * ID).
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a successful response from getUploadToken will contain an "uploadUrl" field along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<UploadTokenResponseInner> getUploadTokenWithResponse(Context context) {
        return getUploadTokenWithResponseAsync(context).block();
    }

    /**
     * Customer can use this POST endpoint to trigger an action, where the UserRP/AzImpactRP service creates and returns
     * a user-delegate SAS token for the storage account/container unique to the customer (identified by subscription
     * ID).
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a successful response from getUploadToken will contain an "uploadUrl" field.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UploadTokenResponseInner getUploadToken() {
        return getUploadTokenWithResponse(Context.NONE).getValue();
    }
}
