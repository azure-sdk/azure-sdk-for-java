// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.impact.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A successful response from getUploadToken will contain an "uploadUrl" field. This uploadUrl field's value should be
 * follow the format: https://&lt;storage-account-name&gt;.blob.core.windows.net/&lt;container-name&gt;/&lt;ENTER YOUR
 * BLOB NAME HERE&gt;?&lt;SAS-token&gt;.
 */
@Fluent
public final class UploadTokenResponseInner implements JsonSerializable<UploadTokenResponseInner> {
    /*
     * The SAS token URL for uploading
     */
    private String uploadUrl;

    /**
     * Creates an instance of UploadTokenResponseInner class.
     */
    public UploadTokenResponseInner() {
    }

    /**
     * Get the uploadUrl property: The SAS token URL for uploading.
     * 
     * @return the uploadUrl value.
     */
    public String uploadUrl() {
        return this.uploadUrl;
    }

    /**
     * Set the uploadUrl property: The SAS token URL for uploading.
     * 
     * @param uploadUrl the uploadUrl value to set.
     * @return the UploadTokenResponseInner object itself.
     */
    public UploadTokenResponseInner withUploadUrl(String uploadUrl) {
        this.uploadUrl = uploadUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (uploadUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property uploadUrl in model UploadTokenResponseInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UploadTokenResponseInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("uploadUrl", this.uploadUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UploadTokenResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UploadTokenResponseInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UploadTokenResponseInner.
     */
    public static UploadTokenResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UploadTokenResponseInner deserializedUploadTokenResponseInner = new UploadTokenResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("uploadUrl".equals(fieldName)) {
                    deserializedUploadTokenResponseInner.uploadUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUploadTokenResponseInner;
        });
    }
}
