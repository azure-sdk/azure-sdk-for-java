// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.signalr.fluent.SignalRSharedPrivateLinkResourcesClient;
import com.azure.resourcemanager.signalr.fluent.models.SharedPrivateLinkResourceInner;
import com.azure.resourcemanager.signalr.models.SharedPrivateLinkResource;
import com.azure.resourcemanager.signalr.models.SignalRSharedPrivateLinkResources;

public final class SignalRSharedPrivateLinkResourcesImpl implements SignalRSharedPrivateLinkResources {
    private static final ClientLogger LOGGER = new ClientLogger(SignalRSharedPrivateLinkResourcesImpl.class);

    private final SignalRSharedPrivateLinkResourcesClient innerClient;

    private final com.azure.resourcemanager.signalr.SignalRManager serviceManager;

    public SignalRSharedPrivateLinkResourcesImpl(SignalRSharedPrivateLinkResourcesClient innerClient,
        com.azure.resourcemanager.signalr.SignalRManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SharedPrivateLinkResource> list(String resourceGroupName, String resourceName) {
        PagedIterable<SharedPrivateLinkResourceInner> inner
            = this.serviceClient().list(resourceGroupName, resourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SharedPrivateLinkResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SharedPrivateLinkResource> list(String resourceGroupName, String resourceName,
        Context context) {
        PagedIterable<SharedPrivateLinkResourceInner> inner
            = this.serviceClient().list(resourceGroupName, resourceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SharedPrivateLinkResourceImpl(inner1, this.manager()));
    }

    public Response<SharedPrivateLinkResource> getWithResponse(String sharedPrivateLinkResourceName,
        String resourceGroupName, String resourceName, Context context) {
        Response<SharedPrivateLinkResourceInner> inner = this.serviceClient()
            .getWithResponse(sharedPrivateLinkResourceName, resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SharedPrivateLinkResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SharedPrivateLinkResource get(String sharedPrivateLinkResourceName, String resourceGroupName,
        String resourceName) {
        SharedPrivateLinkResourceInner inner
            = this.serviceClient().get(sharedPrivateLinkResourceName, resourceGroupName, resourceName);
        if (inner != null) {
            return new SharedPrivateLinkResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SharedPrivateLinkResource createOrUpdate(String sharedPrivateLinkResourceName, String resourceGroupName,
        String resourceName, SharedPrivateLinkResourceInner parameters) {
        SharedPrivateLinkResourceInner inner = this.serviceClient().createOrUpdate(sharedPrivateLinkResourceName,
            resourceGroupName, resourceName, parameters);
        if (inner != null) {
            return new SharedPrivateLinkResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SharedPrivateLinkResource createOrUpdate(String sharedPrivateLinkResourceName, String resourceGroupName,
        String resourceName, SharedPrivateLinkResourceInner parameters, Context context) {
        SharedPrivateLinkResourceInner inner = this.serviceClient().createOrUpdate(sharedPrivateLinkResourceName,
            resourceGroupName, resourceName, parameters, context);
        if (inner != null) {
            return new SharedPrivateLinkResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String sharedPrivateLinkResourceName, String resourceGroupName, String resourceName) {
        this.serviceClient().delete(sharedPrivateLinkResourceName, resourceGroupName, resourceName);
    }

    public void delete(String sharedPrivateLinkResourceName, String resourceGroupName, String resourceName,
        Context context) {
        this.serviceClient().delete(sharedPrivateLinkResourceName, resourceGroupName, resourceName, context);
    }

    private SignalRSharedPrivateLinkResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.signalr.SignalRManager manager() {
        return this.serviceManager;
    }
}
