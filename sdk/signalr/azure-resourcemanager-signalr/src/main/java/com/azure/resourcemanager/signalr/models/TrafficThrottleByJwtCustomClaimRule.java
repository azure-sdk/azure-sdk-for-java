// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Throttle the client traffic by a custom JWT claim.
 */
@Fluent
public final class TrafficThrottleByJwtCustomClaimRule extends ClientTrafficControlRule {
    /*
     * The type property.
     */
    private ClientTrafficControlRuleDiscriminator type
        = ClientTrafficControlRuleDiscriminator.TRAFFIC_THROTTLE_BY_JWT_CUSTOM_CLAIM_RULE;

    /*
     * The name of the claim in the JWT token. The message bytes with the same claim value will be aggregated. If the
     * claim is not found in the token, the rule will be skipped.
     */
    private String claimName;

    /*
     * Maximum accumulated inbound message bytes allowed for the same JWT signature within a time window. Clients with
     * the same JWT claim will get disconnected if the message bytes exceeds this value. Default value is 1GB.
     */
    private Long maxInboundMessageBytes;

    /*
     * The aggregation window for the message bytes. The message bytes will be aggregated in this window and be reset
     * after the window. Default value is 60 seconds.
     */
    private Integer aggregationWindowInSeconds;

    /**
     * Creates an instance of TrafficThrottleByJwtCustomClaimRule class.
     */
    public TrafficThrottleByJwtCustomClaimRule() {
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Override
    public ClientTrafficControlRuleDiscriminator type() {
        return this.type;
    }

    /**
     * Get the claimName property: The name of the claim in the JWT token. The message bytes with the same claim value
     * will be aggregated. If the claim is not found in the token, the rule will be skipped.
     * 
     * @return the claimName value.
     */
    public String claimName() {
        return this.claimName;
    }

    /**
     * Set the claimName property: The name of the claim in the JWT token. The message bytes with the same claim value
     * will be aggregated. If the claim is not found in the token, the rule will be skipped.
     * 
     * @param claimName the claimName value to set.
     * @return the TrafficThrottleByJwtCustomClaimRule object itself.
     */
    public TrafficThrottleByJwtCustomClaimRule withClaimName(String claimName) {
        this.claimName = claimName;
        return this;
    }

    /**
     * Get the maxInboundMessageBytes property: Maximum accumulated inbound message bytes allowed for the same JWT
     * signature within a time window. Clients with the same JWT claim will get disconnected if the message bytes
     * exceeds this value. Default value is 1GB.
     * 
     * @return the maxInboundMessageBytes value.
     */
    public Long maxInboundMessageBytes() {
        return this.maxInboundMessageBytes;
    }

    /**
     * Set the maxInboundMessageBytes property: Maximum accumulated inbound message bytes allowed for the same JWT
     * signature within a time window. Clients with the same JWT claim will get disconnected if the message bytes
     * exceeds this value. Default value is 1GB.
     * 
     * @param maxInboundMessageBytes the maxInboundMessageBytes value to set.
     * @return the TrafficThrottleByJwtCustomClaimRule object itself.
     */
    public TrafficThrottleByJwtCustomClaimRule withMaxInboundMessageBytes(Long maxInboundMessageBytes) {
        this.maxInboundMessageBytes = maxInboundMessageBytes;
        return this;
    }

    /**
     * Get the aggregationWindowInSeconds property: The aggregation window for the message bytes. The message bytes will
     * be aggregated in this window and be reset after the window. Default value is 60 seconds.
     * 
     * @return the aggregationWindowInSeconds value.
     */
    public Integer aggregationWindowInSeconds() {
        return this.aggregationWindowInSeconds;
    }

    /**
     * Set the aggregationWindowInSeconds property: The aggregation window for the message bytes. The message bytes will
     * be aggregated in this window and be reset after the window. Default value is 60 seconds.
     * 
     * @param aggregationWindowInSeconds the aggregationWindowInSeconds value to set.
     * @return the TrafficThrottleByJwtCustomClaimRule object itself.
     */
    public TrafficThrottleByJwtCustomClaimRule withAggregationWindowInSeconds(Integer aggregationWindowInSeconds) {
        this.aggregationWindowInSeconds = aggregationWindowInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (claimName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property claimName in model TrafficThrottleByJwtCustomClaimRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TrafficThrottleByJwtCustomClaimRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("claimName", this.claimName);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("maxInboundMessageBytes", this.maxInboundMessageBytes);
        jsonWriter.writeNumberField("aggregationWindowInSeconds", this.aggregationWindowInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrafficThrottleByJwtCustomClaimRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrafficThrottleByJwtCustomClaimRule if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TrafficThrottleByJwtCustomClaimRule.
     */
    public static TrafficThrottleByJwtCustomClaimRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrafficThrottleByJwtCustomClaimRule deserializedTrafficThrottleByJwtCustomClaimRule
                = new TrafficThrottleByJwtCustomClaimRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("claimName".equals(fieldName)) {
                    deserializedTrafficThrottleByJwtCustomClaimRule.claimName = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedTrafficThrottleByJwtCustomClaimRule.type
                        = ClientTrafficControlRuleDiscriminator.fromString(reader.getString());
                } else if ("maxInboundMessageBytes".equals(fieldName)) {
                    deserializedTrafficThrottleByJwtCustomClaimRule.maxInboundMessageBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("aggregationWindowInSeconds".equals(fieldName)) {
                    deserializedTrafficThrottleByJwtCustomClaimRule.aggregationWindowInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrafficThrottleByJwtCustomClaimRule;
        });
    }
}
