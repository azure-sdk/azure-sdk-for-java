// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Throttle the client traffic by the user ID.
 */
@Fluent
public final class TrafficThrottleByUserIdRule extends ClientTrafficControlRule {
    /*
     * The type property.
     */
    private ClientTrafficControlRuleDiscriminator type
        = ClientTrafficControlRuleDiscriminator.TRAFFIC_THROTTLE_BY_USER_ID_RULE;

    /*
     * Maximum accumulated inbound message bytes allowed for the same user ID within a time window. Clients with the
     * same user ID will get disconnected if the message bytes exceeds this value. Default value is 1GB.
     */
    private Long maxInboundMessageBytes;

    /*
     * The aggregation window for the message bytes. The message bytes will be aggregated in this window and be reset
     * after the window. Default value is 60 seconds.
     */
    private Integer aggregationWindowInSeconds;

    /**
     * Creates an instance of TrafficThrottleByUserIdRule class.
     */
    public TrafficThrottleByUserIdRule() {
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Override
    public ClientTrafficControlRuleDiscriminator type() {
        return this.type;
    }

    /**
     * Get the maxInboundMessageBytes property: Maximum accumulated inbound message bytes allowed for the same user ID
     * within a time window. Clients with the same user ID will get disconnected if the message bytes exceeds this
     * value. Default value is 1GB.
     * 
     * @return the maxInboundMessageBytes value.
     */
    public Long maxInboundMessageBytes() {
        return this.maxInboundMessageBytes;
    }

    /**
     * Set the maxInboundMessageBytes property: Maximum accumulated inbound message bytes allowed for the same user ID
     * within a time window. Clients with the same user ID will get disconnected if the message bytes exceeds this
     * value. Default value is 1GB.
     * 
     * @param maxInboundMessageBytes the maxInboundMessageBytes value to set.
     * @return the TrafficThrottleByUserIdRule object itself.
     */
    public TrafficThrottleByUserIdRule withMaxInboundMessageBytes(Long maxInboundMessageBytes) {
        this.maxInboundMessageBytes = maxInboundMessageBytes;
        return this;
    }

    /**
     * Get the aggregationWindowInSeconds property: The aggregation window for the message bytes. The message bytes will
     * be aggregated in this window and be reset after the window. Default value is 60 seconds.
     * 
     * @return the aggregationWindowInSeconds value.
     */
    public Integer aggregationWindowInSeconds() {
        return this.aggregationWindowInSeconds;
    }

    /**
     * Set the aggregationWindowInSeconds property: The aggregation window for the message bytes. The message bytes will
     * be aggregated in this window and be reset after the window. Default value is 60 seconds.
     * 
     * @param aggregationWindowInSeconds the aggregationWindowInSeconds value to set.
     * @return the TrafficThrottleByUserIdRule object itself.
     */
    public TrafficThrottleByUserIdRule withAggregationWindowInSeconds(Integer aggregationWindowInSeconds) {
        this.aggregationWindowInSeconds = aggregationWindowInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("maxInboundMessageBytes", this.maxInboundMessageBytes);
        jsonWriter.writeNumberField("aggregationWindowInSeconds", this.aggregationWindowInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrafficThrottleByUserIdRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrafficThrottleByUserIdRule if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrafficThrottleByUserIdRule.
     */
    public static TrafficThrottleByUserIdRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrafficThrottleByUserIdRule deserializedTrafficThrottleByUserIdRule = new TrafficThrottleByUserIdRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedTrafficThrottleByUserIdRule.type
                        = ClientTrafficControlRuleDiscriminator.fromString(reader.getString());
                } else if ("maxInboundMessageBytes".equals(fieldName)) {
                    deserializedTrafficThrottleByUserIdRule.maxInboundMessageBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("aggregationWindowInSeconds".equals(fieldName)) {
                    deserializedTrafficThrottleByUserIdRule.aggregationWindowInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrafficThrottleByUserIdRule;
        });
    }
}
