// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.signalr.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Route settings for the resource.
 */
@Fluent
public final class RouteSettings implements JsonSerializable<RouteSettings> {
    /*
     * Gets or sets the server balance weight.
     * A higher value means a greater balance of client connections across different app server instances.
     * A value of 0 distributes connections randomly, while a value of 255 ensures maximum balancing.
     * The default value is 255.
     * Recommended ```255``` for multiple app servers in same size.
     */
    private Integer serverBalanceWeight;

    /*
     * Gets or sets the connection balance weight.
     * A higher value means a greater balance of client connections across different server connections.
     * A value of 0 distributes connections randomly, while a value of 255 ensures maximum balancing.
     * The default value is 255.
     * Recommended ```255``` for all of the cases.
     */
    private Integer connectionBalanceWeight;

    /*
     * Gets or sets the weight for latency-based routing.
     * A higher value increases the influence of latency-based routing.
     * A value of 0 disables latency-based routing entirely, while a value of 255 enables it fully.
     * The default value is 0.
     * Recommended ```255``` for replicas or app servers in different regions for disaster recovery.
     */
    private Integer latencyWeight;

    /**
     * Creates an instance of RouteSettings class.
     */
    public RouteSettings() {
    }

    /**
     * Get the serverBalanceWeight property: Gets or sets the server balance weight.
     * A higher value means a greater balance of client connections across different app server instances.
     * A value of 0 distributes connections randomly, while a value of 255 ensures maximum balancing.
     * The default value is 255.
     * Recommended ```255``` for multiple app servers in same size.
     * 
     * @return the serverBalanceWeight value.
     */
    public Integer serverBalanceWeight() {
        return this.serverBalanceWeight;
    }

    /**
     * Set the serverBalanceWeight property: Gets or sets the server balance weight.
     * A higher value means a greater balance of client connections across different app server instances.
     * A value of 0 distributes connections randomly, while a value of 255 ensures maximum balancing.
     * The default value is 255.
     * Recommended ```255``` for multiple app servers in same size.
     * 
     * @param serverBalanceWeight the serverBalanceWeight value to set.
     * @return the RouteSettings object itself.
     */
    public RouteSettings withServerBalanceWeight(Integer serverBalanceWeight) {
        this.serverBalanceWeight = serverBalanceWeight;
        return this;
    }

    /**
     * Get the connectionBalanceWeight property: Gets or sets the connection balance weight.
     * A higher value means a greater balance of client connections across different server connections.
     * A value of 0 distributes connections randomly, while a value of 255 ensures maximum balancing.
     * The default value is 255.
     * Recommended ```255``` for all of the cases.
     * 
     * @return the connectionBalanceWeight value.
     */
    public Integer connectionBalanceWeight() {
        return this.connectionBalanceWeight;
    }

    /**
     * Set the connectionBalanceWeight property: Gets or sets the connection balance weight.
     * A higher value means a greater balance of client connections across different server connections.
     * A value of 0 distributes connections randomly, while a value of 255 ensures maximum balancing.
     * The default value is 255.
     * Recommended ```255``` for all of the cases.
     * 
     * @param connectionBalanceWeight the connectionBalanceWeight value to set.
     * @return the RouteSettings object itself.
     */
    public RouteSettings withConnectionBalanceWeight(Integer connectionBalanceWeight) {
        this.connectionBalanceWeight = connectionBalanceWeight;
        return this;
    }

    /**
     * Get the latencyWeight property: Gets or sets the weight for latency-based routing.
     * A higher value increases the influence of latency-based routing.
     * A value of 0 disables latency-based routing entirely, while a value of 255 enables it fully.
     * The default value is 0.
     * Recommended ```255``` for replicas or app servers in different regions for disaster recovery.
     * 
     * @return the latencyWeight value.
     */
    public Integer latencyWeight() {
        return this.latencyWeight;
    }

    /**
     * Set the latencyWeight property: Gets or sets the weight for latency-based routing.
     * A higher value increases the influence of latency-based routing.
     * A value of 0 disables latency-based routing entirely, while a value of 255 enables it fully.
     * The default value is 0.
     * Recommended ```255``` for replicas or app servers in different regions for disaster recovery.
     * 
     * @param latencyWeight the latencyWeight value to set.
     * @return the RouteSettings object itself.
     */
    public RouteSettings withLatencyWeight(Integer latencyWeight) {
        this.latencyWeight = latencyWeight;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("serverBalanceWeight", this.serverBalanceWeight);
        jsonWriter.writeNumberField("connectionBalanceWeight", this.connectionBalanceWeight);
        jsonWriter.writeNumberField("latencyWeight", this.latencyWeight);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouteSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouteSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RouteSettings.
     */
    public static RouteSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouteSettings deserializedRouteSettings = new RouteSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverBalanceWeight".equals(fieldName)) {
                    deserializedRouteSettings.serverBalanceWeight = reader.getNullable(JsonReader::getInt);
                } else if ("connectionBalanceWeight".equals(fieldName)) {
                    deserializedRouteSettings.connectionBalanceWeight = reader.getNullable(JsonReader::getInt);
                } else if ("latencyWeight".equals(fieldName)) {
                    deserializedRouteSettings.latencyWeight = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRouteSettings;
        });
    }
}
