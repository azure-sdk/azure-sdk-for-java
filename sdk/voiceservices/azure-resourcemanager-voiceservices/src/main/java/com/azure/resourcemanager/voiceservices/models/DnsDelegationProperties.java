// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.voiceservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of a DNS Domain delegated to the Communications Gateway.
 */
@Fluent
public final class DnsDelegationProperties implements JsonSerializable<DnsDelegationProperties> {
    /*
     * Domain name to delegate
     */
    private String domain;

    /*
     * The Azure-hosted DNS Name Servers for the delegated DNS Zones
     */
    private List<String> nameServers;

    /**
     * Creates an instance of DnsDelegationProperties class.
     */
    public DnsDelegationProperties() {
    }

    /**
     * Get the domain property: Domain name to delegate.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: Domain name to delegate.
     * 
     * @param domain the domain value to set.
     * @return the DnsDelegationProperties object itself.
     */
    public DnsDelegationProperties withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the nameServers property: The Azure-hosted DNS Name Servers for the delegated DNS Zones.
     * 
     * @return the nameServers value.
     */
    public List<String> nameServers() {
        return this.nameServers;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("domain", this.domain);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnsDelegationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnsDelegationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DnsDelegationProperties.
     */
    public static DnsDelegationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnsDelegationProperties deserializedDnsDelegationProperties = new DnsDelegationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("domain".equals(fieldName)) {
                    deserializedDnsDelegationProperties.domain = reader.getString();
                } else if ("nameServers".equals(fieldName)) {
                    List<String> nameServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedDnsDelegationProperties.nameServers = nameServers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnsDelegationProperties;
        });
    }
}
