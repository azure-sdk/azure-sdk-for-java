// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.voiceservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of Custom SIP Headers.
 */
@Fluent
public final class CustomSipHeadersProperties implements JsonSerializable<CustomSipHeadersProperties> {
    /*
     * The Custom SIP Headers to apply to the calls which traverse the Communications Gateway
     */
    private List<CustomSipHeader> headers;

    /**
     * Creates an instance of CustomSipHeadersProperties class.
     */
    public CustomSipHeadersProperties() {
    }

    /**
     * Get the headers property: The Custom SIP Headers to apply to the calls which traverse the Communications Gateway.
     * 
     * @return the headers value.
     */
    public List<CustomSipHeader> headers() {
        return this.headers;
    }

    /**
     * Set the headers property: The Custom SIP Headers to apply to the calls which traverse the Communications Gateway.
     * 
     * @param headers the headers value to set.
     * @return the CustomSipHeadersProperties object itself.
     */
    public CustomSipHeadersProperties withHeaders(List<CustomSipHeader> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (headers() != null) {
            headers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("headers", this.headers, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomSipHeadersProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomSipHeadersProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomSipHeadersProperties.
     */
    public static CustomSipHeadersProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomSipHeadersProperties deserializedCustomSipHeadersProperties = new CustomSipHeadersProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("headers".equals(fieldName)) {
                    List<CustomSipHeader> headers = reader.readArray(reader1 -> CustomSipHeader.fromJson(reader1));
                    deserializedCustomSipHeadersProperties.headers = headers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomSipHeadersProperties;
        });
    }
}
