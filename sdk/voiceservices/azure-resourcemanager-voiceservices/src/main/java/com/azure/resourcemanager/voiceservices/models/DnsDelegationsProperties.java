// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.voiceservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of DNS Domains delegated to the Communications Gateway.
 */
@Fluent
public final class DnsDelegationsProperties implements JsonSerializable<DnsDelegationsProperties> {
    /*
     * DNS Domains to delegate for the creation of DNS Zones by the Azure Communications Gateway
     */
    private List<DnsDelegationProperties> delegations;

    /**
     * Creates an instance of DnsDelegationsProperties class.
     */
    public DnsDelegationsProperties() {
    }

    /**
     * Get the delegations property: DNS Domains to delegate for the creation of DNS Zones by the Azure Communications
     * Gateway.
     * 
     * @return the delegations value.
     */
    public List<DnsDelegationProperties> delegations() {
        return this.delegations;
    }

    /**
     * Set the delegations property: DNS Domains to delegate for the creation of DNS Zones by the Azure Communications
     * Gateway.
     * 
     * @param delegations the delegations value to set.
     * @return the DnsDelegationsProperties object itself.
     */
    public DnsDelegationsProperties withDelegations(List<DnsDelegationProperties> delegations) {
        this.delegations = delegations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (delegations() != null) {
            delegations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("delegations", this.delegations, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnsDelegationsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnsDelegationsProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DnsDelegationsProperties.
     */
    public static DnsDelegationsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnsDelegationsProperties deserializedDnsDelegationsProperties = new DnsDelegationsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("delegations".equals(fieldName)) {
                    List<DnsDelegationProperties> delegations
                        = reader.readArray(reader1 -> DnsDelegationProperties.fromJson(reader1));
                    deserializedDnsDelegationsProperties.delegations = delegations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnsDelegationsProperties;
        });
    }
}
