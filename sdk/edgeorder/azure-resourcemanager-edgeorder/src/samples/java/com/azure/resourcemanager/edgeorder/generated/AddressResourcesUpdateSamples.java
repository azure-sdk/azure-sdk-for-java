// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.generated;

import com.azure.resourcemanager.edgeorder.models.AddressResource;
import com.azure.resourcemanager.edgeorder.models.AddressType;
import com.azure.resourcemanager.edgeorder.models.ContactDetails;
import com.azure.resourcemanager.edgeorder.models.ShippingAddress;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for AddressResources Update.
 */
public final class AddressResourcesUpdateSamples {
    /*
     * x-ms-original-file: 2024-02-01/UpdateAddress.json
     */
    /**
     * Sample code: UpdateAddress.
     * 
     * @param manager Entry point to EdgeorderManager.
     */
    public static void updateAddress(com.azure.resourcemanager.edgeorder.EdgeorderManager manager) {
        AddressResource resource = manager.addressResources()
            .getByResourceGroupWithResponse("YourResourceGroupName", "TestAddressName2",
                com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("tag1", "value1", "tag2", "value2"))
            .withShippingAddress(new ShippingAddress().withStreetAddress1("16 TOWNSEND ST")
                .withStreetAddress2("UNIT 1")
                .withCity("San Francisco")
                .withStateOrProvince("CA")
                .withCountry("US")
                .withPostalCode("fakeTokenPlaceholder")
                .withCompanyName("Microsoft")
                .withAddressType(AddressType.NONE))
            .withContactDetails(new ContactDetails().withContactName("YYYY YYYY")
                .withPhone("0000000000")
                .withPhoneExtension("")
                .withEmailList(Arrays.asList("xxxx@xxxx.xxx")))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
