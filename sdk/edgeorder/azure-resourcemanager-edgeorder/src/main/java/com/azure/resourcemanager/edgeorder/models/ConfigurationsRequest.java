// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration request object.
 */
@Fluent
public final class ConfigurationsRequest implements JsonSerializable<ConfigurationsRequest> {
    /*
     * Holds details about product hierarchy information and filterable property.
     */
    private ConfigurationFilter configurationFilter;

    /*
     * Customer subscription properties. Clients can display available products to unregistered customers by explicitly
     * passing subscription details.
     */
    private CustomerSubscriptionDetails customerSubscriptionDetails;

    /**
     * Creates an instance of ConfigurationsRequest class.
     */
    public ConfigurationsRequest() {
    }

    /**
     * Get the configurationFilter property: Holds details about product hierarchy information and filterable property.
     * 
     * @return the configurationFilter value.
     */
    public ConfigurationFilter configurationFilter() {
        return this.configurationFilter;
    }

    /**
     * Set the configurationFilter property: Holds details about product hierarchy information and filterable property.
     * 
     * @param configurationFilter the configurationFilter value to set.
     * @return the ConfigurationsRequest object itself.
     */
    public ConfigurationsRequest withConfigurationFilter(ConfigurationFilter configurationFilter) {
        this.configurationFilter = configurationFilter;
        return this;
    }

    /**
     * Get the customerSubscriptionDetails property: Customer subscription properties. Clients can display available
     * products to unregistered customers by explicitly passing subscription details.
     * 
     * @return the customerSubscriptionDetails value.
     */
    public CustomerSubscriptionDetails customerSubscriptionDetails() {
        return this.customerSubscriptionDetails;
    }

    /**
     * Set the customerSubscriptionDetails property: Customer subscription properties. Clients can display available
     * products to unregistered customers by explicitly passing subscription details.
     * 
     * @param customerSubscriptionDetails the customerSubscriptionDetails value to set.
     * @return the ConfigurationsRequest object itself.
     */
    public ConfigurationsRequest
        withCustomerSubscriptionDetails(CustomerSubscriptionDetails customerSubscriptionDetails) {
        this.customerSubscriptionDetails = customerSubscriptionDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configurationFilter() != null) {
            configurationFilter().validate();
        }
        if (customerSubscriptionDetails() != null) {
            customerSubscriptionDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("configurationFilter", this.configurationFilter);
        jsonWriter.writeJsonField("customerSubscriptionDetails", this.customerSubscriptionDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigurationsRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigurationsRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigurationsRequest.
     */
    public static ConfigurationsRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigurationsRequest deserializedConfigurationsRequest = new ConfigurationsRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configurationFilter".equals(fieldName)) {
                    deserializedConfigurationsRequest.configurationFilter = ConfigurationFilter.fromJson(reader);
                } else if ("customerSubscriptionDetails".equals(fieldName)) {
                    deserializedConfigurationsRequest.customerSubscriptionDetails
                        = CustomerSubscriptionDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigurationsRequest;
        });
    }
}
