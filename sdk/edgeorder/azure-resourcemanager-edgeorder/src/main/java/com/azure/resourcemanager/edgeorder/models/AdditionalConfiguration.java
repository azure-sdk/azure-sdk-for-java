// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Additional Configuration details.
 */
@Fluent
public final class AdditionalConfiguration implements JsonSerializable<AdditionalConfiguration> {
    /*
     * Hierarchy of the product which uniquely identifies the configuration.
     */
    private HierarchyInformation hierarchyInformation;

    /*
     * Quantity of the product.
     */
    private int quantity;

    /*
     * List Provisioning Details for Devices in Additional Config.
     */
    private List<ProvisioningDetails> provisioningDetails;

    /**
     * Creates an instance of AdditionalConfiguration class.
     */
    public AdditionalConfiguration() {
    }

    /**
     * Get the hierarchyInformation property: Hierarchy of the product which uniquely identifies the configuration.
     * 
     * @return the hierarchyInformation value.
     */
    public HierarchyInformation hierarchyInformation() {
        return this.hierarchyInformation;
    }

    /**
     * Set the hierarchyInformation property: Hierarchy of the product which uniquely identifies the configuration.
     * 
     * @param hierarchyInformation the hierarchyInformation value to set.
     * @return the AdditionalConfiguration object itself.
     */
    public AdditionalConfiguration withHierarchyInformation(HierarchyInformation hierarchyInformation) {
        this.hierarchyInformation = hierarchyInformation;
        return this;
    }

    /**
     * Get the quantity property: Quantity of the product.
     * 
     * @return the quantity value.
     */
    public int quantity() {
        return this.quantity;
    }

    /**
     * Set the quantity property: Quantity of the product.
     * 
     * @param quantity the quantity value to set.
     * @return the AdditionalConfiguration object itself.
     */
    public AdditionalConfiguration withQuantity(int quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get the provisioningDetails property: List Provisioning Details for Devices in Additional Config.
     * 
     * @return the provisioningDetails value.
     */
    public List<ProvisioningDetails> provisioningDetails() {
        return this.provisioningDetails;
    }

    /**
     * Set the provisioningDetails property: List Provisioning Details for Devices in Additional Config.
     * 
     * @param provisioningDetails the provisioningDetails value to set.
     * @return the AdditionalConfiguration object itself.
     */
    public AdditionalConfiguration withProvisioningDetails(List<ProvisioningDetails> provisioningDetails) {
        this.provisioningDetails = provisioningDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hierarchyInformation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hierarchyInformation in model AdditionalConfiguration"));
        } else {
            hierarchyInformation().validate();
        }
        if (provisioningDetails() != null) {
            provisioningDetails().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AdditionalConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hierarchyInformation", this.hierarchyInformation);
        jsonWriter.writeIntField("quantity", this.quantity);
        jsonWriter.writeArrayField("provisioningDetails", this.provisioningDetails,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdditionalConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdditionalConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AdditionalConfiguration.
     */
    public static AdditionalConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdditionalConfiguration deserializedAdditionalConfiguration = new AdditionalConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hierarchyInformation".equals(fieldName)) {
                    deserializedAdditionalConfiguration.hierarchyInformation = HierarchyInformation.fromJson(reader);
                } else if ("quantity".equals(fieldName)) {
                    deserializedAdditionalConfiguration.quantity = reader.getInt();
                } else if ("provisioningDetails".equals(fieldName)) {
                    List<ProvisioningDetails> provisioningDetails
                        = reader.readArray(reader1 -> ProvisioningDetails.fromJson(reader1));
                    deserializedAdditionalConfiguration.provisioningDetails = provisioningDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdditionalConfiguration;
        });
    }
}
