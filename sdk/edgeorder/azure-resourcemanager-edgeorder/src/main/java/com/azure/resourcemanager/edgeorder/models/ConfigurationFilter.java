// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Configuration filters.
 */
@Fluent
public final class ConfigurationFilter implements JsonSerializable<ConfigurationFilter> {
    /*
     * Product hierarchy information.
     */
    private HierarchyInformation hierarchyInformation;

    /*
     * Filters specific to product.
     */
    private List<FilterableProperty> filterableProperty;

    /*
     * Filter to fetch specific child configurations that exist in the configuration. This must be passed to either
     * fetch a list of specific child configurations, or all child configurations of specific types of child
     * configurations.
     */
    private ChildConfigurationFilter childConfigurationFilter;

    /**
     * Creates an instance of ConfigurationFilter class.
     */
    public ConfigurationFilter() {
    }

    /**
     * Get the hierarchyInformation property: Product hierarchy information.
     * 
     * @return the hierarchyInformation value.
     */
    public HierarchyInformation hierarchyInformation() {
        return this.hierarchyInformation;
    }

    /**
     * Set the hierarchyInformation property: Product hierarchy information.
     * 
     * @param hierarchyInformation the hierarchyInformation value to set.
     * @return the ConfigurationFilter object itself.
     */
    public ConfigurationFilter withHierarchyInformation(HierarchyInformation hierarchyInformation) {
        this.hierarchyInformation = hierarchyInformation;
        return this;
    }

    /**
     * Get the filterableProperty property: Filters specific to product.
     * 
     * @return the filterableProperty value.
     */
    public List<FilterableProperty> filterableProperty() {
        return this.filterableProperty;
    }

    /**
     * Set the filterableProperty property: Filters specific to product.
     * 
     * @param filterableProperty the filterableProperty value to set.
     * @return the ConfigurationFilter object itself.
     */
    public ConfigurationFilter withFilterableProperty(List<FilterableProperty> filterableProperty) {
        this.filterableProperty = filterableProperty;
        return this;
    }

    /**
     * Get the childConfigurationFilter property: Filter to fetch specific child configurations that exist in the
     * configuration. This must be passed to either fetch a list of specific child configurations, or all child
     * configurations of specific types of child configurations.
     * 
     * @return the childConfigurationFilter value.
     */
    public ChildConfigurationFilter childConfigurationFilter() {
        return this.childConfigurationFilter;
    }

    /**
     * Set the childConfigurationFilter property: Filter to fetch specific child configurations that exist in the
     * configuration. This must be passed to either fetch a list of specific child configurations, or all child
     * configurations of specific types of child configurations.
     * 
     * @param childConfigurationFilter the childConfigurationFilter value to set.
     * @return the ConfigurationFilter object itself.
     */
    public ConfigurationFilter withChildConfigurationFilter(ChildConfigurationFilter childConfigurationFilter) {
        this.childConfigurationFilter = childConfigurationFilter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hierarchyInformation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hierarchyInformation in model ConfigurationFilter"));
        } else {
            hierarchyInformation().validate();
        }
        if (filterableProperty() != null) {
            filterableProperty().forEach(e -> e.validate());
        }
        if (childConfigurationFilter() != null) {
            childConfigurationFilter().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConfigurationFilter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hierarchyInformation", this.hierarchyInformation);
        jsonWriter.writeArrayField("filterableProperty", this.filterableProperty,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("childConfigurationFilter", this.childConfigurationFilter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigurationFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigurationFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConfigurationFilter.
     */
    public static ConfigurationFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigurationFilter deserializedConfigurationFilter = new ConfigurationFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hierarchyInformation".equals(fieldName)) {
                    deserializedConfigurationFilter.hierarchyInformation = HierarchyInformation.fromJson(reader);
                } else if ("filterableProperty".equals(fieldName)) {
                    List<FilterableProperty> filterableProperty
                        = reader.readArray(reader1 -> FilterableProperty.fromJson(reader1));
                    deserializedConfigurationFilter.filterableProperty = filterableProperty;
                } else if ("childConfigurationFilter".equals(fieldName)) {
                    deserializedConfigurationFilter.childConfigurationFilter
                        = ChildConfigurationFilter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigurationFilter;
        });
    }
}
