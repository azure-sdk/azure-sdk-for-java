// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.edgeorder.models.AvailabilityInformation;
import com.azure.resourcemanager.edgeorder.models.ChildConfigurationType;
import com.azure.resourcemanager.edgeorder.models.CostInformation;
import com.azure.resourcemanager.edgeorder.models.Description;
import com.azure.resourcemanager.edgeorder.models.Dimensions;
import com.azure.resourcemanager.edgeorder.models.FilterableProperty;
import com.azure.resourcemanager.edgeorder.models.FulfillmentType;
import com.azure.resourcemanager.edgeorder.models.GroupedChildConfigurations;
import com.azure.resourcemanager.edgeorder.models.HierarchyInformation;
import com.azure.resourcemanager.edgeorder.models.ImageInformation;
import com.azure.resourcemanager.edgeorder.models.ProvisioningSupport;
import com.azure.resourcemanager.edgeorder.models.Specification;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * Configuration object.
 */
@Immutable
public final class ConfigurationInner implements JsonSerializable<ConfigurationInner> {
    /*
     * Properties of configuration.
     */
    private ConfigurationProperties innerProperties;

    /**
     * Creates an instance of ConfigurationInner class.
     */
    private ConfigurationInner() {
    }

    /**
     * Get the innerProperties property: Properties of configuration.
     * 
     * @return the innerProperties value.
     */
    private ConfigurationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the specifications property: Specifications of the configuration.
     * 
     * @return the specifications value.
     */
    public List<Specification> specifications() {
        return this.innerProperties() == null ? null : this.innerProperties().specifications();
    }

    /**
     * Get the dimensions property: Dimensions of the configuration.
     * 
     * @return the dimensions value.
     */
    public Dimensions dimensions() {
        return this.innerProperties() == null ? null : this.innerProperties().dimensions();
    }

    /**
     * Get the provisioningSupport property: Determining nature of provisioning that the configuration supports.
     * 
     * @return the provisioningSupport value.
     */
    public ProvisioningSupport provisioningSupport() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningSupport();
    }

    /**
     * Get the childConfigurationTypes property: Different types of child configurations which exist for this
     * configuration, these can be used to populate the child configuration filter.
     * 
     * @return the childConfigurationTypes value.
     */
    public List<ChildConfigurationType> childConfigurationTypes() {
        return this.innerProperties() == null ? null : this.innerProperties().childConfigurationTypes();
    }

    /**
     * Get the groupedChildConfigurations property: Child configurations present for the configuration after applying
     * child configuration filter, grouped by the category name of the child configuration.
     * 
     * @return the groupedChildConfigurations value.
     */
    public List<GroupedChildConfigurations> groupedChildConfigurations() {
        return this.innerProperties() == null ? null : this.innerProperties().groupedChildConfigurations();
    }

    /**
     * Get the supportedTermCommitmentDurations property: The Term Commitment Durations that are supported for a
     * configuration.
     * 
     * @return the supportedTermCommitmentDurations value.
     */
    public List<Duration> supportedTermCommitmentDurations() {
        return this.innerProperties() == null ? null : this.innerProperties().supportedTermCommitmentDurations();
    }

    /**
     * Get the filterableProperties property: List of filters supported for a product.
     * 
     * @return the filterableProperties value.
     */
    public List<FilterableProperty> filterableProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().filterableProperties();
    }

    /**
     * Get the displayName property: Display Name for the product system.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Get the description property: Description related to the product system.
     * 
     * @return the description value.
     */
    public Description description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Get the imageInformation property: Image information for the product system.
     * 
     * @return the imageInformation value.
     */
    public List<ImageInformation> imageInformation() {
        return this.innerProperties() == null ? null : this.innerProperties().imageInformation();
    }

    /**
     * Get the costInformation property: Cost information for the product system.
     * 
     * @return the costInformation value.
     */
    public CostInformation costInformation() {
        return this.innerProperties() == null ? null : this.innerProperties().costInformation();
    }

    /**
     * Get the availabilityInformation property: Availability information of the product system.
     * 
     * @return the availabilityInformation value.
     */
    public AvailabilityInformation availabilityInformation() {
        return this.innerProperties() == null ? null : this.innerProperties().availabilityInformation();
    }

    /**
     * Get the hierarchyInformation property: Hierarchy information of a product.
     * 
     * @return the hierarchyInformation value.
     */
    public HierarchyInformation hierarchyInformation() {
        return this.innerProperties() == null ? null : this.innerProperties().hierarchyInformation();
    }

    /**
     * Get the fulfilledBy property: The entity responsible for fulfillment of the item at the given hierarchy level.
     * 
     * @return the fulfilledBy value.
     */
    public FulfillmentType fulfilledBy() {
        return this.innerProperties() == null ? null : this.innerProperties().fulfilledBy();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigurationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigurationInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigurationInner.
     */
    public static ConfigurationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigurationInner deserializedConfigurationInner = new ConfigurationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedConfigurationInner.innerProperties = ConfigurationProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigurationInner;
        });
    }
}
