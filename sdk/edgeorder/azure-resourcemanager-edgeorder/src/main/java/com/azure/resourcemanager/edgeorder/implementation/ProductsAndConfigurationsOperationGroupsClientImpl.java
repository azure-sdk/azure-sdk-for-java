// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.edgeorder.fluent.ProductsAndConfigurationsOperationGroupsClient;
import com.azure.resourcemanager.edgeorder.fluent.models.ConfigurationInner;
import com.azure.resourcemanager.edgeorder.fluent.models.ProductFamiliesMetadataDetailsInner;
import com.azure.resourcemanager.edgeorder.fluent.models.ProductFamilyInner;
import com.azure.resourcemanager.edgeorder.implementation.models.Configurations;
import com.azure.resourcemanager.edgeorder.implementation.models.ProductFamilies;
import com.azure.resourcemanager.edgeorder.implementation.models.ProductFamiliesMetadata;
import com.azure.resourcemanager.edgeorder.models.ConfigurationsRequest;
import com.azure.resourcemanager.edgeorder.models.ProductFamiliesRequest;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * ProductsAndConfigurationsOperationGroupsClient.
 */
public final class ProductsAndConfigurationsOperationGroupsClientImpl
    implements ProductsAndConfigurationsOperationGroupsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ProductsAndConfigurationsOperationGroupsService service;

    /**
     * The service client containing this operation class.
     */
    private final EdgeOrderClientImpl client;

    /**
     * Initializes an instance of ProductsAndConfigurationsOperationGroupsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ProductsAndConfigurationsOperationGroupsClientImpl(EdgeOrderClientImpl client) {
        this.service = RestProxy.create(ProductsAndConfigurationsOperationGroupsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for EdgeOrderClientProductsAndConfigurationsOperationGroups to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "EdgeOrderClientProdu")
    public interface ProductsAndConfigurationsOperationGroupsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listConfigurations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Configurations>> listConfigurations(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$skipToken") String skipToken, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ConfigurationsRequest configurationsRequest, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listConfigurations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Configurations> listConfigurationsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$skipToken") String skipToken, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ConfigurationsRequest configurationsRequest, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listProductFamilies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProductFamilies>> listProductFamilies(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$expand") String expand, @QueryParam("$skipToken") String skipToken,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ProductFamiliesRequest productFamiliesRequest, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listProductFamilies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ProductFamilies> listProductFamiliesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$expand") String expand, @QueryParam("$skipToken") String skipToken,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ProductFamiliesRequest productFamiliesRequest, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/productFamiliesMetadata")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProductFamiliesMetadata>> listProductFamiliesMetadata(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$skipToken") String skipToken, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/productFamiliesMetadata")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ProductFamiliesMetadata> listProductFamiliesMetadataSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$skipToken") String skipToken, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Configurations>> listConfigurationsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Configurations> listConfigurationsNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProductFamilies>> listProductFamiliesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ProductFamilies> listProductFamiliesNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProductFamiliesMetadata>> listProductFamiliesMetadataNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ProductFamiliesMetadata> listProductFamiliesMetadataNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List configurations for the given product family, product line and product for the given subscription.
     * 
     * @param configurationsRequest Filters for showing the configurations.
     * @param skipToken $skipToken is supported on list of configurations, which provides the next page in the list of
     * configurations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of configurations along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfigurationInner>>
        listConfigurationsSinglePageAsync(ConfigurationsRequest configurationsRequest, String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (configurationsRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configurationsRequest is required and cannot be null."));
        } else {
            configurationsRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listConfigurations(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), skipToken, accept, configurationsRequest, context))
            .<PagedResponse<ConfigurationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List configurations for the given product family, product line and product for the given subscription.
     * 
     * @param configurationsRequest Filters for showing the configurations.
     * @param skipToken $skipToken is supported on list of configurations, which provides the next page in the list of
     * configurations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of configurations as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConfigurationInner> listConfigurationsAsync(ConfigurationsRequest configurationsRequest,
        String skipToken) {
        return new PagedFlux<>(() -> listConfigurationsSinglePageAsync(configurationsRequest, skipToken),
            nextLink -> listConfigurationsNextSinglePageAsync(nextLink));
    }

    /**
     * List configurations for the given product family, product line and product for the given subscription.
     * 
     * @param configurationsRequest Filters for showing the configurations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of configurations as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConfigurationInner> listConfigurationsAsync(ConfigurationsRequest configurationsRequest) {
        final String skipToken = null;
        return new PagedFlux<>(() -> listConfigurationsSinglePageAsync(configurationsRequest, skipToken),
            nextLink -> listConfigurationsNextSinglePageAsync(nextLink));
    }

    /**
     * List configurations for the given product family, product line and product for the given subscription.
     * 
     * @param configurationsRequest Filters for showing the configurations.
     * @param skipToken $skipToken is supported on list of configurations, which provides the next page in the list of
     * configurations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of configurations along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ConfigurationInner> listConfigurationsSinglePage(ConfigurationsRequest configurationsRequest,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (configurationsRequest == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter configurationsRequest is required and cannot be null."));
        } else {
            configurationsRequest.validate();
        }
        final String accept = "application/json";
        Response<Configurations> res
            = service.listConfigurationsSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), skipToken, accept, configurationsRequest, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List configurations for the given product family, product line and product for the given subscription.
     * 
     * @param configurationsRequest Filters for showing the configurations.
     * @param skipToken $skipToken is supported on list of configurations, which provides the next page in the list of
     * configurations.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of configurations along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ConfigurationInner> listConfigurationsSinglePage(ConfigurationsRequest configurationsRequest,
        String skipToken, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (configurationsRequest == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter configurationsRequest is required and cannot be null."));
        } else {
            configurationsRequest.validate();
        }
        final String accept = "application/json";
        Response<Configurations> res
            = service.listConfigurationsSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), skipToken, accept, configurationsRequest, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List configurations for the given product family, product line and product for the given subscription.
     * 
     * @param configurationsRequest Filters for showing the configurations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of configurations as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationInner> listConfigurations(ConfigurationsRequest configurationsRequest) {
        final String skipToken = null;
        return new PagedIterable<>(() -> listConfigurationsSinglePage(configurationsRequest, skipToken),
            nextLink -> listConfigurationsNextSinglePage(nextLink));
    }

    /**
     * List configurations for the given product family, product line and product for the given subscription.
     * 
     * @param configurationsRequest Filters for showing the configurations.
     * @param skipToken $skipToken is supported on list of configurations, which provides the next page in the list of
     * configurations.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of configurations as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationInner> listConfigurations(ConfigurationsRequest configurationsRequest,
        String skipToken, Context context) {
        return new PagedIterable<>(() -> listConfigurationsSinglePage(configurationsRequest, skipToken, context),
            nextLink -> listConfigurationsNextSinglePage(nextLink, context));
    }

    /**
     * List product families for the given subscription.
     * 
     * @param productFamiliesRequest Filters for showing the product families.
     * @param expand $expand is supported on configurations parameter for product, which provides details on the
     * configurations for the product.
     * @param skipToken $skipToken is supported on list of product families, which provides the next page in the list of
     * product families.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of product families along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProductFamilyInner>> listProductFamiliesSinglePageAsync(
        ProductFamiliesRequest productFamiliesRequest, String expand, String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (productFamiliesRequest == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter productFamiliesRequest is required and cannot be null."));
        } else {
            productFamiliesRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listProductFamilies(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), expand, skipToken, accept, productFamiliesRequest, context))
            .<PagedResponse<ProductFamilyInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List product families for the given subscription.
     * 
     * @param productFamiliesRequest Filters for showing the product families.
     * @param expand $expand is supported on configurations parameter for product, which provides details on the
     * configurations for the product.
     * @param skipToken $skipToken is supported on list of product families, which provides the next page in the list of
     * product families.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of product families as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProductFamilyInner> listProductFamiliesAsync(ProductFamiliesRequest productFamiliesRequest,
        String expand, String skipToken) {
        return new PagedFlux<>(() -> listProductFamiliesSinglePageAsync(productFamiliesRequest, expand, skipToken),
            nextLink -> listProductFamiliesNextSinglePageAsync(nextLink));
    }

    /**
     * List product families for the given subscription.
     * 
     * @param productFamiliesRequest Filters for showing the product families.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of product families as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProductFamilyInner> listProductFamiliesAsync(ProductFamiliesRequest productFamiliesRequest) {
        final String expand = null;
        final String skipToken = null;
        return new PagedFlux<>(() -> listProductFamiliesSinglePageAsync(productFamiliesRequest, expand, skipToken),
            nextLink -> listProductFamiliesNextSinglePageAsync(nextLink));
    }

    /**
     * List product families for the given subscription.
     * 
     * @param productFamiliesRequest Filters for showing the product families.
     * @param expand $expand is supported on configurations parameter for product, which provides details on the
     * configurations for the product.
     * @param skipToken $skipToken is supported on list of product families, which provides the next page in the list of
     * product families.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of product families along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ProductFamilyInner>
        listProductFamiliesSinglePage(ProductFamiliesRequest productFamiliesRequest, String expand, String skipToken) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (productFamiliesRequest == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter productFamiliesRequest is required and cannot be null."));
        } else {
            productFamiliesRequest.validate();
        }
        final String accept = "application/json";
        Response<ProductFamilies> res
            = service.listProductFamiliesSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), expand, skipToken, accept, productFamiliesRequest, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List product families for the given subscription.
     * 
     * @param productFamiliesRequest Filters for showing the product families.
     * @param expand $expand is supported on configurations parameter for product, which provides details on the
     * configurations for the product.
     * @param skipToken $skipToken is supported on list of product families, which provides the next page in the list of
     * product families.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of product families along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ProductFamilyInner> listProductFamiliesSinglePage(
        ProductFamiliesRequest productFamiliesRequest, String expand, String skipToken, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (productFamiliesRequest == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter productFamiliesRequest is required and cannot be null."));
        } else {
            productFamiliesRequest.validate();
        }
        final String accept = "application/json";
        Response<ProductFamilies> res
            = service.listProductFamiliesSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), expand, skipToken, accept, productFamiliesRequest, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List product families for the given subscription.
     * 
     * @param productFamiliesRequest Filters for showing the product families.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of product families as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProductFamilyInner> listProductFamilies(ProductFamiliesRequest productFamiliesRequest) {
        final String expand = null;
        final String skipToken = null;
        return new PagedIterable<>(() -> listProductFamiliesSinglePage(productFamiliesRequest, expand, skipToken),
            nextLink -> listProductFamiliesNextSinglePage(nextLink));
    }

    /**
     * List product families for the given subscription.
     * 
     * @param productFamiliesRequest Filters for showing the product families.
     * @param expand $expand is supported on configurations parameter for product, which provides details on the
     * configurations for the product.
     * @param skipToken $skipToken is supported on list of product families, which provides the next page in the list of
     * product families.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of product families as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProductFamilyInner> listProductFamilies(ProductFamiliesRequest productFamiliesRequest,
        String expand, String skipToken, Context context) {
        return new PagedIterable<>(
            () -> listProductFamiliesSinglePage(productFamiliesRequest, expand, skipToken, context),
            nextLink -> listProductFamiliesNextSinglePage(nextLink, context));
    }

    /**
     * List product families metadata for the given subscription.
     * 
     * @param skipToken $skipToken is supported on list of product families metadata, which provides the next page in
     * the list of product families metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return holds details about product family metadata along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProductFamiliesMetadataDetailsInner>>
        listProductFamiliesMetadataSinglePageAsync(String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listProductFamiliesMetadata(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), skipToken, accept, context))
            .<PagedResponse<ProductFamiliesMetadataDetailsInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List product families metadata for the given subscription.
     * 
     * @param skipToken $skipToken is supported on list of product families metadata, which provides the next page in
     * the list of product families metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return holds details about product family metadata as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProductFamiliesMetadataDetailsInner> listProductFamiliesMetadataAsync(String skipToken) {
        return new PagedFlux<>(() -> listProductFamiliesMetadataSinglePageAsync(skipToken),
            nextLink -> listProductFamiliesMetadataNextSinglePageAsync(nextLink));
    }

    /**
     * List product families metadata for the given subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return holds details about product family metadata as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProductFamiliesMetadataDetailsInner> listProductFamiliesMetadataAsync() {
        final String skipToken = null;
        return new PagedFlux<>(() -> listProductFamiliesMetadataSinglePageAsync(skipToken),
            nextLink -> listProductFamiliesMetadataNextSinglePageAsync(nextLink));
    }

    /**
     * List product families metadata for the given subscription.
     * 
     * @param skipToken $skipToken is supported on list of product families metadata, which provides the next page in
     * the list of product families metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return holds details about product family metadata along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ProductFamiliesMetadataDetailsInner> listProductFamiliesMetadataSinglePage(String skipToken) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ProductFamiliesMetadata> res = service.listProductFamiliesMetadataSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), skipToken, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List product families metadata for the given subscription.
     * 
     * @param skipToken $skipToken is supported on list of product families metadata, which provides the next page in
     * the list of product families metadata.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return holds details about product family metadata along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ProductFamiliesMetadataDetailsInner> listProductFamiliesMetadataSinglePage(String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ProductFamiliesMetadata> res = service.listProductFamiliesMetadataSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), skipToken, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List product families metadata for the given subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return holds details about product family metadata as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProductFamiliesMetadataDetailsInner> listProductFamiliesMetadata() {
        final String skipToken = null;
        return new PagedIterable<>(() -> listProductFamiliesMetadataSinglePage(skipToken),
            nextLink -> listProductFamiliesMetadataNextSinglePage(nextLink));
    }

    /**
     * List product families metadata for the given subscription.
     * 
     * @param skipToken $skipToken is supported on list of product families metadata, which provides the next page in
     * the list of product families metadata.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return holds details about product family metadata as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProductFamiliesMetadataDetailsInner> listProductFamiliesMetadata(String skipToken,
        Context context) {
        return new PagedIterable<>(() -> listProductFamiliesMetadataSinglePage(skipToken, context),
            nextLink -> listProductFamiliesMetadataNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of configurations along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfigurationInner>> listConfigurationsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listConfigurationsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ConfigurationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of configurations along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ConfigurationInner> listConfigurationsNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<Configurations> res
            = service.listConfigurationsNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of configurations along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ConfigurationInner> listConfigurationsNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<Configurations> res
            = service.listConfigurationsNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of product families along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProductFamilyInner>> listProductFamiliesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listProductFamiliesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ProductFamilyInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of product families along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ProductFamilyInner> listProductFamiliesNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ProductFamilies> res
            = service.listProductFamiliesNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of product families along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ProductFamilyInner> listProductFamiliesNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ProductFamilies> res
            = service.listProductFamiliesNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return holds details about product family metadata along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProductFamiliesMetadataDetailsInner>>
        listProductFamiliesMetadataNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listProductFamiliesMetadataNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ProductFamiliesMetadataDetailsInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return holds details about product family metadata along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ProductFamiliesMetadataDetailsInner>
        listProductFamiliesMetadataNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ProductFamiliesMetadata> res
            = service.listProductFamiliesMetadataNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return holds details about product family metadata along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ProductFamiliesMetadataDetailsInner>
        listProductFamiliesMetadataNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ProductFamiliesMetadata> res
            = service.listProductFamiliesMetadataNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(ProductsAndConfigurationsOperationGroupsClientImpl.class);
}
