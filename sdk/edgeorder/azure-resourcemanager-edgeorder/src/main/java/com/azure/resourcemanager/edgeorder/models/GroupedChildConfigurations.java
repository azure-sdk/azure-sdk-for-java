// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Grouped child configuration object.
 */
@Immutable
public final class GroupedChildConfigurations implements JsonSerializable<GroupedChildConfigurations> {
    /*
     * Category information.
     */
    private CategoryInformation categoryInformation;

    /*
     * List of child configurations.
     */
    private List<ChildConfiguration> childConfigurations;

    /**
     * Creates an instance of GroupedChildConfigurations class.
     */
    private GroupedChildConfigurations() {
    }

    /**
     * Get the categoryInformation property: Category information.
     * 
     * @return the categoryInformation value.
     */
    public CategoryInformation categoryInformation() {
        return this.categoryInformation;
    }

    /**
     * Get the childConfigurations property: List of child configurations.
     * 
     * @return the childConfigurations value.
     */
    public List<ChildConfiguration> childConfigurations() {
        return this.childConfigurations;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (categoryInformation() != null) {
            categoryInformation().validate();
        }
        if (childConfigurations() != null) {
            childConfigurations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GroupedChildConfigurations from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GroupedChildConfigurations if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GroupedChildConfigurations.
     */
    public static GroupedChildConfigurations fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GroupedChildConfigurations deserializedGroupedChildConfigurations = new GroupedChildConfigurations();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("categoryInformation".equals(fieldName)) {
                    deserializedGroupedChildConfigurations.categoryInformation = CategoryInformation.fromJson(reader);
                } else if ("childConfigurations".equals(fieldName)) {
                    List<ChildConfiguration> childConfigurations
                        = reader.readArray(reader1 -> ChildConfiguration.fromJson(reader1));
                    deserializedGroupedChildConfigurations.childConfigurations = childConfigurations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGroupedChildConfigurations;
        });
    }
}
