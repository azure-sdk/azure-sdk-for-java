// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.edgeorder.fluent.OrderItemResourcesClient;
import com.azure.resourcemanager.edgeorder.fluent.models.OrderItemResourceInner;
import com.azure.resourcemanager.edgeorder.implementation.models.OrderItemResourceList;
import com.azure.resourcemanager.edgeorder.models.CancellationReason;
import com.azure.resourcemanager.edgeorder.models.OrderItemUpdateParameter;
import com.azure.resourcemanager.edgeorder.models.ReturnOrderItemDetails;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in OrderItemResourcesClient.
 */
public final class OrderItemResourcesClientImpl implements OrderItemResourcesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final OrderItemResourcesService service;

    /**
     * The service client containing this operation class.
     */
    private final EdgeOrderClientImpl client;

    /**
     * Initializes an instance of OrderItemResourcesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    OrderItemResourcesClientImpl(EdgeOrderClientImpl client) {
        this.service = RestProxy.create(OrderItemResourcesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for EdgeOrderClientOrderItemResources to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "EdgeOrderClientOrder")
    public interface OrderItemResourcesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OrderItemResourceInner>> getByResourceGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @QueryParam("$expand") String expand, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OrderItemResourceInner> getByResourceGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @QueryParam("$expand") String expand, @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") OrderItemResourceInner orderItemResource, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") OrderItemResourceInner orderItemResource, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") OrderItemUpdateParameter orderItemUpdateParameter, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") OrderItemUpdateParameter orderItemUpdateParameter, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OrderItemResourceList>> listByResourceGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("$filter") String filter,
            @QueryParam("$expand") String expand, @QueryParam("$skipToken") String skipToken,
            @QueryParam("$top") Integer top, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OrderItemResourceList> listByResourceGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("$filter") String filter,
            @QueryParam("$expand") String expand, @QueryParam("$skipToken") String skipToken,
            @QueryParam("$top") Integer top, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orderItems")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OrderItemResourceList>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$filter") String filter, @QueryParam("$expand") String expand,
            @QueryParam("$skipToken") String skipToken, @QueryParam("$top") Integer top,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orderItems")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OrderItemResourceList> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$filter") String filter, @QueryParam("$expand") String expand,
            @QueryParam("$skipToken") String skipToken, @QueryParam("$top") Integer top,
            @HeaderParam("Accept") String accept, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/cancel")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> cancel(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") CancellationReason cancellationReason, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/cancel")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Void> cancelSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") CancellationReason cancellationReason, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/return")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> returnOrderItem(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ReturnOrderItemDetails returnOrderItemDetails, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/return")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> returnOrderItemSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("orderItemName") String orderItemName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ReturnOrderItemDetails returnOrderItemDetails, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OrderItemResourceList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OrderItemResourceList> listByResourceGroupNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OrderItemResourceList>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OrderItemResourceList> listBySubscriptionNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an order item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OrderItemResourceInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String orderItemName, String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            return Mono.error(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, orderItemName, expand, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an order item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OrderItemResourceInner> getByResourceGroupAsync(String resourceGroupName, String orderItemName) {
        final String expand = null;
        return getByResourceGroupWithResponseAsync(resourceGroupName, orderItemName, expand)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an order item along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OrderItemResourceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String orderItemName, String expand, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getByResourceGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, orderItemName, expand, accept, context);
    }

    /**
     * Get an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an order item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OrderItemResourceInner getByResourceGroup(String resourceGroupName, String orderItemName) {
        final String expand = null;
        return getByResourceGroupWithResponse(resourceGroupName, orderItemName, expand, Context.NONE).getValue();
    }

    /**
     * Create an order item. Existing order item cannot be updated with this api and should instead be updated with the
     * Update order item
     * API.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemResource Order item details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String orderItemName,
        OrderItemResourceInner orderItemResource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            return Mono.error(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        if (orderItemResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter orderItemResource is required and cannot be null."));
        } else {
            orderItemResource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, orderItemName, contentType, accept,
                orderItemResource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create an order item. Existing order item cannot be updated with this api and should instead be updated with the
     * Update order item
     * API.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemResource Order item details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String resourceGroupName, String orderItemName,
        OrderItemResourceInner orderItemResource) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        if (orderItemResource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemResource is required and cannot be null."));
        } else {
            orderItemResource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, orderItemName, contentType, accept, orderItemResource,
            Context.NONE);
    }

    /**
     * Create an order item. Existing order item cannot be updated with this api and should instead be updated with the
     * Update order item
     * API.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemResource Order item details from request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String resourceGroupName, String orderItemName,
        OrderItemResourceInner orderItemResource, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        if (orderItemResource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemResource is required and cannot be null."));
        } else {
            orderItemResource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, orderItemName, contentType, accept, orderItemResource,
            context);
    }

    /**
     * Create an order item. Existing order item cannot be updated with this api and should instead be updated with the
     * Update order item
     * API.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemResource Order item details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OrderItemResourceInner>, OrderItemResourceInner>
        beginCreateAsync(String resourceGroupName, String orderItemName, OrderItemResourceInner orderItemResource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, orderItemName, orderItemResource);
        return this.client.<OrderItemResourceInner, OrderItemResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), OrderItemResourceInner.class, OrderItemResourceInner.class,
            this.client.getContext());
    }

    /**
     * Create an order item. Existing order item cannot be updated with this api and should instead be updated with the
     * Update order item
     * API.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemResource Order item details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OrderItemResourceInner>, OrderItemResourceInner> beginCreate(String resourceGroupName,
        String orderItemName, OrderItemResourceInner orderItemResource) {
        Response<BinaryData> response = createWithResponse(resourceGroupName, orderItemName, orderItemResource);
        return this.client.<OrderItemResourceInner, OrderItemResourceInner>getLroResult(response,
            OrderItemResourceInner.class, OrderItemResourceInner.class, Context.NONE);
    }

    /**
     * Create an order item. Existing order item cannot be updated with this api and should instead be updated with the
     * Update order item
     * API.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemResource Order item details from request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OrderItemResourceInner>, OrderItemResourceInner> beginCreate(String resourceGroupName,
        String orderItemName, OrderItemResourceInner orderItemResource, Context context) {
        Response<BinaryData> response
            = createWithResponse(resourceGroupName, orderItemName, orderItemResource, context);
        return this.client.<OrderItemResourceInner, OrderItemResourceInner>getLroResult(response,
            OrderItemResourceInner.class, OrderItemResourceInner.class, context);
    }

    /**
     * Create an order item. Existing order item cannot be updated with this api and should instead be updated with the
     * Update order item
     * API.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemResource Order item details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OrderItemResourceInner> createAsync(String resourceGroupName, String orderItemName,
        OrderItemResourceInner orderItemResource) {
        return beginCreateAsync(resourceGroupName, orderItemName, orderItemResource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create an order item. Existing order item cannot be updated with this api and should instead be updated with the
     * Update order item
     * API.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemResource Order item details from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OrderItemResourceInner create(String resourceGroupName, String orderItemName,
        OrderItemResourceInner orderItemResource) {
        return beginCreate(resourceGroupName, orderItemName, orderItemResource).getFinalResult();
    }

    /**
     * Create an order item. Existing order item cannot be updated with this api and should instead be updated with the
     * Update order item
     * API.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemResource Order item details from request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OrderItemResourceInner create(String resourceGroupName, String orderItemName,
        OrderItemResourceInner orderItemResource, Context context) {
        return beginCreate(resourceGroupName, orderItemName, orderItemResource, context).getFinalResult();
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the order on the
     * server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String orderItemName,
        OrderItemUpdateParameter orderItemUpdateParameter, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            return Mono.error(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        if (orderItemUpdateParameter == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter orderItemUpdateParameter is required and cannot be null."));
        } else {
            orderItemUpdateParameter.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, orderItemName, ifMatch, contentType, accept,
                orderItemUpdateParameter, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the order on the
     * server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String orderItemName,
        OrderItemUpdateParameter orderItemUpdateParameter, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        if (orderItemUpdateParameter == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Parameter orderItemUpdateParameter is required and cannot be null."));
        } else {
            orderItemUpdateParameter.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, orderItemName, ifMatch, contentType, accept,
            orderItemUpdateParameter, Context.NONE);
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the order on the
     * server matches this value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String orderItemName,
        OrderItemUpdateParameter orderItemUpdateParameter, String ifMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        if (orderItemUpdateParameter == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Parameter orderItemUpdateParameter is required and cannot be null."));
        } else {
            orderItemUpdateParameter.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, orderItemName, ifMatch, contentType, accept,
            orderItemUpdateParameter, context);
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the order on the
     * server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OrderItemResourceInner>, OrderItemResourceInner> beginUpdateAsync(
        String resourceGroupName, String orderItemName, OrderItemUpdateParameter orderItemUpdateParameter,
        String ifMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch);
        return this.client.<OrderItemResourceInner, OrderItemResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), OrderItemResourceInner.class, OrderItemResourceInner.class,
            this.client.getContext());
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OrderItemResourceInner>, OrderItemResourceInner> beginUpdateAsync(
        String resourceGroupName, String orderItemName, OrderItemUpdateParameter orderItemUpdateParameter) {
        final String ifMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch);
        return this.client.<OrderItemResourceInner, OrderItemResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), OrderItemResourceInner.class, OrderItemResourceInner.class,
            this.client.getContext());
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the order on the
     * server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OrderItemResourceInner>, OrderItemResourceInner> beginUpdate(String resourceGroupName,
        String orderItemName, OrderItemUpdateParameter orderItemUpdateParameter, String ifMatch) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch);
        return this.client.<OrderItemResourceInner, OrderItemResourceInner>getLroResult(response,
            OrderItemResourceInner.class, OrderItemResourceInner.class, Context.NONE);
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OrderItemResourceInner>, OrderItemResourceInner> beginUpdate(String resourceGroupName,
        String orderItemName, OrderItemUpdateParameter orderItemUpdateParameter) {
        final String ifMatch = null;
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch);
        return this.client.<OrderItemResourceInner, OrderItemResourceInner>getLroResult(response,
            OrderItemResourceInner.class, OrderItemResourceInner.class, Context.NONE);
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the order on the
     * server matches this value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OrderItemResourceInner>, OrderItemResourceInner> beginUpdate(String resourceGroupName,
        String orderItemName, OrderItemUpdateParameter orderItemUpdateParameter, String ifMatch, Context context) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch, context);
        return this.client.<OrderItemResourceInner, OrderItemResourceInner>getLroResult(response,
            OrderItemResourceInner.class, OrderItemResourceInner.class, context);
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the order on the
     * server matches this value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OrderItemResourceInner> updateAsync(String resourceGroupName, String orderItemName,
        OrderItemUpdateParameter orderItemUpdateParameter, String ifMatch) {
        return beginUpdateAsync(resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OrderItemResourceInner> updateAsync(String resourceGroupName, String orderItemName,
        OrderItemUpdateParameter orderItemUpdateParameter) {
        final String ifMatch = null;
        return beginUpdateAsync(resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OrderItemResourceInner update(String resourceGroupName, String orderItemName,
        OrderItemUpdateParameter orderItemUpdateParameter) {
        final String ifMatch = null;
        return beginUpdate(resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch).getFinalResult();
    }

    /**
     * Update the properties of an existing order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param orderItemUpdateParameter Order item update parameters from request body.
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the order on the
     * server matches this value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents order item resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OrderItemResourceInner update(String resourceGroupName, String orderItemName,
        OrderItemUpdateParameter orderItemUpdateParameter, String ifMatch, Context context) {
        return beginUpdate(resourceGroupName, orderItemName, orderItemUpdateParameter, ifMatch, context)
            .getFinalResult();
    }

    /**
     * Delete an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String orderItemName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            return Mono.error(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, orderItemName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String orderItemName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, orderItemName, accept, Context.NONE);
    }

    /**
     * Delete an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String orderItemName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, orderItemName, accept, context);
    }

    /**
     * Delete an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String orderItemName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, orderItemName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String orderItemName) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, orderItemName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String orderItemName,
        Context context) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, orderItemName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String orderItemName) {
        return beginDeleteAsync(resourceGroupName, orderItemName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String orderItemName) {
        beginDelete(resourceGroupName, orderItemName).getFinalResult();
    }

    /**
     * Delete an order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String orderItemName, Context context) {
        beginDelete(resourceGroupName, orderItemName, context).getFinalResult();
    }

    /**
     * List order items at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param filter $filter is supported to filter based on order id and order Item Type. Filter supports only equals
     * operation.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @param skipToken $skipToken is supported on Get list of order items, which provides the next page in the list of
     * order items.
     * @param top $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
     * will be returned to the API caller.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OrderItemResourceInner>> listByResourceGroupSinglePageAsync(String resourceGroupName,
        String filter, String expand, String skipToken, Integer top) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, filter, expand, skipToken, top, accept, context))
            .<PagedResponse<OrderItemResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List order items at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param filter $filter is supported to filter based on order id and order Item Type. Filter supports only equals
     * operation.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @param skipToken $skipToken is supported on Get list of order items, which provides the next page in the list of
     * order items.
     * @param top $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
     * will be returned to the API caller.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OrderItemResourceInner> listByResourceGroupAsync(String resourceGroupName, String filter,
        String expand, String skipToken, Integer top) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, filter, expand, skipToken, top),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List order items at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OrderItemResourceInner> listByResourceGroupAsync(String resourceGroupName) {
        final String filter = null;
        final String expand = null;
        final String skipToken = null;
        final Integer top = null;
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, filter, expand, skipToken, top),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List order items at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param filter $filter is supported to filter based on order id and order Item Type. Filter supports only equals
     * operation.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @param skipToken $skipToken is supported on Get list of order items, which provides the next page in the list of
     * order items.
     * @param top $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
     * will be returned to the API caller.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OrderItemResourceInner> listByResourceGroupSinglePage(String resourceGroupName, String filter,
        String expand, String skipToken, Integer top) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OrderItemResourceList> res = service.listByResourceGroupSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, filter, expand, skipToken,
            top, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List order items at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param filter $filter is supported to filter based on order id and order Item Type. Filter supports only equals
     * operation.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @param skipToken $skipToken is supported on Get list of order items, which provides the next page in the list of
     * order items.
     * @param top $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
     * will be returned to the API caller.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OrderItemResourceInner> listByResourceGroupSinglePage(String resourceGroupName, String filter,
        String expand, String skipToken, Integer top, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OrderItemResourceList> res
            = service.listByResourceGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, filter, expand, skipToken, top, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List order items at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OrderItemResourceInner> listByResourceGroup(String resourceGroupName) {
        final String filter = null;
        final String expand = null;
        final String skipToken = null;
        final Integer top = null;
        return new PagedIterable<>(
            () -> listByResourceGroupSinglePage(resourceGroupName, filter, expand, skipToken, top),
            nextLink -> listByResourceGroupNextSinglePage(nextLink));
    }

    /**
     * List order items at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param filter $filter is supported to filter based on order id and order Item Type. Filter supports only equals
     * operation.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @param skipToken $skipToken is supported on Get list of order items, which provides the next page in the list of
     * order items.
     * @param top $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
     * will be returned to the API caller.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OrderItemResourceInner> listByResourceGroup(String resourceGroupName, String filter,
        String expand, String skipToken, Integer top, Context context) {
        return new PagedIterable<>(
            () -> listByResourceGroupSinglePage(resourceGroupName, filter, expand, skipToken, top, context),
            nextLink -> listByResourceGroupNextSinglePage(nextLink, context));
    }

    /**
     * List order items at subscription level.
     * 
     * @param filter $filter is supported to filter based on order id and order Item Type. Filter supports only equals
     * operation.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @param skipToken $skipToken is supported on Get list of order items, which provides the next page in the list of
     * order items.
     * @param top $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
     * will be returned to the API caller.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OrderItemResourceInner>> listSinglePageAsync(String filter, String expand,
        String skipToken, Integer top) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), filter, expand, skipToken, top, accept, context))
            .<PagedResponse<OrderItemResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List order items at subscription level.
     * 
     * @param filter $filter is supported to filter based on order id and order Item Type. Filter supports only equals
     * operation.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @param skipToken $skipToken is supported on Get list of order items, which provides the next page in the list of
     * order items.
     * @param top $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
     * will be returned to the API caller.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OrderItemResourceInner> listAsync(String filter, String expand, String skipToken, Integer top) {
        return new PagedFlux<>(() -> listSinglePageAsync(filter, expand, skipToken, top),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List order items at subscription level.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OrderItemResourceInner> listAsync() {
        final String filter = null;
        final String expand = null;
        final String skipToken = null;
        final Integer top = null;
        return new PagedFlux<>(() -> listSinglePageAsync(filter, expand, skipToken, top),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List order items at subscription level.
     * 
     * @param filter $filter is supported to filter based on order id and order Item Type. Filter supports only equals
     * operation.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @param skipToken $skipToken is supported on Get list of order items, which provides the next page in the list of
     * order items.
     * @param top $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
     * will be returned to the API caller.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OrderItemResourceInner> listSinglePage(String filter, String expand, String skipToken,
        Integer top) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OrderItemResourceList> res = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), filter, expand, skipToken, top, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List order items at subscription level.
     * 
     * @param filter $filter is supported to filter based on order id and order Item Type. Filter supports only equals
     * operation.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @param skipToken $skipToken is supported on Get list of order items, which provides the next page in the list of
     * order items.
     * @param top $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
     * will be returned to the API caller.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OrderItemResourceInner> listSinglePage(String filter, String expand, String skipToken,
        Integer top, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OrderItemResourceList> res = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), filter, expand, skipToken, top, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List order items at subscription level.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OrderItemResourceInner> list() {
        final String filter = null;
        final String expand = null;
        final String skipToken = null;
        final Integer top = null;
        return new PagedIterable<>(() -> listSinglePage(filter, expand, skipToken, top),
            nextLink -> listBySubscriptionNextSinglePage(nextLink));
    }

    /**
     * List order items at subscription level.
     * 
     * @param filter $filter is supported to filter based on order id and order Item Type. Filter supports only equals
     * operation.
     * @param expand $expand is supported on parent device details, device details, forward shipping details and reverse
     * shipping details parameters. Each of these can be provided as a comma separated list. Parent Device Details for
     * order item provides details on the devices of the product, Device Details for order item provides details on the
     * devices of the child configurations of the product, Forward and Reverse Shipping details provide forward and
     * reverse shipping details respectively.
     * @param skipToken $skipToken is supported on Get list of order items, which provides the next page in the list of
     * order items.
     * @param top $top is supported on fetching list of resources. $top=10 means that the first 10 items in the list
     * will be returned to the API caller.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OrderItemResourceInner> list(String filter, String expand, String skipToken, Integer top,
        Context context) {
        return new PagedIterable<>(() -> listSinglePage(filter, expand, skipToken, top, context),
            nextLink -> listBySubscriptionNextSinglePage(nextLink, context));
    }

    /**
     * Cancel order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param cancellationReason Reason for cancellation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> cancelWithResponseAsync(String resourceGroupName, String orderItemName,
        CancellationReason cancellationReason) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            return Mono.error(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        if (cancellationReason == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cancellationReason is required and cannot be null."));
        } else {
            cancellationReason.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.cancel(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, orderItemName, contentType, accept,
                cancellationReason, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Cancel order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param cancellationReason Reason for cancellation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> cancelAsync(String resourceGroupName, String orderItemName,
        CancellationReason cancellationReason) {
        return cancelWithResponseAsync(resourceGroupName, orderItemName, cancellationReason)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Cancel order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param cancellationReason Reason for cancellation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelWithResponse(String resourceGroupName, String orderItemName,
        CancellationReason cancellationReason, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        if (cancellationReason == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter cancellationReason is required and cannot be null."));
        } else {
            cancellationReason.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.cancelSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, orderItemName, contentType, accept, cancellationReason,
            context);
    }

    /**
     * Cancel order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param cancellationReason Reason for cancellation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancel(String resourceGroupName, String orderItemName, CancellationReason cancellationReason) {
        cancelWithResponse(resourceGroupName, orderItemName, cancellationReason, Context.NONE);
    }

    /**
     * Return order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param returnOrderItemDetails Return order item details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> returnOrderItemWithResponseAsync(String resourceGroupName,
        String orderItemName, ReturnOrderItemDetails returnOrderItemDetails) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            return Mono.error(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        if (returnOrderItemDetails == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter returnOrderItemDetails is required and cannot be null."));
        } else {
            returnOrderItemDetails.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.returnOrderItem(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, orderItemName, contentType, accept,
                returnOrderItemDetails, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Return order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param returnOrderItemDetails Return order item details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> returnOrderItemWithResponse(String resourceGroupName, String orderItemName,
        ReturnOrderItemDetails returnOrderItemDetails) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        if (returnOrderItemDetails == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter returnOrderItemDetails is required and cannot be null."));
        } else {
            returnOrderItemDetails.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.returnOrderItemSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, orderItemName, contentType, accept,
            returnOrderItemDetails, Context.NONE);
    }

    /**
     * Return order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param returnOrderItemDetails Return order item details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> returnOrderItemWithResponse(String resourceGroupName, String orderItemName,
        ReturnOrderItemDetails returnOrderItemDetails, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (orderItemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter orderItemName is required and cannot be null."));
        }
        if (returnOrderItemDetails == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter returnOrderItemDetails is required and cannot be null."));
        } else {
            returnOrderItemDetails.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.returnOrderItemSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, orderItemName, contentType, accept,
            returnOrderItemDetails, context);
    }

    /**
     * Return order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param returnOrderItemDetails Return order item details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginReturnOrderItemAsync(String resourceGroupName, String orderItemName,
        ReturnOrderItemDetails returnOrderItemDetails) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = returnOrderItemWithResponseAsync(resourceGroupName, orderItemName, returnOrderItemDetails);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Return order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param returnOrderItemDetails Return order item details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginReturnOrderItem(String resourceGroupName, String orderItemName,
        ReturnOrderItemDetails returnOrderItemDetails) {
        Response<BinaryData> response
            = returnOrderItemWithResponse(resourceGroupName, orderItemName, returnOrderItemDetails);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Return order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param returnOrderItemDetails Return order item details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginReturnOrderItem(String resourceGroupName, String orderItemName,
        ReturnOrderItemDetails returnOrderItemDetails, Context context) {
        Response<BinaryData> response
            = returnOrderItemWithResponse(resourceGroupName, orderItemName, returnOrderItemDetails, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Return order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param returnOrderItemDetails Return order item details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> returnOrderItemAsync(String resourceGroupName, String orderItemName,
        ReturnOrderItemDetails returnOrderItemDetails) {
        return beginReturnOrderItemAsync(resourceGroupName, orderItemName, returnOrderItemDetails).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Return order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param returnOrderItemDetails Return order item details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void returnOrderItem(String resourceGroupName, String orderItemName,
        ReturnOrderItemDetails returnOrderItemDetails) {
        beginReturnOrderItem(resourceGroupName, orderItemName, returnOrderItemDetails).getFinalResult();
    }

    /**
     * Return order item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param orderItemName The name of the order item.
     * @param returnOrderItemDetails Return order item details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void returnOrderItem(String resourceGroupName, String orderItemName,
        ReturnOrderItemDetails returnOrderItemDetails, Context context) {
        beginReturnOrderItem(resourceGroupName, orderItemName, returnOrderItemDetails, context).getFinalResult();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OrderItemResourceInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<OrderItemResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OrderItemResourceInner> listByResourceGroupNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OrderItemResourceList> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OrderItemResourceInner> listByResourceGroupNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OrderItemResourceList> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OrderItemResourceInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<OrderItemResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OrderItemResourceInner> listBySubscriptionNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OrderItemResourceList> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of order items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OrderItemResourceInner> listBySubscriptionNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OrderItemResourceList> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(OrderItemResourcesClientImpl.class);
}
