// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * Holds details about term type and duration.
 */
@Immutable
public final class TermTypeDetails implements JsonSerializable<TermTypeDetails> {
    /*
     * Term Commitment Type
     */
    private TermCommitmentType termType;

    /*
     * Duration for the term type.
     */
    private Duration termTypeDuration;

    /**
     * Creates an instance of TermTypeDetails class.
     */
    private TermTypeDetails() {
    }

    /**
     * Get the termType property: Term Commitment Type.
     * 
     * @return the termType value.
     */
    public TermCommitmentType termType() {
        return this.termType;
    }

    /**
     * Get the termTypeDuration property: Duration for the term type.
     * 
     * @return the termTypeDuration value.
     */
    public Duration termTypeDuration() {
        return this.termTypeDuration;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (termType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property termType in model TermTypeDetails"));
        }
        if (termTypeDuration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property termTypeDuration in model TermTypeDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TermTypeDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("termType", this.termType == null ? null : this.termType.toString());
        jsonWriter.writeStringField("termTypeDuration", CoreUtils.durationToStringWithDays(this.termTypeDuration));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TermTypeDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TermTypeDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TermTypeDetails.
     */
    public static TermTypeDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TermTypeDetails deserializedTermTypeDetails = new TermTypeDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("termType".equals(fieldName)) {
                    deserializedTermTypeDetails.termType = TermCommitmentType.fromString(reader.getString());
                } else if ("termTypeDuration".equals(fieldName)) {
                    deserializedTermTypeDetails.termTypeDuration
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTermTypeDetails;
        });
    }
}
