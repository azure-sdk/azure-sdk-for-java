// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.edgeorder.models.AddressClassification;
import com.azure.resourcemanager.edgeorder.models.AddressValidationStatus;
import com.azure.resourcemanager.edgeorder.models.ContactDetails;
import com.azure.resourcemanager.edgeorder.models.ProvisioningState;
import com.azure.resourcemanager.edgeorder.models.ShippingAddress;
import java.io.IOException;

/**
 * Address Properties.
 */
@Fluent
public final class AddressProperties implements JsonSerializable<AddressProperties> {
    /*
     * Type of address based on its usage context.
     */
    private AddressClassification addressClassification;

    /*
     * Shipping details for the address.
     */
    private ShippingAddress shippingAddress;

    /*
     * Contact details for the address.
     */
    private ContactDetails contactDetails;

    /*
     * Status of address validation.
     */
    private AddressValidationStatus addressValidationStatus;

    /*
     * Provisioning state
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AddressProperties class.
     */
    public AddressProperties() {
    }

    /**
     * Get the addressClassification property: Type of address based on its usage context.
     * 
     * @return the addressClassification value.
     */
    public AddressClassification addressClassification() {
        return this.addressClassification;
    }

    /**
     * Set the addressClassification property: Type of address based on its usage context.
     * 
     * @param addressClassification the addressClassification value to set.
     * @return the AddressProperties object itself.
     */
    public AddressProperties withAddressClassification(AddressClassification addressClassification) {
        this.addressClassification = addressClassification;
        return this;
    }

    /**
     * Get the shippingAddress property: Shipping details for the address.
     * 
     * @return the shippingAddress value.
     */
    public ShippingAddress shippingAddress() {
        return this.shippingAddress;
    }

    /**
     * Set the shippingAddress property: Shipping details for the address.
     * 
     * @param shippingAddress the shippingAddress value to set.
     * @return the AddressProperties object itself.
     */
    public AddressProperties withShippingAddress(ShippingAddress shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }

    /**
     * Get the contactDetails property: Contact details for the address.
     * 
     * @return the contactDetails value.
     */
    public ContactDetails contactDetails() {
        return this.contactDetails;
    }

    /**
     * Set the contactDetails property: Contact details for the address.
     * 
     * @param contactDetails the contactDetails value to set.
     * @return the AddressProperties object itself.
     */
    public AddressProperties withContactDetails(ContactDetails contactDetails) {
        this.contactDetails = contactDetails;
        return this;
    }

    /**
     * Get the addressValidationStatus property: Status of address validation.
     * 
     * @return the addressValidationStatus value.
     */
    public AddressValidationStatus addressValidationStatus() {
        return this.addressValidationStatus;
    }

    /**
     * Get the provisioningState property: Provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (shippingAddress() != null) {
            shippingAddress().validate();
        }
        if (contactDetails() != null) {
            contactDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("addressClassification",
            this.addressClassification == null ? null : this.addressClassification.toString());
        jsonWriter.writeJsonField("shippingAddress", this.shippingAddress);
        jsonWriter.writeJsonField("contactDetails", this.contactDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddressProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddressProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AddressProperties.
     */
    public static AddressProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AddressProperties deserializedAddressProperties = new AddressProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("addressClassification".equals(fieldName)) {
                    deserializedAddressProperties.addressClassification
                        = AddressClassification.fromString(reader.getString());
                } else if ("shippingAddress".equals(fieldName)) {
                    deserializedAddressProperties.shippingAddress = ShippingAddress.fromJson(reader);
                } else if ("contactDetails".equals(fieldName)) {
                    deserializedAddressProperties.contactDetails = ContactDetails.fromJson(reader);
                } else if ("addressValidationStatus".equals(fieldName)) {
                    deserializedAddressProperties.addressValidationStatus
                        = AddressValidationStatus.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAddressProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAddressProperties;
        });
    }
}
