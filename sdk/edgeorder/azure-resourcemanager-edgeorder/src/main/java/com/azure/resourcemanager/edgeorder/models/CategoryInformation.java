// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Category related properties of a child configuration.
 */
@Immutable
public final class CategoryInformation implements JsonSerializable<CategoryInformation> {
    /*
     * Category name of the child configuration.
     */
    private String categoryName;

    /*
     * Category display name of the child configuration.
     */
    private String categoryDisplayName;

    /*
     * Description text for the category.
     */
    private String description;

    /*
     * Links for the category.
     */
    private List<Link> links;

    /**
     * Creates an instance of CategoryInformation class.
     */
    private CategoryInformation() {
    }

    /**
     * Get the categoryName property: Category name of the child configuration.
     * 
     * @return the categoryName value.
     */
    public String categoryName() {
        return this.categoryName;
    }

    /**
     * Get the categoryDisplayName property: Category display name of the child configuration.
     * 
     * @return the categoryDisplayName value.
     */
    public String categoryDisplayName() {
        return this.categoryDisplayName;
    }

    /**
     * Get the description property: Description text for the category.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the links property: Links for the category.
     * 
     * @return the links value.
     */
    public List<Link> links() {
        return this.links;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (links() != null) {
            links().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("categoryName", this.categoryName);
        jsonWriter.writeStringField("categoryDisplayName", this.categoryDisplayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CategoryInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CategoryInformation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CategoryInformation.
     */
    public static CategoryInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CategoryInformation deserializedCategoryInformation = new CategoryInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("categoryName".equals(fieldName)) {
                    deserializedCategoryInformation.categoryName = reader.getString();
                } else if ("categoryDisplayName".equals(fieldName)) {
                    deserializedCategoryInformation.categoryDisplayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedCategoryInformation.description = reader.getString();
                } else if ("links".equals(fieldName)) {
                    List<Link> links = reader.readArray(reader1 -> Link.fromJson(reader1));
                    deserializedCategoryInformation.links = links;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCategoryInformation;
        });
    }
}
