// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Child configuration filter.
 */
@Fluent
public final class ChildConfigurationFilter implements JsonSerializable<ChildConfigurationFilter> {
    /*
     * The list of child configuration hierarchy customer wants to filter for the given configuration.
     */
    private List<HierarchyInformation> hierarchyInformations;

    /*
     * Filter to fetch all child configurations belonging to the given list of configuration types.
     */
    private List<ChildConfigurationType> childConfigurationTypes;

    /**
     * Creates an instance of ChildConfigurationFilter class.
     */
    public ChildConfigurationFilter() {
    }

    /**
     * Get the hierarchyInformations property: The list of child configuration hierarchy customer wants to filter for
     * the given configuration.
     * 
     * @return the hierarchyInformations value.
     */
    public List<HierarchyInformation> hierarchyInformations() {
        return this.hierarchyInformations;
    }

    /**
     * Set the hierarchyInformations property: The list of child configuration hierarchy customer wants to filter for
     * the given configuration.
     * 
     * @param hierarchyInformations the hierarchyInformations value to set.
     * @return the ChildConfigurationFilter object itself.
     */
    public ChildConfigurationFilter withHierarchyInformations(List<HierarchyInformation> hierarchyInformations) {
        this.hierarchyInformations = hierarchyInformations;
        return this;
    }

    /**
     * Get the childConfigurationTypes property: Filter to fetch all child configurations belonging to the given list of
     * configuration types.
     * 
     * @return the childConfigurationTypes value.
     */
    public List<ChildConfigurationType> childConfigurationTypes() {
        return this.childConfigurationTypes;
    }

    /**
     * Set the childConfigurationTypes property: Filter to fetch all child configurations belonging to the given list of
     * configuration types.
     * 
     * @param childConfigurationTypes the childConfigurationTypes value to set.
     * @return the ChildConfigurationFilter object itself.
     */
    public ChildConfigurationFilter withChildConfigurationTypes(List<ChildConfigurationType> childConfigurationTypes) {
        this.childConfigurationTypes = childConfigurationTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hierarchyInformations() != null) {
            hierarchyInformations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("hierarchyInformations", this.hierarchyInformations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("childConfigurationTypes", this.childConfigurationTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChildConfigurationFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChildConfigurationFilter if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ChildConfigurationFilter.
     */
    public static ChildConfigurationFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChildConfigurationFilter deserializedChildConfigurationFilter = new ChildConfigurationFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hierarchyInformations".equals(fieldName)) {
                    List<HierarchyInformation> hierarchyInformations
                        = reader.readArray(reader1 -> HierarchyInformation.fromJson(reader1));
                    deserializedChildConfigurationFilter.hierarchyInformations = hierarchyInformations;
                } else if ("childConfigurationTypes".equals(fieldName)) {
                    List<ChildConfigurationType> childConfigurationTypes
                        = reader.readArray(reader1 -> ChildConfigurationType.fromString(reader1.getString()));
                    deserializedChildConfigurationFilter.childConfigurationTypes = childConfigurationTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChildConfigurationFilter;
        });
    }
}
