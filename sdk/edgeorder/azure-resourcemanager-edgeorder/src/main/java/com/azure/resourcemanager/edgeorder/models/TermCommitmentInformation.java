// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * Term Commitment Information.
 */
@Immutable
public final class TermCommitmentInformation implements JsonSerializable<TermCommitmentInformation> {
    /*
     * Term Commitment Type
     */
    private TermCommitmentType termCommitmentType;

    /*
     * Term Commitment Duration. Currently Supporting P365D, P1095D
     */
    private Duration termCommitmentTypeDuration;

    /*
     * Number of Days Pending for Term Commitment
     */
    private Integer pendingDaysForTerm;

    /**
     * Creates an instance of TermCommitmentInformation class.
     */
    private TermCommitmentInformation() {
    }

    /**
     * Get the termCommitmentType property: Term Commitment Type.
     * 
     * @return the termCommitmentType value.
     */
    public TermCommitmentType termCommitmentType() {
        return this.termCommitmentType;
    }

    /**
     * Get the termCommitmentTypeDuration property: Term Commitment Duration. Currently Supporting P365D, P1095D.
     * 
     * @return the termCommitmentTypeDuration value.
     */
    public Duration termCommitmentTypeDuration() {
        return this.termCommitmentTypeDuration;
    }

    /**
     * Get the pendingDaysForTerm property: Number of Days Pending for Term Commitment.
     * 
     * @return the pendingDaysForTerm value.
     */
    public Integer pendingDaysForTerm() {
        return this.pendingDaysForTerm;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (termCommitmentType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property termCommitmentType in model TermCommitmentInformation"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TermCommitmentInformation.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("termCommitmentType",
            this.termCommitmentType == null ? null : this.termCommitmentType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TermCommitmentInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TermCommitmentInformation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TermCommitmentInformation.
     */
    public static TermCommitmentInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TermCommitmentInformation deserializedTermCommitmentInformation = new TermCommitmentInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("termCommitmentType".equals(fieldName)) {
                    deserializedTermCommitmentInformation.termCommitmentType
                        = TermCommitmentType.fromString(reader.getString());
                } else if ("termCommitmentTypeDuration".equals(fieldName)) {
                    deserializedTermCommitmentInformation.termCommitmentTypeDuration
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("pendingDaysForTerm".equals(fieldName)) {
                    deserializedTermCommitmentInformation.pendingDaysForTerm = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTermCommitmentInformation;
        });
    }
}
