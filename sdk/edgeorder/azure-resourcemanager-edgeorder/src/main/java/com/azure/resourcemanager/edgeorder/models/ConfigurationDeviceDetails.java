// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Device details for configuration.
 */
@Immutable
public final class ConfigurationDeviceDetails implements JsonSerializable<ConfigurationDeviceDetails> {
    /*
     * Display details of the product.
     */
    private DisplayInfo displayInfo;

    /*
     * Hierarchy of the product which uniquely identifies the configuration.
     */
    private HierarchyInformation hierarchyInformation;

    /*
     * Quantity of the product.
     */
    private Integer quantity;

    /*
     * Identification type of the configuration.
     */
    private IdentificationType identificationType;

    /*
     * List of device details.
     */
    private List<DeviceDetails> deviceDetails;

    /*
     * Term Commitment Information of the Device.
     */
    private TermCommitmentInformation termCommitmentInformation;

    /**
     * Creates an instance of ConfigurationDeviceDetails class.
     */
    private ConfigurationDeviceDetails() {
    }

    /**
     * Get the displayInfo property: Display details of the product.
     * 
     * @return the displayInfo value.
     */
    public DisplayInfo displayInfo() {
        return this.displayInfo;
    }

    /**
     * Get the hierarchyInformation property: Hierarchy of the product which uniquely identifies the configuration.
     * 
     * @return the hierarchyInformation value.
     */
    public HierarchyInformation hierarchyInformation() {
        return this.hierarchyInformation;
    }

    /**
     * Get the quantity property: Quantity of the product.
     * 
     * @return the quantity value.
     */
    public Integer quantity() {
        return this.quantity;
    }

    /**
     * Get the identificationType property: Identification type of the configuration.
     * 
     * @return the identificationType value.
     */
    public IdentificationType identificationType() {
        return this.identificationType;
    }

    /**
     * Get the deviceDetails property: List of device details.
     * 
     * @return the deviceDetails value.
     */
    public List<DeviceDetails> deviceDetails() {
        return this.deviceDetails;
    }

    /**
     * Get the termCommitmentInformation property: Term Commitment Information of the Device.
     * 
     * @return the termCommitmentInformation value.
     */
    public TermCommitmentInformation termCommitmentInformation() {
        return this.termCommitmentInformation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayInfo() != null) {
            displayInfo().validate();
        }
        if (hierarchyInformation() != null) {
            hierarchyInformation().validate();
        }
        if (deviceDetails() != null) {
            deviceDetails().forEach(e -> e.validate());
        }
        if (termCommitmentInformation() != null) {
            termCommitmentInformation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("displayInfo", this.displayInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigurationDeviceDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigurationDeviceDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigurationDeviceDetails.
     */
    public static ConfigurationDeviceDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigurationDeviceDetails deserializedConfigurationDeviceDetails = new ConfigurationDeviceDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayInfo".equals(fieldName)) {
                    deserializedConfigurationDeviceDetails.displayInfo = DisplayInfo.fromJson(reader);
                } else if ("hierarchyInformation".equals(fieldName)) {
                    deserializedConfigurationDeviceDetails.hierarchyInformation = HierarchyInformation.fromJson(reader);
                } else if ("quantity".equals(fieldName)) {
                    deserializedConfigurationDeviceDetails.quantity = reader.getNullable(JsonReader::getInt);
                } else if ("identificationType".equals(fieldName)) {
                    deserializedConfigurationDeviceDetails.identificationType
                        = IdentificationType.fromString(reader.getString());
                } else if ("deviceDetails".equals(fieldName)) {
                    List<DeviceDetails> deviceDetails = reader.readArray(reader1 -> DeviceDetails.fromJson(reader1));
                    deserializedConfigurationDeviceDetails.deviceDetails = deviceDetails;
                } else if ("termCommitmentInformation".equals(fieldName)) {
                    deserializedConfigurationDeviceDetails.termCommitmentInformation
                        = TermCommitmentInformation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigurationDeviceDetails;
        });
    }
}
