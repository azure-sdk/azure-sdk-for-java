// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details Related To Provision Resource.
 */
@Fluent
public final class ProvisioningDetails implements JsonSerializable<ProvisioningDetails> {
    /*
     * Quantity of the devices.
     */
    private Integer quantity;

    /*
     * Provisioning Resource Arm ID.
     */
    private String provisioningArmId;

    /*
     * Provisioning End Point.
     */
    private String provisioningEndPoint;

    /*
     * Serial Number for the Device.
     */
    private String serialNumber;

    /*
     * Vendor Name for the Device , (for 1P devices - Microsoft).
     */
    private String vendorName;

    /*
     * Arc Enabled Resource Arm id.
     */
    private String readyToConnectArmId;

    /*
     * Management Resource ArmId.
     */
    private String managementResourceArmId;

    /*
     * Unique Identity for a Device.
     */
    private String uniqueDeviceIdentifier;

    /*
     * Auto Provisioning Details.
     */
    private AutoProvisioningStatus autoProvisioningStatus;

    /*
     * Proof of possession details.
     */
    private DevicePresenceVerificationDetails devicePresenceVerification;

    /**
     * Creates an instance of ProvisioningDetails class.
     */
    public ProvisioningDetails() {
    }

    /**
     * Get the quantity property: Quantity of the devices.
     * 
     * @return the quantity value.
     */
    public Integer quantity() {
        return this.quantity;
    }

    /**
     * Set the quantity property: Quantity of the devices.
     * 
     * @param quantity the quantity value to set.
     * @return the ProvisioningDetails object itself.
     */
    public ProvisioningDetails withQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get the provisioningArmId property: Provisioning Resource Arm ID.
     * 
     * @return the provisioningArmId value.
     */
    public String provisioningArmId() {
        return this.provisioningArmId;
    }

    /**
     * Set the provisioningArmId property: Provisioning Resource Arm ID.
     * 
     * @param provisioningArmId the provisioningArmId value to set.
     * @return the ProvisioningDetails object itself.
     */
    public ProvisioningDetails withProvisioningArmId(String provisioningArmId) {
        this.provisioningArmId = provisioningArmId;
        return this;
    }

    /**
     * Get the provisioningEndPoint property: Provisioning End Point.
     * 
     * @return the provisioningEndPoint value.
     */
    public String provisioningEndPoint() {
        return this.provisioningEndPoint;
    }

    /**
     * Set the provisioningEndPoint property: Provisioning End Point.
     * 
     * @param provisioningEndPoint the provisioningEndPoint value to set.
     * @return the ProvisioningDetails object itself.
     */
    public ProvisioningDetails withProvisioningEndPoint(String provisioningEndPoint) {
        this.provisioningEndPoint = provisioningEndPoint;
        return this;
    }

    /**
     * Get the serialNumber property: Serial Number for the Device.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: Serial Number for the Device.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the ProvisioningDetails object itself.
     */
    public ProvisioningDetails withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Get the vendorName property: Vendor Name for the Device , (for 1P devices - Microsoft).
     * 
     * @return the vendorName value.
     */
    public String vendorName() {
        return this.vendorName;
    }

    /**
     * Set the vendorName property: Vendor Name for the Device , (for 1P devices - Microsoft).
     * 
     * @param vendorName the vendorName value to set.
     * @return the ProvisioningDetails object itself.
     */
    public ProvisioningDetails withVendorName(String vendorName) {
        this.vendorName = vendorName;
        return this;
    }

    /**
     * Get the readyToConnectArmId property: Arc Enabled Resource Arm id.
     * 
     * @return the readyToConnectArmId value.
     */
    public String readyToConnectArmId() {
        return this.readyToConnectArmId;
    }

    /**
     * Set the readyToConnectArmId property: Arc Enabled Resource Arm id.
     * 
     * @param readyToConnectArmId the readyToConnectArmId value to set.
     * @return the ProvisioningDetails object itself.
     */
    public ProvisioningDetails withReadyToConnectArmId(String readyToConnectArmId) {
        this.readyToConnectArmId = readyToConnectArmId;
        return this;
    }

    /**
     * Get the managementResourceArmId property: Management Resource ArmId.
     * 
     * @return the managementResourceArmId value.
     */
    public String managementResourceArmId() {
        return this.managementResourceArmId;
    }

    /**
     * Set the managementResourceArmId property: Management Resource ArmId.
     * 
     * @param managementResourceArmId the managementResourceArmId value to set.
     * @return the ProvisioningDetails object itself.
     */
    public ProvisioningDetails withManagementResourceArmId(String managementResourceArmId) {
        this.managementResourceArmId = managementResourceArmId;
        return this;
    }

    /**
     * Get the uniqueDeviceIdentifier property: Unique Identity for a Device.
     * 
     * @return the uniqueDeviceIdentifier value.
     */
    public String uniqueDeviceIdentifier() {
        return this.uniqueDeviceIdentifier;
    }

    /**
     * Get the autoProvisioningStatus property: Auto Provisioning Details.
     * 
     * @return the autoProvisioningStatus value.
     */
    public AutoProvisioningStatus autoProvisioningStatus() {
        return this.autoProvisioningStatus;
    }

    /**
     * Set the autoProvisioningStatus property: Auto Provisioning Details.
     * 
     * @param autoProvisioningStatus the autoProvisioningStatus value to set.
     * @return the ProvisioningDetails object itself.
     */
    public ProvisioningDetails withAutoProvisioningStatus(AutoProvisioningStatus autoProvisioningStatus) {
        this.autoProvisioningStatus = autoProvisioningStatus;
        return this;
    }

    /**
     * Get the devicePresenceVerification property: Proof of possession details.
     * 
     * @return the devicePresenceVerification value.
     */
    public DevicePresenceVerificationDetails devicePresenceVerification() {
        return this.devicePresenceVerification;
    }

    /**
     * Set the devicePresenceVerification property: Proof of possession details.
     * 
     * @param devicePresenceVerification the devicePresenceVerification value to set.
     * @return the ProvisioningDetails object itself.
     */
    public ProvisioningDetails
        withDevicePresenceVerification(DevicePresenceVerificationDetails devicePresenceVerification) {
        this.devicePresenceVerification = devicePresenceVerification;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (devicePresenceVerification() != null) {
            devicePresenceVerification().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("quantity", this.quantity);
        jsonWriter.writeStringField("provisioningArmId", this.provisioningArmId);
        jsonWriter.writeStringField("provisioningEndPoint", this.provisioningEndPoint);
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeStringField("vendorName", this.vendorName);
        jsonWriter.writeStringField("readyToConnectArmId", this.readyToConnectArmId);
        jsonWriter.writeStringField("managementResourceArmId", this.managementResourceArmId);
        jsonWriter.writeStringField("autoProvisioningStatus",
            this.autoProvisioningStatus == null ? null : this.autoProvisioningStatus.toString());
        jsonWriter.writeJsonField("devicePresenceVerification", this.devicePresenceVerification);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProvisioningDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProvisioningDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProvisioningDetails.
     */
    public static ProvisioningDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProvisioningDetails deserializedProvisioningDetails = new ProvisioningDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("quantity".equals(fieldName)) {
                    deserializedProvisioningDetails.quantity = reader.getNullable(JsonReader::getInt);
                } else if ("provisioningArmId".equals(fieldName)) {
                    deserializedProvisioningDetails.provisioningArmId = reader.getString();
                } else if ("provisioningEndPoint".equals(fieldName)) {
                    deserializedProvisioningDetails.provisioningEndPoint = reader.getString();
                } else if ("serialNumber".equals(fieldName)) {
                    deserializedProvisioningDetails.serialNumber = reader.getString();
                } else if ("vendorName".equals(fieldName)) {
                    deserializedProvisioningDetails.vendorName = reader.getString();
                } else if ("readyToConnectArmId".equals(fieldName)) {
                    deserializedProvisioningDetails.readyToConnectArmId = reader.getString();
                } else if ("managementResourceArmId".equals(fieldName)) {
                    deserializedProvisioningDetails.managementResourceArmId = reader.getString();
                } else if ("uniqueDeviceIdentifier".equals(fieldName)) {
                    deserializedProvisioningDetails.uniqueDeviceIdentifier = reader.getString();
                } else if ("autoProvisioningStatus".equals(fieldName)) {
                    deserializedProvisioningDetails.autoProvisioningStatus
                        = AutoProvisioningStatus.fromString(reader.getString());
                } else if ("devicePresenceVerification".equals(fieldName)) {
                    deserializedProvisioningDetails.devicePresenceVerification
                        = DevicePresenceVerificationDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProvisioningDetails;
        });
    }
}
