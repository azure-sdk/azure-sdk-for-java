// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * Term Commitment preference received from customer.
 */
@Fluent
public final class TermCommitmentPreferences implements JsonSerializable<TermCommitmentPreferences> {
    /*
     * Term Commitment Type
     */
    private TermCommitmentType preferredTermCommitmentType;

    /*
     * Customer preferred Term Duration.
     */
    private Duration preferredTermCommitmentDuration;

    /**
     * Creates an instance of TermCommitmentPreferences class.
     */
    public TermCommitmentPreferences() {
    }

    /**
     * Get the preferredTermCommitmentType property: Term Commitment Type.
     * 
     * @return the preferredTermCommitmentType value.
     */
    public TermCommitmentType preferredTermCommitmentType() {
        return this.preferredTermCommitmentType;
    }

    /**
     * Set the preferredTermCommitmentType property: Term Commitment Type.
     * 
     * @param preferredTermCommitmentType the preferredTermCommitmentType value to set.
     * @return the TermCommitmentPreferences object itself.
     */
    public TermCommitmentPreferences withPreferredTermCommitmentType(TermCommitmentType preferredTermCommitmentType) {
        this.preferredTermCommitmentType = preferredTermCommitmentType;
        return this;
    }

    /**
     * Get the preferredTermCommitmentDuration property: Customer preferred Term Duration.
     * 
     * @return the preferredTermCommitmentDuration value.
     */
    public Duration preferredTermCommitmentDuration() {
        return this.preferredTermCommitmentDuration;
    }

    /**
     * Set the preferredTermCommitmentDuration property: Customer preferred Term Duration.
     * 
     * @param preferredTermCommitmentDuration the preferredTermCommitmentDuration value to set.
     * @return the TermCommitmentPreferences object itself.
     */
    public TermCommitmentPreferences withPreferredTermCommitmentDuration(Duration preferredTermCommitmentDuration) {
        this.preferredTermCommitmentDuration = preferredTermCommitmentDuration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (preferredTermCommitmentType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property preferredTermCommitmentType in model TermCommitmentPreferences"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TermCommitmentPreferences.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("preferredTermCommitmentType",
            this.preferredTermCommitmentType == null ? null : this.preferredTermCommitmentType.toString());
        jsonWriter.writeStringField("preferredTermCommitmentDuration",
            CoreUtils.durationToStringWithDays(this.preferredTermCommitmentDuration));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TermCommitmentPreferences from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TermCommitmentPreferences if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TermCommitmentPreferences.
     */
    public static TermCommitmentPreferences fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TermCommitmentPreferences deserializedTermCommitmentPreferences = new TermCommitmentPreferences();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("preferredTermCommitmentType".equals(fieldName)) {
                    deserializedTermCommitmentPreferences.preferredTermCommitmentType
                        = TermCommitmentType.fromString(reader.getString());
                } else if ("preferredTermCommitmentDuration".equals(fieldName)) {
                    deserializedTermCommitmentPreferences.preferredTermCommitmentDuration
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTermCommitmentPreferences;
        });
    }
}
