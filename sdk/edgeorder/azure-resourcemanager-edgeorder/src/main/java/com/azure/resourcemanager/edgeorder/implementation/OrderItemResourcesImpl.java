// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.edgeorder.fluent.OrderItemResourcesClient;
import com.azure.resourcemanager.edgeorder.fluent.models.OrderItemResourceInner;
import com.azure.resourcemanager.edgeorder.models.CancellationReason;
import com.azure.resourcemanager.edgeorder.models.OrderItemResource;
import com.azure.resourcemanager.edgeorder.models.OrderItemResources;
import com.azure.resourcemanager.edgeorder.models.ReturnOrderItemDetails;

public final class OrderItemResourcesImpl implements OrderItemResources {
    private static final ClientLogger LOGGER = new ClientLogger(OrderItemResourcesImpl.class);

    private final OrderItemResourcesClient innerClient;

    private final com.azure.resourcemanager.edgeorder.EdgeorderManager serviceManager;

    public OrderItemResourcesImpl(OrderItemResourcesClient innerClient,
        com.azure.resourcemanager.edgeorder.EdgeorderManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<OrderItemResource> getByResourceGroupWithResponse(String resourceGroupName, String orderItemName,
        String expand, Context context) {
        Response<OrderItemResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, orderItemName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OrderItemResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OrderItemResource getByResourceGroup(String resourceGroupName, String orderItemName) {
        OrderItemResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, orderItemName);
        if (inner != null) {
            return new OrderItemResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String orderItemName) {
        this.serviceClient().delete(resourceGroupName, orderItemName);
    }

    public void delete(String resourceGroupName, String orderItemName, Context context) {
        this.serviceClient().delete(resourceGroupName, orderItemName, context);
    }

    public PagedIterable<OrderItemResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<OrderItemResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OrderItemResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<OrderItemResource> listByResourceGroup(String resourceGroupName, String filter, String expand,
        String skipToken, Integer top, Context context) {
        PagedIterable<OrderItemResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, filter, expand, skipToken, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OrderItemResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<OrderItemResource> list() {
        PagedIterable<OrderItemResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OrderItemResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<OrderItemResource> list(String filter, String expand, String skipToken, Integer top,
        Context context) {
        PagedIterable<OrderItemResourceInner> inner
            = this.serviceClient().list(filter, expand, skipToken, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OrderItemResourceImpl(inner1, this.manager()));
    }

    public Response<Void> cancelWithResponse(String resourceGroupName, String orderItemName,
        CancellationReason cancellationReason, Context context) {
        return this.serviceClient().cancelWithResponse(resourceGroupName, orderItemName, cancellationReason, context);
    }

    public void cancel(String resourceGroupName, String orderItemName, CancellationReason cancellationReason) {
        this.serviceClient().cancel(resourceGroupName, orderItemName, cancellationReason);
    }

    public void returnOrderItem(String resourceGroupName, String orderItemName,
        ReturnOrderItemDetails returnOrderItemDetails) {
        this.serviceClient().returnOrderItem(resourceGroupName, orderItemName, returnOrderItemDetails);
    }

    public void returnOrderItem(String resourceGroupName, String orderItemName,
        ReturnOrderItemDetails returnOrderItemDetails, Context context) {
        this.serviceClient().returnOrderItem(resourceGroupName, orderItemName, returnOrderItemDetails, context);
    }

    public OrderItemResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String orderItemName = ResourceManagerUtils.getValueFromIdByName(id, "orderItems");
        if (orderItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'orderItems'.", id)));
        }
        String localExpand = null;
        return this.getByResourceGroupWithResponse(resourceGroupName, orderItemName, localExpand, Context.NONE)
            .getValue();
    }

    public Response<OrderItemResource> getByIdWithResponse(String id, String expand, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String orderItemName = ResourceManagerUtils.getValueFromIdByName(id, "orderItems");
        if (orderItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'orderItems'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, orderItemName, expand, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String orderItemName = ResourceManagerUtils.getValueFromIdByName(id, "orderItems");
        if (orderItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'orderItems'.", id)));
        }
        this.delete(resourceGroupName, orderItemName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String orderItemName = ResourceManagerUtils.getValueFromIdByName(id, "orderItems");
        if (orderItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'orderItems'.", id)));
        }
        this.delete(resourceGroupName, orderItemName, context);
    }

    private OrderItemResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.edgeorder.EdgeorderManager manager() {
        return this.serviceManager;
    }

    public OrderItemResourceImpl define(String name) {
        return new OrderItemResourceImpl(name, this.manager());
    }
}
