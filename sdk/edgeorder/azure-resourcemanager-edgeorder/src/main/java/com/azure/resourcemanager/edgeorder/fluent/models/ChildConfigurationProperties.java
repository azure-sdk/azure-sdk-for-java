// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.edgeorder.models.AvailabilityInformation;
import com.azure.resourcemanager.edgeorder.models.ChildConfigurationType;
import com.azure.resourcemanager.edgeorder.models.CostInformation;
import com.azure.resourcemanager.edgeorder.models.Description;
import com.azure.resourcemanager.edgeorder.models.Dimensions;
import com.azure.resourcemanager.edgeorder.models.FilterableProperty;
import com.azure.resourcemanager.edgeorder.models.FulfillmentType;
import com.azure.resourcemanager.edgeorder.models.GroupedChildConfigurations;
import com.azure.resourcemanager.edgeorder.models.HierarchyInformation;
import com.azure.resourcemanager.edgeorder.models.ImageInformation;
import com.azure.resourcemanager.edgeorder.models.ProvisioningSupport;
import com.azure.resourcemanager.edgeorder.models.Specification;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * Properties of child configuration.
 */
@Immutable
public final class ChildConfigurationProperties implements JsonSerializable<ChildConfigurationProperties> {
    /*
     * Child configuration type.
     */
    private ChildConfigurationType childConfigurationType;

    /*
     * Flag to indicate if the child configuration is part of the base configuration, which means the customer need not
     * pass this configuration in OptInAdditionalConfigurations while placing an order, it will be shipped by default.
     */
    private Boolean isPartOfBaseConfiguration;

    /*
     * Minimum quantity a customer can order while choosing this configuration.
     */
    private Integer minimumQuantity;

    /*
     * Maximum quantity a customer can order while choosing this configuration.
     */
    private Integer maximumQuantity;

    /*
     * Specifications of the configuration.
     */
    private List<Specification> specifications;

    /*
     * Dimensions of the configuration.
     */
    private Dimensions dimensions;

    /*
     * Determining nature of provisioning that the configuration supports.
     */
    private ProvisioningSupport provisioningSupport;

    /*
     * Different types of child configurations which exist for this configuration, these can be used to populate the
     * child configuration filter.
     */
    private List<ChildConfigurationType> childConfigurationTypes;

    /*
     * Child configurations present for the configuration after applying child configuration filter, grouped by the
     * category name of the child configuration.
     */
    private List<GroupedChildConfigurations> groupedChildConfigurations;

    /*
     * The Term Commitment Durations that are supported for a configuration.
     */
    private List<Duration> supportedTermCommitmentDurations;

    /*
     * List of filters supported for a product.
     */
    private List<FilterableProperty> filterableProperties;

    /*
     * Display Name for the product system.
     */
    private String displayName;

    /*
     * Description related to the product system.
     */
    private Description description;

    /*
     * Image information for the product system.
     */
    private List<ImageInformation> imageInformation;

    /*
     * Cost information for the product system.
     */
    private CostInformation costInformation;

    /*
     * Availability information of the product system.
     */
    private AvailabilityInformation availabilityInformation;

    /*
     * Hierarchy information of a product.
     */
    private HierarchyInformation hierarchyInformation;

    /*
     * The entity responsible for fulfillment of the item at the given hierarchy level.
     */
    private FulfillmentType fulfilledBy;

    /**
     * Creates an instance of ChildConfigurationProperties class.
     */
    private ChildConfigurationProperties() {
    }

    /**
     * Get the childConfigurationType property: Child configuration type.
     * 
     * @return the childConfigurationType value.
     */
    public ChildConfigurationType childConfigurationType() {
        return this.childConfigurationType;
    }

    /**
     * Get the isPartOfBaseConfiguration property: Flag to indicate if the child configuration is part of the base
     * configuration, which means the customer need not pass this configuration in OptInAdditionalConfigurations while
     * placing an order, it will be shipped by default.
     * 
     * @return the isPartOfBaseConfiguration value.
     */
    public Boolean isPartOfBaseConfiguration() {
        return this.isPartOfBaseConfiguration;
    }

    /**
     * Get the minimumQuantity property: Minimum quantity a customer can order while choosing this configuration.
     * 
     * @return the minimumQuantity value.
     */
    public Integer minimumQuantity() {
        return this.minimumQuantity;
    }

    /**
     * Get the maximumQuantity property: Maximum quantity a customer can order while choosing this configuration.
     * 
     * @return the maximumQuantity value.
     */
    public Integer maximumQuantity() {
        return this.maximumQuantity;
    }

    /**
     * Get the specifications property: Specifications of the configuration.
     * 
     * @return the specifications value.
     */
    public List<Specification> specifications() {
        return this.specifications;
    }

    /**
     * Get the dimensions property: Dimensions of the configuration.
     * 
     * @return the dimensions value.
     */
    public Dimensions dimensions() {
        return this.dimensions;
    }

    /**
     * Get the provisioningSupport property: Determining nature of provisioning that the configuration supports.
     * 
     * @return the provisioningSupport value.
     */
    public ProvisioningSupport provisioningSupport() {
        return this.provisioningSupport;
    }

    /**
     * Get the childConfigurationTypes property: Different types of child configurations which exist for this
     * configuration, these can be used to populate the child configuration filter.
     * 
     * @return the childConfigurationTypes value.
     */
    public List<ChildConfigurationType> childConfigurationTypes() {
        return this.childConfigurationTypes;
    }

    /**
     * Get the groupedChildConfigurations property: Child configurations present for the configuration after applying
     * child configuration filter, grouped by the category name of the child configuration.
     * 
     * @return the groupedChildConfigurations value.
     */
    public List<GroupedChildConfigurations> groupedChildConfigurations() {
        return this.groupedChildConfigurations;
    }

    /**
     * Get the supportedTermCommitmentDurations property: The Term Commitment Durations that are supported for a
     * configuration.
     * 
     * @return the supportedTermCommitmentDurations value.
     */
    public List<Duration> supportedTermCommitmentDurations() {
        return this.supportedTermCommitmentDurations;
    }

    /**
     * Get the filterableProperties property: List of filters supported for a product.
     * 
     * @return the filterableProperties value.
     */
    public List<FilterableProperty> filterableProperties() {
        return this.filterableProperties;
    }

    /**
     * Get the displayName property: Display Name for the product system.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the description property: Description related to the product system.
     * 
     * @return the description value.
     */
    public Description description() {
        return this.description;
    }

    /**
     * Get the imageInformation property: Image information for the product system.
     * 
     * @return the imageInformation value.
     */
    public List<ImageInformation> imageInformation() {
        return this.imageInformation;
    }

    /**
     * Get the costInformation property: Cost information for the product system.
     * 
     * @return the costInformation value.
     */
    public CostInformation costInformation() {
        return this.costInformation;
    }

    /**
     * Get the availabilityInformation property: Availability information of the product system.
     * 
     * @return the availabilityInformation value.
     */
    public AvailabilityInformation availabilityInformation() {
        return this.availabilityInformation;
    }

    /**
     * Get the hierarchyInformation property: Hierarchy information of a product.
     * 
     * @return the hierarchyInformation value.
     */
    public HierarchyInformation hierarchyInformation() {
        return this.hierarchyInformation;
    }

    /**
     * Get the fulfilledBy property: The entity responsible for fulfillment of the item at the given hierarchy level.
     * 
     * @return the fulfilledBy value.
     */
    public FulfillmentType fulfilledBy() {
        return this.fulfilledBy;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (specifications() != null) {
            specifications().forEach(e -> e.validate());
        }
        if (dimensions() != null) {
            dimensions().validate();
        }
        if (groupedChildConfigurations() != null) {
            groupedChildConfigurations().forEach(e -> e.validate());
        }
        if (filterableProperties() != null) {
            filterableProperties().forEach(e -> e.validate());
        }
        if (description() != null) {
            description().validate();
        }
        if (imageInformation() != null) {
            imageInformation().forEach(e -> e.validate());
        }
        if (costInformation() != null) {
            costInformation().validate();
        }
        if (availabilityInformation() != null) {
            availabilityInformation().validate();
        }
        if (hierarchyInformation() != null) {
            hierarchyInformation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChildConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChildConfigurationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ChildConfigurationProperties.
     */
    public static ChildConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChildConfigurationProperties deserializedChildConfigurationProperties = new ChildConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("childConfigurationType".equals(fieldName)) {
                    deserializedChildConfigurationProperties.childConfigurationType
                        = ChildConfigurationType.fromString(reader.getString());
                } else if ("isPartOfBaseConfiguration".equals(fieldName)) {
                    deserializedChildConfigurationProperties.isPartOfBaseConfiguration
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("minimumQuantity".equals(fieldName)) {
                    deserializedChildConfigurationProperties.minimumQuantity = reader.getNullable(JsonReader::getInt);
                } else if ("maximumQuantity".equals(fieldName)) {
                    deserializedChildConfigurationProperties.maximumQuantity = reader.getNullable(JsonReader::getInt);
                } else if ("specifications".equals(fieldName)) {
                    List<Specification> specifications = reader.readArray(reader1 -> Specification.fromJson(reader1));
                    deserializedChildConfigurationProperties.specifications = specifications;
                } else if ("dimensions".equals(fieldName)) {
                    deserializedChildConfigurationProperties.dimensions = Dimensions.fromJson(reader);
                } else if ("provisioningSupport".equals(fieldName)) {
                    deserializedChildConfigurationProperties.provisioningSupport
                        = ProvisioningSupport.fromString(reader.getString());
                } else if ("childConfigurationTypes".equals(fieldName)) {
                    List<ChildConfigurationType> childConfigurationTypes
                        = reader.readArray(reader1 -> ChildConfigurationType.fromString(reader1.getString()));
                    deserializedChildConfigurationProperties.childConfigurationTypes = childConfigurationTypes;
                } else if ("groupedChildConfigurations".equals(fieldName)) {
                    List<GroupedChildConfigurations> groupedChildConfigurations
                        = reader.readArray(reader1 -> GroupedChildConfigurations.fromJson(reader1));
                    deserializedChildConfigurationProperties.groupedChildConfigurations = groupedChildConfigurations;
                } else if ("supportedTermCommitmentDurations".equals(fieldName)) {
                    List<Duration> supportedTermCommitmentDurations = reader.readArray(
                        reader1 -> reader1.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString())));
                    deserializedChildConfigurationProperties.supportedTermCommitmentDurations
                        = supportedTermCommitmentDurations;
                } else if ("filterableProperties".equals(fieldName)) {
                    List<FilterableProperty> filterableProperties
                        = reader.readArray(reader1 -> FilterableProperty.fromJson(reader1));
                    deserializedChildConfigurationProperties.filterableProperties = filterableProperties;
                } else if ("displayName".equals(fieldName)) {
                    deserializedChildConfigurationProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedChildConfigurationProperties.description = Description.fromJson(reader);
                } else if ("imageInformation".equals(fieldName)) {
                    List<ImageInformation> imageInformation
                        = reader.readArray(reader1 -> ImageInformation.fromJson(reader1));
                    deserializedChildConfigurationProperties.imageInformation = imageInformation;
                } else if ("costInformation".equals(fieldName)) {
                    deserializedChildConfigurationProperties.costInformation = CostInformation.fromJson(reader);
                } else if ("availabilityInformation".equals(fieldName)) {
                    deserializedChildConfigurationProperties.availabilityInformation
                        = AvailabilityInformation.fromJson(reader);
                } else if ("hierarchyInformation".equals(fieldName)) {
                    deserializedChildConfigurationProperties.hierarchyInformation
                        = HierarchyInformation.fromJson(reader);
                } else if ("fulfilledBy".equals(fieldName)) {
                    deserializedChildConfigurationProperties.fulfilledBy
                        = FulfillmentType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChildConfigurationProperties;
        });
    }
}
