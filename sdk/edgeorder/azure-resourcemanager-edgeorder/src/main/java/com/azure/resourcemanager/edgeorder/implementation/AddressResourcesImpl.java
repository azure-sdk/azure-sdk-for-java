// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.edgeorder.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.edgeorder.fluent.AddressResourcesClient;
import com.azure.resourcemanager.edgeorder.fluent.models.AddressResourceInner;
import com.azure.resourcemanager.edgeorder.models.AddressResource;
import com.azure.resourcemanager.edgeorder.models.AddressResources;

public final class AddressResourcesImpl implements AddressResources {
    private static final ClientLogger LOGGER = new ClientLogger(AddressResourcesImpl.class);

    private final AddressResourcesClient innerClient;

    private final com.azure.resourcemanager.edgeorder.EdgeorderManager serviceManager;

    public AddressResourcesImpl(AddressResourcesClient innerClient,
        com.azure.resourcemanager.edgeorder.EdgeorderManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AddressResource> getByResourceGroupWithResponse(String resourceGroupName, String addressName,
        Context context) {
        Response<AddressResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, addressName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AddressResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AddressResource getByResourceGroup(String resourceGroupName, String addressName) {
        AddressResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, addressName);
        if (inner != null) {
            return new AddressResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String addressName) {
        this.serviceClient().delete(resourceGroupName, addressName);
    }

    public void delete(String resourceGroupName, String addressName, Context context) {
        this.serviceClient().delete(resourceGroupName, addressName, context);
    }

    public PagedIterable<AddressResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AddressResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AddressResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AddressResource> listByResourceGroup(String resourceGroupName, String filter, String skipToken,
        Integer top, Context context) {
        PagedIterable<AddressResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, filter, skipToken, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AddressResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AddressResource> list() {
        PagedIterable<AddressResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AddressResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AddressResource> list(String filter, String skipToken, Integer top, Context context) {
        PagedIterable<AddressResourceInner> inner = this.serviceClient().list(filter, skipToken, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AddressResourceImpl(inner1, this.manager()));
    }

    public AddressResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String addressName = ResourceManagerUtils.getValueFromIdByName(id, "addresses");
        if (addressName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'addresses'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, addressName, Context.NONE).getValue();
    }

    public Response<AddressResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String addressName = ResourceManagerUtils.getValueFromIdByName(id, "addresses");
        if (addressName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'addresses'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, addressName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String addressName = ResourceManagerUtils.getValueFromIdByName(id, "addresses");
        if (addressName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'addresses'.", id)));
        }
        this.delete(resourceGroupName, addressName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String addressName = ResourceManagerUtils.getValueFromIdByName(id, "addresses");
        if (addressName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'addresses'.", id)));
        }
        this.delete(resourceGroupName, addressName, context);
    }

    private AddressResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.edgeorder.EdgeorderManager manager() {
        return this.serviceManager;
    }

    public AddressResourceImpl define(String name) {
        return new AddressResourceImpl(name, this.manager());
    }
}
