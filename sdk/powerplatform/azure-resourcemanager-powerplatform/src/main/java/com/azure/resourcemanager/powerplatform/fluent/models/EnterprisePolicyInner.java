// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerplatform.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.powerplatform.models.EnterprisePolicyIdentity;
import com.azure.resourcemanager.powerplatform.models.EnterprisePolicyKind;
import com.azure.resourcemanager.powerplatform.models.HealthStatus;
import com.azure.resourcemanager.powerplatform.models.PropertiesEncryption;
import com.azure.resourcemanager.powerplatform.models.PropertiesLockbox;
import com.azure.resourcemanager.powerplatform.models.PropertiesNetworkInjection;
import java.io.IOException;
import java.util.Map;

/**
 * Definition of the EnterprisePolicy.
 */
@Fluent
public final class EnterprisePolicyInner extends Resource {
    /*
     * The identity of the EnterprisePolicy.
     */
    private EnterprisePolicyIdentity identity;

    /*
     * The kind (type) of Enterprise Policy.
     */
    private EnterprisePolicyKind kind;

    /*
     * The properties that define configuration for the enterprise policy
     */
    private Properties innerProperties;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of EnterprisePolicyInner class.
     */
    public EnterprisePolicyInner() {
    }

    /**
     * Get the identity property: The identity of the EnterprisePolicy.
     * 
     * @return the identity value.
     */
    public EnterprisePolicyIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the EnterprisePolicy.
     * 
     * @param identity the identity value to set.
     * @return the EnterprisePolicyInner object itself.
     */
    public EnterprisePolicyInner withIdentity(EnterprisePolicyIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the kind property: The kind (type) of Enterprise Policy.
     * 
     * @return the kind value.
     */
    public EnterprisePolicyKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind (type) of Enterprise Policy.
     * 
     * @param kind the kind value to set.
     * @return the EnterprisePolicyInner object itself.
     */
    public EnterprisePolicyInner withKind(EnterprisePolicyKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the innerProperties property: The properties that define configuration for the enterprise policy.
     * 
     * @return the innerProperties value.
     */
    private Properties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EnterprisePolicyInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EnterprisePolicyInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the systemId property: The internally assigned unique identifier of the resource.
     * 
     * @return the systemId value.
     */
    public String systemId() {
        return this.innerProperties() == null ? null : this.innerProperties().systemId();
    }

    /**
     * Get the lockbox property: Settings concerning lockbox.
     * 
     * @return the lockbox value.
     */
    public PropertiesLockbox lockbox() {
        return this.innerProperties() == null ? null : this.innerProperties().lockbox();
    }

    /**
     * Set the lockbox property: Settings concerning lockbox.
     * 
     * @param lockbox the lockbox value to set.
     * @return the EnterprisePolicyInner object itself.
     */
    public EnterprisePolicyInner withLockbox(PropertiesLockbox lockbox) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Properties();
        }
        this.innerProperties().withLockbox(lockbox);
        return this;
    }

    /**
     * Get the encryption property: The encryption settings for a configuration store.
     * 
     * @return the encryption value.
     */
    public PropertiesEncryption encryption() {
        return this.innerProperties() == null ? null : this.innerProperties().encryption();
    }

    /**
     * Set the encryption property: The encryption settings for a configuration store.
     * 
     * @param encryption the encryption value to set.
     * @return the EnterprisePolicyInner object itself.
     */
    public EnterprisePolicyInner withEncryption(PropertiesEncryption encryption) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Properties();
        }
        this.innerProperties().withEncryption(encryption);
        return this;
    }

    /**
     * Get the networkInjection property: Settings concerning network injection.
     * 
     * @return the networkInjection value.
     */
    public PropertiesNetworkInjection networkInjection() {
        return this.innerProperties() == null ? null : this.innerProperties().networkInjection();
    }

    /**
     * Set the networkInjection property: Settings concerning network injection.
     * 
     * @param networkInjection the networkInjection value to set.
     * @return the EnterprisePolicyInner object itself.
     */
    public EnterprisePolicyInner withNetworkInjection(PropertiesNetworkInjection networkInjection) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Properties();
        }
        this.innerProperties().withNetworkInjection(networkInjection);
        return this;
    }

    /**
     * Get the healthStatus property: The health status of the resource.
     * 
     * @return the healthStatus value.
     */
    public HealthStatus healthStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().healthStatus();
    }

    /**
     * Set the healthStatus property: The health status of the resource.
     * 
     * @param healthStatus the healthStatus value to set.
     * @return the EnterprisePolicyInner object itself.
     */
    public EnterprisePolicyInner withHealthStatus(HealthStatus healthStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Properties();
        }
        this.innerProperties().withHealthStatus(healthStatus);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (kind() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kind in model EnterprisePolicyInner"));
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EnterprisePolicyInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnterprisePolicyInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnterprisePolicyInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EnterprisePolicyInner.
     */
    public static EnterprisePolicyInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnterprisePolicyInner deserializedEnterprisePolicyInner = new EnterprisePolicyInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedEnterprisePolicyInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedEnterprisePolicyInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedEnterprisePolicyInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedEnterprisePolicyInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedEnterprisePolicyInner.withTags(tags);
                } else if ("kind".equals(fieldName)) {
                    deserializedEnterprisePolicyInner.kind = EnterprisePolicyKind.fromString(reader.getString());
                } else if ("identity".equals(fieldName)) {
                    deserializedEnterprisePolicyInner.identity = EnterprisePolicyIdentity.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedEnterprisePolicyInner.innerProperties = Properties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedEnterprisePolicyInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnterprisePolicyInner;
        });
    }
}
