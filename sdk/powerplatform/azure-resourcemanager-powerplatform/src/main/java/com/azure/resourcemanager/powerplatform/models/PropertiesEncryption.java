// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The encryption settings for a configuration store.
 */
@Fluent
public final class PropertiesEncryption implements JsonSerializable<PropertiesEncryption> {
    /*
     * Key vault properties.
     */
    private KeyVaultProperties keyVault;

    /*
     * The state of onboarding, which only appears in the response.
     */
    private State state;

    /**
     * Creates an instance of PropertiesEncryption class.
     */
    public PropertiesEncryption() {
    }

    /**
     * Get the keyVault property: Key vault properties.
     * 
     * @return the keyVault value.
     */
    public KeyVaultProperties keyVault() {
        return this.keyVault;
    }

    /**
     * Set the keyVault property: Key vault properties.
     * 
     * @param keyVault the keyVault value to set.
     * @return the PropertiesEncryption object itself.
     */
    public PropertiesEncryption withKeyVault(KeyVaultProperties keyVault) {
        this.keyVault = keyVault;
        return this;
    }

    /**
     * Get the state property: The state of onboarding, which only appears in the response.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: The state of onboarding, which only appears in the response.
     * 
     * @param state the state value to set.
     * @return the PropertiesEncryption object itself.
     */
    public PropertiesEncryption withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyVault() != null) {
            keyVault().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("keyVault", this.keyVault);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PropertiesEncryption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PropertiesEncryption if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PropertiesEncryption.
     */
    public static PropertiesEncryption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PropertiesEncryption deserializedPropertiesEncryption = new PropertiesEncryption();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVault".equals(fieldName)) {
                    deserializedPropertiesEncryption.keyVault = KeyVaultProperties.fromJson(reader);
                } else if ("state".equals(fieldName)) {
                    deserializedPropertiesEncryption.state = State.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPropertiesEncryption;
        });
    }
}
