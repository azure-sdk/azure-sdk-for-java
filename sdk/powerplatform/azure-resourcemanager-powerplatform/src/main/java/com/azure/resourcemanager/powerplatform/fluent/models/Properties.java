// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerplatform.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.powerplatform.models.HealthStatus;
import com.azure.resourcemanager.powerplatform.models.PropertiesEncryption;
import com.azure.resourcemanager.powerplatform.models.PropertiesLockbox;
import com.azure.resourcemanager.powerplatform.models.PropertiesNetworkInjection;
import java.io.IOException;

/**
 * The properties that define configuration for the enterprise policy.
 */
@Fluent
public final class Properties implements JsonSerializable<Properties> {
    /*
     * The internally assigned unique identifier of the resource.
     */
    private String systemId;

    /*
     * Settings concerning lockbox.
     */
    private PropertiesLockbox lockbox;

    /*
     * The encryption settings for a configuration store.
     */
    private PropertiesEncryption encryption;

    /*
     * Settings concerning network injection.
     */
    private PropertiesNetworkInjection networkInjection;

    /*
     * The health status of the resource.
     */
    private HealthStatus healthStatus;

    /**
     * Creates an instance of Properties class.
     */
    public Properties() {
    }

    /**
     * Get the systemId property: The internally assigned unique identifier of the resource.
     * 
     * @return the systemId value.
     */
    public String systemId() {
        return this.systemId;
    }

    /**
     * Get the lockbox property: Settings concerning lockbox.
     * 
     * @return the lockbox value.
     */
    public PropertiesLockbox lockbox() {
        return this.lockbox;
    }

    /**
     * Set the lockbox property: Settings concerning lockbox.
     * 
     * @param lockbox the lockbox value to set.
     * @return the Properties object itself.
     */
    public Properties withLockbox(PropertiesLockbox lockbox) {
        this.lockbox = lockbox;
        return this;
    }

    /**
     * Get the encryption property: The encryption settings for a configuration store.
     * 
     * @return the encryption value.
     */
    public PropertiesEncryption encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The encryption settings for a configuration store.
     * 
     * @param encryption the encryption value to set.
     * @return the Properties object itself.
     */
    public Properties withEncryption(PropertiesEncryption encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the networkInjection property: Settings concerning network injection.
     * 
     * @return the networkInjection value.
     */
    public PropertiesNetworkInjection networkInjection() {
        return this.networkInjection;
    }

    /**
     * Set the networkInjection property: Settings concerning network injection.
     * 
     * @param networkInjection the networkInjection value to set.
     * @return the Properties object itself.
     */
    public Properties withNetworkInjection(PropertiesNetworkInjection networkInjection) {
        this.networkInjection = networkInjection;
        return this;
    }

    /**
     * Get the healthStatus property: The health status of the resource.
     * 
     * @return the healthStatus value.
     */
    public HealthStatus healthStatus() {
        return this.healthStatus;
    }

    /**
     * Set the healthStatus property: The health status of the resource.
     * 
     * @param healthStatus the healthStatus value to set.
     * @return the Properties object itself.
     */
    public Properties withHealthStatus(HealthStatus healthStatus) {
        this.healthStatus = healthStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lockbox() != null) {
            lockbox().validate();
        }
        if (encryption() != null) {
            encryption().validate();
        }
        if (networkInjection() != null) {
            networkInjection().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("lockbox", this.lockbox);
        jsonWriter.writeJsonField("encryption", this.encryption);
        jsonWriter.writeJsonField("networkInjection", this.networkInjection);
        jsonWriter.writeStringField("healthStatus", this.healthStatus == null ? null : this.healthStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Properties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Properties if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Properties.
     */
    public static Properties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Properties deserializedProperties = new Properties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("systemId".equals(fieldName)) {
                    deserializedProperties.systemId = reader.getString();
                } else if ("lockbox".equals(fieldName)) {
                    deserializedProperties.lockbox = PropertiesLockbox.fromJson(reader);
                } else if ("encryption".equals(fieldName)) {
                    deserializedProperties.encryption = PropertiesEncryption.fromJson(reader);
                } else if ("networkInjection".equals(fieldName)) {
                    deserializedProperties.networkInjection = PropertiesNetworkInjection.fromJson(reader);
                } else if ("healthStatus".equals(fieldName)) {
                    deserializedProperties.healthStatus = HealthStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProperties;
        });
    }
}
