// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelargeinstance.generated;

import com.azure.resourcemanager.azurelargeinstance.models.ProvisioningState;
import com.azure.resourcemanager.azurelargeinstance.models.StorageBillingProperties;
import com.azure.resourcemanager.azurelargeinstance.models.StorageProperties;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for AzureLargeStorageInstances Create.
 */
public final class AzureLargeStorageInstancesCreateSamples {
    /*
     * x-ms-original-file:
     * specification/azurelargeinstance/resource-manager/Microsoft.AzureLargeInstance/preview/2024-01-10-preview/
     * examples/AzureLargeStorageInstance_Create.json
     */
    /**
     * Sample code: Put a new AzureLargeStorageInstance.
     * 
     * @param manager Entry point to AzureLargeInstanceManager.
     */
    public static void putANewAzureLargeStorageInstance(
        com.azure.resourcemanager.azurelargeinstance.AzureLargeInstanceManager manager) {
        manager.azureLargeStorageInstances().define("myAzureLargeStorageInstance").withRegion("westus2")
            .withExistingResourceGroup("myResourceGroup").withTags(mapOf("key", "fakeTokenPlaceholder"))
            .withAzureLargeStorageInstanceUniqueIdentifier("23415635-4d7e-41dc-9598-8194f22c24e9")
            .withStorageProperties(
                new StorageProperties().withProvisioningState(ProvisioningState.SUCCEEDED).withOfferingType("EPIC")
                    .withStorageType("FC").withGeneration("Gen4").withHardwareType("NetApp").withWorkloadType("ODB")
                    .withStorageBillingProperties(new StorageBillingProperties().withBillingMode("PAYG").withSku("")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
