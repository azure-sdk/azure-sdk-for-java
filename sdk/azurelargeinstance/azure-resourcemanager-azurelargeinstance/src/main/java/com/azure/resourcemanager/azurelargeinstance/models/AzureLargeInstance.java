// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelargeinstance.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurelargeinstance.fluent.models.AzureLargeInstanceInner;
import java.util.Map;

/**
 * An immutable client-side representation of AzureLargeInstance.
 */
public interface AzureLargeInstance {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the hardwareProfile property: Specifies the hardware settings for the Azure Large Instance.
     * 
     * @return the hardwareProfile value.
     */
    HardwareProfile hardwareProfile();

    /**
     * Gets the storageProfile property: Specifies the storage settings for the Azure Large Instance disks.
     * 
     * @return the storageProfile value.
     */
    StorageProfile storageProfile();

    /**
     * Gets the osProfile property: Specifies the operating system settings for the Azure Large Instance.
     * 
     * @return the osProfile value.
     */
    OSProfile osProfile();

    /**
     * Gets the networkProfile property: Specifies the network settings for the Azure Large Instance.
     * 
     * @return the networkProfile value.
     */
    NetworkProfile networkProfile();

    /**
     * Gets the azureLargeInstanceId property: Specifies the Azure Large Instance unique ID.
     * 
     * @return the azureLargeInstanceId value.
     */
    String azureLargeInstanceId();

    /**
     * Gets the powerState property: Resource power state.
     * 
     * @return the powerState value.
     */
    AzureLargeInstancePowerStateEnum powerState();

    /**
     * Gets the proximityPlacementGroup property: Resource proximity placement group.
     * 
     * @return the proximityPlacementGroup value.
     */
    String proximityPlacementGroup();

    /**
     * Gets the hwRevision property: Hardware revision of an Azure Large Instance.
     * 
     * @return the hwRevision value.
     */
    String hwRevision();

    /**
     * Gets the partnerNodeId property: ARM ID of another AzureLargeInstance that will share a network with this
     * AzureLargeInstance.
     * 
     * @return the partnerNodeId value.
     */
    String partnerNodeId();

    /**
     * Gets the provisioningState property: State of provisioning of the AzureLargeInstance.
     * 
     * @return the provisioningState value.
     */
    AzureLargeInstanceProvisioningStatesEnum provisioningState();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.azurelargeinstance.fluent.models.AzureLargeInstanceInner object.
     * 
     * @return the inner object.
     */
    AzureLargeInstanceInner innerModel();

    /**
     * The entirety of the AzureLargeInstance definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The AzureLargeInstance definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the AzureLargeInstance definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the AzureLargeInstance definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the AzureLargeInstance definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the AzureLargeInstance definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithHardwareProfile,
            DefinitionStages.WithStorageProfile, DefinitionStages.WithOsProfile, DefinitionStages.WithNetworkProfile,
            DefinitionStages.WithPartnerNodeId {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            AzureLargeInstance create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            AzureLargeInstance create(Context context);
        }

        /**
         * The stage of the AzureLargeInstance definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the AzureLargeInstance definition allowing to specify hardwareProfile.
         */
        interface WithHardwareProfile {
            /**
             * Specifies the hardwareProfile property: Specifies the hardware settings for the Azure Large Instance..
             * 
             * @param hardwareProfile Specifies the hardware settings for the Azure Large Instance.
             * @return the next definition stage.
             */
            WithCreate withHardwareProfile(HardwareProfile hardwareProfile);
        }

        /**
         * The stage of the AzureLargeInstance definition allowing to specify storageProfile.
         */
        interface WithStorageProfile {
            /**
             * Specifies the storageProfile property: Specifies the storage settings for the Azure Large Instance
             * disks..
             * 
             * @param storageProfile Specifies the storage settings for the Azure Large Instance disks.
             * @return the next definition stage.
             */
            WithCreate withStorageProfile(StorageProfile storageProfile);
        }

        /**
         * The stage of the AzureLargeInstance definition allowing to specify osProfile.
         */
        interface WithOsProfile {
            /**
             * Specifies the osProfile property: Specifies the operating system settings for the Azure Large Instance..
             * 
             * @param osProfile Specifies the operating system settings for the Azure Large Instance.
             * @return the next definition stage.
             */
            WithCreate withOsProfile(OSProfile osProfile);
        }

        /**
         * The stage of the AzureLargeInstance definition allowing to specify networkProfile.
         */
        interface WithNetworkProfile {
            /**
             * Specifies the networkProfile property: Specifies the network settings for the Azure Large Instance..
             * 
             * @param networkProfile Specifies the network settings for the Azure Large Instance.
             * @return the next definition stage.
             */
            WithCreate withNetworkProfile(NetworkProfile networkProfile);
        }

        /**
         * The stage of the AzureLargeInstance definition allowing to specify partnerNodeId.
         */
        interface WithPartnerNodeId {
            /**
             * Specifies the partnerNodeId property: ARM ID of another AzureLargeInstance that will share a network with
             * this AzureLargeInstance.
             * 
             * @param partnerNodeId ARM ID of another AzureLargeInstance that will share a network with this
             * AzureLargeInstance.
             * @return the next definition stage.
             */
            WithCreate withPartnerNodeId(String partnerNodeId);
        }
    }

    /**
     * Begins update for the AzureLargeInstance resource.
     * 
     * @return the stage of resource update.
     */
    AzureLargeInstance.Update update();

    /**
     * The template for AzureLargeInstance update.
     */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        AzureLargeInstance apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        AzureLargeInstance apply(Context context);
    }

    /**
     * The AzureLargeInstance update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the AzureLargeInstance update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Tags field of the AzureLargeInstance instance..
             * 
             * @param tags Tags field of the AzureLargeInstance instance.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    AzureLargeInstance refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    AzureLargeInstance refresh(Context context);

    /**
     * Start an Azure Large Instance.
     * 
     * The operation to start an Azure Large Instance (only for compute instances).
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult start();

    /**
     * Start an Azure Large Instance.
     * 
     * The operation to start an Azure Large Instance (only for compute instances).
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult start(Context context);

    /**
     * Restart an Azure Large Instance.
     * 
     * The operation to restart an Azure Large Instance (only for compute instances).
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult restart();

    /**
     * Restart an Azure Large Instance.
     * 
     * The operation to restart an Azure Large Instance (only for compute instances).
     * 
     * @param forceParameter When set to 'active', this parameter empowers the server with the ability to forcefully
     * terminate and halt any existing processes that may be running on the server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult restart(ForceState forceParameter, Context context);

    /**
     * Shutdown an Azure Large Instance.
     * 
     * The operation to shutdown an Azure Large Instance (only for compute instances).
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult shutdown();

    /**
     * Shutdown an Azure Large Instance.
     * 
     * The operation to shutdown an Azure Large Instance (only for compute instances).
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult shutdown(Context context);
}
