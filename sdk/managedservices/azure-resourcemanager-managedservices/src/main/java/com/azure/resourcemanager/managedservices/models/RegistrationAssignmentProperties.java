// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of the registration assignment.
 */
@Fluent
public final class RegistrationAssignmentProperties implements JsonSerializable<RegistrationAssignmentProperties> {
    /*
     * The fully qualified path of the registration definition.
     */
    private String registrationDefinitionId;

    /*
     * The current provisioning state of the registration assignment.
     */
    private ProvisioningState provisioningState;

    /*
     * The registration definition associated with the registration assignment.
     */
    private RegistrationAssignmentPropertiesRegistrationDefinition registrationDefinition;

    /**
     * Creates an instance of RegistrationAssignmentProperties class.
     */
    public RegistrationAssignmentProperties() {
    }

    /**
     * Get the registrationDefinitionId property: The fully qualified path of the registration definition.
     * 
     * @return the registrationDefinitionId value.
     */
    public String registrationDefinitionId() {
        return this.registrationDefinitionId;
    }

    /**
     * Set the registrationDefinitionId property: The fully qualified path of the registration definition.
     * 
     * @param registrationDefinitionId the registrationDefinitionId value to set.
     * @return the RegistrationAssignmentProperties object itself.
     */
    public RegistrationAssignmentProperties withRegistrationDefinitionId(String registrationDefinitionId) {
        this.registrationDefinitionId = registrationDefinitionId;
        return this;
    }

    /**
     * Get the provisioningState property: The current provisioning state of the registration assignment.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the registrationDefinition property: The registration definition associated with the registration assignment.
     * 
     * @return the registrationDefinition value.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinition registrationDefinition() {
        return this.registrationDefinition;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (registrationDefinitionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property registrationDefinitionId in model RegistrationAssignmentProperties"));
        }
        if (registrationDefinition() != null) {
            registrationDefinition().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RegistrationAssignmentProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("registrationDefinitionId", this.registrationDefinitionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistrationAssignmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistrationAssignmentProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RegistrationAssignmentProperties.
     */
    public static RegistrationAssignmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistrationAssignmentProperties deserializedRegistrationAssignmentProperties
                = new RegistrationAssignmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("registrationDefinitionId".equals(fieldName)) {
                    deserializedRegistrationAssignmentProperties.registrationDefinitionId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRegistrationAssignmentProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("registrationDefinition".equals(fieldName)) {
                    deserializedRegistrationAssignmentProperties.registrationDefinition
                        = RegistrationAssignmentPropertiesRegistrationDefinition.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistrationAssignmentProperties;
        });
    }
}
