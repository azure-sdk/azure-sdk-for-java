// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of the registration definition associated with the registration assignment.
 */
@Fluent
public final class RegistrationAssignmentPropertiesRegistrationDefinitionProperties
    implements JsonSerializable<RegistrationAssignmentPropertiesRegistrationDefinitionProperties> {
    /*
     * The description of the registration definition.
     */
    private String description;

    /*
     * The collection of authorization objects describing the access Azure Active Directory principals in the managedBy
     * tenant will receive on the delegated resource in the managed tenant.
     */
    private List<Authorization> authorizations;

    /*
     * The collection of eligible authorization objects describing the just-in-time access Azure Active Directory
     * principals in the managedBy tenant will receive on the delegated resource in the managed tenant.
     */
    private List<EligibleAuthorization> eligibleAuthorizations;

    /*
     * The name of the registration definition.
     */
    private String registrationDefinitionName;

    /*
     * The current provisioning state of the registration definition.
     */
    private ProvisioningState provisioningState;

    /*
     * The identifier of the managed tenant.
     */
    private String manageeTenantId;

    /*
     * The name of the managed tenant.
     */
    private String manageeTenantName;

    /*
     * The identifier of the managedBy tenant.
     */
    private String managedByTenantId;

    /*
     * The name of the managedBy tenant.
     */
    private String managedByTenantName;

    /**
     * Creates an instance of RegistrationAssignmentPropertiesRegistrationDefinitionProperties class.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinitionProperties() {
    }

    /**
     * Get the description property: The description of the registration definition.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the registration definition.
     * 
     * @param description the description value to set.
     * @return the RegistrationAssignmentPropertiesRegistrationDefinitionProperties object itself.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinitionProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the authorizations property: The collection of authorization objects describing the access Azure Active
     * Directory principals in the managedBy tenant will receive on the delegated resource in the managed tenant.
     * 
     * @return the authorizations value.
     */
    public List<Authorization> authorizations() {
        return this.authorizations;
    }

    /**
     * Set the authorizations property: The collection of authorization objects describing the access Azure Active
     * Directory principals in the managedBy tenant will receive on the delegated resource in the managed tenant.
     * 
     * @param authorizations the authorizations value to set.
     * @return the RegistrationAssignmentPropertiesRegistrationDefinitionProperties object itself.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinitionProperties
        withAuthorizations(List<Authorization> authorizations) {
        this.authorizations = authorizations;
        return this;
    }

    /**
     * Get the eligibleAuthorizations property: The collection of eligible authorization objects describing the
     * just-in-time access Azure Active Directory principals in the managedBy tenant will receive on the delegated
     * resource in the managed tenant.
     * 
     * @return the eligibleAuthorizations value.
     */
    public List<EligibleAuthorization> eligibleAuthorizations() {
        return this.eligibleAuthorizations;
    }

    /**
     * Set the eligibleAuthorizations property: The collection of eligible authorization objects describing the
     * just-in-time access Azure Active Directory principals in the managedBy tenant will receive on the delegated
     * resource in the managed tenant.
     * 
     * @param eligibleAuthorizations the eligibleAuthorizations value to set.
     * @return the RegistrationAssignmentPropertiesRegistrationDefinitionProperties object itself.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinitionProperties
        withEligibleAuthorizations(List<EligibleAuthorization> eligibleAuthorizations) {
        this.eligibleAuthorizations = eligibleAuthorizations;
        return this;
    }

    /**
     * Get the registrationDefinitionName property: The name of the registration definition.
     * 
     * @return the registrationDefinitionName value.
     */
    public String registrationDefinitionName() {
        return this.registrationDefinitionName;
    }

    /**
     * Set the registrationDefinitionName property: The name of the registration definition.
     * 
     * @param registrationDefinitionName the registrationDefinitionName value to set.
     * @return the RegistrationAssignmentPropertiesRegistrationDefinitionProperties object itself.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinitionProperties
        withRegistrationDefinitionName(String registrationDefinitionName) {
        this.registrationDefinitionName = registrationDefinitionName;
        return this;
    }

    /**
     * Get the provisioningState property: The current provisioning state of the registration definition.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The current provisioning state of the registration definition.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the RegistrationAssignmentPropertiesRegistrationDefinitionProperties object itself.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinitionProperties
        withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the manageeTenantId property: The identifier of the managed tenant.
     * 
     * @return the manageeTenantId value.
     */
    public String manageeTenantId() {
        return this.manageeTenantId;
    }

    /**
     * Set the manageeTenantId property: The identifier of the managed tenant.
     * 
     * @param manageeTenantId the manageeTenantId value to set.
     * @return the RegistrationAssignmentPropertiesRegistrationDefinitionProperties object itself.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinitionProperties
        withManageeTenantId(String manageeTenantId) {
        this.manageeTenantId = manageeTenantId;
        return this;
    }

    /**
     * Get the manageeTenantName property: The name of the managed tenant.
     * 
     * @return the manageeTenantName value.
     */
    public String manageeTenantName() {
        return this.manageeTenantName;
    }

    /**
     * Set the manageeTenantName property: The name of the managed tenant.
     * 
     * @param manageeTenantName the manageeTenantName value to set.
     * @return the RegistrationAssignmentPropertiesRegistrationDefinitionProperties object itself.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinitionProperties
        withManageeTenantName(String manageeTenantName) {
        this.manageeTenantName = manageeTenantName;
        return this;
    }

    /**
     * Get the managedByTenantId property: The identifier of the managedBy tenant.
     * 
     * @return the managedByTenantId value.
     */
    public String managedByTenantId() {
        return this.managedByTenantId;
    }

    /**
     * Set the managedByTenantId property: The identifier of the managedBy tenant.
     * 
     * @param managedByTenantId the managedByTenantId value to set.
     * @return the RegistrationAssignmentPropertiesRegistrationDefinitionProperties object itself.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinitionProperties
        withManagedByTenantId(String managedByTenantId) {
        this.managedByTenantId = managedByTenantId;
        return this;
    }

    /**
     * Get the managedByTenantName property: The name of the managedBy tenant.
     * 
     * @return the managedByTenantName value.
     */
    public String managedByTenantName() {
        return this.managedByTenantName;
    }

    /**
     * Set the managedByTenantName property: The name of the managedBy tenant.
     * 
     * @param managedByTenantName the managedByTenantName value to set.
     * @return the RegistrationAssignmentPropertiesRegistrationDefinitionProperties object itself.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinitionProperties
        withManagedByTenantName(String managedByTenantName) {
        this.managedByTenantName = managedByTenantName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authorizations() != null) {
            authorizations().forEach(e -> e.validate());
        }
        if (eligibleAuthorizations() != null) {
            eligibleAuthorizations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("authorizations", this.authorizations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("eligibleAuthorizations", this.eligibleAuthorizations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("registrationDefinitionName", this.registrationDefinitionName);
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeStringField("manageeTenantId", this.manageeTenantId);
        jsonWriter.writeStringField("manageeTenantName", this.manageeTenantName);
        jsonWriter.writeStringField("managedByTenantId", this.managedByTenantId);
        jsonWriter.writeStringField("managedByTenantName", this.managedByTenantName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistrationAssignmentPropertiesRegistrationDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistrationAssignmentPropertiesRegistrationDefinitionProperties if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
     */
    public static RegistrationAssignmentPropertiesRegistrationDefinitionProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            RegistrationAssignmentPropertiesRegistrationDefinitionProperties deserializedRegistrationAssignmentPropertiesRegistrationDefinitionProperties
                = new RegistrationAssignmentPropertiesRegistrationDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedRegistrationAssignmentPropertiesRegistrationDefinitionProperties.description
                        = reader.getString();
                } else if ("authorizations".equals(fieldName)) {
                    List<Authorization> authorizations = reader.readArray(reader1 -> Authorization.fromJson(reader1));
                    deserializedRegistrationAssignmentPropertiesRegistrationDefinitionProperties.authorizations
                        = authorizations;
                } else if ("eligibleAuthorizations".equals(fieldName)) {
                    List<EligibleAuthorization> eligibleAuthorizations
                        = reader.readArray(reader1 -> EligibleAuthorization.fromJson(reader1));
                    deserializedRegistrationAssignmentPropertiesRegistrationDefinitionProperties.eligibleAuthorizations
                        = eligibleAuthorizations;
                } else if ("registrationDefinitionName".equals(fieldName)) {
                    deserializedRegistrationAssignmentPropertiesRegistrationDefinitionProperties.registrationDefinitionName
                        = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRegistrationAssignmentPropertiesRegistrationDefinitionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("manageeTenantId".equals(fieldName)) {
                    deserializedRegistrationAssignmentPropertiesRegistrationDefinitionProperties.manageeTenantId
                        = reader.getString();
                } else if ("manageeTenantName".equals(fieldName)) {
                    deserializedRegistrationAssignmentPropertiesRegistrationDefinitionProperties.manageeTenantName
                        = reader.getString();
                } else if ("managedByTenantId".equals(fieldName)) {
                    deserializedRegistrationAssignmentPropertiesRegistrationDefinitionProperties.managedByTenantId
                        = reader.getString();
                } else if ("managedByTenantName".equals(fieldName)) {
                    deserializedRegistrationAssignmentPropertiesRegistrationDefinitionProperties.managedByTenantName
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistrationAssignmentPropertiesRegistrationDefinitionProperties;
        });
    }
}
