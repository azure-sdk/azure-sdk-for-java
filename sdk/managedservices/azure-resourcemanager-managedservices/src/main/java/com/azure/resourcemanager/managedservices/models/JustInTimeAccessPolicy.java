// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * Just-in-time access policy setting.
 */
@Fluent
public final class JustInTimeAccessPolicy implements JsonSerializable<JustInTimeAccessPolicy> {
    /*
     * The multi-factor authorization provider to be used for just-in-time access requests.
     */
    private MultiFactorAuthProvider multiFactorAuthProvider;

    /*
     * The maximum access duration in ISO 8601 format for just-in-time access requests.
     */
    private Duration maximumActivationDuration;

    /*
     * The list of managedByTenant approvers for the eligible authorization.
     */
    private List<EligibleApprover> managedByTenantApprovers;

    /**
     * Creates an instance of JustInTimeAccessPolicy class.
     */
    public JustInTimeAccessPolicy() {
    }

    /**
     * Get the multiFactorAuthProvider property: The multi-factor authorization provider to be used for just-in-time
     * access requests.
     * 
     * @return the multiFactorAuthProvider value.
     */
    public MultiFactorAuthProvider multiFactorAuthProvider() {
        return this.multiFactorAuthProvider;
    }

    /**
     * Set the multiFactorAuthProvider property: The multi-factor authorization provider to be used for just-in-time
     * access requests.
     * 
     * @param multiFactorAuthProvider the multiFactorAuthProvider value to set.
     * @return the JustInTimeAccessPolicy object itself.
     */
    public JustInTimeAccessPolicy withMultiFactorAuthProvider(MultiFactorAuthProvider multiFactorAuthProvider) {
        this.multiFactorAuthProvider = multiFactorAuthProvider;
        return this;
    }

    /**
     * Get the maximumActivationDuration property: The maximum access duration in ISO 8601 format for just-in-time
     * access requests.
     * 
     * @return the maximumActivationDuration value.
     */
    public Duration maximumActivationDuration() {
        return this.maximumActivationDuration;
    }

    /**
     * Set the maximumActivationDuration property: The maximum access duration in ISO 8601 format for just-in-time
     * access requests.
     * 
     * @param maximumActivationDuration the maximumActivationDuration value to set.
     * @return the JustInTimeAccessPolicy object itself.
     */
    public JustInTimeAccessPolicy withMaximumActivationDuration(Duration maximumActivationDuration) {
        this.maximumActivationDuration = maximumActivationDuration;
        return this;
    }

    /**
     * Get the managedByTenantApprovers property: The list of managedByTenant approvers for the eligible authorization.
     * 
     * @return the managedByTenantApprovers value.
     */
    public List<EligibleApprover> managedByTenantApprovers() {
        return this.managedByTenantApprovers;
    }

    /**
     * Set the managedByTenantApprovers property: The list of managedByTenant approvers for the eligible authorization.
     * 
     * @param managedByTenantApprovers the managedByTenantApprovers value to set.
     * @return the JustInTimeAccessPolicy object itself.
     */
    public JustInTimeAccessPolicy withManagedByTenantApprovers(List<EligibleApprover> managedByTenantApprovers) {
        this.managedByTenantApprovers = managedByTenantApprovers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (multiFactorAuthProvider() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property multiFactorAuthProvider in model JustInTimeAccessPolicy"));
        }
        if (managedByTenantApprovers() != null) {
            managedByTenantApprovers().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JustInTimeAccessPolicy.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("multiFactorAuthProvider",
            this.multiFactorAuthProvider == null ? null : this.multiFactorAuthProvider.toString());
        jsonWriter.writeStringField("maximumActivationDuration",
            CoreUtils.durationToStringWithDays(this.maximumActivationDuration));
        jsonWriter.writeArrayField("managedByTenantApprovers", this.managedByTenantApprovers,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JustInTimeAccessPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JustInTimeAccessPolicy if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JustInTimeAccessPolicy.
     */
    public static JustInTimeAccessPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JustInTimeAccessPolicy deserializedJustInTimeAccessPolicy = new JustInTimeAccessPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("multiFactorAuthProvider".equals(fieldName)) {
                    deserializedJustInTimeAccessPolicy.multiFactorAuthProvider
                        = MultiFactorAuthProvider.fromString(reader.getString());
                } else if ("maximumActivationDuration".equals(fieldName)) {
                    deserializedJustInTimeAccessPolicy.maximumActivationDuration
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("managedByTenantApprovers".equals(fieldName)) {
                    List<EligibleApprover> managedByTenantApprovers
                        = reader.readArray(reader1 -> EligibleApprover.fromJson(reader1));
                    deserializedJustInTimeAccessPolicy.managedByTenantApprovers = managedByTenantApprovers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJustInTimeAccessPolicy;
        });
    }
}
