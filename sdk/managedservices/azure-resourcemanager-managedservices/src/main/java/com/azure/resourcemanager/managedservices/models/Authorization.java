// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * The Azure Active Directory principal identifier and Azure built-in role that describes the access the principal will
 * receive on the delegated resource in the managed tenant.
 */
@Fluent
public final class Authorization implements JsonSerializable<Authorization> {
    /*
     * The identifier of the Azure Active Directory principal.
     */
    private String principalId;

    /*
     * The display name of the Azure Active Directory principal.
     */
    private String principalIdDisplayName;

    /*
     * The identifier of the Azure built-in role that defines the permissions that the Azure Active Directory principal
     * will have on the projected scope.
     */
    private String roleDefinitionId;

    /*
     * The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access
     * Administrator Role. It is the list of role definition ids which define all the permissions that the user in the
     * authorization can assign to other principals.
     */
    private List<UUID> delegatedRoleDefinitionIds;

    /**
     * Creates an instance of Authorization class.
     */
    public Authorization() {
    }

    /**
     * Get the principalId property: The identifier of the Azure Active Directory principal.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: The identifier of the Azure Active Directory principal.
     * 
     * @param principalId the principalId value to set.
     * @return the Authorization object itself.
     */
    public Authorization withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the principalIdDisplayName property: The display name of the Azure Active Directory principal.
     * 
     * @return the principalIdDisplayName value.
     */
    public String principalIdDisplayName() {
        return this.principalIdDisplayName;
    }

    /**
     * Set the principalIdDisplayName property: The display name of the Azure Active Directory principal.
     * 
     * @param principalIdDisplayName the principalIdDisplayName value to set.
     * @return the Authorization object itself.
     */
    public Authorization withPrincipalIdDisplayName(String principalIdDisplayName) {
        this.principalIdDisplayName = principalIdDisplayName;
        return this;
    }

    /**
     * Get the roleDefinitionId property: The identifier of the Azure built-in role that defines the permissions that
     * the Azure Active Directory principal will have on the projected scope.
     * 
     * @return the roleDefinitionId value.
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * Set the roleDefinitionId property: The identifier of the Azure built-in role that defines the permissions that
     * the Azure Active Directory principal will have on the projected scope.
     * 
     * @param roleDefinitionId the roleDefinitionId value to set.
     * @return the Authorization object itself.
     */
    public Authorization withRoleDefinitionId(String roleDefinitionId) {
        this.roleDefinitionId = roleDefinitionId;
        return this;
    }

    /**
     * Get the delegatedRoleDefinitionIds property: The delegatedRoleDefinitionIds field is required when the
     * roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define
     * all the permissions that the user in the authorization can assign to other principals.
     * 
     * @return the delegatedRoleDefinitionIds value.
     */
    public List<UUID> delegatedRoleDefinitionIds() {
        return this.delegatedRoleDefinitionIds;
    }

    /**
     * Set the delegatedRoleDefinitionIds property: The delegatedRoleDefinitionIds field is required when the
     * roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define
     * all the permissions that the user in the authorization can assign to other principals.
     * 
     * @param delegatedRoleDefinitionIds the delegatedRoleDefinitionIds value to set.
     * @return the Authorization object itself.
     */
    public Authorization withDelegatedRoleDefinitionIds(List<UUID> delegatedRoleDefinitionIds) {
        this.delegatedRoleDefinitionIds = delegatedRoleDefinitionIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (principalId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property principalId in model Authorization"));
        }
        if (roleDefinitionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property roleDefinitionId in model Authorization"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Authorization.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("principalId", this.principalId);
        jsonWriter.writeStringField("roleDefinitionId", this.roleDefinitionId);
        jsonWriter.writeStringField("principalIdDisplayName", this.principalIdDisplayName);
        jsonWriter.writeArrayField("delegatedRoleDefinitionIds", this.delegatedRoleDefinitionIds,
            (writer, element) -> writer.writeString(Objects.toString(element, null)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Authorization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Authorization if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Authorization.
     */
    public static Authorization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Authorization deserializedAuthorization = new Authorization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("principalId".equals(fieldName)) {
                    deserializedAuthorization.principalId = reader.getString();
                } else if ("roleDefinitionId".equals(fieldName)) {
                    deserializedAuthorization.roleDefinitionId = reader.getString();
                } else if ("principalIdDisplayName".equals(fieldName)) {
                    deserializedAuthorization.principalIdDisplayName = reader.getString();
                } else if ("delegatedRoleDefinitionIds".equals(fieldName)) {
                    List<UUID> delegatedRoleDefinitionIds = reader.readArray(
                        reader1 -> reader1.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString())));
                    deserializedAuthorization.delegatedRoleDefinitionIds = delegatedRoleDefinitionIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthorization;
        });
    }
}
