// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of the marketplace registration definition.
 */
@Fluent
public final class MarketplaceRegistrationDefinitionProperties
    implements JsonSerializable<MarketplaceRegistrationDefinitionProperties> {
    /*
     * The identifier of the managedBy tenant.
     */
    private String managedByTenantId;

    /*
     * The collection of authorization objects describing the access Azure Active Directory principals in the managedBy
     * tenant will receive on the delegated resource in the managed tenant.
     */
    private List<Authorization> authorizations;

    /*
     * The collection of eligible authorization objects describing the just-in-time access Azure Active Directory
     * principals in the managedBy tenant will receive on the delegated resource in the managed tenant.
     */
    private List<EligibleAuthorization> eligibleAuthorizations;

    /*
     * The marketplace offer display name.
     */
    private String offerDisplayName;

    /*
     * The marketplace publisher display name.
     */
    private String publisherDisplayName;

    /*
     * The marketplace plan display name.
     */
    private String planDisplayName;

    /**
     * Creates an instance of MarketplaceRegistrationDefinitionProperties class.
     */
    public MarketplaceRegistrationDefinitionProperties() {
    }

    /**
     * Get the managedByTenantId property: The identifier of the managedBy tenant.
     * 
     * @return the managedByTenantId value.
     */
    public String managedByTenantId() {
        return this.managedByTenantId;
    }

    /**
     * Set the managedByTenantId property: The identifier of the managedBy tenant.
     * 
     * @param managedByTenantId the managedByTenantId value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties withManagedByTenantId(String managedByTenantId) {
        this.managedByTenantId = managedByTenantId;
        return this;
    }

    /**
     * Get the authorizations property: The collection of authorization objects describing the access Azure Active
     * Directory principals in the managedBy tenant will receive on the delegated resource in the managed tenant.
     * 
     * @return the authorizations value.
     */
    public List<Authorization> authorizations() {
        return this.authorizations;
    }

    /**
     * Set the authorizations property: The collection of authorization objects describing the access Azure Active
     * Directory principals in the managedBy tenant will receive on the delegated resource in the managed tenant.
     * 
     * @param authorizations the authorizations value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties withAuthorizations(List<Authorization> authorizations) {
        this.authorizations = authorizations;
        return this;
    }

    /**
     * Get the eligibleAuthorizations property: The collection of eligible authorization objects describing the
     * just-in-time access Azure Active Directory principals in the managedBy tenant will receive on the delegated
     * resource in the managed tenant.
     * 
     * @return the eligibleAuthorizations value.
     */
    public List<EligibleAuthorization> eligibleAuthorizations() {
        return this.eligibleAuthorizations;
    }

    /**
     * Set the eligibleAuthorizations property: The collection of eligible authorization objects describing the
     * just-in-time access Azure Active Directory principals in the managedBy tenant will receive on the delegated
     * resource in the managed tenant.
     * 
     * @param eligibleAuthorizations the eligibleAuthorizations value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties
        withEligibleAuthorizations(List<EligibleAuthorization> eligibleAuthorizations) {
        this.eligibleAuthorizations = eligibleAuthorizations;
        return this;
    }

    /**
     * Get the offerDisplayName property: The marketplace offer display name.
     * 
     * @return the offerDisplayName value.
     */
    public String offerDisplayName() {
        return this.offerDisplayName;
    }

    /**
     * Set the offerDisplayName property: The marketplace offer display name.
     * 
     * @param offerDisplayName the offerDisplayName value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties withOfferDisplayName(String offerDisplayName) {
        this.offerDisplayName = offerDisplayName;
        return this;
    }

    /**
     * Get the publisherDisplayName property: The marketplace publisher display name.
     * 
     * @return the publisherDisplayName value.
     */
    public String publisherDisplayName() {
        return this.publisherDisplayName;
    }

    /**
     * Set the publisherDisplayName property: The marketplace publisher display name.
     * 
     * @param publisherDisplayName the publisherDisplayName value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties withPublisherDisplayName(String publisherDisplayName) {
        this.publisherDisplayName = publisherDisplayName;
        return this;
    }

    /**
     * Get the planDisplayName property: The marketplace plan display name.
     * 
     * @return the planDisplayName value.
     */
    public String planDisplayName() {
        return this.planDisplayName;
    }

    /**
     * Set the planDisplayName property: The marketplace plan display name.
     * 
     * @param planDisplayName the planDisplayName value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties withPlanDisplayName(String planDisplayName) {
        this.planDisplayName = planDisplayName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedByTenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property managedByTenantId in model MarketplaceRegistrationDefinitionProperties"));
        }
        if (authorizations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authorizations in model MarketplaceRegistrationDefinitionProperties"));
        } else {
            authorizations().forEach(e -> e.validate());
        }
        if (eligibleAuthorizations() != null) {
            eligibleAuthorizations().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MarketplaceRegistrationDefinitionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("managedByTenantId", this.managedByTenantId);
        jsonWriter.writeArrayField("authorizations", this.authorizations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("eligibleAuthorizations", this.eligibleAuthorizations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("offerDisplayName", this.offerDisplayName);
        jsonWriter.writeStringField("publisherDisplayName", this.publisherDisplayName);
        jsonWriter.writeStringField("planDisplayName", this.planDisplayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MarketplaceRegistrationDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MarketplaceRegistrationDefinitionProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MarketplaceRegistrationDefinitionProperties.
     */
    public static MarketplaceRegistrationDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MarketplaceRegistrationDefinitionProperties deserializedMarketplaceRegistrationDefinitionProperties
                = new MarketplaceRegistrationDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managedByTenantId".equals(fieldName)) {
                    deserializedMarketplaceRegistrationDefinitionProperties.managedByTenantId = reader.getString();
                } else if ("authorizations".equals(fieldName)) {
                    List<Authorization> authorizations = reader.readArray(reader1 -> Authorization.fromJson(reader1));
                    deserializedMarketplaceRegistrationDefinitionProperties.authorizations = authorizations;
                } else if ("eligibleAuthorizations".equals(fieldName)) {
                    List<EligibleAuthorization> eligibleAuthorizations
                        = reader.readArray(reader1 -> EligibleAuthorization.fromJson(reader1));
                    deserializedMarketplaceRegistrationDefinitionProperties.eligibleAuthorizations
                        = eligibleAuthorizations;
                } else if ("offerDisplayName".equals(fieldName)) {
                    deserializedMarketplaceRegistrationDefinitionProperties.offerDisplayName = reader.getString();
                } else if ("publisherDisplayName".equals(fieldName)) {
                    deserializedMarketplaceRegistrationDefinitionProperties.publisherDisplayName = reader.getString();
                } else if ("planDisplayName".equals(fieldName)) {
                    deserializedMarketplaceRegistrationDefinitionProperties.planDisplayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMarketplaceRegistrationDefinitionProperties;
        });
    }
}
