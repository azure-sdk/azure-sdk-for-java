// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The parameters for a specific changes request.
 */
@Fluent
public final class ResourceChangesRequestParameters implements JsonSerializable<ResourceChangesRequestParameters> {
    /*
     * Specifies the list of resources for a changes request.
     */
    private List<String> resourceIds;

    /*
     * The subscription id of resources to query the changes from.
     */
    private String subscriptionId;

    /*
     * Specifies the date and time interval for a changes request.
     */
    private ResourceChangesRequestParametersInterval interval;

    /*
     * Acts as the continuation token for paged responses.
     */
    private String skipToken;

    /*
     * The maximum number of changes the client can accept in a paged response.
     */
    private Integer top;

    /*
     * The table name to query resources from.
     */
    private String table;

    /*
     * The flag if set to true will fetch property changes
     */
    private Boolean fetchPropertyChanges;

    /*
     * The flag if set to true will fetch change snapshots
     */
    private Boolean fetchSnapshots;

    /**
     * Creates an instance of ResourceChangesRequestParameters class.
     */
    public ResourceChangesRequestParameters() {
    }

    /**
     * Get the resourceIds property: Specifies the list of resources for a changes request.
     * 
     * @return the resourceIds value.
     */
    public List<String> resourceIds() {
        return this.resourceIds;
    }

    /**
     * Set the resourceIds property: Specifies the list of resources for a changes request.
     * 
     * @param resourceIds the resourceIds value to set.
     * @return the ResourceChangesRequestParameters object itself.
     */
    public ResourceChangesRequestParameters withResourceIds(List<String> resourceIds) {
        this.resourceIds = resourceIds;
        return this;
    }

    /**
     * Get the subscriptionId property: The subscription id of resources to query the changes from.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: The subscription id of resources to query the changes from.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the ResourceChangesRequestParameters object itself.
     */
    public ResourceChangesRequestParameters withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the interval property: Specifies the date and time interval for a changes request.
     * 
     * @return the interval value.
     */
    public ResourceChangesRequestParametersInterval interval() {
        return this.interval;
    }

    /**
     * Set the interval property: Specifies the date and time interval for a changes request.
     * 
     * @param interval the interval value to set.
     * @return the ResourceChangesRequestParameters object itself.
     */
    public ResourceChangesRequestParameters withInterval(ResourceChangesRequestParametersInterval interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the skipToken property: Acts as the continuation token for paged responses.
     * 
     * @return the skipToken value.
     */
    public String skipToken() {
        return this.skipToken;
    }

    /**
     * Set the skipToken property: Acts as the continuation token for paged responses.
     * 
     * @param skipToken the skipToken value to set.
     * @return the ResourceChangesRequestParameters object itself.
     */
    public ResourceChangesRequestParameters withSkipToken(String skipToken) {
        this.skipToken = skipToken;
        return this;
    }

    /**
     * Get the top property: The maximum number of changes the client can accept in a paged response.
     * 
     * @return the top value.
     */
    public Integer top() {
        return this.top;
    }

    /**
     * Set the top property: The maximum number of changes the client can accept in a paged response.
     * 
     * @param top the top value to set.
     * @return the ResourceChangesRequestParameters object itself.
     */
    public ResourceChangesRequestParameters withTop(Integer top) {
        this.top = top;
        return this;
    }

    /**
     * Get the table property: The table name to query resources from.
     * 
     * @return the table value.
     */
    public String table() {
        return this.table;
    }

    /**
     * Set the table property: The table name to query resources from.
     * 
     * @param table the table value to set.
     * @return the ResourceChangesRequestParameters object itself.
     */
    public ResourceChangesRequestParameters withTable(String table) {
        this.table = table;
        return this;
    }

    /**
     * Get the fetchPropertyChanges property: The flag if set to true will fetch property changes.
     * 
     * @return the fetchPropertyChanges value.
     */
    public Boolean fetchPropertyChanges() {
        return this.fetchPropertyChanges;
    }

    /**
     * Set the fetchPropertyChanges property: The flag if set to true will fetch property changes.
     * 
     * @param fetchPropertyChanges the fetchPropertyChanges value to set.
     * @return the ResourceChangesRequestParameters object itself.
     */
    public ResourceChangesRequestParameters withFetchPropertyChanges(Boolean fetchPropertyChanges) {
        this.fetchPropertyChanges = fetchPropertyChanges;
        return this;
    }

    /**
     * Get the fetchSnapshots property: The flag if set to true will fetch change snapshots.
     * 
     * @return the fetchSnapshots value.
     */
    public Boolean fetchSnapshots() {
        return this.fetchSnapshots;
    }

    /**
     * Set the fetchSnapshots property: The flag if set to true will fetch change snapshots.
     * 
     * @param fetchSnapshots the fetchSnapshots value to set.
     * @return the ResourceChangesRequestParameters object itself.
     */
    public ResourceChangesRequestParameters withFetchSnapshots(Boolean fetchSnapshots) {
        this.fetchSnapshots = fetchSnapshots;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (interval() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property interval in model ResourceChangesRequestParameters"));
        } else {
            interval().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceChangesRequestParameters.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("interval", this.interval);
        jsonWriter.writeArrayField("resourceIds", this.resourceIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("$skipToken", this.skipToken);
        jsonWriter.writeNumberField("$top", this.top);
        jsonWriter.writeStringField("table", this.table);
        jsonWriter.writeBooleanField("fetchPropertyChanges", this.fetchPropertyChanges);
        jsonWriter.writeBooleanField("fetchSnapshots", this.fetchSnapshots);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceChangesRequestParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceChangesRequestParameters if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceChangesRequestParameters.
     */
    public static ResourceChangesRequestParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceChangesRequestParameters deserializedResourceChangesRequestParameters
                = new ResourceChangesRequestParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("interval".equals(fieldName)) {
                    deserializedResourceChangesRequestParameters.interval
                        = ResourceChangesRequestParametersInterval.fromJson(reader);
                } else if ("resourceIds".equals(fieldName)) {
                    List<String> resourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceChangesRequestParameters.resourceIds = resourceIds;
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedResourceChangesRequestParameters.subscriptionId = reader.getString();
                } else if ("$skipToken".equals(fieldName)) {
                    deserializedResourceChangesRequestParameters.skipToken = reader.getString();
                } else if ("$top".equals(fieldName)) {
                    deserializedResourceChangesRequestParameters.top = reader.getNullable(JsonReader::getInt);
                } else if ("table".equals(fieldName)) {
                    deserializedResourceChangesRequestParameters.table = reader.getString();
                } else if ("fetchPropertyChanges".equals(fieldName)) {
                    deserializedResourceChangesRequestParameters.fetchPropertyChanges
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("fetchSnapshots".equals(fieldName)) {
                    deserializedResourceChangesRequestParameters.fetchSnapshots
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceChangesRequestParameters;
        });
    }
}
