// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Specifies the date and time interval for a changes request.
 */
@Fluent
public final class ResourceChangesRequestParametersInterval extends DateTimeInterval {
    /**
     * Creates an instance of ResourceChangesRequestParametersInterval class.
     */
    public ResourceChangesRequestParametersInterval() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceChangesRequestParametersInterval withStart(OffsetDateTime start) {
        super.withStart(start);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceChangesRequestParametersInterval withEnd(OffsetDateTime end) {
        super.withEnd(end);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("start",
            start() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(start()));
        jsonWriter.writeStringField("end", end() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(end()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceChangesRequestParametersInterval from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceChangesRequestParametersInterval if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceChangesRequestParametersInterval.
     */
    public static ResourceChangesRequestParametersInterval fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceChangesRequestParametersInterval deserializedResourceChangesRequestParametersInterval
                = new ResourceChangesRequestParametersInterval();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("start".equals(fieldName)) {
                    deserializedResourceChangesRequestParametersInterval.withStart(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("end".equals(fieldName)) {
                    deserializedResourceChangesRequestParametersInterval.withEnd(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceChangesRequestParametersInterval;
        });
    }
}
