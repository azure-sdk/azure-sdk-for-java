// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The options for history request evaluation.
 */
@Fluent
public final class ResourcesHistoryRequestOptions implements JsonSerializable<ResourcesHistoryRequestOptions> {
    /*
     * The time interval used to fetch history.
     */
    private DateTimeInterval interval;

    /*
     * The maximum number of rows that the query should return. Overrides the page size when ```$skipToken``` property
     * is present.
     */
    private Integer top;

    /*
     * The number of rows to skip from the beginning of the results. Overrides the next page offset when
     * ```$skipToken``` property is present.
     */
    private Integer skip;

    /*
     * Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.
     */
    private String skipToken;

    /*
     * Defines in which format query result returned.
     */
    private ResultFormat resultFormat;

    /**
     * Creates an instance of ResourcesHistoryRequestOptions class.
     */
    public ResourcesHistoryRequestOptions() {
    }

    /**
     * Get the interval property: The time interval used to fetch history.
     * 
     * @return the interval value.
     */
    public DateTimeInterval interval() {
        return this.interval;
    }

    /**
     * Set the interval property: The time interval used to fetch history.
     * 
     * @param interval the interval value to set.
     * @return the ResourcesHistoryRequestOptions object itself.
     */
    public ResourcesHistoryRequestOptions withInterval(DateTimeInterval interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the top property: The maximum number of rows that the query should return. Overrides the page size when
     * ```$skipToken``` property is present.
     * 
     * @return the top value.
     */
    public Integer top() {
        return this.top;
    }

    /**
     * Set the top property: The maximum number of rows that the query should return. Overrides the page size when
     * ```$skipToken``` property is present.
     * 
     * @param top the top value to set.
     * @return the ResourcesHistoryRequestOptions object itself.
     */
    public ResourcesHistoryRequestOptions withTop(Integer top) {
        this.top = top;
        return this;
    }

    /**
     * Get the skip property: The number of rows to skip from the beginning of the results. Overrides the next page
     * offset when ```$skipToken``` property is present.
     * 
     * @return the skip value.
     */
    public Integer skip() {
        return this.skip;
    }

    /**
     * Set the skip property: The number of rows to skip from the beginning of the results. Overrides the next page
     * offset when ```$skipToken``` property is present.
     * 
     * @param skip the skip value to set.
     * @return the ResourcesHistoryRequestOptions object itself.
     */
    public ResourcesHistoryRequestOptions withSkip(Integer skip) {
        this.skip = skip;
        return this;
    }

    /**
     * Get the skipToken property: Continuation token for pagination, capturing the next page size and offset, as well
     * as the context of the query.
     * 
     * @return the skipToken value.
     */
    public String skipToken() {
        return this.skipToken;
    }

    /**
     * Set the skipToken property: Continuation token for pagination, capturing the next page size and offset, as well
     * as the context of the query.
     * 
     * @param skipToken the skipToken value to set.
     * @return the ResourcesHistoryRequestOptions object itself.
     */
    public ResourcesHistoryRequestOptions withSkipToken(String skipToken) {
        this.skipToken = skipToken;
        return this;
    }

    /**
     * Get the resultFormat property: Defines in which format query result returned.
     * 
     * @return the resultFormat value.
     */
    public ResultFormat resultFormat() {
        return this.resultFormat;
    }

    /**
     * Set the resultFormat property: Defines in which format query result returned.
     * 
     * @param resultFormat the resultFormat value to set.
     * @return the ResourcesHistoryRequestOptions object itself.
     */
    public ResourcesHistoryRequestOptions withResultFormat(ResultFormat resultFormat) {
        this.resultFormat = resultFormat;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (interval() != null) {
            interval().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("interval", this.interval);
        jsonWriter.writeNumberField("$top", this.top);
        jsonWriter.writeNumberField("$skip", this.skip);
        jsonWriter.writeStringField("$skipToken", this.skipToken);
        jsonWriter.writeStringField("resultFormat", this.resultFormat == null ? null : this.resultFormat.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourcesHistoryRequestOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourcesHistoryRequestOptions if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourcesHistoryRequestOptions.
     */
    public static ResourcesHistoryRequestOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourcesHistoryRequestOptions deserializedResourcesHistoryRequestOptions
                = new ResourcesHistoryRequestOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("interval".equals(fieldName)) {
                    deserializedResourcesHistoryRequestOptions.interval = DateTimeInterval.fromJson(reader);
                } else if ("$top".equals(fieldName)) {
                    deserializedResourcesHistoryRequestOptions.top = reader.getNullable(JsonReader::getInt);
                } else if ("$skip".equals(fieldName)) {
                    deserializedResourcesHistoryRequestOptions.skip = reader.getNullable(JsonReader::getInt);
                } else if ("$skipToken".equals(fieldName)) {
                    deserializedResourcesHistoryRequestOptions.skipToken = reader.getString();
                } else if ("resultFormat".equals(fieldName)) {
                    deserializedResourcesHistoryRequestOptions.resultFormat
                        = ResultFormat.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourcesHistoryRequestOptions;
        });
    }
}
