// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Data on a specific resource snapshot.
 */
@Fluent
public class ResourceSnapshotData implements JsonSerializable<ResourceSnapshotData> {
    /*
     * The ID of the snapshot.
     */
    private String snapshotId;

    /*
     * The time when the snapshot was created.
     * The snapshot timestamp provides an approximation as to when a modification to a resource was detected. There can
     * be a difference between the actual modification time and the detection time. This is due to differences in how
     * operations that modify a resource are processed, versus how operation that record resource snapshots are
     * processed.
     */
    private OffsetDateTime timestamp;

    /*
     * The resource snapshot content (in resourceChangeDetails response only).
     */
    private Object content;

    /**
     * Creates an instance of ResourceSnapshotData class.
     */
    public ResourceSnapshotData() {
    }

    /**
     * Get the snapshotId property: The ID of the snapshot.
     * 
     * @return the snapshotId value.
     */
    public String snapshotId() {
        return this.snapshotId;
    }

    /**
     * Set the snapshotId property: The ID of the snapshot.
     * 
     * @param snapshotId the snapshotId value to set.
     * @return the ResourceSnapshotData object itself.
     */
    public ResourceSnapshotData withSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
        return this;
    }

    /**
     * Get the timestamp property: The time when the snapshot was created.
     * The snapshot timestamp provides an approximation as to when a modification to a resource was detected. There can
     * be a difference between the actual modification time and the detection time. This is due to differences in how
     * operations that modify a resource are processed, versus how operation that record resource snapshots are
     * processed.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: The time when the snapshot was created.
     * The snapshot timestamp provides an approximation as to when a modification to a resource was detected. There can
     * be a difference between the actual modification time and the detection time. This is due to differences in how
     * operations that modify a resource are processed, versus how operation that record resource snapshots are
     * processed.
     * 
     * @param timestamp the timestamp value to set.
     * @return the ResourceSnapshotData object itself.
     */
    public ResourceSnapshotData withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the content property: The resource snapshot content (in resourceChangeDetails response only).
     * 
     * @return the content value.
     */
    public Object content() {
        return this.content;
    }

    /**
     * Set the content property: The resource snapshot content (in resourceChangeDetails response only).
     * 
     * @param content the content value to set.
     * @return the ResourceSnapshotData object itself.
     */
    public ResourceSnapshotData withContent(Object content) {
        this.content = content;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (timestamp() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property timestamp in model ResourceSnapshotData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceSnapshotData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeStringField("snapshotId", this.snapshotId);
        jsonWriter.writeUntypedField("content", this.content);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceSnapshotData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceSnapshotData if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceSnapshotData.
     */
    public static ResourceSnapshotData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceSnapshotData deserializedResourceSnapshotData = new ResourceSnapshotData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestamp".equals(fieldName)) {
                    deserializedResourceSnapshotData.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("snapshotId".equals(fieldName)) {
                    deserializedResourceSnapshotData.snapshotId = reader.getString();
                } else if ("content".equals(fieldName)) {
                    deserializedResourceSnapshotData.content = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceSnapshotData;
        });
    }
}
