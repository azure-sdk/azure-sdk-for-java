// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Query Generation Request.
 */
@Fluent
public final class QueryGenerationRequest implements JsonSerializable<QueryGenerationRequest> {
    /*
     * A collection of chat history to provide context in query generation
     */
    private List<HistoryContext> history;

    /*
     * Prompt text from user
     */
    private String prompt;

    /**
     * Creates an instance of QueryGenerationRequest class.
     */
    public QueryGenerationRequest() {
    }

    /**
     * Get the history property: A collection of chat history to provide context in query generation.
     * 
     * @return the history value.
     */
    public List<HistoryContext> history() {
        return this.history;
    }

    /**
     * Set the history property: A collection of chat history to provide context in query generation.
     * 
     * @param history the history value to set.
     * @return the QueryGenerationRequest object itself.
     */
    public QueryGenerationRequest withHistory(List<HistoryContext> history) {
        this.history = history;
        return this;
    }

    /**
     * Get the prompt property: Prompt text from user.
     * 
     * @return the prompt value.
     */
    public String prompt() {
        return this.prompt;
    }

    /**
     * Set the prompt property: Prompt text from user.
     * 
     * @param prompt the prompt value to set.
     * @return the QueryGenerationRequest object itself.
     */
    public QueryGenerationRequest withPrompt(String prompt) {
        this.prompt = prompt;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (history() != null) {
            history().forEach(e -> e.validate());
        }
        if (prompt() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property prompt in model QueryGenerationRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(QueryGenerationRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("prompt", this.prompt);
        jsonWriter.writeArrayField("history", this.history, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryGenerationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryGenerationRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QueryGenerationRequest.
     */
    public static QueryGenerationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryGenerationRequest deserializedQueryGenerationRequest = new QueryGenerationRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prompt".equals(fieldName)) {
                    deserializedQueryGenerationRequest.prompt = reader.getString();
                } else if ("history".equals(fieldName)) {
                    List<HistoryContext> history = reader.readArray(reader1 -> HistoryContext.fromJson(reader1));
                    deserializedQueryGenerationRequest.history = history;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryGenerationRequest;
        });
    }
}
