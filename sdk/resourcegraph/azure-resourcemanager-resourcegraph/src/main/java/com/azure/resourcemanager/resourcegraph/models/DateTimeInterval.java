// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * An interval in time specifying the date and time for the inclusive start and exclusive end, i.e. `[start, end)`.
 */
@Fluent
public class DateTimeInterval implements JsonSerializable<DateTimeInterval> {
    /*
     * A datetime indicating the inclusive/closed start of the time interval, i.e. `[`**`start`**`, end)`. Specifying a
     * `start` that occurs chronologically after `end` will result in an error.
     */
    private OffsetDateTime start;

    /*
     * A datetime indicating the exclusive/open end of the time interval, i.e. `[start, `**`end`**`)`. Specifying an
     * `end` that occurs chronologically before `start` will result in an error.
     */
    private OffsetDateTime end;

    /**
     * Creates an instance of DateTimeInterval class.
     */
    public DateTimeInterval() {
    }

    /**
     * Get the start property: A datetime indicating the inclusive/closed start of the time interval, i.e.
     * `[`**`start`**`, end)`. Specifying a `start` that occurs chronologically after `end` will result in an error.
     * 
     * @return the start value.
     */
    public OffsetDateTime start() {
        return this.start;
    }

    /**
     * Set the start property: A datetime indicating the inclusive/closed start of the time interval, i.e.
     * `[`**`start`**`, end)`. Specifying a `start` that occurs chronologically after `end` will result in an error.
     * 
     * @param start the start value to set.
     * @return the DateTimeInterval object itself.
     */
    public DateTimeInterval withStart(OffsetDateTime start) {
        this.start = start;
        return this;
    }

    /**
     * Get the end property: A datetime indicating the exclusive/open end of the time interval, i.e. `[start,
     * `**`end`**`)`. Specifying an `end` that occurs chronologically before `start` will result in an error.
     * 
     * @return the end value.
     */
    public OffsetDateTime end() {
        return this.end;
    }

    /**
     * Set the end property: A datetime indicating the exclusive/open end of the time interval, i.e. `[start,
     * `**`end`**`)`. Specifying an `end` that occurs chronologically before `start` will result in an error.
     * 
     * @param end the end value to set.
     * @return the DateTimeInterval object itself.
     */
    public DateTimeInterval withEnd(OffsetDateTime end) {
        this.end = end;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (start() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property start in model DateTimeInterval"));
        }
        if (end() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property end in model DateTimeInterval"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DateTimeInterval.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("start",
            this.start == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.start));
        jsonWriter.writeStringField("end",
            this.end == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.end));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DateTimeInterval from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DateTimeInterval if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DateTimeInterval.
     */
    public static DateTimeInterval fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DateTimeInterval deserializedDateTimeInterval = new DateTimeInterval();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("start".equals(fieldName)) {
                    deserializedDateTimeInterval.start = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("end".equals(fieldName)) {
                    deserializedDateTimeInterval.end = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDateTimeInterval;
        });
    }
}
