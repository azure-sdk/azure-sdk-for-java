// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The snapshot after the change.
 */
@Fluent
public final class ResourceChangeDataAfterSnapshot extends ResourceSnapshotData {
    /**
     * Creates an instance of ResourceChangeDataAfterSnapshot class.
     */
    public ResourceChangeDataAfterSnapshot() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceChangeDataAfterSnapshot withSnapshotId(String snapshotId) {
        super.withSnapshotId(snapshotId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceChangeDataAfterSnapshot withTimestamp(OffsetDateTime timestamp) {
        super.withTimestamp(timestamp);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceChangeDataAfterSnapshot withContent(Object content) {
        super.withContent(content);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timestamp",
            timestamp() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(timestamp()));
        jsonWriter.writeStringField("snapshotId", snapshotId());
        jsonWriter.writeUntypedField("content", content());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceChangeDataAfterSnapshot from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceChangeDataAfterSnapshot if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceChangeDataAfterSnapshot.
     */
    public static ResourceChangeDataAfterSnapshot fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceChangeDataAfterSnapshot deserializedResourceChangeDataAfterSnapshot
                = new ResourceChangeDataAfterSnapshot();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestamp".equals(fieldName)) {
                    deserializedResourceChangeDataAfterSnapshot.withTimestamp(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("snapshotId".equals(fieldName)) {
                    deserializedResourceChangeDataAfterSnapshot.withSnapshotId(reader.getString());
                } else if ("content".equals(fieldName)) {
                    deserializedResourceChangeDataAfterSnapshot.withContent(reader.readUntyped());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceChangeDataAfterSnapshot;
        });
    }
}
