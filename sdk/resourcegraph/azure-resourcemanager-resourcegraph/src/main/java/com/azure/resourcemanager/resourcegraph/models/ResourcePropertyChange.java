// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The resource property change.
 */
@Fluent
public final class ResourcePropertyChange implements JsonSerializable<ResourcePropertyChange> {
    /*
     * The property name
     */
    private String propertyName;

    /*
     * The property value in before snapshot
     */
    private String beforeValue;

    /*
     * The property value in after snapshot
     */
    private String afterValue;

    /*
     * The change category.
     */
    private ChangeCategory changeCategory;

    /*
     * The property change Type
     */
    private PropertyChangeType propertyChangeType;

    /**
     * Creates an instance of ResourcePropertyChange class.
     */
    public ResourcePropertyChange() {
    }

    /**
     * Get the propertyName property: The property name.
     * 
     * @return the propertyName value.
     */
    public String propertyName() {
        return this.propertyName;
    }

    /**
     * Set the propertyName property: The property name.
     * 
     * @param propertyName the propertyName value to set.
     * @return the ResourcePropertyChange object itself.
     */
    public ResourcePropertyChange withPropertyName(String propertyName) {
        this.propertyName = propertyName;
        return this;
    }

    /**
     * Get the beforeValue property: The property value in before snapshot.
     * 
     * @return the beforeValue value.
     */
    public String beforeValue() {
        return this.beforeValue;
    }

    /**
     * Set the beforeValue property: The property value in before snapshot.
     * 
     * @param beforeValue the beforeValue value to set.
     * @return the ResourcePropertyChange object itself.
     */
    public ResourcePropertyChange withBeforeValue(String beforeValue) {
        this.beforeValue = beforeValue;
        return this;
    }

    /**
     * Get the afterValue property: The property value in after snapshot.
     * 
     * @return the afterValue value.
     */
    public String afterValue() {
        return this.afterValue;
    }

    /**
     * Set the afterValue property: The property value in after snapshot.
     * 
     * @param afterValue the afterValue value to set.
     * @return the ResourcePropertyChange object itself.
     */
    public ResourcePropertyChange withAfterValue(String afterValue) {
        this.afterValue = afterValue;
        return this;
    }

    /**
     * Get the changeCategory property: The change category.
     * 
     * @return the changeCategory value.
     */
    public ChangeCategory changeCategory() {
        return this.changeCategory;
    }

    /**
     * Set the changeCategory property: The change category.
     * 
     * @param changeCategory the changeCategory value to set.
     * @return the ResourcePropertyChange object itself.
     */
    public ResourcePropertyChange withChangeCategory(ChangeCategory changeCategory) {
        this.changeCategory = changeCategory;
        return this;
    }

    /**
     * Get the propertyChangeType property: The property change Type.
     * 
     * @return the propertyChangeType value.
     */
    public PropertyChangeType propertyChangeType() {
        return this.propertyChangeType;
    }

    /**
     * Set the propertyChangeType property: The property change Type.
     * 
     * @param propertyChangeType the propertyChangeType value to set.
     * @return the ResourcePropertyChange object itself.
     */
    public ResourcePropertyChange withPropertyChangeType(PropertyChangeType propertyChangeType) {
        this.propertyChangeType = propertyChangeType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (propertyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property propertyName in model ResourcePropertyChange"));
        }
        if (changeCategory() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property changeCategory in model ResourcePropertyChange"));
        }
        if (propertyChangeType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property propertyChangeType in model ResourcePropertyChange"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourcePropertyChange.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("propertyName", this.propertyName);
        jsonWriter.writeStringField("changeCategory",
            this.changeCategory == null ? null : this.changeCategory.toString());
        jsonWriter.writeStringField("propertyChangeType",
            this.propertyChangeType == null ? null : this.propertyChangeType.toString());
        jsonWriter.writeStringField("beforeValue", this.beforeValue);
        jsonWriter.writeStringField("afterValue", this.afterValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourcePropertyChange from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourcePropertyChange if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourcePropertyChange.
     */
    public static ResourcePropertyChange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourcePropertyChange deserializedResourcePropertyChange = new ResourcePropertyChange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("propertyName".equals(fieldName)) {
                    deserializedResourcePropertyChange.propertyName = reader.getString();
                } else if ("changeCategory".equals(fieldName)) {
                    deserializedResourcePropertyChange.changeCategory = ChangeCategory.fromString(reader.getString());
                } else if ("propertyChangeType".equals(fieldName)) {
                    deserializedResourcePropertyChange.propertyChangeType
                        = PropertyChangeType.fromString(reader.getString());
                } else if ("beforeValue".equals(fieldName)) {
                    deserializedResourcePropertyChange.beforeValue = reader.getString();
                } else if ("afterValue".equals(fieldName)) {
                    deserializedResourcePropertyChange.afterValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourcePropertyChange;
        });
    }
}
