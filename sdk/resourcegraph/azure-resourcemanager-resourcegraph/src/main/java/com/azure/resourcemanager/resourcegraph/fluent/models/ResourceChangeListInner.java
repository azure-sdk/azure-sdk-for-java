// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A list of changes associated with a resource over a specific time interval.
 */
@Fluent
public final class ResourceChangeListInner implements JsonSerializable<ResourceChangeListInner> {
    /*
     * The pageable value returned by the operation, i.e. a list of changes to the resource.
     * 
     * - The list is ordered from the most recent changes to the least recent changes.
     * - This list will be empty if there were no changes during the requested interval.
     * - The `Before` snapshot timestamp value of the oldest change can be outside of the specified time interval.
     */
    private List<ResourceChangeDataInner> changes;

    /*
     * Skip token that encodes the skip information while executing the current request
     */
    private Object skipToken;

    /**
     * Creates an instance of ResourceChangeListInner class.
     */
    public ResourceChangeListInner() {
    }

    /**
     * Get the changes property: The pageable value returned by the operation, i.e. a list of changes to the resource.
     * 
     * - The list is ordered from the most recent changes to the least recent changes.
     * - This list will be empty if there were no changes during the requested interval.
     * - The `Before` snapshot timestamp value of the oldest change can be outside of the specified time interval.
     * 
     * @return the changes value.
     */
    public List<ResourceChangeDataInner> changes() {
        return this.changes;
    }

    /**
     * Set the changes property: The pageable value returned by the operation, i.e. a list of changes to the resource.
     * 
     * - The list is ordered from the most recent changes to the least recent changes.
     * - This list will be empty if there were no changes during the requested interval.
     * - The `Before` snapshot timestamp value of the oldest change can be outside of the specified time interval.
     * 
     * @param changes the changes value to set.
     * @return the ResourceChangeListInner object itself.
     */
    public ResourceChangeListInner withChanges(List<ResourceChangeDataInner> changes) {
        this.changes = changes;
        return this;
    }

    /**
     * Get the skipToken property: Skip token that encodes the skip information while executing the current request.
     * 
     * @return the skipToken value.
     */
    public Object skipToken() {
        return this.skipToken;
    }

    /**
     * Set the skipToken property: Skip token that encodes the skip information while executing the current request.
     * 
     * @param skipToken the skipToken value to set.
     * @return the ResourceChangeListInner object itself.
     */
    public ResourceChangeListInner withSkipToken(Object skipToken) {
        this.skipToken = skipToken;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (changes() != null) {
            changes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("changes", this.changes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeUntypedField("$skipToken", this.skipToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceChangeListInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceChangeListInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceChangeListInner.
     */
    public static ResourceChangeListInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceChangeListInner deserializedResourceChangeListInner = new ResourceChangeListInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("changes".equals(fieldName)) {
                    List<ResourceChangeDataInner> changes
                        = reader.readArray(reader1 -> ResourceChangeDataInner.fromJson(reader1));
                    deserializedResourceChangeListInner.changes = changes;
                } else if ("$skipToken".equals(fieldName)) {
                    deserializedResourceChangeListInner.skipToken = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceChangeListInner;
        });
    }
}
