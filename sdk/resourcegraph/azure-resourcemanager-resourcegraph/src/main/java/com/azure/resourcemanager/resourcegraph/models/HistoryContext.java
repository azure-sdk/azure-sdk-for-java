// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * History content generated by a user, assistant or system role.
 */
@Fluent
public final class HistoryContext implements JsonSerializable<HistoryContext> {
    /*
     * Content generated by a given role
     */
    private String content;

    /*
     * Role which generates the content e.g., user, assistant or system
     */
    private Role role;

    /**
     * Creates an instance of HistoryContext class.
     */
    public HistoryContext() {
    }

    /**
     * Get the content property: Content generated by a given role.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Set the content property: Content generated by a given role.
     * 
     * @param content the content value to set.
     * @return the HistoryContext object itself.
     */
    public HistoryContext withContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the role property: Role which generates the content e.g., user, assistant or system.
     * 
     * @return the role value.
     */
    public Role role() {
        return this.role;
    }

    /**
     * Set the role property: Role which generates the content e.g., user, assistant or system.
     * 
     * @param role the role value to set.
     * @return the HistoryContext object itself.
     */
    public HistoryContext withRole(Role role) {
        this.role = role;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (content() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property content in model HistoryContext"));
        }
        if (role() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property role in model HistoryContext"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HistoryContext.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HistoryContext from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HistoryContext if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HistoryContext.
     */
    public static HistoryContext fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HistoryContext deserializedHistoryContext = new HistoryContext();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("content".equals(fieldName)) {
                    deserializedHistoryContext.content = reader.getString();
                } else if ("role".equals(fieldName)) {
                    deserializedHistoryContext.role = Role.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHistoryContext;
        });
    }
}
