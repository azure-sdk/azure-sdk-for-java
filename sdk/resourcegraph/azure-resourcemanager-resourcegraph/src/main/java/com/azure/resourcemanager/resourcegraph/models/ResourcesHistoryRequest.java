// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes a history request to be executed.
 */
@Fluent
public final class ResourcesHistoryRequest implements JsonSerializable<ResourcesHistoryRequest> {
    /*
     * Azure subscriptions against which to execute the query.
     */
    private List<String> subscriptions;

    /*
     * The resources query.
     */
    private String query;

    /*
     * The history request evaluation options
     */
    private ResourcesHistoryRequestOptions options;

    /*
     * Azure management groups against which to execute the query. Example: [ 'mg1', 'mg2' ]
     */
    private List<String> managementGroups;

    /**
     * Creates an instance of ResourcesHistoryRequest class.
     */
    public ResourcesHistoryRequest() {
    }

    /**
     * Get the subscriptions property: Azure subscriptions against which to execute the query.
     * 
     * @return the subscriptions value.
     */
    public List<String> subscriptions() {
        return this.subscriptions;
    }

    /**
     * Set the subscriptions property: Azure subscriptions against which to execute the query.
     * 
     * @param subscriptions the subscriptions value to set.
     * @return the ResourcesHistoryRequest object itself.
     */
    public ResourcesHistoryRequest withSubscriptions(List<String> subscriptions) {
        this.subscriptions = subscriptions;
        return this;
    }

    /**
     * Get the query property: The resources query.
     * 
     * @return the query value.
     */
    public String query() {
        return this.query;
    }

    /**
     * Set the query property: The resources query.
     * 
     * @param query the query value to set.
     * @return the ResourcesHistoryRequest object itself.
     */
    public ResourcesHistoryRequest withQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the options property: The history request evaluation options.
     * 
     * @return the options value.
     */
    public ResourcesHistoryRequestOptions options() {
        return this.options;
    }

    /**
     * Set the options property: The history request evaluation options.
     * 
     * @param options the options value to set.
     * @return the ResourcesHistoryRequest object itself.
     */
    public ResourcesHistoryRequest withOptions(ResourcesHistoryRequestOptions options) {
        this.options = options;
        return this;
    }

    /**
     * Get the managementGroups property: Azure management groups against which to execute the query. Example: [ 'mg1',
     * 'mg2' ].
     * 
     * @return the managementGroups value.
     */
    public List<String> managementGroups() {
        return this.managementGroups;
    }

    /**
     * Set the managementGroups property: Azure management groups against which to execute the query. Example: [ 'mg1',
     * 'mg2' ].
     * 
     * @param managementGroups the managementGroups value to set.
     * @return the ResourcesHistoryRequest object itself.
     */
    public ResourcesHistoryRequest withManagementGroups(List<String> managementGroups) {
        this.managementGroups = managementGroups;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (options() != null) {
            options().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("subscriptions", this.subscriptions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("query", this.query);
        jsonWriter.writeJsonField("options", this.options);
        jsonWriter.writeArrayField("managementGroups", this.managementGroups,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourcesHistoryRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourcesHistoryRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourcesHistoryRequest.
     */
    public static ResourcesHistoryRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourcesHistoryRequest deserializedResourcesHistoryRequest = new ResourcesHistoryRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriptions".equals(fieldName)) {
                    List<String> subscriptions = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourcesHistoryRequest.subscriptions = subscriptions;
                } else if ("query".equals(fieldName)) {
                    deserializedResourcesHistoryRequest.query = reader.getString();
                } else if ("options".equals(fieldName)) {
                    deserializedResourcesHistoryRequest.options = ResourcesHistoryRequestOptions.fromJson(reader);
                } else if ("managementGroups".equals(fieldName)) {
                    List<String> managementGroups = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourcesHistoryRequest.managementGroups = managementGroups;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourcesHistoryRequest;
        });
    }
}
