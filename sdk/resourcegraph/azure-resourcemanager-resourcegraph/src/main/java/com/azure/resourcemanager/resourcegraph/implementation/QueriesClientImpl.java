// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.resourcegraph.fluent.QueriesClient;
import com.azure.resourcemanager.resourcegraph.fluent.models.QueryGenerationResponseInner;
import com.azure.resourcemanager.resourcegraph.models.QueryGenerationRequest;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in QueriesClient.
 */
public final class QueriesClientImpl implements QueriesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final QueriesService service;

    /**
     * The service client containing this operation class.
     */
    private final ResourceGraphClientImpl client;

    /**
     * Initializes an instance of QueriesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    QueriesClientImpl(ResourceGraphClientImpl client) {
        this.service = RestProxy.create(QueriesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ResourceGraphClientQueries to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ResourceGraphClientQ")
    public interface QueriesService {
        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.ResourceGraph/generateQuery")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<QueryGenerationResponseInner>> generateQuery(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") QueryGenerationRequest body,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Generates ARG query for a given user prompt.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query Generation Response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<QueryGenerationResponseInner>> generateQueryWithResponseAsync(QueryGenerationRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String apiVersion = "2023-09-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.generateQuery(this.client.getEndpoint(), apiVersion, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Generates ARG query for a given user prompt.
     * 
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query Generation Response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<QueryGenerationResponseInner>> generateQueryWithResponseAsync(QueryGenerationRequest body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String apiVersion = "2023-09-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.generateQuery(this.client.getEndpoint(), apiVersion, body, accept, context);
    }

    /**
     * Generates ARG query for a given user prompt.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query Generation Response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<QueryGenerationResponseInner> generateQueryAsync(QueryGenerationRequest body) {
        return generateQueryWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Generates ARG query for a given user prompt.
     * 
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query Generation Response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QueryGenerationResponseInner> generateQueryWithResponse(QueryGenerationRequest body,
        Context context) {
        return generateQueryWithResponseAsync(body, context).block();
    }

    /**
     * Generates ARG query for a given user prompt.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return query Generation Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QueryGenerationResponseInner generateQuery(QueryGenerationRequest body) {
        return generateQueryWithResponse(body, Context.NONE).getValue();
    }
}
