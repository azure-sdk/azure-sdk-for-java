// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.modsimworkbench.fluent.FilesClient;
import com.azure.resourcemanager.modsimworkbench.fluent.models.DownloadRequestInner;
import com.azure.resourcemanager.modsimworkbench.fluent.models.FileInner;
import com.azure.resourcemanager.modsimworkbench.models.DownloadRequest;
import com.azure.resourcemanager.modsimworkbench.models.File;
import com.azure.resourcemanager.modsimworkbench.models.Files;
import com.azure.resourcemanager.modsimworkbench.models.FilesDownloadRequestParameters;

public final class FilesImpl implements Files {
    private static final ClientLogger LOGGER = new ClientLogger(FilesImpl.class);

    private final FilesClient innerClient;

    private final com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager;

    public FilesImpl(
        FilesClient innerClient, com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<File> getWithResponse(
        String resourceGroupName, String workbenchName, String chamberName, String fileName, Context context) {
        Response<FileInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, workbenchName, chamberName, fileName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public File get(String resourceGroupName, String workbenchName, String chamberName, String fileName) {
        FileInner inner = this.serviceClient().get(resourceGroupName, workbenchName, chamberName, fileName);
        if (inner != null) {
            return new FileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DownloadRequest downloadRequest(
        String resourceGroupName, String workbenchName, String chamberName, String fileName) {
        DownloadRequestInner inner =
            this.serviceClient().downloadRequest(resourceGroupName, workbenchName, chamberName, fileName);
        if (inner != null) {
            return new DownloadRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DownloadRequest downloadRequest(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String fileName,
        FilesDownloadRequestParameters body,
        Context context) {
        DownloadRequestInner inner =
            this
                .serviceClient()
                .downloadRequest(resourceGroupName, workbenchName, chamberName, fileName, body, context);
        if (inner != null) {
            return new DownloadRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<File> list(String resourceGroupName, String workbenchName, String chamberName) {
        PagedIterable<FileInner> inner = this.serviceClient().list(resourceGroupName, workbenchName, chamberName);
        return Utils.mapPage(inner, inner1 -> new FileImpl(inner1, this.manager()));
    }

    public PagedIterable<File> list(
        String resourceGroupName, String workbenchName, String chamberName, Context context) {
        PagedIterable<FileInner> inner =
            this.serviceClient().list(resourceGroupName, workbenchName, chamberName, context);
        return Utils.mapPage(inner, inner1 -> new FileImpl(inner1, this.manager()));
    }

    private FilesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager manager() {
        return this.serviceManager;
    }
}
