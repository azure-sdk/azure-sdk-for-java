// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.modsimworkbench.fluent.models.WorkloadInner;

/** An instance of this class provides access to all the operations defined in WorkloadsClient. */
public interface WorkloadsClient {
    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStart(
        String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStart(
        String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStop(
        String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStop(
        String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stop(String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stop(String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRestart(
        String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRestart(
        String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void restart(String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void restart(String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Creates or updates the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workload resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkloadInner>, WorkloadInner> beginCreateOrUpdate(
        String resourceGroup, String workbenchName, String chamberName, String workloadName);

    /**
     * Creates or updates the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @param parameters Parameters supplied to the create or update workload operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workload resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkloadInner>, WorkloadInner> beginCreateOrUpdate(
        String resourceGroup,
        String workbenchName,
        String chamberName,
        String workloadName,
        WorkloadInner parameters,
        Context context);

    /**
     * Creates or updates the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkloadInner createOrUpdate(String resourceGroup, String workbenchName, String chamberName, String workloadName);

    /**
     * Creates or updates the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @param parameters Parameters supplied to the create or update workload operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkloadInner createOrUpdate(
        String resourceGroup,
        String workbenchName,
        String chamberName,
        String workloadName,
        WorkloadInner parameters,
        Context context);

    /**
     * Updates the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @param parameters Parameters supplied to the create or update workload operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<WorkloadInner> updateWithResponse(
        String resourceGroup,
        String workbenchName,
        String chamberName,
        String workloadName,
        WorkloadInner parameters,
        Context context);

    /**
     * Updates the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkloadInner update(String resourceGroup, String workbenchName, String chamberName, String workloadName);

    /**
     * Gets information about the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified workload along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<WorkloadInner> getWithResponse(
        String resourceGroup, String workbenchName, String chamberName, String workloadName, Context context);

    /**
     * Gets information about the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified workload.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkloadInner get(String resourceGroup, String workbenchName, String chamberName, String workloadName);

    /**
     * Deletes the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workload resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkloadInner>, WorkloadInner> beginDelete(
        String resourceGroup, String workbenchName, String chamberName, String workloadName);

    /**
     * Deletes the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workload resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkloadInner>, WorkloadInner> beginDelete(
        String resourceGroup, String workbenchName, String chamberName, String workloadName, Context context);

    /**
     * Deletes the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkloadInner delete(String resourceGroup, String workbenchName, String chamberName, String workloadName);

    /**
     * Deletes the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkloadInner delete(
        String resourceGroup, String workbenchName, String chamberName, String workloadName, Context context);

    /**
     * Lists all workloads.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WorkloadInner> list(String resourceGroup, String workbenchName, String chamberName);

    /**
     * Lists all workloads.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WorkloadInner> list(String resourceGroup, String workbenchName, String chamberName, Context context);
}
