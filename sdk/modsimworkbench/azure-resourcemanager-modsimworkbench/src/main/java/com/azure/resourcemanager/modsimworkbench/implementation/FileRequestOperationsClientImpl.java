// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.modsimworkbench.fluent.FileRequestOperationsClient;
import com.azure.resourcemanager.modsimworkbench.fluent.models.FileDownloadSasUriInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in FileRequestOperationsClient. */
public final class FileRequestOperationsClientImpl implements FileRequestOperationsClient {
    /** The proxy service used to perform REST calls. */
    private final FileRequestOperationsService service;

    /** The service client containing this operation class. */
    private final MicrosoftModSimWorkbenchImpl client;

    /**
     * Initializes an instance of FileRequestOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    FileRequestOperationsClientImpl(MicrosoftModSimWorkbenchImpl client) {
        this.service =
            RestProxy
                .create(FileRequestOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftModSimWorkbenchFileRequestOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftModSimWorkb")
    public interface FileRequestOperationsService {
        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{chamberName}/fileRequests/{requestName}/getDownloadUri")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> getDownloadUri(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("chamberName") String chamberName,
            @PathParam("requestName") String requestName,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get SAS URI to download a file from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAS URI to download a file from an ModSim Workbench chamber data pipeline along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> getDownloadUriWithResponseAsync(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (requestName == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDownloadUri(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            workbenchName,
                            chamberName,
                            requestName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get SAS URI to download a file from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAS URI to download a file from an ModSim Workbench chamber data pipeline along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> getDownloadUriWithResponseAsync(
        String resourceGroupName, String workbenchName, String chamberName, String requestName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (requestName == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getDownloadUri(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                workbenchName,
                chamberName,
                requestName,
                accept,
                context);
    }

    /**
     * Get SAS URI to download a file from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of sAS URI to download a file from an ModSim Workbench chamber data
     *     pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FileDownloadSasUriInner>, FileDownloadSasUriInner> beginGetDownloadUriAsync(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            getDownloadUriWithResponseAsync(resourceGroupName, workbenchName, chamberName, requestName);
        return this
            .client
            .<FileDownloadSasUriInner, FileDownloadSasUriInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                FileDownloadSasUriInner.class,
                FileDownloadSasUriInner.class,
                this.client.getContext());
    }

    /**
     * Get SAS URI to download a file from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of sAS URI to download a file from an ModSim Workbench chamber data
     *     pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FileDownloadSasUriInner>, FileDownloadSasUriInner> beginGetDownloadUriAsync(
        String resourceGroupName, String workbenchName, String chamberName, String requestName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            getDownloadUriWithResponseAsync(resourceGroupName, workbenchName, chamberName, requestName, context);
        return this
            .client
            .<FileDownloadSasUriInner, FileDownloadSasUriInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                FileDownloadSasUriInner.class,
                FileDownloadSasUriInner.class,
                context);
    }

    /**
     * Get SAS URI to download a file from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of sAS URI to download a file from an ModSim Workbench chamber data
     *     pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FileDownloadSasUriInner>, FileDownloadSasUriInner> beginGetDownloadUri(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        return this
            .beginGetDownloadUriAsync(resourceGroupName, workbenchName, chamberName, requestName)
            .getSyncPoller();
    }

    /**
     * Get SAS URI to download a file from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of sAS URI to download a file from an ModSim Workbench chamber data
     *     pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FileDownloadSasUriInner>, FileDownloadSasUriInner> beginGetDownloadUri(
        String resourceGroupName, String workbenchName, String chamberName, String requestName, Context context) {
        return this
            .beginGetDownloadUriAsync(resourceGroupName, workbenchName, chamberName, requestName, context)
            .getSyncPoller();
    }

    /**
     * Get SAS URI to download a file from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAS URI to download a file from an ModSim Workbench chamber data pipeline on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FileDownloadSasUriInner> getDownloadUriAsync(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        return beginGetDownloadUriAsync(resourceGroupName, workbenchName, chamberName, requestName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Get SAS URI to download a file from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAS URI to download a file from an ModSim Workbench chamber data pipeline on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FileDownloadSasUriInner> getDownloadUriAsync(
        String resourceGroupName, String workbenchName, String chamberName, String requestName, Context context) {
        return beginGetDownloadUriAsync(resourceGroupName, workbenchName, chamberName, requestName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Get SAS URI to download a file from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAS URI to download a file from an ModSim Workbench chamber data pipeline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileDownloadSasUriInner getDownloadUri(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        return getDownloadUriAsync(resourceGroupName, workbenchName, chamberName, requestName).block();
    }

    /**
     * Get SAS URI to download a file from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAS URI to download a file from an ModSim Workbench chamber data pipeline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileDownloadSasUriInner getDownloadUri(
        String resourceGroupName, String workbenchName, String chamberName, String requestName, Context context) {
        return getDownloadUriAsync(resourceGroupName, workbenchName, chamberName, requestName, context).block();
    }
}
