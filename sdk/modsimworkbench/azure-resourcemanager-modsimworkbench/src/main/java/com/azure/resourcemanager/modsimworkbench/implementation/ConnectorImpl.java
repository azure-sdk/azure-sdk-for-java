// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.modsimworkbench.fluent.models.ConnectorInner;
import com.azure.resourcemanager.modsimworkbench.models.Connector;
import com.azure.resourcemanager.modsimworkbench.models.ProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class ConnectorImpl implements Connector, Connector.Definition, Connector.Update {
    private ConnectorInner innerObject;

    private final com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String sku() {
        return this.innerModel().sku();
    }

    public Object accessConfigurations() {
        return this.innerModel().accessConfigurations();
    }

    public Object remoteDesktop() {
        return this.innerModel().remoteDesktop();
    }

    public Object networkAcls() {
        return this.innerModel().networkAcls();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroup;
    }

    public ConnectorInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager manager() {
        return this.serviceManager;
    }

    private String resourceGroup;

    private String workbenchName;

    private String chamberName;

    private String connectorName;

    public ConnectorImpl withExistingChamber(String resourceGroup, String workbenchName, String chamberName) {
        this.resourceGroup = resourceGroup;
        this.workbenchName = workbenchName;
        this.chamberName = chamberName;
        return this;
    }

    public Connector create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .createOrUpdate(
                    resourceGroup, workbenchName, chamberName, connectorName, this.innerModel(), Context.NONE);
        return this;
    }

    public Connector create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .createOrUpdate(resourceGroup, workbenchName, chamberName, connectorName, this.innerModel(), context);
        return this;
    }

    ConnectorImpl(String name, com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager) {
        this.innerObject = new ConnectorInner();
        this.serviceManager = serviceManager;
        this.connectorName = name;
    }

    public ConnectorImpl update() {
        return this;
    }

    public Connector apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .updateWithResponse(
                    resourceGroup, workbenchName, chamberName, connectorName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public Connector apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .updateWithResponse(
                    resourceGroup, workbenchName, chamberName, connectorName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ConnectorImpl(
        ConnectorInner innerObject, com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroup = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workbenchName = Utils.getValueFromIdByName(innerObject.id(), "workbenches");
        this.chamberName = Utils.getValueFromIdByName(innerObject.id(), "chambers");
        this.connectorName = Utils.getValueFromIdByName(innerObject.id(), "connectors");
    }

    public Connector refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .getWithResponse(resourceGroup, workbenchName, chamberName, connectorName, Context.NONE)
                .getValue();
        return this;
    }

    public Connector refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .getWithResponse(resourceGroup, workbenchName, chamberName, connectorName, context)
                .getValue();
        return this;
    }

    public ConnectorImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ConnectorImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ConnectorImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public ConnectorImpl withSku(String sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public ConnectorImpl withAccessConfigurations(Object accessConfigurations) {
        this.innerModel().withAccessConfigurations(accessConfigurations);
        return this;
    }

    public ConnectorImpl withRemoteDesktop(Object remoteDesktop) {
        this.innerModel().withRemoteDesktop(remoteDesktop);
        return this;
    }

    public ConnectorImpl withNetworkAcls(Object networkAcls) {
        this.innerModel().withNetworkAcls(networkAcls);
        return this;
    }
}
