// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.modsimworkbench.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Chamber properties. */
@Immutable
public final class ChamberPropertiesFormat {
    /*
     * Gets or sets the license services for each EDA vendor.
     */
    @JsonProperty(value = "licenseServices", access = JsonProperty.Access.WRITE_ONLY)
    private ChamberPropertiesFormatLicenseServices innerLicenseServices;

    /*
     * Gets the status of the Chamber at the time the operation was called
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of ChamberPropertiesFormat class. */
    public ChamberPropertiesFormat() {
    }

    /**
     * Get the innerLicenseServices property: Gets or sets the license services for each EDA vendor.
     *
     * @return the innerLicenseServices value.
     */
    private ChamberPropertiesFormatLicenseServices innerLicenseServices() {
        return this.innerLicenseServices;
    }

    /**
     * Get the provisioningState property: Gets the status of the Chamber at the time the operation was called.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the enable property: Switch to show if License Service is activated.
     *
     * @return the enable value.
     */
    public Boolean enable() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().enable();
    }

    /**
     * Set the enable property: Switch to show if License Service is activated.
     *
     * @param enable the enable value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withEnable(Boolean enable) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withEnable(enable);
        return this;
    }

    /**
     * Get the server property: License Service server.
     *
     * @return the server value.
     */
    public String server() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().server();
    }

    /**
     * Set the server property: License Service server.
     *
     * @param server the server value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withServer(String server) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withServer(server);
        return this;
    }

    /**
     * Get the lmhostId property: Unique identifier of ModSim Workbench chamber license servers used by FlexNet
     * Licensing Service.
     *
     * @return the lmhostId value.
     */
    public List<String> lmhostId() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().lmhostId();
    }

    /**
     * Set the lmhostId property: Unique identifier of ModSim Workbench chamber license servers used by FlexNet
     * Licensing Service.
     *
     * @param lmhostId the lmhostId value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withLmhostId(List<String> lmhostId) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withLmhostId(lmhostId);
        return this;
    }

    /**
     * Get the mfp property: License server information for Cadence License Manager.
     *
     * @return the mfp value.
     */
    public List<String> mfp() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().mfp();
    }

    /**
     * Set the mfp property: License server information for Cadence License Manager.
     *
     * @param mfp the mfp value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withMfp(List<String> mfp) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withMfp(mfp);
        return this;
    }

    /**
     * Get the enableAnsysEnable property: Switch to show if License Service is activated.
     *
     * @return the enableAnsysEnable value.
     */
    public Boolean enableAnsysEnable() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().enableAnsysEnable();
    }

    /**
     * Set the enableAnsysEnable property: Switch to show if License Service is activated.
     *
     * @param enableAnsysEnable the enableAnsysEnable value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withEnableAnsysEnable(Boolean enableAnsysEnable) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withEnableAnsysEnable(enableAnsysEnable);
        return this;
    }

    /**
     * Get the serverAnsysServer property: License Service server.
     *
     * @return the serverAnsysServer value.
     */
    public String serverAnsysServer() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().serverAnsysServer();
    }

    /**
     * Set the serverAnsysServer property: License Service server.
     *
     * @param serverAnsysServer the serverAnsysServer value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withServerAnsysServer(String serverAnsysServer) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withServerAnsysServer(serverAnsysServer);
        return this;
    }

    /**
     * Get the lmhostIdAnsysLmhostId property: Unique identifier of ModSim Workbench chamber license servers used by
     * FlexNet Licensing Service.
     *
     * @return the lmhostIdAnsysLmhostId value.
     */
    public List<String> lmhostIdAnsysLmhostId() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().lmhostIdAnsysLmhostId();
    }

    /**
     * Set the lmhostIdAnsysLmhostId property: Unique identifier of ModSim Workbench chamber license servers used by
     * FlexNet Licensing Service.
     *
     * @param lmhostIdAnsysLmhostId the lmhostIdAnsysLmhostId value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withLmhostIdAnsysLmhostId(List<String> lmhostIdAnsysLmhostId) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withLmhostIdAnsysLmhostId(lmhostIdAnsysLmhostId);
        return this;
    }

    /**
     * Get the enableSiemensEnable property: Switch to show if License Service is activated.
     *
     * @return the enableSiemensEnable value.
     */
    public Boolean enableSiemensEnable() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().enableSiemensEnable();
    }

    /**
     * Set the enableSiemensEnable property: Switch to show if License Service is activated.
     *
     * @param enableSiemensEnable the enableSiemensEnable value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withEnableSiemensEnable(Boolean enableSiemensEnable) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withEnableSiemensEnable(enableSiemensEnable);
        return this;
    }

    /**
     * Get the serverSiemensServer property: License Service server.
     *
     * @return the serverSiemensServer value.
     */
    public String serverSiemensServer() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().serverSiemensServer();
    }

    /**
     * Set the serverSiemensServer property: License Service server.
     *
     * @param serverSiemensServer the serverSiemensServer value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withServerSiemensServer(String serverSiemensServer) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withServerSiemensServer(serverSiemensServer);
        return this;
    }

    /**
     * Get the lmhostIdSiemensLmhostId property: Unique identifier of ModSim Workbench chamber license servers used by
     * FlexNet Licensing Service.
     *
     * @return the lmhostIdSiemensLmhostId value.
     */
    public List<String> lmhostIdSiemensLmhostId() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().lmhostIdSiemensLmhostId();
    }

    /**
     * Set the lmhostIdSiemensLmhostId property: Unique identifier of ModSim Workbench chamber license servers used by
     * FlexNet Licensing Service.
     *
     * @param lmhostIdSiemensLmhostId the lmhostIdSiemensLmhostId value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withLmhostIdSiemensLmhostId(List<String> lmhostIdSiemensLmhostId) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withLmhostIdSiemensLmhostId(lmhostIdSiemensLmhostId);
        return this;
    }

    /**
     * Get the enableSynopsysEnable property: Switch to show if License Service is activated.
     *
     * @return the enableSynopsysEnable value.
     */
    public Boolean enableSynopsysEnable() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().enableSynopsysEnable();
    }

    /**
     * Set the enableSynopsysEnable property: Switch to show if License Service is activated.
     *
     * @param enableSynopsysEnable the enableSynopsysEnable value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withEnableSynopsysEnable(Boolean enableSynopsysEnable) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withEnableSynopsysEnable(enableSynopsysEnable);
        return this;
    }

    /**
     * Get the serverSynopsysServer property: License Service server.
     *
     * @return the serverSynopsysServer value.
     */
    public String serverSynopsysServer() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().serverSynopsysServer();
    }

    /**
     * Set the serverSynopsysServer property: License Service server.
     *
     * @param serverSynopsysServer the serverSynopsysServer value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withServerSynopsysServer(String serverSynopsysServer) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withServerSynopsysServer(serverSynopsysServer);
        return this;
    }

    /**
     * Get the vmUuid property: Virtual machine universal unique identifier of ModSim Workbench chamber license servers
     * used by FlexNet Licensing Service.
     *
     * @return the vmUuid value.
     */
    public List<String> vmUuid() {
        return this.innerLicenseServices() == null ? null : this.innerLicenseServices().vmUuid();
    }

    /**
     * Set the vmUuid property: Virtual machine universal unique identifier of ModSim Workbench chamber license servers
     * used by FlexNet Licensing Service.
     *
     * @param vmUuid the vmUuid value to set.
     * @return the ChamberPropertiesFormat object itself.
     */
    public ChamberPropertiesFormat withVmUuid(List<String> vmUuid) {
        if (this.innerLicenseServices() == null) {
            this.innerLicenseServices = new ChamberPropertiesFormatLicenseServices();
        }
        this.innerLicenseServices().withVmUuid(vmUuid);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerLicenseServices() != null) {
            innerLicenseServices().validate();
        }
    }
}
