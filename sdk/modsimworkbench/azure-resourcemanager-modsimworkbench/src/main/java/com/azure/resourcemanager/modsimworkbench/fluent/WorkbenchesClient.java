// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.modsimworkbench.fluent.models.WorkbenchInner;

/** An instance of this class provides access to all the operations defined in WorkbenchesClient. */
public interface WorkbenchesClient {
    /**
     * Lists Workbenches by subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WorkbenchInner> list();

    /**
     * Lists Workbenches by subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WorkbenchInner> list(Context context);

    /**
     * Lists workbenches by resource group.
     *
     * @param resourceGroup the workbench name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WorkbenchInner> listByResourceGroup(String resourceGroup);

    /**
     * Lists workbenches by resource group.
     *
     * @param resourceGroup the workbench name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WorkbenchInner> listByResourceGroup(String resourceGroup, Context context);

    /**
     * Lists workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workbench resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkbenchInner>, WorkbenchInner> beginGetByResourceGroup(String resourceGroup, String name);

    /**
     * Lists workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workbench resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkbenchInner>, WorkbenchInner> beginGetByResourceGroup(
        String resourceGroup, String name, Context context);

    /**
     * Lists workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkbenchInner getByResourceGroup(String resourceGroup, String name);

    /**
     * Lists workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkbenchInner getByResourceGroup(String resourceGroup, String name, Context context);

    /**
     * Create workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workbench resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkbenchInner>, WorkbenchInner> beginCreateOrUpdate(String resourceGroup, String name);

    /**
     * Create workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @param body Parameters supplied to the create or update workbench operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workbench resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkbenchInner>, WorkbenchInner> beginCreateOrUpdate(
        String resourceGroup, String name, WorkbenchInner body, Context context);

    /**
     * Create workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkbenchInner createOrUpdate(String resourceGroup, String name);

    /**
     * Create workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @param body Parameters supplied to the create or update workbench operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkbenchInner createOrUpdate(String resourceGroup, String name, WorkbenchInner body, Context context);

    /**
     * Update workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @param body Parameters supplied to the create or update chamber operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<WorkbenchInner> updateWithResponse(
        String resourceGroup, String name, WorkbenchInner body, Context context);

    /**
     * Update workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkbenchInner update(String resourceGroup, String name);

    /**
     * Delete workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workbench resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkbenchInner>, WorkbenchInner> beginDelete(String resourceGroup, String name);

    /**
     * Delete workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workbench resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkbenchInner>, WorkbenchInner> beginDelete(
        String resourceGroup, String name, Context context);

    /**
     * Delete workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkbenchInner delete(String resourceGroup, String name);

    /**
     * Delete workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkbenchInner delete(String resourceGroup, String name, Context context);
}
