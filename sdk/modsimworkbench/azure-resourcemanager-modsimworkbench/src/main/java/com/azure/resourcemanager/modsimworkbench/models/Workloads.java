// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of Workloads. */
public interface Workloads {
    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop(String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop(String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Gets information about the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified workload along with {@link Response}.
     */
    Response<Workload> getWithResponse(
        String resourceGroup, String workbenchName, String chamberName, String workloadName, Context context);

    /**
     * Gets information about the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified workload.
     */
    Workload get(String resourceGroup, String workbenchName, String chamberName, String workloadName);

    /**
     * Deletes the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload resource.
     */
    Workload delete(String resourceGroup, String workbenchName, String chamberName, String workloadName);

    /**
     * Deletes the specified workload.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param workloadName The name of the workload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload resource.
     */
    Workload delete(
        String resourceGroup, String workbenchName, String chamberName, String workloadName, Context context);

    /**
     * Lists all workloads.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Workload> list(String resourceGroup, String workbenchName, String chamberName);

    /**
     * Lists all workloads.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Workload> list(String resourceGroup, String workbenchName, String chamberName, Context context);

    /**
     * Gets information about the specified workload.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified workload along with {@link Response}.
     */
    Workload getById(String id);

    /**
     * Gets information about the specified workload.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified workload along with {@link Response}.
     */
    Response<Workload> getByIdWithResponse(String id, Context context);

    /**
     * Deletes the specified workload.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload resource.
     */
    Workload deleteById(String id);

    /**
     * Deletes the specified workload.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload resource.
     */
    Workload deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Workload resource.
     *
     * @param name resource name.
     * @return the first stage of the new Workload definition.
     */
    Workload.DefinitionStages.Blank define(String name);
}
