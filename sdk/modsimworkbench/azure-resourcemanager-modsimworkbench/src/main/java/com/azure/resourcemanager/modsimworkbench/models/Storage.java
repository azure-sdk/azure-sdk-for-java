// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.modsimworkbench.fluent.models.StorageInner;
import java.util.Map;

/** An immutable client-side representation of Storage. */
public interface Storage {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: system data.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the sku property: Name of SKU.
     *
     * @return the sku value.
     */
    String sku();

    /**
     * Gets the provisioningState property: Gets the status of the storage at the time the operation was called.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the capacityAllocated property: Provisioned size of the ModSim Workbench chamber storage in terabytes.
     *
     * @return the capacityAllocated value.
     */
    Integer capacityAllocated();

    /**
     * Gets the performanceTier property: Specifies performance tier of the ModSim Workbench chamber storage.
     *
     * @return the performanceTier value.
     */
    PerformanceTier performanceTier();

    /**
     * Gets the localMountPath property: Directory where the SDW Private Storage volume mounted.
     *
     * @return the localMountPath value.
     */
    String localMountPath();

    /**
     * Gets the dataPipelineInboundPath property: Directory for the ModSim Workbench chamber data pipeline inbound.
     *
     * @return the dataPipelineInboundPath value.
     */
    String dataPipelineInboundPath();

    /**
     * Gets the dataPipelineOutboundPath property: Directory for the ModSim Workbench chamber data pipeline outbound.
     *
     * @return the dataPipelineOutboundPath value.
     */
    String dataPipelineOutboundPath();

    /**
     * Gets the capacityUsed property: Capacity used in the SDW Private Storage volume in gigabytes.
     *
     * @return the capacityUsed value.
     */
    Integer capacityUsed();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.modsimworkbench.fluent.models.StorageInner object.
     *
     * @return the inner object.
     */
    StorageInner innerModel();

    /** The entirety of the Storage definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The Storage definition stages. */
    interface DefinitionStages {
        /** The first stage of the Storage definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Storage definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the Storage definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroup, workbenchName, chamberName.
             *
             * @param resourceGroup The name of the resource group.
             * @param workbenchName The name of the workbench.
             * @param chamberName The name of the chamber.
             * @return the next definition stage.
             */
            WithCreate withExistingChamber(String resourceGroup, String workbenchName, String chamberName);
        }
        /**
         * The stage of the Storage definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSku,
                DefinitionStages.WithCapacityAllocated,
                DefinitionStages.WithPerformanceTier,
                DefinitionStages.WithLocalMountPath,
                DefinitionStages.WithDataPipelineInboundPath,
                DefinitionStages.WithDataPipelineOutboundPath,
                DefinitionStages.WithCapacityUsed {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Storage create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Storage create(Context context);
        }
        /** The stage of the Storage definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Storage definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Name of SKU..
             *
             * @param sku Name of SKU.
             * @return the next definition stage.
             */
            WithCreate withSku(String sku);
        }
        /** The stage of the Storage definition allowing to specify capacityAllocated. */
        interface WithCapacityAllocated {
            /**
             * Specifies the capacityAllocated property: Provisioned size of the ModSim Workbench chamber storage in
             * terabytes.
             *
             * @param capacityAllocated Provisioned size of the ModSim Workbench chamber storage in terabytes.
             * @return the next definition stage.
             */
            WithCreate withCapacityAllocated(Integer capacityAllocated);
        }
        /** The stage of the Storage definition allowing to specify performanceTier. */
        interface WithPerformanceTier {
            /**
             * Specifies the performanceTier property: Specifies performance tier of the ModSim Workbench chamber
             * storage..
             *
             * @param performanceTier Specifies performance tier of the ModSim Workbench chamber storage.
             * @return the next definition stage.
             */
            WithCreate withPerformanceTier(PerformanceTier performanceTier);
        }
        /** The stage of the Storage definition allowing to specify localMountPath. */
        interface WithLocalMountPath {
            /**
             * Specifies the localMountPath property: Directory where the SDW Private Storage volume mounted..
             *
             * @param localMountPath Directory where the SDW Private Storage volume mounted.
             * @return the next definition stage.
             */
            WithCreate withLocalMountPath(String localMountPath);
        }
        /** The stage of the Storage definition allowing to specify dataPipelineInboundPath. */
        interface WithDataPipelineInboundPath {
            /**
             * Specifies the dataPipelineInboundPath property: Directory for the ModSim Workbench chamber data pipeline
             * inbound..
             *
             * @param dataPipelineInboundPath Directory for the ModSim Workbench chamber data pipeline inbound.
             * @return the next definition stage.
             */
            WithCreate withDataPipelineInboundPath(String dataPipelineInboundPath);
        }
        /** The stage of the Storage definition allowing to specify dataPipelineOutboundPath. */
        interface WithDataPipelineOutboundPath {
            /**
             * Specifies the dataPipelineOutboundPath property: Directory for the ModSim Workbench chamber data pipeline
             * outbound..
             *
             * @param dataPipelineOutboundPath Directory for the ModSim Workbench chamber data pipeline outbound.
             * @return the next definition stage.
             */
            WithCreate withDataPipelineOutboundPath(String dataPipelineOutboundPath);
        }
        /** The stage of the Storage definition allowing to specify capacityUsed. */
        interface WithCapacityUsed {
            /**
             * Specifies the capacityUsed property: Capacity used in the SDW Private Storage volume in gigabytes..
             *
             * @param capacityUsed Capacity used in the SDW Private Storage volume in gigabytes.
             * @return the next definition stage.
             */
            WithCreate withCapacityUsed(Integer capacityUsed);
        }
    }
    /**
     * Begins update for the Storage resource.
     *
     * @return the stage of resource update.
     */
    Storage.Update update();

    /** The template for Storage update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithSku,
            UpdateStages.WithCapacityAllocated,
            UpdateStages.WithPerformanceTier,
            UpdateStages.WithLocalMountPath,
            UpdateStages.WithDataPipelineInboundPath,
            UpdateStages.WithDataPipelineOutboundPath,
            UpdateStages.WithCapacityUsed {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Storage apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Storage apply(Context context);
    }
    /** The Storage update stages. */
    interface UpdateStages {
        /** The stage of the Storage update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Storage update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Name of SKU..
             *
             * @param sku Name of SKU.
             * @return the next definition stage.
             */
            Update withSku(String sku);
        }
        /** The stage of the Storage update allowing to specify capacityAllocated. */
        interface WithCapacityAllocated {
            /**
             * Specifies the capacityAllocated property: Provisioned size of the ModSim Workbench chamber storage in
             * terabytes.
             *
             * @param capacityAllocated Provisioned size of the ModSim Workbench chamber storage in terabytes.
             * @return the next definition stage.
             */
            Update withCapacityAllocated(Integer capacityAllocated);
        }
        /** The stage of the Storage update allowing to specify performanceTier. */
        interface WithPerformanceTier {
            /**
             * Specifies the performanceTier property: Specifies performance tier of the ModSim Workbench chamber
             * storage..
             *
             * @param performanceTier Specifies performance tier of the ModSim Workbench chamber storage.
             * @return the next definition stage.
             */
            Update withPerformanceTier(PerformanceTier performanceTier);
        }
        /** The stage of the Storage update allowing to specify localMountPath. */
        interface WithLocalMountPath {
            /**
             * Specifies the localMountPath property: Directory where the SDW Private Storage volume mounted..
             *
             * @param localMountPath Directory where the SDW Private Storage volume mounted.
             * @return the next definition stage.
             */
            Update withLocalMountPath(String localMountPath);
        }
        /** The stage of the Storage update allowing to specify dataPipelineInboundPath. */
        interface WithDataPipelineInboundPath {
            /**
             * Specifies the dataPipelineInboundPath property: Directory for the ModSim Workbench chamber data pipeline
             * inbound..
             *
             * @param dataPipelineInboundPath Directory for the ModSim Workbench chamber data pipeline inbound.
             * @return the next definition stage.
             */
            Update withDataPipelineInboundPath(String dataPipelineInboundPath);
        }
        /** The stage of the Storage update allowing to specify dataPipelineOutboundPath. */
        interface WithDataPipelineOutboundPath {
            /**
             * Specifies the dataPipelineOutboundPath property: Directory for the ModSim Workbench chamber data pipeline
             * outbound..
             *
             * @param dataPipelineOutboundPath Directory for the ModSim Workbench chamber data pipeline outbound.
             * @return the next definition stage.
             */
            Update withDataPipelineOutboundPath(String dataPipelineOutboundPath);
        }
        /** The stage of the Storage update allowing to specify capacityUsed. */
        interface WithCapacityUsed {
            /**
             * Specifies the capacityUsed property: Capacity used in the SDW Private Storage volume in gigabytes..
             *
             * @param capacityUsed Capacity used in the SDW Private Storage volume in gigabytes.
             * @return the next definition stage.
             */
            Update withCapacityUsed(Integer capacityUsed);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Storage refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Storage refresh(Context context);
}
