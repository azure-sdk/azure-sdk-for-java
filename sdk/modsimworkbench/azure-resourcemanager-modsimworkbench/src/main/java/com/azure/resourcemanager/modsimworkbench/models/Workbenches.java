// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;

/** Resource collection API of Workbenches. */
public interface Workbenches {
    /**
     * Lists Workbenches by subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Workbench> list();

    /**
     * Lists Workbenches by subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Workbench> list(Context context);

    /**
     * Lists workbenches by resource group.
     *
     * @param resourceGroup the workbench name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Workbench> listByResourceGroup(String resourceGroup);

    /**
     * Lists workbenches by resource group.
     *
     * @param resourceGroup the workbench name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Workbench> listByResourceGroup(String resourceGroup, Context context);

    /**
     * Lists workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    Workbench getByResourceGroup(String resourceGroup, String name);

    /**
     * Lists workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    Workbench getByResourceGroup(String resourceGroup, String name, Context context);

    /**
     * Delete workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    Workbench deleteByResourceGroup(String resourceGroup, String name);

    /**
     * Delete workbenches.
     *
     * @param resourceGroup the resource group.
     * @param name the workbench name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    Workbench delete(String resourceGroup, String name, Context context);

    /**
     * Lists workbenches.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    Workbench getById(String id);

    /**
     * Lists workbenches.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    Workbench getByIdWithResponse(String id, Context context);

    /**
     * Delete workbenches.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    Workbench deleteById(String id);

    /**
     * Delete workbenches.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workbench resource.
     */
    Workbench deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Workbench resource.
     *
     * @param name resource name.
     * @return the first stage of the new Workbench definition.
     */
    Workbench.DefinitionStages.Blank define(String name);
}
