// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.modsimworkbench.fluent.WorkbenchesClient;
import com.azure.resourcemanager.modsimworkbench.fluent.models.WorkbenchInner;
import com.azure.resourcemanager.modsimworkbench.models.Workbench;
import com.azure.resourcemanager.modsimworkbench.models.Workbenches;

public final class WorkbenchesImpl implements Workbenches {
    private static final ClientLogger LOGGER = new ClientLogger(WorkbenchesImpl.class);

    private final WorkbenchesClient innerClient;

    private final com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager;

    public WorkbenchesImpl(
        WorkbenchesClient innerClient,
        com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Workbench> list() {
        PagedIterable<WorkbenchInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new WorkbenchImpl(inner1, this.manager()));
    }

    public PagedIterable<Workbench> list(Context context) {
        PagedIterable<WorkbenchInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new WorkbenchImpl(inner1, this.manager()));
    }

    public PagedIterable<Workbench> listByResourceGroup(String resourceGroup) {
        PagedIterable<WorkbenchInner> inner = this.serviceClient().listByResourceGroup(resourceGroup);
        return Utils.mapPage(inner, inner1 -> new WorkbenchImpl(inner1, this.manager()));
    }

    public PagedIterable<Workbench> listByResourceGroup(String resourceGroup, Context context) {
        PagedIterable<WorkbenchInner> inner = this.serviceClient().listByResourceGroup(resourceGroup, context);
        return Utils.mapPage(inner, inner1 -> new WorkbenchImpl(inner1, this.manager()));
    }

    public Workbench getByResourceGroup(String resourceGroup, String name) {
        WorkbenchInner inner = this.serviceClient().getByResourceGroup(resourceGroup, name);
        if (inner != null) {
            return new WorkbenchImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Workbench getByResourceGroup(String resourceGroup, String name, Context context) {
        WorkbenchInner inner = this.serviceClient().getByResourceGroup(resourceGroup, name, context);
        if (inner != null) {
            return new WorkbenchImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Workbench deleteByResourceGroup(String resourceGroup, String name) {
        WorkbenchInner inner = this.serviceClient().delete(resourceGroup, name);
        if (inner != null) {
            return new WorkbenchImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Workbench delete(String resourceGroup, String name, Context context) {
        WorkbenchInner inner = this.serviceClient().delete(resourceGroup, name, context);
        if (inner != null) {
            return new WorkbenchImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Workbench getById(String id) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "workbenches");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        return this.getByResourceGroup(resourceGroup, name, Context.NONE);
    }

    public Workbench getByIdWithResponse(String id, Context context) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "workbenches");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        return this.getByResourceGroup(resourceGroup, name, context);
    }

    public Workbench deleteById(String id) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "workbenches");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        return this.delete(resourceGroup, name, Context.NONE);
    }

    public Workbench deleteByIdWithResponse(String id, Context context) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "workbenches");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        return this.delete(resourceGroup, name, context);
    }

    private WorkbenchesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager manager() {
        return this.serviceManager;
    }

    public WorkbenchImpl define(String name) {
        return new WorkbenchImpl(name, this.manager());
    }
}
