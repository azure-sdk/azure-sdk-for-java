// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.implementation;

import com.azure.core.annotation.ServiceClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.management.polling.PollerFactory;
import com.azure.core.util.Context;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.modsimworkbench.fluent.ChambersClient;
import com.azure.resourcemanager.modsimworkbench.fluent.ConnectorsClient;
import com.azure.resourcemanager.modsimworkbench.fluent.FileOperationsClient;
import com.azure.resourcemanager.modsimworkbench.fluent.FileRequestOperationsClient;
import com.azure.resourcemanager.modsimworkbench.fluent.FileRequestsClient;
import com.azure.resourcemanager.modsimworkbench.fluent.FilesClient;
import com.azure.resourcemanager.modsimworkbench.fluent.MicrosoftModSimWorkbench;
import com.azure.resourcemanager.modsimworkbench.fluent.OperationsClient;
import com.azure.resourcemanager.modsimworkbench.fluent.StoragesClient;
import com.azure.resourcemanager.modsimworkbench.fluent.WorkbenchesClient;
import com.azure.resourcemanager.modsimworkbench.fluent.WorkloadsClient;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the MicrosoftModSimWorkbenchImpl type. */
@ServiceClient(builder = MicrosoftModSimWorkbenchBuilder.class)
public final class MicrosoftModSimWorkbenchImpl implements MicrosoftModSimWorkbench {
    /** The ID of the target subscription. */
    private final String subscriptionId;

    /**
     * Gets The ID of the target subscription.
     *
     * @return the subscriptionId value.
     */
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /** server parameter. */
    private final String endpoint;

    /**
     * Gets server parameter.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /** The default poll interval for long-running operation. */
    private final Duration defaultPollInterval;

    /**
     * Gets The default poll interval for long-running operation.
     *
     * @return the defaultPollInterval value.
     */
    public Duration getDefaultPollInterval() {
        return this.defaultPollInterval;
    }

    /** The OperationsClient object to access its operations. */
    private final OperationsClient operations;

    /**
     * Gets the OperationsClient object to access its operations.
     *
     * @return the OperationsClient object.
     */
    public OperationsClient getOperations() {
        return this.operations;
    }

    /** The WorkbenchesClient object to access its operations. */
    private final WorkbenchesClient workbenches;

    /**
     * Gets the WorkbenchesClient object to access its operations.
     *
     * @return the WorkbenchesClient object.
     */
    public WorkbenchesClient getWorkbenches() {
        return this.workbenches;
    }

    /** The ConnectorsClient object to access its operations. */
    private final ConnectorsClient connectors;

    /**
     * Gets the ConnectorsClient object to access its operations.
     *
     * @return the ConnectorsClient object.
     */
    public ConnectorsClient getConnectors() {
        return this.connectors;
    }

    /** The ChambersClient object to access its operations. */
    private final ChambersClient chambers;

    /**
     * Gets the ChambersClient object to access its operations.
     *
     * @return the ChambersClient object.
     */
    public ChambersClient getChambers() {
        return this.chambers;
    }

    /** The WorkloadsClient object to access its operations. */
    private final WorkloadsClient workloads;

    /**
     * Gets the WorkloadsClient object to access its operations.
     *
     * @return the WorkloadsClient object.
     */
    public WorkloadsClient getWorkloads() {
        return this.workloads;
    }

    /** The StoragesClient object to access its operations. */
    private final StoragesClient storages;

    /**
     * Gets the StoragesClient object to access its operations.
     *
     * @return the StoragesClient object.
     */
    public StoragesClient getStorages() {
        return this.storages;
    }

    /** The FilesClient object to access its operations. */
    private final FilesClient files;

    /**
     * Gets the FilesClient object to access its operations.
     *
     * @return the FilesClient object.
     */
    public FilesClient getFiles() {
        return this.files;
    }

    /** The FileOperationsClient object to access its operations. */
    private final FileOperationsClient fileOperations;

    /**
     * Gets the FileOperationsClient object to access its operations.
     *
     * @return the FileOperationsClient object.
     */
    public FileOperationsClient getFileOperations() {
        return this.fileOperations;
    }

    /** The FileRequestsClient object to access its operations. */
    private final FileRequestsClient fileRequests;

    /**
     * Gets the FileRequestsClient object to access its operations.
     *
     * @return the FileRequestsClient object.
     */
    public FileRequestsClient getFileRequests() {
        return this.fileRequests;
    }

    /** The FileRequestOperationsClient object to access its operations. */
    private final FileRequestOperationsClient fileRequestOperations;

    /**
     * Gets the FileRequestOperationsClient object to access its operations.
     *
     * @return the FileRequestOperationsClient object.
     */
    public FileRequestOperationsClient getFileRequestOperations() {
        return this.fileRequestOperations;
    }

    /**
     * Initializes an instance of MicrosoftModSimWorkbench client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param defaultPollInterval The default poll interval for long-running operation.
     * @param environment The Azure environment.
     * @param subscriptionId The ID of the target subscription.
     * @param endpoint server parameter.
     */
    MicrosoftModSimWorkbenchImpl(
        HttpPipeline httpPipeline,
        SerializerAdapter serializerAdapter,
        Duration defaultPollInterval,
        AzureEnvironment environment,
        String subscriptionId,
        String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.defaultPollInterval = defaultPollInterval;
        this.subscriptionId = subscriptionId;
        this.endpoint = endpoint;
        this.apiVersion = "2021-03-01-preview";
        this.operations = new OperationsClientImpl(this);
        this.workbenches = new WorkbenchesClientImpl(this);
        this.connectors = new ConnectorsClientImpl(this);
        this.chambers = new ChambersClientImpl(this);
        this.workloads = new WorkloadsClientImpl(this);
        this.storages = new StoragesClientImpl(this);
        this.files = new FilesClientImpl(this);
        this.fileOperations = new FileOperationsClientImpl(this);
        this.fileRequests = new FileRequestsClientImpl(this);
        this.fileRequestOperations = new FileRequestOperationsClientImpl(this);
    }

    /**
     * Gets default client context.
     *
     * @return the default client context.
     */
    public Context getContext() {
        return Context.NONE;
    }

    /**
     * Merges default client context with provided context.
     *
     * @param context the context to be merged with default client context.
     * @return the merged context.
     */
    public Context mergeContext(Context context) {
        return CoreUtils.mergeContexts(this.getContext(), context);
    }

    /**
     * Gets long running operation result.
     *
     * @param activationResponse the response of activation operation.
     * @param httpPipeline the http pipeline.
     * @param pollResultType type of poll result.
     * @param finalResultType type of final result.
     * @param context the context shared by all requests.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return poller flux for poll result and final result.
     */
    public <T, U> PollerFlux<PollResult<T>, U> getLroResult(
        Mono<Response<Flux<ByteBuffer>>> activationResponse,
        HttpPipeline httpPipeline,
        Type pollResultType,
        Type finalResultType,
        Context context) {
        return PollerFactory
            .create(
                serializerAdapter,
                httpPipeline,
                pollResultType,
                finalResultType,
                defaultPollInterval,
                activationResponse,
                context);
    }

    /**
     * Gets the final result, or an error, based on last async poll response.
     *
     * @param response the last async poll response.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return the final result, or an error.
     */
    public <T, U> Mono<U> getLroFinalResultOrError(AsyncPollResponse<PollResult<T>, U> response) {
        if (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {
            String errorMessage;
            ManagementError managementError = null;
            HttpResponse errorResponse = null;
            PollResult.Error lroError = response.getValue().getError();
            if (lroError != null) {
                errorResponse =
                    new HttpResponseImpl(
                        lroError.getResponseStatusCode(), lroError.getResponseHeaders(), lroError.getResponseBody());

                errorMessage = response.getValue().getError().getMessage();
                String errorBody = response.getValue().getError().getResponseBody();
                if (errorBody != null) {
                    // try to deserialize error body to ManagementError
                    try {
                        managementError =
                            this
                                .getSerializerAdapter()
                                .deserialize(errorBody, ManagementError.class, SerializerEncoding.JSON);
                        if (managementError.getCode() == null || managementError.getMessage() == null) {
                            managementError = null;
                        }
                    } catch (IOException | RuntimeException ioe) {
                        LOGGER.logThrowableAsWarning(ioe);
                    }
                }
            } else {
                // fallback to default error message
                errorMessage = "Long running operation failed.";
            }
            if (managementError == null) {
                // fallback to default ManagementError
                managementError = new ManagementError(response.getStatus().toString(), errorMessage);
            }
            return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));
        } else {
            return response.getFinalResult();
        }
    }

    private static final class HttpResponseImpl extends HttpResponse {
        private final int statusCode;

        private final byte[] responseBody;

        private final HttpHeaders httpHeaders;

        HttpResponseImpl(int statusCode, HttpHeaders httpHeaders, String responseBody) {
            super(null);
            this.statusCode = statusCode;
            this.httpHeaders = httpHeaders;
            this.responseBody = responseBody == null ? null : responseBody.getBytes(StandardCharsets.UTF_8);
        }

        public int getStatusCode() {
            return statusCode;
        }

        public String getHeaderValue(String s) {
            return httpHeaders.getValue(s);
        }

        public HttpHeaders getHeaders() {
            return httpHeaders;
        }

        public Flux<ByteBuffer> getBody() {
            return Flux.just(ByteBuffer.wrap(responseBody));
        }

        public Mono<byte[]> getBodyAsByteArray() {
            return Mono.just(responseBody);
        }

        public Mono<String> getBodyAsString() {
            return Mono.just(new String(responseBody, StandardCharsets.UTF_8));
        }

        public Mono<String> getBodyAsString(Charset charset) {
            return Mono.just(new String(responseBody, charset));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MicrosoftModSimWorkbenchImpl.class);
}
