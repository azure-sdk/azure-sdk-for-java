// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.modsimworkbench.models.ProvisioningState;
import com.azure.resourcemanager.modsimworkbench.models.RequestPropertiesFormatApprove;
import com.azure.resourcemanager.modsimworkbench.models.RequestPropertiesFormatDownload;
import com.azure.resourcemanager.modsimworkbench.models.RequestPropertiesFormatInternalMetadata;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** File requests properties. */
@Fluent
public final class RequestPropertiesFormat {
    /*
     * The timestamp for the resource creation.
     */
    @JsonProperty(value = "timestamp")
    private OffsetDateTime timestamp;

    /*
     * FileId for the operation
     */
    @JsonProperty(value = "fileId")
    private String fileId;

    /*
     * Specifies the principal ID of Azure Active Directory User who requested to download.
     */
    @JsonProperty(value = "requestUserId")
    private String requestUserId;

    /*
     * The ModSim Workbench chamber workloads local username used when login.
     */
    @JsonProperty(value = "linuxUsername")
    private String linuxUsername;

    /*
     * The status of ModSim Workbench chamber data pipeline request.
     */
    @JsonProperty(value = "status")
    private String status;

    /*
     * Description for the operation
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The approve property.
     */
    @JsonProperty(value = "approve")
    private RequestPropertiesFormatApprove approve;

    /*
     * The download property.
     */
    @JsonProperty(value = "download")
    private RequestPropertiesFormatDownload download;

    /*
     * The internalMetadata property.
     */
    @JsonProperty(value = "internalMetadata")
    private RequestPropertiesFormatInternalMetadata internalMetadata;

    /*
     * Gets the status of the request at the time the operation was called
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of RequestPropertiesFormat class. */
    public RequestPropertiesFormat() {
    }

    /**
     * Get the timestamp property: The timestamp for the resource creation.
     *
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: The timestamp for the resource creation.
     *
     * @param timestamp the timestamp value to set.
     * @return the RequestPropertiesFormat object itself.
     */
    public RequestPropertiesFormat withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the fileId property: FileId for the operation.
     *
     * @return the fileId value.
     */
    public String fileId() {
        return this.fileId;
    }

    /**
     * Set the fileId property: FileId for the operation.
     *
     * @param fileId the fileId value to set.
     * @return the RequestPropertiesFormat object itself.
     */
    public RequestPropertiesFormat withFileId(String fileId) {
        this.fileId = fileId;
        return this;
    }

    /**
     * Get the requestUserId property: Specifies the principal ID of Azure Active Directory User who requested to
     * download.
     *
     * @return the requestUserId value.
     */
    public String requestUserId() {
        return this.requestUserId;
    }

    /**
     * Set the requestUserId property: Specifies the principal ID of Azure Active Directory User who requested to
     * download.
     *
     * @param requestUserId the requestUserId value to set.
     * @return the RequestPropertiesFormat object itself.
     */
    public RequestPropertiesFormat withRequestUserId(String requestUserId) {
        this.requestUserId = requestUserId;
        return this;
    }

    /**
     * Get the linuxUsername property: The ModSim Workbench chamber workloads local username used when login.
     *
     * @return the linuxUsername value.
     */
    public String linuxUsername() {
        return this.linuxUsername;
    }

    /**
     * Set the linuxUsername property: The ModSim Workbench chamber workloads local username used when login.
     *
     * @param linuxUsername the linuxUsername value to set.
     * @return the RequestPropertiesFormat object itself.
     */
    public RequestPropertiesFormat withLinuxUsername(String linuxUsername) {
        this.linuxUsername = linuxUsername;
        return this;
    }

    /**
     * Get the status property: The status of ModSim Workbench chamber data pipeline request.
     *
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: The status of ModSim Workbench chamber data pipeline request.
     *
     * @param status the status value to set.
     * @return the RequestPropertiesFormat object itself.
     */
    public RequestPropertiesFormat withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the description property: Description for the operation.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description for the operation.
     *
     * @param description the description value to set.
     * @return the RequestPropertiesFormat object itself.
     */
    public RequestPropertiesFormat withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the approve property: The approve property.
     *
     * @return the approve value.
     */
    public RequestPropertiesFormatApprove approve() {
        return this.approve;
    }

    /**
     * Set the approve property: The approve property.
     *
     * @param approve the approve value to set.
     * @return the RequestPropertiesFormat object itself.
     */
    public RequestPropertiesFormat withApprove(RequestPropertiesFormatApprove approve) {
        this.approve = approve;
        return this;
    }

    /**
     * Get the download property: The download property.
     *
     * @return the download value.
     */
    public RequestPropertiesFormatDownload download() {
        return this.download;
    }

    /**
     * Set the download property: The download property.
     *
     * @param download the download value to set.
     * @return the RequestPropertiesFormat object itself.
     */
    public RequestPropertiesFormat withDownload(RequestPropertiesFormatDownload download) {
        this.download = download;
        return this;
    }

    /**
     * Get the internalMetadata property: The internalMetadata property.
     *
     * @return the internalMetadata value.
     */
    public RequestPropertiesFormatInternalMetadata internalMetadata() {
        return this.internalMetadata;
    }

    /**
     * Set the internalMetadata property: The internalMetadata property.
     *
     * @param internalMetadata the internalMetadata value to set.
     * @return the RequestPropertiesFormat object itself.
     */
    public RequestPropertiesFormat withInternalMetadata(RequestPropertiesFormatInternalMetadata internalMetadata) {
        this.internalMetadata = internalMetadata;
        return this;
    }

    /**
     * Get the provisioningState property: Gets the status of the request at the time the operation was called.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (approve() != null) {
            approve().validate();
        }
        if (download() != null) {
            download().validate();
        }
        if (internalMetadata() != null) {
            internalMetadata().validate();
        }
    }
}
