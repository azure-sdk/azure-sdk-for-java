// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.modsimworkbench.fluent.ChambersClient;
import com.azure.resourcemanager.modsimworkbench.fluent.models.ChamberInner;
import com.azure.resourcemanager.modsimworkbench.fluent.models.GetUploadUriInner;
import com.azure.resourcemanager.modsimworkbench.models.ChamberPageableList;
import com.azure.resourcemanager.modsimworkbench.models.FileUploadParameters;
import com.azure.resourcemanager.modsimworkbench.models.RestartLicenseParameters;
import com.azure.resourcemanager.modsimworkbench.models.UpdateLicenseParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ChambersClient. */
public final class ChambersClientImpl implements ChambersClient {
    /** The proxy service used to perform REST calls. */
    private final ChambersService service;

    /** The service client containing this operation class. */
    private final MicrosoftModSimWorkbenchImpl client;

    /**
     * Initializes an instance of ChambersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ChambersClientImpl(MicrosoftModSimWorkbenchImpl client) {
        this.service = RestProxy.create(ChambersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftModSimWorkbenchChambers to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftModSimWorkb")
    public interface ChambersService {
        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{name}/getUploadUri")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GetUploadUriInner>> getUploadUri(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroup") String resourceGroup,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("name") String name,
            @BodyParam("application/json") FileUploadParameters body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{name}/start")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> start(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroup") String resourceGroup,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("name") String name,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{name}/stop")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> stop(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroup") String resourceGroup,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("name") String name,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{name}/restart")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> restart(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroup") String resourceGroup,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("name") String name,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{name}/licenseUpdate")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> licenseUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroup") String resourceGroup,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("name") String name,
            @BodyParam("application/json") UpdateLicenseParameters body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{name}/licenseRestart")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> licenseRestart(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroup") String resourceGroup,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("name") String name,
            @BodyParam("application/json") RestartLicenseParameters body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{chamberName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroup") String resourceGroup,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("chamberName") String chamberName,
            @BodyParam("application/json") ChamberInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{chamberName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ChamberInner>> update(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroup") String resourceGroup,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("chamberName") String chamberName,
            @BodyParam("application/json") ChamberInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{chamberName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ChamberInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroup") String resourceGroup,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("chamberName") String chamberName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{chamberName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroup") String resourceGroup,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("chamberName") String chamberName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ChamberPageableList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroup") String resourceGroup,
            @PathParam("workbenchName") String workbenchName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ChamberPageableList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets a URI to upload files to the specified Chamber resource.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body the file upload parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a URI to upload files to the specified Chamber resource along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetUploadUriInner>> getUploadUriWithResponseAsync(
        String resourceGroup, String workbenchName, String name, FileUploadParameters body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getUploadUri(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroup,
                            workbenchName,
                            name,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a URI to upload files to the specified Chamber resource.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body the file upload parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a URI to upload files to the specified Chamber resource along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetUploadUriInner>> getUploadUriWithResponseAsync(
        String resourceGroup, String workbenchName, String name, FileUploadParameters body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getUploadUri(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroup,
                workbenchName,
                name,
                body,
                accept,
                context);
    }

    /**
     * Gets a URI to upload files to the specified Chamber resource.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a URI to upload files to the specified Chamber resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetUploadUriInner> getUploadUriAsync(String resourceGroup, String workbenchName, String name) {
        final FileUploadParameters body = null;
        return getUploadUriWithResponseAsync(resourceGroup, workbenchName, name, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a URI to upload files to the specified Chamber resource.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body the file upload parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a URI to upload files to the specified Chamber resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetUploadUriInner> getUploadUriWithResponse(
        String resourceGroup, String workbenchName, String name, FileUploadParameters body, Context context) {
        return getUploadUriWithResponseAsync(resourceGroup, workbenchName, name, body, context).block();
    }

    /**
     * Gets a URI to upload files to the specified Chamber resource.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a URI to upload files to the specified Chamber resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetUploadUriInner getUploadUri(String resourceGroup, String workbenchName, String name) {
        final FileUploadParameters body = null;
        return getUploadUriWithResponse(resourceGroup, workbenchName, name, body, Context.NONE).getValue();
    }

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> startWithResponseAsync(
        String resourceGroup, String workbenchName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .start(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroup,
                            workbenchName,
                            name,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> startWithResponseAsync(
        String resourceGroup, String workbenchName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .start(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroup,
                workbenchName,
                name,
                accept,
                context);
    }

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginStartAsync(
        String resourceGroup, String workbenchName, String name) {
        Mono<Response<Flux<ByteBuffer>>> mono = startWithResponseAsync(resourceGroup, workbenchName, name);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginStartAsync(
        String resourceGroup, String workbenchName, String name, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = startWithResponseAsync(resourceGroup, workbenchName, name, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginStart(String resourceGroup, String workbenchName, String name) {
        return this.beginStartAsync(resourceGroup, workbenchName, name).getSyncPoller();
    }

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginStart(
        String resourceGroup, String workbenchName, String name, Context context) {
        return this.beginStartAsync(resourceGroup, workbenchName, name, context).getSyncPoller();
    }

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> startAsync(String resourceGroup, String workbenchName, String name) {
        return beginStartAsync(resourceGroup, workbenchName, name)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> startAsync(String resourceGroup, String workbenchName, String name, Context context) {
        return beginStartAsync(resourceGroup, workbenchName, name, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void start(String resourceGroup, String workbenchName, String name) {
        startAsync(resourceGroup, workbenchName, name).block();
    }

    /**
     * Perform Start operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void start(String resourceGroup, String workbenchName, String name, Context context) {
        startAsync(resourceGroup, workbenchName, name, context).block();
    }

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> stopWithResponseAsync(
        String resourceGroup, String workbenchName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .stop(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroup,
                            workbenchName,
                            name,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> stopWithResponseAsync(
        String resourceGroup, String workbenchName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .stop(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroup,
                workbenchName,
                name,
                accept,
                context);
    }

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginStopAsync(String resourceGroup, String workbenchName, String name) {
        Mono<Response<Flux<ByteBuffer>>> mono = stopWithResponseAsync(resourceGroup, workbenchName, name);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginStopAsync(
        String resourceGroup, String workbenchName, String name, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = stopWithResponseAsync(resourceGroup, workbenchName, name, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginStop(String resourceGroup, String workbenchName, String name) {
        return this.beginStopAsync(resourceGroup, workbenchName, name).getSyncPoller();
    }

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginStop(
        String resourceGroup, String workbenchName, String name, Context context) {
        return this.beginStopAsync(resourceGroup, workbenchName, name, context).getSyncPoller();
    }

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> stopAsync(String resourceGroup, String workbenchName, String name) {
        return beginStopAsync(resourceGroup, workbenchName, name).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> stopAsync(String resourceGroup, String workbenchName, String name, Context context) {
        return beginStopAsync(resourceGroup, workbenchName, name, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stop(String resourceGroup, String workbenchName, String name) {
        stopAsync(resourceGroup, workbenchName, name).block();
    }

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stop(String resourceGroup, String workbenchName, String name, Context context) {
        stopAsync(resourceGroup, workbenchName, name, context).block();
    }

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restartWithResponseAsync(
        String resourceGroup, String workbenchName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .restart(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroup,
                            workbenchName,
                            name,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restartWithResponseAsync(
        String resourceGroup, String workbenchName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .restart(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroup,
                workbenchName,
                name,
                accept,
                context);
    }

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginRestartAsync(
        String resourceGroup, String workbenchName, String name) {
        Mono<Response<Flux<ByteBuffer>>> mono = restartWithResponseAsync(resourceGroup, workbenchName, name);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginRestartAsync(
        String resourceGroup, String workbenchName, String name, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = restartWithResponseAsync(resourceGroup, workbenchName, name, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginRestart(String resourceGroup, String workbenchName, String name) {
        return this.beginRestartAsync(resourceGroup, workbenchName, name).getSyncPoller();
    }

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginRestart(
        String resourceGroup, String workbenchName, String name, Context context) {
        return this.beginRestartAsync(resourceGroup, workbenchName, name, context).getSyncPoller();
    }

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restartAsync(String resourceGroup, String workbenchName, String name) {
        return beginRestartAsync(resourceGroup, workbenchName, name)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restartAsync(String resourceGroup, String workbenchName, String name, Context context) {
        return beginRestartAsync(resourceGroup, workbenchName, name, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restart(String resourceGroup, String workbenchName, String name) {
        restartAsync(resourceGroup, workbenchName, name).block();
    }

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restart(String resourceGroup, String workbenchName, String name, Context context) {
        restartAsync(resourceGroup, workbenchName, name, context).block();
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body the update license services parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> licenseUpdateWithResponseAsync(
        String resourceGroup, String workbenchName, String name, UpdateLicenseParameters body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .licenseUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroup,
                            workbenchName,
                            name,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body the update license services parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> licenseUpdateWithResponseAsync(
        String resourceGroup, String workbenchName, String name, UpdateLicenseParameters body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .licenseUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroup,
                workbenchName,
                name,
                body,
                accept,
                context);
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body the update license services parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginLicenseUpdateAsync(
        String resourceGroup, String workbenchName, String name, UpdateLicenseParameters body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            licenseUpdateWithResponseAsync(resourceGroup, workbenchName, name, body);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginLicenseUpdateAsync(
        String resourceGroup, String workbenchName, String name) {
        final UpdateLicenseParameters body = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            licenseUpdateWithResponseAsync(resourceGroup, workbenchName, name, body);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body the update license services parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginLicenseUpdateAsync(
        String resourceGroup, String workbenchName, String name, UpdateLicenseParameters body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            licenseUpdateWithResponseAsync(resourceGroup, workbenchName, name, body, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginLicenseUpdate(
        String resourceGroup, String workbenchName, String name) {
        final UpdateLicenseParameters body = null;
        return this.beginLicenseUpdateAsync(resourceGroup, workbenchName, name, body).getSyncPoller();
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body the update license services parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginLicenseUpdate(
        String resourceGroup, String workbenchName, String name, UpdateLicenseParameters body, Context context) {
        return this.beginLicenseUpdateAsync(resourceGroup, workbenchName, name, body, context).getSyncPoller();
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body the update license services parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> licenseUpdateAsync(
        String resourceGroup, String workbenchName, String name, UpdateLicenseParameters body) {
        return beginLicenseUpdateAsync(resourceGroup, workbenchName, name, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> licenseUpdateAsync(String resourceGroup, String workbenchName, String name) {
        final UpdateLicenseParameters body = null;
        return beginLicenseUpdateAsync(resourceGroup, workbenchName, name, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body the update license services parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> licenseUpdateAsync(
        String resourceGroup, String workbenchName, String name, UpdateLicenseParameters body, Context context) {
        return beginLicenseUpdateAsync(resourceGroup, workbenchName, name, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void licenseUpdate(String resourceGroup, String workbenchName, String name) {
        final UpdateLicenseParameters body = null;
        licenseUpdateAsync(resourceGroup, workbenchName, name, body).block();
    }

    /**
     * Perform Update LicenseServices operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body the update license services parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void licenseUpdate(
        String resourceGroup, String workbenchName, String name, UpdateLicenseParameters body, Context context) {
        licenseUpdateAsync(resourceGroup, workbenchName, name, body, context).block();
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body Restart License body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> licenseRestartWithResponseAsync(
        String resourceGroup, String workbenchName, String name, RestartLicenseParameters body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .licenseRestart(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroup,
                            workbenchName,
                            name,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body Restart License body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> licenseRestartWithResponseAsync(
        String resourceGroup, String workbenchName, String name, RestartLicenseParameters body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .licenseRestart(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroup,
                workbenchName,
                name,
                body,
                accept,
                context);
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body Restart License body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginLicenseRestartAsync(
        String resourceGroup, String workbenchName, String name, RestartLicenseParameters body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            licenseRestartWithResponseAsync(resourceGroup, workbenchName, name, body);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginLicenseRestartAsync(
        String resourceGroup, String workbenchName, String name) {
        final RestartLicenseParameters body = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            licenseRestartWithResponseAsync(resourceGroup, workbenchName, name, body);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body Restart License body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginLicenseRestartAsync(
        String resourceGroup, String workbenchName, String name, RestartLicenseParameters body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            licenseRestartWithResponseAsync(resourceGroup, workbenchName, name, body, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginLicenseRestart(
        String resourceGroup, String workbenchName, String name) {
        final RestartLicenseParameters body = null;
        return this.beginLicenseRestartAsync(resourceGroup, workbenchName, name, body).getSyncPoller();
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body Restart License body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginLicenseRestart(
        String resourceGroup, String workbenchName, String name, RestartLicenseParameters body, Context context) {
        return this.beginLicenseRestartAsync(resourceGroup, workbenchName, name, body, context).getSyncPoller();
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body Restart License body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> licenseRestartAsync(
        String resourceGroup, String workbenchName, String name, RestartLicenseParameters body) {
        return beginLicenseRestartAsync(resourceGroup, workbenchName, name, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> licenseRestartAsync(String resourceGroup, String workbenchName, String name) {
        final RestartLicenseParameters body = null;
        return beginLicenseRestartAsync(resourceGroup, workbenchName, name, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body Restart License body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> licenseRestartAsync(
        String resourceGroup, String workbenchName, String name, RestartLicenseParameters body, Context context) {
        return beginLicenseRestartAsync(resourceGroup, workbenchName, name, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void licenseRestart(String resourceGroup, String workbenchName, String name) {
        final RestartLicenseParameters body = null;
        licenseRestartAsync(resourceGroup, workbenchName, name, body).block();
    }

    /**
     * Perform License Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param name the chamber name.
     * @param body Restart License body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void licenseRestart(
        String resourceGroup, String workbenchName, String name, RestartLicenseParameters body, Context context) {
        licenseRestartAsync(resourceGroup, workbenchName, name, body, context).block();
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param parameters Parameters supplied to the create or update chamber operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroup, String workbenchName, String chamberName, ChamberInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (parameters != null) {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroup,
                            workbenchName,
                            chamberName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param parameters Parameters supplied to the create or update chamber operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroup, String workbenchName, String chamberName, ChamberInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (parameters != null) {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroup,
                workbenchName,
                chamberName,
                parameters,
                accept,
                context);
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param parameters Parameters supplied to the create or update chamber operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of chamber resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ChamberInner>, ChamberInner> beginCreateOrUpdateAsync(
        String resourceGroup, String workbenchName, String chamberName, ChamberInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroup, workbenchName, chamberName, parameters);
        return this
            .client
            .<ChamberInner, ChamberInner>getLroResult(
                mono, this.client.getHttpPipeline(), ChamberInner.class, ChamberInner.class, this.client.getContext());
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of chamber resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ChamberInner>, ChamberInner> beginCreateOrUpdateAsync(
        String resourceGroup, String workbenchName, String chamberName) {
        final ChamberInner parameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroup, workbenchName, chamberName, parameters);
        return this
            .client
            .<ChamberInner, ChamberInner>getLroResult(
                mono, this.client.getHttpPipeline(), ChamberInner.class, ChamberInner.class, this.client.getContext());
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param parameters Parameters supplied to the create or update chamber operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of chamber resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ChamberInner>, ChamberInner> beginCreateOrUpdateAsync(
        String resourceGroup, String workbenchName, String chamberName, ChamberInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroup, workbenchName, chamberName, parameters, context);
        return this
            .client
            .<ChamberInner, ChamberInner>getLroResult(
                mono, this.client.getHttpPipeline(), ChamberInner.class, ChamberInner.class, context);
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of chamber resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ChamberInner>, ChamberInner> beginCreateOrUpdate(
        String resourceGroup, String workbenchName, String chamberName) {
        final ChamberInner parameters = null;
        return this.beginCreateOrUpdateAsync(resourceGroup, workbenchName, chamberName, parameters).getSyncPoller();
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param parameters Parameters supplied to the create or update chamber operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of chamber resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ChamberInner>, ChamberInner> beginCreateOrUpdate(
        String resourceGroup, String workbenchName, String chamberName, ChamberInner parameters, Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroup, workbenchName, chamberName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param parameters Parameters supplied to the create or update chamber operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ChamberInner> createOrUpdateAsync(
        String resourceGroup, String workbenchName, String chamberName, ChamberInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroup, workbenchName, chamberName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ChamberInner> createOrUpdateAsync(String resourceGroup, String workbenchName, String chamberName) {
        final ChamberInner parameters = null;
        return beginCreateOrUpdateAsync(resourceGroup, workbenchName, chamberName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param parameters Parameters supplied to the create or update chamber operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ChamberInner> createOrUpdateAsync(
        String resourceGroup, String workbenchName, String chamberName, ChamberInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroup, workbenchName, chamberName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChamberInner createOrUpdate(String resourceGroup, String workbenchName, String chamberName) {
        final ChamberInner parameters = null;
        return createOrUpdateAsync(resourceGroup, workbenchName, chamberName, parameters).block();
    }

    /**
     * Creates or updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param parameters Parameters supplied to the create or update chamber operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChamberInner createOrUpdate(
        String resourceGroup, String workbenchName, String chamberName, ChamberInner parameters, Context context) {
        return createOrUpdateAsync(resourceGroup, workbenchName, chamberName, parameters, context).block();
    }

    /**
     * Updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param parameters Parameters supplied to the create or update Chamber operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ChamberInner>> updateWithResponseAsync(
        String resourceGroup, String workbenchName, String chamberName, ChamberInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (parameters != null) {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroup,
                            workbenchName,
                            chamberName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param parameters Parameters supplied to the create or update Chamber operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ChamberInner>> updateWithResponseAsync(
        String resourceGroup, String workbenchName, String chamberName, ChamberInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (parameters != null) {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroup,
                workbenchName,
                chamberName,
                parameters,
                accept,
                context);
    }

    /**
     * Updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ChamberInner> updateAsync(String resourceGroup, String workbenchName, String chamberName) {
        final ChamberInner parameters = null;
        return updateWithResponseAsync(resourceGroup, workbenchName, chamberName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param parameters Parameters supplied to the create or update Chamber operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ChamberInner> updateWithResponse(
        String resourceGroup, String workbenchName, String chamberName, ChamberInner parameters, Context context) {
        return updateWithResponseAsync(resourceGroup, workbenchName, chamberName, parameters, context).block();
    }

    /**
     * Updates the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChamberInner update(String resourceGroup, String workbenchName, String chamberName) {
        final ChamberInner parameters = null;
        return updateWithResponse(resourceGroup, workbenchName, chamberName, parameters, Context.NONE).getValue();
    }

    /**
     * Gets information about the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Chamber along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ChamberInner>> getWithResponseAsync(
        String resourceGroup, String workbenchName, String chamberName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroup,
                            workbenchName,
                            chamberName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Chamber along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ChamberInner>> getWithResponseAsync(
        String resourceGroup, String workbenchName, String chamberName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroup,
                workbenchName,
                chamberName,
                accept,
                context);
    }

    /**
     * Gets information about the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Chamber on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ChamberInner> getAsync(String resourceGroup, String workbenchName, String chamberName) {
        return getWithResponseAsync(resourceGroup, workbenchName, chamberName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets information about the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Chamber along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ChamberInner> getWithResponse(
        String resourceGroup, String workbenchName, String chamberName, Context context) {
        return getWithResponseAsync(resourceGroup, workbenchName, chamberName, context).block();
    }

    /**
     * Gets information about the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Chamber.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChamberInner get(String resourceGroup, String workbenchName, String chamberName) {
        return getWithResponse(resourceGroup, workbenchName, chamberName, Context.NONE).getValue();
    }

    /**
     * Deletes the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroup, String workbenchName, String chamberName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroup,
                            workbenchName,
                            chamberName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroup, String workbenchName, String chamberName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroup,
                workbenchName,
                chamberName,
                accept,
                context);
    }

    /**
     * Deletes the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of chamber resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ChamberInner>, ChamberInner> beginDeleteAsync(
        String resourceGroup, String workbenchName, String chamberName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroup, workbenchName, chamberName);
        return this
            .client
            .<ChamberInner, ChamberInner>getLroResult(
                mono, this.client.getHttpPipeline(), ChamberInner.class, ChamberInner.class, this.client.getContext());
    }

    /**
     * Deletes the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of chamber resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ChamberInner>, ChamberInner> beginDeleteAsync(
        String resourceGroup, String workbenchName, String chamberName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroup, workbenchName, chamberName, context);
        return this
            .client
            .<ChamberInner, ChamberInner>getLroResult(
                mono, this.client.getHttpPipeline(), ChamberInner.class, ChamberInner.class, context);
    }

    /**
     * Deletes the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of chamber resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ChamberInner>, ChamberInner> beginDelete(
        String resourceGroup, String workbenchName, String chamberName) {
        return this.beginDeleteAsync(resourceGroup, workbenchName, chamberName).getSyncPoller();
    }

    /**
     * Deletes the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of chamber resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ChamberInner>, ChamberInner> beginDelete(
        String resourceGroup, String workbenchName, String chamberName, Context context) {
        return this.beginDeleteAsync(resourceGroup, workbenchName, chamberName, context).getSyncPoller();
    }

    /**
     * Deletes the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ChamberInner> deleteAsync(String resourceGroup, String workbenchName, String chamberName) {
        return beginDeleteAsync(resourceGroup, workbenchName, chamberName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ChamberInner> deleteAsync(
        String resourceGroup, String workbenchName, String chamberName, Context context) {
        return beginDeleteAsync(resourceGroup, workbenchName, chamberName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChamberInner delete(String resourceGroup, String workbenchName, String chamberName) {
        return deleteAsync(resourceGroup, workbenchName, chamberName).block();
    }

    /**
     * Deletes the specified Chamber.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chamber resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChamberInner delete(String resourceGroup, String workbenchName, String chamberName, Context context) {
        return deleteAsync(resourceGroup, workbenchName, chamberName, context).block();
    }

    /**
     * Lists all Chambers.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ChamberInner>> listSinglePageAsync(String resourceGroup, String workbenchName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroup,
                            workbenchName,
                            accept,
                            context))
            .<PagedResponse<ChamberInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all Chambers.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ChamberInner>> listSinglePageAsync(
        String resourceGroup, String workbenchName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceGroup is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroup,
                workbenchName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all Chambers.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ChamberInner> listAsync(String resourceGroup, String workbenchName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroup, workbenchName), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all Chambers.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ChamberInner> listAsync(String resourceGroup, String workbenchName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroup, workbenchName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all Chambers.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ChamberInner> list(String resourceGroup, String workbenchName) {
        return new PagedIterable<>(listAsync(resourceGroup, workbenchName));
    }

    /**
     * Lists all Chambers.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ChamberInner> list(String resourceGroup, String workbenchName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroup, workbenchName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ChamberInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ChamberInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ChamberInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
