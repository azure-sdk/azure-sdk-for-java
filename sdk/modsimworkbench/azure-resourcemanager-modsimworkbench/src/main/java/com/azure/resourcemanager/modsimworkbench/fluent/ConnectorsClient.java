// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.modsimworkbench.fluent.models.ConnectorInner;
import com.azure.resourcemanager.modsimworkbench.models.LicenseKeyParameters;

/** An instance of this class provides access to all the operations defined in ConnectorsClient. */
public interface ConnectorsClient {
    /**
     * Perform Start operation.
     *
     * @param resourceGroup Name of the resource group.
     * @param workbenchName Name of the workbench.
     * @param chamberName the chamber name.
     * @param name Name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStart(
        String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Start operation.
     *
     * @param resourceGroup Name of the resource group.
     * @param workbenchName Name of the workbench.
     * @param chamberName the chamber name.
     * @param name Name of the connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStart(
        String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Start operation.
     *
     * @param resourceGroup Name of the resource group.
     * @param workbenchName Name of the workbench.
     * @param chamberName the chamber name.
     * @param name Name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Start operation.
     *
     * @param resourceGroup Name of the resource group.
     * @param workbenchName Name of the workbench.
     * @param chamberName the chamber name.
     * @param name Name of the connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStop(
        String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the connector name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStop(
        String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stop(String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Stop operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the connector name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stop(String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRestart(
        String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the connector name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRestart(
        String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void restart(String resourceGroup, String workbenchName, String chamberName, String name);

    /**
     * Perform Restart operation.
     *
     * @param resourceGroup the resource group.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param name the connector name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void restart(String resourceGroup, String workbenchName, String chamberName, String name, Context context);

    /**
     * Creates or updates the specified connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ConnectorInner>, ConnectorInner> beginCreateOrUpdate(
        String resourceGroup, String workbenchName, String chamberName, String connectorName);

    /**
     * Creates or updates the specified connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @param parameters Parameters supplied to the create or update connector operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ConnectorInner>, ConnectorInner> beginCreateOrUpdate(
        String resourceGroup,
        String workbenchName,
        String chamberName,
        String connectorName,
        ConnectorInner parameters,
        Context context);

    /**
     * Creates or updates the specified connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorInner createOrUpdate(String resourceGroup, String workbenchName, String chamberName, String connectorName);

    /**
     * Creates or updates the specified connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @param parameters Parameters supplied to the create or update connector operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorInner createOrUpdate(
        String resourceGroup,
        String workbenchName,
        String chamberName,
        String connectorName,
        ConnectorInner parameters,
        Context context);

    /**
     * Updates the specified connectors.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @param parameters Parameters supplied to the create or update connector operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connector resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConnectorInner> updateWithResponse(
        String resourceGroup,
        String workbenchName,
        String chamberName,
        String connectorName,
        ConnectorInner parameters,
        Context context);

    /**
     * Updates the specified connectors.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorInner update(String resourceGroup, String workbenchName, String chamberName, String connectorName);

    /**
     * Gets information about the specified connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified connector along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConnectorInner> getWithResponse(
        String resourceGroup, String workbenchName, String chamberName, String connectorName, Context context);

    /**
     * Gets information about the specified connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified connector.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorInner get(String resourceGroup, String workbenchName, String chamberName, String connectorName);

    /**
     * Deletes the specified connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ConnectorInner>, ConnectorInner> beginDelete(
        String resourceGroup, String workbenchName, String chamberName, String connectorName);

    /**
     * Deletes the specified connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ConnectorInner>, ConnectorInner> beginDelete(
        String resourceGroup, String workbenchName, String chamberName, String connectorName, Context context);

    /**
     * Deletes the specified connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorInner delete(String resourceGroup, String workbenchName, String chamberName, String connectorName);

    /**
     * Deletes the specified connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param connectorName The name of the connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorInner delete(
        String resourceGroup, String workbenchName, String chamberName, String connectorName, Context context);

    /**
     * Lists all connectors.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectorInner> list(String resourceGroup, String workbenchName, String chamberName);

    /**
     * Lists all connectors.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectorInner> list(String resourceGroup, String workbenchName, String chamberName, Context context);

    /**
     * Add license to an ModSim Workbench connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param name The name of the connector.
     * @param body License key parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginLicenseAdd(
        String resourceGroup, String workbenchName, String chamberName, String name, LicenseKeyParameters body);

    /**
     * Add license to an ModSim Workbench connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param name The name of the connector.
     * @param body License key parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginLicenseAdd(
        String resourceGroup,
        String workbenchName,
        String chamberName,
        String name,
        LicenseKeyParameters body,
        Context context);

    /**
     * Add license to an ModSim Workbench connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param name The name of the connector.
     * @param body License key parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void licenseAdd(
        String resourceGroup, String workbenchName, String chamberName, String name, LicenseKeyParameters body);

    /**
     * Add license to an ModSim Workbench connector.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param name The name of the connector.
     * @param body License key parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void licenseAdd(
        String resourceGroup,
        String workbenchName,
        String chamberName,
        String name,
        LicenseKeyParameters body,
        Context context);
}
