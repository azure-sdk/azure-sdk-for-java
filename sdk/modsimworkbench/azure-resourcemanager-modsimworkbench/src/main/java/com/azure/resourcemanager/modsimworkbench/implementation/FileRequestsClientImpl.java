// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.modsimworkbench.fluent.FileRequestsClient;
import com.azure.resourcemanager.modsimworkbench.fluent.models.FileRequestsManageInner;
import com.azure.resourcemanager.modsimworkbench.fluent.models.RequestInner;
import com.azure.resourcemanager.modsimworkbench.models.FileRequestsManageParameters;
import com.azure.resourcemanager.modsimworkbench.models.RequestPageableList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in FileRequestsClient. */
public final class FileRequestsClientImpl implements FileRequestsClient {
    /** The proxy service used to perform REST calls. */
    private final FileRequestsService service;

    /** The service client containing this operation class. */
    private final MicrosoftModSimWorkbenchImpl client;

    /**
     * Initializes an instance of FileRequestsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    FileRequestsClientImpl(MicrosoftModSimWorkbenchImpl client) {
        this.service =
            RestProxy.create(FileRequestsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftModSimWorkbenchFileRequests to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftModSimWorkb")
    public interface FileRequestsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{chamberName}/fileRequests/{requestName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RequestInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("chamberName") String chamberName,
            @PathParam("requestName") String requestName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{chamberName}/fileRequests/{requestName}/manage")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> manage(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("chamberName") String chamberName,
            @PathParam("requestName") String requestName,
            @BodyParam("application/json") FileRequestsManageParameters body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{chamberName}/fileRequests")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RequestPageableList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("chamberName") String chamberName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RequestPageableList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get a specific ModSim Workbench chamber data pipeline file request resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific ModSim Workbench chamber data pipeline file request resource along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RequestInner>> getWithResponseAsync(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (requestName == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            workbenchName,
                            chamberName,
                            requestName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a specific ModSim Workbench chamber data pipeline file request resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the request name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific ModSim Workbench chamber data pipeline file request resource along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RequestInner>> getWithResponseAsync(
        String resourceGroupName, String workbenchName, String chamberName, String requestName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (requestName == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                workbenchName,
                chamberName,
                requestName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Get a specific ModSim Workbench chamber data pipeline file request resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific ModSim Workbench chamber data pipeline file request resource on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RequestInner> getAsync(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        return getWithResponseAsync(resourceGroupName, workbenchName, chamberName, requestName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a specific ModSim Workbench chamber data pipeline file request resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the request name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific ModSim Workbench chamber data pipeline file request resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RequestInner> getWithResponse(
        String resourceGroupName, String workbenchName, String chamberName, String requestName, Context context) {
        return getWithResponseAsync(resourceGroupName, workbenchName, chamberName, requestName, context).block();
    }

    /**
     * Get a specific ModSim Workbench chamber data pipeline file request resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific ModSim Workbench chamber data pipeline file request resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RequestInner get(String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        return getWithResponse(resourceGroupName, workbenchName, chamberName, requestName, Context.NONE).getValue();
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param body Manage download file requests parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manage download file requests in an chamber Data pipeline along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> manageWithResponseAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String requestName,
        FileRequestsManageParameters body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (requestName == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .manage(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            workbenchName,
                            chamberName,
                            requestName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param body Manage download file requests parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manage download file requests in an chamber Data pipeline along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> manageWithResponseAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String requestName,
        FileRequestsManageParameters body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (requestName == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .manage(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                workbenchName,
                chamberName,
                requestName,
                body,
                accept,
                context);
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param body Manage download file requests parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of manage download file requests in an chamber Data pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FileRequestsManageInner>, FileRequestsManageInner> beginManageAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String requestName,
        FileRequestsManageParameters body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            manageWithResponseAsync(resourceGroupName, workbenchName, chamberName, requestName, body);
        return this
            .client
            .<FileRequestsManageInner, FileRequestsManageInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                FileRequestsManageInner.class,
                FileRequestsManageInner.class,
                this.client.getContext());
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of manage download file requests in an chamber Data pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FileRequestsManageInner>, FileRequestsManageInner> beginManageAsync(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        final FileRequestsManageParameters body = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            manageWithResponseAsync(resourceGroupName, workbenchName, chamberName, requestName, body);
        return this
            .client
            .<FileRequestsManageInner, FileRequestsManageInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                FileRequestsManageInner.class,
                FileRequestsManageInner.class,
                this.client.getContext());
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param body Manage download file requests parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of manage download file requests in an chamber Data pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FileRequestsManageInner>, FileRequestsManageInner> beginManageAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String requestName,
        FileRequestsManageParameters body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            manageWithResponseAsync(resourceGroupName, workbenchName, chamberName, requestName, body, context);
        return this
            .client
            .<FileRequestsManageInner, FileRequestsManageInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                FileRequestsManageInner.class,
                FileRequestsManageInner.class,
                context);
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of manage download file requests in an chamber Data pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FileRequestsManageInner>, FileRequestsManageInner> beginManage(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        final FileRequestsManageParameters body = null;
        return this.beginManageAsync(resourceGroupName, workbenchName, chamberName, requestName, body).getSyncPoller();
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param body Manage download file requests parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of manage download file requests in an chamber Data pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FileRequestsManageInner>, FileRequestsManageInner> beginManage(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String requestName,
        FileRequestsManageParameters body,
        Context context) {
        return this
            .beginManageAsync(resourceGroupName, workbenchName, chamberName, requestName, body, context)
            .getSyncPoller();
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param body Manage download file requests parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manage download file requests in an chamber Data pipeline on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FileRequestsManageInner> manageAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String requestName,
        FileRequestsManageParameters body) {
        return beginManageAsync(resourceGroupName, workbenchName, chamberName, requestName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manage download file requests in an chamber Data pipeline on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FileRequestsManageInner> manageAsync(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        final FileRequestsManageParameters body = null;
        return beginManageAsync(resourceGroupName, workbenchName, chamberName, requestName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param body Manage download file requests parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manage download file requests in an chamber Data pipeline on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FileRequestsManageInner> manageAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String requestName,
        FileRequestsManageParameters body,
        Context context) {
        return beginManageAsync(resourceGroupName, workbenchName, chamberName, requestName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manage download file requests in an chamber Data pipeline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileRequestsManageInner manage(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        final FileRequestsManageParameters body = null;
        return manageAsync(resourceGroupName, workbenchName, chamberName, requestName, body).block();
    }

    /**
     * Manage download file requests in an ModSim Workbench chamber Data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param requestName the file request name.
     * @param body Manage download file requests parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manage download file requests in an chamber Data pipeline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileRequestsManageInner manage(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String requestName,
        FileRequestsManageParameters body,
        Context context) {
        return manageAsync(resourceGroupName, workbenchName, chamberName, requestName, body, context).block();
    }

    /**
     * Get ModSim Workbench chamber data pipeline file request resource collection.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return modSim Workbench chamber data pipeline file request resource collection along with {@link PagedResponse}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RequestInner>> listSinglePageAsync(
        String resourceGroupName, String workbenchName, String chamberName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            workbenchName,
                            chamberName,
                            accept,
                            context))
            .<PagedResponse<RequestInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get ModSim Workbench chamber data pipeline file request resource collection.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return modSim Workbench chamber data pipeline file request resource collection along with {@link PagedResponse}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RequestInner>> listSinglePageAsync(
        String resourceGroupName, String workbenchName, String chamberName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                workbenchName,
                chamberName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get ModSim Workbench chamber data pipeline file request resource collection.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return modSim Workbench chamber data pipeline file request resource collection as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RequestInner> listAsync(String resourceGroupName, String workbenchName, String chamberName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, workbenchName, chamberName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get ModSim Workbench chamber data pipeline file request resource collection.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return modSim Workbench chamber data pipeline file request resource collection as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RequestInner> listAsync(
        String resourceGroupName, String workbenchName, String chamberName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, workbenchName, chamberName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get ModSim Workbench chamber data pipeline file request resource collection.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return modSim Workbench chamber data pipeline file request resource collection as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RequestInner> list(String resourceGroupName, String workbenchName, String chamberName) {
        return new PagedIterable<>(listAsync(resourceGroupName, workbenchName, chamberName));
    }

    /**
     * Get ModSim Workbench chamber data pipeline file request resource collection.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return modSim Workbench chamber data pipeline file request resource collection as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RequestInner> list(
        String resourceGroupName, String workbenchName, String chamberName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, workbenchName, chamberName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RequestInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<RequestInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RequestInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
