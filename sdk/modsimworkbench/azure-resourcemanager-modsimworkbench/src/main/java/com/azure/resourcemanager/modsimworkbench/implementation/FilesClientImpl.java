// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.modsimworkbench.fluent.FilesClient;
import com.azure.resourcemanager.modsimworkbench.fluent.models.DownloadRequestInner;
import com.azure.resourcemanager.modsimworkbench.fluent.models.FileInner;
import com.azure.resourcemanager.modsimworkbench.models.FilePageableList;
import com.azure.resourcemanager.modsimworkbench.models.FilesDownloadRequestParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in FilesClient. */
public final class FilesClientImpl implements FilesClient {
    /** The proxy service used to perform REST calls. */
    private final FilesService service;

    /** The service client containing this operation class. */
    private final MicrosoftModSimWorkbenchImpl client;

    /**
     * Initializes an instance of FilesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    FilesClientImpl(MicrosoftModSimWorkbenchImpl client) {
        this.service = RestProxy.create(FilesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftModSimWorkbenchFiles to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftModSimWorkb")
    public interface FilesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{chamberName}/files/{fileName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FileInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("chamberName") String chamberName,
            @PathParam("fileName") String fileName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{chamberName}/files/{fileName}/downloadRequest")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> downloadRequest(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("chamberName") String chamberName,
            @PathParam("fileName") String fileName,
            @BodyParam("application/json") FilesDownloadRequestParameters body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ModSimWorkbench"
                + "/workbenches/{workbenchName}/chambers/{chamberName}/files")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FilePageableList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workbenchName") String workbenchName,
            @PathParam("chamberName") String chamberName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FilePageableList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get a specific ModSim Workbench chamber data pipeline file resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific ModSim Workbench chamber data pipeline file resource along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FileInner>> getWithResponseAsync(
        String resourceGroupName, String workbenchName, String chamberName, String fileName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            workbenchName,
                            chamberName,
                            fileName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a specific ModSim Workbench chamber data pipeline file resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific ModSim Workbench chamber data pipeline file resource along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FileInner>> getWithResponseAsync(
        String resourceGroupName, String workbenchName, String chamberName, String fileName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                workbenchName,
                chamberName,
                fileName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Get a specific ModSim Workbench chamber data pipeline file resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific ModSim Workbench chamber data pipeline file resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FileInner> getAsync(
        String resourceGroupName, String workbenchName, String chamberName, String fileName) {
        return getWithResponseAsync(resourceGroupName, workbenchName, chamberName, fileName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a specific ModSim Workbench chamber data pipeline file resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific ModSim Workbench chamber data pipeline file resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FileInner> getWithResponse(
        String resourceGroupName, String workbenchName, String chamberName, String fileName, Context context) {
        return getWithResponseAsync(resourceGroupName, workbenchName, chamberName, fileName, context).block();
    }

    /**
     * Get a specific ModSim Workbench chamber data pipeline file resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific ModSim Workbench chamber data pipeline file resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileInner get(String resourceGroupName, String workbenchName, String chamberName, String fileName) {
        return getWithResponse(resourceGroupName, workbenchName, chamberName, fileName, Context.NONE).getValue();
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @param body the file download request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return request to download files from an chamber data pipeline along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> downloadRequestWithResponseAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String fileName,
        FilesDownloadRequestParameters body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .downloadRequest(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            workbenchName,
                            chamberName,
                            fileName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @param body the file download request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return request to download files from an chamber data pipeline along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> downloadRequestWithResponseAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String fileName,
        FilesDownloadRequestParameters body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .downloadRequest(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                workbenchName,
                chamberName,
                fileName,
                body,
                accept,
                context);
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @param body the file download request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of request to download files from an chamber data pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DownloadRequestInner>, DownloadRequestInner> beginDownloadRequestAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String fileName,
        FilesDownloadRequestParameters body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            downloadRequestWithResponseAsync(resourceGroupName, workbenchName, chamberName, fileName, body);
        return this
            .client
            .<DownloadRequestInner, DownloadRequestInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                DownloadRequestInner.class,
                DownloadRequestInner.class,
                this.client.getContext());
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of request to download files from an chamber data pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DownloadRequestInner>, DownloadRequestInner> beginDownloadRequestAsync(
        String resourceGroupName, String workbenchName, String chamberName, String fileName) {
        final FilesDownloadRequestParameters body = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            downloadRequestWithResponseAsync(resourceGroupName, workbenchName, chamberName, fileName, body);
        return this
            .client
            .<DownloadRequestInner, DownloadRequestInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                DownloadRequestInner.class,
                DownloadRequestInner.class,
                this.client.getContext());
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @param body the file download request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of request to download files from an chamber data pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DownloadRequestInner>, DownloadRequestInner> beginDownloadRequestAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String fileName,
        FilesDownloadRequestParameters body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            downloadRequestWithResponseAsync(resourceGroupName, workbenchName, chamberName, fileName, body, context);
        return this
            .client
            .<DownloadRequestInner, DownloadRequestInner>getLroResult(
                mono, this.client.getHttpPipeline(), DownloadRequestInner.class, DownloadRequestInner.class, context);
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of request to download files from an chamber data pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DownloadRequestInner>, DownloadRequestInner> beginDownloadRequest(
        String resourceGroupName, String workbenchName, String chamberName, String fileName) {
        final FilesDownloadRequestParameters body = null;
        return this
            .beginDownloadRequestAsync(resourceGroupName, workbenchName, chamberName, fileName, body)
            .getSyncPoller();
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @param body the file download request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of request to download files from an chamber data pipeline.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DownloadRequestInner>, DownloadRequestInner> beginDownloadRequest(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String fileName,
        FilesDownloadRequestParameters body,
        Context context) {
        return this
            .beginDownloadRequestAsync(resourceGroupName, workbenchName, chamberName, fileName, body, context)
            .getSyncPoller();
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @param body the file download request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return request to download files from an chamber data pipeline on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DownloadRequestInner> downloadRequestAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String fileName,
        FilesDownloadRequestParameters body) {
        return beginDownloadRequestAsync(resourceGroupName, workbenchName, chamberName, fileName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return request to download files from an chamber data pipeline on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DownloadRequestInner> downloadRequestAsync(
        String resourceGroupName, String workbenchName, String chamberName, String fileName) {
        final FilesDownloadRequestParameters body = null;
        return beginDownloadRequestAsync(resourceGroupName, workbenchName, chamberName, fileName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @param body the file download request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return request to download files from an chamber data pipeline on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DownloadRequestInner> downloadRequestAsync(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String fileName,
        FilesDownloadRequestParameters body,
        Context context) {
        return beginDownloadRequestAsync(resourceGroupName, workbenchName, chamberName, fileName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return request to download files from an chamber data pipeline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DownloadRequestInner downloadRequest(
        String resourceGroupName, String workbenchName, String chamberName, String fileName) {
        final FilesDownloadRequestParameters body = null;
        return downloadRequestAsync(resourceGroupName, workbenchName, chamberName, fileName, body).block();
    }

    /**
     * Request to download files from an ModSim Workbench chamber data pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName the workbench name.
     * @param chamberName the chamber name.
     * @param fileName the file name.
     * @param body the file download request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return request to download files from an chamber data pipeline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DownloadRequestInner downloadRequest(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String fileName,
        FilesDownloadRequestParameters body,
        Context context) {
        return downloadRequestAsync(resourceGroupName, workbenchName, chamberName, fileName, body, context).block();
    }

    /**
     * Get ModSim Workbench chamber data pipeline file resource collection.
     *
     * <p>Lists all files.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FileInner>> listSinglePageAsync(
        String resourceGroupName, String workbenchName, String chamberName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            workbenchName,
                            chamberName,
                            accept,
                            context))
            .<PagedResponse<FileInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get ModSim Workbench chamber data pipeline file resource collection.
     *
     * <p>Lists all files.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FileInner>> listSinglePageAsync(
        String resourceGroupName, String workbenchName, String chamberName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workbenchName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workbenchName is required and cannot be null."));
        }
        if (chamberName == null) {
            return Mono.error(new IllegalArgumentException("Parameter chamberName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                workbenchName,
                chamberName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get ModSim Workbench chamber data pipeline file resource collection.
     *
     * <p>Lists all files.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<FileInner> listAsync(String resourceGroupName, String workbenchName, String chamberName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, workbenchName, chamberName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get ModSim Workbench chamber data pipeline file resource collection.
     *
     * <p>Lists all files.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<FileInner> listAsync(
        String resourceGroupName, String workbenchName, String chamberName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, workbenchName, chamberName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get ModSim Workbench chamber data pipeline file resource collection.
     *
     * <p>Lists all files.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FileInner> list(String resourceGroupName, String workbenchName, String chamberName) {
        return new PagedIterable<>(listAsync(resourceGroupName, workbenchName, chamberName));
    }

    /**
     * Get ModSim Workbench chamber data pipeline file resource collection.
     *
     * <p>Lists all files.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FileInner> list(
        String resourceGroupName, String workbenchName, String chamberName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, workbenchName, chamberName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FileInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<FileInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FileInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
