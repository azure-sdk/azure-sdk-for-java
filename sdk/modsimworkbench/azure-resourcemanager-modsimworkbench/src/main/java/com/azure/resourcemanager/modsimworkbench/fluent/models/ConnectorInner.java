// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.modsimworkbench.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Connector resource. */
@Fluent
public final class ConnectorInner extends Resource {
    /*
     * Connector properties.
     */
    @JsonProperty(value = "properties")
    private ConnectorPropertiesFormat innerProperties;

    /*
     * system data
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Name of SKU.
     */
    @JsonProperty(value = "sku")
    private String sku;

    /** Creates an instance of ConnectorInner class. */
    public ConnectorInner() {
    }

    /**
     * Get the innerProperties property: Connector properties.
     *
     * @return the innerProperties value.
     */
    private ConnectorPropertiesFormat innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: system data.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the sku property: Name of SKU.
     *
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: Name of SKU.
     *
     * @param sku the sku value to set.
     * @return the ConnectorInner object itself.
     */
    public ConnectorInner withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ConnectorInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ConnectorInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the accessConfigurations property: Gets or sets the Access Configuration.
     *
     * @return the accessConfigurations value.
     */
    public Object accessConfigurations() {
        return this.innerProperties() == null ? null : this.innerProperties().accessConfigurations();
    }

    /**
     * Set the accessConfigurations property: Gets or sets the Access Configuration.
     *
     * @param accessConfigurations the accessConfigurations value to set.
     * @return the ConnectorInner object itself.
     */
    public ConnectorInner withAccessConfigurations(Object accessConfigurations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConnectorPropertiesFormat();
        }
        this.innerProperties().withAccessConfigurations(accessConfigurations);
        return this;
    }

    /**
     * Get the remoteDesktop property: Gets or sets the Remote Desktop.
     *
     * @return the remoteDesktop value.
     */
    public Object remoteDesktop() {
        return this.innerProperties() == null ? null : this.innerProperties().remoteDesktop();
    }

    /**
     * Set the remoteDesktop property: Gets or sets the Remote Desktop.
     *
     * @param remoteDesktop the remoteDesktop value to set.
     * @return the ConnectorInner object itself.
     */
    public ConnectorInner withRemoteDesktop(Object remoteDesktop) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConnectorPropertiesFormat();
        }
        this.innerProperties().withRemoteDesktop(remoteDesktop);
        return this;
    }

    /**
     * Get the networkAcls property: Specifies set of source IP address ranges to allow access the ModSim Workbench
     * workbench.
     *
     * @return the networkAcls value.
     */
    public Object networkAcls() {
        return this.innerProperties() == null ? null : this.innerProperties().networkAcls();
    }

    /**
     * Set the networkAcls property: Specifies set of source IP address ranges to allow access the ModSim Workbench
     * workbench.
     *
     * @param networkAcls the networkAcls value to set.
     * @return the ConnectorInner object itself.
     */
    public ConnectorInner withNetworkAcls(Object networkAcls) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ConnectorPropertiesFormat();
        }
        this.innerProperties().withNetworkAcls(networkAcls);
        return this;
    }

    /**
     * Get the provisioningState property: Gets the status of the connector at the time the operation was called.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
