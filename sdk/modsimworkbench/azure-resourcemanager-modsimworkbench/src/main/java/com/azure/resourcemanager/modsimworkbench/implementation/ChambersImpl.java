// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.modsimworkbench.fluent.ChambersClient;
import com.azure.resourcemanager.modsimworkbench.fluent.models.ChamberInner;
import com.azure.resourcemanager.modsimworkbench.fluent.models.GetUploadUriInner;
import com.azure.resourcemanager.modsimworkbench.models.Chamber;
import com.azure.resourcemanager.modsimworkbench.models.Chambers;
import com.azure.resourcemanager.modsimworkbench.models.FileUploadParameters;
import com.azure.resourcemanager.modsimworkbench.models.GetUploadUri;
import com.azure.resourcemanager.modsimworkbench.models.RestartLicenseParameters;
import com.azure.resourcemanager.modsimworkbench.models.UpdateLicenseParameters;

public final class ChambersImpl implements Chambers {
    private static final ClientLogger LOGGER = new ClientLogger(ChambersImpl.class);

    private final ChambersClient innerClient;

    private final com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager;

    public ChambersImpl(
        ChambersClient innerClient, com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<GetUploadUri> getUploadUriWithResponse(
        String resourceGroup, String workbenchName, String name, FileUploadParameters body, Context context) {
        Response<GetUploadUriInner> inner =
            this.serviceClient().getUploadUriWithResponse(resourceGroup, workbenchName, name, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GetUploadUriImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GetUploadUri getUploadUri(String resourceGroup, String workbenchName, String name) {
        GetUploadUriInner inner = this.serviceClient().getUploadUri(resourceGroup, workbenchName, name);
        if (inner != null) {
            return new GetUploadUriImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void start(String resourceGroup, String workbenchName, String name) {
        this.serviceClient().start(resourceGroup, workbenchName, name);
    }

    public void start(String resourceGroup, String workbenchName, String name, Context context) {
        this.serviceClient().start(resourceGroup, workbenchName, name, context);
    }

    public void stop(String resourceGroup, String workbenchName, String name) {
        this.serviceClient().stop(resourceGroup, workbenchName, name);
    }

    public void stop(String resourceGroup, String workbenchName, String name, Context context) {
        this.serviceClient().stop(resourceGroup, workbenchName, name, context);
    }

    public void restart(String resourceGroup, String workbenchName, String name) {
        this.serviceClient().restart(resourceGroup, workbenchName, name);
    }

    public void restart(String resourceGroup, String workbenchName, String name, Context context) {
        this.serviceClient().restart(resourceGroup, workbenchName, name, context);
    }

    public void licenseUpdate(String resourceGroup, String workbenchName, String name) {
        this.serviceClient().licenseUpdate(resourceGroup, workbenchName, name);
    }

    public void licenseUpdate(
        String resourceGroup, String workbenchName, String name, UpdateLicenseParameters body, Context context) {
        this.serviceClient().licenseUpdate(resourceGroup, workbenchName, name, body, context);
    }

    public void licenseRestart(String resourceGroup, String workbenchName, String name) {
        this.serviceClient().licenseRestart(resourceGroup, workbenchName, name);
    }

    public void licenseRestart(
        String resourceGroup, String workbenchName, String name, RestartLicenseParameters body, Context context) {
        this.serviceClient().licenseRestart(resourceGroup, workbenchName, name, body, context);
    }

    public Response<Chamber> getWithResponse(
        String resourceGroup, String workbenchName, String chamberName, Context context) {
        Response<ChamberInner> inner =
            this.serviceClient().getWithResponse(resourceGroup, workbenchName, chamberName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ChamberImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Chamber get(String resourceGroup, String workbenchName, String chamberName) {
        ChamberInner inner = this.serviceClient().get(resourceGroup, workbenchName, chamberName);
        if (inner != null) {
            return new ChamberImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Chamber delete(String resourceGroup, String workbenchName, String chamberName) {
        ChamberInner inner = this.serviceClient().delete(resourceGroup, workbenchName, chamberName);
        if (inner != null) {
            return new ChamberImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Chamber delete(String resourceGroup, String workbenchName, String chamberName, Context context) {
        ChamberInner inner = this.serviceClient().delete(resourceGroup, workbenchName, chamberName, context);
        if (inner != null) {
            return new ChamberImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Chamber> list(String resourceGroup, String workbenchName) {
        PagedIterable<ChamberInner> inner = this.serviceClient().list(resourceGroup, workbenchName);
        return Utils.mapPage(inner, inner1 -> new ChamberImpl(inner1, this.manager()));
    }

    public PagedIterable<Chamber> list(String resourceGroup, String workbenchName, Context context) {
        PagedIterable<ChamberInner> inner = this.serviceClient().list(resourceGroup, workbenchName, context);
        return Utils.mapPage(inner, inner1 -> new ChamberImpl(inner1, this.manager()));
    }

    public Chamber getById(String id) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workbenchName = Utils.getValueFromIdByName(id, "workbenches");
        if (workbenchName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        String chamberName = Utils.getValueFromIdByName(id, "chambers");
        if (chamberName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'chambers'.", id)));
        }
        return this.getWithResponse(resourceGroup, workbenchName, chamberName, Context.NONE).getValue();
    }

    public Response<Chamber> getByIdWithResponse(String id, Context context) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workbenchName = Utils.getValueFromIdByName(id, "workbenches");
        if (workbenchName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        String chamberName = Utils.getValueFromIdByName(id, "chambers");
        if (chamberName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'chambers'.", id)));
        }
        return this.getWithResponse(resourceGroup, workbenchName, chamberName, context);
    }

    public Chamber deleteById(String id) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workbenchName = Utils.getValueFromIdByName(id, "workbenches");
        if (workbenchName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        String chamberName = Utils.getValueFromIdByName(id, "chambers");
        if (chamberName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'chambers'.", id)));
        }
        return this.delete(resourceGroup, workbenchName, chamberName, Context.NONE);
    }

    public Chamber deleteByIdWithResponse(String id, Context context) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workbenchName = Utils.getValueFromIdByName(id, "workbenches");
        if (workbenchName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        String chamberName = Utils.getValueFromIdByName(id, "chambers");
        if (chamberName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'chambers'.", id)));
        }
        return this.delete(resourceGroup, workbenchName, chamberName, context);
    }

    private ChambersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager manager() {
        return this.serviceManager;
    }

    public ChamberImpl define(String name) {
        return new ChamberImpl(name, this.manager());
    }
}
