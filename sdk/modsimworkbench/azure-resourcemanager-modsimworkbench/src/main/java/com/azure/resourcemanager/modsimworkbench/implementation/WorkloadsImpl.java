// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.modsimworkbench.fluent.WorkloadsClient;
import com.azure.resourcemanager.modsimworkbench.fluent.models.WorkloadInner;
import com.azure.resourcemanager.modsimworkbench.models.Workload;
import com.azure.resourcemanager.modsimworkbench.models.Workloads;

public final class WorkloadsImpl implements Workloads {
    private static final ClientLogger LOGGER = new ClientLogger(WorkloadsImpl.class);

    private final WorkloadsClient innerClient;

    private final com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager;

    public WorkloadsImpl(
        WorkloadsClient innerClient, com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void start(String resourceGroup, String workbenchName, String chamberName, String name) {
        this.serviceClient().start(resourceGroup, workbenchName, chamberName, name);
    }

    public void start(String resourceGroup, String workbenchName, String chamberName, String name, Context context) {
        this.serviceClient().start(resourceGroup, workbenchName, chamberName, name, context);
    }

    public void stop(String resourceGroup, String workbenchName, String chamberName, String name) {
        this.serviceClient().stop(resourceGroup, workbenchName, chamberName, name);
    }

    public void stop(String resourceGroup, String workbenchName, String chamberName, String name, Context context) {
        this.serviceClient().stop(resourceGroup, workbenchName, chamberName, name, context);
    }

    public void restart(String resourceGroup, String workbenchName, String chamberName, String name) {
        this.serviceClient().restart(resourceGroup, workbenchName, chamberName, name);
    }

    public void restart(String resourceGroup, String workbenchName, String chamberName, String name, Context context) {
        this.serviceClient().restart(resourceGroup, workbenchName, chamberName, name, context);
    }

    public Response<Workload> getWithResponse(
        String resourceGroup, String workbenchName, String chamberName, String workloadName, Context context) {
        Response<WorkloadInner> inner =
            this.serviceClient().getWithResponse(resourceGroup, workbenchName, chamberName, workloadName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WorkloadImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Workload get(String resourceGroup, String workbenchName, String chamberName, String workloadName) {
        WorkloadInner inner = this.serviceClient().get(resourceGroup, workbenchName, chamberName, workloadName);
        if (inner != null) {
            return new WorkloadImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Workload delete(String resourceGroup, String workbenchName, String chamberName, String workloadName) {
        WorkloadInner inner = this.serviceClient().delete(resourceGroup, workbenchName, chamberName, workloadName);
        if (inner != null) {
            return new WorkloadImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Workload delete(
        String resourceGroup, String workbenchName, String chamberName, String workloadName, Context context) {
        WorkloadInner inner =
            this.serviceClient().delete(resourceGroup, workbenchName, chamberName, workloadName, context);
        if (inner != null) {
            return new WorkloadImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Workload> list(String resourceGroup, String workbenchName, String chamberName) {
        PagedIterable<WorkloadInner> inner = this.serviceClient().list(resourceGroup, workbenchName, chamberName);
        return Utils.mapPage(inner, inner1 -> new WorkloadImpl(inner1, this.manager()));
    }

    public PagedIterable<Workload> list(
        String resourceGroup, String workbenchName, String chamberName, Context context) {
        PagedIterable<WorkloadInner> inner =
            this.serviceClient().list(resourceGroup, workbenchName, chamberName, context);
        return Utils.mapPage(inner, inner1 -> new WorkloadImpl(inner1, this.manager()));
    }

    public Workload getById(String id) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workbenchName = Utils.getValueFromIdByName(id, "workbenches");
        if (workbenchName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        String chamberName = Utils.getValueFromIdByName(id, "chambers");
        if (chamberName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'chambers'.", id)));
        }
        String workloadName = Utils.getValueFromIdByName(id, "workloads");
        if (workloadName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workloads'.", id)));
        }
        return this.getWithResponse(resourceGroup, workbenchName, chamberName, workloadName, Context.NONE).getValue();
    }

    public Response<Workload> getByIdWithResponse(String id, Context context) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workbenchName = Utils.getValueFromIdByName(id, "workbenches");
        if (workbenchName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        String chamberName = Utils.getValueFromIdByName(id, "chambers");
        if (chamberName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'chambers'.", id)));
        }
        String workloadName = Utils.getValueFromIdByName(id, "workloads");
        if (workloadName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workloads'.", id)));
        }
        return this.getWithResponse(resourceGroup, workbenchName, chamberName, workloadName, context);
    }

    public Workload deleteById(String id) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workbenchName = Utils.getValueFromIdByName(id, "workbenches");
        if (workbenchName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        String chamberName = Utils.getValueFromIdByName(id, "chambers");
        if (chamberName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'chambers'.", id)));
        }
        String workloadName = Utils.getValueFromIdByName(id, "workloads");
        if (workloadName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workloads'.", id)));
        }
        return this.delete(resourceGroup, workbenchName, chamberName, workloadName, Context.NONE);
    }

    public Workload deleteByIdWithResponse(String id, Context context) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workbenchName = Utils.getValueFromIdByName(id, "workbenches");
        if (workbenchName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workbenches'.", id)));
        }
        String chamberName = Utils.getValueFromIdByName(id, "chambers");
        if (chamberName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'chambers'.", id)));
        }
        String workloadName = Utils.getValueFromIdByName(id, "workloads");
        if (workloadName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workloads'.", id)));
        }
        return this.delete(resourceGroup, workbenchName, chamberName, workloadName, context);
    }

    private WorkloadsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager manager() {
        return this.serviceManager;
    }

    public WorkloadImpl define(String name) {
        return new WorkloadImpl(name, this.manager());
    }
}
