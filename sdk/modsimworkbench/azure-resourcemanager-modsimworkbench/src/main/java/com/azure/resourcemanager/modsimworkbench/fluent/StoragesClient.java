// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.modsimworkbench.fluent.models.StorageInner;

/** An instance of this class provides access to all the operations defined in StoragesClient. */
public interface StoragesClient {
    /**
     * Creates or updates the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of storage resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<StorageInner>, StorageInner> beginCreateOrUpdate(
        String resourceGroup, String workbenchName, String chamberName, String storageName);

    /**
     * Creates or updates the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @param parameters Parameters supplied to the create or update storage resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of storage resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<StorageInner>, StorageInner> beginCreateOrUpdate(
        String resourceGroup,
        String workbenchName,
        String chamberName,
        String storageName,
        StorageInner parameters,
        Context context);

    /**
     * Creates or updates the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StorageInner createOrUpdate(String resourceGroup, String workbenchName, String chamberName, String storageName);

    /**
     * Creates or updates the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @param parameters Parameters supplied to the create or update storage resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StorageInner createOrUpdate(
        String resourceGroup,
        String workbenchName,
        String chamberName,
        String storageName,
        StorageInner parameters,
        Context context);

    /**
     * Updates the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @param parameters Parameters supplied to the create or update storage resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<StorageInner> updateWithResponse(
        String resourceGroup,
        String workbenchName,
        String chamberName,
        String storageName,
        StorageInner parameters,
        Context context);

    /**
     * Updates the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StorageInner update(String resourceGroup, String workbenchName, String chamberName, String storageName);

    /**
     * Gets information about the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the storage along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<StorageInner> getWithResponse(
        String resourceGroup, String workbenchName, String chamberName, String storageName, Context context);

    /**
     * Gets information about the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the storage.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StorageInner get(String resourceGroup, String workbenchName, String chamberName, String storageName);

    /**
     * Deletes the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of storage resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<StorageInner>, StorageInner> beginDelete(
        String resourceGroup, String workbenchName, String chamberName, String storageName);

    /**
     * Deletes the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of storage resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<StorageInner>, StorageInner> beginDelete(
        String resourceGroup, String workbenchName, String chamberName, String storageName, Context context);

    /**
     * Deletes the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StorageInner delete(String resourceGroup, String workbenchName, String chamberName, String storageName);

    /**
     * Deletes the storage.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param storageName The name of the storage.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StorageInner delete(
        String resourceGroup, String workbenchName, String chamberName, String storageName, Context context);

    /**
     * Lists all storages.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<StorageInner> list(String resourceGroup, String workbenchName, String chamberName);

    /**
     * Lists all storages.
     *
     * @param resourceGroup The name of the resource group.
     * @param workbenchName The name of the workbench.
     * @param chamberName The name of the chamber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return microsoft.Sdw.Core.ResourceMetadata.PageableList implementation specific to pageable lists of
     *     Microsoft.Sdw.Core.ResourceMetadata.AzureResource`1 as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<StorageInner> list(String resourceGroup, String workbenchName, String chamberName, Context context);
}
