// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Gets or sets the license services for each EDA vendor. */
@Fluent
public final class ChamberPropertiesFormatLicenseServices {
    /*
     * Gets or sets the cadence properties.
     */
    @JsonProperty(value = "cadence")
    private Cadence innerCadence;

    /*
     * Gets or sets the ansys properties.
     */
    @JsonProperty(value = "ansys")
    private Ansys innerAnsys;

    /*
     * Gets or sets the siemens properties.
     */
    @JsonProperty(value = "siemens")
    private Siemens innerSiemens;

    /*
     * Gets or sets the synopsys properties.
     */
    @JsonProperty(value = "synopsys")
    private Synopsys innerSynopsys;

    /** Creates an instance of ChamberPropertiesFormatLicenseServices class. */
    public ChamberPropertiesFormatLicenseServices() {
    }

    /**
     * Get the innerCadence property: Gets or sets the cadence properties.
     *
     * @return the innerCadence value.
     */
    private Cadence innerCadence() {
        return this.innerCadence;
    }

    /**
     * Get the innerAnsys property: Gets or sets the ansys properties.
     *
     * @return the innerAnsys value.
     */
    private Ansys innerAnsys() {
        return this.innerAnsys;
    }

    /**
     * Get the innerSiemens property: Gets or sets the siemens properties.
     *
     * @return the innerSiemens value.
     */
    private Siemens innerSiemens() {
        return this.innerSiemens;
    }

    /**
     * Get the innerSynopsys property: Gets or sets the synopsys properties.
     *
     * @return the innerSynopsys value.
     */
    private Synopsys innerSynopsys() {
        return this.innerSynopsys;
    }

    /**
     * Get the enable property: Switch to show if License Service is activated.
     *
     * @return the enable value.
     */
    public Boolean enable() {
        return this.innerCadence() == null ? null : this.innerCadence().enable();
    }

    /**
     * Set the enable property: Switch to show if License Service is activated.
     *
     * @param enable the enable value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withEnable(Boolean enable) {
        if (this.innerCadence() == null) {
            this.innerCadence = new Cadence();
        }
        this.innerCadence().withEnable(enable);
        return this;
    }

    /**
     * Get the server property: License Service server.
     *
     * @return the server value.
     */
    public String server() {
        return this.innerCadence() == null ? null : this.innerCadence().server();
    }

    /**
     * Set the server property: License Service server.
     *
     * @param server the server value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withServer(String server) {
        if (this.innerCadence() == null) {
            this.innerCadence = new Cadence();
        }
        this.innerCadence().withServer(server);
        return this;
    }

    /**
     * Get the lmhostId property: Unique identifier of ModSim Workbench chamber license servers used by FlexNet
     * Licensing Service.
     *
     * @return the lmhostId value.
     */
    public List<String> lmhostId() {
        return this.innerCadence() == null ? null : this.innerCadence().lmhostId();
    }

    /**
     * Set the lmhostId property: Unique identifier of ModSim Workbench chamber license servers used by FlexNet
     * Licensing Service.
     *
     * @param lmhostId the lmhostId value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withLmhostId(List<String> lmhostId) {
        if (this.innerCadence() == null) {
            this.innerCadence = new Cadence();
        }
        this.innerCadence().withLmhostId(lmhostId);
        return this;
    }

    /**
     * Get the mfp property: License server information for Cadence License Manager.
     *
     * @return the mfp value.
     */
    public List<String> mfp() {
        return this.innerCadence() == null ? null : this.innerCadence().mfp();
    }

    /**
     * Set the mfp property: License server information for Cadence License Manager.
     *
     * @param mfp the mfp value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withMfp(List<String> mfp) {
        if (this.innerCadence() == null) {
            this.innerCadence = new Cadence();
        }
        this.innerCadence().withMfp(mfp);
        return this;
    }

    /**
     * Get the enable property: Switch to show if License Service is activated.
     *
     * @return the enable value.
     */
    public Boolean enableAnsysEnable() {
        return this.innerAnsys() == null ? null : this.innerAnsys().enable();
    }

    /**
     * Set the enable property: Switch to show if License Service is activated.
     *
     * @param enable the enable value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withEnableAnsysEnable(Boolean enable) {
        if (this.innerAnsys() == null) {
            this.innerAnsys = new Ansys();
        }
        this.innerAnsys().withEnable(enable);
        return this;
    }

    /**
     * Get the server property: License Service server.
     *
     * @return the server value.
     */
    public String serverAnsysServer() {
        return this.innerAnsys() == null ? null : this.innerAnsys().server();
    }

    /**
     * Set the server property: License Service server.
     *
     * @param server the server value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withServerAnsysServer(String server) {
        if (this.innerAnsys() == null) {
            this.innerAnsys = new Ansys();
        }
        this.innerAnsys().withServer(server);
        return this;
    }

    /**
     * Get the lmhostId property: Unique identifier of ModSim Workbench chamber license servers used by FlexNet
     * Licensing Service.
     *
     * @return the lmhostId value.
     */
    public List<String> lmhostIdAnsysLmhostId() {
        return this.innerAnsys() == null ? null : this.innerAnsys().lmhostId();
    }

    /**
     * Set the lmhostId property: Unique identifier of ModSim Workbench chamber license servers used by FlexNet
     * Licensing Service.
     *
     * @param lmhostId the lmhostId value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withLmhostIdAnsysLmhostId(List<String> lmhostId) {
        if (this.innerAnsys() == null) {
            this.innerAnsys = new Ansys();
        }
        this.innerAnsys().withLmhostId(lmhostId);
        return this;
    }

    /**
     * Get the enable property: Switch to show if License Service is activated.
     *
     * @return the enable value.
     */
    public Boolean enableSiemensEnable() {
        return this.innerSiemens() == null ? null : this.innerSiemens().enable();
    }

    /**
     * Set the enable property: Switch to show if License Service is activated.
     *
     * @param enable the enable value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withEnableSiemensEnable(Boolean enable) {
        if (this.innerSiemens() == null) {
            this.innerSiemens = new Siemens();
        }
        this.innerSiemens().withEnable(enable);
        return this;
    }

    /**
     * Get the server property: License Service server.
     *
     * @return the server value.
     */
    public String serverSiemensServer() {
        return this.innerSiemens() == null ? null : this.innerSiemens().server();
    }

    /**
     * Set the server property: License Service server.
     *
     * @param server the server value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withServerSiemensServer(String server) {
        if (this.innerSiemens() == null) {
            this.innerSiemens = new Siemens();
        }
        this.innerSiemens().withServer(server);
        return this;
    }

    /**
     * Get the lmhostId property: Unique identifier of ModSim Workbench chamber license servers used by FlexNet
     * Licensing Service.
     *
     * @return the lmhostId value.
     */
    public List<String> lmhostIdSiemensLmhostId() {
        return this.innerSiemens() == null ? null : this.innerSiemens().lmhostId();
    }

    /**
     * Set the lmhostId property: Unique identifier of ModSim Workbench chamber license servers used by FlexNet
     * Licensing Service.
     *
     * @param lmhostId the lmhostId value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withLmhostIdSiemensLmhostId(List<String> lmhostId) {
        if (this.innerSiemens() == null) {
            this.innerSiemens = new Siemens();
        }
        this.innerSiemens().withLmhostId(lmhostId);
        return this;
    }

    /**
     * Get the enable property: Switch to show if License Service is activated.
     *
     * @return the enable value.
     */
    public Boolean enableSynopsysEnable() {
        return this.innerSynopsys() == null ? null : this.innerSynopsys().enable();
    }

    /**
     * Set the enable property: Switch to show if License Service is activated.
     *
     * @param enable the enable value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withEnableSynopsysEnable(Boolean enable) {
        if (this.innerSynopsys() == null) {
            this.innerSynopsys = new Synopsys();
        }
        this.innerSynopsys().withEnable(enable);
        return this;
    }

    /**
     * Get the server property: License Service server.
     *
     * @return the server value.
     */
    public String serverSynopsysServer() {
        return this.innerSynopsys() == null ? null : this.innerSynopsys().server();
    }

    /**
     * Set the server property: License Service server.
     *
     * @param server the server value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withServerSynopsysServer(String server) {
        if (this.innerSynopsys() == null) {
            this.innerSynopsys = new Synopsys();
        }
        this.innerSynopsys().withServer(server);
        return this;
    }

    /**
     * Get the vmUuid property: Virtual machine universal unique identifier of ModSim Workbench chamber license servers
     * used by FlexNet Licensing Service.
     *
     * @return the vmUuid value.
     */
    public List<String> vmUuid() {
        return this.innerSynopsys() == null ? null : this.innerSynopsys().vmUuid();
    }

    /**
     * Set the vmUuid property: Virtual machine universal unique identifier of ModSim Workbench chamber license servers
     * used by FlexNet Licensing Service.
     *
     * @param vmUuid the vmUuid value to set.
     * @return the ChamberPropertiesFormatLicenseServices object itself.
     */
    public ChamberPropertiesFormatLicenseServices withVmUuid(List<String> vmUuid) {
        if (this.innerSynopsys() == null) {
            this.innerSynopsys = new Synopsys();
        }
        this.innerSynopsys().withVmUuid(vmUuid);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerCadence() != null) {
            innerCadence().validate();
        }
        if (innerAnsys() != null) {
            innerAnsys().validate();
        }
        if (innerSiemens() != null) {
            innerSiemens().validate();
        }
        if (innerSynopsys() != null) {
            innerSynopsys().validate();
        }
    }
}
