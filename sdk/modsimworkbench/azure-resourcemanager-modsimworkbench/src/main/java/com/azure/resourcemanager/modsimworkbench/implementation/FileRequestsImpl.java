// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.modsimworkbench.fluent.FileRequestsClient;
import com.azure.resourcemanager.modsimworkbench.fluent.models.FileRequestsManageInner;
import com.azure.resourcemanager.modsimworkbench.fluent.models.RequestInner;
import com.azure.resourcemanager.modsimworkbench.models.FileRequests;
import com.azure.resourcemanager.modsimworkbench.models.FileRequestsManage;
import com.azure.resourcemanager.modsimworkbench.models.FileRequestsManageParameters;
import com.azure.resourcemanager.modsimworkbench.models.Request;

public final class FileRequestsImpl implements FileRequests {
    private static final ClientLogger LOGGER = new ClientLogger(FileRequestsImpl.class);

    private final FileRequestsClient innerClient;

    private final com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager;

    public FileRequestsImpl(
        FileRequestsClient innerClient,
        com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Request> getWithResponse(
        String resourceGroupName, String workbenchName, String chamberName, String requestName, Context context) {
        Response<RequestInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, workbenchName, chamberName, requestName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Request get(String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        RequestInner inner = this.serviceClient().get(resourceGroupName, workbenchName, chamberName, requestName);
        if (inner != null) {
            return new RequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public FileRequestsManage manage(
        String resourceGroupName, String workbenchName, String chamberName, String requestName) {
        FileRequestsManageInner inner =
            this.serviceClient().manage(resourceGroupName, workbenchName, chamberName, requestName);
        if (inner != null) {
            return new FileRequestsManageImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public FileRequestsManage manage(
        String resourceGroupName,
        String workbenchName,
        String chamberName,
        String requestName,
        FileRequestsManageParameters body,
        Context context) {
        FileRequestsManageInner inner =
            this.serviceClient().manage(resourceGroupName, workbenchName, chamberName, requestName, body, context);
        if (inner != null) {
            return new FileRequestsManageImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Request> list(String resourceGroupName, String workbenchName, String chamberName) {
        PagedIterable<RequestInner> inner = this.serviceClient().list(resourceGroupName, workbenchName, chamberName);
        return Utils.mapPage(inner, inner1 -> new RequestImpl(inner1, this.manager()));
    }

    public PagedIterable<Request> list(
        String resourceGroupName, String workbenchName, String chamberName, Context context) {
        PagedIterable<RequestInner> inner =
            this.serviceClient().list(resourceGroupName, workbenchName, chamberName, context);
        return Utils.mapPage(inner, inner1 -> new RequestImpl(inner1, this.manager()));
    }

    private FileRequestsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.modsimworkbench.ModsimworkbenchManager manager() {
        return this.serviceManager;
    }
}
