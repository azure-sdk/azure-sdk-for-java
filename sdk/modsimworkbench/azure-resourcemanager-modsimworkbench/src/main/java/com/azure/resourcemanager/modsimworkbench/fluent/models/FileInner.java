// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.modsimworkbench.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/** File resource. */
@Fluent
public final class FileInner extends Resource {
    /*
     * File properties
     */
    @JsonProperty(value = "properties")
    private FilePropertiesFormat innerProperties;

    /*
     * system data
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Name of SKU.
     */
    @JsonProperty(value = "sku")
    private String sku;

    /** Creates an instance of FileInner class. */
    public FileInner() {
    }

    /**
     * Get the innerProperties property: File properties.
     *
     * @return the innerProperties value.
     */
    private FilePropertiesFormat innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: system data.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the sku property: Name of SKU.
     *
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: Name of SKU.
     *
     * @param sku the sku value to set.
     * @return the FileInner object itself.
     */
    public FileInner withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FileInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FileInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: Gets the status of the file at the time the operation was called.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the timestamp property: The modified timestamp of the file.
     *
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.innerProperties() == null ? null : this.innerProperties().timestamp();
    }

    /**
     * Set the timestamp property: The modified timestamp of the file.
     *
     * @param timestamp the timestamp value to set.
     * @return the FileInner object itself.
     */
    public FileInner withTimestamp(OffsetDateTime timestamp) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FilePropertiesFormat();
        }
        this.innerProperties().withTimestamp(timestamp);
        return this;
    }

    /**
     * Get the dataPipeline property: The direction of ModSim Workbench chamber data pipeline where the file located.
     *
     * @return the dataPipeline value.
     */
    public String dataPipeline() {
        return this.innerProperties() == null ? null : this.innerProperties().dataPipeline();
    }

    /**
     * Set the dataPipeline property: The direction of ModSim Workbench chamber data pipeline where the file located.
     *
     * @param dataPipeline the dataPipeline value to set.
     * @return the FileInner object itself.
     */
    public FileInner withDataPipeline(String dataPipeline) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FilePropertiesFormat();
        }
        this.innerProperties().withDataPipeline(dataPipeline);
        return this;
    }

    /**
     * Get the requestId property: The resource ID of ModSim Workbench chamber data pipeline request Works and required
     * only if requested is true.
     *
     * @return the requestId value.
     */
    public String requestId() {
        return this.innerProperties() == null ? null : this.innerProperties().requestId();
    }

    /**
     * Set the requestId property: The resource ID of ModSim Workbench chamber data pipeline request Works and required
     * only if requested is true.
     *
     * @param requestId the requestId value to set.
     * @return the FileInner object itself.
     */
    public FileInner withRequestId(String requestId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FilePropertiesFormat();
        }
        this.innerProperties().withRequestId(requestId);
        return this;
    }

    /**
     * Get the filePath property: The Linux File System path for the ModSim Workbench chamber data pipeline file.
     *
     * @return the filePath value.
     */
    public String filePath() {
        return this.innerProperties() == null ? null : this.innerProperties().filePath();
    }

    /**
     * Set the filePath property: The Linux File System path for the ModSim Workbench chamber data pipeline file.
     *
     * @param filePath the filePath value to set.
     * @return the FileInner object itself.
     */
    public FileInner withFilePath(String filePath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FilePropertiesFormat();
        }
        this.innerProperties().withFilePath(filePath);
        return this;
    }

    /**
     * Get the size property: The size of the file.
     *
     * @return the size value.
     */
    public Long size() {
        return this.innerProperties() == null ? null : this.innerProperties().size();
    }

    /**
     * Set the size property: The size of the file.
     *
     * @param size the size value to set.
     * @return the FileInner object itself.
     */
    public FileInner withSize(Long size) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FilePropertiesFormat();
        }
        this.innerProperties().withSize(size);
        return this;
    }

    /**
     * Get the checksum property: The MD5 hash of the file.
     *
     * @return the checksum value.
     */
    public String checksum() {
        return this.innerProperties() == null ? null : this.innerProperties().checksum();
    }

    /**
     * Set the checksum property: The MD5 hash of the file.
     *
     * @param checksum the checksum value to set.
     * @return the FileInner object itself.
     */
    public FileInner withChecksum(String checksum) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FilePropertiesFormat();
        }
        this.innerProperties().withChecksum(checksum);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
