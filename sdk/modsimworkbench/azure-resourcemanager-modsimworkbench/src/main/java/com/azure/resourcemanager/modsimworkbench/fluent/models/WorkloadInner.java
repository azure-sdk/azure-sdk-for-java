// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.modsimworkbench.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Workload resource. */
@Fluent
public final class WorkloadInner extends Resource {
    /*
     * Workload properties.
     */
    @JsonProperty(value = "properties")
    private WorkloadPropertiesFormat innerProperties;

    /*
     * system data
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Name of SKU.
     */
    @JsonProperty(value = "sku")
    private String sku;

    /** Creates an instance of WorkloadInner class. */
    public WorkloadInner() {
    }

    /**
     * Get the innerProperties property: Workload properties.
     *
     * @return the innerProperties value.
     */
    private WorkloadPropertiesFormat innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: system data.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the sku property: Name of SKU.
     *
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: Name of SKU.
     *
     * @param sku the sku value to set.
     * @return the WorkloadInner object itself.
     */
    public WorkloadInner withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public WorkloadInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public WorkloadInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: Gets the status of the workload at the time the operation was called.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the vmSize property: Gets or sets the VmSize.
     *
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.innerProperties() == null ? null : this.innerProperties().vmSize();
    }

    /**
     * Set the vmSize property: Gets or sets the VmSize.
     *
     * @param vmSize the vmSize value to set.
     * @return the WorkloadInner object itself.
     */
    public WorkloadInner withVmSize(String vmSize) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkloadPropertiesFormat();
        }
        this.innerProperties().withVmSize(vmSize);
        return this;
    }

    /**
     * Get the edaType property: Gets or sets the edaType.
     *
     * @return the edaType value.
     */
    public String edaType() {
        return this.innerProperties() == null ? null : this.innerProperties().edaType();
    }

    /**
     * Set the edaType property: Gets or sets the edaType.
     *
     * @param edaType the edaType value to set.
     * @return the WorkloadInner object itself.
     */
    public WorkloadInner withEdaType(String edaType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkloadPropertiesFormat();
        }
        this.innerProperties().withEdaType(edaType);
        return this;
    }

    /**
     * Get the status property: Gets or sets the status.
     *
     * @return the status value.
     */
    public String status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the privateIp property: Gets or sets the private IpAddress of workload.
     *
     * @return the privateIp value.
     */
    public String privateIp() {
        return this.innerProperties() == null ? null : this.innerProperties().privateIp();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
