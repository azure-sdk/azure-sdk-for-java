// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.modsimworkbench.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.modsimworkbench.fluent.models.ChamberInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of Chamber. */
public interface Chamber {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: system data.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the sku property: Name of SKU.
     *
     * @return the sku value.
     */
    String sku();

    /**
     * Gets the provisioningState property: Gets the status of the Chamber at the time the operation was called.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the enable property: Switch to show if License Service is activated.
     *
     * @return the enable value.
     */
    Boolean enable();

    /**
     * Gets the server property: License Service server.
     *
     * @return the server value.
     */
    String server();

    /**
     * Gets the lmhostId property: Unique identifier of ModSim Workbench chamber license servers used by FlexNet
     * Licensing Service.
     *
     * @return the lmhostId value.
     */
    List<String> lmhostId();

    /**
     * Gets the mfp property: License server information for Cadence License Manager.
     *
     * @return the mfp value.
     */
    List<String> mfp();

    /**
     * Gets the enableAnsysEnable property: Switch to show if License Service is activated.
     *
     * @return the enableAnsysEnable value.
     */
    Boolean enableAnsysEnable();

    /**
     * Gets the serverAnsysServer property: License Service server.
     *
     * @return the serverAnsysServer value.
     */
    String serverAnsysServer();

    /**
     * Gets the lmhostIdAnsysLmhostId property: Unique identifier of ModSim Workbench chamber license servers used by
     * FlexNet Licensing Service.
     *
     * @return the lmhostIdAnsysLmhostId value.
     */
    List<String> lmhostIdAnsysLmhostId();

    /**
     * Gets the enableSiemensEnable property: Switch to show if License Service is activated.
     *
     * @return the enableSiemensEnable value.
     */
    Boolean enableSiemensEnable();

    /**
     * Gets the serverSiemensServer property: License Service server.
     *
     * @return the serverSiemensServer value.
     */
    String serverSiemensServer();

    /**
     * Gets the lmhostIdSiemensLmhostId property: Unique identifier of ModSim Workbench chamber license servers used by
     * FlexNet Licensing Service.
     *
     * @return the lmhostIdSiemensLmhostId value.
     */
    List<String> lmhostIdSiemensLmhostId();

    /**
     * Gets the enableSynopsysEnable property: Switch to show if License Service is activated.
     *
     * @return the enableSynopsysEnable value.
     */
    Boolean enableSynopsysEnable();

    /**
     * Gets the serverSynopsysServer property: License Service server.
     *
     * @return the serverSynopsysServer value.
     */
    String serverSynopsysServer();

    /**
     * Gets the vmUuid property: Virtual machine universal unique identifier of ModSim Workbench chamber license servers
     * used by FlexNet Licensing Service.
     *
     * @return the vmUuid value.
     */
    List<String> vmUuid();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.modsimworkbench.fluent.models.ChamberInner object.
     *
     * @return the inner object.
     */
    ChamberInner innerModel();

    /** The entirety of the Chamber definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The Chamber definition stages. */
    interface DefinitionStages {
        /** The first stage of the Chamber definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Chamber definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the Chamber definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroup, workbenchName.
             *
             * @param resourceGroup The name of the resource group.
             * @param workbenchName The name of the workbench.
             * @return the next definition stage.
             */
            WithCreate withExistingWorkbenche(String resourceGroup, String workbenchName);
        }
        /**
         * The stage of the Chamber definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithSku {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Chamber create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Chamber create(Context context);
        }
        /** The stage of the Chamber definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Chamber definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Name of SKU..
             *
             * @param sku Name of SKU.
             * @return the next definition stage.
             */
            WithCreate withSku(String sku);
        }
    }
    /**
     * Begins update for the Chamber resource.
     *
     * @return the stage of resource update.
     */
    Chamber.Update update();

    /** The template for Chamber update. */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithSku {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Chamber apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Chamber apply(Context context);
    }
    /** The Chamber update stages. */
    interface UpdateStages {
        /** The stage of the Chamber update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Chamber update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Name of SKU..
             *
             * @param sku Name of SKU.
             * @return the next definition stage.
             */
            Update withSku(String sku);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Chamber refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Chamber refresh(Context context);
}
