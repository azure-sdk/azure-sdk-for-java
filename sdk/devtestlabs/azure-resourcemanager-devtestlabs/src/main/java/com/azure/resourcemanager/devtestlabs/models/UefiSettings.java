// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Security settings like secure boot and vTPM. */
@Fluent
public final class UefiSettings {
    /*
     * Flag to enable or disable secure boot.
     */
    @JsonProperty(value = "secureBootEnabled")
    private Boolean secureBootEnabled;

    /*
     * Flag to enable or disable vTPM (virtual Trusted Platform Module).
     */
    @JsonProperty(value = "vTpmEnabled")
    private Boolean vTpmEnabled;

    /** Creates an instance of UefiSettings class. */
    public UefiSettings() {
    }

    /**
     * Get the secureBootEnabled property: Flag to enable or disable secure boot.
     *
     * @return the secureBootEnabled value.
     */
    public Boolean secureBootEnabled() {
        return this.secureBootEnabled;
    }

    /**
     * Set the secureBootEnabled property: Flag to enable or disable secure boot.
     *
     * @param secureBootEnabled the secureBootEnabled value to set.
     * @return the UefiSettings object itself.
     */
    public UefiSettings withSecureBootEnabled(Boolean secureBootEnabled) {
        this.secureBootEnabled = secureBootEnabled;
        return this;
    }

    /**
     * Get the vTpmEnabled property: Flag to enable or disable vTPM (virtual Trusted Platform Module).
     *
     * @return the vTpmEnabled value.
     */
    public Boolean vTpmEnabled() {
        return this.vTpmEnabled;
    }

    /**
     * Set the vTpmEnabled property: Flag to enable or disable vTPM (virtual Trusted Platform Module).
     *
     * @param vTpmEnabled the vTpmEnabled value to set.
     * @return the UefiSettings object itself.
     */
    public UefiSettings withVTpmEnabled(Boolean vTpmEnabled) {
        this.vTpmEnabled = vTpmEnabled;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
