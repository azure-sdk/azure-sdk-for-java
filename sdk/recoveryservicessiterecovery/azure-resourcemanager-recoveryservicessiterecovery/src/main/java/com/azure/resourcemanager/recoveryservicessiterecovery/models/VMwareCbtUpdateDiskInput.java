// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * VMwareCbt disk input for update.
 */
@Fluent
public final class VMwareCbtUpdateDiskInput implements JsonSerializable<VMwareCbtUpdateDiskInput> {
    /*
     * The disk Id.
     */
    private String diskId;

    /*
     * The target disk name.
     */
    private String targetDiskName;

    /*
     * A value indicating whether the disk is the OS disk.
     */
    private String isOSDisk;

    /*
     * The number of IOPS allowed for Premium V2 and Ultra disks.
     */
    private Long iops;

    /*
     * The total throughput in Mbps for Premium V2 and Ultra disks.
     */
    private Long throughputInMbps;

    /*
     * The target disk size in GB.
     */
    private Long diskSizeInGB;

    /**
     * Creates an instance of VMwareCbtUpdateDiskInput class.
     */
    public VMwareCbtUpdateDiskInput() {
    }

    /**
     * Get the diskId property: The disk Id.
     * 
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Set the diskId property: The disk Id.
     * 
     * @param diskId the diskId value to set.
     * @return the VMwareCbtUpdateDiskInput object itself.
     */
    public VMwareCbtUpdateDiskInput withDiskId(String diskId) {
        this.diskId = diskId;
        return this;
    }

    /**
     * Get the targetDiskName property: The target disk name.
     * 
     * @return the targetDiskName value.
     */
    public String targetDiskName() {
        return this.targetDiskName;
    }

    /**
     * Set the targetDiskName property: The target disk name.
     * 
     * @param targetDiskName the targetDiskName value to set.
     * @return the VMwareCbtUpdateDiskInput object itself.
     */
    public VMwareCbtUpdateDiskInput withTargetDiskName(String targetDiskName) {
        this.targetDiskName = targetDiskName;
        return this;
    }

    /**
     * Get the isOSDisk property: A value indicating whether the disk is the OS disk.
     * 
     * @return the isOSDisk value.
     */
    public String isOSDisk() {
        return this.isOSDisk;
    }

    /**
     * Set the isOSDisk property: A value indicating whether the disk is the OS disk.
     * 
     * @param isOSDisk the isOSDisk value to set.
     * @return the VMwareCbtUpdateDiskInput object itself.
     */
    public VMwareCbtUpdateDiskInput withIsOSDisk(String isOSDisk) {
        this.isOSDisk = isOSDisk;
        return this;
    }

    /**
     * Get the iops property: The number of IOPS allowed for Premium V2 and Ultra disks.
     * 
     * @return the iops value.
     */
    public Long iops() {
        return this.iops;
    }

    /**
     * Set the iops property: The number of IOPS allowed for Premium V2 and Ultra disks.
     * 
     * @param iops the iops value to set.
     * @return the VMwareCbtUpdateDiskInput object itself.
     */
    public VMwareCbtUpdateDiskInput withIops(Long iops) {
        this.iops = iops;
        return this;
    }

    /**
     * Get the throughputInMbps property: The total throughput in Mbps for Premium V2 and Ultra disks.
     * 
     * @return the throughputInMbps value.
     */
    public Long throughputInMbps() {
        return this.throughputInMbps;
    }

    /**
     * Set the throughputInMbps property: The total throughput in Mbps for Premium V2 and Ultra disks.
     * 
     * @param throughputInMbps the throughputInMbps value to set.
     * @return the VMwareCbtUpdateDiskInput object itself.
     */
    public VMwareCbtUpdateDiskInput withThroughputInMbps(Long throughputInMbps) {
        this.throughputInMbps = throughputInMbps;
        return this;
    }

    /**
     * Get the diskSizeInGB property: The target disk size in GB.
     * 
     * @return the diskSizeInGB value.
     */
    public Long diskSizeInGB() {
        return this.diskSizeInGB;
    }

    /**
     * Set the diskSizeInGB property: The target disk size in GB.
     * 
     * @param diskSizeInGB the diskSizeInGB value to set.
     * @return the VMwareCbtUpdateDiskInput object itself.
     */
    public VMwareCbtUpdateDiskInput withDiskSizeInGB(Long diskSizeInGB) {
        this.diskSizeInGB = diskSizeInGB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskId() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property diskId in model VMwareCbtUpdateDiskInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VMwareCbtUpdateDiskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskId", this.diskId);
        jsonWriter.writeStringField("targetDiskName", this.targetDiskName);
        jsonWriter.writeStringField("isOSDisk", this.isOSDisk);
        jsonWriter.writeNumberField("iops", this.iops);
        jsonWriter.writeNumberField("throughputInMbps", this.throughputInMbps);
        jsonWriter.writeNumberField("diskSizeInGB", this.diskSizeInGB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMwareCbtUpdateDiskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMwareCbtUpdateDiskInput if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VMwareCbtUpdateDiskInput.
     */
    public static VMwareCbtUpdateDiskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMwareCbtUpdateDiskInput deserializedVMwareCbtUpdateDiskInput = new VMwareCbtUpdateDiskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskId".equals(fieldName)) {
                    deserializedVMwareCbtUpdateDiskInput.diskId = reader.getString();
                } else if ("targetDiskName".equals(fieldName)) {
                    deserializedVMwareCbtUpdateDiskInput.targetDiskName = reader.getString();
                } else if ("isOSDisk".equals(fieldName)) {
                    deserializedVMwareCbtUpdateDiskInput.isOSDisk = reader.getString();
                } else if ("iops".equals(fieldName)) {
                    deserializedVMwareCbtUpdateDiskInput.iops = reader.getNullable(JsonReader::getLong);
                } else if ("throughputInMbps".equals(fieldName)) {
                    deserializedVMwareCbtUpdateDiskInput.throughputInMbps = reader.getNullable(JsonReader::getLong);
                } else if ("diskSizeInGB".equals(fieldName)) {
                    deserializedVMwareCbtUpdateDiskInput.diskSizeInGB = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMwareCbtUpdateDiskInput;
        });
    }
}
