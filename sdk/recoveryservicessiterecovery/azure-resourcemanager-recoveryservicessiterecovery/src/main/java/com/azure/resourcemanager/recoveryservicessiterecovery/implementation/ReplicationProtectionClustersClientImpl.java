// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationProtectionClustersClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.ReplicationProtectionClusterInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ApplyClusterRecoveryPointInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ClusterTestFailoverCleanupInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ClusterTestFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ClusterUnplannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectionClusterCollection;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ReplicationProtectionClustersClient.
 */
public final class ReplicationProtectionClustersClientImpl implements ReplicationProtectionClustersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ReplicationProtectionClustersService service;

    /**
     * The service client containing this operation class.
     */
    private final SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationProtectionClustersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ReplicationProtectionClustersClientImpl(SiteRecoveryManagementClientImpl client) {
        this.service = RestProxy.create(ReplicationProtectionClustersService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SiteRecoveryManagementClientReplicationProtectionClusters to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SiteRecoveryManageme")
    public interface ReplicationProtectionClustersService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ReplicationProtectionClusterCollection>> listByReplicationProtectionContainers(
            @HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ReplicationProtectionClusterInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("replicationProtectionClusterName") String replicationProtectionClusterName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("replicationProtectionClusterName") String replicationProtectionClusterName,
            @BodyParam("application/json") ReplicationProtectionClusterInner replicationProtectionCluster,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> purge(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("replicationProtectionClusterName") String replicationProtectionClusterName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/applyRecoveryPoint")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> applyRecoveryPoint(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("replicationProtectionClusterName") String replicationProtectionClusterName,
            @BodyParam("application/json") ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/failoverCommit")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> failoverCommit(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("replicationProtectionClusterName") String replicationProtectionClusterName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/operationResults/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ReplicationProtectionClusterInner>> getOperationResults(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("replicationProtectionClusterName") String replicationProtectionClusterName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/repairReplication")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> repairReplication(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("replicationProtectionClusterName") String replicationProtectionClusterName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/testFailover")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> testFailover(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("replicationProtectionClusterName") String replicationProtectionClusterName,
            @BodyParam("application/json") ClusterTestFailoverInput failoverInput, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/testFailoverCleanup")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> testFailoverCleanup(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("replicationProtectionClusterName") String replicationProtectionClusterName,
            @BodyParam("application/json") ClusterTestFailoverCleanupInput cleanupInput,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/unplannedFailover")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> unplannedFailover(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("fabricName") String fabricName,
            @PathParam("protectionContainerName") String protectionContainerName,
            @PathParam("replicationProtectionClusterName") String replicationProtectionClusterName,
            @BodyParam("application/json") ClusterUnplannedFailoverInput failoverInput,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionClusters")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ReplicationProtectionClusterCollection>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("skipToken") String skipToken,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ReplicationProtectionClusterCollection>> listByReplicationProtectionContainersNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ReplicationProtectionClusterCollection>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets the list of Replication protection clusters in fabric, container.
     * 
     * Gets the list of ASR replication protected clusters in the protection container.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the protection container along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationProtectionClusterInner>> listByReplicationProtectionContainersSinglePageAsync(
        String resourceName, String resourceGroupName, String fabricName, String protectionContainerName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByReplicationProtectionContainers(this.client.getEndpoint(),
                this.client.getApiVersion(), resourceName, resourceGroupName, this.client.getSubscriptionId(),
                fabricName, protectionContainerName, accept, context))
            .<PagedResponse<ReplicationProtectionClusterInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the list of Replication protection clusters in fabric, container.
     * 
     * Gets the list of ASR replication protected clusters in the protection container.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the protection container along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationProtectionClusterInner>> listByReplicationProtectionContainersSinglePageAsync(
        String resourceName, String resourceGroupName, String fabricName, String protectionContainerName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByReplicationProtectionContainers(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
                resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName, accept,
                context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets the list of Replication protection clusters in fabric, container.
     * 
     * Gets the list of ASR replication protected clusters in the protection container.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the protection container as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ReplicationProtectionClusterInner> listByReplicationProtectionContainersAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName) {
        return new PagedFlux<>(
            () -> listByReplicationProtectionContainersSinglePageAsync(resourceName, resourceGroupName, fabricName,
                protectionContainerName),
            nextLink -> listByReplicationProtectionContainersNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the list of Replication protection clusters in fabric, container.
     * 
     * Gets the list of ASR replication protected clusters in the protection container.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the protection container as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ReplicationProtectionClusterInner> listByReplicationProtectionContainersAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName, Context context) {
        return new PagedFlux<>(
            () -> listByReplicationProtectionContainersSinglePageAsync(resourceName, resourceGroupName, fabricName,
                protectionContainerName, context),
            nextLink -> listByReplicationProtectionContainersNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the list of Replication protection clusters in fabric, container.
     * 
     * Gets the list of ASR replication protected clusters in the protection container.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the protection container as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ReplicationProtectionClusterInner> listByReplicationProtectionContainers(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName) {
        return new PagedIterable<>(listByReplicationProtectionContainersAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName));
    }

    /**
     * Gets the list of Replication protection clusters in fabric, container.
     * 
     * Gets the list of ASR replication protected clusters in the protection container.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the protection container as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ReplicationProtectionClusterInner> listByReplicationProtectionContainers(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName, Context context) {
        return new PagedIterable<>(listByReplicationProtectionContainersAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, context));
    }

    /**
     * Gets the details of a Replication protection cluster.
     * 
     * Gets the details of an ASR replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of an ASR replication protection cluster along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ReplicationProtectionClusterInner>> getWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
                resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                replicationProtectionClusterName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the details of a Replication protection cluster.
     * 
     * Gets the details of an ASR replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of an ASR replication protection cluster along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ReplicationProtectionClusterInner>> getWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceName, resourceGroupName,
            this.client.getSubscriptionId(), fabricName, protectionContainerName, replicationProtectionClusterName,
            accept, context);
    }

    /**
     * Gets the details of a Replication protection cluster.
     * 
     * Gets the details of an ASR replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of an ASR replication protection cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> getAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName) {
        return getWithResponseAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the details of a Replication protection cluster.
     * 
     * Gets the details of an ASR replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of an ASR replication protection cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ReplicationProtectionClusterInner> getWithResponse(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName, Context context) {
        return getWithResponseAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, context).block();
    }

    /**
     * Gets the details of a Replication protection cluster.
     * 
     * Gets the details of an ASR replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of an ASR replication protection cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner get(String resourceName, String resourceGroupName, String fabricName,
        String protectionContainerName, String replicationProtectionClusterName) {
        return getWithResponse(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, Context.NONE).getValue();
    }

    /**
     * Create Replication protection Cluster.
     * 
     * The operation to create an ASR replication protection cluster item.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param replicationProtectionCluster Create replication protection cluster Input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ReplicationProtectionClusterInner replicationProtectionCluster) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (replicationProtectionCluster == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter replicationProtectionCluster is required and cannot be null."));
        } else {
            replicationProtectionCluster.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
                resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                replicationProtectionClusterName, replicationProtectionCluster, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create Replication protection Cluster.
     * 
     * The operation to create an ASR replication protection cluster item.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param replicationProtectionCluster Create replication protection cluster Input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ReplicationProtectionClusterInner replicationProtectionCluster, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (replicationProtectionCluster == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter replicationProtectionCluster is required and cannot be null."));
        } else {
            replicationProtectionCluster.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), this.client.getApiVersion(), resourceName, resourceGroupName,
            this.client.getSubscriptionId(), fabricName, protectionContainerName, replicationProtectionClusterName,
            replicationProtectionCluster, accept, context);
    }

    /**
     * Create Replication protection Cluster.
     * 
     * The operation to create an ASR replication protection cluster item.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param replicationProtectionCluster Create replication protection cluster Input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginCreateAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ReplicationProtectionClusterInner replicationProtectionCluster) {
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceName, resourceGroupName, fabricName,
            protectionContainerName, replicationProtectionClusterName, replicationProtectionCluster);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, this.client.getContext());
    }

    /**
     * Create Replication protection Cluster.
     * 
     * The operation to create an ASR replication protection cluster item.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param replicationProtectionCluster Create replication protection cluster Input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginCreateAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ReplicationProtectionClusterInner replicationProtectionCluster, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceName, resourceGroupName, fabricName,
            protectionContainerName, replicationProtectionClusterName, replicationProtectionCluster, context);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, context);
    }

    /**
     * Create Replication protection Cluster.
     * 
     * The operation to create an ASR replication protection cluster item.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param replicationProtectionCluster Create replication protection cluster Input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner> beginCreate(
        String resourceName, String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ReplicationProtectionClusterInner replicationProtectionCluster) {
        return this
            .beginCreateAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, replicationProtectionCluster)
            .getSyncPoller();
    }

    /**
     * Create Replication protection Cluster.
     * 
     * The operation to create an ASR replication protection cluster item.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param replicationProtectionCluster Create replication protection cluster Input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner> beginCreate(
        String resourceName, String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ReplicationProtectionClusterInner replicationProtectionCluster,
        Context context) {
        return this
            .beginCreateAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, replicationProtectionCluster, context)
            .getSyncPoller();
    }

    /**
     * Create Replication protection Cluster.
     * 
     * The operation to create an ASR replication protection cluster item.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param replicationProtectionCluster Create replication protection cluster Input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> createAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ReplicationProtectionClusterInner replicationProtectionCluster) {
        return beginCreateAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, replicationProtectionCluster).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create Replication protection Cluster.
     * 
     * The operation to create an ASR replication protection cluster item.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param replicationProtectionCluster Create replication protection cluster Input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> createAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ReplicationProtectionClusterInner replicationProtectionCluster, Context context) {
        return beginCreateAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, replicationProtectionCluster, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create Replication protection Cluster.
     * 
     * The operation to create an ASR replication protection cluster item.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param replicationProtectionCluster Create replication protection cluster Input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner create(String resourceName, String resourceGroupName, String fabricName,
        String protectionContainerName, String replicationProtectionClusterName,
        ReplicationProtectionClusterInner replicationProtectionCluster) {
        return createAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, replicationProtectionCluster).block();
    }

    /**
     * Create Replication protection Cluster.
     * 
     * The operation to create an ASR replication protection cluster item.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param replicationProtectionCluster Create replication protection cluster Input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner create(String resourceName, String resourceGroupName, String fabricName,
        String protectionContainerName, String replicationProtectionClusterName,
        ReplicationProtectionClusterInner replicationProtectionCluster, Context context) {
        return createAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, replicationProtectionCluster, context).block();
    }

    /**
     * Purge the replication protection cluster.
     * 
     * The operation to purge the replication protection cluster. This operation will force delete the replication
     * protection cluster. Use the remove operation on replication protection cluster to perform a clean disable
     * replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> purgeWithResponseAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.purge(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
                resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                replicationProtectionClusterName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Purge the replication protection cluster.
     * 
     * The operation to purge the replication protection cluster. This operation will force delete the replication
     * protection cluster. Use the remove operation on replication protection cluster to perform a clean disable
     * replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> purgeWithResponseAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.purge(this.client.getEndpoint(), this.client.getApiVersion(), resourceName, resourceGroupName,
            this.client.getSubscriptionId(), fabricName, protectionContainerName, replicationProtectionClusterName,
            accept, context);
    }

    /**
     * Purge the replication protection cluster.
     * 
     * The operation to purge the replication protection cluster. This operation will force delete the replication
     * protection cluster. Use the remove operation on replication protection cluster to perform a clean disable
     * replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginPurgeAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName) {
        Mono<Response<Flux<ByteBuffer>>> mono = purgeWithResponseAsync(resourceName, resourceGroupName, fabricName,
            protectionContainerName, replicationProtectionClusterName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Purge the replication protection cluster.
     * 
     * The operation to purge the replication protection cluster. This operation will force delete the replication
     * protection cluster. Use the remove operation on replication protection cluster to perform a clean disable
     * replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginPurgeAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = purgeWithResponseAsync(resourceName, resourceGroupName, fabricName,
            protectionContainerName, replicationProtectionClusterName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Purge the replication protection cluster.
     * 
     * The operation to purge the replication protection cluster. This operation will force delete the replication
     * protection cluster. Use the remove operation on replication protection cluster to perform a clean disable
     * replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginPurge(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName) {
        return this
            .beginPurgeAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName)
            .getSyncPoller();
    }

    /**
     * Purge the replication protection cluster.
     * 
     * The operation to purge the replication protection cluster. This operation will force delete the replication
     * protection cluster. Use the remove operation on replication protection cluster to perform a clean disable
     * replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginPurge(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName, Context context) {
        return this
            .beginPurgeAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, context)
            .getSyncPoller();
    }

    /**
     * Purge the replication protection cluster.
     * 
     * The operation to purge the replication protection cluster. This operation will force delete the replication
     * protection cluster. Use the remove operation on replication protection cluster to perform a clean disable
     * replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> purgeAsync(String resourceName, String resourceGroupName, String fabricName,
        String protectionContainerName, String replicationProtectionClusterName) {
        return beginPurgeAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Purge the replication protection cluster.
     * 
     * The operation to purge the replication protection cluster. This operation will force delete the replication
     * protection cluster. Use the remove operation on replication protection cluster to perform a clean disable
     * replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> purgeAsync(String resourceName, String resourceGroupName, String fabricName,
        String protectionContainerName, String replicationProtectionClusterName, Context context) {
        return beginPurgeAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Purge the replication protection cluster.
     * 
     * The operation to purge the replication protection cluster. This operation will force delete the replication
     * protection cluster. Use the remove operation on replication protection cluster to perform a clean disable
     * replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void purge(String resourceName, String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName) {
        purgeAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName).block();
    }

    /**
     * Purge the replication protection cluster.
     * 
     * The operation to purge the replication protection cluster. This operation will force delete the replication
     * protection cluster. Use the remove operation on replication protection cluster to perform a clean disable
     * replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void purge(String resourceName, String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, Context context) {
        purgeAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, context).block();
    }

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> applyRecoveryPointWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (applyClusterRecoveryPointInput == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter applyClusterRecoveryPointInput is required and cannot be null."));
        } else {
            applyClusterRecoveryPointInput.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.applyRecoveryPoint(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceName, resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                replicationProtectionClusterName, applyClusterRecoveryPointInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> applyRecoveryPointWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (applyClusterRecoveryPointInput == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter applyClusterRecoveryPointInput is required and cannot be null."));
        } else {
            applyClusterRecoveryPointInput.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.applyRecoveryPoint(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
            resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
            replicationProtectionClusterName, applyClusterRecoveryPointInput, accept, context);
    }

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginApplyRecoveryPointAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput) {
        Mono<Response<Flux<ByteBuffer>>> mono = applyRecoveryPointWithResponseAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, replicationProtectionClusterName, applyClusterRecoveryPointInput);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, this.client.getContext());
    }

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginApplyRecoveryPointAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = applyRecoveryPointWithResponseAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, applyClusterRecoveryPointInput, context);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, context);
    }

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginApplyRecoveryPoint(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput) {
        return this
            .beginApplyRecoveryPointAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, applyClusterRecoveryPointInput)
            .getSyncPoller();
    }

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginApplyRecoveryPoint(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput, Context context) {
        return this
            .beginApplyRecoveryPointAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, applyClusterRecoveryPointInput, context)
            .getSyncPoller();
    }

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> applyRecoveryPointAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput) {
        return beginApplyRecoveryPointAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, applyClusterRecoveryPointInput).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> applyRecoveryPointAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput,
        Context context) {
        return beginApplyRecoveryPointAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, applyClusterRecoveryPointInput, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner applyRecoveryPoint(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput) {
        return applyRecoveryPointAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, applyClusterRecoveryPointInput).block();
    }

    /**
     * Execute the change recovery point operation for cluster.
     * 
     * Operation to apply a new cluster recovery point on the Protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param applyClusterRecoveryPointInput Apply recovery point input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner applyRecoveryPoint(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput, Context context) {
        return applyRecoveryPointAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, applyClusterRecoveryPointInput, context).block();
    }

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> failoverCommitWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.failoverCommit(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceName, resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                replicationProtectionClusterName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> failoverCommitWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.failoverCommit(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
            resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
            replicationProtectionClusterName, accept, context);
    }

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginFailoverCommitAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName) {
        Mono<Response<Flux<ByteBuffer>>> mono = failoverCommitWithResponseAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, replicationProtectionClusterName);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, this.client.getContext());
    }

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginFailoverCommitAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = failoverCommitWithResponseAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, replicationProtectionClusterName, context);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, context);
    }

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginFailoverCommit(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName) {
        return this
            .beginFailoverCommitAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName)
            .getSyncPoller();
    }

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginFailoverCommit(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName, Context context) {
        return this
            .beginFailoverCommitAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, context)
            .getSyncPoller();
    }

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> failoverCommitAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName) {
        return beginFailoverCommitAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> failoverCommitAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName, Context context) {
        return beginFailoverCommitAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner failoverCommit(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName) {
        return failoverCommitAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName).block();
    }

    /**
     * Execute commit failover for cluster.
     * 
     * Operation to initiate commit failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner failoverCommit(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName, Context context) {
        return failoverCommitAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, context).block();
    }

    /**
     * Tracks the Replication protection cluster async operation.
     * 
     * Track the results of an asynchronous operation on the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param jobId job id to track.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ReplicationProtectionClusterInner>> getOperationResultsWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, String jobId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (jobId == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getOperationResults(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceName, resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                replicationProtectionClusterName, jobId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Tracks the Replication protection cluster async operation.
     * 
     * Track the results of an asynchronous operation on the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param jobId job id to track.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ReplicationProtectionClusterInner>> getOperationResultsWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, String jobId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (jobId == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getOperationResults(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
            resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
            replicationProtectionClusterName, jobId, accept, context);
    }

    /**
     * Tracks the Replication protection cluster async operation.
     * 
     * Track the results of an asynchronous operation on the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param jobId job id to track.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> getOperationResultsAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, String jobId) {
        return getOperationResultsWithResponseAsync(resourceName, resourceGroupName, fabricName,
            protectionContainerName, replicationProtectionClusterName, jobId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Tracks the Replication protection cluster async operation.
     * 
     * Track the results of an asynchronous operation on the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param jobId job id to track.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ReplicationProtectionClusterInner> getOperationResultsWithResponse(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, String jobId, Context context) {
        return getOperationResultsWithResponseAsync(resourceName, resourceGroupName, fabricName,
            protectionContainerName, replicationProtectionClusterName, jobId, context).block();
    }

    /**
     * Tracks the Replication protection cluster async operation.
     * 
     * Track the results of an asynchronous operation on the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param jobId job id to track.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner getOperationResults(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName, String jobId) {
        return getOperationResultsWithResponse(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, jobId, Context.NONE).getValue();
    }

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> repairReplicationWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.repairReplication(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceName, resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                replicationProtectionClusterName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> repairReplicationWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.repairReplication(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
            resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
            replicationProtectionClusterName, accept, context);
    }

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginRepairReplicationAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName) {
        Mono<Response<Flux<ByteBuffer>>> mono = repairReplicationWithResponseAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, replicationProtectionClusterName);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, this.client.getContext());
    }

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginRepairReplicationAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = repairReplicationWithResponseAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, replicationProtectionClusterName, context);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, context);
    }

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginRepairReplication(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName) {
        return this
            .beginRepairReplicationAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName)
            .getSyncPoller();
    }

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginRepairReplication(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName, Context context) {
        return this
            .beginRepairReplicationAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, context)
            .getSyncPoller();
    }

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> repairReplicationAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName) {
        return beginRepairReplicationAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> repairReplicationAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, Context context) {
        return beginRepairReplicationAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner repairReplication(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName) {
        return repairReplicationAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName).block();
    }

    /**
     * Resynchronize or repair replication of protection cluster.
     * 
     * The operation to repair replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner repairReplication(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName, Context context) {
        return repairReplicationAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, context).block();
    }

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Cluster test failover input body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testFailoverWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ClusterTestFailoverInput failoverInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (failoverInput == null) {
            return Mono.error(new IllegalArgumentException("Parameter failoverInput is required and cannot be null."));
        } else {
            failoverInput.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.testFailover(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceName, resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Cluster test failover input body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testFailoverWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ClusterTestFailoverInput failoverInput, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (failoverInput == null) {
            return Mono.error(new IllegalArgumentException("Parameter failoverInput is required and cannot be null."));
        } else {
            failoverInput.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.testFailover(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
            resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
            replicationProtectionClusterName, failoverInput, accept, context);
    }

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Cluster test failover input body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginTestFailoverAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterTestFailoverInput failoverInput) {
        Mono<Response<Flux<ByteBuffer>>> mono = testFailoverWithResponseAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, replicationProtectionClusterName, failoverInput);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, this.client.getContext());
    }

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Cluster test failover input body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginTestFailoverAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterTestFailoverInput failoverInput, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = testFailoverWithResponseAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, replicationProtectionClusterName, failoverInput, context);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, context);
    }

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Cluster test failover input body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginTestFailover(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterTestFailoverInput failoverInput) {
        return this
            .beginTestFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput)
            .getSyncPoller();
    }

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Cluster test failover input body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginTestFailover(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterTestFailoverInput failoverInput, Context context) {
        return this
            .beginTestFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput, context)
            .getSyncPoller();
    }

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Cluster test failover input body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> testFailoverAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterTestFailoverInput failoverInput) {
        return beginTestFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, failoverInput).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Cluster test failover input body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> testFailoverAsync(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterTestFailoverInput failoverInput, Context context) {
        return beginTestFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, failoverInput, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Cluster test failover input body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner testFailover(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterTestFailoverInput failoverInput) {
        return testFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, failoverInput).block();
    }

    /**
     * Execute test failover for cluster.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Cluster test failover input body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner testFailover(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterTestFailoverInput failoverInput, Context context) {
        return testFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, failoverInput, context).block();
    }

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param cleanupInput Test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testFailoverCleanupWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ClusterTestFailoverCleanupInput cleanupInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (cleanupInput == null) {
            return Mono.error(new IllegalArgumentException("Parameter cleanupInput is required and cannot be null."));
        } else {
            cleanupInput.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.testFailoverCleanup(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceName, resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                replicationProtectionClusterName, cleanupInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param cleanupInput Test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testFailoverCleanupWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ClusterTestFailoverCleanupInput cleanupInput, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (cleanupInput == null) {
            return Mono.error(new IllegalArgumentException("Parameter cleanupInput is required and cannot be null."));
        } else {
            cleanupInput.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.testFailoverCleanup(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
            resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
            replicationProtectionClusterName, cleanupInput, accept, context);
    }

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param cleanupInput Test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginTestFailoverCleanupAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterTestFailoverCleanupInput cleanupInput) {
        Mono<Response<Flux<ByteBuffer>>> mono = testFailoverCleanupWithResponseAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, replicationProtectionClusterName, cleanupInput);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, this.client.getContext());
    }

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param cleanupInput Test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginTestFailoverCleanupAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterTestFailoverCleanupInput cleanupInput, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = testFailoverCleanupWithResponseAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, replicationProtectionClusterName, cleanupInput, context);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, context);
    }

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param cleanupInput Test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginTestFailoverCleanup(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterTestFailoverCleanupInput cleanupInput) {
        return this
            .beginTestFailoverCleanupAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, cleanupInput)
            .getSyncPoller();
    }

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param cleanupInput Test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginTestFailoverCleanup(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterTestFailoverCleanupInput cleanupInput, Context context) {
        return this
            .beginTestFailoverCleanupAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, cleanupInput, context)
            .getSyncPoller();
    }

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param cleanupInput Test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> testFailoverCleanupAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ClusterTestFailoverCleanupInput cleanupInput) {
        return beginTestFailoverCleanupAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, cleanupInput).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param cleanupInput Test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> testFailoverCleanupAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ClusterTestFailoverCleanupInput cleanupInput, Context context) {
        return beginTestFailoverCleanupAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, cleanupInput, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param cleanupInput Test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner testFailoverCleanup(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterTestFailoverCleanupInput cleanupInput) {
        return testFailoverCleanupAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, cleanupInput).block();
    }

    /**
     * Execute test failover cleanup for cluster.
     * 
     * Operation to clean up the test failover of a replication protected cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param cleanupInput Test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner testFailoverCleanup(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterTestFailoverCleanupInput cleanupInput, Context context) {
        return testFailoverCleanupAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, cleanupInput, context).block();
    }

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> unplannedFailoverWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ClusterUnplannedFailoverInput failoverInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (failoverInput == null) {
            return Mono.error(new IllegalArgumentException("Parameter failoverInput is required and cannot be null."));
        } else {
            failoverInput.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.unplannedFailover(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceName, resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> unplannedFailoverWithResponseAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ClusterUnplannedFailoverInput failoverInput, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (fabricName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fabricName is required and cannot be null."));
        }
        if (protectionContainerName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null."));
        }
        if (replicationProtectionClusterName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter replicationProtectionClusterName is required and cannot be null."));
        }
        if (failoverInput == null) {
            return Mono.error(new IllegalArgumentException("Parameter failoverInput is required and cannot be null."));
        } else {
            failoverInput.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.unplannedFailover(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
            resourceGroupName, this.client.getSubscriptionId(), fabricName, protectionContainerName,
            replicationProtectionClusterName, failoverInput, accept, context);
    }

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginUnplannedFailoverAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterUnplannedFailoverInput failoverInput) {
        Mono<Response<Flux<ByteBuffer>>> mono = unplannedFailoverWithResponseAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, replicationProtectionClusterName, failoverInput);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, this.client.getContext());
    }

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginUnplannedFailoverAsync(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterUnplannedFailoverInput failoverInput, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = unplannedFailoverWithResponseAsync(resourceName, resourceGroupName,
            fabricName, protectionContainerName, replicationProtectionClusterName, failoverInput, context);
        return this.client.<ReplicationProtectionClusterInner, ReplicationProtectionClusterInner>getLroResult(mono,
            this.client.getHttpPipeline(), ReplicationProtectionClusterInner.class,
            ReplicationProtectionClusterInner.class, context);
    }

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginUnplannedFailover(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterUnplannedFailoverInput failoverInput) {
        return this
            .beginUnplannedFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput)
            .getSyncPoller();
    }

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationProtectionClusterInner>, ReplicationProtectionClusterInner>
        beginUnplannedFailover(String resourceName, String resourceGroupName, String fabricName,
            String protectionContainerName, String replicationProtectionClusterName,
            ClusterUnplannedFailoverInput failoverInput, Context context) {
        return this
            .beginUnplannedFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput, context)
            .getSyncPoller();
    }

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> unplannedFailoverAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ClusterUnplannedFailoverInput failoverInput) {
        return beginUnplannedFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, failoverInput).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationProtectionClusterInner> unplannedFailoverAsync(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, ClusterUnplannedFailoverInput failoverInput, Context context) {
        return beginUnplannedFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, failoverInput, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner unplannedFailover(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterUnplannedFailoverInput failoverInput) {
        return unplannedFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, failoverInput).block();
    }

    /**
     * Execute unplanned cluster failover.
     * 
     * Operation to initiate a failover of the replication protection cluster.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicationProtectionClusterName Replication protection cluster name.
     * @param failoverInput Failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protection Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationProtectionClusterInner unplannedFailover(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterUnplannedFailoverInput failoverInput, Context context) {
        return unplannedFailoverAsync(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, failoverInput, context).block();
    }

    /**
     * Gets the list of Replication protection clusters in vault.
     * 
     * Gets the list of ASR replication protected clusters in the vault.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param skipToken The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or null.
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the vault along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationProtectionClusterInner>> listSinglePageAsync(String resourceName,
        String resourceGroupName, String skipToken, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), resourceName,
                resourceGroupName, this.client.getSubscriptionId(), skipToken, filter, accept, context))
            .<PagedResponse<ReplicationProtectionClusterInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the list of Replication protection clusters in vault.
     * 
     * Gets the list of ASR replication protected clusters in the vault.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param skipToken The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or null.
     * @param filter OData filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the vault along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationProtectionClusterInner>> listSinglePageAsync(String resourceName,
        String resourceGroupName, String skipToken, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), resourceName, resourceGroupName,
                this.client.getSubscriptionId(), skipToken, filter, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets the list of Replication protection clusters in vault.
     * 
     * Gets the list of ASR replication protected clusters in the vault.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param skipToken The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or null.
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the vault as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ReplicationProtectionClusterInner> listAsync(String resourceName, String resourceGroupName,
        String skipToken, String filter) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceName, resourceGroupName, skipToken, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the list of Replication protection clusters in vault.
     * 
     * Gets the list of ASR replication protected clusters in the vault.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the vault as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ReplicationProtectionClusterInner> listAsync(String resourceName, String resourceGroupName) {
        final String skipToken = null;
        final String filter = null;
        return new PagedFlux<>(() -> listSinglePageAsync(resourceName, resourceGroupName, skipToken, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the list of Replication protection clusters in vault.
     * 
     * Gets the list of ASR replication protected clusters in the vault.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param skipToken The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or null.
     * @param filter OData filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the vault as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ReplicationProtectionClusterInner> listAsync(String resourceName, String resourceGroupName,
        String skipToken, String filter, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceName, resourceGroupName, skipToken, filter, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the list of Replication protection clusters in vault.
     * 
     * Gets the list of ASR replication protected clusters in the vault.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the vault as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ReplicationProtectionClusterInner> list(String resourceName, String resourceGroupName) {
        final String skipToken = null;
        final String filter = null;
        return new PagedIterable<>(listAsync(resourceName, resourceGroupName, skipToken, filter));
    }

    /**
     * Gets the list of Replication protection clusters in vault.
     * 
     * Gets the list of ASR replication protected clusters in the vault.
     * 
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param skipToken The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or null.
     * @param filter OData filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ASR replication protected clusters in the vault as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ReplicationProtectionClusterInner> list(String resourceName, String resourceGroupName,
        String skipToken, String filter, Context context) {
        return new PagedIterable<>(listAsync(resourceName, resourceGroupName, skipToken, filter, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protected item collection along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationProtectionClusterInner>>
        listByReplicationProtectionContainersNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByReplicationProtectionContainersNext(nextLink,
                this.client.getEndpoint(), accept, context))
            .<PagedResponse<ReplicationProtectionClusterInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protected item collection along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationProtectionClusterInner>>
        listByReplicationProtectionContainersNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByReplicationProtectionContainersNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protected item collection along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationProtectionClusterInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ReplicationProtectionClusterInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication protected item collection along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationProtectionClusterInner>> listNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
