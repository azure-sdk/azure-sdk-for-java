// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationProtectionClustersClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.ReplicationProtectionClusterInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ApplyClusterRecoveryPointInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ClusterTestFailoverCleanupInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ClusterTestFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ClusterUnplannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectionCluster;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationProtectionClusters;

public final class ReplicationProtectionClustersImpl implements ReplicationProtectionClusters {
    private static final ClientLogger LOGGER = new ClientLogger(ReplicationProtectionClustersImpl.class);

    private final ReplicationProtectionClustersClient innerClient;

    private final com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager;

    public ReplicationProtectionClustersImpl(ReplicationProtectionClustersClient innerClient,
        com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ReplicationProtectionCluster> listByReplicationProtectionContainers(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName) {
        PagedIterable<ReplicationProtectionClusterInner> inner = this.serviceClient()
            .listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName,
                protectionContainerName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ReplicationProtectionClusterImpl(inner1, this.manager()));
    }

    public PagedIterable<ReplicationProtectionCluster> listByReplicationProtectionContainers(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName, Context context) {
        PagedIterable<ReplicationProtectionClusterInner> inner = this.serviceClient()
            .listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName,
                context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ReplicationProtectionClusterImpl(inner1, this.manager()));
    }

    public Response<ReplicationProtectionCluster> getWithResponse(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName, Context context) {
        Response<ReplicationProtectionClusterInner> inner = this.serviceClient()
            .getWithResponse(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ReplicationProtectionClusterImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster get(String resourceName, String resourceGroupName, String fabricName,
        String protectionContainerName, String replicationProtectionClusterName) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .get(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void purge(String resourceName, String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName) {
        this.serviceClient()
            .purge(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName);
    }

    public void purge(String resourceName, String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, Context context) {
        this.serviceClient()
            .purge(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, context);
    }

    public ReplicationProtectionCluster applyRecoveryPoint(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .applyRecoveryPoint(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, applyClusterRecoveryPointInput);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster applyRecoveryPoint(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ApplyClusterRecoveryPointInput applyClusterRecoveryPointInput, Context context) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .applyRecoveryPoint(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, applyClusterRecoveryPointInput, context);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster failoverCommit(String resourceName, String resourceGroupName, String fabricName,
        String protectionContainerName, String replicationProtectionClusterName) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .failoverCommit(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster failoverCommit(String resourceName, String resourceGroupName, String fabricName,
        String protectionContainerName, String replicationProtectionClusterName, Context context) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .failoverCommit(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, context);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ReplicationProtectionCluster> getOperationResultsWithResponse(String resourceName,
        String resourceGroupName, String fabricName, String protectionContainerName,
        String replicationProtectionClusterName, String jobId, Context context) {
        Response<ReplicationProtectionClusterInner> inner = this.serviceClient()
            .getOperationResultsWithResponse(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, jobId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ReplicationProtectionClusterImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster getOperationResults(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName, String jobId) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .getOperationResults(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, jobId);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster repairReplication(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .repairReplication(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster repairReplication(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName, Context context) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .repairReplication(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, context);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster testFailover(String resourceName, String resourceGroupName, String fabricName,
        String protectionContainerName, String replicationProtectionClusterName,
        ClusterTestFailoverInput failoverInput) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .testFailover(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster testFailover(String resourceName, String resourceGroupName, String fabricName,
        String protectionContainerName, String replicationProtectionClusterName, ClusterTestFailoverInput failoverInput,
        Context context) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .testFailover(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput, context);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster testFailoverCleanup(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterTestFailoverCleanupInput cleanupInput) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .testFailoverCleanup(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, cleanupInput);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster testFailoverCleanup(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterTestFailoverCleanupInput cleanupInput, Context context) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .testFailoverCleanup(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, cleanupInput, context);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster unplannedFailover(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterUnplannedFailoverInput failoverInput) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .unplannedFailover(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ReplicationProtectionCluster unplannedFailover(String resourceName, String resourceGroupName,
        String fabricName, String protectionContainerName, String replicationProtectionClusterName,
        ClusterUnplannedFailoverInput failoverInput, Context context) {
        ReplicationProtectionClusterInner inner = this.serviceClient()
            .unplannedFailover(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, failoverInput, context);
        if (inner != null) {
            return new ReplicationProtectionClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ReplicationProtectionCluster> list(String resourceName, String resourceGroupName) {
        PagedIterable<ReplicationProtectionClusterInner> inner
            = this.serviceClient().list(resourceName, resourceGroupName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ReplicationProtectionClusterImpl(inner1, this.manager()));
    }

    public PagedIterable<ReplicationProtectionCluster> list(String resourceName, String resourceGroupName,
        String skipToken, String filter, Context context) {
        PagedIterable<ReplicationProtectionClusterInner> inner
            = this.serviceClient().list(resourceName, resourceGroupName, skipToken, filter, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ReplicationProtectionClusterImpl(inner1, this.manager()));
    }

    public ReplicationProtectionCluster getById(String id) {
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "vaults");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vaults'.", id)));
        }
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String protectionContainerName
            = ResourceManagerUtils.getValueFromIdByName(id, "replicationProtectionContainers");
        if (protectionContainerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'replicationProtectionContainers'.", id)));
        }
        String replicationProtectionClusterName
            = ResourceManagerUtils.getValueFromIdByName(id, "replicationProtectionClusters");
        if (replicationProtectionClusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'replicationProtectionClusters'.", id)));
        }
        return this
            .getWithResponse(resourceName, resourceGroupName, fabricName, protectionContainerName,
                replicationProtectionClusterName, Context.NONE)
            .getValue();
    }

    public Response<ReplicationProtectionCluster> getByIdWithResponse(String id, Context context) {
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "vaults");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vaults'.", id)));
        }
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String protectionContainerName
            = ResourceManagerUtils.getValueFromIdByName(id, "replicationProtectionContainers");
        if (protectionContainerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'replicationProtectionContainers'.", id)));
        }
        String replicationProtectionClusterName
            = ResourceManagerUtils.getValueFromIdByName(id, "replicationProtectionClusters");
        if (replicationProtectionClusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'replicationProtectionClusters'.", id)));
        }
        return this.getWithResponse(resourceName, resourceGroupName, fabricName, protectionContainerName,
            replicationProtectionClusterName, context);
    }

    private ReplicationProtectionClustersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager manager() {
        return this.serviceManager;
    }

    public ReplicationProtectionClusterImpl define(String name) {
        return new ReplicationProtectionClusterImpl(name, this.manager());
    }
}
