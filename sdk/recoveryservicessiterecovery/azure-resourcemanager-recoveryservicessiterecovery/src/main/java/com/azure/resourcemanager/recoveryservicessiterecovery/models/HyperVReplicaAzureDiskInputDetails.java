// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Disk input details.
 */
@Fluent
public final class HyperVReplicaAzureDiskInputDetails implements JsonSerializable<HyperVReplicaAzureDiskInputDetails> {
    /*
     * The DiskId.
     */
    private String diskId;

    /*
     * The LogStorageAccountId.
     */
    private String logStorageAccountId;

    /*
     * The disk type.
     */
    private DiskAccountType diskType;

    /*
     * The DiskEncryptionSet ARM ID.
     */
    private String diskEncryptionSetId;

    /*
     * The logical sector size (in bytes), 512 by default.
     */
    private Integer sectorSizeInBytes;

    /*
     * The number of IOPS allowed for Premium V2 and Ultra disks.
     */
    private Long iops;

    /*
     * The total throughput in Mbps for Premium V2 and Ultra disks.
     */
    private Long throughputInMbps;

    /*
     * The target disk size in GB.
     */
    private Long diskSizeInGB;

    /**
     * Creates an instance of HyperVReplicaAzureDiskInputDetails class.
     */
    public HyperVReplicaAzureDiskInputDetails() {
    }

    /**
     * Get the diskId property: The DiskId.
     * 
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Set the diskId property: The DiskId.
     * 
     * @param diskId the diskId value to set.
     * @return the HyperVReplicaAzureDiskInputDetails object itself.
     */
    public HyperVReplicaAzureDiskInputDetails withDiskId(String diskId) {
        this.diskId = diskId;
        return this;
    }

    /**
     * Get the logStorageAccountId property: The LogStorageAccountId.
     * 
     * @return the logStorageAccountId value.
     */
    public String logStorageAccountId() {
        return this.logStorageAccountId;
    }

    /**
     * Set the logStorageAccountId property: The LogStorageAccountId.
     * 
     * @param logStorageAccountId the logStorageAccountId value to set.
     * @return the HyperVReplicaAzureDiskInputDetails object itself.
     */
    public HyperVReplicaAzureDiskInputDetails withLogStorageAccountId(String logStorageAccountId) {
        this.logStorageAccountId = logStorageAccountId;
        return this;
    }

    /**
     * Get the diskType property: The disk type.
     * 
     * @return the diskType value.
     */
    public DiskAccountType diskType() {
        return this.diskType;
    }

    /**
     * Set the diskType property: The disk type.
     * 
     * @param diskType the diskType value to set.
     * @return the HyperVReplicaAzureDiskInputDetails object itself.
     */
    public HyperVReplicaAzureDiskInputDetails withDiskType(DiskAccountType diskType) {
        this.diskType = diskType;
        return this;
    }

    /**
     * Get the diskEncryptionSetId property: The DiskEncryptionSet ARM ID.
     * 
     * @return the diskEncryptionSetId value.
     */
    public String diskEncryptionSetId() {
        return this.diskEncryptionSetId;
    }

    /**
     * Set the diskEncryptionSetId property: The DiskEncryptionSet ARM ID.
     * 
     * @param diskEncryptionSetId the diskEncryptionSetId value to set.
     * @return the HyperVReplicaAzureDiskInputDetails object itself.
     */
    public HyperVReplicaAzureDiskInputDetails withDiskEncryptionSetId(String diskEncryptionSetId) {
        this.diskEncryptionSetId = diskEncryptionSetId;
        return this;
    }

    /**
     * Get the sectorSizeInBytes property: The logical sector size (in bytes), 512 by default.
     * 
     * @return the sectorSizeInBytes value.
     */
    public Integer sectorSizeInBytes() {
        return this.sectorSizeInBytes;
    }

    /**
     * Set the sectorSizeInBytes property: The logical sector size (in bytes), 512 by default.
     * 
     * @param sectorSizeInBytes the sectorSizeInBytes value to set.
     * @return the HyperVReplicaAzureDiskInputDetails object itself.
     */
    public HyperVReplicaAzureDiskInputDetails withSectorSizeInBytes(Integer sectorSizeInBytes) {
        this.sectorSizeInBytes = sectorSizeInBytes;
        return this;
    }

    /**
     * Get the iops property: The number of IOPS allowed for Premium V2 and Ultra disks.
     * 
     * @return the iops value.
     */
    public Long iops() {
        return this.iops;
    }

    /**
     * Set the iops property: The number of IOPS allowed for Premium V2 and Ultra disks.
     * 
     * @param iops the iops value to set.
     * @return the HyperVReplicaAzureDiskInputDetails object itself.
     */
    public HyperVReplicaAzureDiskInputDetails withIops(Long iops) {
        this.iops = iops;
        return this;
    }

    /**
     * Get the throughputInMbps property: The total throughput in Mbps for Premium V2 and Ultra disks.
     * 
     * @return the throughputInMbps value.
     */
    public Long throughputInMbps() {
        return this.throughputInMbps;
    }

    /**
     * Set the throughputInMbps property: The total throughput in Mbps for Premium V2 and Ultra disks.
     * 
     * @param throughputInMbps the throughputInMbps value to set.
     * @return the HyperVReplicaAzureDiskInputDetails object itself.
     */
    public HyperVReplicaAzureDiskInputDetails withThroughputInMbps(Long throughputInMbps) {
        this.throughputInMbps = throughputInMbps;
        return this;
    }

    /**
     * Get the diskSizeInGB property: The target disk size in GB.
     * 
     * @return the diskSizeInGB value.
     */
    public Long diskSizeInGB() {
        return this.diskSizeInGB;
    }

    /**
     * Set the diskSizeInGB property: The target disk size in GB.
     * 
     * @param diskSizeInGB the diskSizeInGB value to set.
     * @return the HyperVReplicaAzureDiskInputDetails object itself.
     */
    public HyperVReplicaAzureDiskInputDetails withDiskSizeInGB(Long diskSizeInGB) {
        this.diskSizeInGB = diskSizeInGB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskId", this.diskId);
        jsonWriter.writeStringField("logStorageAccountId", this.logStorageAccountId);
        jsonWriter.writeStringField("diskType", this.diskType == null ? null : this.diskType.toString());
        jsonWriter.writeStringField("diskEncryptionSetId", this.diskEncryptionSetId);
        jsonWriter.writeNumberField("sectorSizeInBytes", this.sectorSizeInBytes);
        jsonWriter.writeNumberField("iops", this.iops);
        jsonWriter.writeNumberField("throughputInMbps", this.throughputInMbps);
        jsonWriter.writeNumberField("diskSizeInGB", this.diskSizeInGB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HyperVReplicaAzureDiskInputDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HyperVReplicaAzureDiskInputDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HyperVReplicaAzureDiskInputDetails.
     */
    public static HyperVReplicaAzureDiskInputDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HyperVReplicaAzureDiskInputDetails deserializedHyperVReplicaAzureDiskInputDetails
                = new HyperVReplicaAzureDiskInputDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskId".equals(fieldName)) {
                    deserializedHyperVReplicaAzureDiskInputDetails.diskId = reader.getString();
                } else if ("logStorageAccountId".equals(fieldName)) {
                    deserializedHyperVReplicaAzureDiskInputDetails.logStorageAccountId = reader.getString();
                } else if ("diskType".equals(fieldName)) {
                    deserializedHyperVReplicaAzureDiskInputDetails.diskType
                        = DiskAccountType.fromString(reader.getString());
                } else if ("diskEncryptionSetId".equals(fieldName)) {
                    deserializedHyperVReplicaAzureDiskInputDetails.diskEncryptionSetId = reader.getString();
                } else if ("sectorSizeInBytes".equals(fieldName)) {
                    deserializedHyperVReplicaAzureDiskInputDetails.sectorSizeInBytes
                        = reader.getNullable(JsonReader::getInt);
                } else if ("iops".equals(fieldName)) {
                    deserializedHyperVReplicaAzureDiskInputDetails.iops = reader.getNullable(JsonReader::getLong);
                } else if ("throughputInMbps".equals(fieldName)) {
                    deserializedHyperVReplicaAzureDiskInputDetails.throughputInMbps
                        = reader.getNullable(JsonReader::getLong);
                } else if ("diskSizeInGB".equals(fieldName)) {
                    deserializedHyperVReplicaAzureDiskInputDetails.diskSizeInGB
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHyperVReplicaAzureDiskInputDetails;
        });
    }
}
