// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Security profile input.
 */
@Fluent
public final class SecurityProfileProperties {
    /*
     * The target VM security type.
     */
    @JsonProperty(value = "targetVmSecurityType")
    private SecurityType targetVmSecurityType;

    /*
     * A value indicating whether secure boot to be enabled.
     */
    @JsonProperty(value = "targetVmSecureBoot")
    private SecurityConfiguration targetVmSecureBoot;

    /*
     * A value indicating whether trusted platform module to be enabled.
     */
    @JsonProperty(value = "targetVmTpm")
    private SecurityConfiguration targetVmTpm;

    /*
     * A value indicating whether integrity monitoring to be enabled.
     */
    @JsonProperty(value = "targetVmMonitoring")
    private SecurityConfiguration targetVmMonitoring;

    /*
     * A value indicating whether confidential compute encryption to be enabled.
     */
    @JsonProperty(value = "targetVmConfidentialEncryption")
    private SecurityConfiguration targetVmConfidentialEncryption;

    /**
     * Creates an instance of SecurityProfileProperties class.
     */
    public SecurityProfileProperties() {
    }

    /**
     * Get the targetVmSecurityType property: The target VM security type.
     * 
     * @return the targetVmSecurityType value.
     */
    public SecurityType targetVmSecurityType() {
        return this.targetVmSecurityType;
    }

    /**
     * Set the targetVmSecurityType property: The target VM security type.
     * 
     * @param targetVmSecurityType the targetVmSecurityType value to set.
     * @return the SecurityProfileProperties object itself.
     */
    public SecurityProfileProperties withTargetVmSecurityType(SecurityType targetVmSecurityType) {
        this.targetVmSecurityType = targetVmSecurityType;
        return this;
    }

    /**
     * Get the targetVmSecureBoot property: A value indicating whether secure boot to be enabled.
     * 
     * @return the targetVmSecureBoot value.
     */
    public SecurityConfiguration targetVmSecureBoot() {
        return this.targetVmSecureBoot;
    }

    /**
     * Set the targetVmSecureBoot property: A value indicating whether secure boot to be enabled.
     * 
     * @param targetVmSecureBoot the targetVmSecureBoot value to set.
     * @return the SecurityProfileProperties object itself.
     */
    public SecurityProfileProperties withTargetVmSecureBoot(SecurityConfiguration targetVmSecureBoot) {
        this.targetVmSecureBoot = targetVmSecureBoot;
        return this;
    }

    /**
     * Get the targetVmTpm property: A value indicating whether trusted platform module to be enabled.
     * 
     * @return the targetVmTpm value.
     */
    public SecurityConfiguration targetVmTpm() {
        return this.targetVmTpm;
    }

    /**
     * Set the targetVmTpm property: A value indicating whether trusted platform module to be enabled.
     * 
     * @param targetVmTpm the targetVmTpm value to set.
     * @return the SecurityProfileProperties object itself.
     */
    public SecurityProfileProperties withTargetVmTpm(SecurityConfiguration targetVmTpm) {
        this.targetVmTpm = targetVmTpm;
        return this;
    }

    /**
     * Get the targetVmMonitoring property: A value indicating whether integrity monitoring to be enabled.
     * 
     * @return the targetVmMonitoring value.
     */
    public SecurityConfiguration targetVmMonitoring() {
        return this.targetVmMonitoring;
    }

    /**
     * Set the targetVmMonitoring property: A value indicating whether integrity monitoring to be enabled.
     * 
     * @param targetVmMonitoring the targetVmMonitoring value to set.
     * @return the SecurityProfileProperties object itself.
     */
    public SecurityProfileProperties withTargetVmMonitoring(SecurityConfiguration targetVmMonitoring) {
        this.targetVmMonitoring = targetVmMonitoring;
        return this;
    }

    /**
     * Get the targetVmConfidentialEncryption property: A value indicating whether confidential compute encryption to
     * be enabled.
     * 
     * @return the targetVmConfidentialEncryption value.
     */
    public SecurityConfiguration targetVmConfidentialEncryption() {
        return this.targetVmConfidentialEncryption;
    }

    /**
     * Set the targetVmConfidentialEncryption property: A value indicating whether confidential compute encryption to
     * be enabled.
     * 
     * @param targetVmConfidentialEncryption the targetVmConfidentialEncryption value to set.
     * @return the SecurityProfileProperties object itself.
     */
    public SecurityProfileProperties
        withTargetVmConfidentialEncryption(SecurityConfiguration targetVmConfidentialEncryption) {
        this.targetVmConfidentialEncryption = targetVmConfidentialEncryption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
