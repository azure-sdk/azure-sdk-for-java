// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Shared Disk Replication item custom data details.
 */
@Fluent
public final class SharedDiskReplicationItemProperties {
    /*
     * The protection state of shared disk.
     */
    @JsonProperty(value = "protectionState")
    private String protectionState;

    /*
     * The tfo state of shared disk.
     */
    @JsonProperty(value = "testFailoverState")
    private String testFailoverState;

    /*
     * The Current active location of the PE.
     */
    @JsonProperty(value = "activeLocation")
    private String activeLocation;

    /*
     * The allowed operations on the Replication protected item.
     */
    @JsonProperty(value = "allowedOperations")
    private List<String> allowedOperations;

    /*
     * The consolidated protection health for the VM taking any issues with SRS as well as all the replication units
     * associated with the VM's replication group into account. This is a string representation of the ProtectionHealth
     * enumeration.
     */
    @JsonProperty(value = "replicationHealth")
    private String replicationHealth;

    /*
     * List of health errors.
     */
    @JsonProperty(value = "healthErrors")
    private List<HealthError> healthErrors;

    /*
     * The current scenario.
     */
    @JsonProperty(value = "currentScenario")
    private CurrentScenarioDetails currentScenario;

    /*
     * The Replication provider custom settings.
     */
    @JsonProperty(value = "sharedDiskProviderSpecificDetails")
    private SharedDiskReplicationProviderSpecificSettings sharedDiskProviderSpecificDetails;

    /**
     * Creates an instance of SharedDiskReplicationItemProperties class.
     */
    public SharedDiskReplicationItemProperties() {
    }

    /**
     * Get the protectionState property: The protection state of shared disk.
     * 
     * @return the protectionState value.
     */
    public String protectionState() {
        return this.protectionState;
    }

    /**
     * Set the protectionState property: The protection state of shared disk.
     * 
     * @param protectionState the protectionState value to set.
     * @return the SharedDiskReplicationItemProperties object itself.
     */
    public SharedDiskReplicationItemProperties withProtectionState(String protectionState) {
        this.protectionState = protectionState;
        return this;
    }

    /**
     * Get the testFailoverState property: The tfo state of shared disk.
     * 
     * @return the testFailoverState value.
     */
    public String testFailoverState() {
        return this.testFailoverState;
    }

    /**
     * Set the testFailoverState property: The tfo state of shared disk.
     * 
     * @param testFailoverState the testFailoverState value to set.
     * @return the SharedDiskReplicationItemProperties object itself.
     */
    public SharedDiskReplicationItemProperties withTestFailoverState(String testFailoverState) {
        this.testFailoverState = testFailoverState;
        return this;
    }

    /**
     * Get the activeLocation property: The Current active location of the PE.
     * 
     * @return the activeLocation value.
     */
    public String activeLocation() {
        return this.activeLocation;
    }

    /**
     * Set the activeLocation property: The Current active location of the PE.
     * 
     * @param activeLocation the activeLocation value to set.
     * @return the SharedDiskReplicationItemProperties object itself.
     */
    public SharedDiskReplicationItemProperties withActiveLocation(String activeLocation) {
        this.activeLocation = activeLocation;
        return this;
    }

    /**
     * Get the allowedOperations property: The allowed operations on the Replication protected item.
     * 
     * @return the allowedOperations value.
     */
    public List<String> allowedOperations() {
        return this.allowedOperations;
    }

    /**
     * Set the allowedOperations property: The allowed operations on the Replication protected item.
     * 
     * @param allowedOperations the allowedOperations value to set.
     * @return the SharedDiskReplicationItemProperties object itself.
     */
    public SharedDiskReplicationItemProperties withAllowedOperations(List<String> allowedOperations) {
        this.allowedOperations = allowedOperations;
        return this;
    }

    /**
     * Get the replicationHealth property: The consolidated protection health for the VM taking any issues with SRS as
     * well as all the replication units associated with the VM's replication group into account. This is a string
     * representation of the ProtectionHealth enumeration.
     * 
     * @return the replicationHealth value.
     */
    public String replicationHealth() {
        return this.replicationHealth;
    }

    /**
     * Set the replicationHealth property: The consolidated protection health for the VM taking any issues with SRS as
     * well as all the replication units associated with the VM's replication group into account. This is a string
     * representation of the ProtectionHealth enumeration.
     * 
     * @param replicationHealth the replicationHealth value to set.
     * @return the SharedDiskReplicationItemProperties object itself.
     */
    public SharedDiskReplicationItemProperties withReplicationHealth(String replicationHealth) {
        this.replicationHealth = replicationHealth;
        return this;
    }

    /**
     * Get the healthErrors property: List of health errors.
     * 
     * @return the healthErrors value.
     */
    public List<HealthError> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Set the healthErrors property: List of health errors.
     * 
     * @param healthErrors the healthErrors value to set.
     * @return the SharedDiskReplicationItemProperties object itself.
     */
    public SharedDiskReplicationItemProperties withHealthErrors(List<HealthError> healthErrors) {
        this.healthErrors = healthErrors;
        return this;
    }

    /**
     * Get the currentScenario property: The current scenario.
     * 
     * @return the currentScenario value.
     */
    public CurrentScenarioDetails currentScenario() {
        return this.currentScenario;
    }

    /**
     * Set the currentScenario property: The current scenario.
     * 
     * @param currentScenario the currentScenario value to set.
     * @return the SharedDiskReplicationItemProperties object itself.
     */
    public SharedDiskReplicationItemProperties withCurrentScenario(CurrentScenarioDetails currentScenario) {
        this.currentScenario = currentScenario;
        return this;
    }

    /**
     * Get the sharedDiskProviderSpecificDetails property: The Replication provider custom settings.
     * 
     * @return the sharedDiskProviderSpecificDetails value.
     */
    public SharedDiskReplicationProviderSpecificSettings sharedDiskProviderSpecificDetails() {
        return this.sharedDiskProviderSpecificDetails;
    }

    /**
     * Set the sharedDiskProviderSpecificDetails property: The Replication provider custom settings.
     * 
     * @param sharedDiskProviderSpecificDetails the sharedDiskProviderSpecificDetails value to set.
     * @return the SharedDiskReplicationItemProperties object itself.
     */
    public SharedDiskReplicationItemProperties withSharedDiskProviderSpecificDetails(
        SharedDiskReplicationProviderSpecificSettings sharedDiskProviderSpecificDetails) {
        this.sharedDiskProviderSpecificDetails = sharedDiskProviderSpecificDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
        if (currentScenario() != null) {
            currentScenario().validate();
        }
        if (sharedDiskProviderSpecificDetails() != null) {
            sharedDiskProviderSpecificDetails().validate();
        }
    }
}
