// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Post Backup Response.
 */
@Immutable
public final class PostBackupResponseInner implements JsonSerializable<PostBackupResponseInner> {
    /*
     * Post Backup Response Properties
     */
    private PostBackupResponseProperties innerBackupMetadata;

    /**
     * Creates an instance of PostBackupResponseInner class.
     */
    public PostBackupResponseInner() {
    }

    /**
     * Get the innerBackupMetadata property: Post Backup Response Properties.
     * 
     * @return the innerBackupMetadata value.
     */
    private PostBackupResponseProperties innerBackupMetadata() {
        return this.innerBackupMetadata;
    }

    /**
     * Get the cloudEndpointName property: cloud endpoint Name.
     * 
     * @return the cloudEndpointName value.
     */
    public String cloudEndpointName() {
        return this.innerBackupMetadata() == null ? null : this.innerBackupMetadata().cloudEndpointName();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerBackupMetadata() != null) {
            innerBackupMetadata().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("backupMetadata", this.innerBackupMetadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PostBackupResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PostBackupResponseInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PostBackupResponseInner.
     */
    public static PostBackupResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PostBackupResponseInner deserializedPostBackupResponseInner = new PostBackupResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupMetadata".equals(fieldName)) {
                    deserializedPostBackupResponseInner.innerBackupMetadata
                        = PostBackupResponseProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPostBackupResponseInner;
        });
    }
}
