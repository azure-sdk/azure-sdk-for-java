// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Sync Session status object.
 */
@Immutable
public final class ServerEndpointSyncSessionStatus implements JsonSerializable<ServerEndpointSyncSessionStatus> {
    /*
     * Last sync result (HResult)
     */
    private Integer lastSyncResult;

    /*
     * Last sync timestamp
     */
    private OffsetDateTime lastSyncTimestamp;

    /*
     * Last sync success timestamp
     */
    private OffsetDateTime lastSyncSuccessTimestamp;

    /*
     * Last sync per item error count.
     */
    private Long lastSyncPerItemErrorCount;

    /*
     * Count of persistent files not syncing.
     */
    private Long persistentFilesNotSyncingCount;

    /*
     * Count of transient files not syncing.
     */
    private Long transientFilesNotSyncingCount;

    /*
     * Array of per-item errors coming from the last sync session.
     */
    private List<ServerEndpointFilesNotSyncingError> filesNotSyncingErrors;

    /*
     * Sync mode
     */
    private ServerEndpointSyncMode lastSyncMode;

    /**
     * Creates an instance of ServerEndpointSyncSessionStatus class.
     */
    public ServerEndpointSyncSessionStatus() {
    }

    /**
     * Get the lastSyncResult property: Last sync result (HResult).
     * 
     * @return the lastSyncResult value.
     */
    public Integer lastSyncResult() {
        return this.lastSyncResult;
    }

    /**
     * Get the lastSyncTimestamp property: Last sync timestamp.
     * 
     * @return the lastSyncTimestamp value.
     */
    public OffsetDateTime lastSyncTimestamp() {
        return this.lastSyncTimestamp;
    }

    /**
     * Get the lastSyncSuccessTimestamp property: Last sync success timestamp.
     * 
     * @return the lastSyncSuccessTimestamp value.
     */
    public OffsetDateTime lastSyncSuccessTimestamp() {
        return this.lastSyncSuccessTimestamp;
    }

    /**
     * Get the lastSyncPerItemErrorCount property: Last sync per item error count.
     * 
     * @return the lastSyncPerItemErrorCount value.
     */
    public Long lastSyncPerItemErrorCount() {
        return this.lastSyncPerItemErrorCount;
    }

    /**
     * Get the persistentFilesNotSyncingCount property: Count of persistent files not syncing.
     * 
     * @return the persistentFilesNotSyncingCount value.
     */
    public Long persistentFilesNotSyncingCount() {
        return this.persistentFilesNotSyncingCount;
    }

    /**
     * Get the transientFilesNotSyncingCount property: Count of transient files not syncing.
     * 
     * @return the transientFilesNotSyncingCount value.
     */
    public Long transientFilesNotSyncingCount() {
        return this.transientFilesNotSyncingCount;
    }

    /**
     * Get the filesNotSyncingErrors property: Array of per-item errors coming from the last sync session.
     * 
     * @return the filesNotSyncingErrors value.
     */
    public List<ServerEndpointFilesNotSyncingError> filesNotSyncingErrors() {
        return this.filesNotSyncingErrors;
    }

    /**
     * Get the lastSyncMode property: Sync mode.
     * 
     * @return the lastSyncMode value.
     */
    public ServerEndpointSyncMode lastSyncMode() {
        return this.lastSyncMode;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filesNotSyncingErrors() != null) {
            filesNotSyncingErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEndpointSyncSessionStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEndpointSyncSessionStatus if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEndpointSyncSessionStatus.
     */
    public static ServerEndpointSyncSessionStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEndpointSyncSessionStatus deserializedServerEndpointSyncSessionStatus
                = new ServerEndpointSyncSessionStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastSyncResult".equals(fieldName)) {
                    deserializedServerEndpointSyncSessionStatus.lastSyncResult = reader.getNullable(JsonReader::getInt);
                } else if ("lastSyncTimestamp".equals(fieldName)) {
                    deserializedServerEndpointSyncSessionStatus.lastSyncTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSyncSuccessTimestamp".equals(fieldName)) {
                    deserializedServerEndpointSyncSessionStatus.lastSyncSuccessTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSyncPerItemErrorCount".equals(fieldName)) {
                    deserializedServerEndpointSyncSessionStatus.lastSyncPerItemErrorCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("persistentFilesNotSyncingCount".equals(fieldName)) {
                    deserializedServerEndpointSyncSessionStatus.persistentFilesNotSyncingCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("transientFilesNotSyncingCount".equals(fieldName)) {
                    deserializedServerEndpointSyncSessionStatus.transientFilesNotSyncingCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("filesNotSyncingErrors".equals(fieldName)) {
                    List<ServerEndpointFilesNotSyncingError> filesNotSyncingErrors
                        = reader.readArray(reader1 -> ServerEndpointFilesNotSyncingError.fromJson(reader1));
                    deserializedServerEndpointSyncSessionStatus.filesNotSyncingErrors = filesNotSyncingErrors;
                } else if ("lastSyncMode".equals(fieldName)) {
                    deserializedServerEndpointSyncSessionStatus.lastSyncMode
                        = ServerEndpointSyncMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEndpointSyncSessionStatus;
        });
    }
}
