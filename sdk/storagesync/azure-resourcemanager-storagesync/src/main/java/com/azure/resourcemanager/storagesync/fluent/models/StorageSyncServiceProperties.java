// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagesync.models.IncomingTrafficPolicy;
import java.io.IOException;
import java.util.List;

/**
 * Storage Sync Service Properties object.
 */
@Fluent
public final class StorageSyncServiceProperties implements JsonSerializable<StorageSyncServiceProperties> {
    /*
     * Incoming Traffic Policy
     */
    private IncomingTrafficPolicy incomingTrafficPolicy;

    /*
     * Storage Sync service status.
     */
    private Integer storageSyncServiceStatus;

    /*
     * Storage Sync service Uid
     */
    private String storageSyncServiceUid;

    /*
     * StorageSyncService Provisioning State
     */
    private String provisioningState;

    /*
     * Use Identity authorization when customer have finished setup RBAC permissions.
     */
    private Boolean useIdentity;

    /*
     * StorageSyncService lastWorkflowId
     */
    private String lastWorkflowId;

    /*
     * Resource Last Operation Name
     */
    private String lastOperationName;

    /*
     * List of private endpoint connection associated with the specified storage sync service
     */
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /**
     * Creates an instance of StorageSyncServiceProperties class.
     */
    public StorageSyncServiceProperties() {
    }

    /**
     * Get the incomingTrafficPolicy property: Incoming Traffic Policy.
     * 
     * @return the incomingTrafficPolicy value.
     */
    public IncomingTrafficPolicy incomingTrafficPolicy() {
        return this.incomingTrafficPolicy;
    }

    /**
     * Set the incomingTrafficPolicy property: Incoming Traffic Policy.
     * 
     * @param incomingTrafficPolicy the incomingTrafficPolicy value to set.
     * @return the StorageSyncServiceProperties object itself.
     */
    public StorageSyncServiceProperties withIncomingTrafficPolicy(IncomingTrafficPolicy incomingTrafficPolicy) {
        this.incomingTrafficPolicy = incomingTrafficPolicy;
        return this;
    }

    /**
     * Get the storageSyncServiceStatus property: Storage Sync service status.
     * 
     * @return the storageSyncServiceStatus value.
     */
    public Integer storageSyncServiceStatus() {
        return this.storageSyncServiceStatus;
    }

    /**
     * Get the storageSyncServiceUid property: Storage Sync service Uid.
     * 
     * @return the storageSyncServiceUid value.
     */
    public String storageSyncServiceUid() {
        return this.storageSyncServiceUid;
    }

    /**
     * Get the provisioningState property: StorageSyncService Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the useIdentity property: Use Identity authorization when customer have finished setup RBAC permissions.
     * 
     * @return the useIdentity value.
     */
    public Boolean useIdentity() {
        return this.useIdentity;
    }

    /**
     * Get the lastWorkflowId property: StorageSyncService lastWorkflowId.
     * 
     * @return the lastWorkflowId value.
     */
    public String lastWorkflowId() {
        return this.lastWorkflowId;
    }

    /**
     * Get the lastOperationName property: Resource Last Operation Name.
     * 
     * @return the lastOperationName value.
     */
    public String lastOperationName() {
        return this.lastOperationName;
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connection associated with the specified
     * storage sync service.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("incomingTrafficPolicy",
            this.incomingTrafficPolicy == null ? null : this.incomingTrafficPolicy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageSyncServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageSyncServiceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageSyncServiceProperties.
     */
    public static StorageSyncServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageSyncServiceProperties deserializedStorageSyncServiceProperties = new StorageSyncServiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("incomingTrafficPolicy".equals(fieldName)) {
                    deserializedStorageSyncServiceProperties.incomingTrafficPolicy
                        = IncomingTrafficPolicy.fromString(reader.getString());
                } else if ("storageSyncServiceStatus".equals(fieldName)) {
                    deserializedStorageSyncServiceProperties.storageSyncServiceStatus
                        = reader.getNullable(JsonReader::getInt);
                } else if ("storageSyncServiceUid".equals(fieldName)) {
                    deserializedStorageSyncServiceProperties.storageSyncServiceUid = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedStorageSyncServiceProperties.provisioningState = reader.getString();
                } else if ("useIdentity".equals(fieldName)) {
                    deserializedStorageSyncServiceProperties.useIdentity = reader.getNullable(JsonReader::getBoolean);
                } else if ("lastWorkflowId".equals(fieldName)) {
                    deserializedStorageSyncServiceProperties.lastWorkflowId = reader.getString();
                } else if ("lastOperationName".equals(fieldName)) {
                    deserializedStorageSyncServiceProperties.lastOperationName = reader.getString();
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnectionInner> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnectionInner.fromJson(reader1));
                    deserializedStorageSyncServiceProperties.privateEndpointConnections = privateEndpointConnections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageSyncServiceProperties;
        });
    }
}
