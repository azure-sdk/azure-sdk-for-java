// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagesync.fluent.models.RegisteredServerCreateParametersProperties;
import java.io.IOException;

/**
 * The parameters used when creating a registered server.
 */
@Fluent
public final class RegisteredServerCreateParameters extends ProxyResource {
    /*
     * The parameters used to create the registered server.
     */
    private RegisteredServerCreateParametersProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of RegisteredServerCreateParameters class.
     */
    public RegisteredServerCreateParameters() {
    }

    /**
     * Get the innerProperties property: The parameters used to create the registered server.
     * 
     * @return the innerProperties value.
     */
    private RegisteredServerCreateParametersProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the serverCertificate property: Registered Server Certificate.
     * 
     * @return the serverCertificate value.
     */
    public String serverCertificate() {
        return this.innerProperties() == null ? null : this.innerProperties().serverCertificate();
    }

    /**
     * Set the serverCertificate property: Registered Server Certificate.
     * 
     * @param serverCertificate the serverCertificate value to set.
     * @return the RegisteredServerCreateParameters object itself.
     */
    public RegisteredServerCreateParameters withServerCertificate(String serverCertificate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerCreateParametersProperties();
        }
        this.innerProperties().withServerCertificate(serverCertificate);
        return this;
    }

    /**
     * Get the agentVersion property: Registered Server Agent Version.
     * 
     * @return the agentVersion value.
     */
    public String agentVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().agentVersion();
    }

    /**
     * Set the agentVersion property: Registered Server Agent Version.
     * 
     * @param agentVersion the agentVersion value to set.
     * @return the RegisteredServerCreateParameters object itself.
     */
    public RegisteredServerCreateParameters withAgentVersion(String agentVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerCreateParametersProperties();
        }
        this.innerProperties().withAgentVersion(agentVersion);
        return this;
    }

    /**
     * Get the serverOSVersion property: Registered Server OS Version.
     * 
     * @return the serverOSVersion value.
     */
    public String serverOSVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().serverOSVersion();
    }

    /**
     * Set the serverOSVersion property: Registered Server OS Version.
     * 
     * @param serverOSVersion the serverOSVersion value to set.
     * @return the RegisteredServerCreateParameters object itself.
     */
    public RegisteredServerCreateParameters withServerOSVersion(String serverOSVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerCreateParametersProperties();
        }
        this.innerProperties().withServerOSVersion(serverOSVersion);
        return this;
    }

    /**
     * Get the lastHeartBeat property: Registered Server last heart beat.
     * 
     * @return the lastHeartBeat value.
     */
    public String lastHeartBeat() {
        return this.innerProperties() == null ? null : this.innerProperties().lastHeartBeat();
    }

    /**
     * Set the lastHeartBeat property: Registered Server last heart beat.
     * 
     * @param lastHeartBeat the lastHeartBeat value to set.
     * @return the RegisteredServerCreateParameters object itself.
     */
    public RegisteredServerCreateParameters withLastHeartBeat(String lastHeartBeat) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerCreateParametersProperties();
        }
        this.innerProperties().withLastHeartBeat(lastHeartBeat);
        return this;
    }

    /**
     * Get the serverRole property: Registered Server serverRole.
     * 
     * @return the serverRole value.
     */
    public String serverRole() {
        return this.innerProperties() == null ? null : this.innerProperties().serverRole();
    }

    /**
     * Set the serverRole property: Registered Server serverRole.
     * 
     * @param serverRole the serverRole value to set.
     * @return the RegisteredServerCreateParameters object itself.
     */
    public RegisteredServerCreateParameters withServerRole(String serverRole) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerCreateParametersProperties();
        }
        this.innerProperties().withServerRole(serverRole);
        return this;
    }

    /**
     * Get the clusterId property: Registered Server clusterId.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterId();
    }

    /**
     * Set the clusterId property: Registered Server clusterId.
     * 
     * @param clusterId the clusterId value to set.
     * @return the RegisteredServerCreateParameters object itself.
     */
    public RegisteredServerCreateParameters withClusterId(String clusterId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerCreateParametersProperties();
        }
        this.innerProperties().withClusterId(clusterId);
        return this;
    }

    /**
     * Get the clusterName property: Registered Server clusterName.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterName();
    }

    /**
     * Set the clusterName property: Registered Server clusterName.
     * 
     * @param clusterName the clusterName value to set.
     * @return the RegisteredServerCreateParameters object itself.
     */
    public RegisteredServerCreateParameters withClusterName(String clusterName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerCreateParametersProperties();
        }
        this.innerProperties().withClusterName(clusterName);
        return this;
    }

    /**
     * Get the serverId property: Registered Server serverId.
     * 
     * @return the serverId value.
     */
    public String serverId() {
        return this.innerProperties() == null ? null : this.innerProperties().serverId();
    }

    /**
     * Set the serverId property: Registered Server serverId.
     * 
     * @param serverId the serverId value to set.
     * @return the RegisteredServerCreateParameters object itself.
     */
    public RegisteredServerCreateParameters withServerId(String serverId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerCreateParametersProperties();
        }
        this.innerProperties().withServerId(serverId);
        return this;
    }

    /**
     * Get the friendlyName property: Friendly Name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.innerProperties() == null ? null : this.innerProperties().friendlyName();
    }

    /**
     * Set the friendlyName property: Friendly Name.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the RegisteredServerCreateParameters object itself.
     */
    public RegisteredServerCreateParameters withFriendlyName(String friendlyName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerCreateParametersProperties();
        }
        this.innerProperties().withFriendlyName(friendlyName);
        return this;
    }

    /**
     * Get the applicationId property: Server ServicePrincipal Id.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.innerProperties() == null ? null : this.innerProperties().applicationId();
    }

    /**
     * Set the applicationId property: Server ServicePrincipal Id.
     * 
     * @param applicationId the applicationId value to set.
     * @return the RegisteredServerCreateParameters object itself.
     */
    public RegisteredServerCreateParameters withApplicationId(String applicationId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerCreateParametersProperties();
        }
        this.innerProperties().withApplicationId(applicationId);
        return this;
    }

    /**
     * Get the identity property: Apply server with newly discovered ApplicationId if available.
     * 
     * @return the identity value.
     */
    public Boolean identity() {
        return this.innerProperties() == null ? null : this.innerProperties().identity();
    }

    /**
     * Set the identity property: Apply server with newly discovered ApplicationId if available.
     * 
     * @param identity the identity value to set.
     * @return the RegisteredServerCreateParameters object itself.
     */
    public RegisteredServerCreateParameters withIdentity(Boolean identity) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerCreateParametersProperties();
        }
        this.innerProperties().withIdentity(identity);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegisteredServerCreateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegisteredServerCreateParameters if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RegisteredServerCreateParameters.
     */
    public static RegisteredServerCreateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegisteredServerCreateParameters deserializedRegisteredServerCreateParameters
                = new RegisteredServerCreateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedRegisteredServerCreateParameters.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedRegisteredServerCreateParameters.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedRegisteredServerCreateParameters.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedRegisteredServerCreateParameters.innerProperties
                        = RegisteredServerCreateParametersProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedRegisteredServerCreateParameters.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegisteredServerCreateParameters;
        });
    }
}
