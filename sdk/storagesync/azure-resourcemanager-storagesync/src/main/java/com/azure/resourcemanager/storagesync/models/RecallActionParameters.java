// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The parameters used when calling recall action on server endpoint.
 */
@Fluent
public final class RecallActionParameters implements JsonSerializable<RecallActionParameters> {
    /*
     * Pattern of the files.
     */
    private String pattern;

    /*
     * Recall path.
     */
    private String recallPath;

    /**
     * Creates an instance of RecallActionParameters class.
     */
    public RecallActionParameters() {
    }

    /**
     * Get the pattern property: Pattern of the files.
     * 
     * @return the pattern value.
     */
    public String pattern() {
        return this.pattern;
    }

    /**
     * Set the pattern property: Pattern of the files.
     * 
     * @param pattern the pattern value to set.
     * @return the RecallActionParameters object itself.
     */
    public RecallActionParameters withPattern(String pattern) {
        this.pattern = pattern;
        return this;
    }

    /**
     * Get the recallPath property: Recall path.
     * 
     * @return the recallPath value.
     */
    public String recallPath() {
        return this.recallPath;
    }

    /**
     * Set the recallPath property: Recall path.
     * 
     * @param recallPath the recallPath value to set.
     * @return the RecallActionParameters object itself.
     */
    public RecallActionParameters withRecallPath(String recallPath) {
        this.recallPath = recallPath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pattern", this.pattern);
        jsonWriter.writeStringField("recallPath", this.recallPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecallActionParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecallActionParameters if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecallActionParameters.
     */
    public static RecallActionParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecallActionParameters deserializedRecallActionParameters = new RecallActionParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pattern".equals(fieldName)) {
                    deserializedRecallActionParameters.pattern = reader.getString();
                } else if ("recallPath".equals(fieldName)) {
                    deserializedRecallActionParameters.recallPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecallActionParameters;
        });
    }
}
