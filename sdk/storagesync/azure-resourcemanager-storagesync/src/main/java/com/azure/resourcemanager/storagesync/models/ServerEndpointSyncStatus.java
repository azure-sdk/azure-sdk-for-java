// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Server Endpoint sync status.
 */
@Immutable
public final class ServerEndpointSyncStatus implements JsonSerializable<ServerEndpointSyncStatus> {
    /*
     * Download Health Status.
     */
    private ServerEndpointHealthState downloadHealth;

    /*
     * Upload Health Status.
     */
    private ServerEndpointHealthState uploadHealth;

    /*
     * Combined Health Status.
     */
    private ServerEndpointHealthState combinedHealth;

    /*
     * Sync activity
     */
    private ServerEndpointSyncActivityState syncActivity;

    /*
     * Total count of persistent files not syncing (combined upload + download).
     */
    private Long totalPersistentFilesNotSyncingCount;

    /*
     * Last Updated Timestamp
     */
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Upload Status
     */
    private ServerEndpointSyncSessionStatus uploadStatus;

    /*
     * Download Status
     */
    private ServerEndpointSyncSessionStatus downloadStatus;

    /*
     * Upload sync activity
     */
    private ServerEndpointSyncActivityStatus uploadActivity;

    /*
     * Download sync activity
     */
    private ServerEndpointSyncActivityStatus downloadActivity;

    /*
     * Offline Data Transfer State
     */
    private ServerEndpointOfflineDataTransferState offlineDataTransferStatus;

    /*
     * Background data download activity
     */
    private ServerEndpointBackgroundDataDownloadActivity backgroundDataDownloadActivity;

    /**
     * Creates an instance of ServerEndpointSyncStatus class.
     */
    public ServerEndpointSyncStatus() {
    }

    /**
     * Get the downloadHealth property: Download Health Status.
     * 
     * @return the downloadHealth value.
     */
    public ServerEndpointHealthState downloadHealth() {
        return this.downloadHealth;
    }

    /**
     * Get the uploadHealth property: Upload Health Status.
     * 
     * @return the uploadHealth value.
     */
    public ServerEndpointHealthState uploadHealth() {
        return this.uploadHealth;
    }

    /**
     * Get the combinedHealth property: Combined Health Status.
     * 
     * @return the combinedHealth value.
     */
    public ServerEndpointHealthState combinedHealth() {
        return this.combinedHealth;
    }

    /**
     * Get the syncActivity property: Sync activity.
     * 
     * @return the syncActivity value.
     */
    public ServerEndpointSyncActivityState syncActivity() {
        return this.syncActivity;
    }

    /**
     * Get the totalPersistentFilesNotSyncingCount property: Total count of persistent files not syncing (combined
     * upload + download).
     * 
     * @return the totalPersistentFilesNotSyncingCount value.
     */
    public Long totalPersistentFilesNotSyncingCount() {
        return this.totalPersistentFilesNotSyncingCount;
    }

    /**
     * Get the lastUpdatedTimestamp property: Last Updated Timestamp.
     * 
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the uploadStatus property: Upload Status.
     * 
     * @return the uploadStatus value.
     */
    public ServerEndpointSyncSessionStatus uploadStatus() {
        return this.uploadStatus;
    }

    /**
     * Get the downloadStatus property: Download Status.
     * 
     * @return the downloadStatus value.
     */
    public ServerEndpointSyncSessionStatus downloadStatus() {
        return this.downloadStatus;
    }

    /**
     * Get the uploadActivity property: Upload sync activity.
     * 
     * @return the uploadActivity value.
     */
    public ServerEndpointSyncActivityStatus uploadActivity() {
        return this.uploadActivity;
    }

    /**
     * Get the downloadActivity property: Download sync activity.
     * 
     * @return the downloadActivity value.
     */
    public ServerEndpointSyncActivityStatus downloadActivity() {
        return this.downloadActivity;
    }

    /**
     * Get the offlineDataTransferStatus property: Offline Data Transfer State.
     * 
     * @return the offlineDataTransferStatus value.
     */
    public ServerEndpointOfflineDataTransferState offlineDataTransferStatus() {
        return this.offlineDataTransferStatus;
    }

    /**
     * Get the backgroundDataDownloadActivity property: Background data download activity.
     * 
     * @return the backgroundDataDownloadActivity value.
     */
    public ServerEndpointBackgroundDataDownloadActivity backgroundDataDownloadActivity() {
        return this.backgroundDataDownloadActivity;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (uploadStatus() != null) {
            uploadStatus().validate();
        }
        if (downloadStatus() != null) {
            downloadStatus().validate();
        }
        if (uploadActivity() != null) {
            uploadActivity().validate();
        }
        if (downloadActivity() != null) {
            downloadActivity().validate();
        }
        if (backgroundDataDownloadActivity() != null) {
            backgroundDataDownloadActivity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEndpointSyncStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEndpointSyncStatus if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEndpointSyncStatus.
     */
    public static ServerEndpointSyncStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEndpointSyncStatus deserializedServerEndpointSyncStatus = new ServerEndpointSyncStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("downloadHealth".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.downloadHealth
                        = ServerEndpointHealthState.fromString(reader.getString());
                } else if ("uploadHealth".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.uploadHealth
                        = ServerEndpointHealthState.fromString(reader.getString());
                } else if ("combinedHealth".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.combinedHealth
                        = ServerEndpointHealthState.fromString(reader.getString());
                } else if ("syncActivity".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.syncActivity
                        = ServerEndpointSyncActivityState.fromString(reader.getString());
                } else if ("totalPersistentFilesNotSyncingCount".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.totalPersistentFilesNotSyncingCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("lastUpdatedTimestamp".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.lastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("uploadStatus".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.uploadStatus
                        = ServerEndpointSyncSessionStatus.fromJson(reader);
                } else if ("downloadStatus".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.downloadStatus
                        = ServerEndpointSyncSessionStatus.fromJson(reader);
                } else if ("uploadActivity".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.uploadActivity
                        = ServerEndpointSyncActivityStatus.fromJson(reader);
                } else if ("downloadActivity".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.downloadActivity
                        = ServerEndpointSyncActivityStatus.fromJson(reader);
                } else if ("offlineDataTransferStatus".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.offlineDataTransferStatus
                        = ServerEndpointOfflineDataTransferState.fromString(reader.getString());
                } else if ("backgroundDataDownloadActivity".equals(fieldName)) {
                    deserializedServerEndpointSyncStatus.backgroundDataDownloadActivity
                        = ServerEndpointBackgroundDataDownloadActivity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEndpointSyncStatus;
        });
    }
}
