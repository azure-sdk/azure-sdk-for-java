// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Status of the volume free space policy.
 */
@Immutable
public final class CloudTieringVolumeFreeSpacePolicyStatus
    implements JsonSerializable<CloudTieringVolumeFreeSpacePolicyStatus> {
    /*
     * Last updated timestamp
     */
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * In the case where multiple server endpoints are present in a volume, an effective free space policy is applied.
     */
    private Integer effectiveVolumeFreeSpacePolicy;

    /*
     * Current volume free space percentage.
     */
    private Integer currentVolumeFreeSpacePercent;

    /**
     * Creates an instance of CloudTieringVolumeFreeSpacePolicyStatus class.
     */
    public CloudTieringVolumeFreeSpacePolicyStatus() {
    }

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     * 
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the effectiveVolumeFreeSpacePolicy property: In the case where multiple server endpoints are present in a
     * volume, an effective free space policy is applied.
     * 
     * @return the effectiveVolumeFreeSpacePolicy value.
     */
    public Integer effectiveVolumeFreeSpacePolicy() {
        return this.effectiveVolumeFreeSpacePolicy;
    }

    /**
     * Get the currentVolumeFreeSpacePercent property: Current volume free space percentage.
     * 
     * @return the currentVolumeFreeSpacePercent value.
     */
    public Integer currentVolumeFreeSpacePercent() {
        return this.currentVolumeFreeSpacePercent;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudTieringVolumeFreeSpacePolicyStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudTieringVolumeFreeSpacePolicyStatus if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudTieringVolumeFreeSpacePolicyStatus.
     */
    public static CloudTieringVolumeFreeSpacePolicyStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudTieringVolumeFreeSpacePolicyStatus deserializedCloudTieringVolumeFreeSpacePolicyStatus
                = new CloudTieringVolumeFreeSpacePolicyStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastUpdatedTimestamp".equals(fieldName)) {
                    deserializedCloudTieringVolumeFreeSpacePolicyStatus.lastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("effectiveVolumeFreeSpacePolicy".equals(fieldName)) {
                    deserializedCloudTieringVolumeFreeSpacePolicyStatus.effectiveVolumeFreeSpacePolicy
                        = reader.getNullable(JsonReader::getInt);
                } else if ("currentVolumeFreeSpacePercent".equals(fieldName)) {
                    deserializedCloudTieringVolumeFreeSpacePolicyStatus.currentVolumeFreeSpacePercent
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudTieringVolumeFreeSpacePolicyStatus;
        });
    }
}
