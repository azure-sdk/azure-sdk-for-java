// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Server endpoint provisioning step status object.
 */
@Immutable
public final class ServerEndpointProvisioningStepStatus
    implements JsonSerializable<ServerEndpointProvisioningStepStatus> {
    /*
     * Name of the provisioning step
     */
    private String name;

    /*
     * Status of the provisioning step
     */
    private String status;

    /*
     * Start time of the provisioning step
     */
    private OffsetDateTime startTime;

    /*
     * Estimated completion time of the provisioning step in minutes
     */
    private Integer minutesLeft;

    /*
     * Estimated progress percentage
     */
    private Integer progressPercentage;

    /*
     * End time of the provisioning step
     */
    private OffsetDateTime endTime;

    /*
     * Error code (HResult) for the provisioning step
     */
    private Integer errorCode;

    /*
     * Additional information for the provisioning step
     */
    private Map<String, String> additionalInformation;

    /**
     * Creates an instance of ServerEndpointProvisioningStepStatus class.
     */
    public ServerEndpointProvisioningStepStatus() {
    }

    /**
     * Get the name property: Name of the provisioning step.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the status property: Status of the provisioning step.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the startTime property: Start time of the provisioning step.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the minutesLeft property: Estimated completion time of the provisioning step in minutes.
     * 
     * @return the minutesLeft value.
     */
    public Integer minutesLeft() {
        return this.minutesLeft;
    }

    /**
     * Get the progressPercentage property: Estimated progress percentage.
     * 
     * @return the progressPercentage value.
     */
    public Integer progressPercentage() {
        return this.progressPercentage;
    }

    /**
     * Get the endTime property: End time of the provisioning step.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the errorCode property: Error code (HResult) for the provisioning step.
     * 
     * @return the errorCode value.
     */
    public Integer errorCode() {
        return this.errorCode;
    }

    /**
     * Get the additionalInformation property: Additional information for the provisioning step.
     * 
     * @return the additionalInformation value.
     */
    public Map<String, String> additionalInformation() {
        return this.additionalInformation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEndpointProvisioningStepStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEndpointProvisioningStepStatus if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEndpointProvisioningStepStatus.
     */
    public static ServerEndpointProvisioningStepStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEndpointProvisioningStepStatus deserializedServerEndpointProvisioningStepStatus
                = new ServerEndpointProvisioningStepStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedServerEndpointProvisioningStepStatus.name = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedServerEndpointProvisioningStepStatus.status = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedServerEndpointProvisioningStepStatus.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("minutesLeft".equals(fieldName)) {
                    deserializedServerEndpointProvisioningStepStatus.minutesLeft
                        = reader.getNullable(JsonReader::getInt);
                } else if ("progressPercentage".equals(fieldName)) {
                    deserializedServerEndpointProvisioningStepStatus.progressPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("endTime".equals(fieldName)) {
                    deserializedServerEndpointProvisioningStepStatus.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("errorCode".equals(fieldName)) {
                    deserializedServerEndpointProvisioningStepStatus.errorCode = reader.getNullable(JsonReader::getInt);
                } else if ("additionalInformation".equals(fieldName)) {
                    Map<String, String> additionalInformation = reader.readMap(reader1 -> reader1.getString());
                    deserializedServerEndpointProvisioningStepStatus.additionalInformation = additionalInformation;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEndpointProvisioningStepStatus;
        });
    }
}
