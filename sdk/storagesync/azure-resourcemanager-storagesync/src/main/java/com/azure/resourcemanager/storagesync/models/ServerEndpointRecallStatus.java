// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Server endpoint recall status object.
 */
@Immutable
public final class ServerEndpointRecallStatus implements JsonSerializable<ServerEndpointRecallStatus> {
    /*
     * Last updated timestamp
     */
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Total count of recall errors.
     */
    private Long totalRecallErrorsCount;

    /*
     * Array of recall errors
     */
    private List<ServerEndpointRecallError> recallErrors;

    /**
     * Creates an instance of ServerEndpointRecallStatus class.
     */
    public ServerEndpointRecallStatus() {
    }

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     * 
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the totalRecallErrorsCount property: Total count of recall errors.
     * 
     * @return the totalRecallErrorsCount value.
     */
    public Long totalRecallErrorsCount() {
        return this.totalRecallErrorsCount;
    }

    /**
     * Get the recallErrors property: Array of recall errors.
     * 
     * @return the recallErrors value.
     */
    public List<ServerEndpointRecallError> recallErrors() {
        return this.recallErrors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recallErrors() != null) {
            recallErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEndpointRecallStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEndpointRecallStatus if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEndpointRecallStatus.
     */
    public static ServerEndpointRecallStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEndpointRecallStatus deserializedServerEndpointRecallStatus = new ServerEndpointRecallStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastUpdatedTimestamp".equals(fieldName)) {
                    deserializedServerEndpointRecallStatus.lastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("totalRecallErrorsCount".equals(fieldName)) {
                    deserializedServerEndpointRecallStatus.totalRecallErrorsCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("recallErrors".equals(fieldName)) {
                    List<ServerEndpointRecallError> recallErrors
                        = reader.readArray(reader1 -> ServerEndpointRecallError.fromJson(reader1));
                    deserializedServerEndpointRecallStatus.recallErrors = recallErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEndpointRecallStatus;
        });
    }
}
