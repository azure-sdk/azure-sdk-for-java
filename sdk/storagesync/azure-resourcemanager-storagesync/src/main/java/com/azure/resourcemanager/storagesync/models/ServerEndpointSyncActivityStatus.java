// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Sync Session status object.
 */
@Immutable
public final class ServerEndpointSyncActivityStatus implements JsonSerializable<ServerEndpointSyncActivityStatus> {
    /*
     * Timestamp when properties were updated
     */
    private OffsetDateTime timestamp;

    /*
     * Per item error count
     */
    private Long perItemErrorCount;

    /*
     * Applied item count.
     */
    private Long appliedItemCount;

    /*
     * Total item count (if available)
     */
    private Long totalItemCount;

    /*
     * Applied bytes
     */
    private Long appliedBytes;

    /*
     * Total bytes (if available)
     */
    private Long totalBytes;

    /*
     * Sync mode
     */
    private ServerEndpointSyncMode syncMode;

    /*
     * Session minutes remaining (if available)
     */
    private Integer sessionMinutesRemaining;

    /**
     * Creates an instance of ServerEndpointSyncActivityStatus class.
     */
    public ServerEndpointSyncActivityStatus() {
    }

    /**
     * Get the timestamp property: Timestamp when properties were updated.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Get the perItemErrorCount property: Per item error count.
     * 
     * @return the perItemErrorCount value.
     */
    public Long perItemErrorCount() {
        return this.perItemErrorCount;
    }

    /**
     * Get the appliedItemCount property: Applied item count.
     * 
     * @return the appliedItemCount value.
     */
    public Long appliedItemCount() {
        return this.appliedItemCount;
    }

    /**
     * Get the totalItemCount property: Total item count (if available).
     * 
     * @return the totalItemCount value.
     */
    public Long totalItemCount() {
        return this.totalItemCount;
    }

    /**
     * Get the appliedBytes property: Applied bytes.
     * 
     * @return the appliedBytes value.
     */
    public Long appliedBytes() {
        return this.appliedBytes;
    }

    /**
     * Get the totalBytes property: Total bytes (if available).
     * 
     * @return the totalBytes value.
     */
    public Long totalBytes() {
        return this.totalBytes;
    }

    /**
     * Get the syncMode property: Sync mode.
     * 
     * @return the syncMode value.
     */
    public ServerEndpointSyncMode syncMode() {
        return this.syncMode;
    }

    /**
     * Get the sessionMinutesRemaining property: Session minutes remaining (if available).
     * 
     * @return the sessionMinutesRemaining value.
     */
    public Integer sessionMinutesRemaining() {
        return this.sessionMinutesRemaining;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEndpointSyncActivityStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEndpointSyncActivityStatus if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEndpointSyncActivityStatus.
     */
    public static ServerEndpointSyncActivityStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEndpointSyncActivityStatus deserializedServerEndpointSyncActivityStatus
                = new ServerEndpointSyncActivityStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestamp".equals(fieldName)) {
                    deserializedServerEndpointSyncActivityStatus.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("perItemErrorCount".equals(fieldName)) {
                    deserializedServerEndpointSyncActivityStatus.perItemErrorCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("appliedItemCount".equals(fieldName)) {
                    deserializedServerEndpointSyncActivityStatus.appliedItemCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("totalItemCount".equals(fieldName)) {
                    deserializedServerEndpointSyncActivityStatus.totalItemCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("appliedBytes".equals(fieldName)) {
                    deserializedServerEndpointSyncActivityStatus.appliedBytes = reader.getNullable(JsonReader::getLong);
                } else if ("totalBytes".equals(fieldName)) {
                    deserializedServerEndpointSyncActivityStatus.totalBytes = reader.getNullable(JsonReader::getLong);
                } else if ("syncMode".equals(fieldName)) {
                    deserializedServerEndpointSyncActivityStatus.syncMode
                        = ServerEndpointSyncMode.fromString(reader.getString());
                } else if ("sessionMinutesRemaining".equals(fieldName)) {
                    deserializedServerEndpointSyncActivityStatus.sessionMinutesRemaining
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEndpointSyncActivityStatus;
        });
    }
}
