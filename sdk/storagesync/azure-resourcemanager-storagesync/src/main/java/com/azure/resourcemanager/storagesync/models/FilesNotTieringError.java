// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Files not tiering error object.
 */
@Immutable
public final class FilesNotTieringError implements JsonSerializable<FilesNotTieringError> {
    /*
     * Error code (HResult)
     */
    private Integer errorCode;

    /*
     * Count of files with this error
     */
    private Long fileCount;

    /**
     * Creates an instance of FilesNotTieringError class.
     */
    public FilesNotTieringError() {
    }

    /**
     * Get the errorCode property: Error code (HResult).
     * 
     * @return the errorCode value.
     */
    public Integer errorCode() {
        return this.errorCode;
    }

    /**
     * Get the fileCount property: Count of files with this error.
     * 
     * @return the fileCount value.
     */
    public Long fileCount() {
        return this.fileCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilesNotTieringError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilesNotTieringError if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FilesNotTieringError.
     */
    public static FilesNotTieringError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FilesNotTieringError deserializedFilesNotTieringError = new FilesNotTieringError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorCode".equals(fieldName)) {
                    deserializedFilesNotTieringError.errorCode = reader.getNullable(JsonReader::getInt);
                } else if ("fileCount".equals(fieldName)) {
                    deserializedFilesNotTieringError.fileCount = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFilesNotTieringError;
        });
    }
}
