// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagesync.models.FeatureStatus;
import com.azure.resourcemanager.storagesync.models.InitialDownloadPolicy;
import com.azure.resourcemanager.storagesync.models.InitialUploadPolicy;
import com.azure.resourcemanager.storagesync.models.LocalCacheMode;
import java.io.IOException;

/**
 * ServerEndpoint Properties object.
 */
@Fluent
public final class ServerEndpointCreateParametersProperties
    implements JsonSerializable<ServerEndpointCreateParametersProperties> {
    /*
     * Server Local path.
     */
    private String serverLocalPath;

    /*
     * Cloud Tiering.
     */
    private FeatureStatus cloudTiering;

    /*
     * Level of free space to be maintained by Cloud Tiering if it is enabled.
     */
    private Integer volumeFreeSpacePercent;

    /*
     * Tier files older than days.
     */
    private Integer tierFilesOlderThanDays;

    /*
     * Friendly Name
     */
    private String friendlyName;

    /*
     * Server Resource Id.
     */
    private String serverResourceId;

    /*
     * Offline data transfer
     */
    private FeatureStatus offlineDataTransfer;

    /*
     * Offline data transfer share name
     */
    private String offlineDataTransferShareName;

    /*
     * Policy for how namespace and files are recalled during FastDr.
     */
    private InitialDownloadPolicy initialDownloadPolicy;

    /*
     * Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before
     * local access.
     */
    private LocalCacheMode localCacheMode;

    /*
     * Policy for how the initial upload sync session is performed.
     */
    private InitialUploadPolicy initialUploadPolicy;

    /**
     * Creates an instance of ServerEndpointCreateParametersProperties class.
     */
    public ServerEndpointCreateParametersProperties() {
    }

    /**
     * Get the serverLocalPath property: Server Local path.
     * 
     * @return the serverLocalPath value.
     */
    public String serverLocalPath() {
        return this.serverLocalPath;
    }

    /**
     * Set the serverLocalPath property: Server Local path.
     * 
     * @param serverLocalPath the serverLocalPath value to set.
     * @return the ServerEndpointCreateParametersProperties object itself.
     */
    public ServerEndpointCreateParametersProperties withServerLocalPath(String serverLocalPath) {
        this.serverLocalPath = serverLocalPath;
        return this;
    }

    /**
     * Get the cloudTiering property: Cloud Tiering.
     * 
     * @return the cloudTiering value.
     */
    public FeatureStatus cloudTiering() {
        return this.cloudTiering;
    }

    /**
     * Set the cloudTiering property: Cloud Tiering.
     * 
     * @param cloudTiering the cloudTiering value to set.
     * @return the ServerEndpointCreateParametersProperties object itself.
     */
    public ServerEndpointCreateParametersProperties withCloudTiering(FeatureStatus cloudTiering) {
        this.cloudTiering = cloudTiering;
        return this;
    }

    /**
     * Get the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     * 
     * @return the volumeFreeSpacePercent value.
     */
    public Integer volumeFreeSpacePercent() {
        return this.volumeFreeSpacePercent;
    }

    /**
     * Set the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     * 
     * @param volumeFreeSpacePercent the volumeFreeSpacePercent value to set.
     * @return the ServerEndpointCreateParametersProperties object itself.
     */
    public ServerEndpointCreateParametersProperties withVolumeFreeSpacePercent(Integer volumeFreeSpacePercent) {
        this.volumeFreeSpacePercent = volumeFreeSpacePercent;
        return this;
    }

    /**
     * Get the tierFilesOlderThanDays property: Tier files older than days.
     * 
     * @return the tierFilesOlderThanDays value.
     */
    public Integer tierFilesOlderThanDays() {
        return this.tierFilesOlderThanDays;
    }

    /**
     * Set the tierFilesOlderThanDays property: Tier files older than days.
     * 
     * @param tierFilesOlderThanDays the tierFilesOlderThanDays value to set.
     * @return the ServerEndpointCreateParametersProperties object itself.
     */
    public ServerEndpointCreateParametersProperties withTierFilesOlderThanDays(Integer tierFilesOlderThanDays) {
        this.tierFilesOlderThanDays = tierFilesOlderThanDays;
        return this;
    }

    /**
     * Get the friendlyName property: Friendly Name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly Name.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the ServerEndpointCreateParametersProperties object itself.
     */
    public ServerEndpointCreateParametersProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the serverResourceId property: Server Resource Id.
     * 
     * @return the serverResourceId value.
     */
    public String serverResourceId() {
        return this.serverResourceId;
    }

    /**
     * Set the serverResourceId property: Server Resource Id.
     * 
     * @param serverResourceId the serverResourceId value to set.
     * @return the ServerEndpointCreateParametersProperties object itself.
     */
    public ServerEndpointCreateParametersProperties withServerResourceId(String serverResourceId) {
        this.serverResourceId = serverResourceId;
        return this;
    }

    /**
     * Get the offlineDataTransfer property: Offline data transfer.
     * 
     * @return the offlineDataTransfer value.
     */
    public FeatureStatus offlineDataTransfer() {
        return this.offlineDataTransfer;
    }

    /**
     * Set the offlineDataTransfer property: Offline data transfer.
     * 
     * @param offlineDataTransfer the offlineDataTransfer value to set.
     * @return the ServerEndpointCreateParametersProperties object itself.
     */
    public ServerEndpointCreateParametersProperties withOfflineDataTransfer(FeatureStatus offlineDataTransfer) {
        this.offlineDataTransfer = offlineDataTransfer;
        return this;
    }

    /**
     * Get the offlineDataTransferShareName property: Offline data transfer share name.
     * 
     * @return the offlineDataTransferShareName value.
     */
    public String offlineDataTransferShareName() {
        return this.offlineDataTransferShareName;
    }

    /**
     * Set the offlineDataTransferShareName property: Offline data transfer share name.
     * 
     * @param offlineDataTransferShareName the offlineDataTransferShareName value to set.
     * @return the ServerEndpointCreateParametersProperties object itself.
     */
    public ServerEndpointCreateParametersProperties
        withOfflineDataTransferShareName(String offlineDataTransferShareName) {
        this.offlineDataTransferShareName = offlineDataTransferShareName;
        return this;
    }

    /**
     * Get the initialDownloadPolicy property: Policy for how namespace and files are recalled during FastDr.
     * 
     * @return the initialDownloadPolicy value.
     */
    public InitialDownloadPolicy initialDownloadPolicy() {
        return this.initialDownloadPolicy;
    }

    /**
     * Set the initialDownloadPolicy property: Policy for how namespace and files are recalled during FastDr.
     * 
     * @param initialDownloadPolicy the initialDownloadPolicy value to set.
     * @return the ServerEndpointCreateParametersProperties object itself.
     */
    public ServerEndpointCreateParametersProperties
        withInitialDownloadPolicy(InitialDownloadPolicy initialDownloadPolicy) {
        this.initialDownloadPolicy = initialDownloadPolicy;
        return this;
    }

    /**
     * Get the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     * 
     * @return the localCacheMode value.
     */
    public LocalCacheMode localCacheMode() {
        return this.localCacheMode;
    }

    /**
     * Set the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     * 
     * @param localCacheMode the localCacheMode value to set.
     * @return the ServerEndpointCreateParametersProperties object itself.
     */
    public ServerEndpointCreateParametersProperties withLocalCacheMode(LocalCacheMode localCacheMode) {
        this.localCacheMode = localCacheMode;
        return this;
    }

    /**
     * Get the initialUploadPolicy property: Policy for how the initial upload sync session is performed.
     * 
     * @return the initialUploadPolicy value.
     */
    public InitialUploadPolicy initialUploadPolicy() {
        return this.initialUploadPolicy;
    }

    /**
     * Set the initialUploadPolicy property: Policy for how the initial upload sync session is performed.
     * 
     * @param initialUploadPolicy the initialUploadPolicy value to set.
     * @return the ServerEndpointCreateParametersProperties object itself.
     */
    public ServerEndpointCreateParametersProperties withInitialUploadPolicy(InitialUploadPolicy initialUploadPolicy) {
        this.initialUploadPolicy = initialUploadPolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverLocalPath", this.serverLocalPath);
        jsonWriter.writeStringField("cloudTiering", this.cloudTiering == null ? null : this.cloudTiering.toString());
        jsonWriter.writeNumberField("volumeFreeSpacePercent", this.volumeFreeSpacePercent);
        jsonWriter.writeNumberField("tierFilesOlderThanDays", this.tierFilesOlderThanDays);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("serverResourceId", this.serverResourceId);
        jsonWriter.writeStringField("offlineDataTransfer",
            this.offlineDataTransfer == null ? null : this.offlineDataTransfer.toString());
        jsonWriter.writeStringField("offlineDataTransferShareName", this.offlineDataTransferShareName);
        jsonWriter.writeStringField("initialDownloadPolicy",
            this.initialDownloadPolicy == null ? null : this.initialDownloadPolicy.toString());
        jsonWriter.writeStringField("localCacheMode",
            this.localCacheMode == null ? null : this.localCacheMode.toString());
        jsonWriter.writeStringField("initialUploadPolicy",
            this.initialUploadPolicy == null ? null : this.initialUploadPolicy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEndpointCreateParametersProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEndpointCreateParametersProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEndpointCreateParametersProperties.
     */
    public static ServerEndpointCreateParametersProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEndpointCreateParametersProperties deserializedServerEndpointCreateParametersProperties
                = new ServerEndpointCreateParametersProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverLocalPath".equals(fieldName)) {
                    deserializedServerEndpointCreateParametersProperties.serverLocalPath = reader.getString();
                } else if ("cloudTiering".equals(fieldName)) {
                    deserializedServerEndpointCreateParametersProperties.cloudTiering
                        = FeatureStatus.fromString(reader.getString());
                } else if ("volumeFreeSpacePercent".equals(fieldName)) {
                    deserializedServerEndpointCreateParametersProperties.volumeFreeSpacePercent
                        = reader.getNullable(JsonReader::getInt);
                } else if ("tierFilesOlderThanDays".equals(fieldName)) {
                    deserializedServerEndpointCreateParametersProperties.tierFilesOlderThanDays
                        = reader.getNullable(JsonReader::getInt);
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedServerEndpointCreateParametersProperties.friendlyName = reader.getString();
                } else if ("serverResourceId".equals(fieldName)) {
                    deserializedServerEndpointCreateParametersProperties.serverResourceId = reader.getString();
                } else if ("offlineDataTransfer".equals(fieldName)) {
                    deserializedServerEndpointCreateParametersProperties.offlineDataTransfer
                        = FeatureStatus.fromString(reader.getString());
                } else if ("offlineDataTransferShareName".equals(fieldName)) {
                    deserializedServerEndpointCreateParametersProperties.offlineDataTransferShareName
                        = reader.getString();
                } else if ("initialDownloadPolicy".equals(fieldName)) {
                    deserializedServerEndpointCreateParametersProperties.initialDownloadPolicy
                        = InitialDownloadPolicy.fromString(reader.getString());
                } else if ("localCacheMode".equals(fieldName)) {
                    deserializedServerEndpointCreateParametersProperties.localCacheMode
                        = LocalCacheMode.fromString(reader.getString());
                } else if ("initialUploadPolicy".equals(fieldName)) {
                    deserializedServerEndpointCreateParametersProperties.initialUploadPolicy
                        = InitialUploadPolicy.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEndpointCreateParametersProperties;
        });
    }
}
