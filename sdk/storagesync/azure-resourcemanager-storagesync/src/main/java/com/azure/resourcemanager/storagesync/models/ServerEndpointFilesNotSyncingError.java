// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Files not syncing error object.
 */
@Immutable
public final class ServerEndpointFilesNotSyncingError implements JsonSerializable<ServerEndpointFilesNotSyncingError> {
    /*
     * Error code (HResult)
     */
    private Integer errorCode;

    /*
     * Count of persistent files not syncing with the specified error code
     */
    private Long persistentCount;

    /*
     * Count of transient files not syncing with the specified error code
     */
    private Long transientCount;

    /**
     * Creates an instance of ServerEndpointFilesNotSyncingError class.
     */
    public ServerEndpointFilesNotSyncingError() {
    }

    /**
     * Get the errorCode property: Error code (HResult).
     * 
     * @return the errorCode value.
     */
    public Integer errorCode() {
        return this.errorCode;
    }

    /**
     * Get the persistentCount property: Count of persistent files not syncing with the specified error code.
     * 
     * @return the persistentCount value.
     */
    public Long persistentCount() {
        return this.persistentCount;
    }

    /**
     * Get the transientCount property: Count of transient files not syncing with the specified error code.
     * 
     * @return the transientCount value.
     */
    public Long transientCount() {
        return this.transientCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEndpointFilesNotSyncingError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEndpointFilesNotSyncingError if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEndpointFilesNotSyncingError.
     */
    public static ServerEndpointFilesNotSyncingError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEndpointFilesNotSyncingError deserializedServerEndpointFilesNotSyncingError
                = new ServerEndpointFilesNotSyncingError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorCode".equals(fieldName)) {
                    deserializedServerEndpointFilesNotSyncingError.errorCode = reader.getNullable(JsonReader::getInt);
                } else if ("persistentCount".equals(fieldName)) {
                    deserializedServerEndpointFilesNotSyncingError.persistentCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("transientCount".equals(fieldName)) {
                    deserializedServerEndpointFilesNotSyncingError.transientCount
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEndpointFilesNotSyncingError;
        });
    }
}
