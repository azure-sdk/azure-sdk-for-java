// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagesync.fluent.models.StorageSyncServiceCreateParametersProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The parameters used when creating a storage sync service. */
@Fluent
public final class StorageSyncServiceCreateParameters extends Resource {
    /*
     * Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo
     * Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is
     * created, but if an identical geo region is specified on update, the request will succeed.
     */
    @JsonProperty(value = "location", required = true)
    private String location;

    /*
     * Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and
     * grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag
     * must have a key with a length no greater than 128 characters and a value with a length no greater than 256
     * characters.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /*
     * managed identities for the Storage Sync to interact with other Azure services without maintaining any secrets or
     * credentials in code.
     */
    @JsonProperty(value = "identity")
    private ManagedServiceIdentity identity;

    /*
     * The parameters used to create the storage sync service.
     */
    @JsonProperty(value = "properties")
    private StorageSyncServiceCreateParametersProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of StorageSyncServiceCreateParameters class. */
    public StorageSyncServiceCreateParameters() {
    }

    /**
     * Get the location property: Required. Gets or sets the location of the resource. This will be one of the supported
     * and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource
     * cannot be changed once it is created, but if an identical geo region is specified on update, the request will
     * succeed.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Required. Gets or sets the location of the resource. This will be one of the supported
     * and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource
     * cannot be changed once it is created, but if an identical geo region is specified on update, the request will
     * succeed.
     *
     * @param location the location value to set.
     * @return the StorageSyncServiceCreateParameters object itself.
     */
    public StorageSyncServiceCreateParameters withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the tags property: Gets or sets a list of key value pairs that describe the resource. These tags can be used
     * for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a
     * resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no
     * greater than 256 characters.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Gets or sets a list of key value pairs that describe the resource. These tags can be used
     * for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a
     * resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no
     * greater than 256 characters.
     *
     * @param tags the tags value to set.
     * @return the StorageSyncServiceCreateParameters object itself.
     */
    public StorageSyncServiceCreateParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the identity property: managed identities for the Storage Sync to interact with other Azure services without
     * maintaining any secrets or credentials in code.
     *
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: managed identities for the Storage Sync to interact with other Azure services without
     * maintaining any secrets or credentials in code.
     *
     * @param identity the identity value to set.
     * @return the StorageSyncServiceCreateParameters object itself.
     */
    public StorageSyncServiceCreateParameters withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the innerProperties property: The parameters used to create the storage sync service.
     *
     * @return the innerProperties value.
     */
    private StorageSyncServiceCreateParametersProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the incomingTrafficPolicy property: Incoming Traffic Policy.
     *
     * @return the incomingTrafficPolicy value.
     */
    public IncomingTrafficPolicy incomingTrafficPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().incomingTrafficPolicy();
    }

    /**
     * Set the incomingTrafficPolicy property: Incoming Traffic Policy.
     *
     * @param incomingTrafficPolicy the incomingTrafficPolicy value to set.
     * @return the StorageSyncServiceCreateParameters object itself.
     */
    public StorageSyncServiceCreateParameters withIncomingTrafficPolicy(IncomingTrafficPolicy incomingTrafficPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageSyncServiceCreateParametersProperties();
        }
        this.innerProperties().withIncomingTrafficPolicy(incomingTrafficPolicy);
        return this;
    }

    /**
     * Get the useIdentity property: Use Identity authorization when customer have finished setup RBAC permissions.
     *
     * @return the useIdentity value.
     */
    public Boolean useIdentity() {
        return this.innerProperties() == null ? null : this.innerProperties().useIdentity();
    }

    /**
     * Set the useIdentity property: Use Identity authorization when customer have finished setup RBAC permissions.
     *
     * @param useIdentity the useIdentity value to set.
     * @return the StorageSyncServiceCreateParameters object itself.
     */
    public StorageSyncServiceCreateParameters withUseIdentity(Boolean useIdentity) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageSyncServiceCreateParametersProperties();
        }
        this.innerProperties().withUseIdentity(useIdentity);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (location() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property location in model StorageSyncServiceCreateParameters"));
        }
        if (identity() != null) {
            identity().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageSyncServiceCreateParameters.class);
}
