// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Cloud endpoint change enumeration activity object.
 */
@Immutable
public final class CloudEndpointChangeEnumerationActivity
    implements JsonSerializable<CloudEndpointChangeEnumerationActivity> {
    /*
     * Last updated timestamp
     */
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Change enumeration operation state
     */
    private CloudEndpointChangeEnumerationActivityState operationState;

    /*
     * When non-zero, indicates an issue that is delaying change enumeration
     */
    private Integer statusCode;

    /*
     * Timestamp when change enumeration started
     */
    private OffsetDateTime startedTimestamp;

    /*
     * Count of files processed
     */
    private Long processedFilesCount;

    /*
     * Count of directories processed
     */
    private Long processedDirectoriesCount;

    /*
     * Total count of files enumerated
     */
    private Long totalFilesCount;

    /*
     * Total count of directories enumerated
     */
    private Long totalDirectoriesCount;

    /*
     * Total enumerated size in bytes
     */
    private Long totalSizeBytes;

    /*
     * Progress percentage for change enumeration run, excluding processing of deletes
     */
    private Integer progressPercent;

    /*
     * Estimate of time remaining for the enumeration run
     */
    private Integer minutesRemaining;

    /*
     * Change enumeration total counts state
     */
    private CloudEndpointChangeEnumerationTotalCountsState totalCountsState;

    /*
     * Progress percentage for processing deletes. This is done separately from the rest of the enumeration run
     */
    private Integer deletesProgressPercent;

    /**
     * Creates an instance of CloudEndpointChangeEnumerationActivity class.
     */
    public CloudEndpointChangeEnumerationActivity() {
    }

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     * 
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the operationState property: Change enumeration operation state.
     * 
     * @return the operationState value.
     */
    public CloudEndpointChangeEnumerationActivityState operationState() {
        return this.operationState;
    }

    /**
     * Get the statusCode property: When non-zero, indicates an issue that is delaying change enumeration.
     * 
     * @return the statusCode value.
     */
    public Integer statusCode() {
        return this.statusCode;
    }

    /**
     * Get the startedTimestamp property: Timestamp when change enumeration started.
     * 
     * @return the startedTimestamp value.
     */
    public OffsetDateTime startedTimestamp() {
        return this.startedTimestamp;
    }

    /**
     * Get the processedFilesCount property: Count of files processed.
     * 
     * @return the processedFilesCount value.
     */
    public Long processedFilesCount() {
        return this.processedFilesCount;
    }

    /**
     * Get the processedDirectoriesCount property: Count of directories processed.
     * 
     * @return the processedDirectoriesCount value.
     */
    public Long processedDirectoriesCount() {
        return this.processedDirectoriesCount;
    }

    /**
     * Get the totalFilesCount property: Total count of files enumerated.
     * 
     * @return the totalFilesCount value.
     */
    public Long totalFilesCount() {
        return this.totalFilesCount;
    }

    /**
     * Get the totalDirectoriesCount property: Total count of directories enumerated.
     * 
     * @return the totalDirectoriesCount value.
     */
    public Long totalDirectoriesCount() {
        return this.totalDirectoriesCount;
    }

    /**
     * Get the totalSizeBytes property: Total enumerated size in bytes.
     * 
     * @return the totalSizeBytes value.
     */
    public Long totalSizeBytes() {
        return this.totalSizeBytes;
    }

    /**
     * Get the progressPercent property: Progress percentage for change enumeration run, excluding processing of
     * deletes.
     * 
     * @return the progressPercent value.
     */
    public Integer progressPercent() {
        return this.progressPercent;
    }

    /**
     * Get the minutesRemaining property: Estimate of time remaining for the enumeration run.
     * 
     * @return the minutesRemaining value.
     */
    public Integer minutesRemaining() {
        return this.minutesRemaining;
    }

    /**
     * Get the totalCountsState property: Change enumeration total counts state.
     * 
     * @return the totalCountsState value.
     */
    public CloudEndpointChangeEnumerationTotalCountsState totalCountsState() {
        return this.totalCountsState;
    }

    /**
     * Get the deletesProgressPercent property: Progress percentage for processing deletes. This is done separately from
     * the rest of the enumeration run.
     * 
     * @return the deletesProgressPercent value.
     */
    public Integer deletesProgressPercent() {
        return this.deletesProgressPercent;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudEndpointChangeEnumerationActivity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudEndpointChangeEnumerationActivity if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudEndpointChangeEnumerationActivity.
     */
    public static CloudEndpointChangeEnumerationActivity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudEndpointChangeEnumerationActivity deserializedCloudEndpointChangeEnumerationActivity
                = new CloudEndpointChangeEnumerationActivity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastUpdatedTimestamp".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.lastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("operationState".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.operationState
                        = CloudEndpointChangeEnumerationActivityState.fromString(reader.getString());
                } else if ("statusCode".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.statusCode
                        = reader.getNullable(JsonReader::getInt);
                } else if ("startedTimestamp".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.startedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("processedFilesCount".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.processedFilesCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("processedDirectoriesCount".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.processedDirectoriesCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("totalFilesCount".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.totalFilesCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("totalDirectoriesCount".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.totalDirectoriesCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("totalSizeBytes".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.totalSizeBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("progressPercent".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.progressPercent
                        = reader.getNullable(JsonReader::getInt);
                } else if ("minutesRemaining".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.minutesRemaining
                        = reader.getNullable(JsonReader::getInt);
                } else if ("totalCountsState".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.totalCountsState
                        = CloudEndpointChangeEnumerationTotalCountsState.fromString(reader.getString());
                } else if ("deletesProgressPercent".equals(fieldName)) {
                    deserializedCloudEndpointChangeEnumerationActivity.deletesProgressPercent
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudEndpointChangeEnumerationActivity;
        });
    }
}
