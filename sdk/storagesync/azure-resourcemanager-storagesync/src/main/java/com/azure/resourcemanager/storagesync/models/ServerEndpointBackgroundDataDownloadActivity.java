// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Background data download activity object.
 */
@Immutable
public final class ServerEndpointBackgroundDataDownloadActivity
    implements JsonSerializable<ServerEndpointBackgroundDataDownloadActivity> {
    /*
     * Timestamp when properties were updated
     */
    private OffsetDateTime timestamp;

    /*
     * Timestamp when the operation started
     */
    private OffsetDateTime startedTimestamp;

    /*
     * Progress percentage
     */
    private Integer percentProgress;

    /*
     * Running count of bytes downloaded
     */
    private Long downloadedBytes;

    /**
     * Creates an instance of ServerEndpointBackgroundDataDownloadActivity class.
     */
    public ServerEndpointBackgroundDataDownloadActivity() {
    }

    /**
     * Get the timestamp property: Timestamp when properties were updated.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Get the startedTimestamp property: Timestamp when the operation started.
     * 
     * @return the startedTimestamp value.
     */
    public OffsetDateTime startedTimestamp() {
        return this.startedTimestamp;
    }

    /**
     * Get the percentProgress property: Progress percentage.
     * 
     * @return the percentProgress value.
     */
    public Integer percentProgress() {
        return this.percentProgress;
    }

    /**
     * Get the downloadedBytes property: Running count of bytes downloaded.
     * 
     * @return the downloadedBytes value.
     */
    public Long downloadedBytes() {
        return this.downloadedBytes;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEndpointBackgroundDataDownloadActivity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEndpointBackgroundDataDownloadActivity if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEndpointBackgroundDataDownloadActivity.
     */
    public static ServerEndpointBackgroundDataDownloadActivity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEndpointBackgroundDataDownloadActivity deserializedServerEndpointBackgroundDataDownloadActivity
                = new ServerEndpointBackgroundDataDownloadActivity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestamp".equals(fieldName)) {
                    deserializedServerEndpointBackgroundDataDownloadActivity.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("startedTimestamp".equals(fieldName)) {
                    deserializedServerEndpointBackgroundDataDownloadActivity.startedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("percentProgress".equals(fieldName)) {
                    deserializedServerEndpointBackgroundDataDownloadActivity.percentProgress
                        = reader.getNullable(JsonReader::getInt);
                } else if ("downloadedBytes".equals(fieldName)) {
                    deserializedServerEndpointBackgroundDataDownloadActivity.downloadedBytes
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEndpointBackgroundDataDownloadActivity;
        });
    }
}
