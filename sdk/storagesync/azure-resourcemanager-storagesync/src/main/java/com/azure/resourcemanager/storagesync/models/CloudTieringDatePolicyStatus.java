// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Status of the date policy.
 */
@Immutable
public final class CloudTieringDatePolicyStatus implements JsonSerializable<CloudTieringDatePolicyStatus> {
    /*
     * Last updated timestamp
     */
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Most recent access time of tiered files
     */
    private OffsetDateTime tieredFilesMostRecentAccessTimestamp;

    /**
     * Creates an instance of CloudTieringDatePolicyStatus class.
     */
    public CloudTieringDatePolicyStatus() {
    }

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     * 
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the tieredFilesMostRecentAccessTimestamp property: Most recent access time of tiered files.
     * 
     * @return the tieredFilesMostRecentAccessTimestamp value.
     */
    public OffsetDateTime tieredFilesMostRecentAccessTimestamp() {
        return this.tieredFilesMostRecentAccessTimestamp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudTieringDatePolicyStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudTieringDatePolicyStatus if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudTieringDatePolicyStatus.
     */
    public static CloudTieringDatePolicyStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudTieringDatePolicyStatus deserializedCloudTieringDatePolicyStatus = new CloudTieringDatePolicyStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastUpdatedTimestamp".equals(fieldName)) {
                    deserializedCloudTieringDatePolicyStatus.lastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("tieredFilesMostRecentAccessTimestamp".equals(fieldName)) {
                    deserializedCloudTieringDatePolicyStatus.tieredFilesMostRecentAccessTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudTieringDatePolicyStatus;
        });
    }
}
