// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * RegisteredServer Update Properties object.
 */
@Fluent
public final class RegisteredServerUpdateProperties implements JsonSerializable<RegisteredServerUpdateProperties> {
    /*
     * Apply server with newly discovered ApplicationId if available.
     */
    private Boolean identity;

    /*
     * Apply server with new ServicePrincipal Id
     */
    private String applicationId;

    /**
     * Creates an instance of RegisteredServerUpdateProperties class.
     */
    public RegisteredServerUpdateProperties() {
    }

    /**
     * Get the identity property: Apply server with newly discovered ApplicationId if available.
     * 
     * @return the identity value.
     */
    public Boolean identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Apply server with newly discovered ApplicationId if available.
     * 
     * @param identity the identity value to set.
     * @return the RegisteredServerUpdateProperties object itself.
     */
    public RegisteredServerUpdateProperties withIdentity(Boolean identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the applicationId property: Apply server with new ServicePrincipal Id.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * Set the applicationId property: Apply server with new ServicePrincipal Id.
     * 
     * @param applicationId the applicationId value to set.
     * @return the RegisteredServerUpdateProperties object itself.
     */
    public RegisteredServerUpdateProperties withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("identity", this.identity);
        jsonWriter.writeStringField("applicationId", this.applicationId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegisteredServerUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegisteredServerUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegisteredServerUpdateProperties.
     */
    public static RegisteredServerUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegisteredServerUpdateProperties deserializedRegisteredServerUpdateProperties
                = new RegisteredServerUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identity".equals(fieldName)) {
                    deserializedRegisteredServerUpdateProperties.identity = reader.getNullable(JsonReader::getBoolean);
                } else if ("applicationId".equals(fieldName)) {
                    deserializedRegisteredServerUpdateProperties.applicationId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegisteredServerUpdateProperties;
        });
    }
}
