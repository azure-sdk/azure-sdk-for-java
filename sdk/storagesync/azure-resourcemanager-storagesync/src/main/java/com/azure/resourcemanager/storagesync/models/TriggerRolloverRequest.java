// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Trigger Rollover Request.
 */
@Fluent
public final class TriggerRolloverRequest implements JsonSerializable<TriggerRolloverRequest> {
    /*
     * Certificate Data
     */
    private String serverCertificate;

    /**
     * Creates an instance of TriggerRolloverRequest class.
     */
    public TriggerRolloverRequest() {
    }

    /**
     * Get the serverCertificate property: Certificate Data.
     * 
     * @return the serverCertificate value.
     */
    public String serverCertificate() {
        return this.serverCertificate;
    }

    /**
     * Set the serverCertificate property: Certificate Data.
     * 
     * @param serverCertificate the serverCertificate value to set.
     * @return the TriggerRolloverRequest object itself.
     */
    public TriggerRolloverRequest withServerCertificate(String serverCertificate) {
        this.serverCertificate = serverCertificate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverCertificate", this.serverCertificate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TriggerRolloverRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TriggerRolloverRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TriggerRolloverRequest.
     */
    public static TriggerRolloverRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TriggerRolloverRequest deserializedTriggerRolloverRequest = new TriggerRolloverRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverCertificate".equals(fieldName)) {
                    deserializedTriggerRolloverRequest.serverCertificate = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTriggerRolloverRequest;
        });
    }
}
