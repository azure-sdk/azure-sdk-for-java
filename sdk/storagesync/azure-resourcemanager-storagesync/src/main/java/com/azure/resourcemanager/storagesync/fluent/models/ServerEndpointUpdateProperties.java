// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagesync.models.FeatureStatus;
import com.azure.resourcemanager.storagesync.models.LocalCacheMode;
import java.io.IOException;

/**
 * ServerEndpoint Update Properties object.
 */
@Fluent
public final class ServerEndpointUpdateProperties implements JsonSerializable<ServerEndpointUpdateProperties> {
    /*
     * Cloud Tiering.
     */
    private FeatureStatus cloudTiering;

    /*
     * Level of free space to be maintained by Cloud Tiering if it is enabled.
     */
    private Integer volumeFreeSpacePercent;

    /*
     * Tier files older than days.
     */
    private Integer tierFilesOlderThanDays;

    /*
     * Offline data transfer
     */
    private FeatureStatus offlineDataTransfer;

    /*
     * Offline data transfer share name
     */
    private String offlineDataTransferShareName;

    /*
     * Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before
     * local access.
     */
    private LocalCacheMode localCacheMode;

    /**
     * Creates an instance of ServerEndpointUpdateProperties class.
     */
    public ServerEndpointUpdateProperties() {
    }

    /**
     * Get the cloudTiering property: Cloud Tiering.
     * 
     * @return the cloudTiering value.
     */
    public FeatureStatus cloudTiering() {
        return this.cloudTiering;
    }

    /**
     * Set the cloudTiering property: Cloud Tiering.
     * 
     * @param cloudTiering the cloudTiering value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withCloudTiering(FeatureStatus cloudTiering) {
        this.cloudTiering = cloudTiering;
        return this;
    }

    /**
     * Get the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     * 
     * @return the volumeFreeSpacePercent value.
     */
    public Integer volumeFreeSpacePercent() {
        return this.volumeFreeSpacePercent;
    }

    /**
     * Set the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     * 
     * @param volumeFreeSpacePercent the volumeFreeSpacePercent value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withVolumeFreeSpacePercent(Integer volumeFreeSpacePercent) {
        this.volumeFreeSpacePercent = volumeFreeSpacePercent;
        return this;
    }

    /**
     * Get the tierFilesOlderThanDays property: Tier files older than days.
     * 
     * @return the tierFilesOlderThanDays value.
     */
    public Integer tierFilesOlderThanDays() {
        return this.tierFilesOlderThanDays;
    }

    /**
     * Set the tierFilesOlderThanDays property: Tier files older than days.
     * 
     * @param tierFilesOlderThanDays the tierFilesOlderThanDays value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withTierFilesOlderThanDays(Integer tierFilesOlderThanDays) {
        this.tierFilesOlderThanDays = tierFilesOlderThanDays;
        return this;
    }

    /**
     * Get the offlineDataTransfer property: Offline data transfer.
     * 
     * @return the offlineDataTransfer value.
     */
    public FeatureStatus offlineDataTransfer() {
        return this.offlineDataTransfer;
    }

    /**
     * Set the offlineDataTransfer property: Offline data transfer.
     * 
     * @param offlineDataTransfer the offlineDataTransfer value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withOfflineDataTransfer(FeatureStatus offlineDataTransfer) {
        this.offlineDataTransfer = offlineDataTransfer;
        return this;
    }

    /**
     * Get the offlineDataTransferShareName property: Offline data transfer share name.
     * 
     * @return the offlineDataTransferShareName value.
     */
    public String offlineDataTransferShareName() {
        return this.offlineDataTransferShareName;
    }

    /**
     * Set the offlineDataTransferShareName property: Offline data transfer share name.
     * 
     * @param offlineDataTransferShareName the offlineDataTransferShareName value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withOfflineDataTransferShareName(String offlineDataTransferShareName) {
        this.offlineDataTransferShareName = offlineDataTransferShareName;
        return this;
    }

    /**
     * Get the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     * 
     * @return the localCacheMode value.
     */
    public LocalCacheMode localCacheMode() {
        return this.localCacheMode;
    }

    /**
     * Set the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     * 
     * @param localCacheMode the localCacheMode value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withLocalCacheMode(LocalCacheMode localCacheMode) {
        this.localCacheMode = localCacheMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cloudTiering", this.cloudTiering == null ? null : this.cloudTiering.toString());
        jsonWriter.writeNumberField("volumeFreeSpacePercent", this.volumeFreeSpacePercent);
        jsonWriter.writeNumberField("tierFilesOlderThanDays", this.tierFilesOlderThanDays);
        jsonWriter.writeStringField("offlineDataTransfer",
            this.offlineDataTransfer == null ? null : this.offlineDataTransfer.toString());
        jsonWriter.writeStringField("offlineDataTransferShareName", this.offlineDataTransferShareName);
        jsonWriter.writeStringField("localCacheMode",
            this.localCacheMode == null ? null : this.localCacheMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEndpointUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEndpointUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEndpointUpdateProperties.
     */
    public static ServerEndpointUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEndpointUpdateProperties deserializedServerEndpointUpdateProperties
                = new ServerEndpointUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cloudTiering".equals(fieldName)) {
                    deserializedServerEndpointUpdateProperties.cloudTiering
                        = FeatureStatus.fromString(reader.getString());
                } else if ("volumeFreeSpacePercent".equals(fieldName)) {
                    deserializedServerEndpointUpdateProperties.volumeFreeSpacePercent
                        = reader.getNullable(JsonReader::getInt);
                } else if ("tierFilesOlderThanDays".equals(fieldName)) {
                    deserializedServerEndpointUpdateProperties.tierFilesOlderThanDays
                        = reader.getNullable(JsonReader::getInt);
                } else if ("offlineDataTransfer".equals(fieldName)) {
                    deserializedServerEndpointUpdateProperties.offlineDataTransfer
                        = FeatureStatus.fromString(reader.getString());
                } else if ("offlineDataTransferShareName".equals(fieldName)) {
                    deserializedServerEndpointUpdateProperties.offlineDataTransferShareName = reader.getString();
                } else if ("localCacheMode".equals(fieldName)) {
                    deserializedServerEndpointUpdateProperties.localCacheMode
                        = LocalCacheMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEndpointUpdateProperties;
        });
    }
}
