// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Server endpoint cloud tiering status object.
 */
@Immutable
public final class CloudTieringSpaceSavings implements JsonSerializable<CloudTieringSpaceSavings> {
    /*
     * Last updated timestamp
     */
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Volume size
     */
    private Long volumeSizeBytes;

    /*
     * Total size of content in the azure file share
     */
    private Long totalSizeCloudBytes;

    /*
     * Cached content size on the server
     */
    private Long cachedSizeBytes;

    /*
     * Percentage of cached size over total size
     */
    private Integer spaceSavingsPercent;

    /*
     * Count of bytes saved on the server
     */
    private Long spaceSavingsBytes;

    /**
     * Creates an instance of CloudTieringSpaceSavings class.
     */
    public CloudTieringSpaceSavings() {
    }

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     * 
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the volumeSizeBytes property: Volume size.
     * 
     * @return the volumeSizeBytes value.
     */
    public Long volumeSizeBytes() {
        return this.volumeSizeBytes;
    }

    /**
     * Get the totalSizeCloudBytes property: Total size of content in the azure file share.
     * 
     * @return the totalSizeCloudBytes value.
     */
    public Long totalSizeCloudBytes() {
        return this.totalSizeCloudBytes;
    }

    /**
     * Get the cachedSizeBytes property: Cached content size on the server.
     * 
     * @return the cachedSizeBytes value.
     */
    public Long cachedSizeBytes() {
        return this.cachedSizeBytes;
    }

    /**
     * Get the spaceSavingsPercent property: Percentage of cached size over total size.
     * 
     * @return the spaceSavingsPercent value.
     */
    public Integer spaceSavingsPercent() {
        return this.spaceSavingsPercent;
    }

    /**
     * Get the spaceSavingsBytes property: Count of bytes saved on the server.
     * 
     * @return the spaceSavingsBytes value.
     */
    public Long spaceSavingsBytes() {
        return this.spaceSavingsBytes;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudTieringSpaceSavings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudTieringSpaceSavings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudTieringSpaceSavings.
     */
    public static CloudTieringSpaceSavings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudTieringSpaceSavings deserializedCloudTieringSpaceSavings = new CloudTieringSpaceSavings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastUpdatedTimestamp".equals(fieldName)) {
                    deserializedCloudTieringSpaceSavings.lastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("volumeSizeBytes".equals(fieldName)) {
                    deserializedCloudTieringSpaceSavings.volumeSizeBytes = reader.getNullable(JsonReader::getLong);
                } else if ("totalSizeCloudBytes".equals(fieldName)) {
                    deserializedCloudTieringSpaceSavings.totalSizeCloudBytes = reader.getNullable(JsonReader::getLong);
                } else if ("cachedSizeBytes".equals(fieldName)) {
                    deserializedCloudTieringSpaceSavings.cachedSizeBytes = reader.getNullable(JsonReader::getLong);
                } else if ("spaceSavingsPercent".equals(fieldName)) {
                    deserializedCloudTieringSpaceSavings.spaceSavingsPercent = reader.getNullable(JsonReader::getInt);
                } else if ("spaceSavingsBytes".equals(fieldName)) {
                    deserializedCloudTieringSpaceSavings.spaceSavingsBytes = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudTieringSpaceSavings;
        });
    }
}
