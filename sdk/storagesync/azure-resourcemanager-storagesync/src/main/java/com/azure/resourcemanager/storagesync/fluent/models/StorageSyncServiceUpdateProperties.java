// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagesync.models.IncomingTrafficPolicy;
import java.io.IOException;

/**
 * StorageSyncService Properties object.
 */
@Fluent
public final class StorageSyncServiceUpdateProperties implements JsonSerializable<StorageSyncServiceUpdateProperties> {
    /*
     * Incoming Traffic Policy
     */
    private IncomingTrafficPolicy incomingTrafficPolicy;

    /*
     * Use Identity authorization when customer have finished setup RBAC permissions.
     */
    private Boolean useIdentity;

    /**
     * Creates an instance of StorageSyncServiceUpdateProperties class.
     */
    public StorageSyncServiceUpdateProperties() {
    }

    /**
     * Get the incomingTrafficPolicy property: Incoming Traffic Policy.
     * 
     * @return the incomingTrafficPolicy value.
     */
    public IncomingTrafficPolicy incomingTrafficPolicy() {
        return this.incomingTrafficPolicy;
    }

    /**
     * Set the incomingTrafficPolicy property: Incoming Traffic Policy.
     * 
     * @param incomingTrafficPolicy the incomingTrafficPolicy value to set.
     * @return the StorageSyncServiceUpdateProperties object itself.
     */
    public StorageSyncServiceUpdateProperties withIncomingTrafficPolicy(IncomingTrafficPolicy incomingTrafficPolicy) {
        this.incomingTrafficPolicy = incomingTrafficPolicy;
        return this;
    }

    /**
     * Get the useIdentity property: Use Identity authorization when customer have finished setup RBAC permissions.
     * 
     * @return the useIdentity value.
     */
    public Boolean useIdentity() {
        return this.useIdentity;
    }

    /**
     * Set the useIdentity property: Use Identity authorization when customer have finished setup RBAC permissions.
     * 
     * @param useIdentity the useIdentity value to set.
     * @return the StorageSyncServiceUpdateProperties object itself.
     */
    public StorageSyncServiceUpdateProperties withUseIdentity(Boolean useIdentity) {
        this.useIdentity = useIdentity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("incomingTrafficPolicy",
            this.incomingTrafficPolicy == null ? null : this.incomingTrafficPolicy.toString());
        jsonWriter.writeBooleanField("useIdentity", this.useIdentity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageSyncServiceUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageSyncServiceUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageSyncServiceUpdateProperties.
     */
    public static StorageSyncServiceUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageSyncServiceUpdateProperties deserializedStorageSyncServiceUpdateProperties
                = new StorageSyncServiceUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("incomingTrafficPolicy".equals(fieldName)) {
                    deserializedStorageSyncServiceUpdateProperties.incomingTrafficPolicy
                        = IncomingTrafficPolicy.fromString(reader.getString());
                } else if ("useIdentity".equals(fieldName)) {
                    deserializedStorageSyncServiceUpdateProperties.useIdentity
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageSyncServiceUpdateProperties;
        });
    }
}
