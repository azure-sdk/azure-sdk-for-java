// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagesync.models.OperationDirection;
import com.azure.resourcemanager.storagesync.models.WorkflowStatus;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Workflow Properties object.
 */
@Fluent
public final class WorkflowProperties implements JsonSerializable<WorkflowProperties> {
    /*
     * last step name
     */
    private String lastStepName;

    /*
     * workflow status.
     */
    private WorkflowStatus status;

    /*
     * operation direction.
     */
    private OperationDirection operation;

    /*
     * workflow steps
     */
    private String steps;

    /*
     * workflow last operation identifier.
     */
    private String lastOperationId;

    /*
     * workflow command name.
     */
    private String commandName;

    /*
     * workflow created timestamp.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * workflow last status timestamp.
     */
    private OffsetDateTime lastStatusTimestamp;

    /**
     * Creates an instance of WorkflowProperties class.
     */
    public WorkflowProperties() {
    }

    /**
     * Get the lastStepName property: last step name.
     * 
     * @return the lastStepName value.
     */
    public String lastStepName() {
        return this.lastStepName;
    }

    /**
     * Set the lastStepName property: last step name.
     * 
     * @param lastStepName the lastStepName value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withLastStepName(String lastStepName) {
        this.lastStepName = lastStepName;
        return this;
    }

    /**
     * Get the status property: workflow status.
     * 
     * @return the status value.
     */
    public WorkflowStatus status() {
        return this.status;
    }

    /**
     * Set the status property: workflow status.
     * 
     * @param status the status value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withStatus(WorkflowStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the operation property: operation direction.
     * 
     * @return the operation value.
     */
    public OperationDirection operation() {
        return this.operation;
    }

    /**
     * Set the operation property: operation direction.
     * 
     * @param operation the operation value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withOperation(OperationDirection operation) {
        this.operation = operation;
        return this;
    }

    /**
     * Get the steps property: workflow steps.
     * 
     * @return the steps value.
     */
    public String steps() {
        return this.steps;
    }

    /**
     * Set the steps property: workflow steps.
     * 
     * @param steps the steps value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withSteps(String steps) {
        this.steps = steps;
        return this;
    }

    /**
     * Get the lastOperationId property: workflow last operation identifier.
     * 
     * @return the lastOperationId value.
     */
    public String lastOperationId() {
        return this.lastOperationId;
    }

    /**
     * Set the lastOperationId property: workflow last operation identifier.
     * 
     * @param lastOperationId the lastOperationId value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withLastOperationId(String lastOperationId) {
        this.lastOperationId = lastOperationId;
        return this;
    }

    /**
     * Get the commandName property: workflow command name.
     * 
     * @return the commandName value.
     */
    public String commandName() {
        return this.commandName;
    }

    /**
     * Get the createdTimestamp property: workflow created timestamp.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the lastStatusTimestamp property: workflow last status timestamp.
     * 
     * @return the lastStatusTimestamp value.
     */
    public OffsetDateTime lastStatusTimestamp() {
        return this.lastStatusTimestamp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lastStepName", this.lastStepName);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("operation", this.operation == null ? null : this.operation.toString());
        jsonWriter.writeStringField("steps", this.steps);
        jsonWriter.writeStringField("lastOperationId", this.lastOperationId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkflowProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkflowProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkflowProperties.
     */
    public static WorkflowProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkflowProperties deserializedWorkflowProperties = new WorkflowProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastStepName".equals(fieldName)) {
                    deserializedWorkflowProperties.lastStepName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedWorkflowProperties.status = WorkflowStatus.fromString(reader.getString());
                } else if ("operation".equals(fieldName)) {
                    deserializedWorkflowProperties.operation = OperationDirection.fromString(reader.getString());
                } else if ("steps".equals(fieldName)) {
                    deserializedWorkflowProperties.steps = reader.getString();
                } else if ("lastOperationId".equals(fieldName)) {
                    deserializedWorkflowProperties.lastOperationId = reader.getString();
                } else if ("commandName".equals(fieldName)) {
                    deserializedWorkflowProperties.commandName = reader.getString();
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedWorkflowProperties.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastStatusTimestamp".equals(fieldName)) {
                    deserializedWorkflowProperties.lastStatusTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkflowProperties;
        });
    }
}
