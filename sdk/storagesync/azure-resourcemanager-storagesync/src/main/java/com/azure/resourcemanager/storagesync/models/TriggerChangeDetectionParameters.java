// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The parameters used when calling trigger change detection action on cloud endpoint.
 */
@Fluent
public final class TriggerChangeDetectionParameters implements JsonSerializable<TriggerChangeDetectionParameters> {
    /*
     * Relative path to a directory Azure File share for which change detection is to be performed.
     */
    private String directoryPath;

    /*
     * Change Detection Mode. Applies to a directory specified in directoryPath parameter.
     */
    private ChangeDetectionMode changeDetectionMode;

    /*
     * Array of relative paths on the Azure File share to be included in the change detection. Can be files and
     * directories.
     */
    private List<String> paths;

    /**
     * Creates an instance of TriggerChangeDetectionParameters class.
     */
    public TriggerChangeDetectionParameters() {
    }

    /**
     * Get the directoryPath property: Relative path to a directory Azure File share for which change detection is to be
     * performed.
     * 
     * @return the directoryPath value.
     */
    public String directoryPath() {
        return this.directoryPath;
    }

    /**
     * Set the directoryPath property: Relative path to a directory Azure File share for which change detection is to be
     * performed.
     * 
     * @param directoryPath the directoryPath value to set.
     * @return the TriggerChangeDetectionParameters object itself.
     */
    public TriggerChangeDetectionParameters withDirectoryPath(String directoryPath) {
        this.directoryPath = directoryPath;
        return this;
    }

    /**
     * Get the changeDetectionMode property: Change Detection Mode. Applies to a directory specified in directoryPath
     * parameter.
     * 
     * @return the changeDetectionMode value.
     */
    public ChangeDetectionMode changeDetectionMode() {
        return this.changeDetectionMode;
    }

    /**
     * Set the changeDetectionMode property: Change Detection Mode. Applies to a directory specified in directoryPath
     * parameter.
     * 
     * @param changeDetectionMode the changeDetectionMode value to set.
     * @return the TriggerChangeDetectionParameters object itself.
     */
    public TriggerChangeDetectionParameters withChangeDetectionMode(ChangeDetectionMode changeDetectionMode) {
        this.changeDetectionMode = changeDetectionMode;
        return this;
    }

    /**
     * Get the paths property: Array of relative paths on the Azure File share to be included in the change detection.
     * Can be files and directories.
     * 
     * @return the paths value.
     */
    public List<String> paths() {
        return this.paths;
    }

    /**
     * Set the paths property: Array of relative paths on the Azure File share to be included in the change detection.
     * Can be files and directories.
     * 
     * @param paths the paths value to set.
     * @return the TriggerChangeDetectionParameters object itself.
     */
    public TriggerChangeDetectionParameters withPaths(List<String> paths) {
        this.paths = paths;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("directoryPath", this.directoryPath);
        jsonWriter.writeStringField("changeDetectionMode",
            this.changeDetectionMode == null ? null : this.changeDetectionMode.toString());
        jsonWriter.writeArrayField("paths", this.paths, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TriggerChangeDetectionParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TriggerChangeDetectionParameters if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TriggerChangeDetectionParameters.
     */
    public static TriggerChangeDetectionParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TriggerChangeDetectionParameters deserializedTriggerChangeDetectionParameters
                = new TriggerChangeDetectionParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("directoryPath".equals(fieldName)) {
                    deserializedTriggerChangeDetectionParameters.directoryPath = reader.getString();
                } else if ("changeDetectionMode".equals(fieldName)) {
                    deserializedTriggerChangeDetectionParameters.changeDetectionMode
                        = ChangeDetectionMode.fromString(reader.getString());
                } else if ("paths".equals(fieldName)) {
                    List<String> paths = reader.readArray(reader1 -> reader1.getString());
                    deserializedTriggerChangeDetectionParameters.paths = paths;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTriggerChangeDetectionParameters;
        });
    }
}
