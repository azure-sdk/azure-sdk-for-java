// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Server endpoint cloud tiering status object.
 */
@Immutable
public final class CloudTieringFilesNotTiering implements JsonSerializable<CloudTieringFilesNotTiering> {
    /*
     * Last updated timestamp
     */
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Last cloud tiering result (HResult)
     */
    private Long totalFileCount;

    /*
     * Array of tiering errors
     */
    private List<FilesNotTieringError> errors;

    /**
     * Creates an instance of CloudTieringFilesNotTiering class.
     */
    public CloudTieringFilesNotTiering() {
    }

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     * 
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the totalFileCount property: Last cloud tiering result (HResult).
     * 
     * @return the totalFileCount value.
     */
    public Long totalFileCount() {
        return this.totalFileCount;
    }

    /**
     * Get the errors property: Array of tiering errors.
     * 
     * @return the errors value.
     */
    public List<FilesNotTieringError> errors() {
        return this.errors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudTieringFilesNotTiering from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudTieringFilesNotTiering if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudTieringFilesNotTiering.
     */
    public static CloudTieringFilesNotTiering fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudTieringFilesNotTiering deserializedCloudTieringFilesNotTiering = new CloudTieringFilesNotTiering();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastUpdatedTimestamp".equals(fieldName)) {
                    deserializedCloudTieringFilesNotTiering.lastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("totalFileCount".equals(fieldName)) {
                    deserializedCloudTieringFilesNotTiering.totalFileCount = reader.getNullable(JsonReader::getLong);
                } else if ("errors".equals(fieldName)) {
                    List<FilesNotTieringError> errors
                        = reader.readArray(reader1 -> FilesNotTieringError.fromJson(reader1));
                    deserializedCloudTieringFilesNotTiering.errors = errors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudTieringFilesNotTiering;
        });
    }
}
