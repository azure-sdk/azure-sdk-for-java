// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Server endpoint cloud tiering status object.
 */
@Immutable
public final class ServerEndpointCloudTieringStatus implements JsonSerializable<ServerEndpointCloudTieringStatus> {
    /*
     * Last updated timestamp
     */
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Cloud tiering health state.
     */
    private ServerEndpointHealthState health;

    /*
     * The last updated timestamp of health state
     */
    private OffsetDateTime healthLastUpdatedTimestamp;

    /*
     * Last cloud tiering result (HResult)
     */
    private Integer lastCloudTieringResult;

    /*
     * Last cloud tiering success timestamp
     */
    private OffsetDateTime lastSuccessTimestamp;

    /*
     * Information regarding how much local space cloud tiering is saving.
     */
    private CloudTieringSpaceSavings spaceSavings;

    /*
     * Information regarding how well the local cache on the server is performing.
     */
    private CloudTieringCachePerformance cachePerformance;

    /*
     * Information regarding files that failed to be tiered
     */
    private CloudTieringFilesNotTiering filesNotTiering;

    /*
     * Status of the volume free space policy
     */
    private CloudTieringVolumeFreeSpacePolicyStatus volumeFreeSpacePolicyStatus;

    /*
     * Status of the date policy
     */
    private CloudTieringDatePolicyStatus datePolicyStatus;

    /*
     * Information regarding the low disk mode state
     */
    private CloudTieringLowDiskMode lowDiskMode;

    /**
     * Creates an instance of ServerEndpointCloudTieringStatus class.
     */
    public ServerEndpointCloudTieringStatus() {
    }

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     * 
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the health property: Cloud tiering health state.
     * 
     * @return the health value.
     */
    public ServerEndpointHealthState health() {
        return this.health;
    }

    /**
     * Get the healthLastUpdatedTimestamp property: The last updated timestamp of health state.
     * 
     * @return the healthLastUpdatedTimestamp value.
     */
    public OffsetDateTime healthLastUpdatedTimestamp() {
        return this.healthLastUpdatedTimestamp;
    }

    /**
     * Get the lastCloudTieringResult property: Last cloud tiering result (HResult).
     * 
     * @return the lastCloudTieringResult value.
     */
    public Integer lastCloudTieringResult() {
        return this.lastCloudTieringResult;
    }

    /**
     * Get the lastSuccessTimestamp property: Last cloud tiering success timestamp.
     * 
     * @return the lastSuccessTimestamp value.
     */
    public OffsetDateTime lastSuccessTimestamp() {
        return this.lastSuccessTimestamp;
    }

    /**
     * Get the spaceSavings property: Information regarding how much local space cloud tiering is saving.
     * 
     * @return the spaceSavings value.
     */
    public CloudTieringSpaceSavings spaceSavings() {
        return this.spaceSavings;
    }

    /**
     * Get the cachePerformance property: Information regarding how well the local cache on the server is performing.
     * 
     * @return the cachePerformance value.
     */
    public CloudTieringCachePerformance cachePerformance() {
        return this.cachePerformance;
    }

    /**
     * Get the filesNotTiering property: Information regarding files that failed to be tiered.
     * 
     * @return the filesNotTiering value.
     */
    public CloudTieringFilesNotTiering filesNotTiering() {
        return this.filesNotTiering;
    }

    /**
     * Get the volumeFreeSpacePolicyStatus property: Status of the volume free space policy.
     * 
     * @return the volumeFreeSpacePolicyStatus value.
     */
    public CloudTieringVolumeFreeSpacePolicyStatus volumeFreeSpacePolicyStatus() {
        return this.volumeFreeSpacePolicyStatus;
    }

    /**
     * Get the datePolicyStatus property: Status of the date policy.
     * 
     * @return the datePolicyStatus value.
     */
    public CloudTieringDatePolicyStatus datePolicyStatus() {
        return this.datePolicyStatus;
    }

    /**
     * Get the lowDiskMode property: Information regarding the low disk mode state.
     * 
     * @return the lowDiskMode value.
     */
    public CloudTieringLowDiskMode lowDiskMode() {
        return this.lowDiskMode;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (spaceSavings() != null) {
            spaceSavings().validate();
        }
        if (cachePerformance() != null) {
            cachePerformance().validate();
        }
        if (filesNotTiering() != null) {
            filesNotTiering().validate();
        }
        if (volumeFreeSpacePolicyStatus() != null) {
            volumeFreeSpacePolicyStatus().validate();
        }
        if (datePolicyStatus() != null) {
            datePolicyStatus().validate();
        }
        if (lowDiskMode() != null) {
            lowDiskMode().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEndpointCloudTieringStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEndpointCloudTieringStatus if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEndpointCloudTieringStatus.
     */
    public static ServerEndpointCloudTieringStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEndpointCloudTieringStatus deserializedServerEndpointCloudTieringStatus
                = new ServerEndpointCloudTieringStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastUpdatedTimestamp".equals(fieldName)) {
                    deserializedServerEndpointCloudTieringStatus.lastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("health".equals(fieldName)) {
                    deserializedServerEndpointCloudTieringStatus.health
                        = ServerEndpointHealthState.fromString(reader.getString());
                } else if ("healthLastUpdatedTimestamp".equals(fieldName)) {
                    deserializedServerEndpointCloudTieringStatus.healthLastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastCloudTieringResult".equals(fieldName)) {
                    deserializedServerEndpointCloudTieringStatus.lastCloudTieringResult
                        = reader.getNullable(JsonReader::getInt);
                } else if ("lastSuccessTimestamp".equals(fieldName)) {
                    deserializedServerEndpointCloudTieringStatus.lastSuccessTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("spaceSavings".equals(fieldName)) {
                    deserializedServerEndpointCloudTieringStatus.spaceSavings
                        = CloudTieringSpaceSavings.fromJson(reader);
                } else if ("cachePerformance".equals(fieldName)) {
                    deserializedServerEndpointCloudTieringStatus.cachePerformance
                        = CloudTieringCachePerformance.fromJson(reader);
                } else if ("filesNotTiering".equals(fieldName)) {
                    deserializedServerEndpointCloudTieringStatus.filesNotTiering
                        = CloudTieringFilesNotTiering.fromJson(reader);
                } else if ("volumeFreeSpacePolicyStatus".equals(fieldName)) {
                    deserializedServerEndpointCloudTieringStatus.volumeFreeSpacePolicyStatus
                        = CloudTieringVolumeFreeSpacePolicyStatus.fromJson(reader);
                } else if ("datePolicyStatus".equals(fieldName)) {
                    deserializedServerEndpointCloudTieringStatus.datePolicyStatus
                        = CloudTieringDatePolicyStatus.fromJson(reader);
                } else if ("lowDiskMode".equals(fieldName)) {
                    deserializedServerEndpointCloudTieringStatus.lowDiskMode = CloudTieringLowDiskMode.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEndpointCloudTieringStatus;
        });
    }
}
