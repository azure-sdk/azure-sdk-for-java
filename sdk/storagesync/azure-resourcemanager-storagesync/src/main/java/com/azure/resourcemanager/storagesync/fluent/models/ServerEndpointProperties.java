// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagesync.models.FeatureStatus;
import com.azure.resourcemanager.storagesync.models.InitialDownloadPolicy;
import com.azure.resourcemanager.storagesync.models.InitialUploadPolicy;
import com.azure.resourcemanager.storagesync.models.LocalCacheMode;
import com.azure.resourcemanager.storagesync.models.ServerEndpointCloudTieringStatus;
import com.azure.resourcemanager.storagesync.models.ServerEndpointProvisioningStatus;
import com.azure.resourcemanager.storagesync.models.ServerEndpointRecallStatus;
import com.azure.resourcemanager.storagesync.models.ServerEndpointSyncStatus;
import java.io.IOException;

/**
 * ServerEndpoint Properties object.
 */
@Fluent
public final class ServerEndpointProperties implements JsonSerializable<ServerEndpointProperties> {
    /*
     * Server Local path.
     */
    private String serverLocalPath;

    /*
     * Cloud Tiering.
     */
    private FeatureStatus cloudTiering;

    /*
     * Level of free space to be maintained by Cloud Tiering if it is enabled.
     */
    private Integer volumeFreeSpacePercent;

    /*
     * Tier files older than days.
     */
    private Integer tierFilesOlderThanDays;

    /*
     * Friendly Name
     */
    private String friendlyName;

    /*
     * Server Resource Id.
     */
    private String serverResourceId;

    /*
     * ServerEndpoint Provisioning State
     */
    private String provisioningState;

    /*
     * ServerEndpoint lastWorkflowId
     */
    private String lastWorkflowId;

    /*
     * Resource Last Operation Name
     */
    private String lastOperationName;

    /*
     * Server Endpoint sync status
     */
    private ServerEndpointSyncStatus syncStatus;

    /*
     * Offline data transfer
     */
    private FeatureStatus offlineDataTransfer;

    /*
     * Offline data transfer storage account resource ID
     */
    private String offlineDataTransferStorageAccountResourceId;

    /*
     * Offline data transfer storage account tenant ID
     */
    private String offlineDataTransferStorageAccountTenantId;

    /*
     * Offline data transfer share name
     */
    private String offlineDataTransferShareName;

    /*
     * Cloud tiering status. Only populated if cloud tiering is enabled.
     */
    private ServerEndpointCloudTieringStatus cloudTieringStatus;

    /*
     * Recall status. Only populated if cloud tiering is enabled.
     */
    private ServerEndpointRecallStatus recallStatus;

    /*
     * Policy for how namespace and files are recalled during FastDr.
     */
    private InitialDownloadPolicy initialDownloadPolicy;

    /*
     * Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before
     * local access.
     */
    private LocalCacheMode localCacheMode;

    /*
     * Policy for how the initial upload sync session is performed.
     */
    private InitialUploadPolicy initialUploadPolicy;

    /*
     * Server name
     */
    private String serverName;

    /*
     * Server Endpoint provisioning status
     */
    private ServerEndpointProvisioningStatus serverEndpointProvisioningStatus;

    /**
     * Creates an instance of ServerEndpointProperties class.
     */
    public ServerEndpointProperties() {
    }

    /**
     * Get the serverLocalPath property: Server Local path.
     * 
     * @return the serverLocalPath value.
     */
    public String serverLocalPath() {
        return this.serverLocalPath;
    }

    /**
     * Set the serverLocalPath property: Server Local path.
     * 
     * @param serverLocalPath the serverLocalPath value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties withServerLocalPath(String serverLocalPath) {
        this.serverLocalPath = serverLocalPath;
        return this;
    }

    /**
     * Get the cloudTiering property: Cloud Tiering.
     * 
     * @return the cloudTiering value.
     */
    public FeatureStatus cloudTiering() {
        return this.cloudTiering;
    }

    /**
     * Set the cloudTiering property: Cloud Tiering.
     * 
     * @param cloudTiering the cloudTiering value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties withCloudTiering(FeatureStatus cloudTiering) {
        this.cloudTiering = cloudTiering;
        return this;
    }

    /**
     * Get the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     * 
     * @return the volumeFreeSpacePercent value.
     */
    public Integer volumeFreeSpacePercent() {
        return this.volumeFreeSpacePercent;
    }

    /**
     * Set the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     * 
     * @param volumeFreeSpacePercent the volumeFreeSpacePercent value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties withVolumeFreeSpacePercent(Integer volumeFreeSpacePercent) {
        this.volumeFreeSpacePercent = volumeFreeSpacePercent;
        return this;
    }

    /**
     * Get the tierFilesOlderThanDays property: Tier files older than days.
     * 
     * @return the tierFilesOlderThanDays value.
     */
    public Integer tierFilesOlderThanDays() {
        return this.tierFilesOlderThanDays;
    }

    /**
     * Set the tierFilesOlderThanDays property: Tier files older than days.
     * 
     * @param tierFilesOlderThanDays the tierFilesOlderThanDays value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties withTierFilesOlderThanDays(Integer tierFilesOlderThanDays) {
        this.tierFilesOlderThanDays = tierFilesOlderThanDays;
        return this;
    }

    /**
     * Get the friendlyName property: Friendly Name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly Name.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the serverResourceId property: Server Resource Id.
     * 
     * @return the serverResourceId value.
     */
    public String serverResourceId() {
        return this.serverResourceId;
    }

    /**
     * Set the serverResourceId property: Server Resource Id.
     * 
     * @param serverResourceId the serverResourceId value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties withServerResourceId(String serverResourceId) {
        this.serverResourceId = serverResourceId;
        return this;
    }

    /**
     * Get the provisioningState property: ServerEndpoint Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the lastWorkflowId property: ServerEndpoint lastWorkflowId.
     * 
     * @return the lastWorkflowId value.
     */
    public String lastWorkflowId() {
        return this.lastWorkflowId;
    }

    /**
     * Get the lastOperationName property: Resource Last Operation Name.
     * 
     * @return the lastOperationName value.
     */
    public String lastOperationName() {
        return this.lastOperationName;
    }

    /**
     * Get the syncStatus property: Server Endpoint sync status.
     * 
     * @return the syncStatus value.
     */
    public ServerEndpointSyncStatus syncStatus() {
        return this.syncStatus;
    }

    /**
     * Get the offlineDataTransfer property: Offline data transfer.
     * 
     * @return the offlineDataTransfer value.
     */
    public FeatureStatus offlineDataTransfer() {
        return this.offlineDataTransfer;
    }

    /**
     * Set the offlineDataTransfer property: Offline data transfer.
     * 
     * @param offlineDataTransfer the offlineDataTransfer value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties withOfflineDataTransfer(FeatureStatus offlineDataTransfer) {
        this.offlineDataTransfer = offlineDataTransfer;
        return this;
    }

    /**
     * Get the offlineDataTransferStorageAccountResourceId property: Offline data transfer storage account resource ID.
     * 
     * @return the offlineDataTransferStorageAccountResourceId value.
     */
    public String offlineDataTransferStorageAccountResourceId() {
        return this.offlineDataTransferStorageAccountResourceId;
    }

    /**
     * Get the offlineDataTransferStorageAccountTenantId property: Offline data transfer storage account tenant ID.
     * 
     * @return the offlineDataTransferStorageAccountTenantId value.
     */
    public String offlineDataTransferStorageAccountTenantId() {
        return this.offlineDataTransferStorageAccountTenantId;
    }

    /**
     * Get the offlineDataTransferShareName property: Offline data transfer share name.
     * 
     * @return the offlineDataTransferShareName value.
     */
    public String offlineDataTransferShareName() {
        return this.offlineDataTransferShareName;
    }

    /**
     * Set the offlineDataTransferShareName property: Offline data transfer share name.
     * 
     * @param offlineDataTransferShareName the offlineDataTransferShareName value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties withOfflineDataTransferShareName(String offlineDataTransferShareName) {
        this.offlineDataTransferShareName = offlineDataTransferShareName;
        return this;
    }

    /**
     * Get the cloudTieringStatus property: Cloud tiering status. Only populated if cloud tiering is enabled.
     * 
     * @return the cloudTieringStatus value.
     */
    public ServerEndpointCloudTieringStatus cloudTieringStatus() {
        return this.cloudTieringStatus;
    }

    /**
     * Get the recallStatus property: Recall status. Only populated if cloud tiering is enabled.
     * 
     * @return the recallStatus value.
     */
    public ServerEndpointRecallStatus recallStatus() {
        return this.recallStatus;
    }

    /**
     * Get the initialDownloadPolicy property: Policy for how namespace and files are recalled during FastDr.
     * 
     * @return the initialDownloadPolicy value.
     */
    public InitialDownloadPolicy initialDownloadPolicy() {
        return this.initialDownloadPolicy;
    }

    /**
     * Set the initialDownloadPolicy property: Policy for how namespace and files are recalled during FastDr.
     * 
     * @param initialDownloadPolicy the initialDownloadPolicy value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties withInitialDownloadPolicy(InitialDownloadPolicy initialDownloadPolicy) {
        this.initialDownloadPolicy = initialDownloadPolicy;
        return this;
    }

    /**
     * Get the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     * 
     * @return the localCacheMode value.
     */
    public LocalCacheMode localCacheMode() {
        return this.localCacheMode;
    }

    /**
     * Set the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     * 
     * @param localCacheMode the localCacheMode value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties withLocalCacheMode(LocalCacheMode localCacheMode) {
        this.localCacheMode = localCacheMode;
        return this;
    }

    /**
     * Get the initialUploadPolicy property: Policy for how the initial upload sync session is performed.
     * 
     * @return the initialUploadPolicy value.
     */
    public InitialUploadPolicy initialUploadPolicy() {
        return this.initialUploadPolicy;
    }

    /**
     * Set the initialUploadPolicy property: Policy for how the initial upload sync session is performed.
     * 
     * @param initialUploadPolicy the initialUploadPolicy value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties withInitialUploadPolicy(InitialUploadPolicy initialUploadPolicy) {
        this.initialUploadPolicy = initialUploadPolicy;
        return this;
    }

    /**
     * Get the serverName property: Server name.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Get the serverEndpointProvisioningStatus property: Server Endpoint provisioning status.
     * 
     * @return the serverEndpointProvisioningStatus value.
     */
    public ServerEndpointProvisioningStatus serverEndpointProvisioningStatus() {
        return this.serverEndpointProvisioningStatus;
    }

    /**
     * Set the serverEndpointProvisioningStatus property: Server Endpoint provisioning status.
     * 
     * @param serverEndpointProvisioningStatus the serverEndpointProvisioningStatus value to set.
     * @return the ServerEndpointProperties object itself.
     */
    public ServerEndpointProperties
        withServerEndpointProvisioningStatus(ServerEndpointProvisioningStatus serverEndpointProvisioningStatus) {
        this.serverEndpointProvisioningStatus = serverEndpointProvisioningStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (syncStatus() != null) {
            syncStatus().validate();
        }
        if (cloudTieringStatus() != null) {
            cloudTieringStatus().validate();
        }
        if (recallStatus() != null) {
            recallStatus().validate();
        }
        if (serverEndpointProvisioningStatus() != null) {
            serverEndpointProvisioningStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverLocalPath", this.serverLocalPath);
        jsonWriter.writeStringField("cloudTiering", this.cloudTiering == null ? null : this.cloudTiering.toString());
        jsonWriter.writeNumberField("volumeFreeSpacePercent", this.volumeFreeSpacePercent);
        jsonWriter.writeNumberField("tierFilesOlderThanDays", this.tierFilesOlderThanDays);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("serverResourceId", this.serverResourceId);
        jsonWriter.writeStringField("offlineDataTransfer",
            this.offlineDataTransfer == null ? null : this.offlineDataTransfer.toString());
        jsonWriter.writeStringField("offlineDataTransferShareName", this.offlineDataTransferShareName);
        jsonWriter.writeStringField("initialDownloadPolicy",
            this.initialDownloadPolicy == null ? null : this.initialDownloadPolicy.toString());
        jsonWriter.writeStringField("localCacheMode",
            this.localCacheMode == null ? null : this.localCacheMode.toString());
        jsonWriter.writeStringField("initialUploadPolicy",
            this.initialUploadPolicy == null ? null : this.initialUploadPolicy.toString());
        jsonWriter.writeJsonField("serverEndpointProvisioningStatus", this.serverEndpointProvisioningStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEndpointProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEndpointProperties.
     */
    public static ServerEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEndpointProperties deserializedServerEndpointProperties = new ServerEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverLocalPath".equals(fieldName)) {
                    deserializedServerEndpointProperties.serverLocalPath = reader.getString();
                } else if ("cloudTiering".equals(fieldName)) {
                    deserializedServerEndpointProperties.cloudTiering = FeatureStatus.fromString(reader.getString());
                } else if ("volumeFreeSpacePercent".equals(fieldName)) {
                    deserializedServerEndpointProperties.volumeFreeSpacePercent
                        = reader.getNullable(JsonReader::getInt);
                } else if ("tierFilesOlderThanDays".equals(fieldName)) {
                    deserializedServerEndpointProperties.tierFilesOlderThanDays
                        = reader.getNullable(JsonReader::getInt);
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedServerEndpointProperties.friendlyName = reader.getString();
                } else if ("serverResourceId".equals(fieldName)) {
                    deserializedServerEndpointProperties.serverResourceId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedServerEndpointProperties.provisioningState = reader.getString();
                } else if ("lastWorkflowId".equals(fieldName)) {
                    deserializedServerEndpointProperties.lastWorkflowId = reader.getString();
                } else if ("lastOperationName".equals(fieldName)) {
                    deserializedServerEndpointProperties.lastOperationName = reader.getString();
                } else if ("syncStatus".equals(fieldName)) {
                    deserializedServerEndpointProperties.syncStatus = ServerEndpointSyncStatus.fromJson(reader);
                } else if ("offlineDataTransfer".equals(fieldName)) {
                    deserializedServerEndpointProperties.offlineDataTransfer
                        = FeatureStatus.fromString(reader.getString());
                } else if ("offlineDataTransferStorageAccountResourceId".equals(fieldName)) {
                    deserializedServerEndpointProperties.offlineDataTransferStorageAccountResourceId
                        = reader.getString();
                } else if ("offlineDataTransferStorageAccountTenantId".equals(fieldName)) {
                    deserializedServerEndpointProperties.offlineDataTransferStorageAccountTenantId = reader.getString();
                } else if ("offlineDataTransferShareName".equals(fieldName)) {
                    deserializedServerEndpointProperties.offlineDataTransferShareName = reader.getString();
                } else if ("cloudTieringStatus".equals(fieldName)) {
                    deserializedServerEndpointProperties.cloudTieringStatus
                        = ServerEndpointCloudTieringStatus.fromJson(reader);
                } else if ("recallStatus".equals(fieldName)) {
                    deserializedServerEndpointProperties.recallStatus = ServerEndpointRecallStatus.fromJson(reader);
                } else if ("initialDownloadPolicy".equals(fieldName)) {
                    deserializedServerEndpointProperties.initialDownloadPolicy
                        = InitialDownloadPolicy.fromString(reader.getString());
                } else if ("localCacheMode".equals(fieldName)) {
                    deserializedServerEndpointProperties.localCacheMode = LocalCacheMode.fromString(reader.getString());
                } else if ("initialUploadPolicy".equals(fieldName)) {
                    deserializedServerEndpointProperties.initialUploadPolicy
                        = InitialUploadPolicy.fromString(reader.getString());
                } else if ("serverName".equals(fieldName)) {
                    deserializedServerEndpointProperties.serverName = reader.getString();
                } else if ("serverEndpointProvisioningStatus".equals(fieldName)) {
                    deserializedServerEndpointProperties.serverEndpointProvisioningStatus
                        = ServerEndpointProvisioningStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEndpointProperties;
        });
    }
}
