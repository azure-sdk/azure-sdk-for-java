// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Server endpoint cloud tiering status object.
 */
@Immutable
public final class CloudTieringCachePerformance implements JsonSerializable<CloudTieringCachePerformance> {
    /*
     * Last updated timestamp
     */
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Count of bytes that were served from the local server
     */
    private Long cacheHitBytes;

    /*
     * Count of bytes that were served from the cloud
     */
    private Long cacheMissBytes;

    /*
     * Percentage of total bytes (hit + miss) that were served from the local server
     */
    private Integer cacheHitBytesPercent;

    /**
     * Creates an instance of CloudTieringCachePerformance class.
     */
    public CloudTieringCachePerformance() {
    }

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     * 
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the cacheHitBytes property: Count of bytes that were served from the local server.
     * 
     * @return the cacheHitBytes value.
     */
    public Long cacheHitBytes() {
        return this.cacheHitBytes;
    }

    /**
     * Get the cacheMissBytes property: Count of bytes that were served from the cloud.
     * 
     * @return the cacheMissBytes value.
     */
    public Long cacheMissBytes() {
        return this.cacheMissBytes;
    }

    /**
     * Get the cacheHitBytesPercent property: Percentage of total bytes (hit + miss) that were served from the local
     * server.
     * 
     * @return the cacheHitBytesPercent value.
     */
    public Integer cacheHitBytesPercent() {
        return this.cacheHitBytesPercent;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudTieringCachePerformance from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudTieringCachePerformance if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudTieringCachePerformance.
     */
    public static CloudTieringCachePerformance fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudTieringCachePerformance deserializedCloudTieringCachePerformance = new CloudTieringCachePerformance();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastUpdatedTimestamp".equals(fieldName)) {
                    deserializedCloudTieringCachePerformance.lastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("cacheHitBytes".equals(fieldName)) {
                    deserializedCloudTieringCachePerformance.cacheHitBytes = reader.getNullable(JsonReader::getLong);
                } else if ("cacheMissBytes".equals(fieldName)) {
                    deserializedCloudTieringCachePerformance.cacheMissBytes = reader.getNullable(JsonReader::getLong);
                } else if ("cacheHitBytesPercent".equals(fieldName)) {
                    deserializedCloudTieringCachePerformance.cacheHitBytesPercent
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudTieringCachePerformance;
        });
    }
}
