// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Operation Display Resource object.
 */
@Fluent
public final class OperationResourceMetricSpecification
    implements JsonSerializable<OperationResourceMetricSpecification> {
    /*
     * Name of the metric.
     */
    private String name;

    /*
     * Display name for the metric.
     */
    private String displayName;

    /*
     * Display description for the metric.
     */
    private String displayDescription;

    /*
     * Unit for the metric.
     */
    private String unit;

    /*
     * Aggregation type for the metric.
     */
    private String aggregationType;

    /*
     * Supported aggregation types for the metric.
     */
    private List<String> supportedAggregationTypes;

    /*
     * Fill gaps in the metric with zero.
     */
    private Boolean fillGapWithZero;

    /*
     * Lock Aggregation type for the metric.
     */
    private String lockAggregationType;

    /*
     * Dimensions for the metric specification.
     */
    private List<OperationResourceMetricSpecificationDimension> dimensions;

    /**
     * Creates an instance of OperationResourceMetricSpecification class.
     */
    public OperationResourceMetricSpecification() {
    }

    /**
     * Get the name property: Name of the metric.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the metric.
     * 
     * @param name the name value to set.
     * @return the OperationResourceMetricSpecification object itself.
     */
    public OperationResourceMetricSpecification withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the displayName property: Display name for the metric.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name for the metric.
     * 
     * @param displayName the displayName value to set.
     * @return the OperationResourceMetricSpecification object itself.
     */
    public OperationResourceMetricSpecification withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the displayDescription property: Display description for the metric.
     * 
     * @return the displayDescription value.
     */
    public String displayDescription() {
        return this.displayDescription;
    }

    /**
     * Set the displayDescription property: Display description for the metric.
     * 
     * @param displayDescription the displayDescription value to set.
     * @return the OperationResourceMetricSpecification object itself.
     */
    public OperationResourceMetricSpecification withDisplayDescription(String displayDescription) {
        this.displayDescription = displayDescription;
        return this;
    }

    /**
     * Get the unit property: Unit for the metric.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit property: Unit for the metric.
     * 
     * @param unit the unit value to set.
     * @return the OperationResourceMetricSpecification object itself.
     */
    public OperationResourceMetricSpecification withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the aggregationType property: Aggregation type for the metric.
     * 
     * @return the aggregationType value.
     */
    public String aggregationType() {
        return this.aggregationType;
    }

    /**
     * Set the aggregationType property: Aggregation type for the metric.
     * 
     * @param aggregationType the aggregationType value to set.
     * @return the OperationResourceMetricSpecification object itself.
     */
    public OperationResourceMetricSpecification withAggregationType(String aggregationType) {
        this.aggregationType = aggregationType;
        return this;
    }

    /**
     * Get the supportedAggregationTypes property: Supported aggregation types for the metric.
     * 
     * @return the supportedAggregationTypes value.
     */
    public List<String> supportedAggregationTypes() {
        return this.supportedAggregationTypes;
    }

    /**
     * Set the supportedAggregationTypes property: Supported aggregation types for the metric.
     * 
     * @param supportedAggregationTypes the supportedAggregationTypes value to set.
     * @return the OperationResourceMetricSpecification object itself.
     */
    public OperationResourceMetricSpecification withSupportedAggregationTypes(List<String> supportedAggregationTypes) {
        this.supportedAggregationTypes = supportedAggregationTypes;
        return this;
    }

    /**
     * Get the fillGapWithZero property: Fill gaps in the metric with zero.
     * 
     * @return the fillGapWithZero value.
     */
    public Boolean fillGapWithZero() {
        return this.fillGapWithZero;
    }

    /**
     * Set the fillGapWithZero property: Fill gaps in the metric with zero.
     * 
     * @param fillGapWithZero the fillGapWithZero value to set.
     * @return the OperationResourceMetricSpecification object itself.
     */
    public OperationResourceMetricSpecification withFillGapWithZero(Boolean fillGapWithZero) {
        this.fillGapWithZero = fillGapWithZero;
        return this;
    }

    /**
     * Get the lockAggregationType property: Lock Aggregation type for the metric.
     * 
     * @return the lockAggregationType value.
     */
    public String lockAggregationType() {
        return this.lockAggregationType;
    }

    /**
     * Set the lockAggregationType property: Lock Aggregation type for the metric.
     * 
     * @param lockAggregationType the lockAggregationType value to set.
     * @return the OperationResourceMetricSpecification object itself.
     */
    public OperationResourceMetricSpecification withLockAggregationType(String lockAggregationType) {
        this.lockAggregationType = lockAggregationType;
        return this;
    }

    /**
     * Get the dimensions property: Dimensions for the metric specification.
     * 
     * @return the dimensions value.
     */
    public List<OperationResourceMetricSpecificationDimension> dimensions() {
        return this.dimensions;
    }

    /**
     * Set the dimensions property: Dimensions for the metric specification.
     * 
     * @param dimensions the dimensions value to set.
     * @return the OperationResourceMetricSpecification object itself.
     */
    public OperationResourceMetricSpecification
        withDimensions(List<OperationResourceMetricSpecificationDimension> dimensions) {
        this.dimensions = dimensions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dimensions() != null) {
            dimensions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("displayDescription", this.displayDescription);
        jsonWriter.writeStringField("unit", this.unit);
        jsonWriter.writeStringField("aggregationType", this.aggregationType);
        jsonWriter.writeArrayField("supportedAggregationTypes", this.supportedAggregationTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("fillGapWithZero", this.fillGapWithZero);
        jsonWriter.writeStringField("lockAggregationType", this.lockAggregationType);
        jsonWriter.writeArrayField("dimensions", this.dimensions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationResourceMetricSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationResourceMetricSpecification if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperationResourceMetricSpecification.
     */
    public static OperationResourceMetricSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationResourceMetricSpecification deserializedOperationResourceMetricSpecification
                = new OperationResourceMetricSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedOperationResourceMetricSpecification.name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedOperationResourceMetricSpecification.displayName = reader.getString();
                } else if ("displayDescription".equals(fieldName)) {
                    deserializedOperationResourceMetricSpecification.displayDescription = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedOperationResourceMetricSpecification.unit = reader.getString();
                } else if ("aggregationType".equals(fieldName)) {
                    deserializedOperationResourceMetricSpecification.aggregationType = reader.getString();
                } else if ("supportedAggregationTypes".equals(fieldName)) {
                    List<String> supportedAggregationTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedOperationResourceMetricSpecification.supportedAggregationTypes
                        = supportedAggregationTypes;
                } else if ("fillGapWithZero".equals(fieldName)) {
                    deserializedOperationResourceMetricSpecification.fillGapWithZero
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("lockAggregationType".equals(fieldName)) {
                    deserializedOperationResourceMetricSpecification.lockAggregationType = reader.getString();
                } else if ("dimensions".equals(fieldName)) {
                    List<OperationResourceMetricSpecificationDimension> dimensions
                        = reader.readArray(reader1 -> OperationResourceMetricSpecificationDimension.fromJson(reader1));
                    deserializedOperationResourceMetricSpecification.dimensions = dimensions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationResourceMetricSpecification;
        });
    }
}
