// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * RegisteredServer Create Properties object.
 */
@Fluent
public final class RegisteredServerCreateParametersProperties
    implements JsonSerializable<RegisteredServerCreateParametersProperties> {
    /*
     * Registered Server Certificate
     */
    private String serverCertificate;

    /*
     * Registered Server Agent Version
     */
    private String agentVersion;

    /*
     * Registered Server OS Version
     */
    private String serverOSVersion;

    /*
     * Registered Server last heart beat
     */
    private String lastHeartBeat;

    /*
     * Registered Server serverRole
     */
    private String serverRole;

    /*
     * Registered Server clusterId
     */
    private String clusterId;

    /*
     * Registered Server clusterName
     */
    private String clusterName;

    /*
     * Registered Server serverId
     */
    private String serverId;

    /*
     * Friendly Name
     */
    private String friendlyName;

    /*
     * Server ServicePrincipal Id
     */
    private String applicationId;

    /*
     * Apply server with newly discovered ApplicationId if available.
     */
    private Boolean identity;

    /**
     * Creates an instance of RegisteredServerCreateParametersProperties class.
     */
    public RegisteredServerCreateParametersProperties() {
    }

    /**
     * Get the serverCertificate property: Registered Server Certificate.
     * 
     * @return the serverCertificate value.
     */
    public String serverCertificate() {
        return this.serverCertificate;
    }

    /**
     * Set the serverCertificate property: Registered Server Certificate.
     * 
     * @param serverCertificate the serverCertificate value to set.
     * @return the RegisteredServerCreateParametersProperties object itself.
     */
    public RegisteredServerCreateParametersProperties withServerCertificate(String serverCertificate) {
        this.serverCertificate = serverCertificate;
        return this;
    }

    /**
     * Get the agentVersion property: Registered Server Agent Version.
     * 
     * @return the agentVersion value.
     */
    public String agentVersion() {
        return this.agentVersion;
    }

    /**
     * Set the agentVersion property: Registered Server Agent Version.
     * 
     * @param agentVersion the agentVersion value to set.
     * @return the RegisteredServerCreateParametersProperties object itself.
     */
    public RegisteredServerCreateParametersProperties withAgentVersion(String agentVersion) {
        this.agentVersion = agentVersion;
        return this;
    }

    /**
     * Get the serverOSVersion property: Registered Server OS Version.
     * 
     * @return the serverOSVersion value.
     */
    public String serverOSVersion() {
        return this.serverOSVersion;
    }

    /**
     * Set the serverOSVersion property: Registered Server OS Version.
     * 
     * @param serverOSVersion the serverOSVersion value to set.
     * @return the RegisteredServerCreateParametersProperties object itself.
     */
    public RegisteredServerCreateParametersProperties withServerOSVersion(String serverOSVersion) {
        this.serverOSVersion = serverOSVersion;
        return this;
    }

    /**
     * Get the lastHeartBeat property: Registered Server last heart beat.
     * 
     * @return the lastHeartBeat value.
     */
    public String lastHeartBeat() {
        return this.lastHeartBeat;
    }

    /**
     * Set the lastHeartBeat property: Registered Server last heart beat.
     * 
     * @param lastHeartBeat the lastHeartBeat value to set.
     * @return the RegisteredServerCreateParametersProperties object itself.
     */
    public RegisteredServerCreateParametersProperties withLastHeartBeat(String lastHeartBeat) {
        this.lastHeartBeat = lastHeartBeat;
        return this;
    }

    /**
     * Get the serverRole property: Registered Server serverRole.
     * 
     * @return the serverRole value.
     */
    public String serverRole() {
        return this.serverRole;
    }

    /**
     * Set the serverRole property: Registered Server serverRole.
     * 
     * @param serverRole the serverRole value to set.
     * @return the RegisteredServerCreateParametersProperties object itself.
     */
    public RegisteredServerCreateParametersProperties withServerRole(String serverRole) {
        this.serverRole = serverRole;
        return this;
    }

    /**
     * Get the clusterId property: Registered Server clusterId.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Set the clusterId property: Registered Server clusterId.
     * 
     * @param clusterId the clusterId value to set.
     * @return the RegisteredServerCreateParametersProperties object itself.
     */
    public RegisteredServerCreateParametersProperties withClusterId(String clusterId) {
        this.clusterId = clusterId;
        return this;
    }

    /**
     * Get the clusterName property: Registered Server clusterName.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * Set the clusterName property: Registered Server clusterName.
     * 
     * @param clusterName the clusterName value to set.
     * @return the RegisteredServerCreateParametersProperties object itself.
     */
    public RegisteredServerCreateParametersProperties withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }

    /**
     * Get the serverId property: Registered Server serverId.
     * 
     * @return the serverId value.
     */
    public String serverId() {
        return this.serverId;
    }

    /**
     * Set the serverId property: Registered Server serverId.
     * 
     * @param serverId the serverId value to set.
     * @return the RegisteredServerCreateParametersProperties object itself.
     */
    public RegisteredServerCreateParametersProperties withServerId(String serverId) {
        this.serverId = serverId;
        return this;
    }

    /**
     * Get the friendlyName property: Friendly Name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly Name.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the RegisteredServerCreateParametersProperties object itself.
     */
    public RegisteredServerCreateParametersProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the applicationId property: Server ServicePrincipal Id.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * Set the applicationId property: Server ServicePrincipal Id.
     * 
     * @param applicationId the applicationId value to set.
     * @return the RegisteredServerCreateParametersProperties object itself.
     */
    public RegisteredServerCreateParametersProperties withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Get the identity property: Apply server with newly discovered ApplicationId if available.
     * 
     * @return the identity value.
     */
    public Boolean identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Apply server with newly discovered ApplicationId if available.
     * 
     * @param identity the identity value to set.
     * @return the RegisteredServerCreateParametersProperties object itself.
     */
    public RegisteredServerCreateParametersProperties withIdentity(Boolean identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverCertificate", this.serverCertificate);
        jsonWriter.writeStringField("agentVersion", this.agentVersion);
        jsonWriter.writeStringField("serverOSVersion", this.serverOSVersion);
        jsonWriter.writeStringField("lastHeartBeat", this.lastHeartBeat);
        jsonWriter.writeStringField("serverRole", this.serverRole);
        jsonWriter.writeStringField("clusterId", this.clusterId);
        jsonWriter.writeStringField("clusterName", this.clusterName);
        jsonWriter.writeStringField("serverId", this.serverId);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeStringField("applicationId", this.applicationId);
        jsonWriter.writeBooleanField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegisteredServerCreateParametersProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegisteredServerCreateParametersProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegisteredServerCreateParametersProperties.
     */
    public static RegisteredServerCreateParametersProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegisteredServerCreateParametersProperties deserializedRegisteredServerCreateParametersProperties
                = new RegisteredServerCreateParametersProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverCertificate".equals(fieldName)) {
                    deserializedRegisteredServerCreateParametersProperties.serverCertificate = reader.getString();
                } else if ("agentVersion".equals(fieldName)) {
                    deserializedRegisteredServerCreateParametersProperties.agentVersion = reader.getString();
                } else if ("serverOSVersion".equals(fieldName)) {
                    deserializedRegisteredServerCreateParametersProperties.serverOSVersion = reader.getString();
                } else if ("lastHeartBeat".equals(fieldName)) {
                    deserializedRegisteredServerCreateParametersProperties.lastHeartBeat = reader.getString();
                } else if ("serverRole".equals(fieldName)) {
                    deserializedRegisteredServerCreateParametersProperties.serverRole = reader.getString();
                } else if ("clusterId".equals(fieldName)) {
                    deserializedRegisteredServerCreateParametersProperties.clusterId = reader.getString();
                } else if ("clusterName".equals(fieldName)) {
                    deserializedRegisteredServerCreateParametersProperties.clusterName = reader.getString();
                } else if ("serverId".equals(fieldName)) {
                    deserializedRegisteredServerCreateParametersProperties.serverId = reader.getString();
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedRegisteredServerCreateParametersProperties.friendlyName = reader.getString();
                } else if ("applicationId".equals(fieldName)) {
                    deserializedRegisteredServerCreateParametersProperties.applicationId = reader.getString();
                } else if ("identity".equals(fieldName)) {
                    deserializedRegisteredServerCreateParametersProperties.identity
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegisteredServerCreateParametersProperties;
        });
    }
}
