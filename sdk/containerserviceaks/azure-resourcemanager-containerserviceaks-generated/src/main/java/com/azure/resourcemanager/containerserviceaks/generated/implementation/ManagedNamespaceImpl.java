// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerserviceaks.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerserviceaks.generated.fluent.models.ManagedNamespaceInner;
import com.azure.resourcemanager.containerserviceaks.generated.models.CredentialResults;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedNamespace;
import com.azure.resourcemanager.containerserviceaks.generated.models.NamespaceProperties;
import com.azure.resourcemanager.containerserviceaks.generated.models.TagsObject;
import java.util.Collections;
import java.util.Map;

public final class ManagedNamespaceImpl
    implements ManagedNamespace, ManagedNamespace.Definition, ManagedNamespace.Update {
    private ManagedNamespaceInner innerObject;

    private final com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public String location() {
        return this.innerModel().location();
    }

    public NamespaceProperties properties() {
        return this.innerModel().properties();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ManagedNamespaceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String resourceName;

    private String managedNamespaceName;

    private TagsObject updateParameters;

    public ManagedNamespaceImpl withExistingManagedCluster(String resourceGroupName, String resourceName) {
        this.resourceGroupName = resourceGroupName;
        this.resourceName = resourceName;
        return this;
    }

    public ManagedNamespace create() {
        this.innerObject = serviceManager.serviceClient()
            .getManagedNamespaces()
            .createOrUpdate(resourceGroupName, resourceName, managedNamespaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public ManagedNamespace create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getManagedNamespaces()
            .createOrUpdate(resourceGroupName, resourceName, managedNamespaceName, this.innerModel(), context);
        return this;
    }

    ManagedNamespaceImpl(String name,
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager serviceManager) {
        this.innerObject = new ManagedNamespaceInner();
        this.serviceManager = serviceManager;
        this.managedNamespaceName = name;
    }

    public ManagedNamespaceImpl update() {
        this.updateParameters = new TagsObject();
        return this;
    }

    public ManagedNamespace apply() {
        this.innerObject = serviceManager.serviceClient()
            .getManagedNamespaces()
            .updateWithResponse(resourceGroupName, resourceName, managedNamespaceName, updateParameters, Context.NONE)
            .getValue();
        return this;
    }

    public ManagedNamespace apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getManagedNamespaces()
            .updateWithResponse(resourceGroupName, resourceName, managedNamespaceName, updateParameters, context)
            .getValue();
        return this;
    }

    ManagedNamespaceImpl(ManagedNamespaceInner innerObject,
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.resourceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "managedClusters");
        this.managedNamespaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "managedNamespaces");
    }

    public ManagedNamespace refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getManagedNamespaces()
            .getWithResponse(resourceGroupName, resourceName, managedNamespaceName, Context.NONE)
            .getValue();
        return this;
    }

    public ManagedNamespace refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getManagedNamespaces()
            .getWithResponse(resourceGroupName, resourceName, managedNamespaceName, context)
            .getValue();
        return this;
    }

    public Response<CredentialResults> listCredentialWithResponse(Context context) {
        return serviceManager.managedNamespaces()
            .listCredentialWithResponse(resourceGroupName, resourceName, managedNamespaceName, context);
    }

    public CredentialResults listCredential() {
        return serviceManager.managedNamespaces().listCredential(resourceGroupName, resourceName, managedNamespaceName);
    }

    public ManagedNamespaceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ManagedNamespaceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ManagedNamespaceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public ManagedNamespaceImpl withProperties(NamespaceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
