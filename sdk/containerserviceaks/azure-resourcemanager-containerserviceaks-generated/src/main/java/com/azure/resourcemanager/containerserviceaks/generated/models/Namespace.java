// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerserviceaks.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerserviceaks.generated.fluent.models.NamespaceInner;
import java.util.Map;

/**
 * An immutable client-side representation of Namespace.
 */
public interface Namespace {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the systemData property: The system metadata relating to this resource.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the tags property: The tags to be persisted on the managed cluster namespace.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the etag property: Unique read-only string used to implement optimistic concurrency. The eTag value will
     * change when the resource is updated. Specify an if-match or if-none-match header with the eTag value for a
     * subsequent request to enable optimistic concurrency per the normal etag convention.
     * 
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the location property: The location of the namespace.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the properties property: Properties of a namespace.
     * 
     * @return the properties value.
     */
    NamespaceProperties properties();

    /**
     * Gets the name property: The name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: Resource type.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.containerserviceaks.generated.fluent.models.NamespaceInner object.
     * 
     * @return the inner object.
     */
    NamespaceInner innerModel();

    /**
     * The entirety of the Namespace definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The Namespace definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the Namespace definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the Namespace definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, resourceName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param resourceName The name of the managed cluster resource.
             * @return the next definition stage.
             */
            WithCreate withExistingManagedCluster(String resourceGroupName, String resourceName);
        }

        /**
         * The stage of the Namespace definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithLocation, DefinitionStages.WithTags, DefinitionStages.WithProperties {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            Namespace create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Namespace create(Context context);
        }

        /**
         * The stage of the Namespace definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The location of the namespace.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The location of the namespace.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }

        /**
         * The stage of the Namespace definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: The tags to be persisted on the managed cluster namespace..
             * 
             * @param tags The tags to be persisted on the managed cluster namespace.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the Namespace definition allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: Properties of a namespace..
             * 
             * @param properties Properties of a namespace.
             * @return the next definition stage.
             */
            WithCreate withProperties(NamespaceProperties properties);
        }
    }

    /**
     * Begins update for the Namespace resource.
     * 
     * @return the stage of resource update.
     */
    Namespace.Update update();

    /**
     * The template for Namespace update.
     */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        Namespace apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Namespace apply(Context context);
    }

    /**
     * The Namespace update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the Namespace update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    Namespace refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Namespace refresh(Context context);

    /**
     * Lists the credentials of a namespace.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list credential result response along with {@link Response}.
     */
    Response<CredentialResults> listCredentialWithResponse(Context context);

    /**
     * Lists the credentials of a namespace.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list credential result response.
     */
    CredentialResults listCredential();
}
