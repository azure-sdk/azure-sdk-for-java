// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerserviceaks.generated.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerserviceaks.generated.fluent.models.LoadBalancerInner;

/**
 * An immutable client-side representation of LoadBalancer.
 */
public interface LoadBalancer {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the primaryAgentPoolName property: Required field. A string value that must specify the ID of an existing
     * agent pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have at
     * least one node and minCount&gt;=1 for autoscaling operations. An agent pool can only be the primary pool for a
     * single load balancer.
     * 
     * @return the primaryAgentPoolName value.
     */
    String primaryAgentPoolName();

    /**
     * Gets the allowServicePlacement property: Whether to automatically place services on the load balancer. If not
     * supplied, the default value is true. If set to false manually, both of the external and the internal load
     * balancer will not be selected for services unless they explicitly target it.
     * 
     * @return the allowServicePlacement value.
     */
    Boolean allowServicePlacement();

    /**
     * Gets the serviceLabelSelector property: Only services that must match this selector can be placed on this load
     * balancer.
     * 
     * @return the serviceLabelSelector value.
     */
    LabelSelector serviceLabelSelector();

    /**
     * Gets the serviceNamespaceSelector property: Services created in namespaces that match the selector can be placed
     * on this load balancer.
     * 
     * @return the serviceNamespaceSelector value.
     */
    LabelSelector serviceNamespaceSelector();

    /**
     * Gets the nodeSelector property: Nodes that match this selector will be possible members of this load balancer.
     * 
     * @return the nodeSelector value.
     */
    LabelSelector nodeSelector();

    /**
     * Gets the provisioningState property: The current provisioning state.
     * 
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.containerserviceaks.generated.fluent.models.LoadBalancerInner object.
     * 
     * @return the inner object.
     */
    LoadBalancerInner innerModel();

    /**
     * The entirety of the LoadBalancer definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The LoadBalancer definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the LoadBalancer definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the LoadBalancer definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, resourceName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param resourceName The name of the managed cluster resource.
             * @return the next definition stage.
             */
            WithCreate withExistingManagedCluster(String resourceGroupName, String resourceName);
        }

        /**
         * The stage of the LoadBalancer definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithPrimaryAgentPoolName,
            DefinitionStages.WithAllowServicePlacement, DefinitionStages.WithServiceLabelSelector,
            DefinitionStages.WithServiceNamespaceSelector, DefinitionStages.WithNodeSelector {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            LoadBalancer create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            LoadBalancer create(Context context);
        }

        /**
         * The stage of the LoadBalancer definition allowing to specify primaryAgentPoolName.
         */
        interface WithPrimaryAgentPoolName {
            /**
             * Specifies the primaryAgentPoolName property: Required field. A string value that must specify the ID of
             * an existing agent pool. All nodes in the given pool will always be added to this load balancer. This
             * agent pool must have at least one node and minCount&gt;=1 for autoscaling operations. An agent pool can
             * only be the primary pool for a single load balancer..
             * 
             * @param primaryAgentPoolName Required field. A string value that must specify the ID of an existing agent
             * pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have
             * at least one node and minCount&gt;=1 for autoscaling operations. An agent pool can only be the primary
             * pool for a single load balancer.
             * @return the next definition stage.
             */
            WithCreate withPrimaryAgentPoolName(String primaryAgentPoolName);
        }

        /**
         * The stage of the LoadBalancer definition allowing to specify allowServicePlacement.
         */
        interface WithAllowServicePlacement {
            /**
             * Specifies the allowServicePlacement property: Whether to automatically place services on the load
             * balancer. If not supplied, the default value is true. If set to false manually, both of the external and
             * the internal load balancer will not be selected for services unless they explicitly target it..
             * 
             * @param allowServicePlacement Whether to automatically place services on the load balancer. If not
             * supplied, the default value is true. If set to false manually, both of the external and the internal load
             * balancer will not be selected for services unless they explicitly target it.
             * @return the next definition stage.
             */
            WithCreate withAllowServicePlacement(Boolean allowServicePlacement);
        }

        /**
         * The stage of the LoadBalancer definition allowing to specify serviceLabelSelector.
         */
        interface WithServiceLabelSelector {
            /**
             * Specifies the serviceLabelSelector property: Only services that must match this selector can be placed on
             * this load balancer..
             * 
             * @param serviceLabelSelector Only services that must match this selector can be placed on this load
             * balancer.
             * @return the next definition stage.
             */
            WithCreate withServiceLabelSelector(LabelSelector serviceLabelSelector);
        }

        /**
         * The stage of the LoadBalancer definition allowing to specify serviceNamespaceSelector.
         */
        interface WithServiceNamespaceSelector {
            /**
             * Specifies the serviceNamespaceSelector property: Services created in namespaces that match the selector
             * can be placed on this load balancer..
             * 
             * @param serviceNamespaceSelector Services created in namespaces that match the selector can be placed on
             * this load balancer.
             * @return the next definition stage.
             */
            WithCreate withServiceNamespaceSelector(LabelSelector serviceNamespaceSelector);
        }

        /**
         * The stage of the LoadBalancer definition allowing to specify nodeSelector.
         */
        interface WithNodeSelector {
            /**
             * Specifies the nodeSelector property: Nodes that match this selector will be possible members of this load
             * balancer..
             * 
             * @param nodeSelector Nodes that match this selector will be possible members of this load balancer.
             * @return the next definition stage.
             */
            WithCreate withNodeSelector(LabelSelector nodeSelector);
        }
    }

    /**
     * Begins update for the LoadBalancer resource.
     * 
     * @return the stage of resource update.
     */
    LoadBalancer.Update update();

    /**
     * The template for LoadBalancer update.
     */
    interface Update extends UpdateStages.WithPrimaryAgentPoolName, UpdateStages.WithAllowServicePlacement,
        UpdateStages.WithServiceLabelSelector, UpdateStages.WithServiceNamespaceSelector,
        UpdateStages.WithNodeSelector {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        LoadBalancer apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        LoadBalancer apply(Context context);
    }

    /**
     * The LoadBalancer update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the LoadBalancer update allowing to specify primaryAgentPoolName.
         */
        interface WithPrimaryAgentPoolName {
            /**
             * Specifies the primaryAgentPoolName property: Required field. A string value that must specify the ID of
             * an existing agent pool. All nodes in the given pool will always be added to this load balancer. This
             * agent pool must have at least one node and minCount&gt;=1 for autoscaling operations. An agent pool can
             * only be the primary pool for a single load balancer..
             * 
             * @param primaryAgentPoolName Required field. A string value that must specify the ID of an existing agent
             * pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have
             * at least one node and minCount&gt;=1 for autoscaling operations. An agent pool can only be the primary
             * pool for a single load balancer.
             * @return the next definition stage.
             */
            Update withPrimaryAgentPoolName(String primaryAgentPoolName);
        }

        /**
         * The stage of the LoadBalancer update allowing to specify allowServicePlacement.
         */
        interface WithAllowServicePlacement {
            /**
             * Specifies the allowServicePlacement property: Whether to automatically place services on the load
             * balancer. If not supplied, the default value is true. If set to false manually, both of the external and
             * the internal load balancer will not be selected for services unless they explicitly target it..
             * 
             * @param allowServicePlacement Whether to automatically place services on the load balancer. If not
             * supplied, the default value is true. If set to false manually, both of the external and the internal load
             * balancer will not be selected for services unless they explicitly target it.
             * @return the next definition stage.
             */
            Update withAllowServicePlacement(Boolean allowServicePlacement);
        }

        /**
         * The stage of the LoadBalancer update allowing to specify serviceLabelSelector.
         */
        interface WithServiceLabelSelector {
            /**
             * Specifies the serviceLabelSelector property: Only services that must match this selector can be placed on
             * this load balancer..
             * 
             * @param serviceLabelSelector Only services that must match this selector can be placed on this load
             * balancer.
             * @return the next definition stage.
             */
            Update withServiceLabelSelector(LabelSelector serviceLabelSelector);
        }

        /**
         * The stage of the LoadBalancer update allowing to specify serviceNamespaceSelector.
         */
        interface WithServiceNamespaceSelector {
            /**
             * Specifies the serviceNamespaceSelector property: Services created in namespaces that match the selector
             * can be placed on this load balancer..
             * 
             * @param serviceNamespaceSelector Services created in namespaces that match the selector can be placed on
             * this load balancer.
             * @return the next definition stage.
             */
            Update withServiceNamespaceSelector(LabelSelector serviceNamespaceSelector);
        }

        /**
         * The stage of the LoadBalancer update allowing to specify nodeSelector.
         */
        interface WithNodeSelector {
            /**
             * Specifies the nodeSelector property: Nodes that match this selector will be possible members of this load
             * balancer..
             * 
             * @param nodeSelector Nodes that match this selector will be possible members of this load balancer.
             * @return the next definition stage.
             */
            Update withNodeSelector(LabelSelector nodeSelector);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    LoadBalancer refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    LoadBalancer refresh(Context context);
}
