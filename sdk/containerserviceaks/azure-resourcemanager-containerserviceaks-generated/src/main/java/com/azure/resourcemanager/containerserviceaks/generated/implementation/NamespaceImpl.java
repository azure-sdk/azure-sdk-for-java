// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerserviceaks.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerserviceaks.generated.fluent.models.NamespaceInner;
import com.azure.resourcemanager.containerserviceaks.generated.models.CredentialResults;
import com.azure.resourcemanager.containerserviceaks.generated.models.Namespace;
import com.azure.resourcemanager.containerserviceaks.generated.models.NamespaceProperties;
import com.azure.resourcemanager.containerserviceaks.generated.models.TagsObject;
import java.util.Collections;
import java.util.Map;

public final class NamespaceImpl implements Namespace, Namespace.Definition, Namespace.Update {
    private NamespaceInner innerObject;

    private final com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public String location() {
        return this.innerModel().location();
    }

    public NamespaceProperties properties() {
        return this.innerModel().properties();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NamespaceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String resourceName;

    private String namespaceName;

    private TagsObject updateParameters;

    public NamespaceImpl withExistingManagedCluster(String resourceGroupName, String resourceName) {
        this.resourceGroupName = resourceGroupName;
        this.resourceName = resourceName;
        return this;
    }

    public Namespace create() {
        this.innerObject = serviceManager.serviceClient()
            .getNamespaces()
            .createOrUpdate(resourceGroupName, resourceName, namespaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public Namespace create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNamespaces()
            .createOrUpdate(resourceGroupName, resourceName, namespaceName, this.innerModel(), context);
        return this;
    }

    NamespaceImpl(String name,
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager serviceManager) {
        this.innerObject = new NamespaceInner();
        this.serviceManager = serviceManager;
        this.namespaceName = name;
    }

    public NamespaceImpl update() {
        this.updateParameters = new TagsObject();
        return this;
    }

    public Namespace apply() {
        this.innerObject = serviceManager.serviceClient()
            .getNamespaces()
            .updateWithResponse(resourceGroupName, resourceName, namespaceName, updateParameters, Context.NONE)
            .getValue();
        return this;
    }

    public Namespace apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNamespaces()
            .updateWithResponse(resourceGroupName, resourceName, namespaceName, updateParameters, context)
            .getValue();
        return this;
    }

    NamespaceImpl(NamespaceInner innerObject,
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.resourceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "managedClusters");
        this.namespaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "namespaces");
    }

    public Namespace refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getNamespaces()
            .getWithResponse(resourceGroupName, resourceName, namespaceName, Context.NONE)
            .getValue();
        return this;
    }

    public Namespace refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNamespaces()
            .getWithResponse(resourceGroupName, resourceName, namespaceName, context)
            .getValue();
        return this;
    }

    public Response<CredentialResults> listCredentialWithResponse(Context context) {
        return serviceManager.namespaces()
            .listCredentialWithResponse(resourceGroupName, resourceName, namespaceName, context);
    }

    public CredentialResults listCredential() {
        return serviceManager.namespaces().listCredential(resourceGroupName, resourceName, namespaceName);
    }

    public NamespaceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public NamespaceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public NamespaceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public NamespaceImpl withProperties(NamespaceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
