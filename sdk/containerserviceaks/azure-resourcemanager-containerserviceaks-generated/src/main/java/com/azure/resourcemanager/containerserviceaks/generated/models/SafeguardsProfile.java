// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerserviceaks.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The Safeguards profile.
 */
@Fluent
public final class SafeguardsProfile implements JsonSerializable<SafeguardsProfile> {
    /*
     * List of namespaces specified by AKS to be excluded from Safeguards
     */
    private List<String> systemExcludedNamespaces;

    /*
     * The version of constraints to use
     */
    private String version;

    /*
     * The Safeguards level to be used. By default, Safeguards is enabled for all namespaces except those that AKS
     * excludes via systemExcludedNamespaces
     */
    private Level level;

    /*
     * List of namespaces excluded from Safeguards checks
     */
    private List<String> excludedNamespaces;

    /**
     * Creates an instance of SafeguardsProfile class.
     */
    public SafeguardsProfile() {
    }

    /**
     * Get the systemExcludedNamespaces property: List of namespaces specified by AKS to be excluded from Safeguards.
     * 
     * @return the systemExcludedNamespaces value.
     */
    public List<String> systemExcludedNamespaces() {
        return this.systemExcludedNamespaces;
    }

    /**
     * Get the version property: The version of constraints to use.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The version of constraints to use.
     * 
     * @param version the version value to set.
     * @return the SafeguardsProfile object itself.
     */
    public SafeguardsProfile withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the level property: The Safeguards level to be used. By default, Safeguards is enabled for all namespaces
     * except those that AKS excludes via systemExcludedNamespaces.
     * 
     * @return the level value.
     */
    public Level level() {
        return this.level;
    }

    /**
     * Set the level property: The Safeguards level to be used. By default, Safeguards is enabled for all namespaces
     * except those that AKS excludes via systemExcludedNamespaces.
     * 
     * @param level the level value to set.
     * @return the SafeguardsProfile object itself.
     */
    public SafeguardsProfile withLevel(Level level) {
        this.level = level;
        return this;
    }

    /**
     * Get the excludedNamespaces property: List of namespaces excluded from Safeguards checks.
     * 
     * @return the excludedNamespaces value.
     */
    public List<String> excludedNamespaces() {
        return this.excludedNamespaces;
    }

    /**
     * Set the excludedNamespaces property: List of namespaces excluded from Safeguards checks.
     * 
     * @param excludedNamespaces the excludedNamespaces value to set.
     * @return the SafeguardsProfile object itself.
     */
    public SafeguardsProfile withExcludedNamespaces(List<String> excludedNamespaces) {
        this.excludedNamespaces = excludedNamespaces;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (level() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property level in model SafeguardsProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SafeguardsProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("level", this.level == null ? null : this.level.toString());
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeArrayField("excludedNamespaces", this.excludedNamespaces,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SafeguardsProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SafeguardsProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SafeguardsProfile.
     */
    public static SafeguardsProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SafeguardsProfile deserializedSafeguardsProfile = new SafeguardsProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("level".equals(fieldName)) {
                    deserializedSafeguardsProfile.level = Level.fromString(reader.getString());
                } else if ("systemExcludedNamespaces".equals(fieldName)) {
                    List<String> systemExcludedNamespaces = reader.readArray(reader1 -> reader1.getString());
                    deserializedSafeguardsProfile.systemExcludedNamespaces = systemExcludedNamespaces;
                } else if ("version".equals(fieldName)) {
                    deserializedSafeguardsProfile.version = reader.getString();
                } else if ("excludedNamespaces".equals(fieldName)) {
                    List<String> excludedNamespaces = reader.readArray(reader1 -> reader1.getString());
                    deserializedSafeguardsProfile.excludedNamespaces = excludedNamespaces;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSafeguardsProfile;
        });
    }
}
