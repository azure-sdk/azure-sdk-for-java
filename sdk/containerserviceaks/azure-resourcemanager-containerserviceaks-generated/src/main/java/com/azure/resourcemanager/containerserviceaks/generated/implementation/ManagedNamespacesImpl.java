// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerserviceaks.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerserviceaks.generated.fluent.ManagedNamespacesClient;
import com.azure.resourcemanager.containerserviceaks.generated.fluent.models.CredentialResultsInner;
import com.azure.resourcemanager.containerserviceaks.generated.fluent.models.ManagedNamespaceInner;
import com.azure.resourcemanager.containerserviceaks.generated.models.CredentialResults;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedNamespace;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedNamespaces;

public final class ManagedNamespacesImpl implements ManagedNamespaces {
    private static final ClientLogger LOGGER = new ClientLogger(ManagedNamespacesImpl.class);

    private final ManagedNamespacesClient innerClient;

    private final com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager serviceManager;

    public ManagedNamespacesImpl(ManagedNamespacesClient innerClient,
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ManagedNamespace> listByManagedCluster(String resourceGroupName, String resourceName) {
        PagedIterable<ManagedNamespaceInner> inner
            = this.serviceClient().listByManagedCluster(resourceGroupName, resourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ManagedNamespaceImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedNamespace> listByManagedCluster(String resourceGroupName, String resourceName,
        Context context) {
        PagedIterable<ManagedNamespaceInner> inner
            = this.serviceClient().listByManagedCluster(resourceGroupName, resourceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ManagedNamespaceImpl(inner1, this.manager()));
    }

    public Response<ManagedNamespace> getWithResponse(String resourceGroupName, String resourceName,
        String managedNamespaceName, Context context) {
        Response<ManagedNamespaceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, resourceName, managedNamespaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ManagedNamespaceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagedNamespace get(String resourceGroupName, String resourceName, String managedNamespaceName) {
        ManagedNamespaceInner inner = this.serviceClient().get(resourceGroupName, resourceName, managedNamespaceName);
        if (inner != null) {
            return new ManagedNamespaceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String resourceName, String managedNamespaceName) {
        this.serviceClient().delete(resourceGroupName, resourceName, managedNamespaceName);
    }

    public void delete(String resourceGroupName, String resourceName, String managedNamespaceName, Context context) {
        this.serviceClient().delete(resourceGroupName, resourceName, managedNamespaceName, context);
    }

    public Response<CredentialResults> listCredentialWithResponse(String resourceGroupName, String resourceName,
        String managedNamespaceName, Context context) {
        Response<CredentialResultsInner> inner = this.serviceClient()
            .listCredentialWithResponse(resourceGroupName, resourceName, managedNamespaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CredentialResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CredentialResults listCredential(String resourceGroupName, String resourceName,
        String managedNamespaceName) {
        CredentialResultsInner inner
            = this.serviceClient().listCredential(resourceGroupName, resourceName, managedNamespaceName);
        if (inner != null) {
            return new CredentialResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagedNamespace getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String managedNamespaceName = ResourceManagerUtils.getValueFromIdByName(id, "managedNamespaces");
        if (managedNamespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedNamespaces'.", id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, managedNamespaceName, Context.NONE).getValue();
    }

    public Response<ManagedNamespace> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String managedNamespaceName = ResourceManagerUtils.getValueFromIdByName(id, "managedNamespaces");
        if (managedNamespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedNamespaces'.", id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, managedNamespaceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String managedNamespaceName = ResourceManagerUtils.getValueFromIdByName(id, "managedNamespaces");
        if (managedNamespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedNamespaces'.", id)));
        }
        this.delete(resourceGroupName, resourceName, managedNamespaceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String managedNamespaceName = ResourceManagerUtils.getValueFromIdByName(id, "managedNamespaces");
        if (managedNamespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedNamespaces'.", id)));
        }
        this.delete(resourceGroupName, resourceName, managedNamespaceName, context);
    }

    private ManagedNamespacesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager() {
        return this.serviceManager;
    }

    public ManagedNamespaceImpl define(String name) {
        return new ManagedNamespaceImpl(name, this.manager());
    }
}
