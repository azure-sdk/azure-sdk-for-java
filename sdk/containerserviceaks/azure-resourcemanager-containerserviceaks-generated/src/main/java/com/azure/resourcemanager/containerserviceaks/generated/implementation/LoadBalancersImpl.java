// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerserviceaks.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerserviceaks.generated.fluent.LoadBalancersClient;
import com.azure.resourcemanager.containerserviceaks.generated.fluent.models.LoadBalancerInner;
import com.azure.resourcemanager.containerserviceaks.generated.models.LoadBalancer;
import com.azure.resourcemanager.containerserviceaks.generated.models.LoadBalancers;

public final class LoadBalancersImpl implements LoadBalancers {
    private static final ClientLogger LOGGER = new ClientLogger(LoadBalancersImpl.class);

    private final LoadBalancersClient innerClient;

    private final com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager serviceManager;

    public LoadBalancersImpl(LoadBalancersClient innerClient,
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<LoadBalancer> listByManagedCluster(String resourceGroupName, String resourceName) {
        PagedIterable<LoadBalancerInner> inner
            = this.serviceClient().listByManagedCluster(resourceGroupName, resourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LoadBalancerImpl(inner1, this.manager()));
    }

    public PagedIterable<LoadBalancer> listByManagedCluster(String resourceGroupName, String resourceName,
        Context context) {
        PagedIterable<LoadBalancerInner> inner
            = this.serviceClient().listByManagedCluster(resourceGroupName, resourceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LoadBalancerImpl(inner1, this.manager()));
    }

    public Response<LoadBalancer> getWithResponse(String resourceGroupName, String resourceName,
        String loadBalancerName, Context context) {
        Response<LoadBalancerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, resourceName, loadBalancerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LoadBalancerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LoadBalancer get(String resourceGroupName, String resourceName, String loadBalancerName) {
        LoadBalancerInner inner = this.serviceClient().get(resourceGroupName, resourceName, loadBalancerName);
        if (inner != null) {
            return new LoadBalancerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String resourceName, String loadBalancerName) {
        this.serviceClient().delete(resourceGroupName, resourceName, loadBalancerName);
    }

    public void delete(String resourceGroupName, String resourceName, String loadBalancerName, Context context) {
        this.serviceClient().delete(resourceGroupName, resourceName, loadBalancerName, context);
    }

    public LoadBalancer getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String loadBalancerName = ResourceManagerUtils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, loadBalancerName, Context.NONE).getValue();
    }

    public Response<LoadBalancer> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String loadBalancerName = ResourceManagerUtils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, loadBalancerName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String loadBalancerName = ResourceManagerUtils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        this.delete(resourceGroupName, resourceName, loadBalancerName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String loadBalancerName = ResourceManagerUtils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        this.delete(resourceGroupName, resourceName, loadBalancerName, context);
    }

    private LoadBalancersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager() {
        return this.serviceManager;
    }

    public LoadBalancerImpl define(String name) {
        return new LoadBalancerImpl(name, this.manager());
    }
}
