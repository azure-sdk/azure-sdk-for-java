// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerserviceaks.generated.generated;

import com.azure.resourcemanager.containerserviceaks.generated.models.AdvancedNetworkPolicies;
import com.azure.resourcemanager.containerserviceaks.generated.models.AdvancedNetworking;
import com.azure.resourcemanager.containerserviceaks.generated.models.AdvancedNetworkingObservability;
import com.azure.resourcemanager.containerserviceaks.generated.models.AdvancedNetworkingSecurity;
import com.azure.resourcemanager.containerserviceaks.generated.models.AgentPoolMode;
import com.azure.resourcemanager.containerserviceaks.generated.models.AgentPoolType;
import com.azure.resourcemanager.containerserviceaks.generated.models.ClusterUpgradeSettings;
import com.azure.resourcemanager.containerserviceaks.generated.models.ContainerServiceLinuxProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ContainerServiceNetworkProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ContainerServiceSshConfiguration;
import com.azure.resourcemanager.containerserviceaks.generated.models.ContainerServiceSshPublicKey;
import com.azure.resourcemanager.containerserviceaks.generated.models.CreationData;
import com.azure.resourcemanager.containerserviceaks.generated.models.Expander;
import com.azure.resourcemanager.containerserviceaks.generated.models.GpuInstanceProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.IpFamily;
import com.azure.resourcemanager.containerserviceaks.generated.models.IstioCertificateAuthority;
import com.azure.resourcemanager.containerserviceaks.generated.models.IstioComponents;
import com.azure.resourcemanager.containerserviceaks.generated.models.IstioEgressGateway;
import com.azure.resourcemanager.containerserviceaks.generated.models.IstioIngressGateway;
import com.azure.resourcemanager.containerserviceaks.generated.models.IstioIngressGatewayMode;
import com.azure.resourcemanager.containerserviceaks.generated.models.IstioPluginCertificateAuthority;
import com.azure.resourcemanager.containerserviceaks.generated.models.IstioServiceMesh;
import com.azure.resourcemanager.containerserviceaks.generated.models.KubernetesSupportPlan;
import com.azure.resourcemanager.containerserviceaks.generated.models.LicenseType;
import com.azure.resourcemanager.containerserviceaks.generated.models.LoadBalancerSku;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterAIToolchainOperatorProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterAadProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterAddonProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterAgentPoolProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterApiServerAccessProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterHttpProxyConfig;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterIdentity;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterIngressProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterIngressProfileWebAppRouting;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterLoadBalancerProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterLoadBalancerProfileManagedOutboundIPs;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterManagedOutboundIpProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterNatGatewayProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterPodIdentityProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterPropertiesAutoScalerProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterSecurityProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterSecurityProfileDefender;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterSecurityProfileDefenderSecurityGating;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterSecurityProfileDefenderSecurityGatingIdentitiesItem;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterSecurityProfileDefenderSecurityMonitoring;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterServicePrincipalProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterSku;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterSkuName;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterSkuTier;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedClusterWindowsProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.ManagedServiceIdentityUserAssignedIdentitiesValue;
import com.azure.resourcemanager.containerserviceaks.generated.models.NetworkDataplane;
import com.azure.resourcemanager.containerserviceaks.generated.models.NetworkPlugin;
import com.azure.resourcemanager.containerserviceaks.generated.models.NetworkPluginMode;
import com.azure.resourcemanager.containerserviceaks.generated.models.OSType;
import com.azure.resourcemanager.containerserviceaks.generated.models.Ossku;
import com.azure.resourcemanager.containerserviceaks.generated.models.OutboundType;
import com.azure.resourcemanager.containerserviceaks.generated.models.ResourceIdentityType;
import com.azure.resourcemanager.containerserviceaks.generated.models.ScaleDownMode;
import com.azure.resourcemanager.containerserviceaks.generated.models.ServiceMeshMode;
import com.azure.resourcemanager.containerserviceaks.generated.models.ServiceMeshProfile;
import com.azure.resourcemanager.containerserviceaks.generated.models.TransitEncryptionType;
import com.azure.resourcemanager.containerserviceaks.generated.models.UpgradeOverrideSettings;
import com.azure.resourcemanager.containerserviceaks.generated.models.UserAssignedIdentity;
import com.azure.resourcemanager.containerserviceaks.generated.models.WindowsGmsaProfile;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ManagedClusters CreateOrUpdate.
 */
public final class ManagedClustersCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_DualStackNetworking.json
     */
    /**
     * Sample code: Create/Update Managed Cluster with dual-stack networking.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createUpdateManagedClusterWithDualStackNetworking(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withIdentity(new ManagedClusterIdentity().withType(ResourceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1",
                    new ManagedServiceIdentityUserAssignedIdentitiesValue())))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS1_v2")
                .withOsType(OSType.LINUX)
                .withScaleDownMode(ScaleDownMode.DEALLOCATE)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withAvailabilityZones(Arrays.asList("1", "2", "3"))
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2)))
                .withIpFamilies(Arrays.asList(IpFamily.IPV4, IpFamily.IPV6)))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withBalanceSimilarNodeGroups("true")
                .withExpander(Expander.PRIORITY)
                .withMaxNodeProvisionTime("15m")
                .withNewPodScaleUpDelay("1m")
                .withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m")
                .withSkipNodesWithSystemPods("false"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_PodIdentity.json
     */
    /**
     * Sample code: Create Managed Cluster with PodIdentity enabled.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithPodIdentityEnabled(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withPodIdentityProfile(
                new ManagedClusterPodIdentityProfile().withEnabled(true).withAllowNetworkPluginKubenet(true))
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_UserAssignedNATGateway.json
     */
    /**
     * Sample code: Create Managed Cluster with user-assigned NAT gateway as outbound type.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithUserAssignedNATGatewayAsOutboundType(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(false)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(
                new ContainerServiceNetworkProfile().withOutboundType(OutboundType.USER_ASSIGNED_NATGATEWAY)
                    .withLoadBalancerSku(LoadBalancerSku.STANDARD))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_MCSnapshot.json
     */
    /**
     * Sample code: Create Managed Cluster using a managed cluster snapshot.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterUsingAManagedClusterSnapshot(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withCreationData(new CreationData().withSourceResourceId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ContainerService/managedclustersnapshots/snapshot1"))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withEnableFips(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_Update.json
     */
    /**
     * Sample code: Create/Update Managed Cluster.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createUpdateManagedCluster(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withIdentity(new ManagedClusterIdentity().withType(ResourceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1",
                    new ManagedServiceIdentityUserAssignedIdentitiesValue())))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS1_v2")
                .withOsType(OSType.LINUX)
                .withScaleDownMode(ScaleDownMode.DEALLOCATE)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withAvailabilityZones(Arrays.asList("1", "2", "3"))
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withUpgradeSettings(
                new ClusterUpgradeSettings().withOverrideSettings(new UpgradeOverrideSettings().withForceUpgrade(true)
                    .withUntil(OffsetDateTime.parse("2022-11-01T13:00:00Z"))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withBalanceSimilarNodeGroups("true")
                .withExpander(Expander.PRIORITY)
                .withMaxNodeProvisionTime("15m")
                .withNewPodScaleUpDelay("1m")
                .withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m")
                .withSkipNodesWithSystemPods("false"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_PrivateClusterFQDNSubdomain.json
     */
    /**
     * Sample code: Create Managed Private Cluster with fqdn subdomain specified.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedPrivateClusterWithFqdnSubdomainSpecified(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withFqdnSubdomain("domain1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withEnableEncryptionAtHost(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withApiServerAccessProfile(new ManagedClusterApiServerAccessProfile().withEnablePrivateCluster(true)
                .withPrivateDnsZone(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Network/privateDnsZones/privatelink.location1.azmk8s.io"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_ManagedNATGateway.json
     */
    /**
     * Sample code: Create Managed Cluster with AKS-managed NAT gateway as outbound type.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithAKSManagedNATGatewayAsOutboundType(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(false)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.MANAGED_NATGATEWAY)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withNatGatewayProfile(new ManagedClusterNatGatewayProfile()
                    .withManagedOutboundIpProfile(new ManagedClusterManagedOutboundIpProfile().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_Premium.json
     */
    /**
     * Sample code: Create Managed Cluster with LongTermSupport.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithLongTermSupport(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(
                new ManagedClusterSku().withName(ManagedClusterSkuName.BASE).withTier(ManagedClusterSkuTier.PREMIUM))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withEnableEncryptionAtHost(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withSupportPlan(KubernetesSupportPlan.AKSLONG_TERM_SUPPORT)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withApiServerAccessProfile(new ManagedClusterApiServerAccessProfile().withDisableRunCommand(true))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_AzureKeyvaultSecretsProvider.json
     */
    /**
     * Sample code: Create Managed Cluster with Azure Key Vault Secrets Provider Addon.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithAzureKeyVaultSecretsProviderAddon(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf("azureKeyvaultSecretsProvider",
                new ManagedClusterAddonProfile().withEnabled(true)
                    .withConfig(mapOf("enableSecretRotation", "fakeTokenPlaceholder", "rotationPollInterval", "2m"))))
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersAssociate_CRG.json
     */
    /**
     * Sample code: Associate Managed Cluster with Capacity Reservation Group.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void associateManagedClusterWithCapacityReservationGroup(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withCapacityReservationGroupId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/capacityReservationGroups/crg1")
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_EnableCustomCATrust.json
     */
    /**
     * Sample code: Create Managed Cluster with CustomCATrustCertificates populated and CustomCATrust enabled.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithCustomCATrustCertificatesPopulatedAndCustomCATrustEnabled(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withEnableCustomCATrust(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .withSecurityProfile(new ManagedClusterSecurityProfile().withCustomCATrustCertificates(
                Arrays.asList("ZHVtbXlFeGFtcGxlVGVzdFZhbHVlRm9yQ2VydGlmaWNhdGVUb0JlQWRkZWQ=".getBytes())))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_NodeAutoProvisioning.json
     */
    /**
     * Sample code: Create Managed Cluster with Node Auto Provisioning.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithNodeAutoProvisioning(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withNetworkPlugin(NetworkPlugin.AZURE)
                .withNetworkPluginMode(NetworkPluginMode.OVERLAY)
                .withNetworkDataplane(NetworkDataplane.CILIUM)
                .withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_NodePublicIPPrefix.json
     */
    /**
     * Sample code: Create Managed Cluster with Node Public IP Prefix.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithNodePublicIPPrefix(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withNodePublicIpPrefixId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Network/publicIPPrefixes/public-ip-prefix")
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_EnableEncryptionAtHost.json
     */
    /**
     * Sample code: Create Managed Cluster with EncryptionAtHost enabled.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithEncryptionAtHostEnabled(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withEnableEncryptionAtHost(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_PrivateClusterPublicFQDN.json
     */
    /**
     * Sample code: Create Managed Private Cluster with Public FQDN specified.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedPrivateClusterWithPublicFQDNSpecified(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withEnableEncryptionAtHost(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withApiServerAccessProfile(new ManagedClusterApiServerAccessProfile().withEnablePrivateCluster(true)
                .withEnablePrivateClusterPublicFqdn(true))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_HTTPProxy.json
     */
    /**
     * Sample code: Create Managed Cluster with HTTP proxy configured.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithHTTPProxyConfigured(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .withHttpProxyConfig(new ManagedClusterHttpProxyConfig().withHttpProxy("http://myproxy.server.com:8080")
                .withHttpsProxy("https://myproxy.server.com:8080")
                .withNoProxy(Arrays.asList("localhost", "127.0.0.1"))
                .withTrustedCa("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_UpdateWithEnableNamespaceResources.json
     */
    /**
     * Sample code: Create/Update Managed Cluster with EnableNamespaceResources.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createUpdateManagedClusterWithEnableNamespaceResources(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS1_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withAvailabilityZones(Arrays.asList("1", "2", "3"))
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withEnableNamespaceResources(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_DedicatedHostGroup.json
     */
    /**
     * Sample code: Create Managed Cluster with Dedicated Host Group.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithDedicatedHostGroup(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withEnableNodePublicIp(true)
                .withHostGroupId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg/providers/Microsoft.Compute/hostGroups/hostgroup1")
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_EnableAIToolchainOperator.json
     */
    /**
     * Sample code: Create Managed Cluster with AI Toolchain Operator enabled.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithAIToolchainOperatorEnabled(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withNetworkPlugin(NetworkPlugin.AZURE)
                .withNetworkPluginMode(NetworkPluginMode.OVERLAY)
                .withNetworkDataplane(NetworkDataplane.CILIUM)
                .withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAiToolchainOperatorProfile(new ManagedClusterAIToolchainOperatorProfile().withEnabled(true))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_EnabledFIPS.json
     */
    /**
     * Sample code: Create Managed Cluster with FIPS enabled OS.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithFIPSEnabledOS(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withEnableFips(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_SecurityProfile.json
     */
    /**
     * Sample code: Create Managed Cluster with Security Profile configured.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithSecurityProfileConfigured(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withSecurityProfile(new ManagedClusterSecurityProfile()
                .withDefender(new ManagedClusterSecurityProfileDefender().withLogAnalyticsWorkspaceResourceId(
                    "/subscriptions/SUB_ID/resourcegroups/RG_NAME/providers/microsoft.operationalinsights/workspaces/WORKSPACE_NAME")
                    .withSecurityMonitoring(
                        new ManagedClusterSecurityProfileDefenderSecurityMonitoring().withEnabled(true))
                    .withSecurityGating(new ManagedClusterSecurityProfileDefenderSecurityGating().withEnabled(true)
                        .withIdentities(
                            Arrays.asList(new ManagedClusterSecurityProfileDefenderSecurityGatingIdentitiesItem()
                                .withAzureContainerRegistry("registry1")
                                .withIdentity(new UserAssignedIdentity().withResourceId(
                                    "/subscriptions/SUB_ID/resourceGroups/RG_NAME/providers/Microsoft.ManagedIdentity/userAssignedIdentities/IDENTITY_NAME")
                                    .withClientId("client1"))))
                        .withAllowSecretAccess(true))))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_PPG.json
     */
    /**
     * Sample code: Create Managed Cluster with PPG.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithPPG(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withProximityPlacementGroupId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/proximityPlacementGroups/ppg1")
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_IngressProfile_WebAppRouting.json
     */
    /**
     * Sample code: Create Managed Cluster with Web App Routing Ingress Profile configured.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithWebAppRoutingIngressProfileConfigured(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withIngressProfile(new ManagedClusterIngressProfile()
                .withWebAppRouting(new ManagedClusterIngressProfileWebAppRouting().withEnabled(true)
                    .withDnsZoneResourceIds(Arrays.asList(
                        "/subscriptions/SUB_ID/resourceGroups/RG_NAME/providers/Microsoft.Network/dnszones/DNS_ZONE_NAME"))))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_UpdateWithAHUB.json
     */
    /**
     * Sample code: Create/Update Managed Cluster with EnableAHUB.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createUpdateManagedClusterWithEnableAHUB(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withIdentity(new ManagedClusterIdentity().withType(ResourceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1",
                    new ManagedServiceIdentityUserAssignedIdentitiesValue())))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS1_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withAvailabilityZones(Arrays.asList("1", "2", "3"))
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder")
                .withLicenseType(LicenseType.WINDOWS_SERVER))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_DisableRunCommand.json
     */
    /**
     * Sample code: Create Managed Cluster with RunCommand disabled.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithRunCommandDisabled(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withEnableEncryptionAtHost(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withApiServerAccessProfile(new ManagedClusterApiServerAccessProfile().withDisableRunCommand(true))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_Snapshot.json
     */
    /**
     * Sample code: Create Managed Cluster using an agent pool snapshot.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterUsingAnAgentPoolSnapshot(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withEnableFips(true)
                .withCreationData(new CreationData().withSourceResourceId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"))
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_AzureServiceMesh.json
     */
    /**
     * Sample code: Create/Update Managed Cluster with Azure Service Mesh.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createUpdateManagedClusterWithAzureServiceMesh(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf("azureKeyvaultSecretsProvider",
                new ManagedClusterAddonProfile().withEnabled(true)
                    .withConfig(mapOf("enableSecretRotation", "fakeTokenPlaceholder", "rotationPollInterval", "2m"))))
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .withServiceMeshProfile(
                new ServiceMeshProfile().withMode(ServiceMeshMode.ISTIO)
                    .withIstio(
                        new IstioServiceMesh()
                            .withComponents(new IstioComponents()
                                .withIngressGateways(
                                    Arrays.asList(new IstioIngressGateway().withMode(IstioIngressGatewayMode.INTERNAL)
                                        .withEnabled(true)))
                                .withEgressGateways(
                                    Arrays.asList(new IstioEgressGateway().withEnabled(true).withName("istioegress1"))))
                            .withCertificateAuthority(new IstioCertificateAuthority()
                                .withPlugin(new IstioPluginCertificateAuthority().withKeyVaultId("fakeTokenPlaceholder")
                                    .withCertObjectName("ca-cert")
                                    .withKeyObjectName("fakeTokenPlaceholder")
                                    .withRootCertObjectName("root-cert")
                                    .withCertChainObjectName("cert-chain")))))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_OSSKU.json
     */
    /**
     * Sample code: Create Managed Cluster with OSSKU.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithOSSKU(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withOsSku(Ossku.AZURE_LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .withHttpProxyConfig(new ManagedClusterHttpProxyConfig().withHttpProxy("http://myproxy.server.com:8080")
                .withHttpsProxy("https://myproxy.server.com:8080")
                .withNoProxy(Arrays.asList("localhost", "127.0.0.1"))
                .withTrustedCa("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_VirtualMachines.json
     */
    /**
     * Sample code: Create Managed Cluster with VirtualMachines pool type.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithVirtualMachinesPoolType(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINES)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableFips(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/AdvancedNetworkingTransitEncryption.json
     */
    /**
     * Sample code: Create Managed Cluster with Advanced Networking Transit Encryption.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithAdvancedNetworkingTransitEncryption(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withNetworkPlugin(NetworkPlugin.AZURE)
                .withNetworkPluginMode(NetworkPluginMode.OVERLAY)
                .withNetworkDataplane(NetworkDataplane.CILIUM)
                .withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2)))
                .withAdvancedNetworking(new AdvancedNetworking().withEnabled(true)
                    .withObservability(new AdvancedNetworkingObservability().withEnabled(false))
                    .withSecurity(new AdvancedNetworkingSecurity().withEnabled(true)
                        .withAdvancedNetworkPolicies(AdvancedNetworkPolicies.FQDN)
                        .withType(TransitEncryptionType.WIRE_GUARD))))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_UpdateWithEnableAzureRBAC.json
     */
    /**
     * Sample code: Create/Update AAD Managed Cluster with EnableAzureRBAC.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createUpdateAADManagedClusterWithEnableAzureRBAC(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS1_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withAvailabilityZones(Arrays.asList("1", "2", "3"))
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAadProfile(new ManagedClusterAadProfile().withManaged(true).withEnableAzureRbac(true))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_EnableUltraSSD.json
     */
    /**
     * Sample code: Create Managed Cluster with UltraSSD enabled.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithUltraSSDEnabled(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS2_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withEnableUltraSsd(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_UpdateWindowsGmsa.json
     */
    /**
     * Sample code: Create/Update Managed Cluster with Windows gMSA enabled.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createUpdateManagedClusterWithWindowsGMSAEnabled(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withIdentity(new ManagedClusterIdentity().withType(ResourceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1",
                    new ManagedServiceIdentityUserAssignedIdentitiesValue())))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_DS1_v2")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withAvailabilityZones(Arrays.asList("1", "2", "3"))
                .withEnableNodePublicIp(true)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder")
                .withGmsaProfile(new WindowsGmsaProfile().withEnabled(true)))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedClustersCreate_GPUMIG.json
     */
    /**
     * Sample code: Create Managed Cluster with GPUMIG.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createManagedClusterWithGPUMIG(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedClusters()
            .define("clustername1")
            .withRegion("location1")
            .withExistingResourceGroup("rg1")
            .withTags(mapOf("archv2", "", "tier", "production"))
            .withSku(new ManagedClusterSku().withName(ManagedClusterSkuName.fromString("Basic"))
                .withTier(ManagedClusterSkuTier.FREE))
            .withKubernetesVersion("")
            .withDnsPrefix("dnsprefix1")
            .withAgentPoolProfiles(Arrays.asList(new ManagedClusterAgentPoolProfile().withCount(3)
                .withVmSize("Standard_ND96asr_v4")
                .withOsType(OSType.LINUX)
                .withType(AgentPoolType.VIRTUAL_MACHINE_SCALE_SETS)
                .withMode(AgentPoolMode.SYSTEM)
                .withEnableNodePublicIp(true)
                .withGpuInstanceProfile(GpuInstanceProfile.MIG3G)
                .withName("nodepool1")))
            .withLinuxProfile(new ContainerServiceLinuxProfile().withAdminUsername("azureuser")
                .withSsh(new ContainerServiceSshConfiguration().withPublicKeys(
                    Arrays.asList(new ContainerServiceSshPublicKey().withKeyData("fakeTokenPlaceholder")))))
            .withWindowsProfile(new ManagedClusterWindowsProfile().withAdminUsername("azureuser")
                .withAdminPassword("fakeTokenPlaceholder"))
            .withServicePrincipalProfile(
                new ManagedClusterServicePrincipalProfile().withClientId("clientid").withSecret("fakeTokenPlaceholder"))
            .withAddonProfiles(mapOf())
            .withEnableRbac(true)
            .withNetworkProfile(new ContainerServiceNetworkProfile().withOutboundType(OutboundType.LOAD_BALANCER)
                .withLoadBalancerSku(LoadBalancerSku.STANDARD)
                .withLoadBalancerProfile(new ManagedClusterLoadBalancerProfile()
                    .withManagedOutboundIPs(new ManagedClusterLoadBalancerProfileManagedOutboundIPs().withCount(2))))
            .withAutoScalerProfile(new ManagedClusterPropertiesAutoScalerProfile().withScanInterval("20s")
                .withScaleDownDelayAfterAdd("15m"))
            .withDiskEncryptionSetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des")
            .withHttpProxyConfig(new ManagedClusterHttpProxyConfig().withHttpProxy("http://myproxy.server.com:8080")
                .withHttpsProxy("https://myproxy.server.com:8080")
                .withNoProxy(Arrays.asList("localhost", "127.0.0.1"))
                .withTrustedCa("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
