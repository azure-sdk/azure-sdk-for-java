// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerserviceaks.generated.generated;

import com.azure.resourcemanager.containerserviceaks.generated.models.AdoptionPolicy;
import com.azure.resourcemanager.containerserviceaks.generated.models.DeletePolicy;
import com.azure.resourcemanager.containerserviceaks.generated.models.NamespaceProperties;
import com.azure.resourcemanager.containerserviceaks.generated.models.NetworkPolicies;
import com.azure.resourcemanager.containerserviceaks.generated.models.PolicyRule;
import com.azure.resourcemanager.containerserviceaks.generated.models.ResourceQuota;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ManagedNamespaces CreateOrUpdate.
 */
public final class ManagedNamespacesCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-03-02-preview/
     * examples/ManagedNamespacesCreate_Update.json
     */
    /**
     * Sample code: Create/Update Managed Namespace.
     * 
     * @param manager Entry point to ContainerServiceManager.
     */
    public static void createUpdateManagedNamespace(
        com.azure.resourcemanager.containerserviceaks.generated.ContainerServiceManager manager) {
        manager.managedNamespaces()
            .define("namespace1")
            .withExistingManagedCluster("rg1", "clustername1")
            .withTags(mapOf("tagKey1", "fakeTokenPlaceholder"))
            .withProperties(new NamespaceProperties().withLabels(mapOf("kubernetes.io/metadata.name", "true"))
                .withAnnotations(mapOf("annatationKey", "fakeTokenPlaceholder"))
                .withDefaultResourceQuota(new ResourceQuota().withCpuRequest("3m")
                    .withCpuLimit("3m")
                    .withMemoryRequest("5Gi")
                    .withMemoryLimit("5Gi"))
                .withDefaultNetworkPolicy(
                    new NetworkPolicies().withIngress(PolicyRule.ALLOW_SAME_NAMESPACE).withEgress(PolicyRule.ALLOW_ALL))
                .withAdoptionPolicy(AdoptionPolicy.IF_IDENTICAL)
                .withDeletePolicy(DeletePolicy.KEEP))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
