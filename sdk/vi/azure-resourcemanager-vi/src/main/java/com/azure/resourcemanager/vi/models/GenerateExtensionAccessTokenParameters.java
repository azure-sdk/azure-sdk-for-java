// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vi.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Access token generation request's parameters.
 */
@Fluent
public final class GenerateExtensionAccessTokenParameters
    implements JsonSerializable<GenerateExtensionAccessTokenParameters> {
    /*
     * The requested permission
     */
    private PermissionType permissionType;

    /*
     * The requested media type
     */
    private Scope scope;

    /*
     * The extension's resource ID
     */
    private String extensionId;

    /*
     * The video ID
     */
    private String videoId;

    /*
     * Lifetime of the access token (in seconds). Default value: 3600 (1 hour), Max value: 43200 (12 hours). Setting
     * this value is enabled for tokens in 'Video' scope.
     */
    private Integer tokenLifetimeInSeconds;

    /**
     * Creates an instance of GenerateExtensionAccessTokenParameters class.
     */
    public GenerateExtensionAccessTokenParameters() {
    }

    /**
     * Get the permissionType property: The requested permission.
     * 
     * @return the permissionType value.
     */
    public PermissionType permissionType() {
        return this.permissionType;
    }

    /**
     * Set the permissionType property: The requested permission.
     * 
     * @param permissionType the permissionType value to set.
     * @return the GenerateExtensionAccessTokenParameters object itself.
     */
    public GenerateExtensionAccessTokenParameters withPermissionType(PermissionType permissionType) {
        this.permissionType = permissionType;
        return this;
    }

    /**
     * Get the scope property: The requested media type.
     * 
     * @return the scope value.
     */
    public Scope scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The requested media type.
     * 
     * @param scope the scope value to set.
     * @return the GenerateExtensionAccessTokenParameters object itself.
     */
    public GenerateExtensionAccessTokenParameters withScope(Scope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the extensionId property: The extension's resource ID.
     * 
     * @return the extensionId value.
     */
    public String extensionId() {
        return this.extensionId;
    }

    /**
     * Set the extensionId property: The extension's resource ID.
     * 
     * @param extensionId the extensionId value to set.
     * @return the GenerateExtensionAccessTokenParameters object itself.
     */
    public GenerateExtensionAccessTokenParameters withExtensionId(String extensionId) {
        this.extensionId = extensionId;
        return this;
    }

    /**
     * Get the videoId property: The video ID.
     * 
     * @return the videoId value.
     */
    public String videoId() {
        return this.videoId;
    }

    /**
     * Set the videoId property: The video ID.
     * 
     * @param videoId the videoId value to set.
     * @return the GenerateExtensionAccessTokenParameters object itself.
     */
    public GenerateExtensionAccessTokenParameters withVideoId(String videoId) {
        this.videoId = videoId;
        return this;
    }

    /**
     * Get the tokenLifetimeInSeconds property: Lifetime of the access token (in seconds). Default value: 3600 (1 hour),
     * Max value: 43200 (12 hours). Setting this value is enabled for tokens in 'Video' scope.
     * 
     * @return the tokenLifetimeInSeconds value.
     */
    public Integer tokenLifetimeInSeconds() {
        return this.tokenLifetimeInSeconds;
    }

    /**
     * Set the tokenLifetimeInSeconds property: Lifetime of the access token (in seconds). Default value: 3600 (1 hour),
     * Max value: 43200 (12 hours). Setting this value is enabled for tokens in 'Video' scope.
     * 
     * @param tokenLifetimeInSeconds the tokenLifetimeInSeconds value to set.
     * @return the GenerateExtensionAccessTokenParameters object itself.
     */
    public GenerateExtensionAccessTokenParameters withTokenLifetimeInSeconds(Integer tokenLifetimeInSeconds) {
        this.tokenLifetimeInSeconds = tokenLifetimeInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (permissionType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property permissionType in model GenerateExtensionAccessTokenParameters"));
        }
        if (scope() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property scope in model GenerateExtensionAccessTokenParameters"));
        }
        if (extensionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property extensionId in model GenerateExtensionAccessTokenParameters"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GenerateExtensionAccessTokenParameters.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("permissionType",
            this.permissionType == null ? null : this.permissionType.toString());
        jsonWriter.writeStringField("scope", this.scope == null ? null : this.scope.toString());
        jsonWriter.writeStringField("extensionId", this.extensionId);
        jsonWriter.writeStringField("videoId", this.videoId);
        jsonWriter.writeNumberField("tokenLifetimeInSeconds", this.tokenLifetimeInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GenerateExtensionAccessTokenParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GenerateExtensionAccessTokenParameters if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GenerateExtensionAccessTokenParameters.
     */
    public static GenerateExtensionAccessTokenParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GenerateExtensionAccessTokenParameters deserializedGenerateExtensionAccessTokenParameters
                = new GenerateExtensionAccessTokenParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("permissionType".equals(fieldName)) {
                    deserializedGenerateExtensionAccessTokenParameters.permissionType
                        = PermissionType.fromString(reader.getString());
                } else if ("scope".equals(fieldName)) {
                    deserializedGenerateExtensionAccessTokenParameters.scope = Scope.fromString(reader.getString());
                } else if ("extensionId".equals(fieldName)) {
                    deserializedGenerateExtensionAccessTokenParameters.extensionId = reader.getString();
                } else if ("videoId".equals(fieldName)) {
                    deserializedGenerateExtensionAccessTokenParameters.videoId = reader.getString();
                } else if ("tokenLifetimeInSeconds".equals(fieldName)) {
                    deserializedGenerateExtensionAccessTokenParameters.tokenLifetimeInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGenerateExtensionAccessTokenParameters;
        });
    }
}
