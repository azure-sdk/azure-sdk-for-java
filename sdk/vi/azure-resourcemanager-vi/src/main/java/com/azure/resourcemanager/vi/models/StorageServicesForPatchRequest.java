// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vi.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The storage services details.
 */
@Fluent
public final class StorageServicesForPatchRequest implements JsonSerializable<StorageServicesForPatchRequest> {
    /*
     * The user assigned identity to be used to grant permissions
     */
    private String userAssignedIdentity;

    /**
     * Creates an instance of StorageServicesForPatchRequest class.
     */
    public StorageServicesForPatchRequest() {
    }

    /**
     * Get the userAssignedIdentity property: The user assigned identity to be used to grant permissions.
     * 
     * @return the userAssignedIdentity value.
     */
    public String userAssignedIdentity() {
        return this.userAssignedIdentity;
    }

    /**
     * Set the userAssignedIdentity property: The user assigned identity to be used to grant permissions.
     * 
     * @param userAssignedIdentity the userAssignedIdentity value to set.
     * @return the StorageServicesForPatchRequest object itself.
     */
    public StorageServicesForPatchRequest withUserAssignedIdentity(String userAssignedIdentity) {
        this.userAssignedIdentity = userAssignedIdentity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userAssignedIdentity", this.userAssignedIdentity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageServicesForPatchRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageServicesForPatchRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageServicesForPatchRequest.
     */
    public static StorageServicesForPatchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageServicesForPatchRequest deserializedStorageServicesForPatchRequest
                = new StorageServicesForPatchRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userAssignedIdentity".equals(fieldName)) {
                    deserializedStorageServicesForPatchRequest.userAssignedIdentity = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageServicesForPatchRequest;
        });
    }
}
