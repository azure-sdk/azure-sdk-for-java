// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vi.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.vi.models.OpenAiServicesForPatchRequest;
import com.azure.resourcemanager.vi.models.ProvisioningState;
import com.azure.resourcemanager.vi.models.StorageServicesForPatchRequest;
import java.io.IOException;

/**
 * Azure Video Indexer account properties.
 */
@Fluent
public final class AccountPropertiesForPatchRequest implements JsonSerializable<AccountPropertiesForPatchRequest> {
    /*
     * The account's tenant id
     */
    private String tenantId;

    /*
     * The account's data-plane ID
     */
    private String accountId;

    /*
     * The storage services details
     */
    private StorageServicesForPatchRequest storageServices;

    /*
     * The openAi services details
     */
    private OpenAiServicesForPatchRequest openAiServices;

    /*
     * Gets the status of the account at the time the operation was called.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AccountPropertiesForPatchRequest class.
     */
    public AccountPropertiesForPatchRequest() {
    }

    /**
     * Get the tenantId property: The account's tenant id.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the accountId property: The account's data-plane ID.
     * 
     * @return the accountId value.
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Get the storageServices property: The storage services details.
     * 
     * @return the storageServices value.
     */
    public StorageServicesForPatchRequest storageServices() {
        return this.storageServices;
    }

    /**
     * Set the storageServices property: The storage services details.
     * 
     * @param storageServices the storageServices value to set.
     * @return the AccountPropertiesForPatchRequest object itself.
     */
    public AccountPropertiesForPatchRequest withStorageServices(StorageServicesForPatchRequest storageServices) {
        this.storageServices = storageServices;
        return this;
    }

    /**
     * Get the openAiServices property: The openAi services details.
     * 
     * @return the openAiServices value.
     */
    public OpenAiServicesForPatchRequest openAiServices() {
        return this.openAiServices;
    }

    /**
     * Set the openAiServices property: The openAi services details.
     * 
     * @param openAiServices the openAiServices value to set.
     * @return the AccountPropertiesForPatchRequest object itself.
     */
    public AccountPropertiesForPatchRequest withOpenAiServices(OpenAiServicesForPatchRequest openAiServices) {
        this.openAiServices = openAiServices;
        return this;
    }

    /**
     * Get the provisioningState property: Gets the status of the account at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageServices() != null) {
            storageServices().validate();
        }
        if (openAiServices() != null) {
            openAiServices().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("storageServices", this.storageServices);
        jsonWriter.writeJsonField("openAiServices", this.openAiServices);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountPropertiesForPatchRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountPropertiesForPatchRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccountPropertiesForPatchRequest.
     */
    public static AccountPropertiesForPatchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountPropertiesForPatchRequest deserializedAccountPropertiesForPatchRequest
                = new AccountPropertiesForPatchRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenantId".equals(fieldName)) {
                    deserializedAccountPropertiesForPatchRequest.tenantId = reader.getString();
                } else if ("accountId".equals(fieldName)) {
                    deserializedAccountPropertiesForPatchRequest.accountId = reader.getString();
                } else if ("storageServices".equals(fieldName)) {
                    deserializedAccountPropertiesForPatchRequest.storageServices
                        = StorageServicesForPatchRequest.fromJson(reader);
                } else if ("openAiServices".equals(fieldName)) {
                    deserializedAccountPropertiesForPatchRequest.openAiServices
                        = OpenAiServicesForPatchRequest.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAccountPropertiesForPatchRequest.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountPropertiesForPatchRequest;
        });
    }
}
