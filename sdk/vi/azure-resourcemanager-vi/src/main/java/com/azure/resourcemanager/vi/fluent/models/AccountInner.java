// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vi.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.vi.models.ManagedServiceIdentity;
import com.azure.resourcemanager.vi.models.OpenAiServicesForPutRequest;
import com.azure.resourcemanager.vi.models.ProvisioningState;
import com.azure.resourcemanager.vi.models.PublicNetworkAccess;
import com.azure.resourcemanager.vi.models.StorageServicesForPutRequest;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * An Azure Video Indexer account.
 */
@Fluent
public final class AccountInner extends Resource {
    /*
     * List of account properties
     */
    private AccountPropertiesForPutRequest innerProperties;

    /*
     * Managed service identity (system assigned and/or user assigned identities)
     */
    private ManagedServiceIdentity identity;

    /*
     * The system meta data relating to this resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AccountInner class.
     */
    public AccountInner() {
    }

    /**
     * Get the innerProperties property: List of account properties.
     * 
     * @return the innerProperties value.
     */
    private AccountPropertiesForPutRequest innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the identity property: Managed service identity (system assigned and/or user assigned identities).
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Managed service identity (system assigned and/or user assigned identities).
     * 
     * @param identity the identity value to set.
     * @return the AccountInner object itself.
     */
    public AccountInner withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: The system meta data relating to this resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the tenantId property: The account's tenant id.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantId();
    }

    /**
     * Get the accountId property: The account's data-plane ID. This can be set only when connecting an existing classic
     * account.
     * 
     * @return the accountId value.
     */
    public String accountId() {
        return this.innerProperties() == null ? null : this.innerProperties().accountId();
    }

    /**
     * Set the accountId property: The account's data-plane ID. This can be set only when connecting an existing classic
     * account.
     * 
     * @param accountId the accountId value to set.
     * @return the AccountInner object itself.
     */
    public AccountInner withAccountId(String accountId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccountPropertiesForPutRequest();
        }
        this.innerProperties().withAccountId(accountId);
        return this;
    }

    /**
     * Get the accountName property: The account's name.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.innerProperties() == null ? null : this.innerProperties().accountName();
    }

    /**
     * Get the storageServices property: The storage services details.
     * 
     * @return the storageServices value.
     */
    public StorageServicesForPutRequest storageServices() {
        return this.innerProperties() == null ? null : this.innerProperties().storageServices();
    }

    /**
     * Set the storageServices property: The storage services details.
     * 
     * @param storageServices the storageServices value to set.
     * @return the AccountInner object itself.
     */
    public AccountInner withStorageServices(StorageServicesForPutRequest storageServices) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccountPropertiesForPutRequest();
        }
        this.innerProperties().withStorageServices(storageServices);
        return this;
    }

    /**
     * Get the openAiServices property: The openAi services details.
     * 
     * @return the openAiServices value.
     */
    public OpenAiServicesForPutRequest openAiServices() {
        return this.innerProperties() == null ? null : this.innerProperties().openAiServices();
    }

    /**
     * Set the openAiServices property: The openAi services details.
     * 
     * @param openAiServices the openAiServices value to set.
     * @return the AccountInner object itself.
     */
    public AccountInner withOpenAiServices(OpenAiServicesForPutRequest openAiServices) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccountPropertiesForPutRequest();
        }
        this.innerProperties().withOpenAiServices(openAiServices);
        return this;
    }

    /**
     * Get the totalSecondsIndexed property: An integer representing the total seconds that have been indexed on the
     * account.
     * 
     * @return the totalSecondsIndexed value.
     */
    public Integer totalSecondsIndexed() {
        return this.innerProperties() == null ? null : this.innerProperties().totalSecondsIndexed();
    }

    /**
     * Get the totalMinutesIndexed property: An integer representing the total minutes that have been indexed on the
     * account.
     * 
     * @return the totalMinutesIndexed value.
     */
    public Long totalMinutesIndexed() {
        return this.innerProperties() == null ? null : this.innerProperties().totalMinutesIndexed();
    }

    /**
     * Get the publicNetworkAccess property: Whether or not public network access is allowed for the account.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.innerProperties() == null ? null : this.innerProperties().publicNetworkAccess();
    }

    /**
     * Set the publicNetworkAccess property: Whether or not public network access is allowed for the account.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the AccountInner object itself.
     */
    public AccountInner withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccountPropertiesForPutRequest();
        }
        this.innerProperties().withPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connections associated with the account.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().privateEndpointConnections();
    }

    /**
     * Set the privateEndpointConnections property: List of private endpoint connections associated with the account.
     * 
     * @param privateEndpointConnections the privateEndpointConnections value to set.
     * @return the AccountInner object itself.
     */
    public AccountInner
        withPrivateEndpointConnections(List<PrivateEndpointConnectionInner> privateEndpointConnections) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccountPropertiesForPutRequest();
        }
        this.innerProperties().withPrivateEndpointConnections(privateEndpointConnections);
        return this;
    }

    /**
     * Get the provisioningState property: Gets the status of the account at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AccountInner.
     */
    public static AccountInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountInner deserializedAccountInner = new AccountInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAccountInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAccountInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAccountInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedAccountInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAccountInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedAccountInner.innerProperties = AccountPropertiesForPutRequest.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedAccountInner.identity = ManagedServiceIdentity.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAccountInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountInner;
        });
    }
}
