// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vi.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** An Azure Video Analyzer for Media classic account. */
@Fluent
public final class ClassicAccountInner {
    /*
     * The account's name
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /*
     * The account's location
     */
    @JsonProperty(value = "location")
    private String location;

    /*
     * List of classic account properties
     */
    @JsonProperty(value = "mediaServices")
    private ClassicAccountMediaServices innerMediaServices;

    /**
     * Get the name property: The account's name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the location property: The account's location.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The account's location.
     *
     * @param location the location value to set.
     * @return the ClassicAccountInner object itself.
     */
    public ClassicAccountInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the innerMediaServices property: List of classic account properties.
     *
     * @return the innerMediaServices value.
     */
    private ClassicAccountMediaServices innerMediaServices() {
        return this.innerMediaServices;
    }

    /**
     * Get the aadApplicationId property: The aad application id.
     *
     * @return the aadApplicationId value.
     */
    public String aadApplicationId() {
        return this.innerMediaServices() == null ? null : this.innerMediaServices().aadApplicationId();
    }

    /**
     * Set the aadApplicationId property: The aad application id.
     *
     * @param aadApplicationId the aadApplicationId value to set.
     * @return the ClassicAccountInner object itself.
     */
    public ClassicAccountInner withAadApplicationId(String aadApplicationId) {
        if (this.innerMediaServices() == null) {
            this.innerMediaServices = new ClassicAccountMediaServices();
        }
        this.innerMediaServices().withAadApplicationId(aadApplicationId);
        return this;
    }

    /**
     * Get the aadTenantId property: The aad tenant id.
     *
     * @return the aadTenantId value.
     */
    public String aadTenantId() {
        return this.innerMediaServices() == null ? null : this.innerMediaServices().aadTenantId();
    }

    /**
     * Set the aadTenantId property: The aad tenant id.
     *
     * @param aadTenantId the aadTenantId value to set.
     * @return the ClassicAccountInner object itself.
     */
    public ClassicAccountInner withAadTenantId(String aadTenantId) {
        if (this.innerMediaServices() == null) {
            this.innerMediaServices = new ClassicAccountMediaServices();
        }
        this.innerMediaServices().withAadTenantId(aadTenantId);
        return this;
    }

    /**
     * Get the connected property: Represents wether the media services is connected or not.
     *
     * @return the connected value.
     */
    public Boolean connected() {
        return this.innerMediaServices() == null ? null : this.innerMediaServices().connected();
    }

    /**
     * Set the connected property: Represents wether the media services is connected or not.
     *
     * @param connected the connected value to set.
     * @return the ClassicAccountInner object itself.
     */
    public ClassicAccountInner withConnected(Boolean connected) {
        if (this.innerMediaServices() == null) {
            this.innerMediaServices = new ClassicAccountMediaServices();
        }
        this.innerMediaServices().withConnected(connected);
        return this;
    }

    /**
     * Get the eventGridProviderRegistered property: Represents if the media services event grid is connected or not.
     *
     * @return the eventGridProviderRegistered value.
     */
    public Boolean eventGridProviderRegistered() {
        return this.innerMediaServices() == null ? null : this.innerMediaServices().eventGridProviderRegistered();
    }

    /**
     * Set the eventGridProviderRegistered property: Represents if the media services event grid is connected or not.
     *
     * @param eventGridProviderRegistered the eventGridProviderRegistered value to set.
     * @return the ClassicAccountInner object itself.
     */
    public ClassicAccountInner withEventGridProviderRegistered(Boolean eventGridProviderRegistered) {
        if (this.innerMediaServices() == null) {
            this.innerMediaServices = new ClassicAccountMediaServices();
        }
        this.innerMediaServices().withEventGridProviderRegistered(eventGridProviderRegistered);
        return this;
    }

    /**
     * Get the name property: The media services name.
     *
     * @return the name value.
     */
    public String nameMediaServicesName() {
        return this.innerMediaServices() == null ? null : this.innerMediaServices().name();
    }

    /**
     * Set the name property: The media services name.
     *
     * @param name the name value to set.
     * @return the ClassicAccountInner object itself.
     */
    public ClassicAccountInner withNameMediaServicesName(String name) {
        if (this.innerMediaServices() == null) {
            this.innerMediaServices = new ClassicAccountMediaServices();
        }
        this.innerMediaServices().withName(name);
        return this;
    }

    /**
     * Get the resourceGroup property: The resource group that the media services belong to.
     *
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.innerMediaServices() == null ? null : this.innerMediaServices().resourceGroup();
    }

    /**
     * Set the resourceGroup property: The resource group that the media services belong to.
     *
     * @param resourceGroup the resourceGroup value to set.
     * @return the ClassicAccountInner object itself.
     */
    public ClassicAccountInner withResourceGroup(String resourceGroup) {
        if (this.innerMediaServices() == null) {
            this.innerMediaServices = new ClassicAccountMediaServices();
        }
        this.innerMediaServices().withResourceGroup(resourceGroup);
        return this;
    }

    /**
     * Get the streamingEndpointStarted property: Represents wether the media services streaming endpoint has started.
     *
     * @return the streamingEndpointStarted value.
     */
    public Boolean streamingEndpointStarted() {
        return this.innerMediaServices() == null ? null : this.innerMediaServices().streamingEndpointStarted();
    }

    /**
     * Set the streamingEndpointStarted property: Represents wether the media services streaming endpoint has started.
     *
     * @param streamingEndpointStarted the streamingEndpointStarted value to set.
     * @return the ClassicAccountInner object itself.
     */
    public ClassicAccountInner withStreamingEndpointStarted(Boolean streamingEndpointStarted) {
        if (this.innerMediaServices() == null) {
            this.innerMediaServices = new ClassicAccountMediaServices();
        }
        this.innerMediaServices().withStreamingEndpointStarted(streamingEndpointStarted);
        return this;
    }

    /**
     * Get the subscriptionId property: The media services subscriptionId.
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.innerMediaServices() == null ? null : this.innerMediaServices().subscriptionId();
    }

    /**
     * Set the subscriptionId property: The media services subscriptionId.
     *
     * @param subscriptionId the subscriptionId value to set.
     * @return the ClassicAccountInner object itself.
     */
    public ClassicAccountInner withSubscriptionId(String subscriptionId) {
        if (this.innerMediaServices() == null) {
            this.innerMediaServices = new ClassicAccountMediaServices();
        }
        this.innerMediaServices().withSubscriptionId(subscriptionId);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerMediaServices() != null) {
            innerMediaServices().validate();
        }
    }
}
