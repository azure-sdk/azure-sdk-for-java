// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The parameters used to transfer Analytics Units from one account to another.
 */
@Fluent
public final class TransferAnalyticsUnitsParameters implements JsonSerializable<TransferAnalyticsUnitsParameters> {
    /*
     * Current Account's updated Analytics Units
     */
    private Integer newSystemMax;

    /*
     * The list of Accounts provides its Analytics Units except the current Account
     */
    private List<AnalyticsUnitsParameters> participants;

    /*
     * The list of Accounts to receive the Analytics Units except the current Account
     */
    private List<AnalyticsUnitsParameters> recipients;

    /**
     * Creates an instance of TransferAnalyticsUnitsParameters class.
     */
    public TransferAnalyticsUnitsParameters() {
    }

    /**
     * Get the newSystemMax property: Current Account's updated Analytics Units.
     * 
     * @return the newSystemMax value.
     */
    public Integer newSystemMax() {
        return this.newSystemMax;
    }

    /**
     * Set the newSystemMax property: Current Account's updated Analytics Units.
     * 
     * @param newSystemMax the newSystemMax value to set.
     * @return the TransferAnalyticsUnitsParameters object itself.
     */
    public TransferAnalyticsUnitsParameters withNewSystemMax(Integer newSystemMax) {
        this.newSystemMax = newSystemMax;
        return this;
    }

    /**
     * Get the participants property: The list of Accounts provides its Analytics Units except the current Account.
     * 
     * @return the participants value.
     */
    public List<AnalyticsUnitsParameters> participants() {
        return this.participants;
    }

    /**
     * Set the participants property: The list of Accounts provides its Analytics Units except the current Account.
     * 
     * @param participants the participants value to set.
     * @return the TransferAnalyticsUnitsParameters object itself.
     */
    public TransferAnalyticsUnitsParameters withParticipants(List<AnalyticsUnitsParameters> participants) {
        this.participants = participants;
        return this;
    }

    /**
     * Get the recipients property: The list of Accounts to receive the Analytics Units except the current Account.
     * 
     * @return the recipients value.
     */
    public List<AnalyticsUnitsParameters> recipients() {
        return this.recipients;
    }

    /**
     * Set the recipients property: The list of Accounts to receive the Analytics Units except the current Account.
     * 
     * @param recipients the recipients value to set.
     * @return the TransferAnalyticsUnitsParameters object itself.
     */
    public TransferAnalyticsUnitsParameters withRecipients(List<AnalyticsUnitsParameters> recipients) {
        this.recipients = recipients;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (participants() != null) {
            participants().forEach(e -> e.validate());
        }
        if (recipients() != null) {
            recipients().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("newSystemMax", this.newSystemMax);
        jsonWriter.writeArrayField("participants", this.participants, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("recipients", this.recipients, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TransferAnalyticsUnitsParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TransferAnalyticsUnitsParameters if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TransferAnalyticsUnitsParameters.
     */
    public static TransferAnalyticsUnitsParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TransferAnalyticsUnitsParameters deserializedTransferAnalyticsUnitsParameters
                = new TransferAnalyticsUnitsParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("newSystemMax".equals(fieldName)) {
                    deserializedTransferAnalyticsUnitsParameters.newSystemMax = reader.getNullable(JsonReader::getInt);
                } else if ("participants".equals(fieldName)) {
                    List<AnalyticsUnitsParameters> participants
                        = reader.readArray(reader1 -> AnalyticsUnitsParameters.fromJson(reader1));
                    deserializedTransferAnalyticsUnitsParameters.participants = participants;
                } else if ("recipients".equals(fieldName)) {
                    List<AnalyticsUnitsParameters> recipients
                        = reader.readArray(reader1 -> AnalyticsUnitsParameters.fromJson(reader1));
                    deserializedTransferAnalyticsUnitsParameters.recipients = recipients;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTransferAnalyticsUnitsParameters;
        });
    }
}
