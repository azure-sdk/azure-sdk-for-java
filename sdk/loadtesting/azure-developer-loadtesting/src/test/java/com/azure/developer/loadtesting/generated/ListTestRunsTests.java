// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.http.rest.PagedIterable;
import com.azure.developer.loadtesting.models.AutoStopCriteria;
import com.azure.developer.loadtesting.models.FileValidationStatus;
import com.azure.developer.loadtesting.models.LoadTestConfiguration;
import com.azure.developer.loadtesting.models.LoadTestRun;
import com.azure.developer.loadtesting.models.LoadTestingFileType;
import com.azure.developer.loadtesting.models.PassFailCriteria;
import com.azure.developer.loadtesting.models.PassFailTestResult;
import com.azure.developer.loadtesting.models.TestRunArtifacts;
import com.azure.developer.loadtesting.models.TestRunFileInfo;
import com.azure.developer.loadtesting.models.TestRunInputArtifacts;
import com.azure.developer.loadtesting.models.TestRunOutputArtifacts;
import com.azure.developer.loadtesting.models.TestRunStatus;
import java.time.OffsetDateTime;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class ListTestRunsTests extends LoadTestAdministrationClientTestBase {
    @Test
    @Disabled
    public void testListTestRunsTests() {
        // method invocation
        PagedIterable<LoadTestRun> response
            = loadTestRunClient.listTestRuns("executedDateTime", "Performance_LoadTest_Run1",
                "12345678-1234-1234-1234-123456789012", OffsetDateTime.parse("2021-12-05T16:43:48.805Z"),
                OffsetDateTime.parse("2021-12-05T16:43:48.805Z"), "DONE,EXECUTING");

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        LoadTestRun firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "testRunId"
        Assertions.assertEquals("12316678-1234-1234-1234-122451189012", firstItem.getTestRunId());
        // verify property "passFailCriteria"
        PassFailCriteria firstItemPassFailCriteria = firstItem.getPassFailCriteria();
        Assertions.assertNotNull(firstItemPassFailCriteria);
        Assertions.assertNotNull(firstItemPassFailCriteria.getPassFailMetrics());
        Assertions.assertNotNull(firstItemPassFailCriteria.getPassFailServerMetrics());
        // verify property "autoStopCriteria"
        AutoStopCriteria firstItemAutoStopCriteria = firstItem.getAutoStopCriteria();
        Assertions.assertNotNull(firstItemAutoStopCriteria);
        Assertions.assertEquals(true, firstItemAutoStopCriteria.isAutoStopDisabled());
        Assertions.assertEquals(70.0D, firstItemAutoStopCriteria.getErrorRate());
        Assertions.assertNotNull(firstItemAutoStopCriteria.getErrorRateTimeWindow());
        // verify property "secrets"
        Assertions.assertNotNull(firstItem.getSecrets());
        // verify property "environmentVariables"
        Assertions.assertNotNull(firstItem.getEnvironmentVariables());
        // verify property "testRunStatistics"
        Assertions.assertNotNull(firstItem.getTestRunStatistics());
        // verify property "loadTestConfiguration"
        LoadTestConfiguration firstItemLoadTestConfiguration = firstItem.getLoadTestConfiguration();
        Assertions.assertNotNull(firstItemLoadTestConfiguration);
        Assertions.assertEquals(6, firstItemLoadTestConfiguration.getEngineInstances());
        Assertions.assertEquals(true, firstItemLoadTestConfiguration.isSplitAllCsvs());
        // verify property "testArtifacts"
        TestRunArtifacts firstItemTestArtifacts = firstItem.getTestArtifacts();
        Assertions.assertNotNull(firstItemTestArtifacts);
        TestRunInputArtifacts firstItemTestArtifactsInputArtifacts = firstItemTestArtifacts.getInputArtifacts();
        Assertions.assertNotNull(firstItemTestArtifactsInputArtifacts);
        TestRunFileInfo firstItemTestArtifactsInputArtifactsConfigFileInfo
            = firstItemTestArtifactsInputArtifacts.getConfigFileInfo();
        Assertions.assertNotNull(firstItemTestArtifactsInputArtifactsConfigFileInfo);
        Assertions.assertEquals("config.yaml", firstItemTestArtifactsInputArtifactsConfigFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.yaml?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            firstItemTestArtifactsInputArtifactsConfigFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.ADDITIONAL_ARTIFACTS,
            firstItemTestArtifactsInputArtifactsConfigFileInfo.getFileType());
        Assertions.assertNotNull(firstItemTestArtifactsInputArtifactsConfigFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            firstItemTestArtifactsInputArtifactsConfigFileInfo.getValidationStatus());
        TestRunFileInfo firstItemTestArtifactsInputArtifactsTestScriptFileInfo
            = firstItemTestArtifactsInputArtifacts.getTestScriptFileInfo();
        Assertions.assertNotNull(firstItemTestArtifactsInputArtifactsTestScriptFileInfo);
        Assertions.assertEquals("sample.jmx", firstItemTestArtifactsInputArtifactsTestScriptFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.jmx?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            firstItemTestArtifactsInputArtifactsTestScriptFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.JMX_FILE,
            firstItemTestArtifactsInputArtifactsTestScriptFileInfo.getFileType());
        Assertions.assertNotNull(firstItemTestArtifactsInputArtifactsTestScriptFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.VALIDATION_SUCCESS,
            firstItemTestArtifactsInputArtifactsTestScriptFileInfo.getValidationStatus());
        TestRunFileInfo firstItemTestArtifactsInputArtifactsUserPropertyFileInfo
            = firstItemTestArtifactsInputArtifacts.getUserPropertyFileInfo();
        Assertions.assertNotNull(firstItemTestArtifactsInputArtifactsUserPropertyFileInfo);
        Assertions.assertEquals("user.properties",
            firstItemTestArtifactsInputArtifactsUserPropertyFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.properties?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            firstItemTestArtifactsInputArtifactsUserPropertyFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.USER_PROPERTIES,
            firstItemTestArtifactsInputArtifactsUserPropertyFileInfo.getFileType());
        Assertions.assertNotNull(firstItemTestArtifactsInputArtifactsUserPropertyFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            firstItemTestArtifactsInputArtifactsUserPropertyFileInfo.getValidationStatus());
        TestRunFileInfo firstItemTestArtifactsInputArtifactsInputArtifactsZipFileInfo
            = firstItemTestArtifactsInputArtifacts.getInputArtifactsZipFileInfo();
        Assertions.assertNotNull(firstItemTestArtifactsInputArtifactsInputArtifactsZipFileInfo);
        Assertions.assertEquals("inputartifacts.zip",
            firstItemTestArtifactsInputArtifactsInputArtifactsZipFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.zip?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            firstItemTestArtifactsInputArtifactsInputArtifactsZipFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.ADDITIONAL_ARTIFACTS,
            firstItemTestArtifactsInputArtifactsInputArtifactsZipFileInfo.getFileType());
        Assertions.assertNotNull(firstItemTestArtifactsInputArtifactsInputArtifactsZipFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            firstItemTestArtifactsInputArtifactsInputArtifactsZipFileInfo.getValidationStatus());
        List<TestRunFileInfo> firstItemTestArtifactsInputArtifactsAdditionalFileInfo
            = firstItemTestArtifactsInputArtifacts.getAdditionalFileInfo();
        Assertions.assertEquals(0, firstItemTestArtifactsInputArtifactsAdditionalFileInfo.size());
        TestRunOutputArtifacts firstItemTestArtifactsOutputArtifacts = firstItemTestArtifacts.getOutputArtifacts();
        Assertions.assertNotNull(firstItemTestArtifactsOutputArtifacts);
        TestRunFileInfo firstItemTestArtifactsOutputArtifactsResultFileInfo
            = firstItemTestArtifactsOutputArtifacts.getResultFileInfo();
        Assertions.assertNotNull(firstItemTestArtifactsOutputArtifactsResultFileInfo);
        Assertions.assertEquals("sample.jmx", firstItemTestArtifactsOutputArtifactsResultFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.zip?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            firstItemTestArtifactsOutputArtifactsResultFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.JMX_FILE,
            firstItemTestArtifactsOutputArtifactsResultFileInfo.getFileType());
        Assertions.assertNotNull(firstItemTestArtifactsOutputArtifactsResultFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.VALIDATION_SUCCESS,
            firstItemTestArtifactsOutputArtifactsResultFileInfo.getValidationStatus());
        TestRunFileInfo firstItemTestArtifactsOutputArtifactsLogsFileInfo
            = firstItemTestArtifactsOutputArtifacts.getLogsFileInfo();
        Assertions.assertNotNull(firstItemTestArtifactsOutputArtifactsLogsFileInfo);
        Assertions.assertEquals("worker.log", firstItemTestArtifactsOutputArtifactsLogsFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.zip?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            firstItemTestArtifactsOutputArtifactsLogsFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.ADDITIONAL_ARTIFACTS,
            firstItemTestArtifactsOutputArtifactsLogsFileInfo.getFileType());
        Assertions.assertNotNull(firstItemTestArtifactsOutputArtifactsLogsFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            firstItemTestArtifactsOutputArtifactsLogsFileInfo.getValidationStatus());
        // verify property "testResult"
        Assertions.assertEquals(PassFailTestResult.PASSED, firstItem.getTestResult());
        // verify property "virtualUsers"
        Assertions.assertEquals(4, firstItem.getVirtualUsers());
        // verify property "displayName"
        Assertions.assertEquals("Performance_LoadTest_Run1", firstItem.getDisplayName());
        // verify property "testId"
        Assertions.assertEquals("12345678-1234-1234-1234-123456789012", firstItem.getTestId());
        // verify property "description"
        Assertions.assertEquals("sample description", firstItem.getDescription());
        // verify property "status"
        Assertions.assertEquals(TestRunStatus.DONE, firstItem.getStatus());
        // verify property "startDateTime"
        Assertions.assertNotNull(firstItem.getStartDateTime());
        // verify property "endDateTime"
        Assertions.assertNotNull(firstItem.getEndDateTime());
        // verify property "executedDateTime"
        Assertions.assertNotNull(firstItem.getExecutedDateTime());
        // verify property "portalUrl"
        Assertions.assertEquals("https://portal.azure.com/dummyresource", firstItem.getPortalUrl());
        // verify property "duration"
        Assertions.assertEquals(18L, firstItem.getDuration());
        // verify property "virtualUserHours"
        Assertions.assertEquals(20.5D, firstItem.getVirtualUserHours());
        // verify property "subnetId"
        Assertions.assertEquals(
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Network/virtualNetworks/samplenetworkresource/subnets/AAAAA0A0A0",
            firstItem.getSubnetId());
        // verify property "createdDateTime"
        Assertions.assertNotNull(firstItem.getCreatedDateTime());
        // verify property "createdBy"
        Assertions.assertEquals("user@contoso.com", firstItem.getCreatedBy());
        // verify property "lastModifiedDateTime"
        Assertions.assertNotNull(firstItem.getLastModifiedDateTime());
        // verify property "lastModifiedBy"
        Assertions.assertEquals("user@contoso.com", firstItem.getLastModifiedBy());
    }
}
