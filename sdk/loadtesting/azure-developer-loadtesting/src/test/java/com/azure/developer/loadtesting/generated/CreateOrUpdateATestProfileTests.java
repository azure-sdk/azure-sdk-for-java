// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.developer.loadtesting.models.FunctionFlexConsumptionResourceConfiguration;
import com.azure.developer.loadtesting.models.FunctionFlexConsumptionTargetResourceConfigurations;
import com.azure.developer.loadtesting.models.ResourceKind;
import com.azure.developer.loadtesting.models.TargetResourceConfigurations;
import com.azure.developer.loadtesting.models.TestProfile;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class CreateOrUpdateATestProfileTests extends LoadTestAdministrationClientTestBase {
    @Test
    @Disabled
    public void testCreateOrUpdateATestProfileTests() {
        // method invocation
        TestProfile response = loadTestAdministrationClient.createOrUpdateTestProfile(
            "12345678-1234-1234-1234-123456789012",
            new TestProfile().setDisplayName("Performance_TestProfile")
                .setDescription("sample description")
                .setTestId("12346-abcd-6789")
                .setTargetResourceId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Web/sites/myfunctionapp")
                .setTargetResourceConfigurations(
                    new FunctionFlexConsumptionTargetResourceConfigurations().setConfigurations(mapOf("config1",
                        new FunctionFlexConsumptionResourceConfiguration().setInstanceMemoryMB(2048L)
                            .setHttpConcurrency(16L),
                        "config2", new FunctionFlexConsumptionResourceConfiguration().setInstanceMemoryMB(4096L)
                            .setHttpConcurrency(16L)))));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "testProfileId"
        Assertions.assertEquals("12345678-1234-1234-1234-123456789012", response.getTestProfileId());
        // verify property "displayName"
        Assertions.assertEquals("Performance_TestProfile", response.getDisplayName());
        // verify property "description"
        Assertions.assertEquals("sample description", response.getDescription());
        // verify property "testId"
        Assertions.assertEquals("12346-abcd-6789", response.getTestId());
        // verify property "targetResourceId"
        Assertions.assertEquals(
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Web/sites/myfunctionapp",
            response.getTargetResourceId());
        // verify property "targetResourceConfigurations"
        TargetResourceConfigurations responseTargetResourceConfigurations = response.getTargetResourceConfigurations();
        Assertions.assertNotNull(responseTargetResourceConfigurations);
        Assertions.assertEquals(ResourceKind.FUNCTIONS_FLEX_CONSUMPTION,
            responseTargetResourceConfigurations.getKind());
        // verify property "createdDateTime"
        Assertions.assertNotNull(response.getCreatedDateTime());
        // verify property "createdBy"
        Assertions.assertEquals("user@contoso.com", response.getCreatedBy());
        // verify property "lastModifiedDateTime"
        Assertions.assertNotNull(response.getLastModifiedDateTime());
        // verify property "lastModifiedBy"
        Assertions.assertEquals("user@contoso.com", response.getLastModifiedBy());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
