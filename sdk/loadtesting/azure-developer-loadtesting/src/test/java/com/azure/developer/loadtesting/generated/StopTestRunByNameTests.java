// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.developer.loadtesting.models.FileValidationStatus;
import com.azure.developer.loadtesting.models.LoadTestConfiguration;
import com.azure.developer.loadtesting.models.LoadTestRun;
import com.azure.developer.loadtesting.models.LoadTestingFileType;
import com.azure.developer.loadtesting.models.PassFailCriteria;
import com.azure.developer.loadtesting.models.PassFailTestResult;
import com.azure.developer.loadtesting.models.TestRunArtifacts;
import com.azure.developer.loadtesting.models.TestRunFileInfo;
import com.azure.developer.loadtesting.models.TestRunInputArtifacts;
import com.azure.developer.loadtesting.models.TestRunOutputArtifacts;
import com.azure.developer.loadtesting.models.TestRunStatus;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class StopTestRunByNameTests extends LoadTestAdministrationClientTestBase {
    @Test
    @Disabled
    public void testStopTestRunByNameTests() {
        // method invocation
        LoadTestRun response = loadTestRunClient.stopTestRun("12316678-1234-1234-1234-122451189012");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "testRunId"
        Assertions.assertEquals("12316678-1234-1234-1234-122451189012", response.getTestRunId());
        // verify property "passFailCriteria"
        PassFailCriteria responsePassFailCriteria = response.getPassFailCriteria();
        Assertions.assertNotNull(responsePassFailCriteria);
        Assertions.assertNotNull(responsePassFailCriteria.getPassFailMetrics());
        Assertions.assertNotNull(responsePassFailCriteria.getPassFailServerMetrics());
        // verify property "secrets"
        Assertions.assertNotNull(response.getSecrets());
        // verify property "environmentVariables"
        Assertions.assertNotNull(response.getEnvironmentVariables());
        // verify property "loadTestConfiguration"
        LoadTestConfiguration responseLoadTestConfiguration = response.getLoadTestConfiguration();
        Assertions.assertNotNull(responseLoadTestConfiguration);
        Assertions.assertEquals(6, responseLoadTestConfiguration.getEngineInstances());
        Assertions.assertEquals(true, responseLoadTestConfiguration.isSplitAllCsvs());
        // verify property "testArtifacts"
        TestRunArtifacts responseTestArtifacts = response.getTestArtifacts();
        Assertions.assertNotNull(responseTestArtifacts);
        TestRunInputArtifacts responseTestArtifactsInputArtifacts = responseTestArtifacts.getInputArtifacts();
        Assertions.assertNotNull(responseTestArtifactsInputArtifacts);
        TestRunFileInfo responseTestArtifactsInputArtifactsConfigFileInfo
            = responseTestArtifactsInputArtifacts.getConfigFileInfo();
        Assertions.assertNotNull(responseTestArtifactsInputArtifactsConfigFileInfo);
        Assertions.assertEquals("config.yaml", responseTestArtifactsInputArtifactsConfigFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.yaml?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            responseTestArtifactsInputArtifactsConfigFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.ADDITIONAL_ARTIFACTS,
            responseTestArtifactsInputArtifactsConfigFileInfo.getFileType());
        Assertions.assertNotNull(responseTestArtifactsInputArtifactsConfigFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            responseTestArtifactsInputArtifactsConfigFileInfo.getValidationStatus());
        TestRunFileInfo responseTestArtifactsInputArtifactsTestScriptFileInfo
            = responseTestArtifactsInputArtifacts.getTestScriptFileInfo();
        Assertions.assertNotNull(responseTestArtifactsInputArtifactsTestScriptFileInfo);
        Assertions.assertEquals("sample.jmx", responseTestArtifactsInputArtifactsTestScriptFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.jmx?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            responseTestArtifactsInputArtifactsTestScriptFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.JMX_FILE,
            responseTestArtifactsInputArtifactsTestScriptFileInfo.getFileType());
        Assertions.assertNotNull(responseTestArtifactsInputArtifactsTestScriptFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.VALIDATION_SUCCESS,
            responseTestArtifactsInputArtifactsTestScriptFileInfo.getValidationStatus());
        TestRunFileInfo responseTestArtifactsInputArtifactsUserPropertyFileInfo
            = responseTestArtifactsInputArtifacts.getUserPropertyFileInfo();
        Assertions.assertNotNull(responseTestArtifactsInputArtifactsUserPropertyFileInfo);
        Assertions.assertEquals("user.properties",
            responseTestArtifactsInputArtifactsUserPropertyFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.properties?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            responseTestArtifactsInputArtifactsUserPropertyFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.USER_PROPERTIES,
            responseTestArtifactsInputArtifactsUserPropertyFileInfo.getFileType());
        Assertions.assertNotNull(responseTestArtifactsInputArtifactsUserPropertyFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            responseTestArtifactsInputArtifactsUserPropertyFileInfo.getValidationStatus());
        TestRunFileInfo responseTestArtifactsInputArtifactsInputArtifactsZipFileInfo
            = responseTestArtifactsInputArtifacts.getInputArtifactsZipFileInfo();
        Assertions.assertNotNull(responseTestArtifactsInputArtifactsInputArtifactsZipFileInfo);
        Assertions.assertEquals("inputartifacts.zip",
            responseTestArtifactsInputArtifactsInputArtifactsZipFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.zip?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            responseTestArtifactsInputArtifactsInputArtifactsZipFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.ADDITIONAL_ARTIFACTS,
            responseTestArtifactsInputArtifactsInputArtifactsZipFileInfo.getFileType());
        Assertions.assertNotNull(responseTestArtifactsInputArtifactsInputArtifactsZipFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            responseTestArtifactsInputArtifactsInputArtifactsZipFileInfo.getValidationStatus());
        List<TestRunFileInfo> responseTestArtifactsInputArtifactsAdditionalFileInfo
            = responseTestArtifactsInputArtifacts.getAdditionalFileInfo();
        Assertions.assertEquals(0, responseTestArtifactsInputArtifactsAdditionalFileInfo.size());
        TestRunOutputArtifacts responseTestArtifactsOutputArtifacts = responseTestArtifacts.getOutputArtifacts();
        Assertions.assertNotNull(responseTestArtifactsOutputArtifacts);
        // verify property "testResult"
        Assertions.assertEquals(PassFailTestResult.NOT_APPLICABLE, response.getTestResult());
        // verify property "displayName"
        Assertions.assertEquals("Performance_LoadTest_Run1", response.getDisplayName());
        // verify property "testId"
        Assertions.assertEquals("12345678-1234-1234-1234-123456789012", response.getTestId());
        // verify property "description"
        Assertions.assertEquals("sample description", response.getDescription());
        // verify property "status"
        Assertions.assertEquals(TestRunStatus.CANCELLING, response.getStatus());
        // verify property "startDateTime"
        Assertions.assertNotNull(response.getStartDateTime());
        // verify property "endDateTime"
        Assertions.assertNotNull(response.getEndDateTime());
        // verify property "executedDateTime"
        Assertions.assertNotNull(response.getExecutedDateTime());
        // verify property "portalUrl"
        Assertions.assertEquals("https://portal.azure.com/dummyresource", response.getPortalUrl());
        // verify property "subnetId"
        Assertions.assertEquals(
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Network/virtualNetworks/samplenetworkresource/subnets/AAAAA0A0A0",
            response.getSubnetId());
        // verify property "createdDateTime"
        Assertions.assertNotNull(response.getCreatedDateTime());
        // verify property "createdBy"
        Assertions.assertEquals("user@contoso.com", response.getCreatedBy());
        // verify property "lastModifiedDateTime"
        Assertions.assertNotNull(response.getLastModifiedDateTime());
        // verify property "lastModifiedBy"
        Assertions.assertEquals("user@contoso.com", response.getLastModifiedBy());
    }
}
