// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.developer.loadtesting.models.AutoStopCriteria;
import com.azure.developer.loadtesting.models.FileValidationStatus;
import com.azure.developer.loadtesting.models.LoadTest;
import com.azure.developer.loadtesting.models.LoadTestConfiguration;
import com.azure.developer.loadtesting.models.LoadTestingFileType;
import com.azure.developer.loadtesting.models.LoadTestingManagedIdentityType;
import com.azure.developer.loadtesting.models.PassFailCriteria;
import com.azure.developer.loadtesting.models.TestFileInfo;
import com.azure.developer.loadtesting.models.TestInputArtifacts;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class GetALoadTestTests extends LoadTestAdministrationClientTestBase {
    @Test
    @Disabled
    public void testGetALoadTestTests() {
        // method invocation
        LoadTest response = loadTestAdministrationClient.getTest("12345678-1234-1234-1234-123456789012");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "passFailCriteria"
        PassFailCriteria responsePassFailCriteria = response.getPassFailCriteria();
        Assertions.assertNotNull(responsePassFailCriteria);
        Assertions.assertNotNull(responsePassFailCriteria.getPassFailMetrics());
        Assertions.assertNotNull(responsePassFailCriteria.getPassFailServerMetrics());
        // verify property "autoStopCriteria"
        AutoStopCriteria responseAutoStopCriteria = response.getAutoStopCriteria();
        Assertions.assertNotNull(responseAutoStopCriteria);
        Assertions.assertEquals(true, responseAutoStopCriteria.isAutoStopDisabled());
        Assertions.assertEquals(70.0D, responseAutoStopCriteria.getErrorRate());
        Assertions.assertNotNull(responseAutoStopCriteria.getErrorRateTimeWindow());
        // verify property "secrets"
        Assertions.assertNotNull(response.getSecrets());
        // verify property "environmentVariables"
        Assertions.assertNotNull(response.getEnvironmentVariables());
        // verify property "loadTestConfiguration"
        LoadTestConfiguration responseLoadTestConfiguration = response.getLoadTestConfiguration();
        Assertions.assertNotNull(responseLoadTestConfiguration);
        Assertions.assertEquals(6, responseLoadTestConfiguration.getEngineInstances());
        Assertions.assertEquals(true, responseLoadTestConfiguration.isSplitAllCsvs());
        // verify property "inputArtifacts"
        TestInputArtifacts responseInputArtifacts = response.getInputArtifacts();
        Assertions.assertNotNull(responseInputArtifacts);
        TestFileInfo responseInputArtifactsConfigFileInfo = responseInputArtifacts.getConfigFileInfo();
        Assertions.assertNotNull(responseInputArtifactsConfigFileInfo);
        Assertions.assertEquals("config.yaml", responseInputArtifactsConfigFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.yaml?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            responseInputArtifactsConfigFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.ADDITIONAL_ARTIFACTS,
            responseInputArtifactsConfigFileInfo.getFileType());
        Assertions.assertNotNull(responseInputArtifactsConfigFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            responseInputArtifactsConfigFileInfo.getValidationStatus());
        TestFileInfo responseInputArtifactsTestScriptFileInfo = responseInputArtifacts.getTestScriptFileInfo();
        Assertions.assertNotNull(responseInputArtifactsTestScriptFileInfo);
        Assertions.assertEquals("sample.jmx", responseInputArtifactsTestScriptFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.jmx?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            responseInputArtifactsTestScriptFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.JMX_FILE, responseInputArtifactsTestScriptFileInfo.getFileType());
        Assertions.assertNotNull(responseInputArtifactsTestScriptFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.VALIDATION_SUCCESS,
            responseInputArtifactsTestScriptFileInfo.getValidationStatus());
        TestFileInfo responseInputArtifactsUserPropertyFileInfo = responseInputArtifacts.getUserPropertyFileInfo();
        Assertions.assertNotNull(responseInputArtifactsUserPropertyFileInfo);
        Assertions.assertEquals("user.properties", responseInputArtifactsUserPropertyFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.properties?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            responseInputArtifactsUserPropertyFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.USER_PROPERTIES,
            responseInputArtifactsUserPropertyFileInfo.getFileType());
        Assertions.assertNotNull(responseInputArtifactsUserPropertyFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            responseInputArtifactsUserPropertyFileInfo.getValidationStatus());
        TestFileInfo responseInputArtifactsInputArtifactsZipFileInfo
            = responseInputArtifacts.getInputArtifactsZipFileInfo();
        Assertions.assertNotNull(responseInputArtifactsInputArtifactsZipFileInfo);
        Assertions.assertEquals("inputartifacts.zip", responseInputArtifactsInputArtifactsZipFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.zip?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            responseInputArtifactsInputArtifactsZipFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.ADDITIONAL_ARTIFACTS,
            responseInputArtifactsInputArtifactsZipFileInfo.getFileType());
        Assertions.assertNotNull(responseInputArtifactsInputArtifactsZipFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            responseInputArtifactsInputArtifactsZipFileInfo.getValidationStatus());
        List<TestFileInfo> responseInputArtifactsAdditionalFileInfo = responseInputArtifacts.getAdditionalFileInfo();
        Assertions.assertEquals(0, responseInputArtifactsAdditionalFileInfo.size());
        // verify property "testId"
        Assertions.assertEquals("12345678-1234-1234-1234-123456789012", response.getTestId());
        // verify property "description"
        Assertions.assertEquals("sample description", response.getDescription());
        // verify property "displayName"
        Assertions.assertEquals("Performance_LoadTest", response.getDisplayName());
        // verify property "subnetId"
        Assertions.assertEquals(
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Network/virtualNetworks/samplenetworkresource/subnets/AAAAA0A0A0",
            response.getSubnetId());
        // verify property "keyvaultReferenceIdentityType"
        Assertions.assertEquals("UserAssigned", response.getKeyvaultReferenceIdentityType());
        // verify property "keyvaultReferenceIdentityId"
        Assertions.assertEquals(
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1",
            response.getKeyvaultReferenceIdentityId());
        // verify property "metricsReferenceIdentityType"
        Assertions.assertEquals(LoadTestingManagedIdentityType.USER_ASSIGNED,
            response.getMetricsReferenceIdentityType());
        // verify property "metricsReferenceIdentityId"
        Assertions.assertEquals(
            "/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename",
            response.getMetricsReferenceIdentityId());
        // verify property "createdDateTime"
        Assertions.assertNotNull(response.getCreatedDateTime());
        // verify property "createdBy"
        Assertions.assertEquals("user@contoso.com", response.getCreatedBy());
        // verify property "lastModifiedDateTime"
        Assertions.assertNotNull(response.getLastModifiedDateTime());
        // verify property "lastModifiedBy"
        Assertions.assertEquals("user@contoso.com", response.getLastModifiedBy());
    }
}
