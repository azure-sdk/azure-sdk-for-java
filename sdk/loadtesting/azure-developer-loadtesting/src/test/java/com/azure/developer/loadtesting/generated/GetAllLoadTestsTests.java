// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.http.rest.PagedIterable;
import com.azure.developer.loadtesting.models.AutoStopCriteria;
import com.azure.developer.loadtesting.models.FileValidationStatus;
import com.azure.developer.loadtesting.models.LoadTest;
import com.azure.developer.loadtesting.models.LoadTestConfiguration;
import com.azure.developer.loadtesting.models.LoadTestingFileType;
import com.azure.developer.loadtesting.models.LoadTestingManagedIdentityType;
import com.azure.developer.loadtesting.models.PassFailCriteria;
import com.azure.developer.loadtesting.models.TestFileInfo;
import com.azure.developer.loadtesting.models.TestInputArtifacts;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class GetAllLoadTestsTests extends LoadTestAdministrationClientTestBase {
    @Test
    @Disabled
    public void testGetAllLoadTestsTests() {
        // method invocation
        PagedIterable<LoadTest> response
            = loadTestAdministrationClient.listTests("executedDateTime", "Performance_LoadTest", null, null);

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        LoadTest firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "passFailCriteria"
        PassFailCriteria firstItemPassFailCriteria = firstItem.getPassFailCriteria();
        Assertions.assertNotNull(firstItemPassFailCriteria);
        Assertions.assertNotNull(firstItemPassFailCriteria.getPassFailMetrics());
        Assertions.assertNotNull(firstItemPassFailCriteria.getPassFailServerMetrics());
        // verify property "autoStopCriteria"
        AutoStopCriteria firstItemAutoStopCriteria = firstItem.getAutoStopCriteria();
        Assertions.assertNotNull(firstItemAutoStopCriteria);
        Assertions.assertEquals(true, firstItemAutoStopCriteria.isAutoStopDisabled());
        Assertions.assertEquals(70.0D, firstItemAutoStopCriteria.getErrorRate());
        Assertions.assertNotNull(firstItemAutoStopCriteria.getErrorRateTimeWindow());
        // verify property "secrets"
        Assertions.assertNotNull(firstItem.getSecrets());
        // verify property "environmentVariables"
        Assertions.assertNotNull(firstItem.getEnvironmentVariables());
        // verify property "loadTestConfiguration"
        LoadTestConfiguration firstItemLoadTestConfiguration = firstItem.getLoadTestConfiguration();
        Assertions.assertNotNull(firstItemLoadTestConfiguration);
        Assertions.assertEquals(6, firstItemLoadTestConfiguration.getEngineInstances());
        Assertions.assertEquals(true, firstItemLoadTestConfiguration.isSplitAllCsvs());
        // verify property "inputArtifacts"
        TestInputArtifacts firstItemInputArtifacts = firstItem.getInputArtifacts();
        Assertions.assertNotNull(firstItemInputArtifacts);
        TestFileInfo firstItemInputArtifactsConfigFileInfo = firstItemInputArtifacts.getConfigFileInfo();
        Assertions.assertNotNull(firstItemInputArtifactsConfigFileInfo);
        Assertions.assertEquals("config.yaml", firstItemInputArtifactsConfigFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.yaml?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            firstItemInputArtifactsConfigFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.ADDITIONAL_ARTIFACTS,
            firstItemInputArtifactsConfigFileInfo.getFileType());
        Assertions.assertNotNull(firstItemInputArtifactsConfigFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            firstItemInputArtifactsConfigFileInfo.getValidationStatus());
        TestFileInfo firstItemInputArtifactsTestScriptFileInfo = firstItemInputArtifacts.getTestScriptFileInfo();
        Assertions.assertNotNull(firstItemInputArtifactsTestScriptFileInfo);
        Assertions.assertEquals("sample.jmx", firstItemInputArtifactsTestScriptFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.jmx?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            firstItemInputArtifactsTestScriptFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.JMX_FILE, firstItemInputArtifactsTestScriptFileInfo.getFileType());
        Assertions.assertNotNull(firstItemInputArtifactsTestScriptFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.VALIDATION_SUCCESS,
            firstItemInputArtifactsTestScriptFileInfo.getValidationStatus());
        TestFileInfo firstItemInputArtifactsUserPropertyFileInfo = firstItemInputArtifacts.getUserPropertyFileInfo();
        Assertions.assertNotNull(firstItemInputArtifactsUserPropertyFileInfo);
        Assertions.assertEquals("user.properties", firstItemInputArtifactsUserPropertyFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.properties?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            firstItemInputArtifactsUserPropertyFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.USER_PROPERTIES,
            firstItemInputArtifactsUserPropertyFileInfo.getFileType());
        Assertions.assertNotNull(firstItemInputArtifactsUserPropertyFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            firstItemInputArtifactsUserPropertyFileInfo.getValidationStatus());
        TestFileInfo firstItemInputArtifactsInputArtifactsZipFileInfo
            = firstItemInputArtifacts.getInputArtifactsZipFileInfo();
        Assertions.assertNotNull(firstItemInputArtifactsInputArtifactsZipFileInfo);
        Assertions.assertEquals("inputartifacts.zip", firstItemInputArtifactsInputArtifactsZipFileInfo.getFileName());
        Assertions.assertEquals(
            "https://somestorageaccount.blob.core.windows.net/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000.zip?sv=2019-12-12&st=2021-01-26T18%3A30%3A20Z&se=2021-02-05T18%3A30%3A00Z&sr=c&sp=rl&sig=d7PZKyQsIeE6xb%2B1M4Yb56I%2FEEKoNIF65D%2Fs0IFsYcE%3D",
            firstItemInputArtifactsInputArtifactsZipFileInfo.getUrl());
        Assertions.assertEquals(LoadTestingFileType.ADDITIONAL_ARTIFACTS,
            firstItemInputArtifactsInputArtifactsZipFileInfo.getFileType());
        Assertions.assertNotNull(firstItemInputArtifactsInputArtifactsZipFileInfo.getExpiresOn());
        Assertions.assertEquals(FileValidationStatus.fromString(""),
            firstItemInputArtifactsInputArtifactsZipFileInfo.getValidationStatus());
        List<TestFileInfo> firstItemInputArtifactsAdditionalFileInfo = firstItemInputArtifacts.getAdditionalFileInfo();
        Assertions.assertEquals(0, firstItemInputArtifactsAdditionalFileInfo.size());
        // verify property "testId"
        Assertions.assertEquals("12345678-1234-1234-1234-123456789012", firstItem.getTestId());
        // verify property "description"
        Assertions.assertEquals("sample description", firstItem.getDescription());
        // verify property "displayName"
        Assertions.assertEquals("Performance_LoadTest", firstItem.getDisplayName());
        // verify property "subnetId"
        Assertions.assertEquals(
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Network/virtualNetworks/samplenetworkresource/subnets/AAAAA0A0A0",
            firstItem.getSubnetId());
        // verify property "keyvaultReferenceIdentityType"
        Assertions.assertEquals("UserAssigned", firstItem.getKeyvaultReferenceIdentityType());
        // verify property "keyvaultReferenceIdentityId"
        Assertions.assertEquals(
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1",
            firstItem.getKeyvaultReferenceIdentityId());
        // verify property "metricsReferenceIdentityType"
        Assertions.assertEquals(LoadTestingManagedIdentityType.USER_ASSIGNED,
            firstItem.getMetricsReferenceIdentityType());
        // verify property "metricsReferenceIdentityId"
        Assertions.assertEquals(
            "/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename",
            firstItem.getMetricsReferenceIdentityId());
        // verify property "createdDateTime"
        Assertions.assertNotNull(firstItem.getCreatedDateTime());
        // verify property "createdBy"
        Assertions.assertEquals("user@contoso.com", firstItem.getCreatedBy());
        // verify property "lastModifiedDateTime"
        Assertions.assertNotNull(firstItem.getLastModifiedDateTime());
        // verify property "lastModifiedBy"
        Assertions.assertEquals("user@contoso.com", firstItem.getLastModifiedBy());
    }
}
