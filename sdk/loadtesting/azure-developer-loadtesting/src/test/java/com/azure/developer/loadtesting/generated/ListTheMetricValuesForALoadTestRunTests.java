// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.generated;

import com.azure.core.http.rest.PagedIterable;
import com.azure.developer.loadtesting.models.DimensionFilter;
import com.azure.developer.loadtesting.models.DimensionValue;
import com.azure.developer.loadtesting.models.MetricValue;
import com.azure.developer.loadtesting.models.MetricsFilters;
import com.azure.developer.loadtesting.models.TimeGrain;
import com.azure.developer.loadtesting.models.TimeSeriesElement;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class ListTheMetricValuesForALoadTestRunTests extends LoadTestAdministrationClientTestBase {
    @Test
    @Disabled
    public void testListTheMetricValuesForALoadTestRunTests() {
        // method invocation
        PagedIterable<TimeSeriesElement> response = loadTestRunClient.listMetrics(
            "12316678-1234-1234-1234-122451189012", "ActiveThreads", "LoadTestRunMetrics",
            "2022-09-24T19:00:40Z/2022-09-25T19:28:40Z", "Average", TimeGrain.ONE_HOUR, new MetricsFilters().setFilters(
                Arrays.asList(new DimensionFilter().setName("SamplerName").setValues(Arrays.asList("HTTP Request")))));

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        TimeSeriesElement firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "data"
        List<MetricValue> firstItemData = firstItem.getData();
        MetricValue firstItemDataFirstItem = firstItemData.iterator().next();
        Assertions.assertNotNull(firstItemDataFirstItem);
        Assertions.assertNotNull(firstItemDataFirstItem.getTimestamp());
        Assertions.assertEquals(10.0D, firstItemDataFirstItem.getValue());
        // verify property "dimensionValues"
        List<DimensionValue> firstItemDimensionValues = firstItem.getDimensionValues();
        DimensionValue firstItemDimensionValuesFirstItem = firstItemDimensionValues.iterator().next();
        Assertions.assertNotNull(firstItemDimensionValuesFirstItem);
        Assertions.assertEquals("SamplerName", firstItemDimensionValuesFirstItem.getName());
        Assertions.assertEquals("HighLoadTest", firstItemDimensionValuesFirstItem.getValue());
    }
}
