// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * The notification event filter when the event type is TriggerDisabled.
 */
@Immutable
public final class TriggerDisabledNotificationEventFilter extends TestsNotificationEventFilter {
    /*
     * The event type
     */
    @Generated
    private NotificationEventType kind = NotificationEventType.TRIGGER_DISABLED;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of TriggerDisabledNotificationEventFilter class.
     */
    @Generated
    public TriggerDisabledNotificationEventFilter() {
    }

    /**
     * Get the kind property: The event type.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public NotificationEventType getKind() {
        return this.kind;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getTestsNotificationEventFilterAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TriggerDisabledNotificationEventFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TriggerDisabledNotificationEventFilter if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TriggerDisabledNotificationEventFilter.
     */
    @Generated
    public static TriggerDisabledNotificationEventFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TriggerDisabledNotificationEventFilter deserializedTriggerDisabledNotificationEventFilter
                = new TriggerDisabledNotificationEventFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedTriggerDisabledNotificationEventFilter.kind
                        = NotificationEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTriggerDisabledNotificationEventFilter;
        });
    }
}
