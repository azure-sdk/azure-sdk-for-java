// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Notification rule model.
 */
@Fluent
public class NotificationRule implements JsonSerializable<NotificationRule> {
    /*
     * The scope of the notification rule.
     */
    @Generated
    private NotificationScopeType scope = NotificationScopeType.fromString("NotificationRule");

    /*
     * The unique identifier of the notification rule.
     */
    @Generated
    private String notificationRuleId;

    /*
     * The name of the notification rule.
     */
    @Generated
    private String displayName;

    /*
     * The action groups to notify.
     */
    @Generated
    private List<String> actionGroupIds;

    /*
     * The creation datetime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /*
     * The user that created.
     */
    @Generated
    private String createdBy;

    /*
     * The last Modified datetime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime lastModifiedDateTime;

    /*
     * The user that last modified.
     */
    @Generated
    private String lastModifiedBy;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setNotificationRuleAccessor(new JsonMergePatchHelper.NotificationRuleAccessor() {
            @Override
            public NotificationRule prepareModelForJsonMergePatch(NotificationRule model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(NotificationRule model) {
                return model.jsonMergePatch;
            }

            @Override
            public void setNotificationRuleId(NotificationRule model, String notificationRuleId) {
                model.notificationRuleId = notificationRuleId;
            }

            @Override
            public void setDisplayName(NotificationRule model, String displayName) {
                model.displayName = displayName;
            }

            @Override
            public void setActionGroupIds(NotificationRule model, List<String> actionGroupIds) {
                model.actionGroupIds = actionGroupIds;
            }

            @Override
            public void setCreatedDateTime(NotificationRule model, OffsetDateTime createdDateTime) {
                model.createdDateTime = createdDateTime;
            }

            @Override
            public void setCreatedBy(NotificationRule model, String createdBy) {
                model.createdBy = createdBy;
            }

            @Override
            public void setLastModifiedDateTime(NotificationRule model, OffsetDateTime lastModifiedDateTime) {
                model.lastModifiedDateTime = lastModifiedDateTime;
            }

            @Override
            public void setLastModifiedBy(NotificationRule model, String lastModifiedBy) {
                model.lastModifiedBy = lastModifiedBy;
            }
        });
    }

    /**
     * Creates an instance of NotificationRule class.
     */
    @Generated
    public NotificationRule() {
    }

    /**
     * Get the scope property: The scope of the notification rule.
     * 
     * @return the scope value.
     */
    @Generated
    public NotificationScopeType getScope() {
        return this.scope;
    }

    /**
     * Get the notificationRuleId property: The unique identifier of the notification rule.
     * 
     * @return the notificationRuleId value.
     */
    @Generated
    public String getNotificationRuleId() {
        return this.notificationRuleId;
    }

    /**
     * Get the displayName property: The name of the notification rule.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The name of the notification rule.
     * <p>Required when create the resource.</p>
     * 
     * @param displayName the displayName value to set.
     * @return the NotificationRule object itself.
     */
    @Generated
    public NotificationRule setDisplayName(String displayName) {
        this.displayName = displayName;
        this.updatedProperties.add("displayName");
        return this;
    }

    /**
     * Get the actionGroupIds property: The action groups to notify.
     * 
     * @return the actionGroupIds value.
     */
    @Generated
    public List<String> getActionGroupIds() {
        return this.actionGroupIds;
    }

    /**
     * Set the actionGroupIds property: The action groups to notify.
     * <p>Required when create the resource.</p>
     * 
     * @param actionGroupIds the actionGroupIds value to set.
     * @return the NotificationRule object itself.
     */
    @Generated
    public NotificationRule setActionGroupIds(List<String> actionGroupIds) {
        this.actionGroupIds = actionGroupIds;
        this.updatedProperties.add("actionGroupIds");
        return this;
    }

    /**
     * Get the createdDateTime property: The creation datetime(RFC 3339 literal format).
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the createdBy property: The user that created.
     * 
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Get the lastModifiedDateTime property: The last Modified datetime(RFC 3339 literal format).
     * 
     * @return the lastModifiedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastModifiedDateTime() {
        return this.lastModifiedDateTime;
    }

    /**
     * Get the lastModifiedBy property: The user that last modified.
     * 
     * @return the lastModifiedBy value.
     */
    @Generated
    public String getLastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("scope", this.scope == null ? null : this.scope.toString());
            jsonWriter.writeStringField("displayName", this.displayName);
            jsonWriter.writeArrayField("actionGroupIds", this.actionGroupIds,
                (writer, element) -> writer.writeString(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scope", this.scope.toString());
        if (updatedProperties.contains("displayName")) {
            if (this.displayName == null) {
                jsonWriter.writeNullField("displayName");
            } else {
                jsonWriter.writeStringField("displayName", this.displayName);
            }
        }
        if (updatedProperties.contains("actionGroupIds")) {
            if (this.actionGroupIds == null) {
                jsonWriter.writeNullField("actionGroupIds");
            } else {
                jsonWriter.writeArrayField("actionGroupIds", this.actionGroupIds,
                    (writer, element) -> writer.writeString(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotificationRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotificationRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NotificationRule.
     */
    @Generated
    public static NotificationRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("scope".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Tests".equals(discriminatorValue)) {
                    return TestsNotificationRule.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static NotificationRule fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotificationRule deserializedNotificationRule = new NotificationRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("notificationRuleId".equals(fieldName)) {
                    deserializedNotificationRule.notificationRuleId = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedNotificationRule.scope = NotificationScopeType.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedNotificationRule.displayName = reader.getString();
                } else if ("actionGroupIds".equals(fieldName)) {
                    List<String> actionGroupIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedNotificationRule.actionGroupIds = actionGroupIds;
                } else if ("createdDateTime".equals(fieldName)) {
                    deserializedNotificationRule.createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdBy".equals(fieldName)) {
                    deserializedNotificationRule.createdBy = reader.getString();
                } else if ("lastModifiedDateTime".equals(fieldName)) {
                    deserializedNotificationRule.lastModifiedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedBy".equals(fieldName)) {
                    deserializedNotificationRule.lastModifiedBy = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotificationRule;
        });
    }
}
