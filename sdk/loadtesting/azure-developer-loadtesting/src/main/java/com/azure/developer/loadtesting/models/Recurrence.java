// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Recurrence model.
 */
@Fluent
public class Recurrence implements JsonSerializable<Recurrence> {
    /*
     * Frequency of the recurrence.
     */
    @Generated
    private Frequency frequency = Frequency.fromString("Recurrence");

    /*
     * Recurrence end model. You can specify the end either by providing a numberOfOccurrences (which will end the
     * recurrence after the specified number of occurrences) or by providing an endDateTime (which will end the
     * recurrence after the specified date). If neither value is provided, the recurrence will continue until it is
     * manually ended. However, if both values are provided, an error will be thrown.
     */
    @Generated
    private RecurrenceEnd recurrenceEnd;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setRecurrenceAccessor(new JsonMergePatchHelper.RecurrenceAccessor() {
            @Override
            public Recurrence prepareModelForJsonMergePatch(Recurrence model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(Recurrence model) {
                return model.jsonMergePatch;
            }

            @Override
            public void setRecurrenceEnd(Recurrence model, RecurrenceEnd recurrenceEnd) {
                model.recurrenceEnd = recurrenceEnd;
            }
        });
    }

    /**
     * Creates an instance of Recurrence class.
     */
    @Generated
    public Recurrence() {
    }

    /**
     * Get the frequency property: Frequency of the recurrence.
     * 
     * @return the frequency value.
     */
    @Generated
    public Frequency getFrequency() {
        return this.frequency;
    }

    /**
     * Get the recurrenceEnd property: Recurrence end model. You can specify the end either by providing a
     * numberOfOccurrences (which will end the recurrence after the specified number of occurrences) or by providing an
     * endDateTime (which will end the recurrence after the specified date). If neither value is provided, the
     * recurrence will continue until it is manually ended. However, if both values are provided, an error will be
     * thrown.
     * 
     * @return the recurrenceEnd value.
     */
    @Generated
    public RecurrenceEnd getRecurrenceEnd() {
        return this.recurrenceEnd;
    }

    /**
     * Set the recurrenceEnd property: Recurrence end model. You can specify the end either by providing a
     * numberOfOccurrences (which will end the recurrence after the specified number of occurrences) or by providing an
     * endDateTime (which will end the recurrence after the specified date). If neither value is provided, the
     * recurrence will continue until it is manually ended. However, if both values are provided, an error will be
     * thrown.
     * 
     * @param recurrenceEnd the recurrenceEnd value to set.
     * @return the Recurrence object itself.
     */
    @Generated
    public Recurrence setRecurrenceEnd(RecurrenceEnd recurrenceEnd) {
        this.recurrenceEnd = recurrenceEnd;
        this.updatedProperties.add("recurrenceEnd");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("frequency", this.frequency == null ? null : this.frequency.toString());
            jsonWriter.writeJsonField("recurrenceEnd", this.recurrenceEnd);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("frequency", this.frequency.toString());
        if (updatedProperties.contains("recurrenceEnd")) {
            if (this.recurrenceEnd == null) {
                jsonWriter.writeNullField("recurrenceEnd");
            } else {
                JsonMergePatchHelper.getRecurrenceEndAccessor().prepareModelForJsonMergePatch(this.recurrenceEnd, true);
                jsonWriter.writeJsonField("recurrenceEnd", this.recurrenceEnd);
                JsonMergePatchHelper.getRecurrenceEndAccessor()
                    .prepareModelForJsonMergePatch(this.recurrenceEnd, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Recurrence from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Recurrence if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Recurrence.
     */
    @Generated
    public static Recurrence fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("frequency".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Daily".equals(discriminatorValue)) {
                    return DailyRecurrence.fromJson(readerToUse.reset());
                } else if ("Hourly".equals(discriminatorValue)) {
                    return HourlyRecurrence.fromJson(readerToUse.reset());
                } else if ("MonthlyByDays".equals(discriminatorValue)) {
                    return MonthlyRecurrenceByWeekDays.fromJson(readerToUse.reset());
                } else if ("MonthlyByDates".equals(discriminatorValue)) {
                    return MonthlyRecurrenceByDates.fromJson(readerToUse.reset());
                } else if ("Cron".equals(discriminatorValue)) {
                    return RecurrenceWithCron.fromJson(readerToUse.reset());
                } else if ("Weekly".equals(discriminatorValue)) {
                    return WeeklyRecurrence.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static Recurrence fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Recurrence deserializedRecurrence = new Recurrence();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("frequency".equals(fieldName)) {
                    deserializedRecurrence.frequency = Frequency.fromString(reader.getString());
                } else if ("recurrenceEnd".equals(fieldName)) {
                    deserializedRecurrence.recurrenceEnd = RecurrenceEnd.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecurrence;
        });
    }
}
