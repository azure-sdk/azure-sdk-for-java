// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The UploadTestFileResponse model.
 */
@Immutable
public final class UploadTestFileResponse implements JsonSerializable<UploadTestFileResponse> {
    /*
     * File URL.
     */
    @Generated
    private String url;

    /*
     * File type
     */
    @Generated
    private FileType fileType;

    /*
     * Expiry time of the file (RFC 3339 literal format)
     */
    @Generated
    private OffsetDateTime expireDateTime;

    /*
     * Validation status of the file
     */
    @Generated
    private FileStatus validationStatus;

    /*
     * Validation failure error details
     */
    @Generated
    private String validationFailureDetails;

    /**
     * Creates an instance of UploadTestFileResponse class.
     */
    @Generated
    private UploadTestFileResponse() {
    }

    /**
     * Get the url property: File URL.
     * 
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the fileType property: File type.
     * 
     * @return the fileType value.
     */
    @Generated
    public FileType getFileType() {
        return this.fileType;
    }

    /**
     * Get the expireDateTime property: Expiry time of the file (RFC 3339 literal format).
     * 
     * @return the expireDateTime value.
     */
    @Generated
    public OffsetDateTime getExpireDateTime() {
        return this.expireDateTime;
    }

    /**
     * Get the validationStatus property: Validation status of the file.
     * 
     * @return the validationStatus value.
     */
    @Generated
    public FileStatus getValidationStatus() {
        return this.validationStatus;
    }

    /**
     * Get the validationFailureDetails property: Validation failure error details.
     * 
     * @return the validationFailureDetails value.
     */
    @Generated
    public String getValidationFailureDetails() {
        return this.validationFailureDetails;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UploadTestFileResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UploadTestFileResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UploadTestFileResponse.
     */
    @Generated
    public static UploadTestFileResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UploadTestFileResponse deserializedUploadTestFileResponse = new UploadTestFileResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    deserializedUploadTestFileResponse.url = reader.getString();
                } else if ("fileType".equals(fieldName)) {
                    deserializedUploadTestFileResponse.fileType = FileType.fromString(reader.getString());
                } else if ("expireDateTime".equals(fieldName)) {
                    deserializedUploadTestFileResponse.expireDateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("validationStatus".equals(fieldName)) {
                    deserializedUploadTestFileResponse.validationStatus = FileStatus.fromString(reader.getString());
                } else if ("validationFailureDetails".equals(fieldName)) {
                    deserializedUploadTestFileResponse.validationFailureDetails = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUploadTestFileResponse;
        });
    }
}
