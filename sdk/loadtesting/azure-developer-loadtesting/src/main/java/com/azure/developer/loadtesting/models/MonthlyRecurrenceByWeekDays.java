// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Recurrence model when frequency is set as MonthlyByDays .
 */
@Fluent
public final class MonthlyRecurrenceByWeekDays extends Recurrence {
    /*
     * Frequency of the recurrence.
     */
    @Generated
    private Frequency frequency = Frequency.MONTHLY_BY_DAYS;

    /*
     * Specific days of the week when the recurrence should repeat.
     */
    @Generated
    private List<WeekDays> weekDaysInMonth;

    /*
     * Index of the week in a month at which the recurrence should repeat. For example, if the index is '2', weekDay is
     * 'Monday', interval is 3 and frequency is 'Month', the recurrence will run every second Monday of the month and
     * repeat every 3 months. Value of index can be 1 to 5.
     */
    @Generated
    private int index;

    /*
     * The interval at which the recurrence should repeat. It signifies the number of months between each recurrence.
     */
    @Generated
    private int interval;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of MonthlyRecurrenceByWeekDays class.
     */
    @Generated
    public MonthlyRecurrenceByWeekDays() {
    }

    /**
     * Get the frequency property: Frequency of the recurrence.
     * 
     * @return the frequency value.
     */
    @Generated
    @Override
    public Frequency getFrequency() {
        return this.frequency;
    }

    /**
     * Get the weekDaysInMonth property: Specific days of the week when the recurrence should repeat.
     * 
     * @return the weekDaysInMonth value.
     */
    @Generated
    public List<WeekDays> getWeekDaysInMonth() {
        return this.weekDaysInMonth;
    }

    /**
     * Set the weekDaysInMonth property: Specific days of the week when the recurrence should repeat.
     * 
     * @param weekDaysInMonth the weekDaysInMonth value to set.
     * @return the MonthlyRecurrenceByWeekDays object itself.
     */
    @Generated
    public MonthlyRecurrenceByWeekDays setWeekDaysInMonth(List<WeekDays> weekDaysInMonth) {
        this.weekDaysInMonth = weekDaysInMonth;
        this.updatedProperties.add("weekDaysInMonth");
        return this;
    }

    /**
     * Get the index property: Index of the week in a month at which the recurrence should repeat. For example, if the
     * index is '2', weekDay is 'Monday', interval is 3 and frequency is 'Month', the recurrence will run every second
     * Monday of the month and repeat every 3 months. Value of index can be 1 to 5.
     * 
     * @return the index value.
     */
    @Generated
    public int getIndex() {
        return this.index;
    }

    /**
     * Set the index property: Index of the week in a month at which the recurrence should repeat. For example, if the
     * index is '2', weekDay is 'Monday', interval is 3 and frequency is 'Month', the recurrence will run every second
     * Monday of the month and repeat every 3 months. Value of index can be 1 to 5.
     * <p>Required when create the resource.</p>
     * 
     * @param index the index value to set.
     * @return the MonthlyRecurrenceByWeekDays object itself.
     */
    @Generated
    public MonthlyRecurrenceByWeekDays setIndex(int index) {
        this.index = index;
        this.updatedProperties.add("index");
        return this;
    }

    /**
     * Get the interval property: The interval at which the recurrence should repeat. It signifies the number of months
     * between each recurrence.
     * 
     * @return the interval value.
     */
    @Generated
    public int getInterval() {
        return this.interval;
    }

    /**
     * Set the interval property: The interval at which the recurrence should repeat. It signifies the number of months
     * between each recurrence.
     * <p>Required when create the resource.</p>
     * 
     * @param interval the interval value to set.
     * @return the MonthlyRecurrenceByWeekDays object itself.
     */
    @Generated
    public MonthlyRecurrenceByWeekDays setInterval(int interval) {
        this.interval = interval;
        this.updatedProperties.add("interval");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MonthlyRecurrenceByWeekDays setRecurrenceEnd(RecurrenceEnd recurrenceEnd) {
        super.setRecurrenceEnd(recurrenceEnd);
        this.updatedProperties.add("recurrenceEnd");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getRecurrenceAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeJsonField("recurrenceEnd", getRecurrenceEnd());
            jsonWriter.writeStringField("frequency", this.frequency == null ? null : this.frequency.toString());
            jsonWriter.writeArrayField("weekDaysInMonth", this.weekDaysInMonth,
                (writer, element) -> writer.writeString(element == null ? null : element.toString()));
            jsonWriter.writeIntField("index", this.index);
            jsonWriter.writeIntField("interval", this.interval);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("recurrenceEnd")) {
            if (getRecurrenceEnd() == null) {
                jsonWriter.writeNullField("recurrenceEnd");
            } else {
                JsonMergePatchHelper.getRecurrenceEndAccessor().prepareModelForJsonMergePatch(getRecurrenceEnd(), true);
                jsonWriter.writeJsonField("recurrenceEnd", getRecurrenceEnd());
                JsonMergePatchHelper.getRecurrenceEndAccessor()
                    .prepareModelForJsonMergePatch(getRecurrenceEnd(), false);
            }
        }
        jsonWriter.writeStringField("frequency", this.frequency.toString());
        if (updatedProperties.contains("weekDaysInMonth")) {
            if (this.weekDaysInMonth == null) {
                jsonWriter.writeNullField("weekDaysInMonth");
            } else {
                jsonWriter.writeArrayField("weekDaysInMonth", this.weekDaysInMonth,
                    (writer, element) -> writer.writeString(element.toString()));
            }
        }
        if (updatedProperties.contains("index")) {
            jsonWriter.writeIntField("index", this.index);
        }
        if (updatedProperties.contains("interval")) {
            jsonWriter.writeIntField("interval", this.interval);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonthlyRecurrenceByWeekDays from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonthlyRecurrenceByWeekDays if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MonthlyRecurrenceByWeekDays.
     */
    @Generated
    public static MonthlyRecurrenceByWeekDays fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonthlyRecurrenceByWeekDays deserializedMonthlyRecurrenceByWeekDays = new MonthlyRecurrenceByWeekDays();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recurrenceEnd".equals(fieldName)) {
                    JsonMergePatchHelper.getRecurrenceAccessor()
                        .setRecurrenceEnd(deserializedMonthlyRecurrenceByWeekDays, RecurrenceEnd.fromJson(reader));
                } else if ("frequency".equals(fieldName)) {
                    deserializedMonthlyRecurrenceByWeekDays.frequency = Frequency.fromString(reader.getString());
                } else if ("weekDaysInMonth".equals(fieldName)) {
                    List<WeekDays> weekDaysInMonth
                        = reader.readArray(reader1 -> WeekDays.fromString(reader1.getString()));
                    deserializedMonthlyRecurrenceByWeekDays.weekDaysInMonth = weekDaysInMonth;
                } else if ("index".equals(fieldName)) {
                    deserializedMonthlyRecurrenceByWeekDays.index = reader.getInt();
                } else if ("interval".equals(fieldName)) {
                    deserializedMonthlyRecurrenceByWeekDays.interval = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonthlyRecurrenceByWeekDays;
        });
    }
}
