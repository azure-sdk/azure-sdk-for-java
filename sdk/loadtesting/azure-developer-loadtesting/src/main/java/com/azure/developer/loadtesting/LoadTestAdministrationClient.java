// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.developer.loadtesting.models.LoadTest;
import com.azure.developer.loadtesting.models.LoadTestingFileType;
import com.azure.developer.loadtesting.models.NotificationRule;
import com.azure.developer.loadtesting.models.OperationStatus;
import com.azure.developer.loadtesting.models.TestAppComponents;
import com.azure.developer.loadtesting.models.TestFileInfo;
import com.azure.developer.loadtesting.models.TestProfile;
import com.azure.developer.loadtesting.models.TestServerMetricsConfiguration;
import com.azure.developer.loadtesting.models.Trigger;
import com.azure.developer.loadtesting.models.TriggerState;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Initializes a new instance of the synchronous LoadTestAdministrationClient type.
 */
@ServiceClient(builder = LoadTestAdministrationClientBuilder.class)
public final class LoadTestAdministrationClient {
    @Generated
    private final LoadTestAdministrationAsyncClient client;

    /**
     * Initializes an instance of LoadTestAdministrationClient class.
     * 
     * @param client the async client.
     */
    @Generated
    LoadTestAdministrationClient(LoadTestAdministrationAsyncClient client) {
        this.client = client;
    }

    /**
     * Create a new test or update an existing test by providing the test Id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Required): {
     *                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)
     *                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *         passFailServerMetrics (Optional): {
     *             String (Required): {
     *                 resourceId: String (Optional, Required on create)
     *                 metricNamespace: String (Optional, Required on create)
     *                 metricName: String (Optional, Required on create)
     *                 aggregation: String (Optional, Required on create)
     *                 condition: String (Optional, Required on create)
     *                 value: double (Optional, Required on create)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *     }
     *     autoStopCriteria (Optional): {
     *         autoStopDisabled: Boolean (Optional)
     *         errorRate: Double (Optional)
     *         errorRateTimeWindowInSeconds: Long (Optional)
     *         maximumVirtualUsersPerEngine: Integer (Optional)
     *     }
     *     secrets (Optional): {
     *         String (Required): {
     *             value: String (Optional)
     *             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)
     *         }
     *     }
     *     certificate (Optional): {
     *         value: String (Optional)
     *         type: String(AKV_CERT_URI) (Optional)
     *         name: String (Optional)
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Required)
     *     }
     *     loadTestConfiguration (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *         quickStartTest: Boolean (Optional)
     *         optionalLoadTestConfig (Optional): {
     *             endpointUrl: String (Optional)
     *             requestsPerSecond: Integer (Optional)
     *             maxResponseTimeInMs: Integer (Optional)
     *             virtualUsers: Integer (Optional)
     *             rampUpTime: Integer (Optional)
     *             duration: Long (Optional)
     *         }
     *         regionalLoadTestConfig (Optional): [
     *              (Optional){
     *                 engineInstances: int (Optional, Required on create)
     *                 region: String (Optional, Required on create)
     *             }
     *         ]
     *     }
     *     baselineTestRunId: String (Optional)
     *     inputArtifacts (Optional): {
     *         configFileInfo (Optional): {
     *             fileName: String (Required)
     *             url: String (Optional)
     *             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *             expireDateTime: OffsetDateTime (Optional)
     *             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *             validationFailureDetails: String (Optional)
     *         }
     *         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)
     *         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)
     *         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)
     *         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)
     *         additionalFileInfo (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     testId: String (Required)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     subnetId: String (Optional)
     *     kind: String(URL/JMX/Locust) (Optional)
     *     publicIPDisabled: Boolean (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     *     metricsReferenceIdentityType: String(SystemAssigned/UserAssigned) (Optional)
     *     metricsReferenceIdentityId: String (Optional)
     *     engineBuiltInIdentityType: String(SystemAssigned/UserAssigned) (Optional)
     *     engineBuiltInIdentityIds (Optional): [
     *         String (Optional)
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Required): {
     *                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)
     *                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *         passFailServerMetrics (Optional): {
     *             String (Required): {
     *                 resourceId: String (Optional, Required on create)
     *                 metricNamespace: String (Optional, Required on create)
     *                 metricName: String (Optional, Required on create)
     *                 aggregation: String (Optional, Required on create)
     *                 condition: String (Optional, Required on create)
     *                 value: double (Optional, Required on create)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *     }
     *     autoStopCriteria (Optional): {
     *         autoStopDisabled: Boolean (Optional)
     *         errorRate: Double (Optional)
     *         errorRateTimeWindowInSeconds: Long (Optional)
     *         maximumVirtualUsersPerEngine: Integer (Optional)
     *     }
     *     secrets (Optional): {
     *         String (Required): {
     *             value: String (Optional)
     *             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)
     *         }
     *     }
     *     certificate (Optional): {
     *         value: String (Optional)
     *         type: String(AKV_CERT_URI) (Optional)
     *         name: String (Optional)
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Required)
     *     }
     *     loadTestConfiguration (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *         quickStartTest: Boolean (Optional)
     *         optionalLoadTestConfig (Optional): {
     *             endpointUrl: String (Optional)
     *             requestsPerSecond: Integer (Optional)
     *             maxResponseTimeInMs: Integer (Optional)
     *             virtualUsers: Integer (Optional)
     *             rampUpTime: Integer (Optional)
     *             duration: Long (Optional)
     *         }
     *         regionalLoadTestConfig (Optional): [
     *              (Optional){
     *                 engineInstances: int (Optional, Required on create)
     *                 region: String (Optional, Required on create)
     *             }
     *         ]
     *     }
     *     baselineTestRunId: String (Optional)
     *     inputArtifacts (Optional): {
     *         configFileInfo (Optional): {
     *             fileName: String (Required)
     *             url: String (Optional)
     *             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *             expireDateTime: OffsetDateTime (Optional)
     *             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *             validationFailureDetails: String (Optional)
     *         }
     *         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)
     *         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)
     *         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)
     *         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)
     *         additionalFileInfo (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     testId: String (Required)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     subnetId: String (Optional)
     *     kind: String(URL/JMX/Locust) (Optional)
     *     publicIPDisabled: Boolean (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     *     metricsReferenceIdentityType: String(SystemAssigned/UserAssigned) (Optional)
     *     metricsReferenceIdentityId: String (Optional)
     *     engineBuiltInIdentityType: String(SystemAssigned/UserAssigned) (Optional)
     *     engineBuiltInIdentityIds (Optional): [
     *         String (Optional)
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateTestWithResponse(String testId, BinaryData body,
        RequestOptions requestOptions) {
        return this.client.createOrUpdateTestWithResponse(testId, body, requestOptions).block();
    }

    /**
     * Add an app component to a test.
     * 
     * Add an app component to a test by providing the resource Id, name and type.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     components (Optional, Required on create): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Optional, Required on create)
     *             resourceType: String (Optional, Required on create)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     *     testId: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     components (Optional, Required on create): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Optional, Required on create)
     *             resourceType: String (Optional, Required on create)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     *     testId: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param body App Component model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test app components along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateAppComponentsWithResponse(String testId, BinaryData body,
        RequestOptions requestOptions) {
        return this.client.createOrUpdateAppComponentsWithResponse(testId, body, requestOptions).block();
    }

    /**
     * Configure server metrics for a test.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Optional)
     *     metrics (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional)
     *             resourceId: String (Optional, Required on create)
     *             metricNamespace: String (Optional, Required on create)
     *             displayDescription: String (Optional)
     *             name: String (Optional, Required on create)
     *             aggregation: String (Optional, Required on create)
     *             unit: String (Optional)
     *             resourceType: String (Optional, Required on create)
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Optional)
     *     metrics (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional)
     *             resourceId: String (Optional, Required on create)
     *             metricNamespace: String (Optional, Required on create)
     *             displayDescription: String (Optional)
     *             name: String (Optional, Required on create)
     *             aggregation: String (Optional, Required on create)
     *             unit: String (Optional)
     *             resourceType: String (Optional, Required on create)
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param body Server metric configuration model.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test server metrics configuration along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateServerMetricsConfigWithResponse(String testId, BinaryData body,
        RequestOptions requestOptions) {
        return this.client.createOrUpdateServerMetricsConfigWithResponse(testId, body, requestOptions).block();
    }

    /**
     * Get associated app component (collection of azure resources) for the given test.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     components (Optional, Required on create): {
     *         String (Required): {
     *             resourceId: String (Required)
     *             resourceName: String (Optional, Required on create)
     *             resourceType: String (Optional, Required on create)
     *             displayName: String (Optional)
     *             resourceGroup: String (Optional)
     *             subscriptionId: String (Optional)
     *             kind: String (Optional)
     *         }
     *     }
     *     testId: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return associated app component (collection of azure resources) for the given test along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAppComponentsWithResponse(String testId, RequestOptions requestOptions) {
        return this.client.getAppComponentsWithResponse(testId, requestOptions).block();
    }

    /**
     * List server metrics configuration for the given test.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testId: String (Optional)
     *     metrics (Optional, Required on create): {
     *         String (Required): {
     *             id: String (Optional)
     *             resourceId: String (Optional, Required on create)
     *             metricNamespace: String (Optional, Required on create)
     *             displayDescription: String (Optional)
     *             name: String (Optional, Required on create)
     *             aggregation: String (Optional, Required on create)
     *             unit: String (Optional)
     *             resourceType: String (Optional, Required on create)
     *         }
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test server metrics configuration along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getServerMetricsConfigWithResponse(String testId, RequestOptions requestOptions) {
        return this.client.getServerMetricsConfigWithResponse(testId, requestOptions).block();
    }

    /**
     * Get load test details by test Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Required): {
     *                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)
     *                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *         passFailServerMetrics (Optional): {
     *             String (Required): {
     *                 resourceId: String (Optional, Required on create)
     *                 metricNamespace: String (Optional, Required on create)
     *                 metricName: String (Optional, Required on create)
     *                 aggregation: String (Optional, Required on create)
     *                 condition: String (Optional, Required on create)
     *                 value: double (Optional, Required on create)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *     }
     *     autoStopCriteria (Optional): {
     *         autoStopDisabled: Boolean (Optional)
     *         errorRate: Double (Optional)
     *         errorRateTimeWindowInSeconds: Long (Optional)
     *         maximumVirtualUsersPerEngine: Integer (Optional)
     *     }
     *     secrets (Optional): {
     *         String (Required): {
     *             value: String (Optional)
     *             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)
     *         }
     *     }
     *     certificate (Optional): {
     *         value: String (Optional)
     *         type: String(AKV_CERT_URI) (Optional)
     *         name: String (Optional)
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Required)
     *     }
     *     loadTestConfiguration (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *         quickStartTest: Boolean (Optional)
     *         optionalLoadTestConfig (Optional): {
     *             endpointUrl: String (Optional)
     *             requestsPerSecond: Integer (Optional)
     *             maxResponseTimeInMs: Integer (Optional)
     *             virtualUsers: Integer (Optional)
     *             rampUpTime: Integer (Optional)
     *             duration: Long (Optional)
     *         }
     *         regionalLoadTestConfig (Optional): [
     *              (Optional){
     *                 engineInstances: int (Optional, Required on create)
     *                 region: String (Optional, Required on create)
     *             }
     *         ]
     *     }
     *     baselineTestRunId: String (Optional)
     *     inputArtifacts (Optional): {
     *         configFileInfo (Optional): {
     *             fileName: String (Required)
     *             url: String (Optional)
     *             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *             expireDateTime: OffsetDateTime (Optional)
     *             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *             validationFailureDetails: String (Optional)
     *         }
     *         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)
     *         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)
     *         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)
     *         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)
     *         additionalFileInfo (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     testId: String (Required)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     subnetId: String (Optional)
     *     kind: String(URL/JMX/Locust) (Optional)
     *     publicIPDisabled: Boolean (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     *     metricsReferenceIdentityType: String(SystemAssigned/UserAssigned) (Optional)
     *     metricsReferenceIdentityId: String (Optional)
     *     engineBuiltInIdentityType: String(SystemAssigned/UserAssigned) (Optional)
     *     engineBuiltInIdentityIds (Optional): [
     *         String (Optional)
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test details by test Id along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTestWithResponse(String testId, RequestOptions requestOptions) {
        return this.client.getTestWithResponse(testId, requestOptions).block();
    }

    /**
     * Get all the files that are associated with a test.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     fileName: String (Required)
     *     url: String (Optional)
     *     fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *     expireDateTime: OffsetDateTime (Optional)
     *     validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *     validationFailureDetails: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param fileName Name of the file.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all the files that are associated with a test along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTestFileWithResponse(String testId, String fileName, RequestOptions requestOptions) {
        return this.client.getTestFileWithResponse(testId, fileName, requestOptions).block();
    }

    /**
     * Get all test files.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     fileName: String (Required)
     *     url: String (Optional)
     *     fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *     expireDateTime: OffsetDateTime (Optional)
     *     validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *     validationFailureDetails: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all test files as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTestFiles(String testId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listTestFiles(testId, requestOptions));
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>orderby</td><td>String</td><td>No</td><td>Sort on the supported fields in (field asc/desc) format. eg:
     * lastModifiedDateTime asc. Supported fields - lastModifiedDateTime</td></tr>
     * <tr><td>search</td><td>String</td><td>No</td><td>Prefix based, case sensitive search on searchable fields -
     * displayName,
     * createdBy. For example, to search for a test, with display name is Login Test,
     * the search parameter can be Login.</td></tr>
     * <tr><td>lastModifiedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(RFC 3339 literal format)
     * of the last updated time range to filter tests.</td></tr>
     * <tr><td>lastModifiedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(RFC 3339 literal format) of
     * the last updated time range to filter tests.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of results in response.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     passFailCriteria (Optional): {
     *         passFailMetrics (Optional): {
     *             String (Required): {
     *                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)
     *                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)
     *                 condition: String (Optional)
     *                 requestName: String (Optional)
     *                 value: Double (Optional)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *         passFailServerMetrics (Optional): {
     *             String (Required): {
     *                 resourceId: String (Optional, Required on create)
     *                 metricNamespace: String (Optional, Required on create)
     *                 metricName: String (Optional, Required on create)
     *                 aggregation: String (Optional, Required on create)
     *                 condition: String (Optional, Required on create)
     *                 value: double (Optional, Required on create)
     *                 action: String(continue/stop) (Optional)
     *                 actualValue: Double (Optional)
     *                 result: String(passed/undetermined/failed) (Optional)
     *             }
     *         }
     *     }
     *     autoStopCriteria (Optional): {
     *         autoStopDisabled: Boolean (Optional)
     *         errorRate: Double (Optional)
     *         errorRateTimeWindowInSeconds: Long (Optional)
     *         maximumVirtualUsersPerEngine: Integer (Optional)
     *     }
     *     secrets (Optional): {
     *         String (Required): {
     *             value: String (Optional)
     *             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)
     *         }
     *     }
     *     certificate (Optional): {
     *         value: String (Optional)
     *         type: String(AKV_CERT_URI) (Optional)
     *         name: String (Optional)
     *     }
     *     environmentVariables (Optional): {
     *         String: String (Required)
     *     }
     *     loadTestConfiguration (Optional): {
     *         engineInstances: Integer (Optional)
     *         splitAllCSVs: Boolean (Optional)
     *         quickStartTest: Boolean (Optional)
     *         optionalLoadTestConfig (Optional): {
     *             endpointUrl: String (Optional)
     *             requestsPerSecond: Integer (Optional)
     *             maxResponseTimeInMs: Integer (Optional)
     *             virtualUsers: Integer (Optional)
     *             rampUpTime: Integer (Optional)
     *             duration: Long (Optional)
     *         }
     *         regionalLoadTestConfig (Optional): [
     *              (Optional){
     *                 engineInstances: int (Optional, Required on create)
     *                 region: String (Optional, Required on create)
     *             }
     *         ]
     *     }
     *     baselineTestRunId: String (Optional)
     *     inputArtifacts (Optional): {
     *         configFileInfo (Optional): {
     *             fileName: String (Required)
     *             url: String (Optional)
     *             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *             expireDateTime: OffsetDateTime (Optional)
     *             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *             validationFailureDetails: String (Optional)
     *         }
     *         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)
     *         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)
     *         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)
     *         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)
     *         additionalFileInfo (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     testId: String (Required)
     *     description: String (Optional)
     *     displayName: String (Optional)
     *     subnetId: String (Optional)
     *     kind: String(URL/JMX/Locust) (Optional)
     *     publicIPDisabled: Boolean (Optional)
     *     keyvaultReferenceIdentityType: String (Optional)
     *     keyvaultReferenceIdentityId: String (Optional)
     *     metricsReferenceIdentityType: String(SystemAssigned/UserAssigned) (Optional)
     *     metricsReferenceIdentityId: String (Optional)
     *     engineBuiltInIdentityType: String(SystemAssigned/UserAssigned) (Optional)
     *     engineBuiltInIdentityIds (Optional): [
     *         String (Optional)
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as paginated
     * response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTests(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listTests(requestOptions));
    }

    /**
     * Upload input file for a given test Id. File size can't be more than 50 MB.
     * Existing file with same name for the given test will be overwritten. File
     * should be provided in the request body as application/octet-stream.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>fileType</td><td>String</td><td>No</td><td>File type. Allowed values: "JMX_FILE", "USER_PROPERTIES",
     * "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", "TEST_SCRIPT".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     fileName: String (Required)
     *     url: String (Optional)
     *     fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)
     *     expireDateTime: OffsetDateTime (Optional)
     *     validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)
     *     validationFailureDetails: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param fileName Unique name for test file with file extension like : App.jmx.
     * @param body The file content as application/octet-stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test file info along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> uploadTestFileWithResponse(String testId, String fileName, BinaryData body,
        RequestOptions requestOptions) {
        return this.client.uploadTestFileWithResponse(testId, fileName, body, requestOptions).block();
    }

    /**
     * Delete file by the file name for a test.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param fileName Name of the file.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTestFileWithResponse(String testId, String fileName, RequestOptions requestOptions) {
        return this.client.deleteTestFileWithResponse(testId, fileName, requestOptions).block();
    }

    /**
     * Delete a test by its test Id.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTestWithResponse(String testId, RequestOptions requestOptions) {
        return this.client.deleteTestWithResponse(testId, requestOptions).block();
    }

    /**
     * Create a new test profile or update an existing test profile.
     * 
     * Create a new test profile or update an existing test profile by providing the test profile Id.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return test Profile Model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateTestProfileWithResponse(String testProfileId, BinaryData body,
        RequestOptions requestOptions) {
        return this.client.createOrUpdateTestProfileWithResponse(testProfileId, body, requestOptions).block();
    }

    /**
     * Delete a test profile.
     * 
     * Delete a test profile by its test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTestProfileWithResponse(String testProfileId, RequestOptions requestOptions) {
        return this.client.deleteTestProfileWithResponse(testProfileId, requestOptions).block();
    }

    /**
     * Get load test profile details.
     * 
     * Get load test profile details by test profile Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return load test profile details.
     * 
     * Get load test profile details by test profile Id along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTestProfileWithResponse(String testProfileId, RequestOptions requestOptions) {
        return this.client.getTestProfileWithResponse(testProfileId, requestOptions).block();
    }

    /**
     * List test profiles.
     * 
     * Get all test profiles for the given filters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of results to include in a single
     * response.</td></tr>
     * <tr><td>lastModifiedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(RFC 3339 literal format)
     * of the last updated time range to filter test profiles.</td></tr>
     * <tr><td>lastModifiedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(RFC 3339 literal format) of
     * the last updated time range to filter test profiles.</td></tr>
     * <tr><td>testProfileIds</td><td>List&lt;String&gt;</td><td>No</td><td>Comma separated list of IDs of the test
     * profiles to filter. In the form of "," separated string.</td></tr>
     * <tr><td>testIds</td><td>List&lt;String&gt;</td><td>No</td><td>Comma separated list IDs of the tests which should
     * be associated with the test profiles to fetch. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     testProfileId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     testId: String (Optional)
     *     targetResourceId: String (Optional)
     *     targetResourceConfigurations (Optional): {
     *         kind: String(FunctionsFlexConsumption) (Required)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TestProfile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTestProfiles(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listTestProfiles(requestOptions));
    }

    /**
     * Create or update operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(ScheduleTestsTrigger) (Required)
     *     triggerId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     description: String (Optional)
     *     state: String(Active/Paused/Completed/Disabled) (Optional)
     *     stateDetails (Optional): {
     *         message: String (Optional)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(ScheduleTestsTrigger) (Required)
     *     triggerId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     description: String (Optional)
     *     state: String(Active/Paused/Completed/Disabled) (Optional)
     *     stateDetails (Optional): {
     *         message: String (Optional)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param triggerId The unique identifier of the trigger.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return trigger model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateTriggerWithResponse(String triggerId, BinaryData body,
        RequestOptions requestOptions) {
        return this.client.createOrUpdateTriggerWithResponse(triggerId, body, requestOptions).block();
    }

    /**
     * Resource delete operation template.
     * 
     * @param triggerId The unique identifier of the trigger.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTriggerWithResponse(String triggerId, RequestOptions requestOptions) {
        return this.client.deleteTriggerWithResponse(triggerId, requestOptions).block();
    }

    /**
     * Resource read operation template.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(ScheduleTestsTrigger) (Required)
     *     triggerId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     description: String (Optional)
     *     state: String(Active/Paused/Completed/Disabled) (Optional)
     *     stateDetails (Optional): {
     *         message: String (Optional)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param triggerId The unique identifier of the trigger.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return trigger model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTriggerWithResponse(String triggerId, RequestOptions requestOptions) {
        return this.client.getTriggerWithResponse(triggerId, requestOptions).block();
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>testIds</td><td>String</td><td>No</td><td>Search based on triggers associated with the provided test
     * ids.</td></tr>
     * <tr><td>states</td><td>String</td><td>No</td><td>Filter triggers based on a comma separated list of states.
     * Allowed values: "Active", "Paused", "Completed", "Disabled".</td></tr>
     * <tr><td>lastModifiedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(RFC 3339 literal format)
     * of the last updated time range to filter triggers.</td></tr>
     * <tr><td>lastModifiedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(RFC 3339 literal format) of
     * the last updated time range to filter triggers.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of results in response. Default page size is
     * 50.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(ScheduleTestsTrigger) (Required)
     *     triggerId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     description: String (Optional)
     *     state: String(Active/Paused/Completed/Disabled) (Optional)
     *     stateDetails (Optional): {
     *         message: String (Optional)
     *     }
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Trigger items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTriggers(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listTriggers(requestOptions));
    }

    /**
     * Create or update operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String(Tests) (Required)
     *     notificationRuleId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     actionGroupIds (Optional, Required on create): [
     *         String (Optional, Required on create)
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String(Tests) (Required)
     *     notificationRuleId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     actionGroupIds (Optional, Required on create): [
     *         String (Optional, Required on create)
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param notificationRuleId The unique identifier of the notification rule.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return notification rule model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateNotificationRuleWithResponse(String notificationRuleId, BinaryData body,
        RequestOptions requestOptions) {
        return this.client.createOrUpdateNotificationRuleWithResponse(notificationRuleId, body, requestOptions).block();
    }

    /**
     * Resource delete operation template.
     * 
     * @param notificationRuleId The unique identifier of the notification rule.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteNotificationRuleWithResponse(String notificationRuleId, RequestOptions requestOptions) {
        return this.client.deleteNotificationRuleWithResponse(notificationRuleId, requestOptions).block();
    }

    /**
     * Resource read operation template.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String(Tests) (Required)
     *     notificationRuleId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     actionGroupIds (Optional, Required on create): [
     *         String (Optional, Required on create)
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param notificationRuleId The unique identifier of the notification rule.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return notification rule model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNotificationRuleWithResponse(String notificationRuleId,
        RequestOptions requestOptions) {
        return this.client.getNotificationRuleWithResponse(notificationRuleId, requestOptions).block();
    }

    /**
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>testIds</td><td>String</td><td>No</td><td>Search based on notification rules associated with the provided
     * test ids.</td></tr>
     * <tr><td>scopes</td><td>String</td><td>No</td><td>Search based on notification rules for the provided
     * scopes.</td></tr>
     * <tr><td>lastModifiedStartTime</td><td>OffsetDateTime</td><td>No</td><td>Start DateTime(RFC 3339 literal format)
     * of the last updated time range to filter notification rules.</td></tr>
     * <tr><td>lastModifiedEndTime</td><td>OffsetDateTime</td><td>No</td><td>End DateTime(RFC 3339 literal format) of
     * the last updated time range to filter notification rules.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of results in response. Default page size is
     * 50.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     scope: String(Tests) (Required)
     *     notificationRuleId: String (Required)
     *     displayName: String (Optional, Required on create)
     *     actionGroupIds (Optional, Required on create): [
     *         String (Optional, Required on create)
     *     ]
     *     createdDateTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastModifiedDateTime: OffsetDateTime (Optional)
     *     lastModifiedBy: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of NotificationRule items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listNotificationRules(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listNotificationRules(requestOptions));
    }

    /**
     * Clone a load test.
     * 
     * Clone the given test with optional overrides applied to the clone test.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     newTestId: String (Required)
     *     displayName: String (Optional)
     *     description: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param cloneTestRequest1 The cloneTestRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCloneTest(String testId, BinaryData cloneTestRequest1,
        RequestOptions requestOptions) {
        return this.client.beginCloneTest(testId, cloneTestRequest1, requestOptions).getSyncPoller();
    }

    /**
     * Get the status of a long running operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     kind: String(CloneTest) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param operationId The unique ID of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a long running operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getOperationStatusWithResponse(String operationId, RequestOptions requestOptions) {
        return this.client.getOperationStatusWithResponse(operationId, requestOptions).block();
    }

    /**
     * Create a new test or update an existing test by providing the test Id.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param body The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LoadTest createOrUpdateTest(String testId, LoadTest body) {
        // Generated convenience method for createOrUpdateTestWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getLoadTestAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getLoadTestAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateTestWithResponse(testId, bodyInBinaryData, requestOptions).getValue()
            .toObject(LoadTest.class);
    }

    /**
     * Add an app component to a test.
     * 
     * Add an app component to a test by providing the resource Id, name and type.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param body App Component model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test app components.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestAppComponents createOrUpdateAppComponents(String testId, TestAppComponents body) {
        // Generated convenience method for createOrUpdateAppComponentsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTestAppComponentsAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getTestAppComponentsAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateAppComponentsWithResponse(testId, bodyInBinaryData, requestOptions).getValue()
            .toObject(TestAppComponents.class);
    }

    /**
     * Configure server metrics for a test.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param body Server metric configuration model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test server metrics configuration.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestServerMetricsConfiguration createOrUpdateServerMetricsConfig(String testId,
        TestServerMetricsConfiguration body) {
        // Generated convenience method for createOrUpdateServerMetricsConfigWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTestServerMetricsConfigurationAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getTestServerMetricsConfigurationAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateServerMetricsConfigWithResponse(testId, bodyInBinaryData, requestOptions).getValue()
            .toObject(TestServerMetricsConfiguration.class);
    }

    /**
     * Get associated app component (collection of azure resources) for the given test.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return associated app component (collection of azure resources) for the given test.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestAppComponents getAppComponents(String testId) {
        // Generated convenience method for getAppComponentsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAppComponentsWithResponse(testId, requestOptions).getValue().toObject(TestAppComponents.class);
    }

    /**
     * List server metrics configuration for the given test.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test server metrics configuration.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestServerMetricsConfiguration getServerMetricsConfig(String testId) {
        // Generated convenience method for getServerMetricsConfigWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getServerMetricsConfigWithResponse(testId, requestOptions).getValue()
            .toObject(TestServerMetricsConfiguration.class);
    }

    /**
     * Get load test details by test Id.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test details by test Id.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LoadTest getTest(String testId) {
        // Generated convenience method for getTestWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTestWithResponse(testId, requestOptions).getValue().toObject(LoadTest.class);
    }

    /**
     * Get all the files that are associated with a test.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param fileName Name of the file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the files that are associated with a test.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestFileInfo getTestFile(String testId, String fileName) {
        // Generated convenience method for getTestFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTestFileWithResponse(testId, fileName, requestOptions).getValue().toObject(TestFileInfo.class);
    }

    /**
     * Get all test files.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test files as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TestFileInfo> listTestFiles(String testId) {
        // Generated convenience method for listTestFiles
        return new PagedIterable<>(client.listTestFiles(testId));
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     * 
     * @param orderBy Sort on the supported fields in (field asc/desc) format. eg:
     * lastModifiedDateTime asc. Supported fields - lastModifiedDateTime.
     * @param search Prefix based, case sensitive search on searchable fields - displayName,
     * createdBy. For example, to search for a test, with display name is Login Test,
     * the search parameter can be Login.
     * @param lastModifiedStartTime Start DateTime(RFC 3339 literal format) of the last updated time range to filter
     * tests.
     * @param lastModifiedEndTime End DateTime(RFC 3339 literal format) of the last updated time range to filter tests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as paginated
     * response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LoadTest> listTests(String orderBy, String search, OffsetDateTime lastModifiedStartTime,
        OffsetDateTime lastModifiedEndTime) {
        // Generated convenience method for listTests
        return new PagedIterable<>(client.listTests(orderBy, search, lastModifiedStartTime, lastModifiedEndTime));
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as paginated
     * response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LoadTest> listTests() {
        // Generated convenience method for listTests
        return new PagedIterable<>(client.listTests());
    }

    /**
     * Upload input file for a given test Id. File size can't be more than 50 MB.
     * Existing file with same name for the given test will be overwritten. File
     * should be provided in the request body as application/octet-stream.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param fileName Unique name for test file with file extension like : App.jmx.
     * @param body The file content as application/octet-stream.
     * @param fileType File type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test file info.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    TestFileInfo uploadTestFile(String testId, String fileName, BinaryData body, LoadTestingFileType fileType) {
        // Generated convenience method for uploadTestFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (fileType != null) {
            requestOptions.addQueryParam("fileType", fileType.toString(), false);
        }
        return uploadTestFileWithResponse(testId, fileName, body, requestOptions).getValue()
            .toObject(TestFileInfo.class);
    }

    /**
     * Upload input file for a given test Id. File size can't be more than 50 MB.
     * Existing file with same name for the given test will be overwritten. File
     * should be provided in the request body as application/octet-stream.
     * 
     * @param testId Unique name for the load test, must contain only lower-case alphabetic,
     * numeric, underscore or hyphen characters.
     * @param fileName Unique name for test file with file extension like : App.jmx.
     * @param body The file content as application/octet-stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test file info.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    TestFileInfo uploadTestFile(String testId, String fileName, BinaryData body) {
        // Generated convenience method for uploadTestFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return uploadTestFileWithResponse(testId, fileName, body, requestOptions).getValue()
            .toObject(TestFileInfo.class);
    }

    /**
     * Delete file by the file name for a test.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param fileName Name of the file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTestFile(String testId, String fileName) {
        // Generated convenience method for deleteTestFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTestFileWithResponse(testId, fileName, requestOptions).getValue();
    }

    /**
     * Delete a test by its test Id.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTest(String testId) {
        // Generated convenience method for deleteTestWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTestWithResponse(testId, requestOptions).getValue();
    }

    /**
     * Create a new test profile or update an existing test profile.
     * 
     * Create a new test profile or update an existing test profile by providing the test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param body The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test Profile Model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestProfile createOrUpdateTestProfile(String testProfileId, TestProfile body) {
        // Generated convenience method for createOrUpdateTestProfileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTestProfileAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getTestProfileAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateTestProfileWithResponse(testProfileId, bodyInBinaryData, requestOptions).getValue()
            .toObject(TestProfile.class);
    }

    /**
     * Delete a test profile.
     * 
     * Delete a test profile by its test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTestProfile(String testProfileId) {
        // Generated convenience method for deleteTestProfileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTestProfileWithResponse(testProfileId, requestOptions).getValue();
    }

    /**
     * Get load test profile details.
     * 
     * Get load test profile details by test profile Id.
     * 
     * @param testProfileId Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test profile details.
     * 
     * Get load test profile details by test profile Id.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestProfile getTestProfile(String testProfileId) {
        // Generated convenience method for getTestProfileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTestProfileWithResponse(testProfileId, requestOptions).getValue().toObject(TestProfile.class);
    }

    /**
     * List test profiles.
     * 
     * Get all test profiles for the given filters.
     * 
     * @param lastModifiedStartTime Start DateTime(RFC 3339 literal format) of the last updated time range to filter
     * test profiles.
     * @param lastModifiedEndTime End DateTime(RFC 3339 literal format) of the last updated time range to filter test
     * profiles.
     * @param testProfileIds Comma separated list of IDs of the test profiles to filter.
     * @param testIds Comma separated list IDs of the tests which should be associated with the test profiles to fetch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TestProfile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TestProfile> listTestProfiles(OffsetDateTime lastModifiedStartTime,
        OffsetDateTime lastModifiedEndTime, List<String> testProfileIds, List<String> testIds) {
        // Generated convenience method for listTestProfiles
        return new PagedIterable<>(
            client.listTestProfiles(lastModifiedStartTime, lastModifiedEndTime, testProfileIds, testIds));
    }

    /**
     * List test profiles.
     * 
     * Get all test profiles for the given filters.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TestProfile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TestProfile> listTestProfiles() {
        // Generated convenience method for listTestProfiles
        return new PagedIterable<>(client.listTestProfiles());
    }

    /**
     * Create or update operation template.
     * 
     * @param triggerId The unique identifier of the trigger.
     * @param body The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trigger model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Trigger createOrUpdateTrigger(String triggerId, Trigger body) {
        // Generated convenience method for createOrUpdateTriggerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTriggerAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getTriggerAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateTriggerWithResponse(triggerId, bodyInBinaryData, requestOptions).getValue()
            .toObject(Trigger.class);
    }

    /**
     * Resource delete operation template.
     * 
     * @param triggerId The unique identifier of the trigger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTrigger(String triggerId) {
        // Generated convenience method for deleteTriggerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTriggerWithResponse(triggerId, requestOptions).getValue();
    }

    /**
     * Resource read operation template.
     * 
     * @param triggerId The unique identifier of the trigger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trigger model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Trigger getTrigger(String triggerId) {
        // Generated convenience method for getTriggerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTriggerWithResponse(triggerId, requestOptions).getValue().toObject(Trigger.class);
    }

    /**
     * Resource list operation template.
     * 
     * @param testIds Search based on triggers associated with the provided test ids.
     * @param states Filter triggers based on a comma separated list of states.
     * @param lastModifiedStartTime Start DateTime(RFC 3339 literal format) of the last updated time range to filter
     * triggers.
     * @param lastModifiedEndTime End DateTime(RFC 3339 literal format) of the last updated time range to filter
     * triggers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Trigger items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Trigger> listTriggers(String testIds, TriggerState states,
        OffsetDateTime lastModifiedStartTime, OffsetDateTime lastModifiedEndTime) {
        // Generated convenience method for listTriggers
        return new PagedIterable<>(client.listTriggers(testIds, states, lastModifiedStartTime, lastModifiedEndTime));
    }

    /**
     * Resource list operation template.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Trigger items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Trigger> listTriggers() {
        // Generated convenience method for listTriggers
        return new PagedIterable<>(client.listTriggers());
    }

    /**
     * Create or update operation template.
     * 
     * @param notificationRuleId The unique identifier of the notification rule.
     * @param body The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return notification rule model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NotificationRule createOrUpdateNotificationRule(String notificationRuleId, NotificationRule body) {
        // Generated convenience method for createOrUpdateNotificationRuleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getNotificationRuleAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getNotificationRuleAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateNotificationRuleWithResponse(notificationRuleId, bodyInBinaryData, requestOptions)
            .getValue()
            .toObject(NotificationRule.class);
    }

    /**
     * Resource delete operation template.
     * 
     * @param notificationRuleId The unique identifier of the notification rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNotificationRule(String notificationRuleId) {
        // Generated convenience method for deleteNotificationRuleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteNotificationRuleWithResponse(notificationRuleId, requestOptions).getValue();
    }

    /**
     * Resource read operation template.
     * 
     * @param notificationRuleId The unique identifier of the notification rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return notification rule model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NotificationRule getNotificationRule(String notificationRuleId) {
        // Generated convenience method for getNotificationRuleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getNotificationRuleWithResponse(notificationRuleId, requestOptions).getValue()
            .toObject(NotificationRule.class);
    }

    /**
     * Resource list operation template.
     * 
     * @param testIds Search based on notification rules associated with the provided test ids.
     * @param scopes Search based on notification rules for the provided scopes.
     * @param lastModifiedStartTime Start DateTime(RFC 3339 literal format) of the last updated time range to filter
     * notification rules.
     * @param lastModifiedEndTime End DateTime(RFC 3339 literal format) of the last updated time range to filter
     * notification rules.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of NotificationRule items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NotificationRule> listNotificationRules(String testIds, String scopes,
        OffsetDateTime lastModifiedStartTime, OffsetDateTime lastModifiedEndTime) {
        // Generated convenience method for listNotificationRules
        return new PagedIterable<>(
            client.listNotificationRules(testIds, scopes, lastModifiedStartTime, lastModifiedEndTime));
    }

    /**
     * Resource list operation template.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of NotificationRule items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NotificationRule> listNotificationRules() {
        // Generated convenience method for listNotificationRules
        return new PagedIterable<>(client.listNotificationRules());
    }

    /**
     * Clone a load test.
     * 
     * Clone the given test with optional overrides applied to the clone test.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param newTestId Unique identifier for the new test that will be created.
     * @param displayName Display Name override for the newly created test.
     * @param description Description override for the newly created test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationStatus, LoadTest> beginCloneTest(String testId, String newTestId, String displayName,
        String description) {
        // Generated convenience method for beginCloneTestWithModel
        return client.beginCloneTest(testId, newTestId, displayName, description).getSyncPoller();
    }

    /**
     * Clone a load test.
     * 
     * Clone the given test with optional overrides applied to the clone test.
     * 
     * @param testId Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,
     * underscore or hyphen characters.
     * @param newTestId Unique identifier for the new test that will be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationStatus, LoadTest> beginCloneTest(String testId, String newTestId) {
        // Generated convenience method for beginCloneTestWithModel
        return client.beginCloneTest(testId, newTestId).getSyncPoller();
    }

    /**
     * Get the status of a long running operation.
     * 
     * @param operationId The unique ID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a long running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatus getOperationStatus(String operationId) {
        // Generated convenience method for getOperationStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getOperationStatusWithResponse(operationId, requestOptions).getValue().toObject(OperationStatus.class);
    }
}
