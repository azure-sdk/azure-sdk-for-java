// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * The notification event filter when the event type is TestRunEnded and scope is Tests.
 */
@Fluent
public final class TestRunEndedNotificationEventFilter extends TestsNotificationEventFilter {
    /*
     * The event type
     */
    @Generated
    private NotificationEventType kind = NotificationEventType.TEST_RUN_ENDED;

    /*
     * Event filtering condition.
     */
    @Generated
    private TestRunEndedEventCondition condition;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of TestRunEndedNotificationEventFilter class.
     */
    @Generated
    public TestRunEndedNotificationEventFilter() {
    }

    /**
     * Get the kind property: The event type.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public NotificationEventType getKind() {
        return this.kind;
    }

    /**
     * Get the condition property: Event filtering condition.
     * 
     * @return the condition value.
     */
    @Generated
    public TestRunEndedEventCondition getCondition() {
        return this.condition;
    }

    /**
     * Set the condition property: Event filtering condition.
     * 
     * @param condition the condition value to set.
     * @return the TestRunEndedNotificationEventFilter object itself.
     */
    @Generated
    public TestRunEndedNotificationEventFilter setCondition(TestRunEndedEventCondition condition) {
        this.condition = condition;
        this.updatedProperties.add("condition");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getTestsNotificationEventFilterAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeJsonField("condition", this.condition);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind.toString());
        if (updatedProperties.contains("condition")) {
            if (this.condition == null) {
                jsonWriter.writeNullField("condition");
            } else {
                JsonMergePatchHelper.getTestRunEndedEventConditionAccessor()
                    .prepareModelForJsonMergePatch(this.condition, true);
                jsonWriter.writeJsonField("condition", this.condition);
                JsonMergePatchHelper.getTestRunEndedEventConditionAccessor()
                    .prepareModelForJsonMergePatch(this.condition, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunEndedNotificationEventFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunEndedNotificationEventFilter if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestRunEndedNotificationEventFilter.
     */
    @Generated
    public static TestRunEndedNotificationEventFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRunEndedNotificationEventFilter deserializedTestRunEndedNotificationEventFilter
                = new TestRunEndedNotificationEventFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedTestRunEndedNotificationEventFilter.kind
                        = NotificationEventType.fromString(reader.getString());
                } else if ("condition".equals(fieldName)) {
                    deserializedTestRunEndedNotificationEventFilter.condition
                        = TestRunEndedEventCondition.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestRunEndedNotificationEventFilter;
        });
    }
}
