// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Tests Notification rule model.
 */
@Fluent
public final class TestsNotificationRule extends NotificationRule {
    /*
     * The scope of the notification rule.
     */
    @Generated
    private NotificationScopeType scope = NotificationScopeType.TESTS;

    /*
     * The test ids to include. If not provided, notification will be sent for all testIds.
     */
    @Generated
    private List<String> testIds;

    /*
     * The event to receive notifications for along with filtering conditions.
     * Key is a user-assigned identifier for the event filter.
     */
    @Generated
    private Map<String, TestsNotificationEventFilter> eventFilters;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of TestsNotificationRule class.
     */
    @Generated
    public TestsNotificationRule() {
    }

    /**
     * Get the scope property: The scope of the notification rule.
     * 
     * @return the scope value.
     */
    @Generated
    @Override
    public NotificationScopeType getScope() {
        return this.scope;
    }

    /**
     * Get the testIds property: The test ids to include. If not provided, notification will be sent for all testIds.
     * 
     * @return the testIds value.
     */
    @Generated
    public List<String> getTestIds() {
        return this.testIds;
    }

    /**
     * Set the testIds property: The test ids to include. If not provided, notification will be sent for all testIds.
     * 
     * @param testIds the testIds value to set.
     * @return the TestsNotificationRule object itself.
     */
    @Generated
    public TestsNotificationRule setTestIds(List<String> testIds) {
        this.testIds = testIds;
        this.updatedProperties.add("testIds");
        return this;
    }

    /**
     * Get the eventFilters property: The event to receive notifications for along with filtering conditions.
     * Key is a user-assigned identifier for the event filter.
     * 
     * @return the eventFilters value.
     */
    @Generated
    public Map<String, TestsNotificationEventFilter> getEventFilters() {
        return this.eventFilters;
    }

    /**
     * Set the eventFilters property: The event to receive notifications for along with filtering conditions.
     * Key is a user-assigned identifier for the event filter.
     * <p>Required when create the resource.</p>
     * 
     * @param eventFilters the eventFilters value to set.
     * @return the TestsNotificationRule object itself.
     */
    @Generated
    public TestsNotificationRule setEventFilters(Map<String, TestsNotificationEventFilter> eventFilters) {
        this.eventFilters = eventFilters;
        this.updatedProperties.add("eventFilters");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public TestsNotificationRule setDisplayName(String displayName) {
        super.setDisplayName(displayName);
        this.updatedProperties.add("displayName");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public TestsNotificationRule setActionGroupIds(List<String> actionGroupIds) {
        super.setActionGroupIds(actionGroupIds);
        this.updatedProperties.add("actionGroupIds");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getNotificationRuleAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("displayName", getDisplayName());
            jsonWriter.writeArrayField("actionGroupIds", getActionGroupIds(),
                (writer, element) -> writer.writeString(element));
            jsonWriter.writeStringField("scope", this.scope == null ? null : this.scope.toString());
            jsonWriter.writeArrayField("testIds", this.testIds, (writer, element) -> writer.writeString(element));
            jsonWriter.writeMapField("eventFilters", this.eventFilters, (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("displayName")) {
            if (getDisplayName() == null) {
                jsonWriter.writeNullField("displayName");
            } else {
                jsonWriter.writeStringField("displayName", getDisplayName());
            }
        }
        if (updatedProperties.contains("actionGroupIds")) {
            if (getActionGroupIds() == null) {
                jsonWriter.writeNullField("actionGroupIds");
            } else {
                jsonWriter.writeArrayField("actionGroupIds", getActionGroupIds(),
                    (writer, element) -> writer.writeString(element));
            }
        }
        jsonWriter.writeStringField("scope", this.scope.toString());
        if (updatedProperties.contains("testIds")) {
            if (this.testIds == null) {
                jsonWriter.writeNullField("testIds");
            } else {
                jsonWriter.writeArrayField("testIds", this.testIds, (writer, element) -> writer.writeString(element));
            }
        }
        if (updatedProperties.contains("eventFilters")) {
            if (this.eventFilters == null) {
                jsonWriter.writeNullField("eventFilters");
            } else {
                jsonWriter.writeMapField("eventFilters", this.eventFilters, (writer, element) -> {
                    if (element != null) {
                        JsonMergePatchHelper.getTestsNotificationEventFilterAccessor()
                            .prepareModelForJsonMergePatch(element, true);
                        writer.writeJson(element);
                        JsonMergePatchHelper.getTestsNotificationEventFilterAccessor()
                            .prepareModelForJsonMergePatch(element, false);
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestsNotificationRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestsNotificationRule if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TestsNotificationRule.
     */
    @Generated
    public static TestsNotificationRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestsNotificationRule deserializedTestsNotificationRule = new TestsNotificationRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("notificationRuleId".equals(fieldName)) {
                    JsonMergePatchHelper.getNotificationRuleAccessor()
                        .setNotificationRuleId(deserializedTestsNotificationRule, reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    JsonMergePatchHelper.getNotificationRuleAccessor()
                        .setDisplayName(deserializedTestsNotificationRule, reader.getString());
                } else if ("actionGroupIds".equals(fieldName)) {
                    List<String> actionGroupIds = reader.readArray(reader1 -> reader1.getString());
                    JsonMergePatchHelper.getNotificationRuleAccessor()
                        .setActionGroupIds(deserializedTestsNotificationRule, actionGroupIds);
                } else if ("createdDateTime".equals(fieldName)) {
                    JsonMergePatchHelper.getNotificationRuleAccessor()
                        .setCreatedDateTime(deserializedTestsNotificationRule, reader.getNullable(
                            nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("createdBy".equals(fieldName)) {
                    JsonMergePatchHelper.getNotificationRuleAccessor()
                        .setCreatedBy(deserializedTestsNotificationRule, reader.getString());
                } else if ("lastModifiedDateTime".equals(fieldName)) {
                    JsonMergePatchHelper.getNotificationRuleAccessor()
                        .setLastModifiedDateTime(deserializedTestsNotificationRule, reader.getNullable(
                            nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("lastModifiedBy".equals(fieldName)) {
                    JsonMergePatchHelper.getNotificationRuleAccessor()
                        .setLastModifiedBy(deserializedTestsNotificationRule, reader.getString());
                } else if ("scope".equals(fieldName)) {
                    deserializedTestsNotificationRule.scope = NotificationScopeType.fromString(reader.getString());
                } else if ("testIds".equals(fieldName)) {
                    List<String> testIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedTestsNotificationRule.testIds = testIds;
                } else if ("eventFilters".equals(fieldName)) {
                    Map<String, TestsNotificationEventFilter> eventFilters
                        = reader.readMap(reader1 -> TestsNotificationEventFilter.fromJson(reader1));
                    deserializedTestsNotificationRule.eventFilters = eventFilters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestsNotificationRule;
        });
    }
}
