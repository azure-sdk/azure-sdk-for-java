// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Recurrence model when frequency is set as weekly.
 */
@Fluent
public final class WeeklyRecurrence extends Recurrence {
    /*
     * Frequency of the recurrence.
     */
    @Generated
    private Frequency frequency = Frequency.WEEKLY;

    /*
     * Recurrence set to repeat on the specified days of the week.
     */
    @Generated
    private List<WeekDays> daysOfWeek;

    /*
     * The interval at which the recurrence should repeat. It signifies the number of weeks between each recurrence.
     */
    @Generated
    private Integer interval;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of WeeklyRecurrence class.
     */
    @Generated
    public WeeklyRecurrence() {
    }

    /**
     * Get the frequency property: Frequency of the recurrence.
     * 
     * @return the frequency value.
     */
    @Generated
    @Override
    public Frequency getFrequency() {
        return this.frequency;
    }

    /**
     * Get the daysOfWeek property: Recurrence set to repeat on the specified days of the week.
     * 
     * @return the daysOfWeek value.
     */
    @Generated
    public List<WeekDays> getDaysOfWeek() {
        return this.daysOfWeek;
    }

    /**
     * Set the daysOfWeek property: Recurrence set to repeat on the specified days of the week.
     * 
     * @param daysOfWeek the daysOfWeek value to set.
     * @return the WeeklyRecurrence object itself.
     */
    @Generated
    public WeeklyRecurrence setDaysOfWeek(List<WeekDays> daysOfWeek) {
        this.daysOfWeek = daysOfWeek;
        this.updatedProperties.add("daysOfWeek");
        return this;
    }

    /**
     * Get the interval property: The interval at which the recurrence should repeat. It signifies the number of weeks
     * between each recurrence.
     * 
     * @return the interval value.
     */
    @Generated
    public Integer getInterval() {
        return this.interval;
    }

    /**
     * Set the interval property: The interval at which the recurrence should repeat. It signifies the number of weeks
     * between each recurrence.
     * 
     * @param interval the interval value to set.
     * @return the WeeklyRecurrence object itself.
     */
    @Generated
    public WeeklyRecurrence setInterval(Integer interval) {
        this.interval = interval;
        this.updatedProperties.add("interval");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public WeeklyRecurrence setRecurrenceEnd(RecurrenceEnd recurrenceEnd) {
        super.setRecurrenceEnd(recurrenceEnd);
        this.updatedProperties.add("recurrenceEnd");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getRecurrenceAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeJsonField("recurrenceEnd", getRecurrenceEnd());
            jsonWriter.writeStringField("frequency", this.frequency == null ? null : this.frequency.toString());
            jsonWriter.writeArrayField("daysOfWeek", this.daysOfWeek,
                (writer, element) -> writer.writeString(element == null ? null : element.toString()));
            jsonWriter.writeNumberField("interval", this.interval);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("recurrenceEnd")) {
            if (getRecurrenceEnd() == null) {
                jsonWriter.writeNullField("recurrenceEnd");
            } else {
                JsonMergePatchHelper.getRecurrenceEndAccessor().prepareModelForJsonMergePatch(getRecurrenceEnd(), true);
                jsonWriter.writeJsonField("recurrenceEnd", getRecurrenceEnd());
                JsonMergePatchHelper.getRecurrenceEndAccessor()
                    .prepareModelForJsonMergePatch(getRecurrenceEnd(), false);
            }
        }
        jsonWriter.writeStringField("frequency", this.frequency.toString());
        if (updatedProperties.contains("daysOfWeek")) {
            if (this.daysOfWeek == null) {
                jsonWriter.writeNullField("daysOfWeek");
            } else {
                jsonWriter.writeArrayField("daysOfWeek", this.daysOfWeek,
                    (writer, element) -> writer.writeString(element.toString()));
            }
        }
        if (updatedProperties.contains("interval")) {
            if (this.interval == null) {
                jsonWriter.writeNullField("interval");
            } else {
                jsonWriter.writeNumberField("interval", this.interval);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeeklyRecurrence from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeeklyRecurrence if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WeeklyRecurrence.
     */
    @Generated
    public static WeeklyRecurrence fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeeklyRecurrence deserializedWeeklyRecurrence = new WeeklyRecurrence();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recurrenceEnd".equals(fieldName)) {
                    JsonMergePatchHelper.getRecurrenceAccessor()
                        .setRecurrenceEnd(deserializedWeeklyRecurrence, RecurrenceEnd.fromJson(reader));
                } else if ("frequency".equals(fieldName)) {
                    deserializedWeeklyRecurrence.frequency = Frequency.fromString(reader.getString());
                } else if ("daysOfWeek".equals(fieldName)) {
                    List<WeekDays> daysOfWeek = reader.readArray(reader1 -> WeekDays.fromString(reader1.getString()));
                    deserializedWeeklyRecurrence.daysOfWeek = daysOfWeek;
                } else if ("interval".equals(fieldName)) {
                    deserializedWeeklyRecurrence.interval = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWeeklyRecurrence;
        });
    }
}
