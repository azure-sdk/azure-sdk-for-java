// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.implementation;

import com.azure.developer.loadtesting.models.AutoStopCriteria;
import com.azure.developer.loadtesting.models.FunctionFlexConsumptionResourceConfiguration;
import com.azure.developer.loadtesting.models.LoadTest;
import com.azure.developer.loadtesting.models.LoadTestConfiguration;
import com.azure.developer.loadtesting.models.LoadTestRun;
import com.azure.developer.loadtesting.models.LoadTestingAppComponent;
import com.azure.developer.loadtesting.models.NotificationRule;
import com.azure.developer.loadtesting.models.OptionalLoadTestConfiguration;
import com.azure.developer.loadtesting.models.PassFailCriteria;
import com.azure.developer.loadtesting.models.PassFailMetric;
import com.azure.developer.loadtesting.models.PassFailServerMetric;
import com.azure.developer.loadtesting.models.Recurrence;
import com.azure.developer.loadtesting.models.RecurrenceEnd;
import com.azure.developer.loadtesting.models.RegionalConfiguration;
import com.azure.developer.loadtesting.models.ResourceMetric;
import com.azure.developer.loadtesting.models.StateDetails;
import com.azure.developer.loadtesting.models.TargetResourceConfigurations;
import com.azure.developer.loadtesting.models.TestAppComponents;
import com.azure.developer.loadtesting.models.TestCertificate;
import com.azure.developer.loadtesting.models.TestProfile;
import com.azure.developer.loadtesting.models.TestProfileRun;
import com.azure.developer.loadtesting.models.TestRunAppComponents;
import com.azure.developer.loadtesting.models.TestRunEndedEventCondition;
import com.azure.developer.loadtesting.models.TestRunServerMetricsConfiguration;
import com.azure.developer.loadtesting.models.TestSecret;
import com.azure.developer.loadtesting.models.TestServerMetricsConfiguration;
import com.azure.developer.loadtesting.models.TestsNotificationEventFilter;
import com.azure.developer.loadtesting.models.Trigger;
import com.azure.developer.loadtesting.models.TriggerState;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * This is the Helper class to enable json merge patch serialization for a model.
 */
public class JsonMergePatchHelper {
    private static LoadTestAccessor loadTestAccessor;

    public interface LoadTestAccessor {
        LoadTest prepareModelForJsonMergePatch(LoadTest loadTest, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(LoadTest loadTest);
    }

    public static void setLoadTestAccessor(LoadTestAccessor accessor) {
        loadTestAccessor = accessor;
    }

    public static LoadTestAccessor getLoadTestAccessor() {
        return loadTestAccessor;
    }

    private static PassFailCriteriaAccessor passFailCriteriaAccessor;

    public interface PassFailCriteriaAccessor {
        PassFailCriteria prepareModelForJsonMergePatch(PassFailCriteria passFailCriteria,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(PassFailCriteria passFailCriteria);
    }

    public static void setPassFailCriteriaAccessor(PassFailCriteriaAccessor accessor) {
        passFailCriteriaAccessor = accessor;
    }

    public static PassFailCriteriaAccessor getPassFailCriteriaAccessor() {
        return passFailCriteriaAccessor;
    }

    private static PassFailMetricAccessor passFailMetricAccessor;

    public interface PassFailMetricAccessor {
        PassFailMetric prepareModelForJsonMergePatch(PassFailMetric passFailMetric, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(PassFailMetric passFailMetric);
    }

    public static void setPassFailMetricAccessor(PassFailMetricAccessor accessor) {
        passFailMetricAccessor = accessor;
    }

    public static PassFailMetricAccessor getPassFailMetricAccessor() {
        return passFailMetricAccessor;
    }

    private static PassFailServerMetricAccessor passFailServerMetricAccessor;

    public interface PassFailServerMetricAccessor {
        PassFailServerMetric prepareModelForJsonMergePatch(PassFailServerMetric passFailServerMetric,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(PassFailServerMetric passFailServerMetric);
    }

    public static void setPassFailServerMetricAccessor(PassFailServerMetricAccessor accessor) {
        passFailServerMetricAccessor = accessor;
    }

    public static PassFailServerMetricAccessor getPassFailServerMetricAccessor() {
        return passFailServerMetricAccessor;
    }

    private static AutoStopCriteriaAccessor autoStopCriteriaAccessor;

    public interface AutoStopCriteriaAccessor {
        AutoStopCriteria prepareModelForJsonMergePatch(AutoStopCriteria autoStopCriteria,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(AutoStopCriteria autoStopCriteria);
    }

    public static void setAutoStopCriteriaAccessor(AutoStopCriteriaAccessor accessor) {
        autoStopCriteriaAccessor = accessor;
    }

    public static AutoStopCriteriaAccessor getAutoStopCriteriaAccessor() {
        return autoStopCriteriaAccessor;
    }

    private static TestSecretAccessor testSecretAccessor;

    public interface TestSecretAccessor {
        TestSecret prepareModelForJsonMergePatch(TestSecret testSecret, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestSecret testSecret);
    }

    public static void setTestSecretAccessor(TestSecretAccessor accessor) {
        testSecretAccessor = accessor;
    }

    public static TestSecretAccessor getTestSecretAccessor() {
        return testSecretAccessor;
    }

    private static TestCertificateAccessor testCertificateAccessor;

    public interface TestCertificateAccessor {
        TestCertificate prepareModelForJsonMergePatch(TestCertificate testCertificate, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestCertificate testCertificate);
    }

    public static void setTestCertificateAccessor(TestCertificateAccessor accessor) {
        testCertificateAccessor = accessor;
    }

    public static TestCertificateAccessor getTestCertificateAccessor() {
        return testCertificateAccessor;
    }

    private static LoadTestConfigurationAccessor loadTestConfigurationAccessor;

    public interface LoadTestConfigurationAccessor {
        LoadTestConfiguration prepareModelForJsonMergePatch(LoadTestConfiguration loadTestConfiguration,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(LoadTestConfiguration loadTestConfiguration);
    }

    public static void setLoadTestConfigurationAccessor(LoadTestConfigurationAccessor accessor) {
        loadTestConfigurationAccessor = accessor;
    }

    public static LoadTestConfigurationAccessor getLoadTestConfigurationAccessor() {
        return loadTestConfigurationAccessor;
    }

    private static OptionalLoadTestConfigurationAccessor optionalLoadTestConfigurationAccessor;

    public interface OptionalLoadTestConfigurationAccessor {
        OptionalLoadTestConfiguration prepareModelForJsonMergePatch(
            OptionalLoadTestConfiguration optionalLoadTestConfiguration, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(OptionalLoadTestConfiguration optionalLoadTestConfiguration);
    }

    public static void setOptionalLoadTestConfigurationAccessor(OptionalLoadTestConfigurationAccessor accessor) {
        optionalLoadTestConfigurationAccessor = accessor;
    }

    public static OptionalLoadTestConfigurationAccessor getOptionalLoadTestConfigurationAccessor() {
        return optionalLoadTestConfigurationAccessor;
    }

    private static RegionalConfigurationAccessor regionalConfigurationAccessor;

    public interface RegionalConfigurationAccessor {
        RegionalConfiguration prepareModelForJsonMergePatch(RegionalConfiguration regionalConfiguration,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(RegionalConfiguration regionalConfiguration);
    }

    public static void setRegionalConfigurationAccessor(RegionalConfigurationAccessor accessor) {
        regionalConfigurationAccessor = accessor;
    }

    public static RegionalConfigurationAccessor getRegionalConfigurationAccessor() {
        return regionalConfigurationAccessor;
    }

    private static TestAppComponentsAccessor testAppComponentsAccessor;

    public interface TestAppComponentsAccessor {
        TestAppComponents prepareModelForJsonMergePatch(TestAppComponents testAppComponents,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestAppComponents testAppComponents);
    }

    public static void setTestAppComponentsAccessor(TestAppComponentsAccessor accessor) {
        testAppComponentsAccessor = accessor;
    }

    public static TestAppComponentsAccessor getTestAppComponentsAccessor() {
        return testAppComponentsAccessor;
    }

    private static LoadTestingAppComponentAccessor loadTestingAppComponentAccessor;

    public interface LoadTestingAppComponentAccessor {
        LoadTestingAppComponent prepareModelForJsonMergePatch(LoadTestingAppComponent loadTestingAppComponent,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(LoadTestingAppComponent loadTestingAppComponent);
    }

    public static void setLoadTestingAppComponentAccessor(LoadTestingAppComponentAccessor accessor) {
        loadTestingAppComponentAccessor = accessor;
    }

    public static LoadTestingAppComponentAccessor getLoadTestingAppComponentAccessor() {
        return loadTestingAppComponentAccessor;
    }

    private static TestServerMetricsConfigurationAccessor testServerMetricsConfigurationAccessor;

    public interface TestServerMetricsConfigurationAccessor {
        TestServerMetricsConfiguration prepareModelForJsonMergePatch(
            TestServerMetricsConfiguration testServerMetricsConfiguration, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestServerMetricsConfiguration testServerMetricsConfiguration);
    }

    public static void setTestServerMetricsConfigurationAccessor(TestServerMetricsConfigurationAccessor accessor) {
        testServerMetricsConfigurationAccessor = accessor;
    }

    public static TestServerMetricsConfigurationAccessor getTestServerMetricsConfigurationAccessor() {
        return testServerMetricsConfigurationAccessor;
    }

    private static ResourceMetricAccessor resourceMetricAccessor;

    public interface ResourceMetricAccessor {
        ResourceMetric prepareModelForJsonMergePatch(ResourceMetric resourceMetric, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(ResourceMetric resourceMetric);
    }

    public static void setResourceMetricAccessor(ResourceMetricAccessor accessor) {
        resourceMetricAccessor = accessor;
    }

    public static ResourceMetricAccessor getResourceMetricAccessor() {
        return resourceMetricAccessor;
    }

    private static TestProfileAccessor testProfileAccessor;

    public interface TestProfileAccessor {
        TestProfile prepareModelForJsonMergePatch(TestProfile testProfile, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestProfile testProfile);
    }

    public static void setTestProfileAccessor(TestProfileAccessor accessor) {
        testProfileAccessor = accessor;
    }

    public static TestProfileAccessor getTestProfileAccessor() {
        return testProfileAccessor;
    }

    private static TargetResourceConfigurationsAccessor targetResourceConfigurationsAccessor;

    public interface TargetResourceConfigurationsAccessor {
        TargetResourceConfigurations prepareModelForJsonMergePatch(
            TargetResourceConfigurations targetResourceConfigurations, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TargetResourceConfigurations targetResourceConfigurations);
    }

    public static void setTargetResourceConfigurationsAccessor(TargetResourceConfigurationsAccessor accessor) {
        targetResourceConfigurationsAccessor = accessor;
    }

    public static TargetResourceConfigurationsAccessor getTargetResourceConfigurationsAccessor() {
        return targetResourceConfigurationsAccessor;
    }

    private static FunctionFlexConsumptionResourceConfigurationAccessor functionFlexConsumptionResourceConfigurationAccessor;

    public interface FunctionFlexConsumptionResourceConfigurationAccessor {
        FunctionFlexConsumptionResourceConfiguration prepareModelForJsonMergePatch(
            FunctionFlexConsumptionResourceConfiguration functionFlexConsumptionResourceConfiguration,
            boolean jsonMergePatchEnabled);

        boolean
            isJsonMergePatch(FunctionFlexConsumptionResourceConfiguration functionFlexConsumptionResourceConfiguration);
    }

    public static void setFunctionFlexConsumptionResourceConfigurationAccessor(
        FunctionFlexConsumptionResourceConfigurationAccessor accessor) {
        functionFlexConsumptionResourceConfigurationAccessor = accessor;
    }

    public static FunctionFlexConsumptionResourceConfigurationAccessor
        getFunctionFlexConsumptionResourceConfigurationAccessor() {
        return functionFlexConsumptionResourceConfigurationAccessor;
    }

    private static TriggerAccessor triggerAccessor;

    public interface TriggerAccessor {
        Trigger prepareModelForJsonMergePatch(Trigger trigger, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(Trigger trigger);

        void setTriggerId(Trigger trigger, String triggerId);

        void setDisplayName(Trigger trigger, String displayName);

        void setDescription(Trigger trigger, String description);

        void setState(Trigger trigger, TriggerState state);

        void setStateDetails(Trigger trigger, StateDetails stateDetails);

        void setCreatedDateTime(Trigger trigger, OffsetDateTime createdDateTime);

        void setCreatedBy(Trigger trigger, String createdBy);

        void setLastModifiedDateTime(Trigger trigger, OffsetDateTime lastModifiedDateTime);

        void setLastModifiedBy(Trigger trigger, String lastModifiedBy);
    }

    public static void setTriggerAccessor(TriggerAccessor accessor) {
        triggerAccessor = accessor;
    }

    public static TriggerAccessor getTriggerAccessor() {
        return triggerAccessor;
    }

    private static RecurrenceAccessor recurrenceAccessor;

    public interface RecurrenceAccessor {
        Recurrence prepareModelForJsonMergePatch(Recurrence recurrence, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(Recurrence recurrence);

        void setRecurrenceEnd(Recurrence recurrence, RecurrenceEnd recurrenceEnd);
    }

    public static void setRecurrenceAccessor(RecurrenceAccessor accessor) {
        recurrenceAccessor = accessor;
    }

    public static RecurrenceAccessor getRecurrenceAccessor() {
        return recurrenceAccessor;
    }

    private static RecurrenceEndAccessor recurrenceEndAccessor;

    public interface RecurrenceEndAccessor {
        RecurrenceEnd prepareModelForJsonMergePatch(RecurrenceEnd recurrenceEnd, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(RecurrenceEnd recurrenceEnd);
    }

    public static void setRecurrenceEndAccessor(RecurrenceEndAccessor accessor) {
        recurrenceEndAccessor = accessor;
    }

    public static RecurrenceEndAccessor getRecurrenceEndAccessor() {
        return recurrenceEndAccessor;
    }

    private static NotificationRuleAccessor notificationRuleAccessor;

    public interface NotificationRuleAccessor {
        NotificationRule prepareModelForJsonMergePatch(NotificationRule notificationRule,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(NotificationRule notificationRule);

        void setNotificationRuleId(NotificationRule notificationRule, String notificationRuleId);

        void setDisplayName(NotificationRule notificationRule, String displayName);

        void setActionGroupIds(NotificationRule notificationRule, List<String> actionGroupIds);

        void setCreatedDateTime(NotificationRule notificationRule, OffsetDateTime createdDateTime);

        void setCreatedBy(NotificationRule notificationRule, String createdBy);

        void setLastModifiedDateTime(NotificationRule notificationRule, OffsetDateTime lastModifiedDateTime);

        void setLastModifiedBy(NotificationRule notificationRule, String lastModifiedBy);
    }

    public static void setNotificationRuleAccessor(NotificationRuleAccessor accessor) {
        notificationRuleAccessor = accessor;
    }

    public static NotificationRuleAccessor getNotificationRuleAccessor() {
        return notificationRuleAccessor;
    }

    private static TestsNotificationEventFilterAccessor testsNotificationEventFilterAccessor;

    public interface TestsNotificationEventFilterAccessor {
        TestsNotificationEventFilter prepareModelForJsonMergePatch(
            TestsNotificationEventFilter testsNotificationEventFilter, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestsNotificationEventFilter testsNotificationEventFilter);
    }

    public static void setTestsNotificationEventFilterAccessor(TestsNotificationEventFilterAccessor accessor) {
        testsNotificationEventFilterAccessor = accessor;
    }

    public static TestsNotificationEventFilterAccessor getTestsNotificationEventFilterAccessor() {
        return testsNotificationEventFilterAccessor;
    }

    private static TestRunEndedEventConditionAccessor testRunEndedEventConditionAccessor;

    public interface TestRunEndedEventConditionAccessor {
        TestRunEndedEventCondition prepareModelForJsonMergePatch(TestRunEndedEventCondition testRunEndedEventCondition,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestRunEndedEventCondition testRunEndedEventCondition);
    }

    public static void setTestRunEndedEventConditionAccessor(TestRunEndedEventConditionAccessor accessor) {
        testRunEndedEventConditionAccessor = accessor;
    }

    public static TestRunEndedEventConditionAccessor getTestRunEndedEventConditionAccessor() {
        return testRunEndedEventConditionAccessor;
    }

    private static LoadTestRunAccessor loadTestRunAccessor;

    public interface LoadTestRunAccessor {
        LoadTestRun prepareModelForJsonMergePatch(LoadTestRun loadTestRun, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(LoadTestRun loadTestRun);
    }

    public static void setLoadTestRunAccessor(LoadTestRunAccessor accessor) {
        loadTestRunAccessor = accessor;
    }

    public static LoadTestRunAccessor getLoadTestRunAccessor() {
        return loadTestRunAccessor;
    }

    private static TestRunAppComponentsAccessor testRunAppComponentsAccessor;

    public interface TestRunAppComponentsAccessor {
        TestRunAppComponents prepareModelForJsonMergePatch(TestRunAppComponents testRunAppComponents,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestRunAppComponents testRunAppComponents);
    }

    public static void setTestRunAppComponentsAccessor(TestRunAppComponentsAccessor accessor) {
        testRunAppComponentsAccessor = accessor;
    }

    public static TestRunAppComponentsAccessor getTestRunAppComponentsAccessor() {
        return testRunAppComponentsAccessor;
    }

    private static TestRunServerMetricsConfigurationAccessor testRunServerMetricsConfigurationAccessor;

    public interface TestRunServerMetricsConfigurationAccessor {
        TestRunServerMetricsConfiguration prepareModelForJsonMergePatch(
            TestRunServerMetricsConfiguration testRunServerMetricsConfiguration, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestRunServerMetricsConfiguration testRunServerMetricsConfiguration);
    }

    public static void
        setTestRunServerMetricsConfigurationAccessor(TestRunServerMetricsConfigurationAccessor accessor) {
        testRunServerMetricsConfigurationAccessor = accessor;
    }

    public static TestRunServerMetricsConfigurationAccessor getTestRunServerMetricsConfigurationAccessor() {
        return testRunServerMetricsConfigurationAccessor;
    }

    private static TestProfileRunAccessor testProfileRunAccessor;

    public interface TestProfileRunAccessor {
        TestProfileRun prepareModelForJsonMergePatch(TestProfileRun testProfileRun, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(TestProfileRun testProfileRun);
    }

    public static void setTestProfileRunAccessor(TestProfileRunAccessor accessor) {
        testProfileRunAccessor = accessor;
    }

    public static TestProfileRunAccessor getTestProfileRunAccessor() {
        return testProfileRunAccessor;
    }
}
