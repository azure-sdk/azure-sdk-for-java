// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CloneTestRequest1 model.
 */
@Fluent
public final class CloneTestRequest1 implements JsonSerializable<CloneTestRequest1> {
    /*
     * Unique identifier for the new test that will be created.
     */
    @Generated
    private final String newTestId;

    /*
     * Display Name override for the newly created test.
     */
    @Generated
    private String displayName;

    /*
     * Description override for the newly created test.
     */
    @Generated
    private String description;

    /**
     * Creates an instance of CloneTestRequest1 class.
     * 
     * @param newTestId the newTestId value to set.
     */
    @Generated
    public CloneTestRequest1(String newTestId) {
        this.newTestId = newTestId;
    }

    /**
     * Get the newTestId property: Unique identifier for the new test that will be created.
     * 
     * @return the newTestId value.
     */
    @Generated
    public String getNewTestId() {
        return this.newTestId;
    }

    /**
     * Get the displayName property: Display Name override for the newly created test.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display Name override for the newly created test.
     * 
     * @param displayName the displayName value to set.
     * @return the CloneTestRequest1 object itself.
     */
    @Generated
    public CloneTestRequest1 setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Description override for the newly created test.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Description override for the newly created test.
     * 
     * @param description the description value to set.
     * @return the CloneTestRequest1 object itself.
     */
    @Generated
    public CloneTestRequest1 setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("newTestId", this.newTestId);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloneTestRequest1 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloneTestRequest1 if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CloneTestRequest1.
     */
    @Generated
    public static CloneTestRequest1 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String newTestId = null;
            String displayName = null;
            String description = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("newTestId".equals(fieldName)) {
                    newTestId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            CloneTestRequest1 deserializedCloneTestRequest1 = new CloneTestRequest1(newTestId);
            deserializedCloneTestRequest1.displayName = displayName;
            deserializedCloneTestRequest1.description = description;

            return deserializedCloneTestRequest1;
        });
    }
}
