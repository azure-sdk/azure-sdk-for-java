// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Recurrence model when frequency is set as MonthlyByDates.
 */
@Fluent
public final class MonthlyRecurrenceByDates extends Recurrence {
    /*
     * Frequency of the recurrence.
     */
    @Generated
    private Frequency frequency = Frequency.MONTHLY_BY_DATES;

    /*
     * Recurrence set to repeat on the specified dates of the month. Value of dates can be 1 to 31 and -1. -1 represents
     * the last day of the month.
     */
    @Generated
    private List<Integer> datesInMonth;

    /*
     * The interval at which the recurrence should repeat. It signifies the number of months between each recurrence.
     */
    @Generated
    private Integer interval;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of MonthlyRecurrenceByDates class.
     */
    @Generated
    public MonthlyRecurrenceByDates() {
    }

    /**
     * Get the frequency property: Frequency of the recurrence.
     * 
     * @return the frequency value.
     */
    @Generated
    @Override
    public Frequency getFrequency() {
        return this.frequency;
    }

    /**
     * Get the datesInMonth property: Recurrence set to repeat on the specified dates of the month. Value of dates can
     * be 1 to 31 and -1. -1 represents the last day of the month.
     * 
     * @return the datesInMonth value.
     */
    @Generated
    public List<Integer> getDatesInMonth() {
        return this.datesInMonth;
    }

    /**
     * Set the datesInMonth property: Recurrence set to repeat on the specified dates of the month. Value of dates can
     * be 1 to 31 and -1. -1 represents the last day of the month.
     * 
     * @param datesInMonth the datesInMonth value to set.
     * @return the MonthlyRecurrenceByDates object itself.
     */
    @Generated
    public MonthlyRecurrenceByDates setDatesInMonth(List<Integer> datesInMonth) {
        this.datesInMonth = datesInMonth;
        this.updatedProperties.add("datesInMonth");
        return this;
    }

    /**
     * Get the interval property: The interval at which the recurrence should repeat. It signifies the number of months
     * between each recurrence.
     * 
     * @return the interval value.
     */
    @Generated
    public Integer getInterval() {
        return this.interval;
    }

    /**
     * Set the interval property: The interval at which the recurrence should repeat. It signifies the number of months
     * between each recurrence.
     * 
     * @param interval the interval value to set.
     * @return the MonthlyRecurrenceByDates object itself.
     */
    @Generated
    public MonthlyRecurrenceByDates setInterval(Integer interval) {
        this.interval = interval;
        this.updatedProperties.add("interval");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MonthlyRecurrenceByDates setRecurrenceEnd(RecurrenceEnd recurrenceEnd) {
        super.setRecurrenceEnd(recurrenceEnd);
        this.updatedProperties.add("recurrenceEnd");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getRecurrenceAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeJsonField("recurrenceEnd", getRecurrenceEnd());
            jsonWriter.writeStringField("frequency", this.frequency == null ? null : this.frequency.toString());
            jsonWriter.writeArrayField("datesInMonth", this.datesInMonth,
                (writer, element) -> writer.writeInt(element));
            jsonWriter.writeNumberField("interval", this.interval);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("recurrenceEnd")) {
            if (getRecurrenceEnd() == null) {
                jsonWriter.writeNullField("recurrenceEnd");
            } else {
                JsonMergePatchHelper.getRecurrenceEndAccessor().prepareModelForJsonMergePatch(getRecurrenceEnd(), true);
                jsonWriter.writeJsonField("recurrenceEnd", getRecurrenceEnd());
                JsonMergePatchHelper.getRecurrenceEndAccessor()
                    .prepareModelForJsonMergePatch(getRecurrenceEnd(), false);
            }
        }
        jsonWriter.writeStringField("frequency", this.frequency.toString());
        if (updatedProperties.contains("datesInMonth")) {
            if (this.datesInMonth == null) {
                jsonWriter.writeNullField("datesInMonth");
            } else {
                jsonWriter.writeArrayField("datesInMonth", this.datesInMonth,
                    (writer, element) -> writer.writeInt(element));
            }
        }
        if (updatedProperties.contains("interval")) {
            if (this.interval == null) {
                jsonWriter.writeNullField("interval");
            } else {
                jsonWriter.writeNumberField("interval", this.interval);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonthlyRecurrenceByDates from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonthlyRecurrenceByDates if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MonthlyRecurrenceByDates.
     */
    @Generated
    public static MonthlyRecurrenceByDates fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonthlyRecurrenceByDates deserializedMonthlyRecurrenceByDates = new MonthlyRecurrenceByDates();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recurrenceEnd".equals(fieldName)) {
                    JsonMergePatchHelper.getRecurrenceAccessor()
                        .setRecurrenceEnd(deserializedMonthlyRecurrenceByDates, RecurrenceEnd.fromJson(reader));
                } else if ("frequency".equals(fieldName)) {
                    deserializedMonthlyRecurrenceByDates.frequency = Frequency.fromString(reader.getString());
                } else if ("datesInMonth".equals(fieldName)) {
                    List<Integer> datesInMonth = reader.readArray(reader1 -> reader1.getInt());
                    deserializedMonthlyRecurrenceByDates.datesInMonth = datesInMonth;
                } else if ("interval".equals(fieldName)) {
                    deserializedMonthlyRecurrenceByDates.interval = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonthlyRecurrenceByDates;
        });
    }
}
