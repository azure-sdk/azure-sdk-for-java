// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * The output artifacts for the test run.
 */
@Immutable
public final class TestRunOutputArtifacts implements JsonSerializable<TestRunOutputArtifacts> {
    /*
     * File info
     */
    @Generated
    private TestRunFileInfo resultFileInfo;

    /*
     * File info
     */
    @Generated
    private TestRunFileInfo logsFileInfo;

    /*
     * The container for test run artifacts.
     */
    @Generated
    private ArtifactsContainerInfo artifactsContainerInfo;

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setTestRunOutputArtifactsAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * Creates an instance of TestRunOutputArtifacts class.
     */
    @Generated
    private TestRunOutputArtifacts() {
    }

    /**
     * Get the resultFileInfo property: File info.
     * 
     * @return the resultFileInfo value.
     */
    @Generated
    public TestRunFileInfo getResultFileInfo() {
        return this.resultFileInfo;
    }

    /**
     * Get the logsFileInfo property: File info.
     * 
     * @return the logsFileInfo value.
     */
    @Generated
    public TestRunFileInfo getLogsFileInfo() {
        return this.logsFileInfo;
    }

    /**
     * Get the artifactsContainerInfo property: The container for test run artifacts.
     * 
     * @return the artifactsContainerInfo value.
     */
    @Generated
    public ArtifactsContainerInfo getArtifactsContainerInfo() {
        return this.artifactsContainerInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeJsonField("resultFileInfo", this.resultFileInfo);
            jsonWriter.writeJsonField("logsFileInfo", this.logsFileInfo);
            jsonWriter.writeJsonField("artifactsContainerInfo", this.artifactsContainerInfo);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("resultFileInfo")) {
            if (this.resultFileInfo == null) {
                jsonWriter.writeNullField("resultFileInfo");
            } else {
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.resultFileInfo, true);
                jsonWriter.writeJsonField("resultFileInfo", this.resultFileInfo);
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.resultFileInfo, false);
            }
        }
        if (updatedProperties.contains("logsFileInfo")) {
            if (this.logsFileInfo == null) {
                jsonWriter.writeNullField("logsFileInfo");
            } else {
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.logsFileInfo, true);
                jsonWriter.writeJsonField("logsFileInfo", this.logsFileInfo);
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.logsFileInfo, false);
            }
        }
        if (updatedProperties.contains("artifactsContainerInfo")) {
            if (this.artifactsContainerInfo == null) {
                jsonWriter.writeNullField("artifactsContainerInfo");
            } else {
                JsonMergePatchHelper.getArtifactsContainerInfoAccessor()
                    .prepareModelForJsonMergePatch(this.artifactsContainerInfo, true);
                jsonWriter.writeJsonField("artifactsContainerInfo", this.artifactsContainerInfo);
                JsonMergePatchHelper.getArtifactsContainerInfoAccessor()
                    .prepareModelForJsonMergePatch(this.artifactsContainerInfo, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunOutputArtifacts from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunOutputArtifacts if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestRunOutputArtifacts.
     */
    @Generated
    public static TestRunOutputArtifacts fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRunOutputArtifacts deserializedTestRunOutputArtifacts = new TestRunOutputArtifacts();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resultFileInfo".equals(fieldName)) {
                    deserializedTestRunOutputArtifacts.resultFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("logsFileInfo".equals(fieldName)) {
                    deserializedTestRunOutputArtifacts.logsFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("artifactsContainerInfo".equals(fieldName)) {
                    deserializedTestRunOutputArtifacts.artifactsContainerInfo = ArtifactsContainerInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestRunOutputArtifacts;
        });
    }
}
