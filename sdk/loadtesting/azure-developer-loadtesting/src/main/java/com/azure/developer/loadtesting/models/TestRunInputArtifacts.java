// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * The input artifacts for the test run.
 */
@Immutable
public final class TestRunInputArtifacts implements JsonSerializable<TestRunInputArtifacts> {
    /*
     * File info
     */
    @Generated
    private TestRunFileInfo configFileInfo;

    /*
     * File info
     */
    @Generated
    private TestRunFileInfo testScriptFileInfo;

    /*
     * File info
     */
    @Generated
    private TestRunFileInfo userPropFileInfo;

    /*
     * File info
     */
    @Generated
    private TestRunFileInfo inputArtifactsZipFileInfo;

    /*
     * The config json file for url based test
     */
    @Generated
    private TestRunFileInfo urlTestConfigFileInfo;

    /*
     * Additional supported files for the test run
     */
    @Generated
    private List<TestRunFileInfo> additionalFileInfo;

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setTestRunInputArtifactsAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * Creates an instance of TestRunInputArtifacts class.
     */
    @Generated
    private TestRunInputArtifacts() {
    }

    /**
     * Get the configFileInfo property: File info.
     * 
     * @return the configFileInfo value.
     */
    @Generated
    public TestRunFileInfo getConfigFileInfo() {
        return this.configFileInfo;
    }

    /**
     * Get the testScriptFileInfo property: File info.
     * 
     * @return the testScriptFileInfo value.
     */
    @Generated
    public TestRunFileInfo getTestScriptFileInfo() {
        return this.testScriptFileInfo;
    }

    /**
     * Get the userPropFileInfo property: File info.
     * 
     * @return the userPropFileInfo value.
     */
    @Generated
    public TestRunFileInfo getUserPropFileInfo() {
        return this.userPropFileInfo;
    }

    /**
     * Get the inputArtifactsZipFileInfo property: File info.
     * 
     * @return the inputArtifactsZipFileInfo value.
     */
    @Generated
    public TestRunFileInfo getInputArtifactsZipFileInfo() {
        return this.inputArtifactsZipFileInfo;
    }

    /**
     * Get the urlTestConfigFileInfo property: The config json file for url based test.
     * 
     * @return the urlTestConfigFileInfo value.
     */
    @Generated
    public TestRunFileInfo getUrlTestConfigFileInfo() {
        return this.urlTestConfigFileInfo;
    }

    /**
     * Get the additionalFileInfo property: Additional supported files for the test run.
     * 
     * @return the additionalFileInfo value.
     */
    @Generated
    public List<TestRunFileInfo> getAdditionalFileInfo() {
        return this.additionalFileInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeJsonField("configFileInfo", this.configFileInfo);
            jsonWriter.writeJsonField("testScriptFileInfo", this.testScriptFileInfo);
            jsonWriter.writeJsonField("userPropFileInfo", this.userPropFileInfo);
            jsonWriter.writeJsonField("inputArtifactsZipFileInfo", this.inputArtifactsZipFileInfo);
            jsonWriter.writeJsonField("urlTestConfigFileInfo", this.urlTestConfigFileInfo);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("configFileInfo")) {
            if (this.configFileInfo == null) {
                jsonWriter.writeNullField("configFileInfo");
            } else {
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.configFileInfo, true);
                jsonWriter.writeJsonField("configFileInfo", this.configFileInfo);
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.configFileInfo, false);
            }
        }
        if (updatedProperties.contains("testScriptFileInfo")) {
            if (this.testScriptFileInfo == null) {
                jsonWriter.writeNullField("testScriptFileInfo");
            } else {
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.testScriptFileInfo, true);
                jsonWriter.writeJsonField("testScriptFileInfo", this.testScriptFileInfo);
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.testScriptFileInfo, false);
            }
        }
        if (updatedProperties.contains("userPropFileInfo")) {
            if (this.userPropFileInfo == null) {
                jsonWriter.writeNullField("userPropFileInfo");
            } else {
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.userPropFileInfo, true);
                jsonWriter.writeJsonField("userPropFileInfo", this.userPropFileInfo);
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.userPropFileInfo, false);
            }
        }
        if (updatedProperties.contains("inputArtifactsZipFileInfo")) {
            if (this.inputArtifactsZipFileInfo == null) {
                jsonWriter.writeNullField("inputArtifactsZipFileInfo");
            } else {
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.inputArtifactsZipFileInfo, true);
                jsonWriter.writeJsonField("inputArtifactsZipFileInfo", this.inputArtifactsZipFileInfo);
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.inputArtifactsZipFileInfo, false);
            }
        }
        if (updatedProperties.contains("urlTestConfigFileInfo")) {
            if (this.urlTestConfigFileInfo == null) {
                jsonWriter.writeNullField("urlTestConfigFileInfo");
            } else {
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.urlTestConfigFileInfo, true);
                jsonWriter.writeJsonField("urlTestConfigFileInfo", this.urlTestConfigFileInfo);
                JsonMergePatchHelper.getTestRunFileInfoAccessor()
                    .prepareModelForJsonMergePatch(this.urlTestConfigFileInfo, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunInputArtifacts from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunInputArtifacts if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestRunInputArtifacts.
     */
    @Generated
    public static TestRunInputArtifacts fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRunInputArtifacts deserializedTestRunInputArtifacts = new TestRunInputArtifacts();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configFileInfo".equals(fieldName)) {
                    deserializedTestRunInputArtifacts.configFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("testScriptFileInfo".equals(fieldName)) {
                    deserializedTestRunInputArtifacts.testScriptFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("userPropFileInfo".equals(fieldName)) {
                    deserializedTestRunInputArtifacts.userPropFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("inputArtifactsZipFileInfo".equals(fieldName)) {
                    deserializedTestRunInputArtifacts.inputArtifactsZipFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("urlTestConfigFileInfo".equals(fieldName)) {
                    deserializedTestRunInputArtifacts.urlTestConfigFileInfo = TestRunFileInfo.fromJson(reader);
                } else if ("additionalFileInfo".equals(fieldName)) {
                    List<TestRunFileInfo> additionalFileInfo
                        = reader.readArray(reader1 -> TestRunFileInfo.fromJson(reader1));
                    deserializedTestRunInputArtifacts.additionalFileInfo = additionalFileInfo;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestRunInputArtifacts;
        });
    }
}
