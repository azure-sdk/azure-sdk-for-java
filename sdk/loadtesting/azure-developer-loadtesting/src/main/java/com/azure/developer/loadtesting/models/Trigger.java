// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * Trigger model.
 */
@Fluent
public class Trigger implements JsonSerializable<Trigger> {
    /*
     * The type of the trigger.
     */
    @Generated
    private TriggerType kind = TriggerType.fromString("Trigger");

    /*
     * The unique identifier of the trigger.
     */
    @Generated
    private String triggerId;

    /*
     * The name of the trigger.
     */
    @Generated
    private String displayName;

    /*
     * The description of the trigger.
     */
    @Generated
    private String description;

    /*
     * The current state of the trigger.
     */
    @Generated
    private TriggerState state;

    /*
     * Details of current state of the trigger.
     */
    @Generated
    private StateDetails stateDetails;

    /*
     * The creation datetime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /*
     * The user that created.
     */
    @Generated
    private String createdBy;

    /*
     * The last Modified datetime(RFC 3339 literal format).
     */
    @Generated
    private OffsetDateTime lastModifiedDateTime;

    /*
     * The user that last modified.
     */
    @Generated
    private String lastModifiedBy;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setTriggerAccessor(new JsonMergePatchHelper.TriggerAccessor() {
            @Override
            public Trigger prepareModelForJsonMergePatch(Trigger model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(Trigger model) {
                return model.jsonMergePatch;
            }

            @Override
            public void setTriggerId(Trigger model, String triggerId) {
                model.triggerId = triggerId;
            }

            @Override
            public void setDisplayName(Trigger model, String displayName) {
                model.displayName = displayName;
            }

            @Override
            public void setDescription(Trigger model, String description) {
                model.description = description;
            }

            @Override
            public void setState(Trigger model, TriggerState state) {
                model.state = state;
            }

            @Override
            public void setStateDetails(Trigger model, StateDetails stateDetails) {
                model.stateDetails = stateDetails;
            }

            @Override
            public void setCreatedDateTime(Trigger model, OffsetDateTime createdDateTime) {
                model.createdDateTime = createdDateTime;
            }

            @Override
            public void setCreatedBy(Trigger model, String createdBy) {
                model.createdBy = createdBy;
            }

            @Override
            public void setLastModifiedDateTime(Trigger model, OffsetDateTime lastModifiedDateTime) {
                model.lastModifiedDateTime = lastModifiedDateTime;
            }

            @Override
            public void setLastModifiedBy(Trigger model, String lastModifiedBy) {
                model.lastModifiedBy = lastModifiedBy;
            }
        });
    }

    /**
     * Creates an instance of Trigger class.
     */
    @Generated
    public Trigger() {
    }

    /**
     * Get the kind property: The type of the trigger.
     * 
     * @return the kind value.
     */
    @Generated
    public TriggerType getKind() {
        return this.kind;
    }

    /**
     * Get the triggerId property: The unique identifier of the trigger.
     * 
     * @return the triggerId value.
     */
    @Generated
    public String getTriggerId() {
        return this.triggerId;
    }

    /**
     * Get the displayName property: The name of the trigger.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The name of the trigger.
     * <p>Required when create the resource.</p>
     * 
     * @param displayName the displayName value to set.
     * @return the Trigger object itself.
     */
    @Generated
    public Trigger setDisplayName(String displayName) {
        this.displayName = displayName;
        this.updatedProperties.add("displayName");
        return this;
    }

    /**
     * Get the description property: The description of the trigger.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description of the trigger.
     * 
     * @param description the description value to set.
     * @return the Trigger object itself.
     */
    @Generated
    public Trigger setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the state property: The current state of the trigger.
     * 
     * @return the state value.
     */
    @Generated
    public TriggerState getState() {
        return this.state;
    }

    /**
     * Set the state property: The current state of the trigger.
     * 
     * @param state the state value to set.
     * @return the Trigger object itself.
     */
    @Generated
    public Trigger setState(TriggerState state) {
        this.state = state;
        this.updatedProperties.add("state");
        return this;
    }

    /**
     * Get the stateDetails property: Details of current state of the trigger.
     * 
     * @return the stateDetails value.
     */
    @Generated
    public StateDetails getStateDetails() {
        return this.stateDetails;
    }

    /**
     * Get the createdDateTime property: The creation datetime(RFC 3339 literal format).
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the createdBy property: The user that created.
     * 
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Get the lastModifiedDateTime property: The last Modified datetime(RFC 3339 literal format).
     * 
     * @return the lastModifiedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastModifiedDateTime() {
        return this.lastModifiedDateTime;
    }

    /**
     * Get the lastModifiedBy property: The user that last modified.
     * 
     * @return the lastModifiedBy value.
     */
    @Generated
    public String getLastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeStringField("displayName", this.displayName);
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind.toString());
        if (updatedProperties.contains("displayName")) {
            if (this.displayName == null) {
                jsonWriter.writeNullField("displayName");
            } else {
                jsonWriter.writeStringField("displayName", this.displayName);
            }
        }
        if (updatedProperties.contains("description")) {
            if (this.description == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", this.description);
            }
        }
        if (updatedProperties.contains("state")) {
            if (this.state == null) {
                jsonWriter.writeNullField("state");
            } else {
                jsonWriter.writeStringField("state", this.state.toString());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Trigger from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Trigger if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Trigger.
     */
    @Generated
    public static Trigger fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("ScheduleTestsTrigger".equals(discriminatorValue)) {
                    return ScheduleTestsTrigger.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static Trigger fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Trigger deserializedTrigger = new Trigger();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("triggerId".equals(fieldName)) {
                    deserializedTrigger.triggerId = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedTrigger.kind = TriggerType.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedTrigger.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedTrigger.description = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedTrigger.state = TriggerState.fromString(reader.getString());
                } else if ("stateDetails".equals(fieldName)) {
                    deserializedTrigger.stateDetails = StateDetails.fromJson(reader);
                } else if ("createdDateTime".equals(fieldName)) {
                    deserializedTrigger.createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdBy".equals(fieldName)) {
                    deserializedTrigger.createdBy = reader.getString();
                } else if ("lastModifiedDateTime".equals(fieldName)) {
                    deserializedTrigger.lastModifiedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedBy".equals(fieldName)) {
                    deserializedTrigger.lastModifiedBy = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrigger;
        });
    }
}
