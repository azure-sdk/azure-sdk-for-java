// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Actual state of the recurrence for the trigger.
 */
@Immutable
public final class RecurrenceStatus implements JsonSerializable<RecurrenceStatus> {
    /*
     * The number of occurrences remaining for the trigger. Null if recurrence end has end date instead of number of
     * occurrences.
     */
    @Generated
    private Integer remainingOccurrences;

    /*
     * The next three execution times of the trigger. (RFC 3339 literal format)
     */
    @Generated
    private List<OffsetDateTime> nextScheduledDateTimes;

    /**
     * Creates an instance of RecurrenceStatus class.
     */
    @Generated
    private RecurrenceStatus() {
    }

    /**
     * Get the remainingOccurrences property: The number of occurrences remaining for the trigger. Null if recurrence
     * end has end date instead of number of occurrences.
     * 
     * @return the remainingOccurrences value.
     */
    @Generated
    public Integer getRemainingOccurrences() {
        return this.remainingOccurrences;
    }

    /**
     * Get the nextScheduledDateTimes property: The next three execution times of the trigger. (RFC 3339 literal
     * format).
     * 
     * @return the nextScheduledDateTimes value.
     */
    @Generated
    public List<OffsetDateTime> getNextScheduledDateTimes() {
        return this.nextScheduledDateTimes;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("remainingOccurrences", this.remainingOccurrences);
        jsonWriter.writeArrayField("nextScheduledDateTimes", this.nextScheduledDateTimes, (writer, element) -> writer
            .writeString(element == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(element)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecurrenceStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecurrenceStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecurrenceStatus.
     */
    @Generated
    public static RecurrenceStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecurrenceStatus deserializedRecurrenceStatus = new RecurrenceStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("remainingOccurrences".equals(fieldName)) {
                    deserializedRecurrenceStatus.remainingOccurrences = reader.getNullable(JsonReader::getInt);
                } else if ("nextScheduledDateTimes".equals(fieldName)) {
                    List<OffsetDateTime> nextScheduledDateTimes = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                    deserializedRecurrenceStatus.nextScheduledDateTimes = nextScheduledDateTimes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecurrenceStatus;
        });
    }
}
