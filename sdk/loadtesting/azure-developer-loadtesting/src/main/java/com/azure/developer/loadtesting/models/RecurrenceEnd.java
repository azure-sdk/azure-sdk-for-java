// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;

/**
 * Recurrence end model. Either provide numberOfOccurrences if you want recurrence to end after a specified number of
 * occurrences or provide endDate if you want recurrence to end after a specified end date. If both values are provided,
 * a validation error will be thrown indicating that only one field should be provided. If neither value is provided,
 * the recurrence will end when manually ended.
 */
@Fluent
public final class RecurrenceEnd implements JsonSerializable<RecurrenceEnd> {
    /*
     * Number of occurrences after which the recurrence will end.
     */
    @Generated
    private Integer numberOfOccurrences;

    /*
     * The date after which the recurrence will end. (RFC 3339 literal format)
     */
    @Generated
    private OffsetDateTime endDateTime;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setRecurrenceEndAccessor(new JsonMergePatchHelper.RecurrenceEndAccessor() {
            @Override
            public RecurrenceEnd prepareModelForJsonMergePatch(RecurrenceEnd model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(RecurrenceEnd model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of RecurrenceEnd class.
     */
    @Generated
    public RecurrenceEnd() {
    }

    /**
     * Get the numberOfOccurrences property: Number of occurrences after which the recurrence will end.
     * 
     * @return the numberOfOccurrences value.
     */
    @Generated
    public Integer getNumberOfOccurrences() {
        return this.numberOfOccurrences;
    }

    /**
     * Set the numberOfOccurrences property: Number of occurrences after which the recurrence will end.
     * 
     * @param numberOfOccurrences the numberOfOccurrences value to set.
     * @return the RecurrenceEnd object itself.
     */
    @Generated
    public RecurrenceEnd setNumberOfOccurrences(Integer numberOfOccurrences) {
        this.numberOfOccurrences = numberOfOccurrences;
        this.updatedProperties.add("numberOfOccurrences");
        return this;
    }

    /**
     * Get the endDateTime property: The date after which the recurrence will end. (RFC 3339 literal format).
     * 
     * @return the endDateTime value.
     */
    @Generated
    public OffsetDateTime getEndDateTime() {
        return this.endDateTime;
    }

    /**
     * Set the endDateTime property: The date after which the recurrence will end. (RFC 3339 literal format).
     * 
     * @param endDateTime the endDateTime value to set.
     * @return the RecurrenceEnd object itself.
     */
    @Generated
    public RecurrenceEnd setEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        this.updatedProperties.add("endDateTime");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeNumberField("numberOfOccurrences", this.numberOfOccurrences);
            jsonWriter.writeStringField("endDateTime",
                this.endDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDateTime));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("numberOfOccurrences")) {
            if (this.numberOfOccurrences == null) {
                jsonWriter.writeNullField("numberOfOccurrences");
            } else {
                jsonWriter.writeNumberField("numberOfOccurrences", this.numberOfOccurrences);
            }
        }
        if (updatedProperties.contains("endDateTime")) {
            if (this.endDateTime == null) {
                jsonWriter.writeNullField("endDateTime");
            } else {
                jsonWriter.writeStringField("endDateTime",
                    this.endDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDateTime));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecurrenceEnd from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecurrenceEnd if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecurrenceEnd.
     */
    @Generated
    public static RecurrenceEnd fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecurrenceEnd deserializedRecurrenceEnd = new RecurrenceEnd();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("numberOfOccurrences".equals(fieldName)) {
                    deserializedRecurrenceEnd.numberOfOccurrences = reader.getNullable(JsonReader::getInt);
                } else if ("endDateTime".equals(fieldName)) {
                    deserializedRecurrenceEnd.endDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecurrenceEnd;
        });
    }
}
