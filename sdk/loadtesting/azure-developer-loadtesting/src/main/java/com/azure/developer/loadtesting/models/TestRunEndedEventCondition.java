// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.loadtesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.developer.loadtesting.implementation.JsonMergePatchHelper;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * TestRunEnded Event condition.
 */
@Fluent
public final class TestRunEndedEventCondition implements JsonSerializable<TestRunEndedEventCondition> {
    /*
     * The test run statuses to send notification for.
     */
    @Generated
    private List<TestRunStatus> testRunStatuses;

    /*
     * The test run results to send notification for.
     */
    @Generated
    private List<PassFailTestResult> testRunResults;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setTestRunEndedEventConditionAccessor(new JsonMergePatchHelper.TestRunEndedEventConditionAccessor() {
                @Override
                public TestRunEndedEventCondition prepareModelForJsonMergePatch(TestRunEndedEventCondition model,
                    boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(TestRunEndedEventCondition model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * Creates an instance of TestRunEndedEventCondition class.
     */
    @Generated
    public TestRunEndedEventCondition() {
    }

    /**
     * Get the testRunStatuses property: The test run statuses to send notification for.
     * 
     * @return the testRunStatuses value.
     */
    @Generated
    public List<TestRunStatus> getTestRunStatuses() {
        return this.testRunStatuses;
    }

    /**
     * Set the testRunStatuses property: The test run statuses to send notification for.
     * 
     * @param testRunStatuses the testRunStatuses value to set.
     * @return the TestRunEndedEventCondition object itself.
     */
    @Generated
    public TestRunEndedEventCondition setTestRunStatuses(List<TestRunStatus> testRunStatuses) {
        this.testRunStatuses = testRunStatuses;
        this.updatedProperties.add("testRunStatuses");
        return this;
    }

    /**
     * Get the testRunResults property: The test run results to send notification for.
     * 
     * @return the testRunResults value.
     */
    @Generated
    public List<PassFailTestResult> getTestRunResults() {
        return this.testRunResults;
    }

    /**
     * Set the testRunResults property: The test run results to send notification for.
     * 
     * @param testRunResults the testRunResults value to set.
     * @return the TestRunEndedEventCondition object itself.
     */
    @Generated
    public TestRunEndedEventCondition setTestRunResults(List<PassFailTestResult> testRunResults) {
        this.testRunResults = testRunResults;
        this.updatedProperties.add("testRunResults");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeArrayField("testRunStatuses", this.testRunStatuses,
                (writer, element) -> writer.writeString(element == null ? null : element.toString()));
            jsonWriter.writeArrayField("testRunResults", this.testRunResults,
                (writer, element) -> writer.writeString(element == null ? null : element.toString()));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("testRunStatuses")) {
            if (this.testRunStatuses == null) {
                jsonWriter.writeNullField("testRunStatuses");
            } else {
                jsonWriter.writeArrayField("testRunStatuses", this.testRunStatuses,
                    (writer, element) -> writer.writeString(element.toString()));
            }
        }
        if (updatedProperties.contains("testRunResults")) {
            if (this.testRunResults == null) {
                jsonWriter.writeNullField("testRunResults");
            } else {
                jsonWriter.writeArrayField("testRunResults", this.testRunResults,
                    (writer, element) -> writer.writeString(element.toString()));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRunEndedEventCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRunEndedEventCondition if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestRunEndedEventCondition.
     */
    @Generated
    public static TestRunEndedEventCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRunEndedEventCondition deserializedTestRunEndedEventCondition = new TestRunEndedEventCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("testRunStatuses".equals(fieldName)) {
                    List<TestRunStatus> testRunStatuses
                        = reader.readArray(reader1 -> TestRunStatus.fromString(reader1.getString()));
                    deserializedTestRunEndedEventCondition.testRunStatuses = testRunStatuses;
                } else if ("testRunResults".equals(fieldName)) {
                    List<PassFailTestResult> testRunResults
                        = reader.readArray(reader1 -> PassFailTestResult.fromString(reader1.getString()));
                    deserializedTestRunEndedEventCondition.testRunResults = testRunResults;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestRunEndedEventCondition;
        });
    }
}
