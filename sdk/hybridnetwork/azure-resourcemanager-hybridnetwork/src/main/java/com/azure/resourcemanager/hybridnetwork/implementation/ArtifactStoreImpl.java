// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactStoreInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactStoreNetworkFabricControllerEndPointsInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactStorePrivateEndPointsFormatInner;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactStore;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactStoreNetworkFabricControllerEndPoints;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactStorePrivateEndPointsFormat;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactStorePropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.TagsObject;
import java.util.Collections;
import java.util.Map;

public final class ArtifactStoreImpl implements ArtifactStore, ArtifactStore.Definition, ArtifactStore.Update {
    private ArtifactStoreInner innerObject;

    private final com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ArtifactStorePropertiesFormat properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ArtifactStoreInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybridnetwork.HybridNetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String publisherName;

    private String artifactStoreName;

    private TagsObject updateParameters;

    public ArtifactStoreImpl withExistingPublisher(String resourceGroupName, String publisherName) {
        this.resourceGroupName = resourceGroupName;
        this.publisherName = publisherName;
        return this;
    }

    public ArtifactStore create() {
        this.innerObject = serviceManager.serviceClient()
            .getArtifactStores()
            .createOrUpdate(resourceGroupName, publisherName, artifactStoreName, this.innerModel(), Context.NONE);
        return this;
    }

    public ArtifactStore create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getArtifactStores()
            .createOrUpdate(resourceGroupName, publisherName, artifactStoreName, this.innerModel(), context);
        return this;
    }

    ArtifactStoreImpl(String name, com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager) {
        this.innerObject = new ArtifactStoreInner();
        this.serviceManager = serviceManager;
        this.artifactStoreName = name;
    }

    public ArtifactStoreImpl update() {
        this.updateParameters = new TagsObject();
        return this;
    }

    public ArtifactStore apply() {
        this.innerObject = serviceManager.serviceClient()
            .getArtifactStores()
            .updateWithResponse(resourceGroupName, publisherName, artifactStoreName, updateParameters, Context.NONE)
            .getValue();
        return this;
    }

    public ArtifactStore apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getArtifactStores()
            .updateWithResponse(resourceGroupName, publisherName, artifactStoreName, updateParameters, context)
            .getValue();
        return this;
    }

    ArtifactStoreImpl(ArtifactStoreInner innerObject,
        com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.publisherName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "publishers");
        this.artifactStoreName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "artifactStores");
    }

    public ArtifactStore refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getArtifactStores()
            .getWithResponse(resourceGroupName, publisherName, artifactStoreName, Context.NONE)
            .getValue();
        return this;
    }

    public ArtifactStore refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getArtifactStores()
            .getWithResponse(resourceGroupName, publisherName, artifactStoreName, context)
            .getValue();
        return this;
    }

    public void addNetworkFabricControllerEndPoints(ArtifactStoreNetworkFabricControllerEndPointsInner parameters) {
        serviceManager.artifactStores()
            .addNetworkFabricControllerEndPoints(resourceGroupName, publisherName, artifactStoreName, parameters);
    }

    public void addNetworkFabricControllerEndPoints(ArtifactStoreNetworkFabricControllerEndPointsInner parameters,
        Context context) {
        serviceManager.artifactStores()
            .addNetworkFabricControllerEndPoints(resourceGroupName, publisherName, artifactStoreName, parameters,
                context);
    }

    public void deleteNetworkFabricControllerEndPoints(ArtifactStoreNetworkFabricControllerEndPointsInner parameters) {
        serviceManager.artifactStores()
            .deleteNetworkFabricControllerEndPoints(resourceGroupName, publisherName, artifactStoreName, parameters);
    }

    public void deleteNetworkFabricControllerEndPoints(ArtifactStoreNetworkFabricControllerEndPointsInner parameters,
        Context context) {
        serviceManager.artifactStores()
            .deleteNetworkFabricControllerEndPoints(resourceGroupName, publisherName, artifactStoreName, parameters,
                context);
    }

    public PagedIterable<ArtifactStoreNetworkFabricControllerEndPoints> listNetworkFabricControllerPrivateEndPoints() {
        return serviceManager.artifactStores()
            .listNetworkFabricControllerPrivateEndPoints(resourceGroupName, publisherName, artifactStoreName);
    }

    public PagedIterable<ArtifactStoreNetworkFabricControllerEndPoints>
        listNetworkFabricControllerPrivateEndPoints(Context context) {
        return serviceManager.artifactStores()
            .listNetworkFabricControllerPrivateEndPoints(resourceGroupName, publisherName, artifactStoreName, context);
    }

    public void approvePrivateEndPoints(ArtifactStorePrivateEndPointsFormatInner parameters) {
        serviceManager.artifactStores()
            .approvePrivateEndPoints(resourceGroupName, publisherName, artifactStoreName, parameters);
    }

    public void approvePrivateEndPoints(ArtifactStorePrivateEndPointsFormatInner parameters, Context context) {
        serviceManager.artifactStores()
            .approvePrivateEndPoints(resourceGroupName, publisherName, artifactStoreName, parameters, context);
    }

    public void removePrivateEndPoints(ArtifactStorePrivateEndPointsFormatInner parameters) {
        serviceManager.artifactStores()
            .removePrivateEndPoints(resourceGroupName, publisherName, artifactStoreName, parameters);
    }

    public void removePrivateEndPoints(ArtifactStorePrivateEndPointsFormatInner parameters, Context context) {
        serviceManager.artifactStores()
            .removePrivateEndPoints(resourceGroupName, publisherName, artifactStoreName, parameters, context);
    }

    public PagedIterable<ArtifactStorePrivateEndPointsFormat> listPrivateEndPoints() {
        return serviceManager.artifactStores()
            .listPrivateEndPoints(resourceGroupName, publisherName, artifactStoreName);
    }

    public PagedIterable<ArtifactStorePrivateEndPointsFormat> listPrivateEndPoints(Context context) {
        return serviceManager.artifactStores()
            .listPrivateEndPoints(resourceGroupName, publisherName, artifactStoreName, context);
    }

    public ArtifactStoreImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ArtifactStoreImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ArtifactStoreImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public ArtifactStoreImpl withProperties(ArtifactStorePropertiesFormat properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
