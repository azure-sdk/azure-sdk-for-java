// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Azure virtual network function application definition.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "artifactType",
    defaultImpl = AzureCoreNetworkFunctionApplication.class,
    visible = true)
@JsonTypeName("AzureCoreNetworkFunctionApplication")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "VhdImageFile", value = AzureCoreNetworkFunctionVhdApplication.class),
    @JsonSubTypes.Type(name = "ArmTemplate", value = AzureCoreNetworkFunctionArmTemplateApplication.class) })
@Fluent
public class AzureCoreNetworkFunctionApplication extends NetworkFunctionApplication {
    /*
     * The artifact type.
     */
    @JsonTypeId
    @JsonProperty(value = "artifactType", required = true)
    private AzureCoreArtifactType artifactType;

    /**
     * Creates an instance of AzureCoreNetworkFunctionApplication class.
     */
    public AzureCoreNetworkFunctionApplication() {
        this.artifactType = AzureCoreArtifactType.fromString("AzureCoreNetworkFunctionApplication");
    }

    /**
     * Get the artifactType property: The artifact type.
     * 
     * @return the artifactType value.
     */
    public AzureCoreArtifactType artifactType() {
        return this.artifactType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureCoreNetworkFunctionApplication withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureCoreNetworkFunctionApplication withDependsOnProfile(DependsOnProfile dependsOnProfile) {
        super.withDependsOnProfile(dependsOnProfile);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
