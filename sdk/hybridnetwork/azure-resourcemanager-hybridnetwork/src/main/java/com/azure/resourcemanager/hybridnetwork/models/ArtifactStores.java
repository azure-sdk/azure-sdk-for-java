// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactStoreNetworkFabricControllerEndPointsInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactStorePrivateEndPointsFormatInner;

/**
 * Resource collection API of ArtifactStores.
 */
public interface ArtifactStores {
    /**
     * Gets information of the ArtifactStores under publisher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of the ArtifactStores under publisher as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ArtifactStore> listByPublisher(String resourceGroupName, String publisherName);

    /**
     * Gets information of the ArtifactStores under publisher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of the ArtifactStores under publisher as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ArtifactStore> listByPublisher(String resourceGroupName, String publisherName, Context context);

    /**
     * Deletes the specified artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String publisherName, String artifactStoreName);

    /**
     * Deletes the specified artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String publisherName, String artifactStoreName, Context context);

    /**
     * Gets information about the specified artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified artifact store along with {@link Response}.
     */
    Response<ArtifactStore> getWithResponse(String resourceGroupName, String publisherName, String artifactStoreName,
        Context context);

    /**
     * Gets information about the specified artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified artifact store.
     */
    ArtifactStore get(String resourceGroupName, String publisherName, String artifactStoreName);

    /**
     * Add network fabric controllers to artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param parameters Parameters supplied to the create or update application group operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void addNetworkFabricControllerEndPoints(String resourceGroupName, String publisherName, String artifactStoreName,
        ArtifactStoreNetworkFabricControllerEndPointsInner parameters);

    /**
     * Add network fabric controllers to artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param parameters Parameters supplied to the create or update application group operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void addNetworkFabricControllerEndPoints(String resourceGroupName, String publisherName, String artifactStoreName,
        ArtifactStoreNetworkFabricControllerEndPointsInner parameters, Context context);

    /**
     * Delete network fabric controllers on artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param parameters Parameters supplied to the create or update application group operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteNetworkFabricControllerEndPoints(String resourceGroupName, String publisherName,
        String artifactStoreName, ArtifactStoreNetworkFabricControllerEndPointsInner parameters);

    /**
     * Delete network fabric controllers on artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param parameters Parameters supplied to the create or update application group operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteNetworkFabricControllerEndPoints(String resourceGroupName, String publisherName,
        String artifactStoreName, ArtifactStoreNetworkFabricControllerEndPointsInner parameters, Context context);

    /**
     * List network fabric controllers to artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of manual private endpoints as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ArtifactStoreNetworkFabricControllerEndPoints> listNetworkFabricControllerPrivateEndPoints(
        String resourceGroupName, String publisherName, String artifactStoreName);

    /**
     * List network fabric controllers to artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of manual private endpoints as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ArtifactStoreNetworkFabricControllerEndPoints> listNetworkFabricControllerPrivateEndPoints(
        String resourceGroupName, String publisherName, String artifactStoreName, Context context);

    /**
     * Approve manual private endpoints on artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param parameters Parameters supplied to approve private endpoints.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void approvePrivateEndPoints(String resourceGroupName, String publisherName, String artifactStoreName,
        ArtifactStorePrivateEndPointsFormatInner parameters);

    /**
     * Approve manual private endpoints on artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param parameters Parameters supplied to approve private endpoints.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void approvePrivateEndPoints(String resourceGroupName, String publisherName, String artifactStoreName,
        ArtifactStorePrivateEndPointsFormatInner parameters, Context context);

    /**
     * Remove manual private endpoints on artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param parameters Parameters supplied to the create or update application group operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void removePrivateEndPoints(String resourceGroupName, String publisherName, String artifactStoreName,
        ArtifactStorePrivateEndPointsFormatInner parameters);

    /**
     * Remove manual private endpoints on artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param parameters Parameters supplied to the create or update application group operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void removePrivateEndPoints(String resourceGroupName, String publisherName, String artifactStoreName,
        ArtifactStorePrivateEndPointsFormatInner parameters, Context context);

    /**
     * List manual private endpoints on artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of manual private endpoints as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ArtifactStorePrivateEndPointsFormat> listPrivateEndPoints(String resourceGroupName,
        String publisherName, String artifactStoreName);

    /**
     * List manual private endpoints on artifact stores.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of manual private endpoints as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ArtifactStorePrivateEndPointsFormat> listPrivateEndPoints(String resourceGroupName,
        String publisherName, String artifactStoreName, Context context);

    /**
     * Gets information about the specified artifact store.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified artifact store along with {@link Response}.
     */
    ArtifactStore getById(String id);

    /**
     * Gets information about the specified artifact store.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified artifact store along with {@link Response}.
     */
    Response<ArtifactStore> getByIdWithResponse(String id, Context context);

    /**
     * Deletes the specified artifact store.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes the specified artifact store.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new ArtifactStore resource.
     * 
     * @param name resource name.
     * @return the first stage of the new ArtifactStore definition.
     */
    ArtifactStore.DefinitionStages.Blank define(String name);
}
