// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.billing.fluent.BillingRoleAssignmentsClient;
import com.azure.resourcemanager.billing.fluent.models.BillingRoleAssignmentInner;
import com.azure.resourcemanager.billing.fluent.models.BillingRoleAssignmentListResultInner;
import com.azure.resourcemanager.billing.models.BillingRoleAssignment;
import com.azure.resourcemanager.billing.models.BillingRoleAssignmentListResult;
import com.azure.resourcemanager.billing.models.BillingRoleAssignmentPropertiesAutoGenerated;
import com.azure.resourcemanager.billing.models.BillingRoleAssignments;

public final class BillingRoleAssignmentsImpl implements BillingRoleAssignments {
    private static final ClientLogger LOGGER = new ClientLogger(BillingRoleAssignmentsImpl.class);

    private final BillingRoleAssignmentsClient innerClient;

    private final com.azure.resourcemanager.billing.BillingManager serviceManager;

    public BillingRoleAssignmentsImpl(
        BillingRoleAssignmentsClient innerClient, com.azure.resourcemanager.billing.BillingManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<BillingRoleAssignment> deleteByBillingProfileWithResponse(
        String billingAccountName, String billingProfileName, String billingRoleAssignmentName, Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .deleteByBillingProfileWithResponse(
                    billingAccountName, billingProfileName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment deleteByBillingProfile(
        String billingAccountName, String billingProfileName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this
                .serviceClient()
                .deleteByBillingProfile(billingAccountName, billingProfileName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> getByBillingProfileWithResponse(
        String billingAccountName, String billingProfileName, String billingRoleAssignmentName, Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .getByBillingProfileWithResponse(
                    billingAccountName, billingProfileName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment getByBillingProfile(
        String billingAccountName, String billingProfileName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this.serviceClient().getByBillingProfile(billingAccountName, billingProfileName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<BillingRoleAssignment> listByBillingProfile(
        String billingAccountName, String billingProfileName) {
        PagedIterable<BillingRoleAssignmentInner> inner =
            this.serviceClient().listByBillingProfile(billingAccountName, billingProfileName);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRoleAssignment> listByBillingProfile(
        String billingAccountName, String billingProfileName, String filter, Long top, Long skip, Context context) {
        PagedIterable<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .listByBillingProfile(billingAccountName, billingProfileName, filter, top, skip, context);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public BillingRoleAssignment createByBillingProfile(String billingAccountName, String billingProfileName) {
        BillingRoleAssignmentInner inner =
            this.serviceClient().createByBillingProfile(billingAccountName, billingProfileName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRoleAssignment createByBillingProfile(
        String billingAccountName,
        String billingProfileName,
        BillingRoleAssignmentPropertiesAutoGenerated body,
        Context context) {
        BillingRoleAssignmentInner inner =
            this.serviceClient().createByBillingProfile(billingAccountName, billingProfileName, body, context);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> deleteByCustomerWithResponse(
        String billingAccountName,
        String billingProfileName,
        String customerName,
        String billingRoleAssignmentName,
        Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .deleteByCustomerWithResponse(
                    billingAccountName, billingProfileName, customerName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment deleteByCustomer(
        String billingAccountName, String billingProfileName, String customerName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this
                .serviceClient()
                .deleteByCustomer(billingAccountName, billingProfileName, customerName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> getByCustomerWithResponse(
        String billingAccountName,
        String billingProfileName,
        String customerName,
        String billingRoleAssignmentName,
        Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .getByCustomerWithResponse(
                    billingAccountName, billingProfileName, customerName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment getByCustomer(
        String billingAccountName, String billingProfileName, String customerName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this
                .serviceClient()
                .getByCustomer(billingAccountName, billingProfileName, customerName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<BillingRoleAssignment> listByCustomer(
        String billingAccountName, String billingProfileName, String customerName) {
        PagedIterable<BillingRoleAssignmentInner> inner =
            this.serviceClient().listByCustomer(billingAccountName, billingProfileName, customerName);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRoleAssignment> listByCustomer(
        String billingAccountName,
        String billingProfileName,
        String customerName,
        String filter,
        Long top,
        Long skip,
        Context context) {
        PagedIterable<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .listByCustomer(billingAccountName, billingProfileName, customerName, filter, top, skip, context);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public BillingRoleAssignment createByCustomer(
        String billingAccountName, String billingProfileName, String customerName) {
        BillingRoleAssignmentInner inner =
            this.serviceClient().createByCustomer(billingAccountName, billingProfileName, customerName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRoleAssignment createByCustomer(
        String billingAccountName,
        String billingProfileName,
        String customerName,
        BillingRoleAssignmentPropertiesAutoGenerated body,
        Context context) {
        BillingRoleAssignmentInner inner =
            this.serviceClient().createByCustomer(billingAccountName, billingProfileName, customerName, body, context);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRoleAssignmentListResult resolveByCustomer(
        String billingAccountName, String billingProfileName, String customerName) {
        BillingRoleAssignmentListResultInner inner =
            this.serviceClient().resolveByCustomer(billingAccountName, billingProfileName, customerName);
        if (inner != null) {
            return new BillingRoleAssignmentListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRoleAssignmentListResult resolveByCustomer(
        String billingAccountName,
        String billingProfileName,
        String customerName,
        Boolean resolveScopeDisplayNames,
        String filter,
        Context context) {
        BillingRoleAssignmentListResultInner inner =
            this
                .serviceClient()
                .resolveByCustomer(
                    billingAccountName, billingProfileName, customerName, resolveScopeDisplayNames, filter, context);
        if (inner != null) {
            return new BillingRoleAssignmentListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> deleteByInvoiceSectionWithResponse(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        String billingRoleAssignmentName,
        Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .deleteByInvoiceSectionWithResponse(
                    billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment deleteByInvoiceSection(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this
                .serviceClient()
                .deleteByInvoiceSection(
                    billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> getByInvoiceSectionWithResponse(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        String billingRoleAssignmentName,
        Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .getByInvoiceSectionWithResponse(
                    billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment getByInvoiceSection(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this
                .serviceClient()
                .getByInvoiceSection(
                    billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<BillingRoleAssignment> listByInvoiceSection(
        String billingAccountName, String billingProfileName, String invoiceSectionName) {
        PagedIterable<BillingRoleAssignmentInner> inner =
            this.serviceClient().listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRoleAssignment> listByInvoiceSection(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        String filter,
        Long top,
        Long skip,
        Context context) {
        PagedIterable<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .listByInvoiceSection(
                    billingAccountName, billingProfileName, invoiceSectionName, filter, top, skip, context);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public BillingRoleAssignment createByInvoiceSection(
        String billingAccountName, String billingProfileName, String invoiceSectionName) {
        BillingRoleAssignmentInner inner =
            this.serviceClient().createByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRoleAssignment createByInvoiceSection(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        BillingRoleAssignmentPropertiesAutoGenerated body,
        Context context) {
        BillingRoleAssignmentInner inner =
            this
                .serviceClient()
                .createByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, body, context);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRoleAssignmentListResult resolveByInvoiceSection(
        String billingAccountName, String billingProfileName, String invoiceSectionName) {
        BillingRoleAssignmentListResultInner inner =
            this.serviceClient().resolveByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName);
        if (inner != null) {
            return new BillingRoleAssignmentListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRoleAssignmentListResult resolveByInvoiceSection(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        Boolean resolveScopeDisplayNames,
        String filter,
        Context context) {
        BillingRoleAssignmentListResultInner inner =
            this
                .serviceClient()
                .resolveByInvoiceSection(
                    billingAccountName,
                    billingProfileName,
                    invoiceSectionName,
                    resolveScopeDisplayNames,
                    filter,
                    context);
        if (inner != null) {
            return new BillingRoleAssignmentListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRoleAssignmentListResult resolveByBillingProfile(
        String billingAccountName, String billingProfileName) {
        BillingRoleAssignmentListResultInner inner =
            this.serviceClient().resolveByBillingProfile(billingAccountName, billingProfileName);
        if (inner != null) {
            return new BillingRoleAssignmentListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRoleAssignmentListResult resolveByBillingProfile(
        String billingAccountName,
        String billingProfileName,
        Boolean resolveScopeDisplayNames,
        String filter,
        Context context) {
        BillingRoleAssignmentListResultInner inner =
            this
                .serviceClient()
                .resolveByBillingProfile(
                    billingAccountName, billingProfileName, resolveScopeDisplayNames, filter, context);
        if (inner != null) {
            return new BillingRoleAssignmentListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> deleteByBillingAccountWithResponse(
        String billingAccountName, String billingRoleAssignmentName, Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .deleteByBillingAccountWithResponse(billingAccountName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment deleteByBillingAccount(String billingAccountName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this.serviceClient().deleteByBillingAccount(billingAccountName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> getByBillingAccountWithResponse(
        String billingAccountName, String billingRoleAssignmentName, Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .getByBillingAccountWithResponse(billingAccountName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment getByBillingAccount(String billingAccountName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this.serviceClient().getByBillingAccount(billingAccountName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> createOrUpdateByBillingAccountWithResponse(
        String billingAccountName, String billingRoleAssignmentName, BillingRoleAssignmentInner body, Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .createOrUpdateByBillingAccountWithResponse(
                    billingAccountName, billingRoleAssignmentName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment createOrUpdateByBillingAccount(
        String billingAccountName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this.serviceClient().createOrUpdateByBillingAccount(billingAccountName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<BillingRoleAssignment> listByBillingAccount(String billingAccountName) {
        PagedIterable<BillingRoleAssignmentInner> inner = this.serviceClient().listByBillingAccount(billingAccountName);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRoleAssignment> listByBillingAccount(
        String billingAccountName, String filter, Long top, Long skip, Context context) {
        PagedIterable<BillingRoleAssignmentInner> inner =
            this.serviceClient().listByBillingAccount(billingAccountName, filter, top, skip, context);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public BillingRoleAssignment addByBillingAccount(String billingAccountName) {
        BillingRoleAssignmentInner inner = this.serviceClient().addByBillingAccount(billingAccountName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRoleAssignment addByBillingAccount(
        String billingAccountName, BillingRoleAssignmentPropertiesAutoGenerated body, Context context) {
        BillingRoleAssignmentInner inner = this.serviceClient().addByBillingAccount(billingAccountName, body, context);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> deleteByDepartmentWithResponse(
        String billingAccountName, String departmentName, String billingRoleAssignmentName, Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .deleteByDepartmentWithResponse(billingAccountName, departmentName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment deleteByDepartment(
        String billingAccountName, String departmentName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this.serviceClient().deleteByDepartment(billingAccountName, departmentName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> getByDepartmentWithResponse(
        String billingAccountName, String departmentName, String billingRoleAssignmentName, Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .getByDepartmentWithResponse(billingAccountName, departmentName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment getByDepartment(
        String billingAccountName, String departmentName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this.serviceClient().getByDepartment(billingAccountName, departmentName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> createOrUpdateByDepartmentWithResponse(
        String billingAccountName,
        String departmentName,
        String billingRoleAssignmentName,
        BillingRoleAssignmentInner body,
        Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .createOrUpdateByDepartmentWithResponse(
                    billingAccountName, departmentName, billingRoleAssignmentName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment createOrUpdateByDepartment(
        String billingAccountName, String departmentName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this
                .serviceClient()
                .createOrUpdateByDepartment(billingAccountName, departmentName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<BillingRoleAssignment> listByDepartment(String billingAccountName, String departmentName) {
        PagedIterable<BillingRoleAssignmentInner> inner =
            this.serviceClient().listByDepartment(billingAccountName, departmentName);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRoleAssignment> listByDepartment(
        String billingAccountName, String departmentName, Context context) {
        PagedIterable<BillingRoleAssignmentInner> inner =
            this.serviceClient().listByDepartment(billingAccountName, departmentName, context);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public Response<BillingRoleAssignment> deleteByEnrollmentAccountWithResponse(
        String billingAccountName, String enrollmentAccountName, String billingRoleAssignmentName, Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .deleteByEnrollmentAccountWithResponse(
                    billingAccountName, enrollmentAccountName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment deleteByEnrollmentAccount(
        String billingAccountName, String enrollmentAccountName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this
                .serviceClient()
                .deleteByEnrollmentAccount(billingAccountName, enrollmentAccountName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> getByEnrollmentAccountWithResponse(
        String billingAccountName, String enrollmentAccountName, String billingRoleAssignmentName, Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .getByEnrollmentAccountWithResponse(
                    billingAccountName, enrollmentAccountName, billingRoleAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment getByEnrollmentAccount(
        String billingAccountName, String enrollmentAccountName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this
                .serviceClient()
                .getByEnrollmentAccount(billingAccountName, enrollmentAccountName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BillingRoleAssignment> createOrUpdateByEnrollmentAccountWithResponse(
        String billingAccountName,
        String enrollmentAccountName,
        String billingRoleAssignmentName,
        BillingRoleAssignmentInner body,
        Context context) {
        Response<BillingRoleAssignmentInner> inner =
            this
                .serviceClient()
                .createOrUpdateByEnrollmentAccountWithResponse(
                    billingAccountName, enrollmentAccountName, billingRoleAssignmentName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BillingRoleAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRoleAssignment createOrUpdateByEnrollmentAccount(
        String billingAccountName, String enrollmentAccountName, String billingRoleAssignmentName) {
        BillingRoleAssignmentInner inner =
            this
                .serviceClient()
                .createOrUpdateByEnrollmentAccount(
                    billingAccountName, enrollmentAccountName, billingRoleAssignmentName);
        if (inner != null) {
            return new BillingRoleAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<BillingRoleAssignment> listByEnrollmentAccount(
        String billingAccountName, String enrollmentAccountName) {
        PagedIterable<BillingRoleAssignmentInner> inner =
            this.serviceClient().listByEnrollmentAccount(billingAccountName, enrollmentAccountName);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRoleAssignment> listByEnrollmentAccount(
        String billingAccountName, String enrollmentAccountName, Context context) {
        PagedIterable<BillingRoleAssignmentInner> inner =
            this.serviceClient().listByEnrollmentAccount(billingAccountName, enrollmentAccountName, context);
        return Utils.mapPage(inner, inner1 -> new BillingRoleAssignmentImpl(inner1, this.manager()));
    }

    public BillingRoleAssignmentListResult resolveByBillingAccount(String billingAccountName) {
        BillingRoleAssignmentListResultInner inner = this.serviceClient().resolveByBillingAccount(billingAccountName);
        if (inner != null) {
            return new BillingRoleAssignmentListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRoleAssignmentListResult resolveByBillingAccount(
        String billingAccountName, Boolean resolveScopeDisplayNames, String filter, Context context) {
        BillingRoleAssignmentListResultInner inner =
            this.serviceClient().resolveByBillingAccount(billingAccountName, resolveScopeDisplayNames, filter, context);
        if (inner != null) {
            return new BillingRoleAssignmentListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private BillingRoleAssignmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.billing.BillingManager manager() {
        return this.serviceManager;
    }
}
