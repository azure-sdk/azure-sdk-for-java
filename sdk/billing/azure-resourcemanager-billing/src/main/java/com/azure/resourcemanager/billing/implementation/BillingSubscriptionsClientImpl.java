// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.billing.fluent.BillingSubscriptionsClient;
import com.azure.resourcemanager.billing.fluent.models.BillingSubscriptionInner;
import com.azure.resourcemanager.billing.fluent.models.MoveBillingSubscriptionEligibilityResultInner;
import com.azure.resourcemanager.billing.models.BillingSubscriptionListResult;
import com.azure.resourcemanager.billing.models.BillingSubscriptionMergeRequest;
import com.azure.resourcemanager.billing.models.BillingSubscriptionPatch;
import com.azure.resourcemanager.billing.models.BillingSubscriptionSplitRequest;
import com.azure.resourcemanager.billing.models.CancelSubscriptionRequest;
import com.azure.resourcemanager.billing.models.MoveBillingSubscriptionRequest;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in BillingSubscriptionsClient.
 */
public final class BillingSubscriptionsClientImpl implements BillingSubscriptionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BillingSubscriptionsService service;

    /**
     * The service client containing this operation class.
     */
    private final BillingManagementClientImpl client;

    /**
     * Initializes an instance of BillingSubscriptionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    BillingSubscriptionsClientImpl(BillingManagementClientImpl client) {
        this.service = RestProxy.create(BillingSubscriptionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingManagementClientBillingSubscriptions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "BillingManagementCli")
    public interface BillingSubscriptionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions/{billingSubscriptionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionInner>> getByBillingProfile(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion, @QueryParam("expand") String expand,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions/{billingSubscriptionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionInner> getByBillingProfileSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion, @QueryParam("expand") String expand,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByBillingProfile(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName,
            @QueryParam("includeDeleted") Boolean includeDeleted, @QueryParam("api-version") String apiVersion,
            @QueryParam("expand") String expand, @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top, @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByBillingProfileSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName,
            @QueryParam("includeDeleted") Boolean includeDeleted, @QueryParam("api-version") String apiVersion,
            @QueryParam("expand") String expand, @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top, @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByCustomer(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName, @PathParam("customerName") String customerName,
            @QueryParam("includeDeleted") Boolean includeDeleted, @QueryParam("api-version") String apiVersion,
            @QueryParam("expand") String expand, @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top, @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByCustomerSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName, @PathParam("customerName") String customerName,
            @QueryParam("includeDeleted") Boolean includeDeleted, @QueryParam("api-version") String apiVersion,
            @QueryParam("expand") String expand, @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top, @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByInvoiceSection(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName,
            @PathParam("invoiceSectionName") String invoiceSectionName,
            @QueryParam("includeDeleted") Boolean includeDeleted, @QueryParam("api-version") String apiVersion,
            @QueryParam("expand") String expand, @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top, @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByInvoiceSectionSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName,
            @PathParam("invoiceSectionName") String invoiceSectionName,
            @QueryParam("includeDeleted") Boolean includeDeleted, @QueryParam("api-version") String apiVersion,
            @QueryParam("expand") String expand, @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top, @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/cancel")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> cancel(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CancelSubscriptionRequest parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/cancel")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> cancelSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CancelSubscriptionRequest parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/merge")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> merge(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BillingSubscriptionMergeRequest parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/merge")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> mergeSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BillingSubscriptionMergeRequest parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/move")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> move(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MoveBillingSubscriptionRequest parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/move")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> moveSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MoveBillingSubscriptionRequest parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/split")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> split(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BillingSubscriptionSplitRequest parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/split")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> splitSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BillingSubscriptionSplitRequest parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/validateMoveEligibility")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MoveBillingSubscriptionEligibilityResultInner>> validateMoveEligibility(
            @HostParam("$host") String endpoint, @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MoveBillingSubscriptionRequest parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/validateMoveEligibility")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<MoveBillingSubscriptionEligibilityResultInner> validateMoveEligibilitySync(
            @HostParam("$host") String endpoint, @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MoveBillingSubscriptionRequest parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionInner>> get(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion, @QueryParam("expand") String expand,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionInner> getSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion, @QueryParam("expand") String expand,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BillingSubscriptionPatch parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingSubscriptionName") String billingSubscriptionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BillingSubscriptionPatch parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByBillingAccount(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @QueryParam("includeDeleted") Boolean includeDeleted,
            @QueryParam("includeTenantSubscriptions") Boolean includeTenantSubscriptions,
            @QueryParam("includeFailed") Boolean includeFailed, @QueryParam("api-version") String apiVersion,
            @QueryParam("expand") String expand, @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top, @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByBillingAccountSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @QueryParam("includeDeleted") Boolean includeDeleted,
            @QueryParam("includeTenantSubscriptions") Boolean includeTenantSubscriptions,
            @QueryParam("includeFailed") Boolean includeFailed, @QueryParam("api-version") String apiVersion,
            @QueryParam("expand") String expand, @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top, @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByCustomerAtBillingAccount(
            @HostParam("$host") String endpoint, @PathParam("billingAccountName") String billingAccountName,
            @PathParam("customerName") String customerName, @QueryParam("includeDeleted") Boolean includeDeleted,
            @QueryParam("api-version") String apiVersion, @QueryParam("expand") String expand,
            @QueryParam("filter") String filter, @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top,
            @QueryParam("skip") Long skip, @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByCustomerAtBillingAccountSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName, @PathParam("customerName") String customerName,
            @QueryParam("includeDeleted") Boolean includeDeleted, @QueryParam("api-version") String apiVersion,
            @QueryParam("expand") String expand, @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top, @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts/{enrollmentAccountName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByEnrollmentAccount(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("enrollmentAccountName") String enrollmentAccountName,
            @QueryParam("api-version") String apiVersion, @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top, @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts/{enrollmentAccountName}/billingSubscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByEnrollmentAccountSync(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("enrollmentAccountName") String enrollmentAccountName,
            @QueryParam("api-version") String apiVersion, @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top, @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByBillingProfileNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByBillingProfileNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByCustomerNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByCustomerNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByInvoiceSectionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByInvoiceSectionNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByBillingAccountNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByBillingAccountNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByCustomerAtBillingAccountNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByCustomerAtBillingAccountNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionListResult>> listByEnrollmentAccountNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BillingSubscriptionListResult> listByEnrollmentAccountNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets a subscription by its billing profile and ID. The operation is supported for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its billing profile and ID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BillingSubscriptionInner>> getByBillingProfileWithResponseAsync(String billingAccountName,
        String billingProfileName, String billingSubscriptionName, String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByBillingProfile(this.client.getEndpoint(), billingAccountName,
                billingProfileName, billingSubscriptionName, this.client.getApiVersion(), expand, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a subscription by its billing profile and ID. The operation is supported for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its billing profile and ID on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BillingSubscriptionInner> getByBillingProfileAsync(String billingAccountName,
        String billingProfileName, String billingSubscriptionName) {
        final String expand = null;
        return getByBillingProfileWithResponseAsync(billingAccountName, billingProfileName, billingSubscriptionName,
            expand).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a subscription by its billing profile and ID. The operation is supported for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its billing profile and ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BillingSubscriptionInner> getByBillingProfileWithResponse(String billingAccountName,
        String billingProfileName, String billingSubscriptionName, String expand, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getByBillingProfileSync(this.client.getEndpoint(), billingAccountName, billingProfileName,
            billingSubscriptionName, this.client.getApiVersion(), expand, accept, context);
    }

    /**
     * Gets a subscription by its billing profile and ID. The operation is supported for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its billing profile and ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionInner getByBillingProfile(String billingAccountName, String billingProfileName,
        String billingSubscriptionName) {
        final String expand = null;
        return getByBillingProfileWithResponse(billingAccountName, billingProfileName, billingSubscriptionName, expand,
            Context.NONE).getValue();
    }

    /**
     * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>> listByBillingProfileSinglePageAsync(String billingAccountName,
        String billingProfileName, Boolean includeDeleted, String expand, String filter, String orderBy, Long top,
        Long skip, Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByBillingProfile(this.client.getEndpoint(), billingAccountName,
                billingProfileName, includeDeleted, this.client.getApiVersion(), expand, filter, orderBy, top, skip,
                count, search, accept, context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByBillingProfileAsync(String billingAccountName,
        String billingProfileName, Boolean includeDeleted, String expand, String filter, String orderBy, Long top,
        Long skip, Boolean count, String search) {
        return new PagedFlux<>(
            () -> listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName, includeDeleted, expand,
                filter, orderBy, top, skip, count, search),
            nextLink -> listByBillingProfileNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByBillingProfileAsync(String billingAccountName,
        String billingProfileName) {
        final Boolean includeDeleted = null;
        final String expand = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedFlux<>(
            () -> listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName, includeDeleted, expand,
                filter, orderBy, top, skip, count, search),
            nextLink -> listByBillingProfileNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByBillingProfileSinglePage(String billingAccountName,
        String billingProfileName, Boolean includeDeleted, String expand, String filter, String orderBy, Long top,
        Long skip, Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res = service.listByBillingProfileSync(this.client.getEndpoint(),
            billingAccountName, billingProfileName, includeDeleted, this.client.getApiVersion(), expand, filter,
            orderBy, top, skip, count, search, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByBillingProfileSinglePage(String billingAccountName,
        String billingProfileName, Boolean includeDeleted, String expand, String filter, String orderBy, Long top,
        Long skip, Boolean count, String search, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res = service.listByBillingProfileSync(this.client.getEndpoint(),
            billingAccountName, billingProfileName, includeDeleted, this.client.getApiVersion(), expand, filter,
            orderBy, top, skip, count, search, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByBillingProfile(String billingAccountName,
        String billingProfileName) {
        final Boolean includeDeleted = null;
        final String expand = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedIterable<>(() -> listByBillingProfileSinglePage(billingAccountName, billingProfileName,
            includeDeleted, expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByBillingProfileNextSinglePage(nextLink));
    }

    /**
     * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByBillingProfile(String billingAccountName,
        String billingProfileName, Boolean includeDeleted, String expand, String filter, String orderBy, Long top,
        Long skip, Boolean count, String search, Context context) {
        return new PagedIterable<>(
            () -> listByBillingProfileSinglePage(billingAccountName, billingProfileName, includeDeleted, expand, filter,
                orderBy, top, skip, count, search, context),
            nextLink -> listByBillingProfileNextSinglePage(nextLink, context));
    }

    /**
     * Lists the subscriptions for a customer. The operation is supported only for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>> listByCustomerSinglePageAsync(String billingAccountName,
        String billingProfileName, String customerName, Boolean includeDeleted, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (customerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter customerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByCustomer(this.client.getEndpoint(), billingAccountName,
                billingProfileName, customerName, includeDeleted, this.client.getApiVersion(), expand, filter, orderBy,
                top, skip, count, search, accept, context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the subscriptions for a customer. The operation is supported only for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByCustomerAsync(String billingAccountName,
        String billingProfileName, String customerName, Boolean includeDeleted, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search) {
        return new PagedFlux<>(
            () -> listByCustomerSinglePageAsync(billingAccountName, billingProfileName, customerName, includeDeleted,
                expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByCustomerNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions for a customer. The operation is supported only for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByCustomerAsync(String billingAccountName,
        String billingProfileName, String customerName) {
        final Boolean includeDeleted = null;
        final String expand = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedFlux<>(
            () -> listByCustomerSinglePageAsync(billingAccountName, billingProfileName, customerName, includeDeleted,
                expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByCustomerNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions for a customer. The operation is supported only for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByCustomerSinglePage(String billingAccountName,
        String billingProfileName, String customerName, Boolean includeDeleted, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (customerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter customerName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res = service.listByCustomerSync(this.client.getEndpoint(),
            billingAccountName, billingProfileName, customerName, includeDeleted, this.client.getApiVersion(), expand,
            filter, orderBy, top, skip, count, search, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions for a customer. The operation is supported only for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByCustomerSinglePage(String billingAccountName,
        String billingProfileName, String customerName, Boolean includeDeleted, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (customerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter customerName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res = service.listByCustomerSync(this.client.getEndpoint(),
            billingAccountName, billingProfileName, customerName, includeDeleted, this.client.getApiVersion(), expand,
            filter, orderBy, top, skip, count, search, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions for a customer. The operation is supported only for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByCustomer(String billingAccountName, String billingProfileName,
        String customerName) {
        final Boolean includeDeleted = null;
        final String expand = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedIterable<>(() -> listByCustomerSinglePage(billingAccountName, billingProfileName, customerName,
            includeDeleted, expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByCustomerNextSinglePage(nextLink));
    }

    /**
     * Lists the subscriptions for a customer. The operation is supported only for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByCustomer(String billingAccountName, String billingProfileName,
        String customerName, Boolean includeDeleted, String expand, String filter, String orderBy, Long top, Long skip,
        Boolean count, String search, Context context) {
        return new PagedIterable<>(
            () -> listByCustomerSinglePage(billingAccountName, billingProfileName, customerName, includeDeleted, expand,
                filter, orderBy, top, skip, count, search, context),
            nextLink -> listByCustomerNextSinglePage(nextLink, context));
    }

    /**
     * Lists the subscriptions that are billed to an invoice section. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>> listByInvoiceSectionSinglePageAsync(String billingAccountName,
        String billingProfileName, String invoiceSectionName, Boolean includeDeleted, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (invoiceSectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByInvoiceSection(this.client.getEndpoint(), billingAccountName,
                billingProfileName, invoiceSectionName, includeDeleted, this.client.getApiVersion(), expand, filter,
                orderBy, top, skip, count, search, accept, context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the subscriptions that are billed to an invoice section. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByInvoiceSectionAsync(String billingAccountName,
        String billingProfileName, String invoiceSectionName, Boolean includeDeleted, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search) {
        return new PagedFlux<>(
            () -> listByInvoiceSectionSinglePageAsync(billingAccountName, billingProfileName, invoiceSectionName,
                includeDeleted, expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByInvoiceSectionNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions that are billed to an invoice section. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByInvoiceSectionAsync(String billingAccountName,
        String billingProfileName, String invoiceSectionName) {
        final Boolean includeDeleted = null;
        final String expand = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedFlux<>(
            () -> listByInvoiceSectionSinglePageAsync(billingAccountName, billingProfileName, invoiceSectionName,
                includeDeleted, expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByInvoiceSectionNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions that are billed to an invoice section. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByInvoiceSectionSinglePage(String billingAccountName,
        String billingProfileName, String invoiceSectionName, Boolean includeDeleted, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (invoiceSectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res = service.listByInvoiceSectionSync(this.client.getEndpoint(),
            billingAccountName, billingProfileName, invoiceSectionName, includeDeleted, this.client.getApiVersion(),
            expand, filter, orderBy, top, skip, count, search, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions that are billed to an invoice section. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByInvoiceSectionSinglePage(String billingAccountName,
        String billingProfileName, String invoiceSectionName, Boolean includeDeleted, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (invoiceSectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res = service.listByInvoiceSectionSync(this.client.getEndpoint(),
            billingAccountName, billingProfileName, invoiceSectionName, includeDeleted, this.client.getApiVersion(),
            expand, filter, orderBy, top, skip, count, search, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions that are billed to an invoice section. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByInvoiceSection(String billingAccountName,
        String billingProfileName, String invoiceSectionName) {
        final Boolean includeDeleted = null;
        final String expand = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedIterable<>(
            () -> listByInvoiceSectionSinglePage(billingAccountName, billingProfileName, invoiceSectionName,
                includeDeleted, expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByInvoiceSectionNextSinglePage(nextLink));
    }

    /**
     * Lists the subscriptions that are billed to an invoice section. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByInvoiceSection(String billingAccountName,
        String billingProfileName, String invoiceSectionName, Boolean includeDeleted, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search, Context context) {
        return new PagedIterable<>(
            () -> listByInvoiceSectionSinglePage(billingAccountName, billingProfileName, invoiceSectionName,
                includeDeleted, expand, filter, orderBy, top, skip, count, search, context),
            nextLink -> listByInvoiceSectionNextSinglePage(nextLink, context));
    }

    /**
     * Cancels a usage-based subscription. This operation is supported only for billing accounts of type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters for cancel customer subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> cancelWithResponseAsync(String billingAccountName,
        String billingSubscriptionName, CancelSubscriptionRequest parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.cancel(this.client.getEndpoint(), billingAccountName,
                billingSubscriptionName, this.client.getApiVersion(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Cancels a usage-based subscription. This operation is supported only for billing accounts of type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters for cancel customer subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> cancelWithResponse(String billingAccountName, String billingSubscriptionName,
        CancelSubscriptionRequest parameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return service.cancelSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), parameters, accept, Context.NONE);
    }

    /**
     * Cancels a usage-based subscription. This operation is supported only for billing accounts of type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters for cancel customer subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> cancelWithResponse(String billingAccountName, String billingSubscriptionName,
        CancelSubscriptionRequest parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return service.cancelSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Cancels a usage-based subscription. This operation is supported only for billing accounts of type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters for cancel customer subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginCancelAsync(String billingAccountName,
        String billingSubscriptionName, CancelSubscriptionRequest parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = cancelWithResponseAsync(billingAccountName, billingSubscriptionName, parameters);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Cancels a usage-based subscription. This operation is supported only for billing accounts of type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters for cancel customer subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCancel(String billingAccountName, String billingSubscriptionName,
        CancelSubscriptionRequest parameters) {
        Response<BinaryData> response = cancelWithResponse(billingAccountName, billingSubscriptionName, parameters);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Cancels a usage-based subscription. This operation is supported only for billing accounts of type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters for cancel customer subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCancel(String billingAccountName, String billingSubscriptionName,
        CancelSubscriptionRequest parameters, Context context) {
        Response<BinaryData> response
            = cancelWithResponse(billingAccountName, billingSubscriptionName, parameters, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Cancels a usage-based subscription. This operation is supported only for billing accounts of type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters for cancel customer subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> cancelAsync(String billingAccountName, String billingSubscriptionName,
        CancelSubscriptionRequest parameters) {
        return beginCancelAsync(billingAccountName, billingSubscriptionName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Cancels a usage-based subscription. This operation is supported only for billing accounts of type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters for cancel customer subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancel(String billingAccountName, String billingSubscriptionName,
        CancelSubscriptionRequest parameters) {
        beginCancel(billingAccountName, billingSubscriptionName, parameters).getFinalResult();
    }

    /**
     * Cancels a usage-based subscription. This operation is supported only for billing accounts of type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters for cancel customer subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancel(String billingAccountName, String billingSubscriptionName, CancelSubscriptionRequest parameters,
        Context context) {
        beginCancel(billingAccountName, billingSubscriptionName, parameters, context).getFinalResult();
    }

    /**
     * Merges the billing subscription provided in the request with a target billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to merge the two billing subscriptions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> mergeWithResponseAsync(String billingAccountName,
        String billingSubscriptionName, BillingSubscriptionMergeRequest parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.merge(this.client.getEndpoint(), billingAccountName,
                billingSubscriptionName, this.client.getApiVersion(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Merges the billing subscription provided in the request with a target billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to merge the two billing subscriptions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> mergeWithResponse(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionMergeRequest parameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return service.mergeSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), parameters, accept, Context.NONE);
    }

    /**
     * Merges the billing subscription provided in the request with a target billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to merge the two billing subscriptions.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> mergeWithResponse(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionMergeRequest parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return service.mergeSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Merges the billing subscription provided in the request with a target billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to merge the two billing subscriptions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner> beginMergeAsync(
        String billingAccountName, String billingSubscriptionName, BillingSubscriptionMergeRequest parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = mergeWithResponseAsync(billingAccountName, billingSubscriptionName, parameters);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(mono,
            this.client.getHttpPipeline(), BillingSubscriptionInner.class, BillingSubscriptionInner.class,
            this.client.getContext());
    }

    /**
     * Merges the billing subscription provided in the request with a target billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to merge the two billing subscriptions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner> beginMerge(
        String billingAccountName, String billingSubscriptionName, BillingSubscriptionMergeRequest parameters) {
        Response<BinaryData> response = mergeWithResponse(billingAccountName, billingSubscriptionName, parameters);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(response,
            BillingSubscriptionInner.class, BillingSubscriptionInner.class, Context.NONE);
    }

    /**
     * Merges the billing subscription provided in the request with a target billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to merge the two billing subscriptions.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner> beginMerge(
        String billingAccountName, String billingSubscriptionName, BillingSubscriptionMergeRequest parameters,
        Context context) {
        Response<BinaryData> response
            = mergeWithResponse(billingAccountName, billingSubscriptionName, parameters, context);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(response,
            BillingSubscriptionInner.class, BillingSubscriptionInner.class, context);
    }

    /**
     * Merges the billing subscription provided in the request with a target billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to merge the two billing subscriptions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BillingSubscriptionInner> mergeAsync(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionMergeRequest parameters) {
        return beginMergeAsync(billingAccountName, billingSubscriptionName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Merges the billing subscription provided in the request with a target billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to merge the two billing subscriptions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionInner merge(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionMergeRequest parameters) {
        return beginMerge(billingAccountName, billingSubscriptionName, parameters).getFinalResult();
    }

    /**
     * Merges the billing subscription provided in the request with a target billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to merge the two billing subscriptions.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionInner merge(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionMergeRequest parameters, Context context) {
        return beginMerge(billingAccountName, billingSubscriptionName, parameters, context).getFinalResult();
    }

    /**
     * Moves charges for a subscription to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> moveWithResponseAsync(String billingAccountName,
        String billingSubscriptionName, MoveBillingSubscriptionRequest parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.move(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
                this.client.getApiVersion(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Moves charges for a subscription to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> moveWithResponse(String billingAccountName, String billingSubscriptionName,
        MoveBillingSubscriptionRequest parameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return service.moveSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), parameters, accept, Context.NONE);
    }

    /**
     * Moves charges for a subscription to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> moveWithResponse(String billingAccountName, String billingSubscriptionName,
        MoveBillingSubscriptionRequest parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return service.moveSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Moves charges for a subscription to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner> beginMoveAsync(
        String billingAccountName, String billingSubscriptionName, MoveBillingSubscriptionRequest parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = moveWithResponseAsync(billingAccountName, billingSubscriptionName, parameters);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(mono,
            this.client.getHttpPipeline(), BillingSubscriptionInner.class, BillingSubscriptionInner.class,
            this.client.getContext());
    }

    /**
     * Moves charges for a subscription to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner> beginMove(
        String billingAccountName, String billingSubscriptionName, MoveBillingSubscriptionRequest parameters) {
        Response<BinaryData> response = moveWithResponse(billingAccountName, billingSubscriptionName, parameters);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(response,
            BillingSubscriptionInner.class, BillingSubscriptionInner.class, Context.NONE);
    }

    /**
     * Moves charges for a subscription to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner> beginMove(
        String billingAccountName, String billingSubscriptionName, MoveBillingSubscriptionRequest parameters,
        Context context) {
        Response<BinaryData> response
            = moveWithResponse(billingAccountName, billingSubscriptionName, parameters, context);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(response,
            BillingSubscriptionInner.class, BillingSubscriptionInner.class, context);
    }

    /**
     * Moves charges for a subscription to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BillingSubscriptionInner> moveAsync(String billingAccountName, String billingSubscriptionName,
        MoveBillingSubscriptionRequest parameters) {
        return beginMoveAsync(billingAccountName, billingSubscriptionName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Moves charges for a subscription to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionInner move(String billingAccountName, String billingSubscriptionName,
        MoveBillingSubscriptionRequest parameters) {
        return beginMove(billingAccountName, billingSubscriptionName, parameters).getFinalResult();
    }

    /**
     * Moves charges for a subscription to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionInner move(String billingAccountName, String billingSubscriptionName,
        MoveBillingSubscriptionRequest parameters, Context context) {
        return beginMove(billingAccountName, billingSubscriptionName, parameters, context).getFinalResult();
    }

    /**
     * Splits a subscription into a new subscription with quantity less than current subscription quantity and not equal
     * to 0.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to split the billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> splitWithResponseAsync(String billingAccountName,
        String billingSubscriptionName, BillingSubscriptionSplitRequest parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.split(this.client.getEndpoint(), billingAccountName,
                billingSubscriptionName, this.client.getApiVersion(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Splits a subscription into a new subscription with quantity less than current subscription quantity and not equal
     * to 0.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to split the billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> splitWithResponse(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionSplitRequest parameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return service.splitSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), parameters, accept, Context.NONE);
    }

    /**
     * Splits a subscription into a new subscription with quantity less than current subscription quantity and not equal
     * to 0.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to split the billing subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> splitWithResponse(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionSplitRequest parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return service.splitSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Splits a subscription into a new subscription with quantity less than current subscription quantity and not equal
     * to 0.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to split the billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner> beginSplitAsync(
        String billingAccountName, String billingSubscriptionName, BillingSubscriptionSplitRequest parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = splitWithResponseAsync(billingAccountName, billingSubscriptionName, parameters);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(mono,
            this.client.getHttpPipeline(), BillingSubscriptionInner.class, BillingSubscriptionInner.class,
            this.client.getContext());
    }

    /**
     * Splits a subscription into a new subscription with quantity less than current subscription quantity and not equal
     * to 0.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to split the billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner> beginSplit(
        String billingAccountName, String billingSubscriptionName, BillingSubscriptionSplitRequest parameters) {
        Response<BinaryData> response = splitWithResponse(billingAccountName, billingSubscriptionName, parameters);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(response,
            BillingSubscriptionInner.class, BillingSubscriptionInner.class, Context.NONE);
    }

    /**
     * Splits a subscription into a new subscription with quantity less than current subscription quantity and not equal
     * to 0.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to split the billing subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner> beginSplit(
        String billingAccountName, String billingSubscriptionName, BillingSubscriptionSplitRequest parameters,
        Context context) {
        Response<BinaryData> response
            = splitWithResponse(billingAccountName, billingSubscriptionName, parameters, context);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(response,
            BillingSubscriptionInner.class, BillingSubscriptionInner.class, context);
    }

    /**
     * Splits a subscription into a new subscription with quantity less than current subscription quantity and not equal
     * to 0.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to split the billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BillingSubscriptionInner> splitAsync(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionSplitRequest parameters) {
        return beginSplitAsync(billingAccountName, billingSubscriptionName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Splits a subscription into a new subscription with quantity less than current subscription quantity and not equal
     * to 0.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to split the billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionInner split(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionSplitRequest parameters) {
        return beginSplit(billingAccountName, billingSubscriptionName, parameters).getFinalResult();
    }

    /**
     * Splits a subscription into a new subscription with quantity less than current subscription quantity and not equal
     * to 0.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters that are provided to split the billing subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionInner split(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionSplitRequest parameters, Context context) {
        return beginSplit(billingAccountName, billingSubscriptionName, parameters, context).getFinalResult();
    }

    /**
     * Validates if charges for a subscription can be moved to a new invoice section. This operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the transfer eligibility validation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MoveBillingSubscriptionEligibilityResultInner>> validateMoveEligibilityWithResponseAsync(
        String billingAccountName, String billingSubscriptionName, MoveBillingSubscriptionRequest parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.validateMoveEligibility(this.client.getEndpoint(), billingAccountName,
                billingSubscriptionName, this.client.getApiVersion(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Validates if charges for a subscription can be moved to a new invoice section. This operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the transfer eligibility validation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MoveBillingSubscriptionEligibilityResultInner> validateMoveEligibilityAsync(String billingAccountName,
        String billingSubscriptionName, MoveBillingSubscriptionRequest parameters) {
        return validateMoveEligibilityWithResponseAsync(billingAccountName, billingSubscriptionName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Validates if charges for a subscription can be moved to a new invoice section. This operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the transfer eligibility validation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MoveBillingSubscriptionEligibilityResultInner> validateMoveEligibilityWithResponse(
        String billingAccountName, String billingSubscriptionName, MoveBillingSubscriptionRequest parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return service.validateMoveEligibilitySync(this.client.getEndpoint(), billingAccountName,
            billingSubscriptionName, this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Validates if charges for a subscription can be moved to a new invoice section. This operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters Request parameters to transfer billing subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the transfer eligibility validation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MoveBillingSubscriptionEligibilityResultInner validateMoveEligibility(String billingAccountName,
        String billingSubscriptionName, MoveBillingSubscriptionRequest parameters) {
        return validateMoveEligibilityWithResponse(billingAccountName, billingSubscriptionName, parameters,
            Context.NONE).getValue();
    }

    /**
     * Cancels a billing subscription. This operation is supported only for billing accounts of type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String billingAccountName,
        String billingSubscriptionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), billingAccountName,
                billingSubscriptionName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Cancels a billing subscription. This operation is supported only for billing accounts of type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String billingAccountName, String billingSubscriptionName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), accept, Context.NONE);
    }

    /**
     * Cancels a billing subscription. This operation is supported only for billing accounts of type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String billingAccountName, String billingSubscriptionName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Cancels a billing subscription. This operation is supported only for billing accounts of type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String billingAccountName,
        String billingSubscriptionName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(billingAccountName, billingSubscriptionName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Cancels a billing subscription. This operation is supported only for billing accounts of type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String billingAccountName, String billingSubscriptionName) {
        Response<BinaryData> response = deleteWithResponse(billingAccountName, billingSubscriptionName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Cancels a billing subscription. This operation is supported only for billing accounts of type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String billingAccountName, String billingSubscriptionName,
        Context context) {
        Response<BinaryData> response = deleteWithResponse(billingAccountName, billingSubscriptionName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Cancels a billing subscription. This operation is supported only for billing accounts of type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String billingAccountName, String billingSubscriptionName) {
        return beginDeleteAsync(billingAccountName, billingSubscriptionName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Cancels a billing subscription. This operation is supported only for billing accounts of type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String billingAccountName, String billingSubscriptionName) {
        beginDelete(billingAccountName, billingSubscriptionName).getFinalResult();
    }

    /**
     * Cancels a billing subscription. This operation is supported only for billing accounts of type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String billingAccountName, String billingSubscriptionName, Context context) {
        beginDelete(billingAccountName, billingSubscriptionName, context).getFinalResult();
    }

    /**
     * Gets a subscription by its ID. The operation is supported for billing accounts with agreement type Microsoft
     * Customer Agreement, Microsoft Partner Agreement, and Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its ID along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BillingSubscriptionInner>> getWithResponseAsync(String billingAccountName,
        String billingSubscriptionName, String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
                this.client.getApiVersion(), expand, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a subscription by its ID. The operation is supported for billing accounts with agreement type Microsoft
     * Customer Agreement, Microsoft Partner Agreement, and Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its ID on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BillingSubscriptionInner> getAsync(String billingAccountName, String billingSubscriptionName) {
        final String expand = null;
        return getWithResponseAsync(billingAccountName, billingSubscriptionName, expand)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a subscription by its ID. The operation is supported for billing accounts with agreement type Microsoft
     * Customer Agreement, Microsoft Partner Agreement, and Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BillingSubscriptionInner> getWithResponse(String billingAccountName, String billingSubscriptionName,
        String expand, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), expand, accept, context);
    }

    /**
     * Gets a subscription by its ID. The operation is supported for billing accounts with agreement type Microsoft
     * Customer Agreement, Microsoft Partner Agreement, and Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionInner get(String billingAccountName, String billingSubscriptionName) {
        final String expand = null;
        return getWithResponse(billingAccountName, billingSubscriptionName, expand, Context.NONE).getValue();
    }

    /**
     * Updates the properties of a billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters The billing properties of a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String billingAccountName,
        String billingSubscriptionName, BillingSubscriptionPatch parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), billingAccountName,
                billingSubscriptionName, this.client.getApiVersion(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the properties of a billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters The billing properties of a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionPatch parameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), parameters, accept, Context.NONE);
    }

    /**
     * Updates the properties of a billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters The billing properties of a subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionPatch parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingSubscriptionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), billingAccountName, billingSubscriptionName,
            this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Updates the properties of a billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters The billing properties of a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner> beginUpdateAsync(
        String billingAccountName, String billingSubscriptionName, BillingSubscriptionPatch parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(billingAccountName, billingSubscriptionName, parameters);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(mono,
            this.client.getHttpPipeline(), BillingSubscriptionInner.class, BillingSubscriptionInner.class,
            this.client.getContext());
    }

    /**
     * Updates the properties of a billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters The billing properties of a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner>
        beginUpdate(String billingAccountName, String billingSubscriptionName, BillingSubscriptionPatch parameters) {
        Response<BinaryData> response = updateWithResponse(billingAccountName, billingSubscriptionName, parameters);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(response,
            BillingSubscriptionInner.class, BillingSubscriptionInner.class, Context.NONE);
    }

    /**
     * Updates the properties of a billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters The billing properties of a subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BillingSubscriptionInner>, BillingSubscriptionInner> beginUpdate(
        String billingAccountName, String billingSubscriptionName, BillingSubscriptionPatch parameters,
        Context context) {
        Response<BinaryData> response
            = updateWithResponse(billingAccountName, billingSubscriptionName, parameters, context);
        return this.client.<BillingSubscriptionInner, BillingSubscriptionInner>getLroResult(response,
            BillingSubscriptionInner.class, BillingSubscriptionInner.class, context);
    }

    /**
     * Updates the properties of a billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters The billing properties of a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BillingSubscriptionInner> updateAsync(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionPatch parameters) {
        return beginUpdateAsync(billingAccountName, billingSubscriptionName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the properties of a billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters The billing properties of a subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionInner update(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionPatch parameters) {
        return beginUpdate(billingAccountName, billingSubscriptionName, parameters).getFinalResult();
    }

    /**
     * Updates the properties of a billing subscription.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param parameters The billing properties of a subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the billing properties of a subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionInner update(String billingAccountName, String billingSubscriptionName,
        BillingSubscriptionPatch parameters, Context context) {
        return beginUpdate(billingAccountName, billingSubscriptionName, parameters, context).getFinalResult();
    }

    /**
     * Lists the subscriptions for a billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param includeTenantSubscriptions Can be used to get tenant-owned billing subscriptions. This field is only
     * applies to Microsoft Online Services Program billing accounts.
     * @param includeFailed Can be used to get failed billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>> listByBillingAccountSinglePageAsync(String billingAccountName,
        Boolean includeDeleted, Boolean includeTenantSubscriptions, Boolean includeFailed, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByBillingAccount(this.client.getEndpoint(), billingAccountName,
                includeDeleted, includeTenantSubscriptions, includeFailed, this.client.getApiVersion(), expand, filter,
                orderBy, top, skip, count, search, accept, context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the subscriptions for a billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param includeTenantSubscriptions Can be used to get tenant-owned billing subscriptions. This field is only
     * applies to Microsoft Online Services Program billing accounts.
     * @param includeFailed Can be used to get failed billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByBillingAccountAsync(String billingAccountName,
        Boolean includeDeleted, Boolean includeTenantSubscriptions, Boolean includeFailed, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search) {
        return new PagedFlux<>(
            () -> listByBillingAccountSinglePageAsync(billingAccountName, includeDeleted, includeTenantSubscriptions,
                includeFailed, expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByBillingAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions for a billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByBillingAccountAsync(String billingAccountName) {
        final Boolean includeDeleted = null;
        final Boolean includeTenantSubscriptions = null;
        final Boolean includeFailed = null;
        final String expand = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedFlux<>(
            () -> listByBillingAccountSinglePageAsync(billingAccountName, includeDeleted, includeTenantSubscriptions,
                includeFailed, expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByBillingAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions for a billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param includeTenantSubscriptions Can be used to get tenant-owned billing subscriptions. This field is only
     * applies to Microsoft Online Services Program billing accounts.
     * @param includeFailed Can be used to get failed billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByBillingAccountSinglePage(String billingAccountName,
        Boolean includeDeleted, Boolean includeTenantSubscriptions, Boolean includeFailed, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res = service.listByBillingAccountSync(this.client.getEndpoint(),
            billingAccountName, includeDeleted, includeTenantSubscriptions, includeFailed, this.client.getApiVersion(),
            expand, filter, orderBy, top, skip, count, search, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions for a billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param includeTenantSubscriptions Can be used to get tenant-owned billing subscriptions. This field is only
     * applies to Microsoft Online Services Program billing accounts.
     * @param includeFailed Can be used to get failed billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByBillingAccountSinglePage(String billingAccountName,
        Boolean includeDeleted, Boolean includeTenantSubscriptions, Boolean includeFailed, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res = service.listByBillingAccountSync(this.client.getEndpoint(),
            billingAccountName, includeDeleted, includeTenantSubscriptions, includeFailed, this.client.getApiVersion(),
            expand, filter, orderBy, top, skip, count, search, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions for a billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByBillingAccount(String billingAccountName) {
        final Boolean includeDeleted = null;
        final Boolean includeTenantSubscriptions = null;
        final Boolean includeFailed = null;
        final String expand = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedIterable<>(
            () -> listByBillingAccountSinglePage(billingAccountName, includeDeleted, includeTenantSubscriptions,
                includeFailed, expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByBillingAccountNextSinglePage(nextLink));
    }

    /**
     * Lists the subscriptions for a billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param includeTenantSubscriptions Can be used to get tenant-owned billing subscriptions. This field is only
     * applies to Microsoft Online Services Program billing accounts.
     * @param includeFailed Can be used to get failed billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByBillingAccount(String billingAccountName,
        Boolean includeDeleted, Boolean includeTenantSubscriptions, Boolean includeFailed, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search, Context context) {
        return new PagedIterable<>(
            () -> listByBillingAccountSinglePage(billingAccountName, includeDeleted, includeTenantSubscriptions,
                includeFailed, expand, filter, orderBy, top, skip, count, search, context),
            nextLink -> listByBillingAccountNextSinglePage(nextLink, context));
    }

    /**
     * Lists the subscriptions for a customer at billing account level. The operation is supported only for billing
     * accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>> listByCustomerAtBillingAccountSinglePageAsync(
        String billingAccountName, String customerName, Boolean includeDeleted, String expand, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (customerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter customerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByCustomerAtBillingAccount(this.client.getEndpoint(),
                billingAccountName, customerName, includeDeleted, this.client.getApiVersion(), expand, filter, orderBy,
                top, skip, count, search, accept, context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the subscriptions for a customer at billing account level. The operation is supported only for billing
     * accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByCustomerAtBillingAccountAsync(String billingAccountName,
        String customerName, Boolean includeDeleted, String expand, String filter, String orderBy, Long top, Long skip,
        Boolean count, String search) {
        return new PagedFlux<>(
            () -> listByCustomerAtBillingAccountSinglePageAsync(billingAccountName, customerName, includeDeleted,
                expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByCustomerAtBillingAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions for a customer at billing account level. The operation is supported only for billing
     * accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByCustomerAtBillingAccountAsync(String billingAccountName,
        String customerName) {
        final Boolean includeDeleted = null;
        final String expand = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedFlux<>(
            () -> listByCustomerAtBillingAccountSinglePageAsync(billingAccountName, customerName, includeDeleted,
                expand, filter, orderBy, top, skip, count, search),
            nextLink -> listByCustomerAtBillingAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions for a customer at billing account level. The operation is supported only for billing
     * accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByCustomerAtBillingAccountSinglePage(String billingAccountName,
        String customerName, Boolean includeDeleted, String expand, String filter, String orderBy, Long top, Long skip,
        Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (customerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter customerName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res = service.listByCustomerAtBillingAccountSync(
            this.client.getEndpoint(), billingAccountName, customerName, includeDeleted, this.client.getApiVersion(),
            expand, filter, orderBy, top, skip, count, search, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions for a customer at billing account level. The operation is supported only for billing
     * accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByCustomerAtBillingAccountSinglePage(String billingAccountName,
        String customerName, Boolean includeDeleted, String expand, String filter, String orderBy, Long top, Long skip,
        Boolean count, String search, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (customerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter customerName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res = service.listByCustomerAtBillingAccountSync(
            this.client.getEndpoint(), billingAccountName, customerName, includeDeleted, this.client.getApiVersion(),
            expand, filter, orderBy, top, skip, count, search, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions for a customer at billing account level. The operation is supported only for billing
     * accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByCustomerAtBillingAccount(String billingAccountName,
        String customerName) {
        final Boolean includeDeleted = null;
        final String expand = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedIterable<>(
            () -> listByCustomerAtBillingAccountSinglePage(billingAccountName, customerName, includeDeleted, expand,
                filter, orderBy, top, skip, count, search),
            nextLink -> listByCustomerAtBillingAccountNextSinglePage(nextLink));
    }

    /**
     * Lists the subscriptions for a customer at billing account level. The operation is supported only for billing
     * accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param expand Can be used to expand `Reseller`, `ConsumptionCostCenter`, `LastMonthCharges` and
     * `MonthToDateCharges`.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByCustomerAtBillingAccount(String billingAccountName,
        String customerName, Boolean includeDeleted, String expand, String filter, String orderBy, Long top, Long skip,
        Boolean count, String search, Context context) {
        return new PagedIterable<>(
            () -> listByCustomerAtBillingAccountSinglePage(billingAccountName, customerName, includeDeleted, expand,
                filter, orderBy, top, skip, count, search, context),
            nextLink -> listByCustomerAtBillingAccountNextSinglePage(nextLink, context));
    }

    /**
     * Lists the subscriptions for an enrollment account. The operation is supported for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>> listByEnrollmentAccountSinglePageAsync(
        String billingAccountName, String enrollmentAccountName, String filter, String orderBy, Long top, Long skip,
        Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (enrollmentAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enrollmentAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByEnrollmentAccount(this.client.getEndpoint(), billingAccountName,
                enrollmentAccountName, this.client.getApiVersion(), filter, orderBy, top, skip, count, search, accept,
                context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the subscriptions for an enrollment account. The operation is supported for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByEnrollmentAccountAsync(String billingAccountName,
        String enrollmentAccountName, String filter, String orderBy, Long top, Long skip, Boolean count,
        String search) {
        return new PagedFlux<>(() -> listByEnrollmentAccountSinglePageAsync(billingAccountName, enrollmentAccountName,
            filter, orderBy, top, skip, count, search),
            nextLink -> listByEnrollmentAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions for an enrollment account. The operation is supported for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionInner> listByEnrollmentAccountAsync(String billingAccountName,
        String enrollmentAccountName) {
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedFlux<>(() -> listByEnrollmentAccountSinglePageAsync(billingAccountName, enrollmentAccountName,
            filter, orderBy, top, skip, count, search),
            nextLink -> listByEnrollmentAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscriptions for an enrollment account. The operation is supported for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByEnrollmentAccountSinglePage(String billingAccountName,
        String enrollmentAccountName, String filter, String orderBy, Long top, Long skip, Boolean count,
        String search) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (enrollmentAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter enrollmentAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByEnrollmentAccountSync(this.client.getEndpoint(), billingAccountName, enrollmentAccountName,
                this.client.getApiVersion(), filter, orderBy, top, skip, count, search, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions for an enrollment account. The operation is supported for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByEnrollmentAccountSinglePage(String billingAccountName,
        String enrollmentAccountName, String filter, String orderBy, Long top, Long skip, Boolean count, String search,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (enrollmentAccountName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter enrollmentAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByEnrollmentAccountSync(this.client.getEndpoint(), billingAccountName, enrollmentAccountName,
                this.client.getApiVersion(), filter, orderBy, top, skip, count, search, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists the subscriptions for an enrollment account. The operation is supported for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByEnrollmentAccount(String billingAccountName,
        String enrollmentAccountName) {
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedIterable<>(() -> listByEnrollmentAccountSinglePage(billingAccountName, enrollmentAccountName,
            filter, orderBy, top, skip, count, search), nextLink -> listByEnrollmentAccountNextSinglePage(nextLink));
    }

    /**
     * Lists the subscriptions for an enrollment account. The operation is supported for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionInner> listByEnrollmentAccount(String billingAccountName,
        String enrollmentAccountName, String filter, String orderBy, Long top, Long skip, Boolean count, String search,
        Context context) {
        return new PagedIterable<>(() -> listByEnrollmentAccountSinglePage(billingAccountName, enrollmentAccountName,
            filter, orderBy, top, skip, count, search, context),
            nextLink -> listByEnrollmentAccountNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>> listByBillingProfileNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByBillingProfileNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByBillingProfileNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByBillingProfileNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByBillingProfileNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByBillingProfileNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>> listByCustomerNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByCustomerNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByCustomerNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByCustomerNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByCustomerNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByCustomerNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>> listByInvoiceSectionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByInvoiceSectionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByInvoiceSectionNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByInvoiceSectionNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByInvoiceSectionNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByInvoiceSectionNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>> listByBillingAccountNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByBillingAccountNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByBillingAccountNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByBillingAccountNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByBillingAccountNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByBillingAccountNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>>
        listByCustomerAtBillingAccountNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listByCustomerAtBillingAccountNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByCustomerAtBillingAccountNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByCustomerAtBillingAccountNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByCustomerAtBillingAccountNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByCustomerAtBillingAccountNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionInner>> listByEnrollmentAccountNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByEnrollmentAccountNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BillingSubscriptionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByEnrollmentAccountNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByEnrollmentAccountNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BillingSubscriptionInner> listByEnrollmentAccountNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BillingSubscriptionListResult> res
            = service.listByEnrollmentAccountNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(BillingSubscriptionsClientImpl.class);
}
