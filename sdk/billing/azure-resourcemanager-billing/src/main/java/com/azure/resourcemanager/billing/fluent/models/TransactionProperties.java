// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.billing.models.CreditType;
import com.azure.resourcemanager.billing.models.SpecialTaxationType;
import com.azure.resourcemanager.billing.models.TransactionKind;
import com.azure.resourcemanager.billing.models.TransactionPropertiesAutoGenerated;
import com.azure.resourcemanager.billing.models.TransactionPropertiesAzureCreditApplied;
import com.azure.resourcemanager.billing.models.TransactionPropertiesConsumptionCommitmentDecremented;
import com.azure.resourcemanager.billing.models.TransactionPropertiesEffectivePrice;
import com.azure.resourcemanager.billing.models.TransactionPropertiesMarketPrice;
import com.azure.resourcemanager.billing.models.TransactionPropertiesRefundTransactionDetails;
import com.azure.resourcemanager.billing.models.TransactionPropertiesSubTotal;
import com.azure.resourcemanager.billing.models.TransactionPropertiesTax;
import com.azure.resourcemanager.billing.models.TransactionPropertiesTransactionAmount;

/** The properties of a(n) Transaction. */
@Fluent
public final class TransactionProperties extends TransactionPropertiesAutoGenerated {
    /** Creates an instance of TransactionProperties class. */
    public TransactionProperties() {
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withAzureCreditApplied(TransactionPropertiesAzureCreditApplied azureCreditApplied) {
        super.withAzureCreditApplied(azureCreditApplied);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withAzurePlan(String azurePlan) {
        super.withAzurePlan(azurePlan);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withBillingCurrency(String billingCurrency) {
        super.withBillingCurrency(billingCurrency);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withBillingProfileDisplayName(Object billingProfileDisplayName) {
        super.withBillingProfileDisplayName(billingProfileDisplayName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withBillingProfileId(String billingProfileId) {
        super.withBillingProfileId(billingProfileId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withConsumptionCommitmentDecremented(
        TransactionPropertiesConsumptionCommitmentDecremented consumptionCommitmentDecremented) {
        super.withConsumptionCommitmentDecremented(consumptionCommitmentDecremented);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withCustomerDisplayName(String customerDisplayName) {
        super.withCustomerDisplayName(customerDisplayName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withCustomerId(String customerId) {
        super.withCustomerId(customerId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withCreditType(CreditType creditType) {
        super.withCreditType(creditType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withDate(String date) {
        super.withDate(date);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withDiscount(Double discount) {
        super.withDiscount(discount);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withEffectivePrice(TransactionPropertiesEffectivePrice effectivePrice) {
        super.withEffectivePrice(effectivePrice);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withExchangeRate(Double exchangeRate) {
        super.withExchangeRate(exchangeRate);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withInvoice(String invoice) {
        super.withInvoice(invoice);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withInvoiceId(String invoiceId) {
        super.withInvoiceId(invoiceId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withInvoiceSectionDisplayName(String invoiceSectionDisplayName) {
        super.withInvoiceSectionDisplayName(invoiceSectionDisplayName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withInvoiceSectionId(String invoiceSectionId) {
        super.withInvoiceSectionId(invoiceSectionId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withIsThirdParty(Boolean isThirdParty) {
        super.withIsThirdParty(isThirdParty);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withKind(TransactionKind kind) {
        super.withKind(kind);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withMarketPrice(TransactionPropertiesMarketPrice marketPrice) {
        super.withMarketPrice(marketPrice);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withPartNumber(String partNumber) {
        super.withPartNumber(partNumber);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withPricingCurrency(String pricingCurrency) {
        super.withPricingCurrency(pricingCurrency);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withProductDescription(String productDescription) {
        super.withProductDescription(productDescription);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withProductFamily(String productFamily) {
        super.withProductFamily(productFamily);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withProductTypeId(String productTypeId) {
        super.withProductTypeId(productTypeId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withProductType(String productType) {
        super.withProductType(productType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withQuantity(Integer quantity) {
        super.withQuantity(quantity);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withReasonCode(String reasonCode) {
        super.withReasonCode(reasonCode);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withServicePeriodStartDate(String servicePeriodStartDate) {
        super.withServicePeriodStartDate(servicePeriodStartDate);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withServicePeriodEndDate(String servicePeriodEndDate) {
        super.withServicePeriodEndDate(servicePeriodEndDate);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withSubTotal(TransactionPropertiesSubTotal subTotal) {
        super.withSubTotal(subTotal);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withTax(TransactionPropertiesTax tax) {
        super.withTax(tax);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withTransactionAmount(TransactionPropertiesTransactionAmount transactionAmount) {
        super.withTransactionAmount(transactionAmount);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withTransactionType(String transactionType) {
        super.withTransactionType(transactionType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withUnits(Double units) {
        super.withUnits(units);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withUnitOfMeasure(String unitOfMeasure) {
        super.withUnitOfMeasure(unitOfMeasure);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withUnitType(String unitType) {
        super.withUnitType(unitType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withSpecialTaxationType(SpecialTaxationType specialTaxationType) {
        super.withSpecialTaxationType(specialTaxationType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public TransactionProperties withRefundTransactionDetails(
        TransactionPropertiesRefundTransactionDetails refundTransactionDetails) {
        super.withRefundTransactionDetails(refundTransactionDetails);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
