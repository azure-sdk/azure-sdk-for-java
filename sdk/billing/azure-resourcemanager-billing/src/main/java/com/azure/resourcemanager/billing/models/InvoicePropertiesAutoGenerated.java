// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** An invoice. */
@Fluent
public class InvoicePropertiesAutoGenerated {
    /*
     * The amount.
     */
    @JsonProperty(value = "amountDue")
    private InvoicePropertiesAmountDue amountDue;

    /*
     * The amount.
     */
    @JsonProperty(value = "azurePrepaymentApplied")
    private InvoicePropertiesAzurePrepaymentApplied azurePrepaymentApplied;

    /*
     * The amount.
     */
    @JsonProperty(value = "billedAmount")
    private InvoicePropertiesBilledAmount billedAmount;

    /*
     * The Id of the active invoice which is originally billed after this invoice was voided. This field is applicable
     * to the void invoices only.
     */
    @JsonProperty(value = "billedDocumentId", access = JsonProperty.Access.WRITE_ONLY)
    private String billedDocumentId;

    /*
     * The name of the billing profile for which the invoice is generated.
     */
    @JsonProperty(value = "billingProfileDisplayName", access = JsonProperty.Access.WRITE_ONLY)
    private String billingProfileDisplayName;

    /*
     * The ID of the billing profile for which the invoice is generated.
     */
    @JsonProperty(value = "billingProfileId", access = JsonProperty.Access.WRITE_ONLY)
    private String billingProfileId;

    /*
     * The amount.
     */
    @JsonProperty(value = "creditAmount")
    private InvoicePropertiesCreditAmount creditAmount;

    /*
     * The Id of the invoice which got voided and this credit note was issued as a result. This field is applicable to
     * the credit notes only.
     */
    @JsonProperty(value = "creditForDocumentId", access = JsonProperty.Access.WRITE_ONLY)
    private String creditForDocumentId;

    /*
     * List of documents available to download and view such as invoice, credit note, or tax receipt.
     */
    @JsonProperty(value = "documents", access = JsonProperty.Access.WRITE_ONLY)
    private List<InvoiceDocument> documents;

    /*
     * The type of the document.
     */
    @JsonProperty(value = "documentType", access = JsonProperty.Access.WRITE_ONLY)
    private InvoiceDocumentType documentType;

    /*
     * Upcoming feature.
     */
    @JsonProperty(value = "chargeDate", access = JsonProperty.Access.WRITE_ONLY)
    private String chargeDate;

    /*
     * The due date for the invoice.
     */
    @JsonProperty(value = "dueDate", access = JsonProperty.Access.WRITE_ONLY)
    private String dueDate;

    /*
     * List of failed payments.
     */
    @JsonProperty(value = "failedPayments", access = JsonProperty.Access.WRITE_ONLY)
    private List<FailedPayment> failedPayments;

    /*
     * The amount.
     */
    @JsonProperty(value = "freeAzureCreditApplied")
    private InvoicePropertiesFreeAzureCreditApplied freeAzureCreditApplied;

    /*
     * The date when the invoice was generated.
     */
    @JsonProperty(value = "invoiceDate", access = JsonProperty.Access.WRITE_ONLY)
    private String invoiceDate;

    /*
     * The end date of the billing period for which the invoice is generated. The date is in MM-DD-YYYY format.
     */
    @JsonProperty(value = "invoicePeriodEndDate", access = JsonProperty.Access.WRITE_ONLY)
    private String invoicePeriodEndDate;

    /*
     * The start date of the billing period for which the invoice is generated. The date is in MM-DD-YYYY format.
     */
    @JsonProperty(value = "invoicePeriodStartDate", access = JsonProperty.Access.WRITE_ONLY)
    private String invoicePeriodStartDate;

    /*
     * Invoice type.
     */
    @JsonProperty(value = "invoiceType", access = JsonProperty.Access.WRITE_ONLY)
    private InvoiceType invoiceType;

    /*
     * Specifies if the invoice is generated as part of monthly invoicing cycle or not. This field is applicable to
     * billing accounts with agreement type Microsoft Customer Agreement.
     */
    @JsonProperty(value = "isMonthlyInvoice", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isMonthlyInvoice;

    /*
     * List of payments.
     */
    @JsonProperty(value = "payments", access = JsonProperty.Access.WRITE_ONLY)
    private List<Payment> payments;

    /*
     * An optional purchase order number for the invoice.
     */
    @JsonProperty(value = "purchaseOrderNumber", access = JsonProperty.Access.WRITE_ONLY)
    private String purchaseOrderNumber;

    /*
     * The rebill details of an invoice.
     */
    @JsonProperty(value = "rebillDetails")
    private InvoicePropertiesRebillDetails rebillDetails;

    /*
     * The current status of the invoice.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private InvoiceStatus status;

    /*
     * The subscriptionDisplayName property.
     */
    @JsonProperty(value = "subscriptionDisplayName", access = JsonProperty.Access.WRITE_ONLY)
    private String subscriptionDisplayName;

    /*
     * The ID of the subscription for which the invoice is generated.
     */
    @JsonProperty(value = "subscriptionId", access = JsonProperty.Access.WRITE_ONLY)
    private String subscriptionId;

    /*
     * Identifies the type of tax calculation used for the invoice. The field is applicable only to invoices with
     * special tax calculation logic.
     */
    @JsonProperty(value = "specialTaxationType", access = JsonProperty.Access.WRITE_ONLY)
    private SpecialTaxationType specialTaxationType;

    /*
     * The amount.
     */
    @JsonProperty(value = "subTotal")
    private InvoicePropertiesSubTotal subTotal;

    /*
     * The amount.
     */
    @JsonProperty(value = "taxAmount")
    private InvoicePropertiesTaxAmount taxAmount;

    /*
     * The amount.
     */
    @JsonProperty(value = "totalAmount")
    private InvoicePropertiesTotalAmount totalAmount;

    /*
     * The details of refund request.
     */
    @JsonProperty(value = "refundDetails")
    private InvoicePropertiesRefundDetails refundDetails;

    /** Creates an instance of InvoicePropertiesAutoGenerated class. */
    public InvoicePropertiesAutoGenerated() {
    }

    /**
     * Get the amountDue property: The amount.
     *
     * @return the amountDue value.
     */
    public InvoicePropertiesAmountDue amountDue() {
        return this.amountDue;
    }

    /**
     * Set the amountDue property: The amount.
     *
     * @param amountDue the amountDue value to set.
     * @return the InvoicePropertiesAutoGenerated object itself.
     */
    public InvoicePropertiesAutoGenerated withAmountDue(InvoicePropertiesAmountDue amountDue) {
        this.amountDue = amountDue;
        return this;
    }

    /**
     * Get the azurePrepaymentApplied property: The amount.
     *
     * @return the azurePrepaymentApplied value.
     */
    public InvoicePropertiesAzurePrepaymentApplied azurePrepaymentApplied() {
        return this.azurePrepaymentApplied;
    }

    /**
     * Set the azurePrepaymentApplied property: The amount.
     *
     * @param azurePrepaymentApplied the azurePrepaymentApplied value to set.
     * @return the InvoicePropertiesAutoGenerated object itself.
     */
    public InvoicePropertiesAutoGenerated withAzurePrepaymentApplied(
        InvoicePropertiesAzurePrepaymentApplied azurePrepaymentApplied) {
        this.azurePrepaymentApplied = azurePrepaymentApplied;
        return this;
    }

    /**
     * Get the billedAmount property: The amount.
     *
     * @return the billedAmount value.
     */
    public InvoicePropertiesBilledAmount billedAmount() {
        return this.billedAmount;
    }

    /**
     * Set the billedAmount property: The amount.
     *
     * @param billedAmount the billedAmount value to set.
     * @return the InvoicePropertiesAutoGenerated object itself.
     */
    public InvoicePropertiesAutoGenerated withBilledAmount(InvoicePropertiesBilledAmount billedAmount) {
        this.billedAmount = billedAmount;
        return this;
    }

    /**
     * Get the billedDocumentId property: The Id of the active invoice which is originally billed after this invoice was
     * voided. This field is applicable to the void invoices only.
     *
     * @return the billedDocumentId value.
     */
    public String billedDocumentId() {
        return this.billedDocumentId;
    }

    /**
     * Get the billingProfileDisplayName property: The name of the billing profile for which the invoice is generated.
     *
     * @return the billingProfileDisplayName value.
     */
    public String billingProfileDisplayName() {
        return this.billingProfileDisplayName;
    }

    /**
     * Get the billingProfileId property: The ID of the billing profile for which the invoice is generated.
     *
     * @return the billingProfileId value.
     */
    public String billingProfileId() {
        return this.billingProfileId;
    }

    /**
     * Get the creditAmount property: The amount.
     *
     * @return the creditAmount value.
     */
    public InvoicePropertiesCreditAmount creditAmount() {
        return this.creditAmount;
    }

    /**
     * Set the creditAmount property: The amount.
     *
     * @param creditAmount the creditAmount value to set.
     * @return the InvoicePropertiesAutoGenerated object itself.
     */
    public InvoicePropertiesAutoGenerated withCreditAmount(InvoicePropertiesCreditAmount creditAmount) {
        this.creditAmount = creditAmount;
        return this;
    }

    /**
     * Get the creditForDocumentId property: The Id of the invoice which got voided and this credit note was issued as a
     * result. This field is applicable to the credit notes only.
     *
     * @return the creditForDocumentId value.
     */
    public String creditForDocumentId() {
        return this.creditForDocumentId;
    }

    /**
     * Get the documents property: List of documents available to download and view such as invoice, credit note, or tax
     * receipt.
     *
     * @return the documents value.
     */
    public List<InvoiceDocument> documents() {
        return this.documents;
    }

    /**
     * Get the documentType property: The type of the document.
     *
     * @return the documentType value.
     */
    public InvoiceDocumentType documentType() {
        return this.documentType;
    }

    /**
     * Get the chargeDate property: Upcoming feature.
     *
     * @return the chargeDate value.
     */
    public String chargeDate() {
        return this.chargeDate;
    }

    /**
     * Get the dueDate property: The due date for the invoice.
     *
     * @return the dueDate value.
     */
    public String dueDate() {
        return this.dueDate;
    }

    /**
     * Get the failedPayments property: List of failed payments.
     *
     * @return the failedPayments value.
     */
    public List<FailedPayment> failedPayments() {
        return this.failedPayments;
    }

    /**
     * Get the freeAzureCreditApplied property: The amount.
     *
     * @return the freeAzureCreditApplied value.
     */
    public InvoicePropertiesFreeAzureCreditApplied freeAzureCreditApplied() {
        return this.freeAzureCreditApplied;
    }

    /**
     * Set the freeAzureCreditApplied property: The amount.
     *
     * @param freeAzureCreditApplied the freeAzureCreditApplied value to set.
     * @return the InvoicePropertiesAutoGenerated object itself.
     */
    public InvoicePropertiesAutoGenerated withFreeAzureCreditApplied(
        InvoicePropertiesFreeAzureCreditApplied freeAzureCreditApplied) {
        this.freeAzureCreditApplied = freeAzureCreditApplied;
        return this;
    }

    /**
     * Get the invoiceDate property: The date when the invoice was generated.
     *
     * @return the invoiceDate value.
     */
    public String invoiceDate() {
        return this.invoiceDate;
    }

    /**
     * Get the invoicePeriodEndDate property: The end date of the billing period for which the invoice is generated. The
     * date is in MM-DD-YYYY format.
     *
     * @return the invoicePeriodEndDate value.
     */
    public String invoicePeriodEndDate() {
        return this.invoicePeriodEndDate;
    }

    /**
     * Get the invoicePeriodStartDate property: The start date of the billing period for which the invoice is generated.
     * The date is in MM-DD-YYYY format.
     *
     * @return the invoicePeriodStartDate value.
     */
    public String invoicePeriodStartDate() {
        return this.invoicePeriodStartDate;
    }

    /**
     * Get the invoiceType property: Invoice type.
     *
     * @return the invoiceType value.
     */
    public InvoiceType invoiceType() {
        return this.invoiceType;
    }

    /**
     * Get the isMonthlyInvoice property: Specifies if the invoice is generated as part of monthly invoicing cycle or
     * not. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
     *
     * @return the isMonthlyInvoice value.
     */
    public Boolean isMonthlyInvoice() {
        return this.isMonthlyInvoice;
    }

    /**
     * Get the payments property: List of payments.
     *
     * @return the payments value.
     */
    public List<Payment> payments() {
        return this.payments;
    }

    /**
     * Get the purchaseOrderNumber property: An optional purchase order number for the invoice.
     *
     * @return the purchaseOrderNumber value.
     */
    public String purchaseOrderNumber() {
        return this.purchaseOrderNumber;
    }

    /**
     * Get the rebillDetails property: The rebill details of an invoice.
     *
     * @return the rebillDetails value.
     */
    public InvoicePropertiesRebillDetails rebillDetails() {
        return this.rebillDetails;
    }

    /**
     * Set the rebillDetails property: The rebill details of an invoice.
     *
     * @param rebillDetails the rebillDetails value to set.
     * @return the InvoicePropertiesAutoGenerated object itself.
     */
    public InvoicePropertiesAutoGenerated withRebillDetails(InvoicePropertiesRebillDetails rebillDetails) {
        this.rebillDetails = rebillDetails;
        return this;
    }

    /**
     * Get the status property: The current status of the invoice.
     *
     * @return the status value.
     */
    public InvoiceStatus status() {
        return this.status;
    }

    /**
     * Get the subscriptionDisplayName property: The subscriptionDisplayName property.
     *
     * @return the subscriptionDisplayName value.
     */
    public String subscriptionDisplayName() {
        return this.subscriptionDisplayName;
    }

    /**
     * Get the subscriptionId property: The ID of the subscription for which the invoice is generated.
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the specialTaxationType property: Identifies the type of tax calculation used for the invoice. The field is
     * applicable only to invoices with special tax calculation logic.
     *
     * @return the specialTaxationType value.
     */
    public SpecialTaxationType specialTaxationType() {
        return this.specialTaxationType;
    }

    /**
     * Get the subTotal property: The amount.
     *
     * @return the subTotal value.
     */
    public InvoicePropertiesSubTotal subTotal() {
        return this.subTotal;
    }

    /**
     * Set the subTotal property: The amount.
     *
     * @param subTotal the subTotal value to set.
     * @return the InvoicePropertiesAutoGenerated object itself.
     */
    public InvoicePropertiesAutoGenerated withSubTotal(InvoicePropertiesSubTotal subTotal) {
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Get the taxAmount property: The amount.
     *
     * @return the taxAmount value.
     */
    public InvoicePropertiesTaxAmount taxAmount() {
        return this.taxAmount;
    }

    /**
     * Set the taxAmount property: The amount.
     *
     * @param taxAmount the taxAmount value to set.
     * @return the InvoicePropertiesAutoGenerated object itself.
     */
    public InvoicePropertiesAutoGenerated withTaxAmount(InvoicePropertiesTaxAmount taxAmount) {
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * Get the totalAmount property: The amount.
     *
     * @return the totalAmount value.
     */
    public InvoicePropertiesTotalAmount totalAmount() {
        return this.totalAmount;
    }

    /**
     * Set the totalAmount property: The amount.
     *
     * @param totalAmount the totalAmount value to set.
     * @return the InvoicePropertiesAutoGenerated object itself.
     */
    public InvoicePropertiesAutoGenerated withTotalAmount(InvoicePropertiesTotalAmount totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Get the refundDetails property: The details of refund request.
     *
     * @return the refundDetails value.
     */
    public InvoicePropertiesRefundDetails refundDetails() {
        return this.refundDetails;
    }

    /**
     * Set the refundDetails property: The details of refund request.
     *
     * @param refundDetails the refundDetails value to set.
     * @return the InvoicePropertiesAutoGenerated object itself.
     */
    public InvoicePropertiesAutoGenerated withRefundDetails(InvoicePropertiesRefundDetails refundDetails) {
        this.refundDetails = refundDetails;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (amountDue() != null) {
            amountDue().validate();
        }
        if (azurePrepaymentApplied() != null) {
            azurePrepaymentApplied().validate();
        }
        if (billedAmount() != null) {
            billedAmount().validate();
        }
        if (creditAmount() != null) {
            creditAmount().validate();
        }
        if (documents() != null) {
            documents().forEach(e -> e.validate());
        }
        if (failedPayments() != null) {
            failedPayments().forEach(e -> e.validate());
        }
        if (freeAzureCreditApplied() != null) {
            freeAzureCreditApplied().validate();
        }
        if (payments() != null) {
            payments().forEach(e -> e.validate());
        }
        if (rebillDetails() != null) {
            rebillDetails().validate();
        }
        if (subTotal() != null) {
            subTotal().validate();
        }
        if (taxAmount() != null) {
            taxAmount().validate();
        }
        if (totalAmount() != null) {
            totalAmount().validate();
        }
        if (refundDetails() != null) {
            refundDetails().validate();
        }
    }
}
