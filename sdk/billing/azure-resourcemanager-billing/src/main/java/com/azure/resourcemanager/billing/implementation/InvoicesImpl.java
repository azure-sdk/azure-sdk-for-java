// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.billing.fluent.InvoicesClient;
import com.azure.resourcemanager.billing.fluent.models.DocumentDownloadResultInner;
import com.azure.resourcemanager.billing.fluent.models.InvoiceInner;
import com.azure.resourcemanager.billing.models.DocumentDownloadRequest;
import com.azure.resourcemanager.billing.models.DocumentDownloadResult;
import com.azure.resourcemanager.billing.models.Invoice;
import com.azure.resourcemanager.billing.models.Invoices;
import java.time.LocalDate;
import java.util.List;

public final class InvoicesImpl implements Invoices {
    private static final ClientLogger LOGGER = new ClientLogger(InvoicesImpl.class);

    private final InvoicesClient innerClient;

    private final com.azure.resourcemanager.billing.BillingManager serviceManager;

    public InvoicesImpl(InvoicesClient innerClient, com.azure.resourcemanager.billing.BillingManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Invoice> listByBillingProfile(String billingAccountName, String billingProfileName) {
        PagedIterable<InvoiceInner> inner =
            this.serviceClient().listByBillingProfile(billingAccountName, billingProfileName);
        return Utils.mapPage(inner, inner1 -> new InvoiceImpl(inner1, this.manager()));
    }

    public PagedIterable<Invoice> listByBillingProfile(
        String billingAccountName,
        String billingProfileName,
        LocalDate periodStartDate,
        LocalDate periodEndDate,
        String filter,
        String orderBy,
        Long top,
        Long skip,
        Boolean count,
        String search,
        Context context) {
        PagedIterable<InvoiceInner> inner =
            this
                .serviceClient()
                .listByBillingProfile(
                    billingAccountName,
                    billingProfileName,
                    periodStartDate,
                    periodEndDate,
                    filter,
                    orderBy,
                    top,
                    skip,
                    count,
                    search,
                    context);
        return Utils.mapPage(inner, inner1 -> new InvoiceImpl(inner1, this.manager()));
    }

    public DocumentDownloadResult downloadMultipleByBillingAccount(String billingAccountName) {
        DocumentDownloadResultInner inner = this.serviceClient().downloadMultipleByBillingAccount(billingAccountName);
        if (inner != null) {
            return new DocumentDownloadResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DocumentDownloadResult downloadMultipleByBillingAccount(
        String billingAccountName, List<DocumentDownloadRequest> body, Context context) {
        DocumentDownloadResultInner inner =
            this.serviceClient().downloadMultipleByBillingAccount(billingAccountName, body, context);
        if (inner != null) {
            return new DocumentDownloadResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void amend(String billingAccountName, String invoiceName) {
        this.serviceClient().amend(billingAccountName, invoiceName);
    }

    public void amend(String billingAccountName, String invoiceName, Context context) {
        this.serviceClient().amend(billingAccountName, invoiceName, context);
    }

    public DocumentDownloadResult downloadByBillingAccount(String billingAccountName, String invoiceName) {
        DocumentDownloadResultInner inner =
            this.serviceClient().downloadByBillingAccount(billingAccountName, invoiceName);
        if (inner != null) {
            return new DocumentDownloadResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DocumentDownloadResult downloadByBillingAccount(
        String billingAccountName, String invoiceName, String documentName, Context context) {
        DocumentDownloadResultInner inner =
            this.serviceClient().downloadByBillingAccount(billingAccountName, invoiceName, documentName, context);
        if (inner != null) {
            return new DocumentDownloadResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DocumentDownloadResult downloadSummaryByBillingAccount(String billingAccountName, String invoiceName) {
        DocumentDownloadResultInner inner =
            this.serviceClient().downloadSummaryByBillingAccount(billingAccountName, invoiceName);
        if (inner != null) {
            return new DocumentDownloadResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DocumentDownloadResult downloadSummaryByBillingAccount(
        String billingAccountName, String invoiceName, Context context) {
        DocumentDownloadResultInner inner =
            this.serviceClient().downloadSummaryByBillingAccount(billingAccountName, invoiceName, context);
        if (inner != null) {
            return new DocumentDownloadResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Invoice> getByBillingAccountWithResponse(
        String billingAccountName, String invoiceName, Context context) {
        Response<InvoiceInner> inner =
            this.serviceClient().getByBillingAccountWithResponse(billingAccountName, invoiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new InvoiceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Invoice getByBillingAccount(String billingAccountName, String invoiceName) {
        InvoiceInner inner = this.serviceClient().getByBillingAccount(billingAccountName, invoiceName);
        if (inner != null) {
            return new InvoiceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Invoice> listByBillingAccount(String billingAccountName) {
        PagedIterable<InvoiceInner> inner = this.serviceClient().listByBillingAccount(billingAccountName);
        return Utils.mapPage(inner, inner1 -> new InvoiceImpl(inner1, this.manager()));
    }

    public PagedIterable<Invoice> listByBillingAccount(
        String billingAccountName,
        LocalDate periodStartDate,
        LocalDate periodEndDate,
        String filter,
        String orderBy,
        Long top,
        Long skip,
        Boolean count,
        String search,
        Context context) {
        PagedIterable<InvoiceInner> inner =
            this
                .serviceClient()
                .listByBillingAccount(
                    billingAccountName,
                    periodStartDate,
                    periodEndDate,
                    filter,
                    orderBy,
                    top,
                    skip,
                    count,
                    search,
                    context);
        return Utils.mapPage(inner, inner1 -> new InvoiceImpl(inner1, this.manager()));
    }

    public DocumentDownloadResult downloadMultipleByBillingSubscription(String subscriptionId) {
        DocumentDownloadResultInner inner = this.serviceClient().downloadMultipleByBillingSubscription(subscriptionId);
        if (inner != null) {
            return new DocumentDownloadResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DocumentDownloadResult downloadMultipleByBillingSubscription(
        String subscriptionId, List<DocumentDownloadRequest> body, Context context) {
        DocumentDownloadResultInner inner =
            this.serviceClient().downloadMultipleByBillingSubscription(subscriptionId, body, context);
        if (inner != null) {
            return new DocumentDownloadResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DocumentDownloadResult downloadByBillingSubscription(String subscriptionId, String invoiceName) {
        DocumentDownloadResultInner inner =
            this.serviceClient().downloadByBillingSubscription(subscriptionId, invoiceName);
        if (inner != null) {
            return new DocumentDownloadResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DocumentDownloadResult downloadByBillingSubscription(
        String subscriptionId, String invoiceName, String documentName, Context context) {
        DocumentDownloadResultInner inner =
            this.serviceClient().downloadByBillingSubscription(subscriptionId, invoiceName, documentName, context);
        if (inner != null) {
            return new DocumentDownloadResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Invoice> getByBillingSubscriptionWithResponse(
        String subscriptionId, String invoiceName, Context context) {
        Response<InvoiceInner> inner =
            this.serviceClient().getByBillingSubscriptionWithResponse(subscriptionId, invoiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new InvoiceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Invoice getByBillingSubscription(String subscriptionId, String invoiceName) {
        InvoiceInner inner = this.serviceClient().getByBillingSubscription(subscriptionId, invoiceName);
        if (inner != null) {
            return new InvoiceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Invoice> listByBillingSubscription(String subscriptionId) {
        PagedIterable<InvoiceInner> inner = this.serviceClient().listByBillingSubscription(subscriptionId);
        return Utils.mapPage(inner, inner1 -> new InvoiceImpl(inner1, this.manager()));
    }

    public PagedIterable<Invoice> listByBillingSubscription(
        String subscriptionId,
        LocalDate periodStartDate,
        LocalDate periodEndDate,
        String filter,
        String orderBy,
        Long top,
        Long skip,
        Boolean count,
        String search,
        Context context) {
        PagedIterable<InvoiceInner> inner =
            this
                .serviceClient()
                .listByBillingSubscription(
                    subscriptionId, periodStartDate, periodEndDate, filter, orderBy, top, skip, count, search, context);
        return Utils.mapPage(inner, inner1 -> new InvoiceImpl(inner1, this.manager()));
    }

    public Response<Invoice> getWithResponse(String invoiceName, Context context) {
        Response<InvoiceInner> inner = this.serviceClient().getWithResponse(invoiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new InvoiceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Invoice get(String invoiceName) {
        InvoiceInner inner = this.serviceClient().get(invoiceName);
        if (inner != null) {
            return new InvoiceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private InvoicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.billing.BillingManager manager() {
        return this.serviceManager;
    }
}
