// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A transaction. */
@Fluent
public class TransactionPropertiesAutoGenerated {
    /*
     * The amount.
     */
    @JsonProperty(value = "azureCreditApplied")
    private TransactionPropertiesAzureCreditApplied azureCreditApplied;

    /*
     * Details of the Azure plan.
     */
    @JsonProperty(value = "azurePlan")
    private String azurePlan;

    /*
     * The ISO 4217 code for the currency in which this transaction is billed.
     */
    @JsonProperty(value = "billingCurrency")
    private String billingCurrency;

    /*
     * The name of the billing profile for the invoice section or customer.
     */
    @JsonProperty(value = "billingProfileDisplayName")
    private Object billingProfileDisplayName;

    /*
     * The fully qualified ID that uniquely identifies a billing profile.
     */
    @JsonProperty(value = "billingProfileId")
    private String billingProfileId;

    /*
     * The amount.
     */
    @JsonProperty(value = "consumptionCommitmentDecremented")
    private TransactionPropertiesConsumptionCommitmentDecremented consumptionCommitmentDecremented;

    /*
     * The name of the customer.
     */
    @JsonProperty(value = "customerDisplayName")
    private String customerDisplayName;

    /*
     * The fully qualified ID that uniquely identifies a customer.
     */
    @JsonProperty(value = "customerId")
    private String customerId;

    /*
     * The credit type of the transaction. Applies only to credited transactions.
     */
    @JsonProperty(value = "creditType")
    private CreditType creditType;

    /*
     * The date of transaction.
     */
    @JsonProperty(value = "date")
    private String date;

    /*
     * The percentage discount, if any, applied to this transaction.
     */
    @JsonProperty(value = "discount")
    private Double discount;

    /*
     * The amount.
     */
    @JsonProperty(value = "effectivePrice")
    private TransactionPropertiesEffectivePrice effectivePrice;

    /*
     * The exchange rate used to convert charged amount to billing currency, if applicable.
     */
    @JsonProperty(value = "exchangeRate")
    private Double exchangeRate;

    /*
     * Invoice on which the transaction was billed or 'pending' if the transaction is not billed.
     */
    @JsonProperty(value = "invoice")
    private String invoice;

    /*
     * The ID of the invoice on which the transaction was billed. This field is only applicable for transactions which
     * are billed.
     */
    @JsonProperty(value = "invoiceId")
    private String invoiceId;

    /*
     * The name of the invoice section.
     */
    @JsonProperty(value = "invoiceSectionDisplayName")
    private String invoiceSectionDisplayName;

    /*
     * The fully qualified ID that uniquely identifies an invoice section.
     */
    @JsonProperty(value = "invoiceSectionId")
    private String invoiceSectionId;

    /*
     * Whether or not the transaction is third party.
     */
    @JsonProperty(value = "isThirdParty")
    private Boolean isThirdParty;

    /*
     * Type of the transaction, billed or unbilled.
     */
    @JsonProperty(value = "kind")
    private TransactionKind kind;

    /*
     * The amount.
     */
    @JsonProperty(value = "marketPrice")
    private TransactionPropertiesMarketPrice marketPrice;

    /*
     * The part number of the product for which the transaction took place. The field is only applicable for Enterprise
     * Agreement invoices.
     */
    @JsonProperty(value = "partNumber")
    private String partNumber;

    /*
     * The ISO 4217 code for the currency in which the product is priced.
     */
    @JsonProperty(value = "pricingCurrency")
    private String pricingCurrency;

    /*
     * The description of the product for which the transaction took place.
     */
    @JsonProperty(value = "productDescription")
    private String productDescription;

    /*
     * The family of the product for which the transaction took place.
     */
    @JsonProperty(value = "productFamily")
    private String productFamily;

    /*
     * The ID of the product type for which the transaction took place.
     */
    @JsonProperty(value = "productTypeId")
    private String productTypeId;

    /*
     * The type of the product for which the transaction took place.
     */
    @JsonProperty(value = "productType")
    private String productType;

    /*
     * The quantity purchased in the transaction.
     */
    @JsonProperty(value = "quantity")
    private Integer quantity;

    /*
     * There reason code for the transaction.
     */
    @JsonProperty(value = "reasonCode")
    private String reasonCode;

    /*
     * The date of the purchase of the product, or the start date of the month in which usage started.
     */
    @JsonProperty(value = "servicePeriodStartDate")
    private String servicePeriodStartDate;

    /*
     * The end date of the product term, or the end date of the month in which usage ended.
     */
    @JsonProperty(value = "servicePeriodEndDate")
    private String servicePeriodEndDate;

    /*
     * The amount.
     */
    @JsonProperty(value = "subTotal")
    private TransactionPropertiesSubTotal subTotal;

    /*
     * The amount.
     */
    @JsonProperty(value = "tax")
    private TransactionPropertiesTax tax;

    /*
     * The amount.
     */
    @JsonProperty(value = "transactionAmount")
    private TransactionPropertiesTransactionAmount transactionAmount;

    /*
     * The type of transaction.
     */
    @JsonProperty(value = "transactionType")
    private String transactionType;

    /*
     * The number of units used for a given product.
     */
    @JsonProperty(value = "units")
    private Double units;

    /*
     * The unit of measure used to bill for the product. For example, compute services are billed per hour.
     */
    @JsonProperty(value = "unitOfMeasure")
    private String unitOfMeasure;

    /*
     * The description for the unit of measure for a given product.
     */
    @JsonProperty(value = "unitType")
    private String unitType;

    /*
     * Identifies the type of tax calculation used for the invoice. The field is applicable only to invoices with
     * special tax calculation logic.
     */
    @JsonProperty(value = "specialTaxationType")
    private SpecialTaxationType specialTaxationType;

    /*
     * The refund details of a transaction.
     */
    @JsonProperty(value = "refundTransactionDetails")
    private TransactionPropertiesRefundTransactionDetails refundTransactionDetails;

    /** Creates an instance of TransactionPropertiesAutoGenerated class. */
    public TransactionPropertiesAutoGenerated() {
    }

    /**
     * Get the azureCreditApplied property: The amount.
     *
     * @return the azureCreditApplied value.
     */
    public TransactionPropertiesAzureCreditApplied azureCreditApplied() {
        return this.azureCreditApplied;
    }

    /**
     * Set the azureCreditApplied property: The amount.
     *
     * @param azureCreditApplied the azureCreditApplied value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withAzureCreditApplied(
        TransactionPropertiesAzureCreditApplied azureCreditApplied) {
        this.azureCreditApplied = azureCreditApplied;
        return this;
    }

    /**
     * Get the azurePlan property: Details of the Azure plan.
     *
     * @return the azurePlan value.
     */
    public String azurePlan() {
        return this.azurePlan;
    }

    /**
     * Set the azurePlan property: Details of the Azure plan.
     *
     * @param azurePlan the azurePlan value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withAzurePlan(String azurePlan) {
        this.azurePlan = azurePlan;
        return this;
    }

    /**
     * Get the billingCurrency property: The ISO 4217 code for the currency in which this transaction is billed.
     *
     * @return the billingCurrency value.
     */
    public String billingCurrency() {
        return this.billingCurrency;
    }

    /**
     * Set the billingCurrency property: The ISO 4217 code for the currency in which this transaction is billed.
     *
     * @param billingCurrency the billingCurrency value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withBillingCurrency(String billingCurrency) {
        this.billingCurrency = billingCurrency;
        return this;
    }

    /**
     * Get the billingProfileDisplayName property: The name of the billing profile for the invoice section or customer.
     *
     * @return the billingProfileDisplayName value.
     */
    public Object billingProfileDisplayName() {
        return this.billingProfileDisplayName;
    }

    /**
     * Set the billingProfileDisplayName property: The name of the billing profile for the invoice section or customer.
     *
     * @param billingProfileDisplayName the billingProfileDisplayName value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withBillingProfileDisplayName(Object billingProfileDisplayName) {
        this.billingProfileDisplayName = billingProfileDisplayName;
        return this;
    }

    /**
     * Get the billingProfileId property: The fully qualified ID that uniquely identifies a billing profile.
     *
     * @return the billingProfileId value.
     */
    public String billingProfileId() {
        return this.billingProfileId;
    }

    /**
     * Set the billingProfileId property: The fully qualified ID that uniquely identifies a billing profile.
     *
     * @param billingProfileId the billingProfileId value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withBillingProfileId(String billingProfileId) {
        this.billingProfileId = billingProfileId;
        return this;
    }

    /**
     * Get the consumptionCommitmentDecremented property: The amount.
     *
     * @return the consumptionCommitmentDecremented value.
     */
    public TransactionPropertiesConsumptionCommitmentDecremented consumptionCommitmentDecremented() {
        return this.consumptionCommitmentDecremented;
    }

    /**
     * Set the consumptionCommitmentDecremented property: The amount.
     *
     * @param consumptionCommitmentDecremented the consumptionCommitmentDecremented value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withConsumptionCommitmentDecremented(
        TransactionPropertiesConsumptionCommitmentDecremented consumptionCommitmentDecremented) {
        this.consumptionCommitmentDecremented = consumptionCommitmentDecremented;
        return this;
    }

    /**
     * Get the customerDisplayName property: The name of the customer.
     *
     * @return the customerDisplayName value.
     */
    public String customerDisplayName() {
        return this.customerDisplayName;
    }

    /**
     * Set the customerDisplayName property: The name of the customer.
     *
     * @param customerDisplayName the customerDisplayName value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withCustomerDisplayName(String customerDisplayName) {
        this.customerDisplayName = customerDisplayName;
        return this;
    }

    /**
     * Get the customerId property: The fully qualified ID that uniquely identifies a customer.
     *
     * @return the customerId value.
     */
    public String customerId() {
        return this.customerId;
    }

    /**
     * Set the customerId property: The fully qualified ID that uniquely identifies a customer.
     *
     * @param customerId the customerId value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }

    /**
     * Get the creditType property: The credit type of the transaction. Applies only to credited transactions.
     *
     * @return the creditType value.
     */
    public CreditType creditType() {
        return this.creditType;
    }

    /**
     * Set the creditType property: The credit type of the transaction. Applies only to credited transactions.
     *
     * @param creditType the creditType value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withCreditType(CreditType creditType) {
        this.creditType = creditType;
        return this;
    }

    /**
     * Get the date property: The date of transaction.
     *
     * @return the date value.
     */
    public String date() {
        return this.date;
    }

    /**
     * Set the date property: The date of transaction.
     *
     * @param date the date value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withDate(String date) {
        this.date = date;
        return this;
    }

    /**
     * Get the discount property: The percentage discount, if any, applied to this transaction.
     *
     * @return the discount value.
     */
    public Double discount() {
        return this.discount;
    }

    /**
     * Set the discount property: The percentage discount, if any, applied to this transaction.
     *
     * @param discount the discount value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withDiscount(Double discount) {
        this.discount = discount;
        return this;
    }

    /**
     * Get the effectivePrice property: The amount.
     *
     * @return the effectivePrice value.
     */
    public TransactionPropertiesEffectivePrice effectivePrice() {
        return this.effectivePrice;
    }

    /**
     * Set the effectivePrice property: The amount.
     *
     * @param effectivePrice the effectivePrice value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withEffectivePrice(TransactionPropertiesEffectivePrice effectivePrice) {
        this.effectivePrice = effectivePrice;
        return this;
    }

    /**
     * Get the exchangeRate property: The exchange rate used to convert charged amount to billing currency, if
     * applicable.
     *
     * @return the exchangeRate value.
     */
    public Double exchangeRate() {
        return this.exchangeRate;
    }

    /**
     * Set the exchangeRate property: The exchange rate used to convert charged amount to billing currency, if
     * applicable.
     *
     * @param exchangeRate the exchangeRate value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withExchangeRate(Double exchangeRate) {
        this.exchangeRate = exchangeRate;
        return this;
    }

    /**
     * Get the invoice property: Invoice on which the transaction was billed or 'pending' if the transaction is not
     * billed.
     *
     * @return the invoice value.
     */
    public String invoice() {
        return this.invoice;
    }

    /**
     * Set the invoice property: Invoice on which the transaction was billed or 'pending' if the transaction is not
     * billed.
     *
     * @param invoice the invoice value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withInvoice(String invoice) {
        this.invoice = invoice;
        return this;
    }

    /**
     * Get the invoiceId property: The ID of the invoice on which the transaction was billed. This field is only
     * applicable for transactions which are billed.
     *
     * @return the invoiceId value.
     */
    public String invoiceId() {
        return this.invoiceId;
    }

    /**
     * Set the invoiceId property: The ID of the invoice on which the transaction was billed. This field is only
     * applicable for transactions which are billed.
     *
     * @param invoiceId the invoiceId value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withInvoiceId(String invoiceId) {
        this.invoiceId = invoiceId;
        return this;
    }

    /**
     * Get the invoiceSectionDisplayName property: The name of the invoice section.
     *
     * @return the invoiceSectionDisplayName value.
     */
    public String invoiceSectionDisplayName() {
        return this.invoiceSectionDisplayName;
    }

    /**
     * Set the invoiceSectionDisplayName property: The name of the invoice section.
     *
     * @param invoiceSectionDisplayName the invoiceSectionDisplayName value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withInvoiceSectionDisplayName(String invoiceSectionDisplayName) {
        this.invoiceSectionDisplayName = invoiceSectionDisplayName;
        return this;
    }

    /**
     * Get the invoiceSectionId property: The fully qualified ID that uniquely identifies an invoice section.
     *
     * @return the invoiceSectionId value.
     */
    public String invoiceSectionId() {
        return this.invoiceSectionId;
    }

    /**
     * Set the invoiceSectionId property: The fully qualified ID that uniquely identifies an invoice section.
     *
     * @param invoiceSectionId the invoiceSectionId value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withInvoiceSectionId(String invoiceSectionId) {
        this.invoiceSectionId = invoiceSectionId;
        return this;
    }

    /**
     * Get the isThirdParty property: Whether or not the transaction is third party.
     *
     * @return the isThirdParty value.
     */
    public Boolean isThirdParty() {
        return this.isThirdParty;
    }

    /**
     * Set the isThirdParty property: Whether or not the transaction is third party.
     *
     * @param isThirdParty the isThirdParty value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withIsThirdParty(Boolean isThirdParty) {
        this.isThirdParty = isThirdParty;
        return this;
    }

    /**
     * Get the kind property: Type of the transaction, billed or unbilled.
     *
     * @return the kind value.
     */
    public TransactionKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Type of the transaction, billed or unbilled.
     *
     * @param kind the kind value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withKind(TransactionKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the marketPrice property: The amount.
     *
     * @return the marketPrice value.
     */
    public TransactionPropertiesMarketPrice marketPrice() {
        return this.marketPrice;
    }

    /**
     * Set the marketPrice property: The amount.
     *
     * @param marketPrice the marketPrice value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withMarketPrice(TransactionPropertiesMarketPrice marketPrice) {
        this.marketPrice = marketPrice;
        return this;
    }

    /**
     * Get the partNumber property: The part number of the product for which the transaction took place. The field is
     * only applicable for Enterprise Agreement invoices.
     *
     * @return the partNumber value.
     */
    public String partNumber() {
        return this.partNumber;
    }

    /**
     * Set the partNumber property: The part number of the product for which the transaction took place. The field is
     * only applicable for Enterprise Agreement invoices.
     *
     * @param partNumber the partNumber value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withPartNumber(String partNumber) {
        this.partNumber = partNumber;
        return this;
    }

    /**
     * Get the pricingCurrency property: The ISO 4217 code for the currency in which the product is priced.
     *
     * @return the pricingCurrency value.
     */
    public String pricingCurrency() {
        return this.pricingCurrency;
    }

    /**
     * Set the pricingCurrency property: The ISO 4217 code for the currency in which the product is priced.
     *
     * @param pricingCurrency the pricingCurrency value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withPricingCurrency(String pricingCurrency) {
        this.pricingCurrency = pricingCurrency;
        return this;
    }

    /**
     * Get the productDescription property: The description of the product for which the transaction took place.
     *
     * @return the productDescription value.
     */
    public String productDescription() {
        return this.productDescription;
    }

    /**
     * Set the productDescription property: The description of the product for which the transaction took place.
     *
     * @param productDescription the productDescription value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withProductDescription(String productDescription) {
        this.productDescription = productDescription;
        return this;
    }

    /**
     * Get the productFamily property: The family of the product for which the transaction took place.
     *
     * @return the productFamily value.
     */
    public String productFamily() {
        return this.productFamily;
    }

    /**
     * Set the productFamily property: The family of the product for which the transaction took place.
     *
     * @param productFamily the productFamily value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withProductFamily(String productFamily) {
        this.productFamily = productFamily;
        return this;
    }

    /**
     * Get the productTypeId property: The ID of the product type for which the transaction took place.
     *
     * @return the productTypeId value.
     */
    public String productTypeId() {
        return this.productTypeId;
    }

    /**
     * Set the productTypeId property: The ID of the product type for which the transaction took place.
     *
     * @param productTypeId the productTypeId value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withProductTypeId(String productTypeId) {
        this.productTypeId = productTypeId;
        return this;
    }

    /**
     * Get the productType property: The type of the product for which the transaction took place.
     *
     * @return the productType value.
     */
    public String productType() {
        return this.productType;
    }

    /**
     * Set the productType property: The type of the product for which the transaction took place.
     *
     * @param productType the productType value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withProductType(String productType) {
        this.productType = productType;
        return this;
    }

    /**
     * Get the quantity property: The quantity purchased in the transaction.
     *
     * @return the quantity value.
     */
    public Integer quantity() {
        return this.quantity;
    }

    /**
     * Set the quantity property: The quantity purchased in the transaction.
     *
     * @param quantity the quantity value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get the reasonCode property: There reason code for the transaction.
     *
     * @return the reasonCode value.
     */
    public String reasonCode() {
        return this.reasonCode;
    }

    /**
     * Set the reasonCode property: There reason code for the transaction.
     *
     * @param reasonCode the reasonCode value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withReasonCode(String reasonCode) {
        this.reasonCode = reasonCode;
        return this;
    }

    /**
     * Get the servicePeriodStartDate property: The date of the purchase of the product, or the start date of the month
     * in which usage started.
     *
     * @return the servicePeriodStartDate value.
     */
    public String servicePeriodStartDate() {
        return this.servicePeriodStartDate;
    }

    /**
     * Set the servicePeriodStartDate property: The date of the purchase of the product, or the start date of the month
     * in which usage started.
     *
     * @param servicePeriodStartDate the servicePeriodStartDate value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withServicePeriodStartDate(String servicePeriodStartDate) {
        this.servicePeriodStartDate = servicePeriodStartDate;
        return this;
    }

    /**
     * Get the servicePeriodEndDate property: The end date of the product term, or the end date of the month in which
     * usage ended.
     *
     * @return the servicePeriodEndDate value.
     */
    public String servicePeriodEndDate() {
        return this.servicePeriodEndDate;
    }

    /**
     * Set the servicePeriodEndDate property: The end date of the product term, or the end date of the month in which
     * usage ended.
     *
     * @param servicePeriodEndDate the servicePeriodEndDate value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withServicePeriodEndDate(String servicePeriodEndDate) {
        this.servicePeriodEndDate = servicePeriodEndDate;
        return this;
    }

    /**
     * Get the subTotal property: The amount.
     *
     * @return the subTotal value.
     */
    public TransactionPropertiesSubTotal subTotal() {
        return this.subTotal;
    }

    /**
     * Set the subTotal property: The amount.
     *
     * @param subTotal the subTotal value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withSubTotal(TransactionPropertiesSubTotal subTotal) {
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Get the tax property: The amount.
     *
     * @return the tax value.
     */
    public TransactionPropertiesTax tax() {
        return this.tax;
    }

    /**
     * Set the tax property: The amount.
     *
     * @param tax the tax value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withTax(TransactionPropertiesTax tax) {
        this.tax = tax;
        return this;
    }

    /**
     * Get the transactionAmount property: The amount.
     *
     * @return the transactionAmount value.
     */
    public TransactionPropertiesTransactionAmount transactionAmount() {
        return this.transactionAmount;
    }

    /**
     * Set the transactionAmount property: The amount.
     *
     * @param transactionAmount the transactionAmount value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withTransactionAmount(
        TransactionPropertiesTransactionAmount transactionAmount) {
        this.transactionAmount = transactionAmount;
        return this;
    }

    /**
     * Get the transactionType property: The type of transaction.
     *
     * @return the transactionType value.
     */
    public String transactionType() {
        return this.transactionType;
    }

    /**
     * Set the transactionType property: The type of transaction.
     *
     * @param transactionType the transactionType value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withTransactionType(String transactionType) {
        this.transactionType = transactionType;
        return this;
    }

    /**
     * Get the units property: The number of units used for a given product.
     *
     * @return the units value.
     */
    public Double units() {
        return this.units;
    }

    /**
     * Set the units property: The number of units used for a given product.
     *
     * @param units the units value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withUnits(Double units) {
        this.units = units;
        return this;
    }

    /**
     * Get the unitOfMeasure property: The unit of measure used to bill for the product. For example, compute services
     * are billed per hour.
     *
     * @return the unitOfMeasure value.
     */
    public String unitOfMeasure() {
        return this.unitOfMeasure;
    }

    /**
     * Set the unitOfMeasure property: The unit of measure used to bill for the product. For example, compute services
     * are billed per hour.
     *
     * @param unitOfMeasure the unitOfMeasure value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withUnitOfMeasure(String unitOfMeasure) {
        this.unitOfMeasure = unitOfMeasure;
        return this;
    }

    /**
     * Get the unitType property: The description for the unit of measure for a given product.
     *
     * @return the unitType value.
     */
    public String unitType() {
        return this.unitType;
    }

    /**
     * Set the unitType property: The description for the unit of measure for a given product.
     *
     * @param unitType the unitType value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withUnitType(String unitType) {
        this.unitType = unitType;
        return this;
    }

    /**
     * Get the specialTaxationType property: Identifies the type of tax calculation used for the invoice. The field is
     * applicable only to invoices with special tax calculation logic.
     *
     * @return the specialTaxationType value.
     */
    public SpecialTaxationType specialTaxationType() {
        return this.specialTaxationType;
    }

    /**
     * Set the specialTaxationType property: Identifies the type of tax calculation used for the invoice. The field is
     * applicable only to invoices with special tax calculation logic.
     *
     * @param specialTaxationType the specialTaxationType value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withSpecialTaxationType(SpecialTaxationType specialTaxationType) {
        this.specialTaxationType = specialTaxationType;
        return this;
    }

    /**
     * Get the refundTransactionDetails property: The refund details of a transaction.
     *
     * @return the refundTransactionDetails value.
     */
    public TransactionPropertiesRefundTransactionDetails refundTransactionDetails() {
        return this.refundTransactionDetails;
    }

    /**
     * Set the refundTransactionDetails property: The refund details of a transaction.
     *
     * @param refundTransactionDetails the refundTransactionDetails value to set.
     * @return the TransactionPropertiesAutoGenerated object itself.
     */
    public TransactionPropertiesAutoGenerated withRefundTransactionDetails(
        TransactionPropertiesRefundTransactionDetails refundTransactionDetails) {
        this.refundTransactionDetails = refundTransactionDetails;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (azureCreditApplied() != null) {
            azureCreditApplied().validate();
        }
        if (consumptionCommitmentDecremented() != null) {
            consumptionCommitmentDecremented().validate();
        }
        if (effectivePrice() != null) {
            effectivePrice().validate();
        }
        if (marketPrice() != null) {
            marketPrice().validate();
        }
        if (subTotal() != null) {
            subTotal().validate();
        }
        if (tax() != null) {
            tax().validate();
        }
        if (transactionAmount() != null) {
            transactionAmount().validate();
        }
        if (refundTransactionDetails() != null) {
            refundTransactionDetails().validate();
        }
    }
}
