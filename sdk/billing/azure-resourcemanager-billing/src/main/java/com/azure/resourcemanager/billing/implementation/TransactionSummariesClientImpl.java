// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.billing.fluent.TransactionSummariesClient;
import com.azure.resourcemanager.billing.fluent.models.TransactionSummaryInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in TransactionSummariesClient. */
public final class TransactionSummariesClientImpl implements TransactionSummariesClient {
    /** The proxy service used to perform REST calls. */
    private final TransactionSummariesService service;

    /** The service client containing this operation class. */
    private final BillingManagementClientImpl client;

    /**
     * Initializes an instance of TransactionSummariesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TransactionSummariesClientImpl(BillingManagementClientImpl client) {
        this.service =
            RestProxy
                .create(TransactionSummariesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingManagementClientTransactionSummaries to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "BillingManagementCli")
    public interface TransactionSummariesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/transactionSummary")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TransactionSummaryInner>> getByInvoice(
            @HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("invoiceName") String invoiceName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("filter") String filter,
            @QueryParam("orderBy") String orderBy,
            @QueryParam("top") Long top,
            @QueryParam("skip") Long skip,
            @QueryParam("count") Boolean count,
            @QueryParam("search") String search,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the transaction summary for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     *     request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     *     result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     *     and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     *     resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     *     search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the transaction summary for an invoice along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TransactionSummaryInner>> getByInvoiceWithResponseAsync(
        String billingAccountName,
        String invoiceName,
        String filter,
        String orderBy,
        Long top,
        Long skip,
        Boolean count,
        String search) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (invoiceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter invoiceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByInvoice(
                            this.client.getEndpoint(),
                            billingAccountName,
                            invoiceName,
                            this.client.getApiVersion(),
                            filter,
                            orderBy,
                            top,
                            skip,
                            count,
                            search,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the transaction summary for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     *     request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     *     result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     *     and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     *     resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     *     search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the transaction summary for an invoice along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TransactionSummaryInner>> getByInvoiceWithResponseAsync(
        String billingAccountName,
        String invoiceName,
        String filter,
        String orderBy,
        Long top,
        Long skip,
        Boolean count,
        String search,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (invoiceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter invoiceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByInvoice(
                this.client.getEndpoint(),
                billingAccountName,
                invoiceName,
                this.client.getApiVersion(),
                filter,
                orderBy,
                top,
                skip,
                count,
                search,
                accept,
                context);
    }

    /**
     * Gets the transaction summary for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the transaction summary for an invoice on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TransactionSummaryInner> getByInvoiceAsync(String billingAccountName, String invoiceName) {
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return getByInvoiceWithResponseAsync(billingAccountName, invoiceName, filter, orderBy, top, skip, count, search)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the transaction summary for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     *     request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     *     result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     *     and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     *     resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     *     search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the transaction summary for an invoice along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TransactionSummaryInner> getByInvoiceWithResponse(
        String billingAccountName,
        String invoiceName,
        String filter,
        String orderBy,
        Long top,
        Long skip,
        Boolean count,
        String search,
        Context context) {
        return getByInvoiceWithResponseAsync(
                billingAccountName, invoiceName, filter, orderBy, top, skip, count, search, context)
            .block();
    }

    /**
     * Gets the transaction summary for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the transaction summary for an invoice.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TransactionSummaryInner getByInvoice(String billingAccountName, String invoiceName) {
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return getByInvoiceWithResponse(
                billingAccountName, invoiceName, filter, orderBy, top, skip, count, search, Context.NONE)
            .getValue();
    }
}
