// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.billing.models.ArmResource;
import com.azure.resourcemanager.billing.models.CreditType;
import com.azure.resourcemanager.billing.models.SpecialTaxationType;
import com.azure.resourcemanager.billing.models.TransactionKind;
import com.azure.resourcemanager.billing.models.TransactionPropertiesAzureCreditApplied;
import com.azure.resourcemanager.billing.models.TransactionPropertiesConsumptionCommitmentDecremented;
import com.azure.resourcemanager.billing.models.TransactionPropertiesEffectivePrice;
import com.azure.resourcemanager.billing.models.TransactionPropertiesMarketPrice;
import com.azure.resourcemanager.billing.models.TransactionPropertiesRefundTransactionDetails;
import com.azure.resourcemanager.billing.models.TransactionPropertiesSubTotal;
import com.azure.resourcemanager.billing.models.TransactionPropertiesTax;
import com.azure.resourcemanager.billing.models.TransactionPropertiesTransactionAmount;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A transaction. */
@Fluent
public final class TransactionInner extends ArmResource {
    /*
     * The properties of a(n) Transaction
     */
    @JsonProperty(value = "properties")
    private TransactionProperties innerProperties;

    /** Creates an instance of TransactionInner class. */
    public TransactionInner() {
    }

    /**
     * Get the innerProperties property: The properties of a(n) Transaction.
     *
     * @return the innerProperties value.
     */
    private TransactionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the azureCreditApplied property: The amount.
     *
     * @return the azureCreditApplied value.
     */
    public TransactionPropertiesAzureCreditApplied azureCreditApplied() {
        return this.innerProperties() == null ? null : this.innerProperties().azureCreditApplied();
    }

    /**
     * Set the azureCreditApplied property: The amount.
     *
     * @param azureCreditApplied the azureCreditApplied value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withAzureCreditApplied(TransactionPropertiesAzureCreditApplied azureCreditApplied) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withAzureCreditApplied(azureCreditApplied);
        return this;
    }

    /**
     * Get the azurePlan property: Details of the Azure plan.
     *
     * @return the azurePlan value.
     */
    public String azurePlan() {
        return this.innerProperties() == null ? null : this.innerProperties().azurePlan();
    }

    /**
     * Set the azurePlan property: Details of the Azure plan.
     *
     * @param azurePlan the azurePlan value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withAzurePlan(String azurePlan) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withAzurePlan(azurePlan);
        return this;
    }

    /**
     * Get the billingCurrency property: The ISO 4217 code for the currency in which this transaction is billed.
     *
     * @return the billingCurrency value.
     */
    public String billingCurrency() {
        return this.innerProperties() == null ? null : this.innerProperties().billingCurrency();
    }

    /**
     * Set the billingCurrency property: The ISO 4217 code for the currency in which this transaction is billed.
     *
     * @param billingCurrency the billingCurrency value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withBillingCurrency(String billingCurrency) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withBillingCurrency(billingCurrency);
        return this;
    }

    /**
     * Get the billingProfileDisplayName property: The name of the billing profile for the invoice section or customer.
     *
     * @return the billingProfileDisplayName value.
     */
    public Object billingProfileDisplayName() {
        return this.innerProperties() == null ? null : this.innerProperties().billingProfileDisplayName();
    }

    /**
     * Set the billingProfileDisplayName property: The name of the billing profile for the invoice section or customer.
     *
     * @param billingProfileDisplayName the billingProfileDisplayName value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withBillingProfileDisplayName(Object billingProfileDisplayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withBillingProfileDisplayName(billingProfileDisplayName);
        return this;
    }

    /**
     * Get the billingProfileId property: The fully qualified ID that uniquely identifies a billing profile.
     *
     * @return the billingProfileId value.
     */
    public String billingProfileId() {
        return this.innerProperties() == null ? null : this.innerProperties().billingProfileId();
    }

    /**
     * Set the billingProfileId property: The fully qualified ID that uniquely identifies a billing profile.
     *
     * @param billingProfileId the billingProfileId value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withBillingProfileId(String billingProfileId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withBillingProfileId(billingProfileId);
        return this;
    }

    /**
     * Get the consumptionCommitmentDecremented property: The amount.
     *
     * @return the consumptionCommitmentDecremented value.
     */
    public TransactionPropertiesConsumptionCommitmentDecremented consumptionCommitmentDecremented() {
        return this.innerProperties() == null ? null : this.innerProperties().consumptionCommitmentDecremented();
    }

    /**
     * Set the consumptionCommitmentDecremented property: The amount.
     *
     * @param consumptionCommitmentDecremented the consumptionCommitmentDecremented value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withConsumptionCommitmentDecremented(
        TransactionPropertiesConsumptionCommitmentDecremented consumptionCommitmentDecremented) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withConsumptionCommitmentDecremented(consumptionCommitmentDecremented);
        return this;
    }

    /**
     * Get the customerDisplayName property: The name of the customer.
     *
     * @return the customerDisplayName value.
     */
    public String customerDisplayName() {
        return this.innerProperties() == null ? null : this.innerProperties().customerDisplayName();
    }

    /**
     * Set the customerDisplayName property: The name of the customer.
     *
     * @param customerDisplayName the customerDisplayName value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withCustomerDisplayName(String customerDisplayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withCustomerDisplayName(customerDisplayName);
        return this;
    }

    /**
     * Get the customerId property: The fully qualified ID that uniquely identifies a customer.
     *
     * @return the customerId value.
     */
    public String customerId() {
        return this.innerProperties() == null ? null : this.innerProperties().customerId();
    }

    /**
     * Set the customerId property: The fully qualified ID that uniquely identifies a customer.
     *
     * @param customerId the customerId value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withCustomerId(String customerId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withCustomerId(customerId);
        return this;
    }

    /**
     * Get the creditType property: The credit type of the transaction. Applies only to credited transactions.
     *
     * @return the creditType value.
     */
    public CreditType creditType() {
        return this.innerProperties() == null ? null : this.innerProperties().creditType();
    }

    /**
     * Set the creditType property: The credit type of the transaction. Applies only to credited transactions.
     *
     * @param creditType the creditType value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withCreditType(CreditType creditType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withCreditType(creditType);
        return this;
    }

    /**
     * Get the date property: The date of transaction.
     *
     * @return the date value.
     */
    public String date() {
        return this.innerProperties() == null ? null : this.innerProperties().date();
    }

    /**
     * Set the date property: The date of transaction.
     *
     * @param date the date value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withDate(String date) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withDate(date);
        return this;
    }

    /**
     * Get the discount property: The percentage discount, if any, applied to this transaction.
     *
     * @return the discount value.
     */
    public Double discount() {
        return this.innerProperties() == null ? null : this.innerProperties().discount();
    }

    /**
     * Set the discount property: The percentage discount, if any, applied to this transaction.
     *
     * @param discount the discount value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withDiscount(Double discount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withDiscount(discount);
        return this;
    }

    /**
     * Get the effectivePrice property: The amount.
     *
     * @return the effectivePrice value.
     */
    public TransactionPropertiesEffectivePrice effectivePrice() {
        return this.innerProperties() == null ? null : this.innerProperties().effectivePrice();
    }

    /**
     * Set the effectivePrice property: The amount.
     *
     * @param effectivePrice the effectivePrice value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withEffectivePrice(TransactionPropertiesEffectivePrice effectivePrice) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withEffectivePrice(effectivePrice);
        return this;
    }

    /**
     * Get the exchangeRate property: The exchange rate used to convert charged amount to billing currency, if
     * applicable.
     *
     * @return the exchangeRate value.
     */
    public Double exchangeRate() {
        return this.innerProperties() == null ? null : this.innerProperties().exchangeRate();
    }

    /**
     * Set the exchangeRate property: The exchange rate used to convert charged amount to billing currency, if
     * applicable.
     *
     * @param exchangeRate the exchangeRate value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withExchangeRate(Double exchangeRate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withExchangeRate(exchangeRate);
        return this;
    }

    /**
     * Get the invoice property: Invoice on which the transaction was billed or 'pending' if the transaction is not
     * billed.
     *
     * @return the invoice value.
     */
    public String invoice() {
        return this.innerProperties() == null ? null : this.innerProperties().invoice();
    }

    /**
     * Set the invoice property: Invoice on which the transaction was billed or 'pending' if the transaction is not
     * billed.
     *
     * @param invoice the invoice value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withInvoice(String invoice) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withInvoice(invoice);
        return this;
    }

    /**
     * Get the invoiceId property: The ID of the invoice on which the transaction was billed. This field is only
     * applicable for transactions which are billed.
     *
     * @return the invoiceId value.
     */
    public String invoiceId() {
        return this.innerProperties() == null ? null : this.innerProperties().invoiceId();
    }

    /**
     * Set the invoiceId property: The ID of the invoice on which the transaction was billed. This field is only
     * applicable for transactions which are billed.
     *
     * @param invoiceId the invoiceId value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withInvoiceId(String invoiceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withInvoiceId(invoiceId);
        return this;
    }

    /**
     * Get the invoiceSectionDisplayName property: The name of the invoice section.
     *
     * @return the invoiceSectionDisplayName value.
     */
    public String invoiceSectionDisplayName() {
        return this.innerProperties() == null ? null : this.innerProperties().invoiceSectionDisplayName();
    }

    /**
     * Set the invoiceSectionDisplayName property: The name of the invoice section.
     *
     * @param invoiceSectionDisplayName the invoiceSectionDisplayName value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withInvoiceSectionDisplayName(String invoiceSectionDisplayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withInvoiceSectionDisplayName(invoiceSectionDisplayName);
        return this;
    }

    /**
     * Get the invoiceSectionId property: The fully qualified ID that uniquely identifies an invoice section.
     *
     * @return the invoiceSectionId value.
     */
    public String invoiceSectionId() {
        return this.innerProperties() == null ? null : this.innerProperties().invoiceSectionId();
    }

    /**
     * Set the invoiceSectionId property: The fully qualified ID that uniquely identifies an invoice section.
     *
     * @param invoiceSectionId the invoiceSectionId value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withInvoiceSectionId(String invoiceSectionId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withInvoiceSectionId(invoiceSectionId);
        return this;
    }

    /**
     * Get the isThirdParty property: Whether or not the transaction is third party.
     *
     * @return the isThirdParty value.
     */
    public Boolean isThirdParty() {
        return this.innerProperties() == null ? null : this.innerProperties().isThirdParty();
    }

    /**
     * Set the isThirdParty property: Whether or not the transaction is third party.
     *
     * @param isThirdParty the isThirdParty value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withIsThirdParty(Boolean isThirdParty) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withIsThirdParty(isThirdParty);
        return this;
    }

    /**
     * Get the kind property: Type of the transaction, billed or unbilled.
     *
     * @return the kind value.
     */
    public TransactionKind kind() {
        return this.innerProperties() == null ? null : this.innerProperties().kind();
    }

    /**
     * Set the kind property: Type of the transaction, billed or unbilled.
     *
     * @param kind the kind value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withKind(TransactionKind kind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withKind(kind);
        return this;
    }

    /**
     * Get the marketPrice property: The amount.
     *
     * @return the marketPrice value.
     */
    public TransactionPropertiesMarketPrice marketPrice() {
        return this.innerProperties() == null ? null : this.innerProperties().marketPrice();
    }

    /**
     * Set the marketPrice property: The amount.
     *
     * @param marketPrice the marketPrice value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withMarketPrice(TransactionPropertiesMarketPrice marketPrice) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withMarketPrice(marketPrice);
        return this;
    }

    /**
     * Get the partNumber property: The part number of the product for which the transaction took place. The field is
     * only applicable for Enterprise Agreement invoices.
     *
     * @return the partNumber value.
     */
    public String partNumber() {
        return this.innerProperties() == null ? null : this.innerProperties().partNumber();
    }

    /**
     * Set the partNumber property: The part number of the product for which the transaction took place. The field is
     * only applicable for Enterprise Agreement invoices.
     *
     * @param partNumber the partNumber value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withPartNumber(String partNumber) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withPartNumber(partNumber);
        return this;
    }

    /**
     * Get the pricingCurrency property: The ISO 4217 code for the currency in which the product is priced.
     *
     * @return the pricingCurrency value.
     */
    public String pricingCurrency() {
        return this.innerProperties() == null ? null : this.innerProperties().pricingCurrency();
    }

    /**
     * Set the pricingCurrency property: The ISO 4217 code for the currency in which the product is priced.
     *
     * @param pricingCurrency the pricingCurrency value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withPricingCurrency(String pricingCurrency) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withPricingCurrency(pricingCurrency);
        return this;
    }

    /**
     * Get the productDescription property: The description of the product for which the transaction took place.
     *
     * @return the productDescription value.
     */
    public String productDescription() {
        return this.innerProperties() == null ? null : this.innerProperties().productDescription();
    }

    /**
     * Set the productDescription property: The description of the product for which the transaction took place.
     *
     * @param productDescription the productDescription value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withProductDescription(String productDescription) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withProductDescription(productDescription);
        return this;
    }

    /**
     * Get the productFamily property: The family of the product for which the transaction took place.
     *
     * @return the productFamily value.
     */
    public String productFamily() {
        return this.innerProperties() == null ? null : this.innerProperties().productFamily();
    }

    /**
     * Set the productFamily property: The family of the product for which the transaction took place.
     *
     * @param productFamily the productFamily value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withProductFamily(String productFamily) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withProductFamily(productFamily);
        return this;
    }

    /**
     * Get the productTypeId property: The ID of the product type for which the transaction took place.
     *
     * @return the productTypeId value.
     */
    public String productTypeId() {
        return this.innerProperties() == null ? null : this.innerProperties().productTypeId();
    }

    /**
     * Set the productTypeId property: The ID of the product type for which the transaction took place.
     *
     * @param productTypeId the productTypeId value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withProductTypeId(String productTypeId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withProductTypeId(productTypeId);
        return this;
    }

    /**
     * Get the productType property: The type of the product for which the transaction took place.
     *
     * @return the productType value.
     */
    public String productType() {
        return this.innerProperties() == null ? null : this.innerProperties().productType();
    }

    /**
     * Set the productType property: The type of the product for which the transaction took place.
     *
     * @param productType the productType value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withProductType(String productType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withProductType(productType);
        return this;
    }

    /**
     * Get the quantity property: The quantity purchased in the transaction.
     *
     * @return the quantity value.
     */
    public Integer quantity() {
        return this.innerProperties() == null ? null : this.innerProperties().quantity();
    }

    /**
     * Set the quantity property: The quantity purchased in the transaction.
     *
     * @param quantity the quantity value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withQuantity(Integer quantity) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withQuantity(quantity);
        return this;
    }

    /**
     * Get the reasonCode property: There reason code for the transaction.
     *
     * @return the reasonCode value.
     */
    public String reasonCode() {
        return this.innerProperties() == null ? null : this.innerProperties().reasonCode();
    }

    /**
     * Set the reasonCode property: There reason code for the transaction.
     *
     * @param reasonCode the reasonCode value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withReasonCode(String reasonCode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withReasonCode(reasonCode);
        return this;
    }

    /**
     * Get the servicePeriodStartDate property: The date of the purchase of the product, or the start date of the month
     * in which usage started.
     *
     * @return the servicePeriodStartDate value.
     */
    public String servicePeriodStartDate() {
        return this.innerProperties() == null ? null : this.innerProperties().servicePeriodStartDate();
    }

    /**
     * Set the servicePeriodStartDate property: The date of the purchase of the product, or the start date of the month
     * in which usage started.
     *
     * @param servicePeriodStartDate the servicePeriodStartDate value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withServicePeriodStartDate(String servicePeriodStartDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withServicePeriodStartDate(servicePeriodStartDate);
        return this;
    }

    /**
     * Get the servicePeriodEndDate property: The end date of the product term, or the end date of the month in which
     * usage ended.
     *
     * @return the servicePeriodEndDate value.
     */
    public String servicePeriodEndDate() {
        return this.innerProperties() == null ? null : this.innerProperties().servicePeriodEndDate();
    }

    /**
     * Set the servicePeriodEndDate property: The end date of the product term, or the end date of the month in which
     * usage ended.
     *
     * @param servicePeriodEndDate the servicePeriodEndDate value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withServicePeriodEndDate(String servicePeriodEndDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withServicePeriodEndDate(servicePeriodEndDate);
        return this;
    }

    /**
     * Get the subTotal property: The amount.
     *
     * @return the subTotal value.
     */
    public TransactionPropertiesSubTotal subTotal() {
        return this.innerProperties() == null ? null : this.innerProperties().subTotal();
    }

    /**
     * Set the subTotal property: The amount.
     *
     * @param subTotal the subTotal value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withSubTotal(TransactionPropertiesSubTotal subTotal) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withSubTotal(subTotal);
        return this;
    }

    /**
     * Get the tax property: The amount.
     *
     * @return the tax value.
     */
    public TransactionPropertiesTax tax() {
        return this.innerProperties() == null ? null : this.innerProperties().tax();
    }

    /**
     * Set the tax property: The amount.
     *
     * @param tax the tax value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withTax(TransactionPropertiesTax tax) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withTax(tax);
        return this;
    }

    /**
     * Get the transactionAmount property: The amount.
     *
     * @return the transactionAmount value.
     */
    public TransactionPropertiesTransactionAmount transactionAmount() {
        return this.innerProperties() == null ? null : this.innerProperties().transactionAmount();
    }

    /**
     * Set the transactionAmount property: The amount.
     *
     * @param transactionAmount the transactionAmount value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withTransactionAmount(TransactionPropertiesTransactionAmount transactionAmount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withTransactionAmount(transactionAmount);
        return this;
    }

    /**
     * Get the transactionType property: The type of transaction.
     *
     * @return the transactionType value.
     */
    public String transactionType() {
        return this.innerProperties() == null ? null : this.innerProperties().transactionType();
    }

    /**
     * Set the transactionType property: The type of transaction.
     *
     * @param transactionType the transactionType value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withTransactionType(String transactionType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withTransactionType(transactionType);
        return this;
    }

    /**
     * Get the units property: The number of units used for a given product.
     *
     * @return the units value.
     */
    public Double units() {
        return this.innerProperties() == null ? null : this.innerProperties().units();
    }

    /**
     * Set the units property: The number of units used for a given product.
     *
     * @param units the units value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withUnits(Double units) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withUnits(units);
        return this;
    }

    /**
     * Get the unitOfMeasure property: The unit of measure used to bill for the product. For example, compute services
     * are billed per hour.
     *
     * @return the unitOfMeasure value.
     */
    public String unitOfMeasure() {
        return this.innerProperties() == null ? null : this.innerProperties().unitOfMeasure();
    }

    /**
     * Set the unitOfMeasure property: The unit of measure used to bill for the product. For example, compute services
     * are billed per hour.
     *
     * @param unitOfMeasure the unitOfMeasure value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withUnitOfMeasure(String unitOfMeasure) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withUnitOfMeasure(unitOfMeasure);
        return this;
    }

    /**
     * Get the unitType property: The description for the unit of measure for a given product.
     *
     * @return the unitType value.
     */
    public String unitType() {
        return this.innerProperties() == null ? null : this.innerProperties().unitType();
    }

    /**
     * Set the unitType property: The description for the unit of measure for a given product.
     *
     * @param unitType the unitType value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withUnitType(String unitType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withUnitType(unitType);
        return this;
    }

    /**
     * Get the specialTaxationType property: Identifies the type of tax calculation used for the invoice. The field is
     * applicable only to invoices with special tax calculation logic.
     *
     * @return the specialTaxationType value.
     */
    public SpecialTaxationType specialTaxationType() {
        return this.innerProperties() == null ? null : this.innerProperties().specialTaxationType();
    }

    /**
     * Set the specialTaxationType property: Identifies the type of tax calculation used for the invoice. The field is
     * applicable only to invoices with special tax calculation logic.
     *
     * @param specialTaxationType the specialTaxationType value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withSpecialTaxationType(SpecialTaxationType specialTaxationType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withSpecialTaxationType(specialTaxationType);
        return this;
    }

    /**
     * Get the refundTransactionDetails property: The refund details of a transaction.
     *
     * @return the refundTransactionDetails value.
     */
    public TransactionPropertiesRefundTransactionDetails refundTransactionDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().refundTransactionDetails();
    }

    /**
     * Set the refundTransactionDetails property: The refund details of a transaction.
     *
     * @param refundTransactionDetails the refundTransactionDetails value to set.
     * @return the TransactionInner object itself.
     */
    public TransactionInner withRefundTransactionDetails(
        TransactionPropertiesRefundTransactionDetails refundTransactionDetails) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionProperties();
        }
        this.innerProperties().withRefundTransactionDetails(refundTransactionDetails);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
