// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** It is an organizational hierarchy within a billing account to administer and manage azure costs. */
@Fluent
public class EnrollmentAccountPropertiesAutoGenerated2 {
    /*
     * The cost center associated with the enrollment account.
     */
    @JsonProperty(value = "costCenter")
    private String costCenter;

    /*
     * The name of the enrollment account.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * The name of the department under which the enrollment account exists.
     */
    @JsonProperty(value = "departmentDisplayName", access = JsonProperty.Access.WRITE_ONLY)
    private String departmentDisplayName;

    /*
     * The ID that uniquely identifies the department.
     */
    @JsonProperty(value = "departmentId", access = JsonProperty.Access.WRITE_ONLY)
    private String departmentId;

    /*
     * Boolean flag which enables subscribers to run development and testing workloads on Azure at special Dev/Test
     * rates.
     */
    @JsonProperty(value = "isDevTestEnabled")
    private Boolean isDevTestEnabled;

    /*
     * The owner of the enrollment account.
     */
    @JsonProperty(value = "accountOwner", access = JsonProperty.Access.WRITE_ONLY)
    private String accountOwner;

    /*
     * The authorization type of the enrollment account.
     */
    @JsonProperty(value = "authType", access = JsonProperty.Access.WRITE_ONLY)
    private String authType;

    /*
     * The status of the enrollment account.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private String status;

    /*
     * The date from which the enrollment account became valid and functional.
     */
    @JsonProperty(value = "startDate", access = JsonProperty.Access.WRITE_ONLY)
    private String startDate;

    /*
     * The date of expiration of the enrollment account.
     */
    @JsonProperty(value = "endDate", access = JsonProperty.Access.WRITE_ONLY)
    private String endDate;

    /** Creates an instance of EnrollmentAccountPropertiesAutoGenerated2 class. */
    public EnrollmentAccountPropertiesAutoGenerated2() {
    }

    /**
     * Get the costCenter property: The cost center associated with the enrollment account.
     *
     * @return the costCenter value.
     */
    public String costCenter() {
        return this.costCenter;
    }

    /**
     * Set the costCenter property: The cost center associated with the enrollment account.
     *
     * @param costCenter the costCenter value to set.
     * @return the EnrollmentAccountPropertiesAutoGenerated2 object itself.
     */
    public EnrollmentAccountPropertiesAutoGenerated2 withCostCenter(String costCenter) {
        this.costCenter = costCenter;
        return this;
    }

    /**
     * Get the displayName property: The name of the enrollment account.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The name of the enrollment account.
     *
     * @param displayName the displayName value to set.
     * @return the EnrollmentAccountPropertiesAutoGenerated2 object itself.
     */
    public EnrollmentAccountPropertiesAutoGenerated2 withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the departmentDisplayName property: The name of the department under which the enrollment account exists.
     *
     * @return the departmentDisplayName value.
     */
    public String departmentDisplayName() {
        return this.departmentDisplayName;
    }

    /**
     * Get the departmentId property: The ID that uniquely identifies the department.
     *
     * @return the departmentId value.
     */
    public String departmentId() {
        return this.departmentId;
    }

    /**
     * Get the isDevTestEnabled property: Boolean flag which enables subscribers to run development and testing
     * workloads on Azure at special Dev/Test rates.
     *
     * @return the isDevTestEnabled value.
     */
    public Boolean isDevTestEnabled() {
        return this.isDevTestEnabled;
    }

    /**
     * Set the isDevTestEnabled property: Boolean flag which enables subscribers to run development and testing
     * workloads on Azure at special Dev/Test rates.
     *
     * @param isDevTestEnabled the isDevTestEnabled value to set.
     * @return the EnrollmentAccountPropertiesAutoGenerated2 object itself.
     */
    public EnrollmentAccountPropertiesAutoGenerated2 withIsDevTestEnabled(Boolean isDevTestEnabled) {
        this.isDevTestEnabled = isDevTestEnabled;
        return this;
    }

    /**
     * Get the accountOwner property: The owner of the enrollment account.
     *
     * @return the accountOwner value.
     */
    public String accountOwner() {
        return this.accountOwner;
    }

    /**
     * Get the authType property: The authorization type of the enrollment account.
     *
     * @return the authType value.
     */
    public String authType() {
        return this.authType;
    }

    /**
     * Get the status property: The status of the enrollment account.
     *
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the startDate property: The date from which the enrollment account became valid and functional.
     *
     * @return the startDate value.
     */
    public String startDate() {
        return this.startDate;
    }

    /**
     * Get the endDate property: The date of expiration of the enrollment account.
     *
     * @return the endDate value.
     */
    public String endDate() {
        return this.endDate;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
