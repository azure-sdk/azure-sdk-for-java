// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.CatalogResourceValidationStatus;
import com.azure.resourcemanager.devcenter.models.CustomizationTaskInput;
import java.io.IOException;
import java.util.Map;

/**
 * Properties of a Task.
 */
@Immutable
public final class CustomizationTaskProperties implements JsonSerializable<CustomizationTaskProperties> {
    /*
     * Inputs to the task.
     */
    private Map<String, CustomizationTaskInput> inputs;

    /*
     * The default timeout for the task.
     */
    private Integer timeout;

    /*
     * Validation status for the Task.
     */
    private CatalogResourceValidationStatus validationStatus;

    /**
     * Creates an instance of CustomizationTaskProperties class.
     */
    public CustomizationTaskProperties() {
    }

    /**
     * Get the inputs property: Inputs to the task.
     * 
     * @return the inputs value.
     */
    public Map<String, CustomizationTaskInput> inputs() {
        return this.inputs;
    }

    /**
     * Get the timeout property: The default timeout for the task.
     * 
     * @return the timeout value.
     */
    public Integer timeout() {
        return this.timeout;
    }

    /**
     * Get the validationStatus property: Validation status for the Task.
     * 
     * @return the validationStatus value.
     */
    public CatalogResourceValidationStatus validationStatus() {
        return this.validationStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inputs() != null) {
            inputs().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomizationTaskProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomizationTaskProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomizationTaskProperties.
     */
    public static CustomizationTaskProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomizationTaskProperties deserializedCustomizationTaskProperties = new CustomizationTaskProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputs".equals(fieldName)) {
                    Map<String, CustomizationTaskInput> inputs
                        = reader.readMap(reader1 -> CustomizationTaskInput.fromJson(reader1));
                    deserializedCustomizationTaskProperties.inputs = inputs;
                } else if ("timeout".equals(fieldName)) {
                    deserializedCustomizationTaskProperties.timeout = reader.getNullable(JsonReader::getInt);
                } else if ("validationStatus".equals(fieldName)) {
                    deserializedCustomizationTaskProperties.validationStatus
                        = CatalogResourceValidationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomizationTaskProperties;
        });
    }
}
