// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.DevboxDisksEncryptionEnableStatus;
import java.io.IOException;

/**
 * Properties of the devcenter encryption set. These properties can be updated after the resource has been created.
 */
@Fluent
public class DevCenterEncryptionSetUpdateProperties
    implements JsonSerializable<DevCenterEncryptionSetUpdateProperties> {
    /*
     * Devbox disk encryption enable or disable status. Indicates if Devbox disks encryption using DevCenter CMK is
     * enabled or not.
     */
    private DevboxDisksEncryptionEnableStatus devboxDisksEncryptionEnableStatus;

    /*
     * Key encryption key Url, versioned or non-versioned. Ex:
     * https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or
     * https://contosovault.vault.azure.net/keys/contosokek.
     */
    private String keyEncryptionKeyUrl;

    /**
     * Creates an instance of DevCenterEncryptionSetUpdateProperties class.
     */
    public DevCenterEncryptionSetUpdateProperties() {
    }

    /**
     * Get the devboxDisksEncryptionEnableStatus property: Devbox disk encryption enable or disable status. Indicates if
     * Devbox disks encryption using DevCenter CMK is enabled or not.
     * 
     * @return the devboxDisksEncryptionEnableStatus value.
     */
    public DevboxDisksEncryptionEnableStatus devboxDisksEncryptionEnableStatus() {
        return this.devboxDisksEncryptionEnableStatus;
    }

    /**
     * Set the devboxDisksEncryptionEnableStatus property: Devbox disk encryption enable or disable status. Indicates if
     * Devbox disks encryption using DevCenter CMK is enabled or not.
     * 
     * @param devboxDisksEncryptionEnableStatus the devboxDisksEncryptionEnableStatus value to set.
     * @return the DevCenterEncryptionSetUpdateProperties object itself.
     */
    public DevCenterEncryptionSetUpdateProperties
        withDevboxDisksEncryptionEnableStatus(DevboxDisksEncryptionEnableStatus devboxDisksEncryptionEnableStatus) {
        this.devboxDisksEncryptionEnableStatus = devboxDisksEncryptionEnableStatus;
        return this;
    }

    /**
     * Get the keyEncryptionKeyUrl property: Key encryption key Url, versioned or non-versioned. Ex:
     * https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or
     * https://contosovault.vault.azure.net/keys/contosokek.
     * 
     * @return the keyEncryptionKeyUrl value.
     */
    public String keyEncryptionKeyUrl() {
        return this.keyEncryptionKeyUrl;
    }

    /**
     * Set the keyEncryptionKeyUrl property: Key encryption key Url, versioned or non-versioned. Ex:
     * https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or
     * https://contosovault.vault.azure.net/keys/contosokek.
     * 
     * @param keyEncryptionKeyUrl the keyEncryptionKeyUrl value to set.
     * @return the DevCenterEncryptionSetUpdateProperties object itself.
     */
    public DevCenterEncryptionSetUpdateProperties withKeyEncryptionKeyUrl(String keyEncryptionKeyUrl) {
        this.keyEncryptionKeyUrl = keyEncryptionKeyUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("devboxDisksEncryptionEnableStatus",
            this.devboxDisksEncryptionEnableStatus == null ? null : this.devboxDisksEncryptionEnableStatus.toString());
        jsonWriter.writeStringField("keyEncryptionKeyUrl", this.keyEncryptionKeyUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DevCenterEncryptionSetUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DevCenterEncryptionSetUpdateProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DevCenterEncryptionSetUpdateProperties.
     */
    public static DevCenterEncryptionSetUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DevCenterEncryptionSetUpdateProperties deserializedDevCenterEncryptionSetUpdateProperties
                = new DevCenterEncryptionSetUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("devboxDisksEncryptionEnableStatus".equals(fieldName)) {
                    deserializedDevCenterEncryptionSetUpdateProperties.devboxDisksEncryptionEnableStatus
                        = DevboxDisksEncryptionEnableStatus.fromString(reader.getString());
                } else if ("keyEncryptionKeyUrl".equals(fieldName)) {
                    deserializedDevCenterEncryptionSetUpdateProperties.keyEncryptionKeyUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDevCenterEncryptionSetUpdateProperties;
        });
    }
}
