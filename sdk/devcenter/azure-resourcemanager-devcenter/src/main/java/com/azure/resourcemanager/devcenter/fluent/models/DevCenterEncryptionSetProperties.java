// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.DevboxDisksEncryptionEnableStatus;
import com.azure.resourcemanager.devcenter.models.ProvisioningState;
import java.io.IOException;

/**
 * Properties of the devcenter encryption set.
 */
@Fluent
public final class DevCenterEncryptionSetProperties extends DevCenterEncryptionSetUpdateProperties {
    /*
     * The provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DevCenterEncryptionSetProperties class.
     */
    public DevCenterEncryptionSetProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DevCenterEncryptionSetProperties
        withDevboxDisksEncryptionEnableStatus(DevboxDisksEncryptionEnableStatus devboxDisksEncryptionEnableStatus) {
        super.withDevboxDisksEncryptionEnableStatus(devboxDisksEncryptionEnableStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DevCenterEncryptionSetProperties withKeyEncryptionKeyUrl(String keyEncryptionKeyUrl) {
        super.withKeyEncryptionKeyUrl(keyEncryptionKeyUrl);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("devboxDisksEncryptionEnableStatus",
            devboxDisksEncryptionEnableStatus() == null ? null : devboxDisksEncryptionEnableStatus().toString());
        jsonWriter.writeStringField("keyEncryptionKeyUrl", keyEncryptionKeyUrl());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DevCenterEncryptionSetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DevCenterEncryptionSetProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DevCenterEncryptionSetProperties.
     */
    public static DevCenterEncryptionSetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DevCenterEncryptionSetProperties deserializedDevCenterEncryptionSetProperties
                = new DevCenterEncryptionSetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("devboxDisksEncryptionEnableStatus".equals(fieldName)) {
                    deserializedDevCenterEncryptionSetProperties.withDevboxDisksEncryptionEnableStatus(
                        DevboxDisksEncryptionEnableStatus.fromString(reader.getString()));
                } else if ("keyEncryptionKeyUrl".equals(fieldName)) {
                    deserializedDevCenterEncryptionSetProperties.withKeyEncryptionKeyUrl(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDevCenterEncryptionSetProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDevCenterEncryptionSetProperties;
        });
    }
}
