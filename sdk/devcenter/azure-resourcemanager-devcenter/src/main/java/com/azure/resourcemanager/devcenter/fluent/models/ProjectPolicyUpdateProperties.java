// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.ResourcePolicy;
import java.io.IOException;
import java.util.List;

/**
 * Properties of an project policy. These properties can be updated after the resource has been created.
 */
@Fluent
public class ProjectPolicyUpdateProperties implements JsonSerializable<ProjectPolicyUpdateProperties> {
    /*
     * Resource policies that are a part of this project policy.
     */
    private List<ResourcePolicy> resourcePolicies;

    /*
     * Resources that have access to the shared resources that are a part of this project policy.
     */
    private List<String> scopes;

    /**
     * Creates an instance of ProjectPolicyUpdateProperties class.
     */
    public ProjectPolicyUpdateProperties() {
    }

    /**
     * Get the resourcePolicies property: Resource policies that are a part of this project policy.
     * 
     * @return the resourcePolicies value.
     */
    public List<ResourcePolicy> resourcePolicies() {
        return this.resourcePolicies;
    }

    /**
     * Set the resourcePolicies property: Resource policies that are a part of this project policy.
     * 
     * @param resourcePolicies the resourcePolicies value to set.
     * @return the ProjectPolicyUpdateProperties object itself.
     */
    public ProjectPolicyUpdateProperties withResourcePolicies(List<ResourcePolicy> resourcePolicies) {
        this.resourcePolicies = resourcePolicies;
        return this;
    }

    /**
     * Get the scopes property: Resources that have access to the shared resources that are a part of this project
     * policy.
     * 
     * @return the scopes value.
     */
    public List<String> scopes() {
        return this.scopes;
    }

    /**
     * Set the scopes property: Resources that have access to the shared resources that are a part of this project
     * policy.
     * 
     * @param scopes the scopes value to set.
     * @return the ProjectPolicyUpdateProperties object itself.
     */
    public ProjectPolicyUpdateProperties withScopes(List<String> scopes) {
        this.scopes = scopes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourcePolicies() != null) {
            resourcePolicies().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourcePolicies", this.resourcePolicies,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("scopes", this.scopes, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectPolicyUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectPolicyUpdateProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectPolicyUpdateProperties.
     */
    public static ProjectPolicyUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectPolicyUpdateProperties deserializedProjectPolicyUpdateProperties
                = new ProjectPolicyUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourcePolicies".equals(fieldName)) {
                    List<ResourcePolicy> resourcePolicies
                        = reader.readArray(reader1 -> ResourcePolicy.fromJson(reader1));
                    deserializedProjectPolicyUpdateProperties.resourcePolicies = resourcePolicies;
                } else if ("scopes".equals(fieldName)) {
                    List<String> scopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedProjectPolicyUpdateProperties.scopes = scopes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectPolicyUpdateProperties;
        });
    }
}
