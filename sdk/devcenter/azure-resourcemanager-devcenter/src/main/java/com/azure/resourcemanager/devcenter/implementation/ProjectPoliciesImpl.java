// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.devcenter.fluent.ProjectPoliciesClient;
import com.azure.resourcemanager.devcenter.fluent.models.ProjectPolicyInner;
import com.azure.resourcemanager.devcenter.models.ProjectPolicies;
import com.azure.resourcemanager.devcenter.models.ProjectPolicy;

public final class ProjectPoliciesImpl implements ProjectPolicies {
    private static final ClientLogger LOGGER = new ClientLogger(ProjectPoliciesImpl.class);

    private final ProjectPoliciesClient innerClient;

    private final com.azure.resourcemanager.devcenter.DevCenterManager serviceManager;

    public ProjectPoliciesImpl(ProjectPoliciesClient innerClient,
        com.azure.resourcemanager.devcenter.DevCenterManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ProjectPolicy> listByDevCenter(String resourceGroupName, String devCenterName) {
        PagedIterable<ProjectPolicyInner> inner
            = this.serviceClient().listByDevCenter(resourceGroupName, devCenterName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProjectPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<ProjectPolicy> listByDevCenter(String resourceGroupName, String devCenterName, Integer top,
        Context context) {
        PagedIterable<ProjectPolicyInner> inner
            = this.serviceClient().listByDevCenter(resourceGroupName, devCenterName, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProjectPolicyImpl(inner1, this.manager()));
    }

    public Response<ProjectPolicy> getWithResponse(String resourceGroupName, String devCenterName,
        String projectPolicyName, Context context) {
        Response<ProjectPolicyInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, devCenterName, projectPolicyName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ProjectPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProjectPolicy get(String resourceGroupName, String devCenterName, String projectPolicyName) {
        ProjectPolicyInner inner = this.serviceClient().get(resourceGroupName, devCenterName, projectPolicyName);
        if (inner != null) {
            return new ProjectPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String devCenterName, String projectPolicyName) {
        this.serviceClient().delete(resourceGroupName, devCenterName, projectPolicyName);
    }

    public void delete(String resourceGroupName, String devCenterName, String projectPolicyName, Context context) {
        this.serviceClient().delete(resourceGroupName, devCenterName, projectPolicyName, context);
    }

    public ProjectPolicy getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String devCenterName = ResourceManagerUtils.getValueFromIdByName(id, "devcenters");
        if (devCenterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'devcenters'.", id)));
        }
        String projectPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "projectPolicies");
        if (projectPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'projectPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, devCenterName, projectPolicyName, Context.NONE).getValue();
    }

    public Response<ProjectPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String devCenterName = ResourceManagerUtils.getValueFromIdByName(id, "devcenters");
        if (devCenterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'devcenters'.", id)));
        }
        String projectPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "projectPolicies");
        if (projectPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'projectPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, devCenterName, projectPolicyName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String devCenterName = ResourceManagerUtils.getValueFromIdByName(id, "devcenters");
        if (devCenterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'devcenters'.", id)));
        }
        String projectPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "projectPolicies");
        if (projectPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'projectPolicies'.", id)));
        }
        this.delete(resourceGroupName, devCenterName, projectPolicyName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String devCenterName = ResourceManagerUtils.getValueFromIdByName(id, "devcenters");
        if (devCenterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'devcenters'.", id)));
        }
        String projectPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "projectPolicies");
        if (projectPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'projectPolicies'.", id)));
        }
        this.delete(resourceGroupName, devCenterName, projectPolicyName, context);
    }

    private ProjectPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.devcenter.DevCenterManager manager() {
        return this.serviceManager;
    }

    public ProjectPolicyImpl define(String name) {
        return new ProjectPolicyImpl(name, this.manager());
    }
}
