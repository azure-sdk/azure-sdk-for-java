// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.ImageCreationErrorDetails;
import com.azure.resourcemanager.devcenter.models.ImageDefinitionBuildStatus;
import com.azure.resourcemanager.devcenter.models.ImageReference;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of an Image Definition Build.
 */
@Immutable
public final class ImageDefinitionBuildProperties implements JsonSerializable<ImageDefinitionBuildProperties> {
    /*
     * The specific image version used by the build.
     */
    private ImageReference imageReference;

    /*
     * The status of the build.
     */
    private ImageDefinitionBuildStatus status;

    /*
     * Start time of the task group.
     */
    private OffsetDateTime startTime;

    /*
     * End time of the task group.
     */
    private OffsetDateTime endTime;

    /*
     * Details for image creation error. Populated when the image creation is not successful.
     */
    private ImageCreationErrorDetails errorDetails;

    /**
     * Creates an instance of ImageDefinitionBuildProperties class.
     */
    public ImageDefinitionBuildProperties() {
    }

    /**
     * Get the imageReference property: The specific image version used by the build.
     * 
     * @return the imageReference value.
     */
    public ImageReference imageReference() {
        return this.imageReference;
    }

    /**
     * Get the status property: The status of the build.
     * 
     * @return the status value.
     */
    public ImageDefinitionBuildStatus status() {
        return this.status;
    }

    /**
     * Get the startTime property: Start time of the task group.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: End time of the task group.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the errorDetails property: Details for image creation error. Populated when the image creation is not
     * successful.
     * 
     * @return the errorDetails value.
     */
    public ImageCreationErrorDetails errorDetails() {
        return this.errorDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imageReference() != null) {
            imageReference().validate();
        }
        if (errorDetails() != null) {
            errorDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageDefinitionBuildProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageDefinitionBuildProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageDefinitionBuildProperties.
     */
    public static ImageDefinitionBuildProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageDefinitionBuildProperties deserializedImageDefinitionBuildProperties
                = new ImageDefinitionBuildProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageReference".equals(fieldName)) {
                    deserializedImageDefinitionBuildProperties.imageReference = ImageReference.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedImageDefinitionBuildProperties.status
                        = ImageDefinitionBuildStatus.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedImageDefinitionBuildProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedImageDefinitionBuildProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("errorDetails".equals(fieldName)) {
                    deserializedImageDefinitionBuildProperties.errorDetails
                        = ImageCreationErrorDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageDefinitionBuildProperties;
        });
    }
}
