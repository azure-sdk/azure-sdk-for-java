// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.ImageCreationErrorDetails;
import com.azure.resourcemanager.devcenter.models.ImageDefinitionBuildStatus;
import com.azure.resourcemanager.devcenter.models.ImageDefinitionBuildTaskGroup;
import com.azure.resourcemanager.devcenter.models.ImageReference;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Represents a specific build of an Image Definition.
 */
@Immutable
public final class ImageDefinitionBuildDetailsInner extends ProxyResource {
    /*
     * The specific image version used by the build.
     */
    private ImageReference imageReference;

    /*
     * The status of the build.
     */
    private ImageDefinitionBuildStatus status;

    /*
     * Start time of the task group.
     */
    private OffsetDateTime startTime;

    /*
     * End time of the task group.
     */
    private OffsetDateTime endTime;

    /*
     * Details for image creation error. Populated when the image creation is not successful.
     */
    private ImageCreationErrorDetails errorDetails;

    /*
     * The list of task groups executed during the image definition build.
     */
    private List<ImageDefinitionBuildTaskGroup> taskGroups;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /**
     * Creates an instance of ImageDefinitionBuildDetailsInner class.
     */
    public ImageDefinitionBuildDetailsInner() {
    }

    /**
     * Get the imageReference property: The specific image version used by the build.
     * 
     * @return the imageReference value.
     */
    public ImageReference imageReference() {
        return this.imageReference;
    }

    /**
     * Get the status property: The status of the build.
     * 
     * @return the status value.
     */
    public ImageDefinitionBuildStatus status() {
        return this.status;
    }

    /**
     * Get the startTime property: Start time of the task group.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: End time of the task group.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the errorDetails property: Details for image creation error. Populated when the image creation is not
     * successful.
     * 
     * @return the errorDetails value.
     */
    public ImageCreationErrorDetails errorDetails() {
        return this.errorDetails;
    }

    /**
     * Get the taskGroups property: The list of task groups executed during the image definition build.
     * 
     * @return the taskGroups value.
     */
    public List<ImageDefinitionBuildTaskGroup> taskGroups() {
        return this.taskGroups;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imageReference() != null) {
            imageReference().validate();
        }
        if (errorDetails() != null) {
            errorDetails().validate();
        }
        if (taskGroups() != null) {
            taskGroups().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageDefinitionBuildDetailsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageDefinitionBuildDetailsInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageDefinitionBuildDetailsInner.
     */
    public static ImageDefinitionBuildDetailsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageDefinitionBuildDetailsInner deserializedImageDefinitionBuildDetailsInner
                = new ImageDefinitionBuildDetailsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedImageDefinitionBuildDetailsInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedImageDefinitionBuildDetailsInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedImageDefinitionBuildDetailsInner.type = reader.getString();
                } else if ("imageReference".equals(fieldName)) {
                    deserializedImageDefinitionBuildDetailsInner.imageReference = ImageReference.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedImageDefinitionBuildDetailsInner.status
                        = ImageDefinitionBuildStatus.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedImageDefinitionBuildDetailsInner.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedImageDefinitionBuildDetailsInner.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("errorDetails".equals(fieldName)) {
                    deserializedImageDefinitionBuildDetailsInner.errorDetails
                        = ImageCreationErrorDetails.fromJson(reader);
                } else if ("taskGroups".equals(fieldName)) {
                    List<ImageDefinitionBuildTaskGroup> taskGroups
                        = reader.readArray(reader1 -> ImageDefinitionBuildTaskGroup.fromJson(reader1));
                    deserializedImageDefinitionBuildDetailsInner.taskGroups = taskGroups;
                } else if ("systemData".equals(fieldName)) {
                    deserializedImageDefinitionBuildDetailsInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageDefinitionBuildDetailsInner;
        });
    }
}
