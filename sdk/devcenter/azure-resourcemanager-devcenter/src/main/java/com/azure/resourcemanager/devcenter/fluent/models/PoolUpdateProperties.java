// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.LicenseType;
import com.azure.resourcemanager.devcenter.models.LocalAdminStatus;
import com.azure.resourcemanager.devcenter.models.PoolDevBoxDefinition;
import com.azure.resourcemanager.devcenter.models.PoolDevBoxDefinitionType;
import com.azure.resourcemanager.devcenter.models.SingleSignOnStatus;
import com.azure.resourcemanager.devcenter.models.StopOnDisconnectConfiguration;
import com.azure.resourcemanager.devcenter.models.StopOnNoConnectConfiguration;
import com.azure.resourcemanager.devcenter.models.VirtualNetworkType;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a Pool. These properties can be updated after the resource has been created.
 */
@Fluent
public class PoolUpdateProperties implements JsonSerializable<PoolUpdateProperties> {
    /*
     * Indicates if the pool is created from an existing Dev Box Definition or if one is provided directly.
     */
    private PoolDevBoxDefinitionType devBoxDefinitionType;

    /*
     * Name of a Dev Box definition in parent Project of this Pool. Will be ignored if devBoxDefinitionType is Value.
     */
    private String devBoxDefinitionName;

    /*
     * A definition of the machines that are created from this Pool. Will be ignored if devBoxDefinitionType is
     * Reference or not provided.
     */
    private PoolDevBoxDefinition devBoxDefinition;

    /*
     * Name of a Network Connection in parent Project of this Pool
     */
    private String networkConnectionName;

    /*
     * Specifies the license type indicating the caller has already acquired licenses for the Dev Boxes that will be
     * created.
     */
    private LicenseType licenseType;

    /*
     * Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box.
     */
    private LocalAdminStatus localAdministrator;

    /*
     * Stop on disconnect configuration settings for Dev Boxes created in this pool.
     */
    private StopOnDisconnectConfiguration stopOnDisconnect;

    /*
     * Stop on no connect configuration settings for Dev Boxes created in this pool.
     */
    private StopOnNoConnectConfiguration stopOnNoConnect;

    /*
     * Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single
     * sign on be enabled on the tenant.
     */
    private SingleSignOnStatus singleSignOnStatus;

    /*
     * The display name of the pool.
     */
    private String displayName;

    /*
     * Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network.
     */
    private VirtualNetworkType virtualNetworkType;

    /*
     * The regions of the managed virtual network (required when managedNetworkType is Managed).
     */
    private List<String> managedVirtualNetworkRegions;

    /**
     * Creates an instance of PoolUpdateProperties class.
     */
    public PoolUpdateProperties() {
    }

    /**
     * Get the devBoxDefinitionType property: Indicates if the pool is created from an existing Dev Box Definition or if
     * one is provided directly.
     * 
     * @return the devBoxDefinitionType value.
     */
    public PoolDevBoxDefinitionType devBoxDefinitionType() {
        return this.devBoxDefinitionType;
    }

    /**
     * Set the devBoxDefinitionType property: Indicates if the pool is created from an existing Dev Box Definition or if
     * one is provided directly.
     * 
     * @param devBoxDefinitionType the devBoxDefinitionType value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withDevBoxDefinitionType(PoolDevBoxDefinitionType devBoxDefinitionType) {
        this.devBoxDefinitionType = devBoxDefinitionType;
        return this;
    }

    /**
     * Get the devBoxDefinitionName property: Name of a Dev Box definition in parent Project of this Pool. Will be
     * ignored if devBoxDefinitionType is Value.
     * 
     * @return the devBoxDefinitionName value.
     */
    public String devBoxDefinitionName() {
        return this.devBoxDefinitionName;
    }

    /**
     * Set the devBoxDefinitionName property: Name of a Dev Box definition in parent Project of this Pool. Will be
     * ignored if devBoxDefinitionType is Value.
     * 
     * @param devBoxDefinitionName the devBoxDefinitionName value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withDevBoxDefinitionName(String devBoxDefinitionName) {
        this.devBoxDefinitionName = devBoxDefinitionName;
        return this;
    }

    /**
     * Get the devBoxDefinition property: A definition of the machines that are created from this Pool. Will be ignored
     * if devBoxDefinitionType is Reference or not provided.
     * 
     * @return the devBoxDefinition value.
     */
    public PoolDevBoxDefinition devBoxDefinition() {
        return this.devBoxDefinition;
    }

    /**
     * Set the devBoxDefinition property: A definition of the machines that are created from this Pool. Will be ignored
     * if devBoxDefinitionType is Reference or not provided.
     * 
     * @param devBoxDefinition the devBoxDefinition value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withDevBoxDefinition(PoolDevBoxDefinition devBoxDefinition) {
        this.devBoxDefinition = devBoxDefinition;
        return this;
    }

    /**
     * Get the networkConnectionName property: Name of a Network Connection in parent Project of this Pool.
     * 
     * @return the networkConnectionName value.
     */
    public String networkConnectionName() {
        return this.networkConnectionName;
    }

    /**
     * Set the networkConnectionName property: Name of a Network Connection in parent Project of this Pool.
     * 
     * @param networkConnectionName the networkConnectionName value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withNetworkConnectionName(String networkConnectionName) {
        this.networkConnectionName = networkConnectionName;
        return this;
    }

    /**
     * Get the licenseType property: Specifies the license type indicating the caller has already acquired licenses for
     * the Dev Boxes that will be created.
     * 
     * @return the licenseType value.
     */
    public LicenseType licenseType() {
        return this.licenseType;
    }

    /**
     * Set the licenseType property: Specifies the license type indicating the caller has already acquired licenses for
     * the Dev Boxes that will be created.
     * 
     * @param licenseType the licenseType value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withLicenseType(LicenseType licenseType) {
        this.licenseType = licenseType;
        return this;
    }

    /**
     * Get the localAdministrator property: Indicates whether owners of Dev Boxes in this pool are added as local
     * administrators on the Dev Box.
     * 
     * @return the localAdministrator value.
     */
    public LocalAdminStatus localAdministrator() {
        return this.localAdministrator;
    }

    /**
     * Set the localAdministrator property: Indicates whether owners of Dev Boxes in this pool are added as local
     * administrators on the Dev Box.
     * 
     * @param localAdministrator the localAdministrator value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withLocalAdministrator(LocalAdminStatus localAdministrator) {
        this.localAdministrator = localAdministrator;
        return this;
    }

    /**
     * Get the stopOnDisconnect property: Stop on disconnect configuration settings for Dev Boxes created in this pool.
     * 
     * @return the stopOnDisconnect value.
     */
    public StopOnDisconnectConfiguration stopOnDisconnect() {
        return this.stopOnDisconnect;
    }

    /**
     * Set the stopOnDisconnect property: Stop on disconnect configuration settings for Dev Boxes created in this pool.
     * 
     * @param stopOnDisconnect the stopOnDisconnect value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withStopOnDisconnect(StopOnDisconnectConfiguration stopOnDisconnect) {
        this.stopOnDisconnect = stopOnDisconnect;
        return this;
    }

    /**
     * Get the stopOnNoConnect property: Stop on no connect configuration settings for Dev Boxes created in this pool.
     * 
     * @return the stopOnNoConnect value.
     */
    public StopOnNoConnectConfiguration stopOnNoConnect() {
        return this.stopOnNoConnect;
    }

    /**
     * Set the stopOnNoConnect property: Stop on no connect configuration settings for Dev Boxes created in this pool.
     * 
     * @param stopOnNoConnect the stopOnNoConnect value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withStopOnNoConnect(StopOnNoConnectConfiguration stopOnNoConnect) {
        this.stopOnNoConnect = stopOnNoConnect;
        return this;
    }

    /**
     * Get the singleSignOnStatus property: Indicates whether Dev Boxes in this pool are created with single sign on
     * enabled. The also requires that single sign on be enabled on the tenant.
     * 
     * @return the singleSignOnStatus value.
     */
    public SingleSignOnStatus singleSignOnStatus() {
        return this.singleSignOnStatus;
    }

    /**
     * Set the singleSignOnStatus property: Indicates whether Dev Boxes in this pool are created with single sign on
     * enabled. The also requires that single sign on be enabled on the tenant.
     * 
     * @param singleSignOnStatus the singleSignOnStatus value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withSingleSignOnStatus(SingleSignOnStatus singleSignOnStatus) {
        this.singleSignOnStatus = singleSignOnStatus;
        return this;
    }

    /**
     * Get the displayName property: The display name of the pool.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the pool.
     * 
     * @param displayName the displayName value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the virtualNetworkType property: Indicates whether the pool uses a Virtual Network managed by Microsoft or a
     * customer provided network.
     * 
     * @return the virtualNetworkType value.
     */
    public VirtualNetworkType virtualNetworkType() {
        return this.virtualNetworkType;
    }

    /**
     * Set the virtualNetworkType property: Indicates whether the pool uses a Virtual Network managed by Microsoft or a
     * customer provided network.
     * 
     * @param virtualNetworkType the virtualNetworkType value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withVirtualNetworkType(VirtualNetworkType virtualNetworkType) {
        this.virtualNetworkType = virtualNetworkType;
        return this;
    }

    /**
     * Get the managedVirtualNetworkRegions property: The regions of the managed virtual network (required when
     * managedNetworkType is Managed).
     * 
     * @return the managedVirtualNetworkRegions value.
     */
    public List<String> managedVirtualNetworkRegions() {
        return this.managedVirtualNetworkRegions;
    }

    /**
     * Set the managedVirtualNetworkRegions property: The regions of the managed virtual network (required when
     * managedNetworkType is Managed).
     * 
     * @param managedVirtualNetworkRegions the managedVirtualNetworkRegions value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withManagedVirtualNetworkRegions(List<String> managedVirtualNetworkRegions) {
        this.managedVirtualNetworkRegions = managedVirtualNetworkRegions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (devBoxDefinition() != null) {
            devBoxDefinition().validate();
        }
        if (stopOnDisconnect() != null) {
            stopOnDisconnect().validate();
        }
        if (stopOnNoConnect() != null) {
            stopOnNoConnect().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("devBoxDefinitionType",
            this.devBoxDefinitionType == null ? null : this.devBoxDefinitionType.toString());
        jsonWriter.writeStringField("devBoxDefinitionName", this.devBoxDefinitionName);
        jsonWriter.writeJsonField("devBoxDefinition", this.devBoxDefinition);
        jsonWriter.writeStringField("networkConnectionName", this.networkConnectionName);
        jsonWriter.writeStringField("licenseType", this.licenseType == null ? null : this.licenseType.toString());
        jsonWriter.writeStringField("localAdministrator",
            this.localAdministrator == null ? null : this.localAdministrator.toString());
        jsonWriter.writeJsonField("stopOnDisconnect", this.stopOnDisconnect);
        jsonWriter.writeJsonField("stopOnNoConnect", this.stopOnNoConnect);
        jsonWriter.writeStringField("singleSignOnStatus",
            this.singleSignOnStatus == null ? null : this.singleSignOnStatus.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("virtualNetworkType",
            this.virtualNetworkType == null ? null : this.virtualNetworkType.toString());
        jsonWriter.writeArrayField("managedVirtualNetworkRegions", this.managedVirtualNetworkRegions,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PoolUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PoolUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PoolUpdateProperties.
     */
    public static PoolUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PoolUpdateProperties deserializedPoolUpdateProperties = new PoolUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("devBoxDefinitionType".equals(fieldName)) {
                    deserializedPoolUpdateProperties.devBoxDefinitionType
                        = PoolDevBoxDefinitionType.fromString(reader.getString());
                } else if ("devBoxDefinitionName".equals(fieldName)) {
                    deserializedPoolUpdateProperties.devBoxDefinitionName = reader.getString();
                } else if ("devBoxDefinition".equals(fieldName)) {
                    deserializedPoolUpdateProperties.devBoxDefinition = PoolDevBoxDefinition.fromJson(reader);
                } else if ("networkConnectionName".equals(fieldName)) {
                    deserializedPoolUpdateProperties.networkConnectionName = reader.getString();
                } else if ("licenseType".equals(fieldName)) {
                    deserializedPoolUpdateProperties.licenseType = LicenseType.fromString(reader.getString());
                } else if ("localAdministrator".equals(fieldName)) {
                    deserializedPoolUpdateProperties.localAdministrator
                        = LocalAdminStatus.fromString(reader.getString());
                } else if ("stopOnDisconnect".equals(fieldName)) {
                    deserializedPoolUpdateProperties.stopOnDisconnect = StopOnDisconnectConfiguration.fromJson(reader);
                } else if ("stopOnNoConnect".equals(fieldName)) {
                    deserializedPoolUpdateProperties.stopOnNoConnect = StopOnNoConnectConfiguration.fromJson(reader);
                } else if ("singleSignOnStatus".equals(fieldName)) {
                    deserializedPoolUpdateProperties.singleSignOnStatus
                        = SingleSignOnStatus.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedPoolUpdateProperties.displayName = reader.getString();
                } else if ("virtualNetworkType".equals(fieldName)) {
                    deserializedPoolUpdateProperties.virtualNetworkType
                        = VirtualNetworkType.fromString(reader.getString());
                } else if ("managedVirtualNetworkRegions".equals(fieldName)) {
                    List<String> managedVirtualNetworkRegions = reader.readArray(reader1 -> reader1.getString());
                    deserializedPoolUpdateProperties.managedVirtualNetworkRegions = managedVirtualNetworkRegions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPoolUpdateProperties;
        });
    }
}
