// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.devcenter.fluent.models.ImageDefinitionBuildDetailsInner;
import com.azure.resourcemanager.devcenter.fluent.models.ImageDefinitionBuildInner;

/**
 * An instance of this class provides access to all the operations defined in
 * ProjectCatalogImageDefinitionBuildOperationsClient.
 */
public interface ProjectCatalogImageDefinitionBuildOperationsClient {
    /**
     * Gets a build for a specified image definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName The name of the project.
     * @param catalogName The name of the Catalog.
     * @param imageDefinitionName The name of the Image Definition.
     * @param buildName The ID of the Image Definition Build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a build for a specified image definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ImageDefinitionBuildInner> getWithResponse(String resourceGroupName, String projectName,
        String catalogName, String imageDefinitionName, String buildName, Context context);

    /**
     * Gets a build for a specified image definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName The name of the project.
     * @param catalogName The name of the Catalog.
     * @param imageDefinitionName The name of the Image Definition.
     * @param buildName The ID of the Image Definition Build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a build for a specified image definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ImageDefinitionBuildInner get(String resourceGroupName, String projectName, String catalogName,
        String imageDefinitionName, String buildName);

    /**
     * Cancels the specified build for an image definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName The name of the project.
     * @param catalogName The name of the Catalog.
     * @param imageDefinitionName The name of the Image Definition.
     * @param buildName The ID of the Image Definition Build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginCancel(String resourceGroupName, String projectName, String catalogName,
        String imageDefinitionName, String buildName);

    /**
     * Cancels the specified build for an image definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName The name of the project.
     * @param catalogName The name of the Catalog.
     * @param imageDefinitionName The name of the Image Definition.
     * @param buildName The ID of the Image Definition Build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginCancel(String resourceGroupName, String projectName, String catalogName,
        String imageDefinitionName, String buildName, Context context);

    /**
     * Cancels the specified build for an image definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName The name of the project.
     * @param catalogName The name of the Catalog.
     * @param imageDefinitionName The name of the Image Definition.
     * @param buildName The ID of the Image Definition Build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void cancel(String resourceGroupName, String projectName, String catalogName, String imageDefinitionName,
        String buildName);

    /**
     * Cancels the specified build for an image definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName The name of the project.
     * @param catalogName The name of the Catalog.
     * @param imageDefinitionName The name of the Image Definition.
     * @param buildName The ID of the Image Definition Build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void cancel(String resourceGroupName, String projectName, String catalogName, String imageDefinitionName,
        String buildName, Context context);

    /**
     * Gets Build details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName The name of the project.
     * @param catalogName The name of the Catalog.
     * @param imageDefinitionName The name of the Image Definition.
     * @param buildName The ID of the Image Definition Build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ImageDefinitionBuildDetailsInner> getBuildDetailsWithResponse(String resourceGroupName, String projectName,
        String catalogName, String imageDefinitionName, String buildName, Context context);

    /**
     * Gets Build details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName The name of the project.
     * @param catalogName The name of the Catalog.
     * @param imageDefinitionName The name of the Image Definition.
     * @param buildName The ID of the Image Definition Build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ImageDefinitionBuildDetailsInner getBuildDetails(String resourceGroupName, String projectName, String catalogName,
        String imageDefinitionName, String buildName);
}
