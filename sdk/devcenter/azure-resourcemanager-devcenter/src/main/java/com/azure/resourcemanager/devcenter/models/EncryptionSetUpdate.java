// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.fluent.models.DevCenterEncryptionSetUpdateProperties;
import java.io.IOException;
import java.util.Map;

/**
 * The devcenter encryption set resource for partial updates. Properties not provided in the update request will not be
 * changed.
 */
@Fluent
public final class EncryptionSetUpdate extends TrackedResourceUpdate {
    /*
     * Properties of a Dev Center encryption set to be updated.
     */
    private DevCenterEncryptionSetUpdateProperties innerProperties;

    /*
     * Managed identity properties
     */
    private ManagedServiceIdentity identity;

    /**
     * Creates an instance of EncryptionSetUpdate class.
     */
    public EncryptionSetUpdate() {
    }

    /**
     * Get the innerProperties property: Properties of a Dev Center encryption set to be updated.
     * 
     * @return the innerProperties value.
     */
    private DevCenterEncryptionSetUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the identity property: Managed identity properties.
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Managed identity properties.
     * 
     * @param identity the identity value to set.
     * @return the EncryptionSetUpdate object itself.
     */
    public EncryptionSetUpdate withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EncryptionSetUpdate withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EncryptionSetUpdate withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * Get the devboxDisksEncryptionEnableStatus property: Devbox disk encryption enable or disable status. Indicates if
     * Devbox disks encryption using DevCenter CMK is enabled or not.
     * 
     * @return the devboxDisksEncryptionEnableStatus value.
     */
    public DevboxDisksEncryptionEnableStatus devboxDisksEncryptionEnableStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().devboxDisksEncryptionEnableStatus();
    }

    /**
     * Set the devboxDisksEncryptionEnableStatus property: Devbox disk encryption enable or disable status. Indicates if
     * Devbox disks encryption using DevCenter CMK is enabled or not.
     * 
     * @param devboxDisksEncryptionEnableStatus the devboxDisksEncryptionEnableStatus value to set.
     * @return the EncryptionSetUpdate object itself.
     */
    public EncryptionSetUpdate
        withDevboxDisksEncryptionEnableStatus(DevboxDisksEncryptionEnableStatus devboxDisksEncryptionEnableStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DevCenterEncryptionSetUpdateProperties();
        }
        this.innerProperties().withDevboxDisksEncryptionEnableStatus(devboxDisksEncryptionEnableStatus);
        return this;
    }

    /**
     * Get the keyEncryptionKeyUrl property: Key encryption key Url, versioned or non-versioned. Ex:
     * https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or
     * https://contosovault.vault.azure.net/keys/contosokek.
     * 
     * @return the keyEncryptionKeyUrl value.
     */
    public String keyEncryptionKeyUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().keyEncryptionKeyUrl();
    }

    /**
     * Set the keyEncryptionKeyUrl property: Key encryption key Url, versioned or non-versioned. Ex:
     * https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or
     * https://contosovault.vault.azure.net/keys/contosokek.
     * 
     * @param keyEncryptionKeyUrl the keyEncryptionKeyUrl value to set.
     * @return the EncryptionSetUpdate object itself.
     */
    public EncryptionSetUpdate withKeyEncryptionKeyUrl(String keyEncryptionKeyUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DevCenterEncryptionSetUpdateProperties();
        }
        this.innerProperties().withKeyEncryptionKeyUrl(keyEncryptionKeyUrl);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionSetUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionSetUpdate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionSetUpdate.
     */
    public static EncryptionSetUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionSetUpdate deserializedEncryptionSetUpdate = new EncryptionSetUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedEncryptionSetUpdate.withTags(tags);
                } else if ("location".equals(fieldName)) {
                    deserializedEncryptionSetUpdate.withLocation(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedEncryptionSetUpdate.innerProperties
                        = DevCenterEncryptionSetUpdateProperties.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedEncryptionSetUpdate.identity = ManagedServiceIdentity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionSetUpdate;
        });
    }
}
