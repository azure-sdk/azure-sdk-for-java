// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.DevCenterProjectCatalogSettings;
import com.azure.resourcemanager.devcenter.models.ProjectNetworkSettings;
import java.io.IOException;

/**
 * Applicable inherited settings for a project.
 */
@Immutable
public final class InheritedSettingsForProjectInner implements JsonSerializable<InheritedSettingsForProjectInner> {
    /*
     * Dev Center settings to be used when associating a project with a catalog.
     */
    private DevCenterProjectCatalogSettings projectCatalogSettings;

    /*
     * Network settings that will be enforced on this project.
     */
    private ProjectNetworkSettings networkSettings;

    /**
     * Creates an instance of InheritedSettingsForProjectInner class.
     */
    public InheritedSettingsForProjectInner() {
    }

    /**
     * Get the projectCatalogSettings property: Dev Center settings to be used when associating a project with a
     * catalog.
     * 
     * @return the projectCatalogSettings value.
     */
    public DevCenterProjectCatalogSettings projectCatalogSettings() {
        return this.projectCatalogSettings;
    }

    /**
     * Get the networkSettings property: Network settings that will be enforced on this project.
     * 
     * @return the networkSettings value.
     */
    public ProjectNetworkSettings networkSettings() {
        return this.networkSettings;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (projectCatalogSettings() != null) {
            projectCatalogSettings().validate();
        }
        if (networkSettings() != null) {
            networkSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InheritedSettingsForProjectInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InheritedSettingsForProjectInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InheritedSettingsForProjectInner.
     */
    public static InheritedSettingsForProjectInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InheritedSettingsForProjectInner deserializedInheritedSettingsForProjectInner
                = new InheritedSettingsForProjectInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectCatalogSettings".equals(fieldName)) {
                    deserializedInheritedSettingsForProjectInner.projectCatalogSettings
                        = DevCenterProjectCatalogSettings.fromJson(reader);
                } else if ("networkSettings".equals(fieldName)) {
                    deserializedInheritedSettingsForProjectInner.networkSettings
                        = ProjectNetworkSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInheritedSettingsForProjectInner;
        });
    }
}
