// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.ProvisioningState;
import com.azure.resourcemanager.devcenter.models.ResourcePolicy;
import java.io.IOException;
import java.util.List;

/**
 * Properties of an project policy.
 */
@Fluent
public final class ProjectPolicyProperties extends ProjectPolicyUpdateProperties {
    /*
     * The provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ProjectPolicyProperties class.
     */
    public ProjectPolicyProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectPolicyProperties withResourcePolicies(List<ResourcePolicy> resourcePolicies) {
        super.withResourcePolicies(resourcePolicies);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectPolicyProperties withScopes(List<String> scopes) {
        super.withScopes(scopes);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourcePolicies", resourcePolicies(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("scopes", scopes(), (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectPolicyProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectPolicyProperties.
     */
    public static ProjectPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectPolicyProperties deserializedProjectPolicyProperties = new ProjectPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourcePolicies".equals(fieldName)) {
                    List<ResourcePolicy> resourcePolicies
                        = reader.readArray(reader1 -> ResourcePolicy.fromJson(reader1));
                    deserializedProjectPolicyProperties.withResourcePolicies(resourcePolicies);
                } else if ("scopes".equals(fieldName)) {
                    List<String> scopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedProjectPolicyProperties.withScopes(scopes);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedProjectPolicyProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectPolicyProperties;
        });
    }
}
