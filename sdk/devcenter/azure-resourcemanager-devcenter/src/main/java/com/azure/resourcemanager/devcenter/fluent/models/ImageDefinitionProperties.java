// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.ImageReference;
import com.azure.resourcemanager.devcenter.models.LatestImageBuild;
import java.io.IOException;

/**
 * Properties of an Image Definition.
 */
@Fluent
public final class ImageDefinitionProperties implements JsonSerializable<ImageDefinitionProperties> {
    /*
     * Image reference information.
     */
    private ImageReference imageReference;

    /*
     * The URL to the repository file containing the image definition.
     */
    private String fileUrl;

    /*
     * Details about the latest build.
     */
    private LatestImageBuild latestBuild;

    /**
     * Creates an instance of ImageDefinitionProperties class.
     */
    public ImageDefinitionProperties() {
    }

    /**
     * Get the imageReference property: Image reference information.
     * 
     * @return the imageReference value.
     */
    public ImageReference imageReference() {
        return this.imageReference;
    }

    /**
     * Set the imageReference property: Image reference information.
     * 
     * @param imageReference the imageReference value to set.
     * @return the ImageDefinitionProperties object itself.
     */
    public ImageDefinitionProperties withImageReference(ImageReference imageReference) {
        this.imageReference = imageReference;
        return this;
    }

    /**
     * Get the fileUrl property: The URL to the repository file containing the image definition.
     * 
     * @return the fileUrl value.
     */
    public String fileUrl() {
        return this.fileUrl;
    }

    /**
     * Get the latestBuild property: Details about the latest build.
     * 
     * @return the latestBuild value.
     */
    public LatestImageBuild latestBuild() {
        return this.latestBuild;
    }

    /**
     * Set the latestBuild property: Details about the latest build.
     * 
     * @param latestBuild the latestBuild value to set.
     * @return the ImageDefinitionProperties object itself.
     */
    public ImageDefinitionProperties withLatestBuild(LatestImageBuild latestBuild) {
        this.latestBuild = latestBuild;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imageReference() != null) {
            imageReference().validate();
        }
        if (latestBuild() != null) {
            latestBuild().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("imageReference", this.imageReference);
        jsonWriter.writeJsonField("latestBuild", this.latestBuild);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageDefinitionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageDefinitionProperties.
     */
    public static ImageDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageDefinitionProperties deserializedImageDefinitionProperties = new ImageDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageReference".equals(fieldName)) {
                    deserializedImageDefinitionProperties.imageReference = ImageReference.fromJson(reader);
                } else if ("fileUrl".equals(fieldName)) {
                    deserializedImageDefinitionProperties.fileUrl = reader.getString();
                } else if ("latestBuild".equals(fieldName)) {
                    deserializedImageDefinitionProperties.latestBuild = LatestImageBuild.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageDefinitionProperties;
        });
    }
}
