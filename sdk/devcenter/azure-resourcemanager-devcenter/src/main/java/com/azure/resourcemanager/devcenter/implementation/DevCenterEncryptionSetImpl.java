// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devcenter.fluent.models.DevCenterEncryptionSetInner;
import com.azure.resourcemanager.devcenter.models.DevboxDisksEncryptionEnableStatus;
import com.azure.resourcemanager.devcenter.models.DevCenterEncryptionSet;
import com.azure.resourcemanager.devcenter.models.EncryptionSetUpdate;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devcenter.models.ProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class DevCenterEncryptionSetImpl
    implements DevCenterEncryptionSet, DevCenterEncryptionSet.Definition, DevCenterEncryptionSet.Update {
    private DevCenterEncryptionSetInner innerObject;

    private final com.azure.resourcemanager.devcenter.DevCenterManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public DevboxDisksEncryptionEnableStatus devboxDisksEncryptionEnableStatus() {
        return this.innerModel().devboxDisksEncryptionEnableStatus();
    }

    public String keyEncryptionKeyUrl() {
        return this.innerModel().keyEncryptionKeyUrl();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DevCenterEncryptionSetInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.devcenter.DevCenterManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String devCenterName;

    private String encryptionSetName;

    private EncryptionSetUpdate updateBody;

    public DevCenterEncryptionSetImpl withExistingDevcenter(String resourceGroupName, String devCenterName) {
        this.resourceGroupName = resourceGroupName;
        this.devCenterName = devCenterName;
        return this;
    }

    public DevCenterEncryptionSet create() {
        this.innerObject = serviceManager.serviceClient()
            .getEncryptionSets()
            .createOrUpdate(resourceGroupName, devCenterName, encryptionSetName, this.innerModel(), Context.NONE);
        return this;
    }

    public DevCenterEncryptionSet create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEncryptionSets()
            .createOrUpdate(resourceGroupName, devCenterName, encryptionSetName, this.innerModel(), context);
        return this;
    }

    DevCenterEncryptionSetImpl(String name, com.azure.resourcemanager.devcenter.DevCenterManager serviceManager) {
        this.innerObject = new DevCenterEncryptionSetInner();
        this.serviceManager = serviceManager;
        this.encryptionSetName = name;
    }

    public DevCenterEncryptionSetImpl update() {
        this.updateBody = new EncryptionSetUpdate();
        return this;
    }

    public DevCenterEncryptionSet apply() {
        this.innerObject = serviceManager.serviceClient()
            .getEncryptionSets()
            .update(resourceGroupName, devCenterName, encryptionSetName, updateBody, Context.NONE);
        return this;
    }

    public DevCenterEncryptionSet apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEncryptionSets()
            .update(resourceGroupName, devCenterName, encryptionSetName, updateBody, context);
        return this;
    }

    DevCenterEncryptionSetImpl(DevCenterEncryptionSetInner innerObject,
        com.azure.resourcemanager.devcenter.DevCenterManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.devCenterName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "devcenters");
        this.encryptionSetName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "encryptionSets");
    }

    public DevCenterEncryptionSet refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getEncryptionSets()
            .getWithResponse(resourceGroupName, devCenterName, encryptionSetName, Context.NONE)
            .getValue();
        return this;
    }

    public DevCenterEncryptionSet refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEncryptionSets()
            .getWithResponse(resourceGroupName, devCenterName, encryptionSetName, context)
            .getValue();
        return this;
    }

    public DevCenterEncryptionSetImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DevCenterEncryptionSetImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DevCenterEncryptionSetImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public DevCenterEncryptionSetImpl withIdentity(ManagedServiceIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateBody.withIdentity(identity);
            return this;
        }
    }

    public DevCenterEncryptionSetImpl
        withDevboxDisksEncryptionEnableStatus(DevboxDisksEncryptionEnableStatus devboxDisksEncryptionEnableStatus) {
        if (isInCreateMode()) {
            this.innerModel().withDevboxDisksEncryptionEnableStatus(devboxDisksEncryptionEnableStatus);
            return this;
        } else {
            this.updateBody.withDevboxDisksEncryptionEnableStatus(devboxDisksEncryptionEnableStatus);
            return this;
        }
    }

    public DevCenterEncryptionSetImpl withKeyEncryptionKeyUrl(String keyEncryptionKeyUrl) {
        if (isInCreateMode()) {
            this.innerModel().withKeyEncryptionKeyUrl(keyEncryptionKeyUrl);
            return this;
        } else {
            this.updateBody.withKeyEncryptionKeyUrl(keyEncryptionKeyUrl);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
