// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a definition for a Developer Machine.
 */
@Fluent
public final class PoolDevBoxDefinition implements JsonSerializable<PoolDevBoxDefinition> {
    /*
     * Image reference information.
     */
    private ImageReference imageReference;

    /*
     * The SKU for Dev Boxes created from the Pool.
     */
    private Sku sku;

    /*
     * Image reference information for the currently active image (only populated during updates).
     */
    private ImageReference activeImageReference;

    /**
     * Creates an instance of PoolDevBoxDefinition class.
     */
    public PoolDevBoxDefinition() {
    }

    /**
     * Get the imageReference property: Image reference information.
     * 
     * @return the imageReference value.
     */
    public ImageReference imageReference() {
        return this.imageReference;
    }

    /**
     * Set the imageReference property: Image reference information.
     * 
     * @param imageReference the imageReference value to set.
     * @return the PoolDevBoxDefinition object itself.
     */
    public PoolDevBoxDefinition withImageReference(ImageReference imageReference) {
        this.imageReference = imageReference;
        return this;
    }

    /**
     * Get the sku property: The SKU for Dev Boxes created from the Pool.
     * 
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU for Dev Boxes created from the Pool.
     * 
     * @param sku the sku value to set.
     * @return the PoolDevBoxDefinition object itself.
     */
    public PoolDevBoxDefinition withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the activeImageReference property: Image reference information for the currently active image (only populated
     * during updates).
     * 
     * @return the activeImageReference value.
     */
    public ImageReference activeImageReference() {
        return this.activeImageReference;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imageReference() != null) {
            imageReference().validate();
        }
        if (sku() != null) {
            sku().validate();
        }
        if (activeImageReference() != null) {
            activeImageReference().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("imageReference", this.imageReference);
        jsonWriter.writeJsonField("sku", this.sku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PoolDevBoxDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PoolDevBoxDefinition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PoolDevBoxDefinition.
     */
    public static PoolDevBoxDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PoolDevBoxDefinition deserializedPoolDevBoxDefinition = new PoolDevBoxDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageReference".equals(fieldName)) {
                    deserializedPoolDevBoxDefinition.imageReference = ImageReference.fromJson(reader);
                } else if ("sku".equals(fieldName)) {
                    deserializedPoolDevBoxDefinition.sku = Sku.fromJson(reader);
                } else if ("activeImageReference".equals(fieldName)) {
                    deserializedPoolDevBoxDefinition.activeImageReference = ImageReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPoolDevBoxDefinition;
        });
    }
}
