// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Provisioning settings that apply to all Dev Boxes created in this dev center.
 */
@Fluent
public final class DevBoxProvisioningSettings implements JsonSerializable<DevBoxProvisioningSettings> {
    /*
     * Whether project catalogs associated with projects in this dev center can be configured to sync catalog items.
     */
    private InstallAzureMonitorAgentEnableStatus installAzureMonitorAgentEnableStatus;

    /**
     * Creates an instance of DevBoxProvisioningSettings class.
     */
    public DevBoxProvisioningSettings() {
    }

    /**
     * Get the installAzureMonitorAgentEnableStatus property: Whether project catalogs associated with projects in this
     * dev center can be configured to sync catalog items.
     * 
     * @return the installAzureMonitorAgentEnableStatus value.
     */
    public InstallAzureMonitorAgentEnableStatus installAzureMonitorAgentEnableStatus() {
        return this.installAzureMonitorAgentEnableStatus;
    }

    /**
     * Set the installAzureMonitorAgentEnableStatus property: Whether project catalogs associated with projects in this
     * dev center can be configured to sync catalog items.
     * 
     * @param installAzureMonitorAgentEnableStatus the installAzureMonitorAgentEnableStatus value to set.
     * @return the DevBoxProvisioningSettings object itself.
     */
    public DevBoxProvisioningSettings withInstallAzureMonitorAgentEnableStatus(
        InstallAzureMonitorAgentEnableStatus installAzureMonitorAgentEnableStatus) {
        this.installAzureMonitorAgentEnableStatus = installAzureMonitorAgentEnableStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("installAzureMonitorAgentEnableStatus",
            this.installAzureMonitorAgentEnableStatus == null
                ? null
                : this.installAzureMonitorAgentEnableStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DevBoxProvisioningSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DevBoxProvisioningSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DevBoxProvisioningSettings.
     */
    public static DevBoxProvisioningSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DevBoxProvisioningSettings deserializedDevBoxProvisioningSettings = new DevBoxProvisioningSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("installAzureMonitorAgentEnableStatus".equals(fieldName)) {
                    deserializedDevBoxProvisioningSettings.installAzureMonitorAgentEnableStatus
                        = InstallAzureMonitorAgentEnableStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDevBoxProvisioningSettings;
        });
    }
}
