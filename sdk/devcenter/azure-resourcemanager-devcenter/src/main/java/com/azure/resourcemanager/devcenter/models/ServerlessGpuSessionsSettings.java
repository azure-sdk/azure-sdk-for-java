// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents settings for serverless GPU access.
 */
@Fluent
public final class ServerlessGpuSessionsSettings implements JsonSerializable<ServerlessGpuSessionsSettings> {
    /*
     * The property indicates whether serverless GPU access is enabled on the project.
     */
    private ServerlessGpuSessionsEnableStatus serverlessGpuSessionsEnableStatus;

    /*
     * When specified, limits the maximum number of concurrent sessions across all pools in the project.
     */
    private Integer maxConcurrentSessionsPerProject;

    /**
     * Creates an instance of ServerlessGpuSessionsSettings class.
     */
    public ServerlessGpuSessionsSettings() {
    }

    /**
     * Get the serverlessGpuSessionsEnableStatus property: The property indicates whether serverless GPU access is
     * enabled on the project.
     * 
     * @return the serverlessGpuSessionsEnableStatus value.
     */
    public ServerlessGpuSessionsEnableStatus serverlessGpuSessionsEnableStatus() {
        return this.serverlessGpuSessionsEnableStatus;
    }

    /**
     * Set the serverlessGpuSessionsEnableStatus property: The property indicates whether serverless GPU access is
     * enabled on the project.
     * 
     * @param serverlessGpuSessionsEnableStatus the serverlessGpuSessionsEnableStatus value to set.
     * @return the ServerlessGpuSessionsSettings object itself.
     */
    public ServerlessGpuSessionsSettings
        withServerlessGpuSessionsEnableStatus(ServerlessGpuSessionsEnableStatus serverlessGpuSessionsEnableStatus) {
        this.serverlessGpuSessionsEnableStatus = serverlessGpuSessionsEnableStatus;
        return this;
    }

    /**
     * Get the maxConcurrentSessionsPerProject property: When specified, limits the maximum number of concurrent
     * sessions across all pools in the project.
     * 
     * @return the maxConcurrentSessionsPerProject value.
     */
    public Integer maxConcurrentSessionsPerProject() {
        return this.maxConcurrentSessionsPerProject;
    }

    /**
     * Set the maxConcurrentSessionsPerProject property: When specified, limits the maximum number of concurrent
     * sessions across all pools in the project.
     * 
     * @param maxConcurrentSessionsPerProject the maxConcurrentSessionsPerProject value to set.
     * @return the ServerlessGpuSessionsSettings object itself.
     */
    public ServerlessGpuSessionsSettings withMaxConcurrentSessionsPerProject(Integer maxConcurrentSessionsPerProject) {
        this.maxConcurrentSessionsPerProject = maxConcurrentSessionsPerProject;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverlessGpuSessionsEnableStatus",
            this.serverlessGpuSessionsEnableStatus == null ? null : this.serverlessGpuSessionsEnableStatus.toString());
        jsonWriter.writeNumberField("maxConcurrentSessionsPerProject", this.maxConcurrentSessionsPerProject);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessGpuSessionsSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessGpuSessionsSettings if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerlessGpuSessionsSettings.
     */
    public static ServerlessGpuSessionsSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessGpuSessionsSettings deserializedServerlessGpuSessionsSettings
                = new ServerlessGpuSessionsSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverlessGpuSessionsEnableStatus".equals(fieldName)) {
                    deserializedServerlessGpuSessionsSettings.serverlessGpuSessionsEnableStatus
                        = ServerlessGpuSessionsEnableStatus.fromString(reader.getString());
                } else if ("maxConcurrentSessionsPerProject".equals(fieldName)) {
                    deserializedServerlessGpuSessionsSettings.maxConcurrentSessionsPerProject
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessGpuSessionsSettings;
        });
    }
}
