// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A customization task to run.
 */
@Fluent
public final class CustomizationTaskInstance implements JsonSerializable<CustomizationTaskInstance> {
    /*
     * Name of the task.
     */
    private String name;

    /*
     * Parameters for the task.
     */
    private List<DefinitionParametersItem> parameters;

    /*
     * Display name to help differentiate multiple instances of the same task.
     */
    private String displayName;

    /*
     * Timeout, in seconds. Overrides any timeout provided on the task definition.
     */
    private Integer timeoutInSeconds;

    /*
     * The condition that needs to be met to run the task.
     */
    private String condition;

    /**
     * Creates an instance of CustomizationTaskInstance class.
     */
    public CustomizationTaskInstance() {
    }

    /**
     * Get the name property: Name of the task.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the task.
     * 
     * @param name the name value to set.
     * @return the CustomizationTaskInstance object itself.
     */
    public CustomizationTaskInstance withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the parameters property: Parameters for the task.
     * 
     * @return the parameters value.
     */
    public List<DefinitionParametersItem> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Parameters for the task.
     * 
     * @param parameters the parameters value to set.
     * @return the CustomizationTaskInstance object itself.
     */
    public CustomizationTaskInstance withParameters(List<DefinitionParametersItem> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the displayName property: Display name to help differentiate multiple instances of the same task.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name to help differentiate multiple instances of the same task.
     * 
     * @param displayName the displayName value to set.
     * @return the CustomizationTaskInstance object itself.
     */
    public CustomizationTaskInstance withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the timeoutInSeconds property: Timeout, in seconds. Overrides any timeout provided on the task definition.
     * 
     * @return the timeoutInSeconds value.
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    /**
     * Set the timeoutInSeconds property: Timeout, in seconds. Overrides any timeout provided on the task definition.
     * 
     * @param timeoutInSeconds the timeoutInSeconds value to set.
     * @return the CustomizationTaskInstance object itself.
     */
    public CustomizationTaskInstance withTimeoutInSeconds(Integer timeoutInSeconds) {
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * Get the condition property: The condition that needs to be met to run the task.
     * 
     * @return the condition value.
     */
    public String condition() {
        return this.condition;
    }

    /**
     * Set the condition property: The condition that needs to be met to run the task.
     * 
     * @param condition the condition value to set.
     * @return the CustomizationTaskInstance object itself.
     */
    public CustomizationTaskInstance withCondition(String condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model CustomizationTaskInstance"));
        }
        if (parameters() != null) {
            parameters().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomizationTaskInstance.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeNumberField("timeoutInSeconds", this.timeoutInSeconds);
        jsonWriter.writeStringField("condition", this.condition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomizationTaskInstance from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomizationTaskInstance if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomizationTaskInstance.
     */
    public static CustomizationTaskInstance fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomizationTaskInstance deserializedCustomizationTaskInstance = new CustomizationTaskInstance();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCustomizationTaskInstance.name = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    List<DefinitionParametersItem> parameters
                        = reader.readArray(reader1 -> DefinitionParametersItem.fromJson(reader1));
                    deserializedCustomizationTaskInstance.parameters = parameters;
                } else if ("displayName".equals(fieldName)) {
                    deserializedCustomizationTaskInstance.displayName = reader.getString();
                } else if ("timeoutInSeconds".equals(fieldName)) {
                    deserializedCustomizationTaskInstance.timeoutInSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("condition".equals(fieldName)) {
                    deserializedCustomizationTaskInstance.condition = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomizationTaskInstance;
        });
    }
}
