// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.devcenter.fluent.models.DevCenterPlanInner;
import com.azure.resourcemanager.devcenter.models.PlanUpdate;

/**
 * An instance of this class provides access to all the operations defined in PlansClient.
 */
public interface PlansClient {
    /**
     * Lists all devcenter plans in a subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the list devcenter plans operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DevCenterPlanInner> list();

    /**
     * Lists all devcenter plans in a subscription.
     * 
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the list devcenter plans operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DevCenterPlanInner> list(Integer top, Context context);

    /**
     * Lists all devcenter plans in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the list devcenter plans operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DevCenterPlanInner> listByResourceGroup(String resourceGroupName);

    /**
     * Lists all devcenter plans in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the list devcenter plans operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DevCenterPlanInner> listByResourceGroup(String resourceGroupName, Integer top, Context context);

    /**
     * Gets a devcenter plan.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a devcenter plan along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DevCenterPlanInner> getByResourceGroupWithResponse(String resourceGroupName, String planName,
        Context context);

    /**
     * Gets a devcenter plan.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a devcenter plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DevCenterPlanInner getByResourceGroup(String resourceGroupName, String planName);

    /**
     * Creates or updates a devcenter plan resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @param body Represents a devcenter plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents a devcenter plan resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DevCenterPlanInner>, DevCenterPlanInner> beginCreateOrUpdate(String resourceGroupName,
        String planName, DevCenterPlanInner body);

    /**
     * Creates or updates a devcenter plan resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @param body Represents a devcenter plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents a devcenter plan resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DevCenterPlanInner>, DevCenterPlanInner> beginCreateOrUpdate(String resourceGroupName,
        String planName, DevCenterPlanInner body, Context context);

    /**
     * Creates or updates a devcenter plan resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @param body Represents a devcenter plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a devcenter plan resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DevCenterPlanInner createOrUpdate(String resourceGroupName, String planName, DevCenterPlanInner body);

    /**
     * Creates or updates a devcenter plan resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @param body Represents a devcenter plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a devcenter plan resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DevCenterPlanInner createOrUpdate(String resourceGroupName, String planName, DevCenterPlanInner body,
        Context context);

    /**
     * Partially updates a devcenter plan.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @param body Updatable devcenter plan properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents a devcenter plan resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DevCenterPlanInner>, DevCenterPlanInner> beginUpdate(String resourceGroupName,
        String planName, PlanUpdate body);

    /**
     * Partially updates a devcenter plan.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @param body Updatable devcenter plan properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents a devcenter plan resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DevCenterPlanInner>, DevCenterPlanInner> beginUpdate(String resourceGroupName,
        String planName, PlanUpdate body, Context context);

    /**
     * Partially updates a devcenter plan.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @param body Updatable devcenter plan properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a devcenter plan resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DevCenterPlanInner update(String resourceGroupName, String planName, PlanUpdate body);

    /**
     * Partially updates a devcenter plan.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @param body Updatable devcenter plan properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a devcenter plan resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DevCenterPlanInner update(String resourceGroupName, String planName, PlanUpdate body, Context context);

    /**
     * Deletes a devcenter plan.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String planName);

    /**
     * Deletes a devcenter plan.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String planName, Context context);

    /**
     * Deletes a devcenter plan.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String planName);

    /**
     * Deletes a devcenter plan.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param planName The name of the devcenter plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String planName, Context context);
}
