// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.devcenter.fluent.DevCenterCatalogImageDefinitionsClient;
import com.azure.resourcemanager.devcenter.fluent.models.CatalogResourceValidationErrorDetailsInner;
import com.azure.resourcemanager.devcenter.fluent.models.ImageDefinitionInner;
import com.azure.resourcemanager.devcenter.models.CatalogResourceValidationErrorDetails;
import com.azure.resourcemanager.devcenter.models.DevCenterCatalogImageDefinitions;
import com.azure.resourcemanager.devcenter.models.ImageDefinition;

public final class DevCenterCatalogImageDefinitionsImpl implements DevCenterCatalogImageDefinitions {
    private static final ClientLogger LOGGER = new ClientLogger(DevCenterCatalogImageDefinitionsImpl.class);

    private final DevCenterCatalogImageDefinitionsClient innerClient;

    private final com.azure.resourcemanager.devcenter.DevCenterManager serviceManager;

    public DevCenterCatalogImageDefinitionsImpl(DevCenterCatalogImageDefinitionsClient innerClient,
        com.azure.resourcemanager.devcenter.DevCenterManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ImageDefinition> listByDevCenterCatalog(String resourceGroupName, String devCenterName,
        String catalogName) {
        PagedIterable<ImageDefinitionInner> inner
            = this.serviceClient().listByDevCenterCatalog(resourceGroupName, devCenterName, catalogName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ImageDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<ImageDefinition> listByDevCenterCatalog(String resourceGroupName, String devCenterName,
        String catalogName, Integer top, Context context) {
        PagedIterable<ImageDefinitionInner> inner
            = this.serviceClient().listByDevCenterCatalog(resourceGroupName, devCenterName, catalogName, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ImageDefinitionImpl(inner1, this.manager()));
    }

    public Response<ImageDefinition> getByDevCenterCatalogWithResponse(String resourceGroupName, String devCenterName,
        String catalogName, String imageDefinitionName, Context context) {
        Response<ImageDefinitionInner> inner = this.serviceClient()
            .getByDevCenterCatalogWithResponse(resourceGroupName, devCenterName, catalogName, imageDefinitionName,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ImageDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ImageDefinition getByDevCenterCatalog(String resourceGroupName, String devCenterName, String catalogName,
        String imageDefinitionName) {
        ImageDefinitionInner inner = this.serviceClient()
            .getByDevCenterCatalog(resourceGroupName, devCenterName, catalogName, imageDefinitionName);
        if (inner != null) {
            return new ImageDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CatalogResourceValidationErrorDetails> getErrorDetailsWithResponse(String resourceGroupName,
        String devCenterName, String catalogName, String imageDefinitionName, Context context) {
        Response<CatalogResourceValidationErrorDetailsInner> inner = this.serviceClient()
            .getErrorDetailsWithResponse(resourceGroupName, devCenterName, catalogName, imageDefinitionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CatalogResourceValidationErrorDetailsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CatalogResourceValidationErrorDetails getErrorDetails(String resourceGroupName, String devCenterName,
        String catalogName, String imageDefinitionName) {
        CatalogResourceValidationErrorDetailsInner inner
            = this.serviceClient().getErrorDetails(resourceGroupName, devCenterName, catalogName, imageDefinitionName);
        if (inner != null) {
            return new CatalogResourceValidationErrorDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void buildImage(String resourceGroupName, String devCenterName, String catalogName,
        String imageDefinitionName) {
        this.serviceClient().buildImage(resourceGroupName, devCenterName, catalogName, imageDefinitionName);
    }

    public void buildImage(String resourceGroupName, String devCenterName, String catalogName,
        String imageDefinitionName, Context context) {
        this.serviceClient().buildImage(resourceGroupName, devCenterName, catalogName, imageDefinitionName, context);
    }

    private DevCenterCatalogImageDefinitionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.devcenter.DevCenterManager manager() {
        return this.serviceManager;
    }
}
