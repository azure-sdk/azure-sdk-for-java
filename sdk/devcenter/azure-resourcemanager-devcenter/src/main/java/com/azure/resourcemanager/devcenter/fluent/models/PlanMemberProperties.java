// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.PlanMemberSyncStatus;
import com.azure.resourcemanager.devcenter.models.PlanMemberType;
import com.azure.resourcemanager.devcenter.models.ProvisioningState;
import java.io.IOException;

/**
 * Properties of the devcenter plan member.
 */
@Fluent
public final class PlanMemberProperties extends PlanMemberUpdateProperties {
    /*
     * The unique id of the member.
     */
    private String memberId;

    /*
     * The type of the member (user, group)
     */
    private PlanMemberType memberType;

    /*
     * The sync status of the member.
     */
    private PlanMemberSyncStatus syncStatus;

    /*
     * The provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of PlanMemberProperties class.
     */
    public PlanMemberProperties() {
    }

    /**
     * Get the memberId property: The unique id of the member.
     * 
     * @return the memberId value.
     */
    public String memberId() {
        return this.memberId;
    }

    /**
     * Set the memberId property: The unique id of the member.
     * 
     * @param memberId the memberId value to set.
     * @return the PlanMemberProperties object itself.
     */
    public PlanMemberProperties withMemberId(String memberId) {
        this.memberId = memberId;
        return this;
    }

    /**
     * Get the memberType property: The type of the member (user, group).
     * 
     * @return the memberType value.
     */
    public PlanMemberType memberType() {
        return this.memberType;
    }

    /**
     * Set the memberType property: The type of the member (user, group).
     * 
     * @param memberType the memberType value to set.
     * @return the PlanMemberProperties object itself.
     */
    public PlanMemberProperties withMemberType(PlanMemberType memberType) {
        this.memberType = memberType;
        return this;
    }

    /**
     * Get the syncStatus property: The sync status of the member.
     * 
     * @return the syncStatus value.
     */
    public PlanMemberSyncStatus syncStatus() {
        return this.syncStatus;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlanMemberProperties withTier(String tier) {
        super.withTier(tier);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (syncStatus() != null) {
            syncStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tier", tier());
        jsonWriter.writeStringField("memberId", this.memberId);
        jsonWriter.writeStringField("memberType", this.memberType == null ? null : this.memberType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlanMemberProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlanMemberProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PlanMemberProperties.
     */
    public static PlanMemberProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlanMemberProperties deserializedPlanMemberProperties = new PlanMemberProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tier".equals(fieldName)) {
                    deserializedPlanMemberProperties.withTier(reader.getString());
                } else if ("memberId".equals(fieldName)) {
                    deserializedPlanMemberProperties.memberId = reader.getString();
                } else if ("memberType".equals(fieldName)) {
                    deserializedPlanMemberProperties.memberType = PlanMemberType.fromString(reader.getString());
                } else if ("syncStatus".equals(fieldName)) {
                    deserializedPlanMemberProperties.syncStatus = PlanMemberSyncStatus.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPlanMemberProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlanMemberProperties;
        });
    }
}
