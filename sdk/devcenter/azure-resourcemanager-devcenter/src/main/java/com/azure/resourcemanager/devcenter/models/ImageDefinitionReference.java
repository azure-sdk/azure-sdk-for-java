// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A reference to an Image Definition.
 */
@Fluent
public final class ImageDefinitionReference implements JsonSerializable<ImageDefinitionReference> {
    /*
     * Name of the referenced Image Definition.
     */
    private String imageDefinition;

    /*
     * Parameters for the referenced Image Definition.
     */
    private List<DefinitionParametersItem> parameters;

    /**
     * Creates an instance of ImageDefinitionReference class.
     */
    public ImageDefinitionReference() {
    }

    /**
     * Get the imageDefinition property: Name of the referenced Image Definition.
     * 
     * @return the imageDefinition value.
     */
    public String imageDefinition() {
        return this.imageDefinition;
    }

    /**
     * Set the imageDefinition property: Name of the referenced Image Definition.
     * 
     * @param imageDefinition the imageDefinition value to set.
     * @return the ImageDefinitionReference object itself.
     */
    public ImageDefinitionReference withImageDefinition(String imageDefinition) {
        this.imageDefinition = imageDefinition;
        return this;
    }

    /**
     * Get the parameters property: Parameters for the referenced Image Definition.
     * 
     * @return the parameters value.
     */
    public List<DefinitionParametersItem> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Parameters for the referenced Image Definition.
     * 
     * @param parameters the parameters value to set.
     * @return the ImageDefinitionReference object itself.
     */
    public ImageDefinitionReference withParameters(List<DefinitionParametersItem> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imageDefinition() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property imageDefinition in model ImageDefinitionReference"));
        }
        if (parameters() != null) {
            parameters().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImageDefinitionReference.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("imageDefinition", this.imageDefinition);
        jsonWriter.writeArrayField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageDefinitionReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageDefinitionReference if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageDefinitionReference.
     */
    public static ImageDefinitionReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageDefinitionReference deserializedImageDefinitionReference = new ImageDefinitionReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageDefinition".equals(fieldName)) {
                    deserializedImageDefinitionReference.imageDefinition = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    List<DefinitionParametersItem> parameters
                        = reader.readArray(reader1 -> DefinitionParametersItem.fromJson(reader1));
                    deserializedImageDefinitionReference.parameters = parameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageDefinitionReference;
        });
    }
}
