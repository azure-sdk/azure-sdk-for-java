// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * A task group executed during the image definition build.
 */
@Immutable
public final class ImageDefinitionBuildTaskGroup implements JsonSerializable<ImageDefinitionBuildTaskGroup> {
    /*
     * The name of the task group.
     */
    private String name;

    /*
     * The status of the task group.
     */
    private ImageDefinitionBuildStatus status;

    /*
     * Start time of the task group.
     */
    private OffsetDateTime startTime;

    /*
     * End time of the task group.
     */
    private OffsetDateTime endTime;

    /*
     * The list of tasks executed during the task group.
     */
    private List<ImageDefinitionBuildTask> tasks;

    /**
     * Creates an instance of ImageDefinitionBuildTaskGroup class.
     */
    public ImageDefinitionBuildTaskGroup() {
    }

    /**
     * Get the name property: The name of the task group.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the status property: The status of the task group.
     * 
     * @return the status value.
     */
    public ImageDefinitionBuildStatus status() {
        return this.status;
    }

    /**
     * Get the startTime property: Start time of the task group.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: End time of the task group.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the tasks property: The list of tasks executed during the task group.
     * 
     * @return the tasks value.
     */
    public List<ImageDefinitionBuildTask> tasks() {
        return this.tasks;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tasks() != null) {
            tasks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageDefinitionBuildTaskGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageDefinitionBuildTaskGroup if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageDefinitionBuildTaskGroup.
     */
    public static ImageDefinitionBuildTaskGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageDefinitionBuildTaskGroup deserializedImageDefinitionBuildTaskGroup
                = new ImageDefinitionBuildTaskGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedImageDefinitionBuildTaskGroup.name = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedImageDefinitionBuildTaskGroup.status
                        = ImageDefinitionBuildStatus.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedImageDefinitionBuildTaskGroup.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedImageDefinitionBuildTaskGroup.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("tasks".equals(fieldName)) {
                    List<ImageDefinitionBuildTask> tasks
                        = reader.readArray(reader1 -> ImageDefinitionBuildTask.fromJson(reader1));
                    deserializedImageDefinitionBuildTaskGroup.tasks = tasks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageDefinitionBuildTaskGroup;
        });
    }
}
