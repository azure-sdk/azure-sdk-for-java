// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.devcenter.fluent.PlanMembersClient;
import com.azure.resourcemanager.devcenter.fluent.models.DevCenterPlanMemberInner;
import com.azure.resourcemanager.devcenter.models.DevCenterPlanMember;
import com.azure.resourcemanager.devcenter.models.PlanMembers;

public final class PlanMembersImpl implements PlanMembers {
    private static final ClientLogger LOGGER = new ClientLogger(PlanMembersImpl.class);

    private final PlanMembersClient innerClient;

    private final com.azure.resourcemanager.devcenter.DevCenterManager serviceManager;

    public PlanMembersImpl(PlanMembersClient innerClient,
        com.azure.resourcemanager.devcenter.DevCenterManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DevCenterPlanMember> list(String resourceGroupName, String planName) {
        PagedIterable<DevCenterPlanMemberInner> inner = this.serviceClient().list(resourceGroupName, planName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DevCenterPlanMemberImpl(inner1, this.manager()));
    }

    public PagedIterable<DevCenterPlanMember> list(String resourceGroupName, String planName, Integer top,
        Context context) {
        PagedIterable<DevCenterPlanMemberInner> inner
            = this.serviceClient().list(resourceGroupName, planName, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DevCenterPlanMemberImpl(inner1, this.manager()));
    }

    public Response<DevCenterPlanMember> getWithResponse(String resourceGroupName, String planName, String memberName,
        Context context) {
        Response<DevCenterPlanMemberInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, planName, memberName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DevCenterPlanMemberImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DevCenterPlanMember get(String resourceGroupName, String planName, String memberName) {
        DevCenterPlanMemberInner inner = this.serviceClient().get(resourceGroupName, planName, memberName);
        if (inner != null) {
            return new DevCenterPlanMemberImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String planName, String memberName) {
        this.serviceClient().delete(resourceGroupName, planName, memberName);
    }

    public void delete(String resourceGroupName, String planName, String memberName, Context context) {
        this.serviceClient().delete(resourceGroupName, planName, memberName, context);
    }

    public DevCenterPlanMember getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String planName = ResourceManagerUtils.getValueFromIdByName(id, "plans");
        if (planName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'plans'.", id)));
        }
        String memberName = ResourceManagerUtils.getValueFromIdByName(id, "members");
        if (memberName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'members'.", id)));
        }
        return this.getWithResponse(resourceGroupName, planName, memberName, Context.NONE).getValue();
    }

    public Response<DevCenterPlanMember> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String planName = ResourceManagerUtils.getValueFromIdByName(id, "plans");
        if (planName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'plans'.", id)));
        }
        String memberName = ResourceManagerUtils.getValueFromIdByName(id, "members");
        if (memberName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'members'.", id)));
        }
        return this.getWithResponse(resourceGroupName, planName, memberName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String planName = ResourceManagerUtils.getValueFromIdByName(id, "plans");
        if (planName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'plans'.", id)));
        }
        String memberName = ResourceManagerUtils.getValueFromIdByName(id, "members");
        if (memberName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'members'.", id)));
        }
        this.delete(resourceGroupName, planName, memberName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String planName = ResourceManagerUtils.getValueFromIdByName(id, "plans");
        if (planName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'plans'.", id)));
        }
        String memberName = ResourceManagerUtils.getValueFromIdByName(id, "members");
        if (memberName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'members'.", id)));
        }
        this.delete(resourceGroupName, planName, memberName, context);
    }

    private PlanMembersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.devcenter.DevCenterManager manager() {
        return this.serviceManager;
    }

    public DevCenterPlanMemberImpl define(String name) {
        return new DevCenterPlanMemberImpl(name, this.manager());
    }
}
