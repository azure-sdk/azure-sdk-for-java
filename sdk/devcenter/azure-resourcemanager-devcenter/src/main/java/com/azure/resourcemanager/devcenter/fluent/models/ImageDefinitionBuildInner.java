// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.ImageCreationErrorDetails;
import com.azure.resourcemanager.devcenter.models.ImageDefinitionBuildStatus;
import com.azure.resourcemanager.devcenter.models.ImageReference;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Represents a specific build of an Image Definition.
 */
@Immutable
public final class ImageDefinitionBuildInner extends ProxyResource {
    /*
     * Image Definition Build properties
     */
    private ImageDefinitionBuildProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ImageDefinitionBuildInner class.
     */
    public ImageDefinitionBuildInner() {
    }

    /**
     * Get the innerProperties property: Image Definition Build properties.
     * 
     * @return the innerProperties value.
     */
    private ImageDefinitionBuildProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the imageReference property: The specific image version used by the build.
     * 
     * @return the imageReference value.
     */
    public ImageReference imageReference() {
        return this.innerProperties() == null ? null : this.innerProperties().imageReference();
    }

    /**
     * Get the status property: The status of the build.
     * 
     * @return the status value.
     */
    public ImageDefinitionBuildStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the startTime property: Start time of the task group.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.innerProperties() == null ? null : this.innerProperties().startTime();
    }

    /**
     * Get the endTime property: End time of the task group.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.innerProperties() == null ? null : this.innerProperties().endTime();
    }

    /**
     * Get the errorDetails property: Details for image creation error. Populated when the image creation is not
     * successful.
     * 
     * @return the errorDetails value.
     */
    public ImageCreationErrorDetails errorDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().errorDetails();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageDefinitionBuildInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageDefinitionBuildInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageDefinitionBuildInner.
     */
    public static ImageDefinitionBuildInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageDefinitionBuildInner deserializedImageDefinitionBuildInner = new ImageDefinitionBuildInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedImageDefinitionBuildInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedImageDefinitionBuildInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedImageDefinitionBuildInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedImageDefinitionBuildInner.innerProperties
                        = ImageDefinitionBuildProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedImageDefinitionBuildInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageDefinitionBuildInner;
        });
    }
}
