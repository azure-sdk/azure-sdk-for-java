// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Settings to be used for customizations.
 */
@Fluent
public final class ProjectCustomizationSettings implements JsonSerializable<ProjectCustomizationSettings> {
    /*
     * The identities that can to be used in customization scenarios; e.g., to clone a repository.
     */
    private List<ProjectCustomizationManagedIdentity> identities;

    /*
     * Indicates whether user customizations are enabled.
     */
    private UserCustomizationsEnableStatus userCustomizationsEnableStatus;

    /**
     * Creates an instance of ProjectCustomizationSettings class.
     */
    public ProjectCustomizationSettings() {
    }

    /**
     * Get the identities property: The identities that can to be used in customization scenarios; e.g., to clone a
     * repository.
     * 
     * @return the identities value.
     */
    public List<ProjectCustomizationManagedIdentity> identities() {
        return this.identities;
    }

    /**
     * Set the identities property: The identities that can to be used in customization scenarios; e.g., to clone a
     * repository.
     * 
     * @param identities the identities value to set.
     * @return the ProjectCustomizationSettings object itself.
     */
    public ProjectCustomizationSettings withIdentities(List<ProjectCustomizationManagedIdentity> identities) {
        this.identities = identities;
        return this;
    }

    /**
     * Get the userCustomizationsEnableStatus property: Indicates whether user customizations are enabled.
     * 
     * @return the userCustomizationsEnableStatus value.
     */
    public UserCustomizationsEnableStatus userCustomizationsEnableStatus() {
        return this.userCustomizationsEnableStatus;
    }

    /**
     * Set the userCustomizationsEnableStatus property: Indicates whether user customizations are enabled.
     * 
     * @param userCustomizationsEnableStatus the userCustomizationsEnableStatus value to set.
     * @return the ProjectCustomizationSettings object itself.
     */
    public ProjectCustomizationSettings
        withUserCustomizationsEnableStatus(UserCustomizationsEnableStatus userCustomizationsEnableStatus) {
        this.userCustomizationsEnableStatus = userCustomizationsEnableStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identities() != null) {
            identities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("identities", this.identities, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("userCustomizationsEnableStatus",
            this.userCustomizationsEnableStatus == null ? null : this.userCustomizationsEnableStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectCustomizationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectCustomizationSettings if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectCustomizationSettings.
     */
    public static ProjectCustomizationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectCustomizationSettings deserializedProjectCustomizationSettings = new ProjectCustomizationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identities".equals(fieldName)) {
                    List<ProjectCustomizationManagedIdentity> identities
                        = reader.readArray(reader1 -> ProjectCustomizationManagedIdentity.fromJson(reader1));
                    deserializedProjectCustomizationSettings.identities = identities;
                } else if ("userCustomizationsEnableStatus".equals(fieldName)) {
                    deserializedProjectCustomizationSettings.userCustomizationsEnableStatus
                        = UserCustomizationsEnableStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectCustomizationSettings;
        });
    }
}
