// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Active hours configuration.
 */
@Fluent
public final class ActiveHoursConfiguration implements JsonSerializable<ActiveHoursConfiguration> {
    /*
     * Enables or disables whether the Dev Box should be kept awake during active hours.
     */
    private KeepAwakeEnableStatus keepAwakeEnableStatus;

    /*
     * Enables or disables whether the Dev Box should be automatically started at commencement of active hours.
     */
    private AutoStartEnableStatus autoStartEnableStatus;

    /*
     * The default IANA timezone id of the active hours.
     */
    private String defaultTimeZone;

    /*
     * The default start time of the active hours.
     */
    private Integer defaultStartTimeHour;

    /*
     * The default end time of the active hours
     */
    private Integer defaultEndTimeHour;

    /**
     * Creates an instance of ActiveHoursConfiguration class.
     */
    public ActiveHoursConfiguration() {
    }

    /**
     * Get the keepAwakeEnableStatus property: Enables or disables whether the Dev Box should be kept awake during
     * active hours.
     * 
     * @return the keepAwakeEnableStatus value.
     */
    public KeepAwakeEnableStatus keepAwakeEnableStatus() {
        return this.keepAwakeEnableStatus;
    }

    /**
     * Set the keepAwakeEnableStatus property: Enables or disables whether the Dev Box should be kept awake during
     * active hours.
     * 
     * @param keepAwakeEnableStatus the keepAwakeEnableStatus value to set.
     * @return the ActiveHoursConfiguration object itself.
     */
    public ActiveHoursConfiguration withKeepAwakeEnableStatus(KeepAwakeEnableStatus keepAwakeEnableStatus) {
        this.keepAwakeEnableStatus = keepAwakeEnableStatus;
        return this;
    }

    /**
     * Get the autoStartEnableStatus property: Enables or disables whether the Dev Box should be automatically started
     * at commencement of active hours.
     * 
     * @return the autoStartEnableStatus value.
     */
    public AutoStartEnableStatus autoStartEnableStatus() {
        return this.autoStartEnableStatus;
    }

    /**
     * Set the autoStartEnableStatus property: Enables or disables whether the Dev Box should be automatically started
     * at commencement of active hours.
     * 
     * @param autoStartEnableStatus the autoStartEnableStatus value to set.
     * @return the ActiveHoursConfiguration object itself.
     */
    public ActiveHoursConfiguration withAutoStartEnableStatus(AutoStartEnableStatus autoStartEnableStatus) {
        this.autoStartEnableStatus = autoStartEnableStatus;
        return this;
    }

    /**
     * Get the defaultTimeZone property: The default IANA timezone id of the active hours.
     * 
     * @return the defaultTimeZone value.
     */
    public String defaultTimeZone() {
        return this.defaultTimeZone;
    }

    /**
     * Set the defaultTimeZone property: The default IANA timezone id of the active hours.
     * 
     * @param defaultTimeZone the defaultTimeZone value to set.
     * @return the ActiveHoursConfiguration object itself.
     */
    public ActiveHoursConfiguration withDefaultTimeZone(String defaultTimeZone) {
        this.defaultTimeZone = defaultTimeZone;
        return this;
    }

    /**
     * Get the defaultStartTimeHour property: The default start time of the active hours.
     * 
     * @return the defaultStartTimeHour value.
     */
    public Integer defaultStartTimeHour() {
        return this.defaultStartTimeHour;
    }

    /**
     * Set the defaultStartTimeHour property: The default start time of the active hours.
     * 
     * @param defaultStartTimeHour the defaultStartTimeHour value to set.
     * @return the ActiveHoursConfiguration object itself.
     */
    public ActiveHoursConfiguration withDefaultStartTimeHour(Integer defaultStartTimeHour) {
        this.defaultStartTimeHour = defaultStartTimeHour;
        return this;
    }

    /**
     * Get the defaultEndTimeHour property: The default end time of the active hours.
     * 
     * @return the defaultEndTimeHour value.
     */
    public Integer defaultEndTimeHour() {
        return this.defaultEndTimeHour;
    }

    /**
     * Set the defaultEndTimeHour property: The default end time of the active hours.
     * 
     * @param defaultEndTimeHour the defaultEndTimeHour value to set.
     * @return the ActiveHoursConfiguration object itself.
     */
    public ActiveHoursConfiguration withDefaultEndTimeHour(Integer defaultEndTimeHour) {
        this.defaultEndTimeHour = defaultEndTimeHour;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keepAwakeEnableStatus",
            this.keepAwakeEnableStatus == null ? null : this.keepAwakeEnableStatus.toString());
        jsonWriter.writeStringField("autoStartEnableStatus",
            this.autoStartEnableStatus == null ? null : this.autoStartEnableStatus.toString());
        jsonWriter.writeStringField("defaultTimeZone", this.defaultTimeZone);
        jsonWriter.writeNumberField("defaultStartTimeHour", this.defaultStartTimeHour);
        jsonWriter.writeNumberField("defaultEndTimeHour", this.defaultEndTimeHour);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActiveHoursConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActiveHoursConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActiveHoursConfiguration.
     */
    public static ActiveHoursConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActiveHoursConfiguration deserializedActiveHoursConfiguration = new ActiveHoursConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keepAwakeEnableStatus".equals(fieldName)) {
                    deserializedActiveHoursConfiguration.keepAwakeEnableStatus
                        = KeepAwakeEnableStatus.fromString(reader.getString());
                } else if ("autoStartEnableStatus".equals(fieldName)) {
                    deserializedActiveHoursConfiguration.autoStartEnableStatus
                        = AutoStartEnableStatus.fromString(reader.getString());
                } else if ("defaultTimeZone".equals(fieldName)) {
                    deserializedActiveHoursConfiguration.defaultTimeZone = reader.getString();
                } else if ("defaultStartTimeHour".equals(fieldName)) {
                    deserializedActiveHoursConfiguration.defaultStartTimeHour = reader.getNullable(JsonReader::getInt);
                } else if ("defaultEndTimeHour".equals(fieldName)) {
                    deserializedActiveHoursConfiguration.defaultEndTimeHour = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActiveHoursConfiguration;
        });
    }
}
