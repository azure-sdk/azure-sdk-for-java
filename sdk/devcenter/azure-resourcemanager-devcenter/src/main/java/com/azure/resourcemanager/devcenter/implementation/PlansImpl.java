// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.devcenter.fluent.PlansClient;
import com.azure.resourcemanager.devcenter.fluent.models.DevCenterPlanInner;
import com.azure.resourcemanager.devcenter.models.DevCenterPlan;
import com.azure.resourcemanager.devcenter.models.Plans;

public final class PlansImpl implements Plans {
    private static final ClientLogger LOGGER = new ClientLogger(PlansImpl.class);

    private final PlansClient innerClient;

    private final com.azure.resourcemanager.devcenter.DevCenterManager serviceManager;

    public PlansImpl(PlansClient innerClient, com.azure.resourcemanager.devcenter.DevCenterManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DevCenterPlan> list() {
        PagedIterable<DevCenterPlanInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DevCenterPlanImpl(inner1, this.manager()));
    }

    public PagedIterable<DevCenterPlan> list(Integer top, Context context) {
        PagedIterable<DevCenterPlanInner> inner = this.serviceClient().list(top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DevCenterPlanImpl(inner1, this.manager()));
    }

    public PagedIterable<DevCenterPlan> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DevCenterPlanInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DevCenterPlanImpl(inner1, this.manager()));
    }

    public PagedIterable<DevCenterPlan> listByResourceGroup(String resourceGroupName, Integer top, Context context) {
        PagedIterable<DevCenterPlanInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DevCenterPlanImpl(inner1, this.manager()));
    }

    public Response<DevCenterPlan> getByResourceGroupWithResponse(String resourceGroupName, String planName,
        Context context) {
        Response<DevCenterPlanInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, planName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DevCenterPlanImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DevCenterPlan getByResourceGroup(String resourceGroupName, String planName) {
        DevCenterPlanInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, planName);
        if (inner != null) {
            return new DevCenterPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String planName) {
        this.serviceClient().delete(resourceGroupName, planName);
    }

    public void delete(String resourceGroupName, String planName, Context context) {
        this.serviceClient().delete(resourceGroupName, planName, context);
    }

    public DevCenterPlan getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String planName = ResourceManagerUtils.getValueFromIdByName(id, "plans");
        if (planName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'plans'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, planName, Context.NONE).getValue();
    }

    public Response<DevCenterPlan> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String planName = ResourceManagerUtils.getValueFromIdByName(id, "plans");
        if (planName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'plans'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, planName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String planName = ResourceManagerUtils.getValueFromIdByName(id, "plans");
        if (planName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'plans'.", id)));
        }
        this.delete(resourceGroupName, planName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String planName = ResourceManagerUtils.getValueFromIdByName(id, "plans");
        if (planName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'plans'.", id)));
        }
        this.delete(resourceGroupName, planName, context);
    }

    private PlansClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.devcenter.DevCenterManager manager() {
        return this.serviceManager;
    }

    public DevCenterPlanImpl define(String name) {
        return new DevCenterPlanImpl(name, this.manager());
    }
}
