// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * A task executed during the image definition build.
 */
@Fluent
public final class ImageDefinitionBuildTask implements JsonSerializable<ImageDefinitionBuildTask> {
    /*
     * The name of the task.
     */
    private String name;

    /*
     * Parameters for the task.
     */
    private List<ImageDefinitionBuildTaskParametersItem> parameters;

    /*
     * Display name to help differentiate multiple instances of the same task.
     */
    private String displayName;

    /*
     * ID of the task instance.
     */
    private String id;

    /*
     * Start time of the task.
     */
    private OffsetDateTime startTime;

    /*
     * End time of the task.
     */
    private OffsetDateTime endTime;

    /*
     * The status of the task.
     */
    private ImageDefinitionBuildStatus status;

    /*
     * The URI for retrieving logs for the task execution.
     */
    private String logUri;

    /**
     * Creates an instance of ImageDefinitionBuildTask class.
     */
    public ImageDefinitionBuildTask() {
    }

    /**
     * Get the name property: The name of the task.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the task.
     * 
     * @param name the name value to set.
     * @return the ImageDefinitionBuildTask object itself.
     */
    public ImageDefinitionBuildTask withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the parameters property: Parameters for the task.
     * 
     * @return the parameters value.
     */
    public List<ImageDefinitionBuildTaskParametersItem> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Parameters for the task.
     * 
     * @param parameters the parameters value to set.
     * @return the ImageDefinitionBuildTask object itself.
     */
    public ImageDefinitionBuildTask withParameters(List<ImageDefinitionBuildTaskParametersItem> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the displayName property: Display name to help differentiate multiple instances of the same task.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name to help differentiate multiple instances of the same task.
     * 
     * @param displayName the displayName value to set.
     * @return the ImageDefinitionBuildTask object itself.
     */
    public ImageDefinitionBuildTask withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the id property: ID of the task instance.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the startTime property: Start time of the task.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: End time of the task.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the status property: The status of the task.
     * 
     * @return the status value.
     */
    public ImageDefinitionBuildStatus status() {
        return this.status;
    }

    /**
     * Get the logUri property: The URI for retrieving logs for the task execution.
     * 
     * @return the logUri value.
     */
    public String logUri() {
        return this.logUri;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parameters() != null) {
            parameters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("displayName", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageDefinitionBuildTask from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageDefinitionBuildTask if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageDefinitionBuildTask.
     */
    public static ImageDefinitionBuildTask fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageDefinitionBuildTask deserializedImageDefinitionBuildTask = new ImageDefinitionBuildTask();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedImageDefinitionBuildTask.name = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    List<ImageDefinitionBuildTaskParametersItem> parameters
                        = reader.readArray(reader1 -> ImageDefinitionBuildTaskParametersItem.fromJson(reader1));
                    deserializedImageDefinitionBuildTask.parameters = parameters;
                } else if ("displayName".equals(fieldName)) {
                    deserializedImageDefinitionBuildTask.displayName = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedImageDefinitionBuildTask.id = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedImageDefinitionBuildTask.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedImageDefinitionBuildTask.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedImageDefinitionBuildTask.status
                        = ImageDefinitionBuildStatus.fromString(reader.getString());
                } else if ("logUri".equals(fieldName)) {
                    deserializedImageDefinitionBuildTask.logUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageDefinitionBuildTask;
        });
    }
}
