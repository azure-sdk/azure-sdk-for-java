// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.ProvisioningState;
import com.azure.resourcemanager.devcenter.models.ResourcePolicy;
import java.io.IOException;
import java.util.List;

/**
 * Represents an curation profile resource.
 */
@Fluent
public final class CurationProfileInner extends ProxyResource {
    /*
     * Properties of an curation profile.
     */
    private CurationProfileProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of CurationProfileInner class.
     */
    public CurationProfileInner() {
    }

    /**
     * Get the innerProperties property: Properties of an curation profile.
     * 
     * @return the innerProperties value.
     */
    private CurationProfileProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the resourcePolicies property: Resource policies that are a part of this curation profile.
     * 
     * @return the resourcePolicies value.
     */
    public List<ResourcePolicy> resourcePolicies() {
        return this.innerProperties() == null ? null : this.innerProperties().resourcePolicies();
    }

    /**
     * Set the resourcePolicies property: Resource policies that are a part of this curation profile.
     * 
     * @param resourcePolicies the resourcePolicies value to set.
     * @return the CurationProfileInner object itself.
     */
    public CurationProfileInner withResourcePolicies(List<ResourcePolicy> resourcePolicies) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CurationProfileProperties();
        }
        this.innerProperties().withResourcePolicies(resourcePolicies);
        return this;
    }

    /**
     * Get the scopes property: Resources that have access to the shared resources that are a part of this curation
     * profile.
     * 
     * @return the scopes value.
     */
    public List<String> scopes() {
        return this.innerProperties() == null ? null : this.innerProperties().scopes();
    }

    /**
     * Set the scopes property: Resources that have access to the shared resources that are a part of this curation
     * profile.
     * 
     * @param scopes the scopes value to set.
     * @return the CurationProfileInner object itself.
     */
    public CurationProfileInner withScopes(List<String> scopes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CurationProfileProperties();
        }
        this.innerProperties().withScopes(scopes);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CurationProfileInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CurationProfileInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CurationProfileInner.
     */
    public static CurationProfileInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CurationProfileInner deserializedCurationProfileInner = new CurationProfileInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCurationProfileInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCurationProfileInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCurationProfileInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedCurationProfileInner.innerProperties = CurationProfileProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedCurationProfileInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCurationProfileInner;
        });
    }
}
