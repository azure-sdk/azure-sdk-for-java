// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.AutoImageBuildStatus;
import com.azure.resourcemanager.devcenter.models.CatalogResourceValidationStatus;
import com.azure.resourcemanager.devcenter.models.ImageReference;
import com.azure.resourcemanager.devcenter.models.ImageValidationErrorDetails;
import com.azure.resourcemanager.devcenter.models.ImageValidationStatus;
import com.azure.resourcemanager.devcenter.models.LatestImageBuild;
import java.io.IOException;

/**
 * Represents a definition for an Image.
 */
@Fluent
public final class ImageDefinitionInner extends ProxyResource {
    /*
     * Image Definition properties
     */
    private ImageDefinitionProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ImageDefinitionInner class.
     */
    public ImageDefinitionInner() {
    }

    /**
     * Get the innerProperties property: Image Definition properties.
     * 
     * @return the innerProperties value.
     */
    private ImageDefinitionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the imageReference property: Image reference information.
     * 
     * @return the imageReference value.
     */
    public ImageReference imageReference() {
        return this.innerProperties() == null ? null : this.innerProperties().imageReference();
    }

    /**
     * Set the imageReference property: Image reference information.
     * 
     * @param imageReference the imageReference value to set.
     * @return the ImageDefinitionInner object itself.
     */
    public ImageDefinitionInner withImageReference(ImageReference imageReference) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ImageDefinitionProperties();
        }
        this.innerProperties().withImageReference(imageReference);
        return this;
    }

    /**
     * Get the fileUrl property: The URL to the repository file containing the image definition.
     * 
     * @return the fileUrl value.
     */
    public String fileUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().fileUrl();
    }

    /**
     * Get the latestBuild property: Details about the latest build.
     * 
     * @return the latestBuild value.
     */
    public LatestImageBuild latestBuild() {
        return this.innerProperties() == null ? null : this.innerProperties().latestBuild();
    }

    /**
     * Set the latestBuild property: Details about the latest build.
     * 
     * @param latestBuild the latestBuild value to set.
     * @return the ImageDefinitionInner object itself.
     */
    public ImageDefinitionInner withLatestBuild(LatestImageBuild latestBuild) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ImageDefinitionProperties();
        }
        this.innerProperties().withLatestBuild(latestBuild);
        return this;
    }

    /**
     * Get the imageValidationStatus property: Validation status of the configured image.
     * 
     * @return the imageValidationStatus value.
     */
    public ImageValidationStatus imageValidationStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().imageValidationStatus();
    }

    /**
     * Get the imageValidationErrorDetails property: Details for image validator error. Populated when the image
     * validation is not successful.
     * 
     * @return the imageValidationErrorDetails value.
     */
    public ImageValidationErrorDetails imageValidationErrorDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().imageValidationErrorDetails();
    }

    /**
     * Get the validationStatus property: Validation status for the Image Definition.
     * 
     * @return the validationStatus value.
     */
    public CatalogResourceValidationStatus validationStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().validationStatus();
    }

    /**
     * Get the activeImageReference property: Image reference information for the currently active image (only populated
     * during updates).
     * 
     * @return the activeImageReference value.
     */
    public ImageReference activeImageReference() {
        return this.innerProperties() == null ? null : this.innerProperties().activeImageReference();
    }

    /**
     * Get the autoImageBuild property: Indicates if automatic image builds will be triggered for image definition
     * updates.
     * 
     * @return the autoImageBuild value.
     */
    public AutoImageBuildStatus autoImageBuild() {
        return this.innerProperties() == null ? null : this.innerProperties().autoImageBuild();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageDefinitionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageDefinitionInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageDefinitionInner.
     */
    public static ImageDefinitionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageDefinitionInner deserializedImageDefinitionInner = new ImageDefinitionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedImageDefinitionInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedImageDefinitionInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedImageDefinitionInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedImageDefinitionInner.innerProperties = ImageDefinitionProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedImageDefinitionInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageDefinitionInner;
        });
    }
}
