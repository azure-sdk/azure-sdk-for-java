// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.resourcemanager.devcenter.models.DevboxDisksEncryptionEnableStatus;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devcenter.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EncryptionSets CreateOrUpdate.
 */
public final class EncryptionSetsCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/devcenter/resource-manager/Microsoft.DevCenter/preview/2025-04-01-preview/examples/
     * DevCenterEncryptionSets_Create.json
     */
    /**
     * Sample code: EncryptionSets_Create.
     * 
     * @param manager Entry point to DevCenterManager.
     */
    public static void encryptionSetsCreate(com.azure.resourcemanager.devcenter.DevCenterManager manager) {
        manager.encryptionSets()
            .define("EncryptionWestUs")
            .withRegion("westus")
            .withExistingDevcenter("rg1", "Contoso")
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/identityGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testidentity1",
                    new UserAssignedIdentity())))
            .withDevboxDisksEncryptionEnableStatus(DevboxDisksEncryptionEnableStatus.ENABLED)
            .withKeyEncryptionKeyUrl("https://contosovaultwestus.vault.azure.net/keys/contosokek")
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
