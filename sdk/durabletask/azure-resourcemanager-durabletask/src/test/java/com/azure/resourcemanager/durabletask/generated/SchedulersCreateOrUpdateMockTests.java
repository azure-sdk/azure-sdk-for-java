// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.durabletask.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.durabletask.DurabletaskManager;
import com.azure.resourcemanager.durabletask.models.Scheduler;
import com.azure.resourcemanager.durabletask.models.SchedulerProperties;
import com.azure.resourcemanager.durabletask.models.SchedulerSku;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SchedulersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"endpoint\":\"thz\",\"ipAllowlist\":[\"qdrabhjybigehoqf\",\"owskanyktz\"],\"sku\":{\"name\":\"cuiywgqyw\",\"capacity\":1211142115,\"redundancyState\":\"Zone\"}},\"location\":\"nhzgpphrcgyn\",\"tags\":{\"vmmcoofs\":\"pec\",\"y\":\"lzevgbmqjqab\",\"wnfnbacf\":\"mivkwlzuvcc\",\"bqqwxrj\":\"onlebxetqgtzxdpn\"},\"id\":\"eallnwsubisnj\",\"name\":\"mpmngnzscxaqwoo\",\"type\":\"hcbonqvpkvlr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DurabletaskManager manager = DurabletaskManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Scheduler response = manager.schedulers()
            .define("c")
            .withRegion("ntwndeicbtwnpzao")
            .withExistingResourceGroup("ukdkexxppofmxa")
            .withTags(mapOf("qkwpyeicxmqc", "hrhcffcyddglmjth", "pbobjo", "wqvhkhixuigdt", "w", "hm", "a", "a"))
            .withProperties(new SchedulerProperties().withIpAllowlist(Arrays.asList("hvpmoue", "hd"))
                .withSku(new SchedulerSku().withName("xibqeojnx").withCapacity(2010157167)))
            .create();

        Assertions.assertEquals("nhzgpphrcgyn", response.location());
        Assertions.assertEquals("pec", response.tags().get("vmmcoofs"));
        Assertions.assertEquals("qdrabhjybigehoqf", response.properties().ipAllowlist().get(0));
        Assertions.assertEquals("cuiywgqyw", response.properties().sku().name());
        Assertions.assertEquals(1211142115, response.properties().sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
