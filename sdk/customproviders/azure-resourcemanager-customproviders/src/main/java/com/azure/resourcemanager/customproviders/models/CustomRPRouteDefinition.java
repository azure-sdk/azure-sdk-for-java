// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customproviders.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A route definition that defines an action or resource that can be interacted with through the custom resource
 * provider.
 */
@Fluent
public class CustomRPRouteDefinition implements JsonSerializable<CustomRPRouteDefinition> {
    /*
     * The name of the route definition. This becomes the name for the ARM extension (e.g.
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/
     * resourceProviders/{resourceProviderName}/{name}')
     */
    private String name;

    /*
     * The route definition endpoint URI that the custom resource provider will proxy requests to. This can be in the
     * form of a flat URI (e.g. 'https://testendpoint/') or can specify to route via a path (e.g.
     * 'https://testendpoint/{requestPath}')
     */
    private String endpoint;

    /**
     * Creates an instance of CustomRPRouteDefinition class.
     */
    public CustomRPRouteDefinition() {
    }

    /**
     * Get the name property: The name of the route definition. This becomes the name for the ARM extension (e.g.
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}/{name}').
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the route definition. This becomes the name for the ARM extension (e.g.
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}/{name}').
     * 
     * @param name the name value to set.
     * @return the CustomRPRouteDefinition object itself.
     */
    public CustomRPRouteDefinition withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the endpoint property: The route definition endpoint URI that the custom resource provider will proxy
     * requests to. This can be in the form of a flat URI (e.g. 'https://testendpoint/') or can specify to route via a
     * path (e.g. 'https://testendpoint/{requestPath}').
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: The route definition endpoint URI that the custom resource provider will proxy
     * requests to. This can be in the form of a flat URI (e.g. 'https://testendpoint/') or can specify to route via a
     * path (e.g. 'https://testendpoint/{requestPath}').
     * 
     * @param endpoint the endpoint value to set.
     * @return the CustomRPRouteDefinition object itself.
     */
    public CustomRPRouteDefinition withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model CustomRPRouteDefinition"));
        }
        if (endpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endpoint in model CustomRPRouteDefinition"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomRPRouteDefinition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("endpoint", this.endpoint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomRPRouteDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomRPRouteDefinition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomRPRouteDefinition.
     */
    public static CustomRPRouteDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomRPRouteDefinition deserializedCustomRPRouteDefinition = new CustomRPRouteDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCustomRPRouteDefinition.name = reader.getString();
                } else if ("endpoint".equals(fieldName)) {
                    deserializedCustomRPRouteDefinition.endpoint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomRPRouteDefinition;
        });
    }
}
