// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customproviders.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.customproviders.models.ProvisioningState;
import java.io.IOException;

/**
 * The properties of the association.
 */
@Fluent
public final class AssociationProperties implements JsonSerializable<AssociationProperties> {
    /*
     * The REST resource instance of the target resource for this association.
     */
    private String targetResourceId;

    /*
     * The provisioning state of the association.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AssociationProperties class.
     */
    public AssociationProperties() {
    }

    /**
     * Get the targetResourceId property: The REST resource instance of the target resource for this association.
     * 
     * @return the targetResourceId value.
     */
    public String targetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Set the targetResourceId property: The REST resource instance of the target resource for this association.
     * 
     * @param targetResourceId the targetResourceId value to set.
     * @return the AssociationProperties object itself.
     */
    public AssociationProperties withTargetResourceId(String targetResourceId) {
        this.targetResourceId = targetResourceId;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the association.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetResourceId", this.targetResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssociationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssociationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssociationProperties.
     */
    public static AssociationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssociationProperties deserializedAssociationProperties = new AssociationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetResourceId".equals(fieldName)) {
                    deserializedAssociationProperties.targetResourceId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAssociationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssociationProperties;
        });
    }
}
