// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.translation.text.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Translate targets parameters.
 */
@Fluent
public final class TranslateTarget implements JsonSerializable<TranslateTarget> {
    /*
     * Specifies the language of the output text. The target language must be one of the supported languages included
     * in the translation scope. It's possible to translate to multiple languages simultaneously by including
     * multiple string values in the targetsLanguage array.
     */
    @Generated
    private final List<String> language;

    /*
     * Specifies the script of the translated text.
     */
    @Generated
    private String script;

    /*
     * Specifies how profanities should be treated in translations.
     * Possible values are: NoAction (default), Marked or Deleted.
     */
    @Generated
    private ProfanityAction profanityAction;

    /*
     * Specifies how profanities should be marked in translations.
     * Possible values are: Asterisk (default) or Tag.
     */
    @Generated
    private ProfanityMarker profanityMarker;

    /*
     * Default is ‘general’, which uses NMT system.
     * ‘abc-inc-gpt-4o’, and ‘abc-inc-gpt-4o-mini’ are examples of deployment names which use GPT-4o uses or
     * GPT-4o-mini model. ‘gpt-4o’ uses GPT-4o model.
     * 
     * ‘<custom model id>’ uses the custom NMT model tuned by customer.
     * ‘best’ system determines which is the best model to use for the request. This intelligence could be introduced
     * in future. Customer should have deployed it in their resource.
     */
    @Generated
    private String deploymentNameModel;

    /*
     * In the case where a custom system is being used, specifies that the service is allowed to fall back to a
     * general system when a custom system doesn't exist.
     * In the case where a Large Language Model is being used, specifies that the service is allowed to fall
     * back to a Small Language Model if an error occurs.
     * Possible values are: true (default) or false.
     * 
     * allowFallback=false specifies that the translation should only use systems trained for the category specified
     * by the request. If a translation for language X to language Y requires chaining through a pivot language E,
     * then all the systems in the chain (X → E and E → Y) will need to be custom and have the same category.
     * If no system is found with the specific category, the request will return a 400 status code. allowFallback=true
     * specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
     */
    @Generated
    private Boolean allowFallback;

    /*
     * Defines complexity of LLM prompts to provide high accuracy translation.
     */
    @Generated
    private String grade;

    /*
     * Desired tone of target translation.
     */
    @Generated
    private String tone;

    /*
     * Desired gender of target translation.
     */
    @Generated
    private String gender;

    /*
     * Reference dataset ID having sentence pair to generate adaptive customized translation.
     */
    @Generated
    private String adaptiveDatasetId;

    /*
     * Reference sentence pairs to generate adaptive results.
     */
    @Generated
    private List<ReferenceSentencePair> referenceTextPairs;

    /**
     * Creates an instance of TranslateTarget class.
     * 
     * @param language the language value to set.
     */
    @Generated
    public TranslateTarget(List<String> language) {
        this.language = language;
    }

    /**
     * Get the language property: Specifies the language of the output text. The target language must be one of the
     * supported languages included
     * in the translation scope. It's possible to translate to multiple languages simultaneously by including
     * multiple string values in the targetsLanguage array.
     * 
     * @return the language value.
     */
    @Generated
    public List<String> getLanguage() {
        return this.language;
    }

    /**
     * Get the script property: Specifies the script of the translated text.
     * 
     * @return the script value.
     */
    @Generated
    public String getScript() {
        return this.script;
    }

    /**
     * Set the script property: Specifies the script of the translated text.
     * 
     * @param script the script value to set.
     * @return the TranslateTarget object itself.
     */
    @Generated
    public TranslateTarget setScript(String script) {
        this.script = script;
        return this;
    }

    /**
     * Get the profanityAction property: Specifies how profanities should be treated in translations.
     * Possible values are: NoAction (default), Marked or Deleted.
     * 
     * @return the profanityAction value.
     */
    @Generated
    public ProfanityAction getProfanityAction() {
        return this.profanityAction;
    }

    /**
     * Set the profanityAction property: Specifies how profanities should be treated in translations.
     * Possible values are: NoAction (default), Marked or Deleted.
     * 
     * @param profanityAction the profanityAction value to set.
     * @return the TranslateTarget object itself.
     */
    @Generated
    public TranslateTarget setProfanityAction(ProfanityAction profanityAction) {
        this.profanityAction = profanityAction;
        return this;
    }

    /**
     * Get the profanityMarker property: Specifies how profanities should be marked in translations.
     * Possible values are: Asterisk (default) or Tag.
     * 
     * @return the profanityMarker value.
     */
    @Generated
    public ProfanityMarker getProfanityMarker() {
        return this.profanityMarker;
    }

    /**
     * Set the profanityMarker property: Specifies how profanities should be marked in translations.
     * Possible values are: Asterisk (default) or Tag.
     * 
     * @param profanityMarker the profanityMarker value to set.
     * @return the TranslateTarget object itself.
     */
    @Generated
    public TranslateTarget setProfanityMarker(ProfanityMarker profanityMarker) {
        this.profanityMarker = profanityMarker;
        return this;
    }

    /**
     * Get the deploymentNameModel property: Default is ‘general’, which uses NMT system.
     * ‘abc-inc-gpt-4o’, and ‘abc-inc-gpt-4o-mini’ are examples of deployment names which use GPT-4o uses or
     * GPT-4o-mini model. ‘gpt-4o’ uses GPT-4o model.
     * 
     * ‘&lt;custom model id&gt;’ uses the custom NMT model tuned by customer.
     * ‘best’ system determines which is the best model to use for the request. This intelligence could be introduced
     * in future. Customer should have deployed it in their resource.
     * 
     * @return the deploymentNameModel value.
     */
    @Generated
    public String getDeploymentNameModel() {
        return this.deploymentNameModel;
    }

    /**
     * Set the deploymentNameModel property: Default is ‘general’, which uses NMT system.
     * ‘abc-inc-gpt-4o’, and ‘abc-inc-gpt-4o-mini’ are examples of deployment names which use GPT-4o uses or
     * GPT-4o-mini model. ‘gpt-4o’ uses GPT-4o model.
     * 
     * ‘&lt;custom model id&gt;’ uses the custom NMT model tuned by customer.
     * ‘best’ system determines which is the best model to use for the request. This intelligence could be introduced
     * in future. Customer should have deployed it in their resource.
     * 
     * @param deploymentNameModel the deploymentNameModel value to set.
     * @return the TranslateTarget object itself.
     */
    @Generated
    public TranslateTarget setDeploymentNameModel(String deploymentNameModel) {
        this.deploymentNameModel = deploymentNameModel;
        return this;
    }

    /**
     * Get the allowFallback property: In the case where a custom system is being used, specifies that the service is
     * allowed to fall back to a
     * general system when a custom system doesn't exist.
     * In the case where a Large Language Model is being used, specifies that the service is allowed to fall
     * back to a Small Language Model if an error occurs.
     * Possible values are: true (default) or false.
     * 
     * allowFallback=false specifies that the translation should only use systems trained for the category specified
     * by the request. If a translation for language X to language Y requires chaining through a pivot language E,
     * then all the systems in the chain (X → E and E → Y) will need to be custom and have the same category.
     * If no system is found with the specific category, the request will return a 400 status code. allowFallback=true
     * specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
     * 
     * @return the allowFallback value.
     */
    @Generated
    public Boolean isAllowFallback() {
        return this.allowFallback;
    }

    /**
     * Set the allowFallback property: In the case where a custom system is being used, specifies that the service is
     * allowed to fall back to a
     * general system when a custom system doesn't exist.
     * In the case where a Large Language Model is being used, specifies that the service is allowed to fall
     * back to a Small Language Model if an error occurs.
     * Possible values are: true (default) or false.
     * 
     * allowFallback=false specifies that the translation should only use systems trained for the category specified
     * by the request. If a translation for language X to language Y requires chaining through a pivot language E,
     * then all the systems in the chain (X → E and E → Y) will need to be custom and have the same category.
     * If no system is found with the specific category, the request will return a 400 status code. allowFallback=true
     * specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
     * 
     * @param allowFallback the allowFallback value to set.
     * @return the TranslateTarget object itself.
     */
    @Generated
    public TranslateTarget setAllowFallback(Boolean allowFallback) {
        this.allowFallback = allowFallback;
        return this;
    }

    /**
     * Get the grade property: Defines complexity of LLM prompts to provide high accuracy translation.
     * 
     * @return the grade value.
     */
    @Generated
    public String getGrade() {
        return this.grade;
    }

    /**
     * Set the grade property: Defines complexity of LLM prompts to provide high accuracy translation.
     * 
     * @param grade the grade value to set.
     * @return the TranslateTarget object itself.
     */
    @Generated
    public TranslateTarget setGrade(String grade) {
        this.grade = grade;
        return this;
    }

    /**
     * Get the tone property: Desired tone of target translation.
     * 
     * @return the tone value.
     */
    @Generated
    public String getTone() {
        return this.tone;
    }

    /**
     * Set the tone property: Desired tone of target translation.
     * 
     * @param tone the tone value to set.
     * @return the TranslateTarget object itself.
     */
    @Generated
    public TranslateTarget setTone(String tone) {
        this.tone = tone;
        return this;
    }

    /**
     * Get the gender property: Desired gender of target translation.
     * 
     * @return the gender value.
     */
    @Generated
    public String getGender() {
        return this.gender;
    }

    /**
     * Set the gender property: Desired gender of target translation.
     * 
     * @param gender the gender value to set.
     * @return the TranslateTarget object itself.
     */
    @Generated
    public TranslateTarget setGender(String gender) {
        this.gender = gender;
        return this;
    }

    /**
     * Get the adaptiveDatasetId property: Reference dataset ID having sentence pair to generate adaptive customized
     * translation.
     * 
     * @return the adaptiveDatasetId value.
     */
    @Generated
    public String getAdaptiveDatasetId() {
        return this.adaptiveDatasetId;
    }

    /**
     * Set the adaptiveDatasetId property: Reference dataset ID having sentence pair to generate adaptive customized
     * translation.
     * 
     * @param adaptiveDatasetId the adaptiveDatasetId value to set.
     * @return the TranslateTarget object itself.
     */
    @Generated
    public TranslateTarget setAdaptiveDatasetId(String adaptiveDatasetId) {
        this.adaptiveDatasetId = adaptiveDatasetId;
        return this;
    }

    /**
     * Get the referenceTextPairs property: Reference sentence pairs to generate adaptive results.
     * 
     * @return the referenceTextPairs value.
     */
    @Generated
    public List<ReferenceSentencePair> getReferenceTextPairs() {
        return this.referenceTextPairs;
    }

    /**
     * Set the referenceTextPairs property: Reference sentence pairs to generate adaptive results.
     * 
     * @param referenceTextPairs the referenceTextPairs value to set.
     * @return the TranslateTarget object itself.
     */
    @Generated
    public TranslateTarget setReferenceTextPairs(List<ReferenceSentencePair> referenceTextPairs) {
        this.referenceTextPairs = referenceTextPairs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("language", this.language, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("script", this.script);
        jsonWriter.writeStringField("profanityAction",
            this.profanityAction == null ? null : this.profanityAction.toString());
        jsonWriter.writeStringField("profanityMarker",
            this.profanityMarker == null ? null : this.profanityMarker.toString());
        jsonWriter.writeStringField("deploymentNameModel", this.deploymentNameModel);
        jsonWriter.writeBooleanField("allowFallback", this.allowFallback);
        jsonWriter.writeStringField("grade", this.grade);
        jsonWriter.writeStringField("tone", this.tone);
        jsonWriter.writeStringField("gender", this.gender);
        jsonWriter.writeStringField("adaptiveDatasetId", this.adaptiveDatasetId);
        jsonWriter.writeArrayField("referenceTextPairs", this.referenceTextPairs,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranslateTarget from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranslateTarget if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranslateTarget.
     */
    @Generated
    public static TranslateTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> language = null;
            String script = null;
            ProfanityAction profanityAction = null;
            ProfanityMarker profanityMarker = null;
            String deploymentNameModel = null;
            Boolean allowFallback = null;
            String grade = null;
            String tone = null;
            String gender = null;
            String adaptiveDatasetId = null;
            List<ReferenceSentencePair> referenceTextPairs = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("language".equals(fieldName)) {
                    language = reader.readArray(reader1 -> reader1.getString());
                } else if ("script".equals(fieldName)) {
                    script = reader.getString();
                } else if ("profanityAction".equals(fieldName)) {
                    profanityAction = ProfanityAction.fromString(reader.getString());
                } else if ("profanityMarker".equals(fieldName)) {
                    profanityMarker = ProfanityMarker.fromString(reader.getString());
                } else if ("deploymentNameModel".equals(fieldName)) {
                    deploymentNameModel = reader.getString();
                } else if ("allowFallback".equals(fieldName)) {
                    allowFallback = reader.getNullable(JsonReader::getBoolean);
                } else if ("grade".equals(fieldName)) {
                    grade = reader.getString();
                } else if ("tone".equals(fieldName)) {
                    tone = reader.getString();
                } else if ("gender".equals(fieldName)) {
                    gender = reader.getString();
                } else if ("adaptiveDatasetId".equals(fieldName)) {
                    adaptiveDatasetId = reader.getString();
                } else if ("referenceTextPairs".equals(fieldName)) {
                    referenceTextPairs = reader.readArray(reader1 -> ReferenceSentencePair.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            TranslateTarget deserializedTranslateTarget = new TranslateTarget(language);
            deserializedTranslateTarget.script = script;
            deserializedTranslateTarget.profanityAction = profanityAction;
            deserializedTranslateTarget.profanityMarker = profanityMarker;
            deserializedTranslateTarget.deploymentNameModel = deploymentNameModel;
            deserializedTranslateTarget.allowFallback = allowFallback;
            deserializedTranslateTarget.grade = grade;
            deserializedTranslateTarget.tone = tone;
            deserializedTranslateTarget.gender = gender;
            deserializedTranslateTarget.adaptiveDatasetId = adaptiveDatasetId;
            deserializedTranslateTarget.referenceTextPairs = referenceTextPairs;

            return deserializedTranslateTarget;
        });
    }
}
