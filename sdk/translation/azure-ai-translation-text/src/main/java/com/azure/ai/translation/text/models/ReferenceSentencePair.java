// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.translation.text.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Reference sentence pair.
 */
@Immutable
public final class ReferenceSentencePair implements JsonSerializable<ReferenceSentencePair> {
    /*
     * Source reference sentence.
     */
    @Generated
    private final String referenceTextPairsSource;

    /*
     * Target reference sentence.
     */
    @Generated
    private final String referenceTextPairsTarget;

    /**
     * Creates an instance of ReferenceSentencePair class.
     * 
     * @param referenceTextPairsSource the referenceTextPairsSource value to set.
     * @param referenceTextPairsTarget the referenceTextPairsTarget value to set.
     */
    @Generated
    public ReferenceSentencePair(String referenceTextPairsSource, String referenceTextPairsTarget) {
        this.referenceTextPairsSource = referenceTextPairsSource;
        this.referenceTextPairsTarget = referenceTextPairsTarget;
    }

    /**
     * Get the referenceTextPairsSource property: Source reference sentence.
     * 
     * @return the referenceTextPairsSource value.
     */
    @Generated
    public String getReferenceTextPairsSource() {
        return this.referenceTextPairsSource;
    }

    /**
     * Get the referenceTextPairsTarget property: Target reference sentence.
     * 
     * @return the referenceTextPairsTarget value.
     */
    @Generated
    public String getReferenceTextPairsTarget() {
        return this.referenceTextPairsTarget;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("referenceTextPairsSource", this.referenceTextPairsSource);
        jsonWriter.writeStringField("referenceTextPairsTarget", this.referenceTextPairsTarget);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReferenceSentencePair from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReferenceSentencePair if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReferenceSentencePair.
     */
    @Generated
    public static ReferenceSentencePair fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String referenceTextPairsSource = null;
            String referenceTextPairsTarget = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("referenceTextPairsSource".equals(fieldName)) {
                    referenceTextPairsSource = reader.getString();
                } else if ("referenceTextPairsTarget".equals(fieldName)) {
                    referenceTextPairsTarget = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new ReferenceSentencePair(referenceTextPairsSource, referenceTextPairsTarget);
        });
    }
}
