// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines delegated resources.
 */
@Fluent
public final class DelegatedResources implements JsonSerializable<DelegatedResources> {
    /*
     * the resource id of the delegated resource.
     */
    private String resourceId;

    /*
     * the tenant id of the delegated resource.
     */
    private String tenantId;

    /*
     * the referral resource of the delegated resource.
     */
    private String referralResource;

    /*
     * the location of the delegated resource.
     */
    private String location;

    /**
     * Creates an instance of DelegatedResources class.
     */
    public DelegatedResources() {
    }

    /**
     * Get the resourceId property: the resource id of the delegated resource.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: the resource id of the delegated resource.
     * 
     * @param resourceId the resourceId value to set.
     * @return the DelegatedResources object itself.
     */
    public DelegatedResources withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the tenantId property: the tenant id of the delegated resource.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: the tenant id of the delegated resource.
     * 
     * @param tenantId the tenantId value to set.
     * @return the DelegatedResources object itself.
     */
    public DelegatedResources withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the referralResource property: the referral resource of the delegated resource.
     * 
     * @return the referralResource value.
     */
    public String referralResource() {
        return this.referralResource;
    }

    /**
     * Set the referralResource property: the referral resource of the delegated resource.
     * 
     * @param referralResource the referralResource value to set.
     * @return the DelegatedResources object itself.
     */
    public DelegatedResources withReferralResource(String referralResource) {
        this.referralResource = referralResource;
        return this;
    }

    /**
     * Get the location property: the location of the delegated resource.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: the location of the delegated resource.
     * 
     * @param location the location value to set.
     * @return the DelegatedResources object itself.
     */
    public DelegatedResources withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("referralResource", this.referralResource);
        jsonWriter.writeStringField("location", this.location);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DelegatedResources from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DelegatedResources if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DelegatedResources.
     */
    public static DelegatedResources fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DelegatedResources deserializedDelegatedResources = new DelegatedResources();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedDelegatedResources.resourceId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedDelegatedResources.tenantId = reader.getString();
                } else if ("referralResource".equals(fieldName)) {
                    deserializedDelegatedResources.referralResource = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedDelegatedResources.location = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDelegatedResources;
        });
    }
}
