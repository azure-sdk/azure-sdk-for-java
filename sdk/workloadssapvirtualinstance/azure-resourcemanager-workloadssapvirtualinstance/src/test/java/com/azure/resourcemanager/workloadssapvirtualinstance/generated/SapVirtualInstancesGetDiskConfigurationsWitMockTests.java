// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.workloadssapvirtualinstance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.workloadssapvirtualinstance.WorkloadsSapVirtualInstanceManager;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.DiskSkuName;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDatabaseType;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDeploymentType;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDiskConfigurationsRequest;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapDiskConfigurationsResult;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapEnvironmentType;
import com.azure.resourcemanager.workloadssapvirtualinstance.models.SapProductType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SapVirtualInstancesGetDiskConfigurationsWitMockTests {
    @Test
    public void testGetDiskConfigurationsWithResponse() throws Exception {
        String responseStr
            = "{\"volumeConfigurations\":{\"fo\":{\"recommendedConfiguration\":{\"count\":1446220970457190394,\"sizeGB\":2334635529382930428,\"sku\":{\"name\":\"StandardSSD_LRS\"}},\"supportedConfigurations\":[{\"sku\":{},\"sizeGB\":7113445488264308925,\"minimumSupportedDiskCount\":5009429986443101089,\"maximumSupportedDiskCount\":945944524424846139,\"iopsReadWrite\":1364801760742969084,\"mbpsReadWrite\":1902366482512122706,\"diskTier\":\"qmi\"},{\"sku\":{},\"sizeGB\":6552124129127191680,\"minimumSupportedDiskCount\":2418576622084848901,\"maximumSupportedDiskCount\":6726931432797365258,\"iopsReadWrite\":7942093859872352561,\"mbpsReadWrite\":2866985325528678483,\"diskTier\":\"havgrvk\"}]}}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WorkloadsSapVirtualInstanceManager manager = WorkloadsSapVirtualInstanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SapDiskConfigurationsResult response = manager.sapVirtualInstances()
            .getDiskConfigurationsWithResponse("swdvzyybycnun",
                new SapDiskConfigurationsRequest().withAppLocation("jsrtk")
                    .withEnvironment(SapEnvironmentType.PROD)
                    .withSapProduct(SapProductType.S4HANA)
                    .withDatabaseType(SapDatabaseType.DB2)
                    .withDeploymentType(SapDeploymentType.THREE_TIER)
                    .withDbVmSku("pqgik"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(1446220970457190394L,
            response.volumeConfigurations().get("fo").recommendedConfiguration().count());
        Assertions.assertEquals(2334635529382930428L,
            response.volumeConfigurations().get("fo").recommendedConfiguration().sizeGB());
        Assertions.assertEquals(DiskSkuName.STANDARD_SSD_LRS,
            response.volumeConfigurations().get("fo").recommendedConfiguration().sku().name());
        Assertions.assertEquals(7113445488264308925L,
            response.volumeConfigurations().get("fo").supportedConfigurations().get(0).sizeGB());
        Assertions.assertEquals(5009429986443101089L,
            response.volumeConfigurations().get("fo").supportedConfigurations().get(0).minimumSupportedDiskCount());
        Assertions.assertEquals(945944524424846139L,
            response.volumeConfigurations().get("fo").supportedConfigurations().get(0).maximumSupportedDiskCount());
        Assertions.assertEquals(1364801760742969084L,
            response.volumeConfigurations().get("fo").supportedConfigurations().get(0).iopsReadWrite());
        Assertions.assertEquals(1902366482512122706L,
            response.volumeConfigurations().get("fo").supportedConfigurations().get(0).mbpsReadWrite());
        Assertions.assertEquals("qmi",
            response.volumeConfigurations().get("fo").supportedConfigurations().get(0).diskTier());
    }
}
