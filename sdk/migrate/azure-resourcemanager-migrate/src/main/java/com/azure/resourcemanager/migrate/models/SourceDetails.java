// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Source details.
 */
@Immutable
public final class SourceDetails implements JsonSerializable<SourceDetails> {
    /*
     * The source name.
     */
    private AssessmentSource sourceName;

    /*
     * The source type.
     */
    private MigrateWorkloadType sourceType;

    /*
     * The migration platform.
     */
    private MigrationPlatform platform;

    /*
     * The count of a type of source.
     */
    private Integer count;

    /**
     * Creates an instance of SourceDetails class.
     */
    private SourceDetails() {
    }

    /**
     * Get the sourceName property: The source name.
     * 
     * @return the sourceName value.
     */
    public AssessmentSource sourceName() {
        return this.sourceName;
    }

    /**
     * Get the sourceType property: The source type.
     * 
     * @return the sourceType value.
     */
    public MigrateWorkloadType sourceType() {
        return this.sourceType;
    }

    /**
     * Get the platform property: The migration platform.
     * 
     * @return the platform value.
     */
    public MigrationPlatform platform() {
        return this.platform;
    }

    /**
     * Get the count property: The count of a type of source.
     * 
     * @return the count value.
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SourceDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SourceDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SourceDetails.
     */
    public static SourceDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SourceDetails deserializedSourceDetails = new SourceDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceName".equals(fieldName)) {
                    deserializedSourceDetails.sourceName = AssessmentSource.fromString(reader.getString());
                } else if ("sourceType".equals(fieldName)) {
                    deserializedSourceDetails.sourceType = MigrateWorkloadType.fromString(reader.getString());
                } else if ("platform".equals(fieldName)) {
                    deserializedSourceDetails.platform = MigrationPlatform.fromString(reader.getString());
                } else if ("count".equals(fieldName)) {
                    deserializedSourceDetails.count = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSourceDetails;
        });
    }
}
