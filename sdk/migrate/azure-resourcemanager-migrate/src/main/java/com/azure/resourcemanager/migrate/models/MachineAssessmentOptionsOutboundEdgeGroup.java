// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A class that represents the outbound edges from a given node.
 */
@Immutable
public final class MachineAssessmentOptionsOutboundEdgeGroup
    implements JsonSerializable<MachineAssessmentOptionsOutboundEdgeGroup> {
    /*
     * Gets or sets the Azure Locations.
     */
    private List<AzureLocation> targetLocations;

    /*
     * Gets or sets the Azure Currency.
     */
    private List<AzureCurrency> currencies;

    /*
     * Gets or sets the Assessment Savings Options.
     */
    private List<SavingsOptions> savingsOptions;

    /*
     * Gets or sets the Licensing Program.
     */
    private List<LicensingProgram> licensingProgram;

    /*
     * Gets or sets the Azure VM families.
     */
    private List<AzureVmFamily> azureVmFamilies;

    /*
     * Gets or sets the Azure VM family categories.
     */
    private List<VmFamilyCategoryItem> azureVmFamilyCategories;

    /*
     * Gets or sets the premium disk support.
     */
    private List<PremiumDiskSupport> premiumDiskSupport;

    /*
     * Gets or sets the premium disk support.
     */
    private List<UltraDiskSupport> ultraDiskSupport;

    /*
     * Gets or sets the Azure Offer Code.
     */
    private List<AzureOffer> azureOfferCode;

    /*
     * Gets or sets the Azure VM security options.
     */
    private List<AzureVmSecurityType> azureVmSecurityOptions;

    /**
     * Creates an instance of MachineAssessmentOptionsOutboundEdgeGroup class.
     */
    private MachineAssessmentOptionsOutboundEdgeGroup() {
    }

    /**
     * Get the targetLocations property: Gets or sets the Azure Locations.
     * 
     * @return the targetLocations value.
     */
    public List<AzureLocation> targetLocations() {
        return this.targetLocations;
    }

    /**
     * Get the currencies property: Gets or sets the Azure Currency.
     * 
     * @return the currencies value.
     */
    public List<AzureCurrency> currencies() {
        return this.currencies;
    }

    /**
     * Get the savingsOptions property: Gets or sets the Assessment Savings Options.
     * 
     * @return the savingsOptions value.
     */
    public List<SavingsOptions> savingsOptions() {
        return this.savingsOptions;
    }

    /**
     * Get the licensingProgram property: Gets or sets the Licensing Program.
     * 
     * @return the licensingProgram value.
     */
    public List<LicensingProgram> licensingProgram() {
        return this.licensingProgram;
    }

    /**
     * Get the azureVmFamilies property: Gets or sets the Azure VM families.
     * 
     * @return the azureVmFamilies value.
     */
    public List<AzureVmFamily> azureVmFamilies() {
        return this.azureVmFamilies;
    }

    /**
     * Get the azureVmFamilyCategories property: Gets or sets the Azure VM family categories.
     * 
     * @return the azureVmFamilyCategories value.
     */
    public List<VmFamilyCategoryItem> azureVmFamilyCategories() {
        return this.azureVmFamilyCategories;
    }

    /**
     * Get the premiumDiskSupport property: Gets or sets the premium disk support.
     * 
     * @return the premiumDiskSupport value.
     */
    public List<PremiumDiskSupport> premiumDiskSupport() {
        return this.premiumDiskSupport;
    }

    /**
     * Get the ultraDiskSupport property: Gets or sets the premium disk support.
     * 
     * @return the ultraDiskSupport value.
     */
    public List<UltraDiskSupport> ultraDiskSupport() {
        return this.ultraDiskSupport;
    }

    /**
     * Get the azureOfferCode property: Gets or sets the Azure Offer Code.
     * 
     * @return the azureOfferCode value.
     */
    public List<AzureOffer> azureOfferCode() {
        return this.azureOfferCode;
    }

    /**
     * Get the azureVmSecurityOptions property: Gets or sets the Azure VM security options.
     * 
     * @return the azureVmSecurityOptions value.
     */
    public List<AzureVmSecurityType> azureVmSecurityOptions() {
        return this.azureVmSecurityOptions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetLocations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetLocations in model MachineAssessmentOptionsOutboundEdgeGroup"));
        }
        if (currencies() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property currencies in model MachineAssessmentOptionsOutboundEdgeGroup"));
        }
        if (savingsOptions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property savingsOptions in model MachineAssessmentOptionsOutboundEdgeGroup"));
        }
        if (licensingProgram() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property licensingProgram in model MachineAssessmentOptionsOutboundEdgeGroup"));
        }
        if (azureVmFamilies() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureVmFamilies in model MachineAssessmentOptionsOutboundEdgeGroup"));
        }
        if (azureVmFamilyCategories() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureVmFamilyCategories in model MachineAssessmentOptionsOutboundEdgeGroup"));
        }
        if (premiumDiskSupport() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property premiumDiskSupport in model MachineAssessmentOptionsOutboundEdgeGroup"));
        }
        if (ultraDiskSupport() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ultraDiskSupport in model MachineAssessmentOptionsOutboundEdgeGroup"));
        }
        if (azureOfferCode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureOfferCode in model MachineAssessmentOptionsOutboundEdgeGroup"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MachineAssessmentOptionsOutboundEdgeGroup.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("targetLocations", this.targetLocations,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("currencies", this.currencies,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("savingsOptions", this.savingsOptions,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("licensingProgram", this.licensingProgram,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("azureVmFamilies", this.azureVmFamilies,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("azureVmFamilyCategories", this.azureVmFamilyCategories,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("premiumDiskSupport", this.premiumDiskSupport,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("ultraDiskSupport", this.ultraDiskSupport,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("azureOfferCode", this.azureOfferCode,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("azureVmSecurityOptions", this.azureVmSecurityOptions,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachineAssessmentOptionsOutboundEdgeGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachineAssessmentOptionsOutboundEdgeGroup if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MachineAssessmentOptionsOutboundEdgeGroup.
     */
    public static MachineAssessmentOptionsOutboundEdgeGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MachineAssessmentOptionsOutboundEdgeGroup deserializedMachineAssessmentOptionsOutboundEdgeGroup
                = new MachineAssessmentOptionsOutboundEdgeGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetLocations".equals(fieldName)) {
                    List<AzureLocation> targetLocations
                        = reader.readArray(reader1 -> AzureLocation.fromString(reader1.getString()));
                    deserializedMachineAssessmentOptionsOutboundEdgeGroup.targetLocations = targetLocations;
                } else if ("currencies".equals(fieldName)) {
                    List<AzureCurrency> currencies
                        = reader.readArray(reader1 -> AzureCurrency.fromString(reader1.getString()));
                    deserializedMachineAssessmentOptionsOutboundEdgeGroup.currencies = currencies;
                } else if ("savingsOptions".equals(fieldName)) {
                    List<SavingsOptions> savingsOptions
                        = reader.readArray(reader1 -> SavingsOptions.fromString(reader1.getString()));
                    deserializedMachineAssessmentOptionsOutboundEdgeGroup.savingsOptions = savingsOptions;
                } else if ("licensingProgram".equals(fieldName)) {
                    List<LicensingProgram> licensingProgram
                        = reader.readArray(reader1 -> LicensingProgram.fromString(reader1.getString()));
                    deserializedMachineAssessmentOptionsOutboundEdgeGroup.licensingProgram = licensingProgram;
                } else if ("azureVmFamilies".equals(fieldName)) {
                    List<AzureVmFamily> azureVmFamilies
                        = reader.readArray(reader1 -> AzureVmFamily.fromString(reader1.getString()));
                    deserializedMachineAssessmentOptionsOutboundEdgeGroup.azureVmFamilies = azureVmFamilies;
                } else if ("azureVmFamilyCategories".equals(fieldName)) {
                    List<VmFamilyCategoryItem> azureVmFamilyCategories
                        = reader.readArray(reader1 -> VmFamilyCategoryItem.fromString(reader1.getString()));
                    deserializedMachineAssessmentOptionsOutboundEdgeGroup.azureVmFamilyCategories
                        = azureVmFamilyCategories;
                } else if ("premiumDiskSupport".equals(fieldName)) {
                    List<PremiumDiskSupport> premiumDiskSupport
                        = reader.readArray(reader1 -> PremiumDiskSupport.fromString(reader1.getString()));
                    deserializedMachineAssessmentOptionsOutboundEdgeGroup.premiumDiskSupport = premiumDiskSupport;
                } else if ("ultraDiskSupport".equals(fieldName)) {
                    List<UltraDiskSupport> ultraDiskSupport
                        = reader.readArray(reader1 -> UltraDiskSupport.fromString(reader1.getString()));
                    deserializedMachineAssessmentOptionsOutboundEdgeGroup.ultraDiskSupport = ultraDiskSupport;
                } else if ("azureOfferCode".equals(fieldName)) {
                    List<AzureOffer> azureOfferCode
                        = reader.readArray(reader1 -> AzureOffer.fromString(reader1.getString()));
                    deserializedMachineAssessmentOptionsOutboundEdgeGroup.azureOfferCode = azureOfferCode;
                } else if ("azureVmSecurityOptions".equals(fieldName)) {
                    List<AzureVmSecurityType> azureVmSecurityOptions
                        = reader.readArray(reader1 -> AzureVmSecurityType.fromString(reader1.getString()));
                    deserializedMachineAssessmentOptionsOutboundEdgeGroup.azureVmSecurityOptions
                        = azureVmSecurityOptions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMachineAssessmentOptionsOutboundEdgeGroup;
        });
    }
}
