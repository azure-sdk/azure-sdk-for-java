// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Assessed disk data for normalized contract.
 */
@Immutable
public final class AssessedDiskDataV3 implements JsonSerializable<AssessedDiskDataV3> {
    /*
     * The disk name.
     */
    private String name;

    /*
     * The disk display name.
     */
    private String displayName;

    /*
     * Gets the gigabytes provisioned.
     */
    private Double gigabytesProvisioned;

    /*
     * Gets the megabytes per second of read.
     */
    private Double megabytesPerSecondOfRead;

    /*
     * Gets the megabytes per second of write.
     */
    private Double megabytesPerSecondOfWrite;

    /*
     * Gets the number of read operations per second.
     */
    private Double numberOfReadOperationsPerSecond;

    /*
     * Gets the number of write operations per second.
     */
    private Double numberOfWriteOperationsPerSecond;

    /**
     * Creates an instance of AssessedDiskDataV3 class.
     */
    private AssessedDiskDataV3() {
    }

    /**
     * Get the name property: The disk name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the displayName property: The disk display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the gigabytesProvisioned property: Gets the gigabytes provisioned.
     * 
     * @return the gigabytesProvisioned value.
     */
    public Double gigabytesProvisioned() {
        return this.gigabytesProvisioned;
    }

    /**
     * Get the megabytesPerSecondOfRead property: Gets the megabytes per second of read.
     * 
     * @return the megabytesPerSecondOfRead value.
     */
    public Double megabytesPerSecondOfRead() {
        return this.megabytesPerSecondOfRead;
    }

    /**
     * Get the megabytesPerSecondOfWrite property: Gets the megabytes per second of write.
     * 
     * @return the megabytesPerSecondOfWrite value.
     */
    public Double megabytesPerSecondOfWrite() {
        return this.megabytesPerSecondOfWrite;
    }

    /**
     * Get the numberOfReadOperationsPerSecond property: Gets the number of read operations per second.
     * 
     * @return the numberOfReadOperationsPerSecond value.
     */
    public Double numberOfReadOperationsPerSecond() {
        return this.numberOfReadOperationsPerSecond;
    }

    /**
     * Get the numberOfWriteOperationsPerSecond property: Gets the number of write operations per second.
     * 
     * @return the numberOfWriteOperationsPerSecond value.
     */
    public Double numberOfWriteOperationsPerSecond() {
        return this.numberOfWriteOperationsPerSecond;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("gigabytesProvisioned", this.gigabytesProvisioned);
        jsonWriter.writeNumberField("megabytesPerSecondOfRead", this.megabytesPerSecondOfRead);
        jsonWriter.writeNumberField("megabytesPerSecondOfWrite", this.megabytesPerSecondOfWrite);
        jsonWriter.writeNumberField("numberOfReadOperationsPerSecond", this.numberOfReadOperationsPerSecond);
        jsonWriter.writeNumberField("numberOfWriteOperationsPerSecond", this.numberOfWriteOperationsPerSecond);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedDiskDataV3 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedDiskDataV3 if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedDiskDataV3.
     */
    public static AssessedDiskDataV3 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedDiskDataV3 deserializedAssessedDiskDataV3 = new AssessedDiskDataV3();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAssessedDiskDataV3.name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedAssessedDiskDataV3.displayName = reader.getString();
                } else if ("gigabytesProvisioned".equals(fieldName)) {
                    deserializedAssessedDiskDataV3.gigabytesProvisioned = reader.getNullable(JsonReader::getDouble);
                } else if ("megabytesPerSecondOfRead".equals(fieldName)) {
                    deserializedAssessedDiskDataV3.megabytesPerSecondOfRead = reader.getNullable(JsonReader::getDouble);
                } else if ("megabytesPerSecondOfWrite".equals(fieldName)) {
                    deserializedAssessedDiskDataV3.megabytesPerSecondOfWrite
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("numberOfReadOperationsPerSecond".equals(fieldName)) {
                    deserializedAssessedDiskDataV3.numberOfReadOperationsPerSecond
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("numberOfWriteOperationsPerSecond".equals(fieldName)) {
                    deserializedAssessedDiskDataV3.numberOfWriteOperationsPerSecond
                        = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedDiskDataV3;
        });
    }
}
