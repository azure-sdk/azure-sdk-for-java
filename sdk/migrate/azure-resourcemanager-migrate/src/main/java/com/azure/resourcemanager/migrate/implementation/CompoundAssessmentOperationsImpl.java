// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.migrate.fluent.CompoundAssessmentOperationsClient;
import com.azure.resourcemanager.migrate.fluent.models.CompoundAssessmentInner;
import com.azure.resourcemanager.migrate.fluent.models.DownloadUrlInner;
import com.azure.resourcemanager.migrate.models.CompoundAssessment;
import com.azure.resourcemanager.migrate.models.CompoundAssessmentOperations;
import com.azure.resourcemanager.migrate.models.DownloadUrl;
import com.azure.resourcemanager.migrate.models.DownloadUrlRequest;

public final class CompoundAssessmentOperationsImpl implements CompoundAssessmentOperations {
    private static final ClientLogger LOGGER = new ClientLogger(CompoundAssessmentOperationsImpl.class);

    private final CompoundAssessmentOperationsClient innerClient;

    private final com.azure.resourcemanager.migrate.MigrateManager serviceManager;

    public CompoundAssessmentOperationsImpl(CompoundAssessmentOperationsClient innerClient,
        com.azure.resourcemanager.migrate.MigrateManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CompoundAssessment> getWithResponse(String resourceGroupName, String projectName,
        String compoundAssessmentName, Context context) {
        Response<CompoundAssessmentInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, projectName, compoundAssessmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CompoundAssessmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CompoundAssessment get(String resourceGroupName, String projectName, String compoundAssessmentName) {
        CompoundAssessmentInner inner
            = this.serviceClient().get(resourceGroupName, projectName, compoundAssessmentName);
        if (inner != null) {
            return new CompoundAssessmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<CompoundAssessment> listByParent(String resourceGroupName, String projectName) {
        PagedIterable<CompoundAssessmentInner> inner
            = this.serviceClient().listByParent(resourceGroupName, projectName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CompoundAssessmentImpl(inner1, this.manager()));
    }

    public PagedIterable<CompoundAssessment> listByParent(String resourceGroupName, String projectName,
        Context context) {
        PagedIterable<CompoundAssessmentInner> inner
            = this.serviceClient().listByParent(resourceGroupName, projectName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CompoundAssessmentImpl(inner1, this.manager()));
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String projectName,
        String compoundAssessmentName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, projectName, compoundAssessmentName, context);
    }

    public void delete(String resourceGroupName, String projectName, String compoundAssessmentName) {
        this.serviceClient().delete(resourceGroupName, projectName, compoundAssessmentName);
    }

    public DownloadUrl downloadUrl(String resourceGroupName, String projectName, String compoundAssessmentName,
        DownloadUrlRequest body) {
        DownloadUrlInner inner
            = this.serviceClient().downloadUrl(resourceGroupName, projectName, compoundAssessmentName, body);
        if (inner != null) {
            return new DownloadUrlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DownloadUrl downloadUrl(String resourceGroupName, String projectName, String compoundAssessmentName,
        DownloadUrlRequest body, Context context) {
        DownloadUrlInner inner
            = this.serviceClient().downloadUrl(resourceGroupName, projectName, compoundAssessmentName, body, context);
        if (inner != null) {
            return new DownloadUrlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CompoundAssessment getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String compoundAssessmentName = ResourceManagerUtils.getValueFromIdByName(id, "webAppCompoundAssessments");
        if (compoundAssessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'webAppCompoundAssessments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, projectName, compoundAssessmentName, Context.NONE).getValue();
    }

    public Response<CompoundAssessment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String compoundAssessmentName = ResourceManagerUtils.getValueFromIdByName(id, "webAppCompoundAssessments");
        if (compoundAssessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'webAppCompoundAssessments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, projectName, compoundAssessmentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String compoundAssessmentName = ResourceManagerUtils.getValueFromIdByName(id, "webAppCompoundAssessments");
        if (compoundAssessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'webAppCompoundAssessments'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, projectName, compoundAssessmentName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String compoundAssessmentName = ResourceManagerUtils.getValueFromIdByName(id, "webAppCompoundAssessments");
        if (compoundAssessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'webAppCompoundAssessments'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, projectName, compoundAssessmentName, context);
    }

    private CompoundAssessmentOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.migrate.MigrateManager manager() {
        return this.serviceManager;
    }

    public CompoundAssessmentImpl define(String name) {
        return new CompoundAssessmentImpl(name, this.manager());
    }
}
