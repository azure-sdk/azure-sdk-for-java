// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Details of the compound assessment.
 */
@Immutable
public final class CompoundAssessmentDetails implements JsonSerializable<CompoundAssessmentDetails> {
    /*
     * Timestamp when the assessment was created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * Timestamp when the assessment was last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * Status of the assessment.
     */
    private AssessmentStatus status;

    /**
     * Creates an instance of CompoundAssessmentDetails class.
     */
    private CompoundAssessmentDetails() {
    }

    /**
     * Get the createdTimestamp property: Timestamp when the assessment was created.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: Timestamp when the assessment was last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the status property: Status of the assessment.
     * 
     * @return the status value.
     */
    public AssessmentStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property status in model CompoundAssessmentDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CompoundAssessmentDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("createdTimestamp",
            this.createdTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdTimestamp));
        jsonWriter.writeStringField("updatedTimestamp",
            this.updatedTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updatedTimestamp));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CompoundAssessmentDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CompoundAssessmentDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CompoundAssessmentDetails.
     */
    public static CompoundAssessmentDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CompoundAssessmentDetails deserializedCompoundAssessmentDetails = new CompoundAssessmentDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedCompoundAssessmentDetails.status = AssessmentStatus.fromString(reader.getString());
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedCompoundAssessmentDetails.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedCompoundAssessmentDetails.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCompoundAssessmentDetails;
        });
    }
}
