// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of a compound assessment.
 */
@Fluent
public final class CompoundAssessmentProperties implements JsonSerializable<CompoundAssessmentProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * ARM IDs of the target assessments.
     */
    private TargetAssessmentArmIds targetAssessmentArmIds;

    /*
     * Fallback machine assessment ARM ID.
     */
    private String fallbackMachineAssessmentArmId;

    /*
     * Details of the compound assessment.
     */
    private CompoundAssessmentDetails details;

    /**
     * Creates an instance of CompoundAssessmentProperties class.
     */
    public CompoundAssessmentProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the targetAssessmentArmIds property: ARM IDs of the target assessments.
     * 
     * @return the targetAssessmentArmIds value.
     */
    public TargetAssessmentArmIds targetAssessmentArmIds() {
        return this.targetAssessmentArmIds;
    }

    /**
     * Set the targetAssessmentArmIds property: ARM IDs of the target assessments.
     * 
     * @param targetAssessmentArmIds the targetAssessmentArmIds value to set.
     * @return the CompoundAssessmentProperties object itself.
     */
    public CompoundAssessmentProperties withTargetAssessmentArmIds(TargetAssessmentArmIds targetAssessmentArmIds) {
        this.targetAssessmentArmIds = targetAssessmentArmIds;
        return this;
    }

    /**
     * Get the fallbackMachineAssessmentArmId property: Fallback machine assessment ARM ID.
     * 
     * @return the fallbackMachineAssessmentArmId value.
     */
    public String fallbackMachineAssessmentArmId() {
        return this.fallbackMachineAssessmentArmId;
    }

    /**
     * Set the fallbackMachineAssessmentArmId property: Fallback machine assessment ARM ID.
     * 
     * @param fallbackMachineAssessmentArmId the fallbackMachineAssessmentArmId value to set.
     * @return the CompoundAssessmentProperties object itself.
     */
    public CompoundAssessmentProperties withFallbackMachineAssessmentArmId(String fallbackMachineAssessmentArmId) {
        this.fallbackMachineAssessmentArmId = fallbackMachineAssessmentArmId;
        return this;
    }

    /**
     * Get the details property: Details of the compound assessment.
     * 
     * @return the details value.
     */
    public CompoundAssessmentDetails details() {
        return this.details;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetAssessmentArmIds() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetAssessmentArmIds in model CompoundAssessmentProperties"));
        } else {
            targetAssessmentArmIds().validate();
        }
        if (details() != null) {
            details().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CompoundAssessmentProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("targetAssessmentArmIds", this.targetAssessmentArmIds);
        jsonWriter.writeStringField("fallbackMachineAssessmentArmId", this.fallbackMachineAssessmentArmId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CompoundAssessmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CompoundAssessmentProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CompoundAssessmentProperties.
     */
    public static CompoundAssessmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CompoundAssessmentProperties deserializedCompoundAssessmentProperties = new CompoundAssessmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetAssessmentArmIds".equals(fieldName)) {
                    deserializedCompoundAssessmentProperties.targetAssessmentArmIds
                        = TargetAssessmentArmIds.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCompoundAssessmentProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("fallbackMachineAssessmentArmId".equals(fieldName)) {
                    deserializedCompoundAssessmentProperties.fallbackMachineAssessmentArmId = reader.getString();
                } else if ("details".equals(fieldName)) {
                    deserializedCompoundAssessmentProperties.details = CompoundAssessmentDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCompoundAssessmentProperties;
        });
    }
}
