// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Assessed network adapter data for normalized contract for sql machines.
 */
@Immutable
public final class AssessedMachineNetworkAdaptersV3 implements JsonSerializable<AssessedMachineNetworkAdaptersV3> {
    /*
     * The disk name.
     */
    private String name;

    /*
     * Gets the net gigabytes transmitted per month.
     */
    private Double netGigabytesTransmittedPerMonth;

    /*
     * Gets the mac address.
     */
    private String macAddress;

    /*
     * Gets the ip addresses.
     */
    private List<String> ipAddresses;

    /*
     * Gets the megabytes per second received.
     */
    private Double megabytesPerSecondRecieved;

    /*
     * Gets the megabytes per second transmitted.
     */
    private Double megabytesPerSecondTransmitted;

    /*
     * Display Name of the Machine.
     */
    private String displayName;

    /**
     * Creates an instance of AssessedMachineNetworkAdaptersV3 class.
     */
    private AssessedMachineNetworkAdaptersV3() {
    }

    /**
     * Get the name property: The disk name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the netGigabytesTransmittedPerMonth property: Gets the net gigabytes transmitted per month.
     * 
     * @return the netGigabytesTransmittedPerMonth value.
     */
    public Double netGigabytesTransmittedPerMonth() {
        return this.netGigabytesTransmittedPerMonth;
    }

    /**
     * Get the macAddress property: Gets the mac address.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Get the ipAddresses property: Gets the ip addresses.
     * 
     * @return the ipAddresses value.
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Get the megabytesPerSecondRecieved property: Gets the megabytes per second received.
     * 
     * @return the megabytesPerSecondRecieved value.
     */
    public Double megabytesPerSecondRecieved() {
        return this.megabytesPerSecondRecieved;
    }

    /**
     * Get the megabytesPerSecondTransmitted property: Gets the megabytes per second transmitted.
     * 
     * @return the megabytesPerSecondTransmitted value.
     */
    public Double megabytesPerSecondTransmitted() {
        return this.megabytesPerSecondTransmitted;
    }

    /**
     * Get the displayName property: Display Name of the Machine.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("netGigabytesTransmittedPerMonth", this.netGigabytesTransmittedPerMonth);
        jsonWriter.writeStringField("macAddress", this.macAddress);
        jsonWriter.writeNumberField("megabytesPerSecondRecieved", this.megabytesPerSecondRecieved);
        jsonWriter.writeNumberField("megabytesPerSecondTransmitted", this.megabytesPerSecondTransmitted);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedMachineNetworkAdaptersV3 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedMachineNetworkAdaptersV3 if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedMachineNetworkAdaptersV3.
     */
    public static AssessedMachineNetworkAdaptersV3 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedMachineNetworkAdaptersV3 deserializedAssessedMachineNetworkAdaptersV3
                = new AssessedMachineNetworkAdaptersV3();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAssessedMachineNetworkAdaptersV3.name = reader.getString();
                } else if ("netGigabytesTransmittedPerMonth".equals(fieldName)) {
                    deserializedAssessedMachineNetworkAdaptersV3.netGigabytesTransmittedPerMonth
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("macAddress".equals(fieldName)) {
                    deserializedAssessedMachineNetworkAdaptersV3.macAddress = reader.getString();
                } else if ("ipAddresses".equals(fieldName)) {
                    List<String> ipAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedAssessedMachineNetworkAdaptersV3.ipAddresses = ipAddresses;
                } else if ("megabytesPerSecondRecieved".equals(fieldName)) {
                    deserializedAssessedMachineNetworkAdaptersV3.megabytesPerSecondRecieved
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("megabytesPerSecondTransmitted".equals(fieldName)) {
                    deserializedAssessedMachineNetworkAdaptersV3.megabytesPerSecondTransmitted
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("displayName".equals(fieldName)) {
                    deserializedAssessedMachineNetworkAdaptersV3.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedMachineNetworkAdaptersV3;
        });
    }
}
