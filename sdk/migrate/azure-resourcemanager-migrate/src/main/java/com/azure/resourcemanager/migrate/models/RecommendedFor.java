// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The recommended details.
 */
@Immutable
public final class RecommendedFor implements JsonSerializable<RecommendedFor> {
    /*
     * The list of strategy type.
     */
    private List<StrategyType> strategies;

    /**
     * Creates an instance of RecommendedFor class.
     */
    private RecommendedFor() {
    }

    /**
     * Get the strategies property: The list of strategy type.
     * 
     * @return the strategies value.
     */
    public List<StrategyType> strategies() {
        return this.strategies;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecommendedFor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecommendedFor if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecommendedFor.
     */
    public static RecommendedFor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecommendedFor deserializedRecommendedFor = new RecommendedFor();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("strategies".equals(fieldName)) {
                    List<StrategyType> strategies
                        = reader.readArray(reader1 -> StrategyType.fromString(reader1.getString()));
                    deserializedRecommendedFor.strategies = strategies;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecommendedFor;
        });
    }
}
