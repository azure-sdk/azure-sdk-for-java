// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The cost details.
 */
@Immutable
public final class CostDetailsCommon implements JsonSerializable<CostDetailsCommon> {
    /*
     * The savings options.
     */
    private SavingsOptions savingOptions;

    /*
     * The sku cost details per azure offer type.
     */
    private List<NameValuePairCostType> costDetail;

    /**
     * Creates an instance of CostDetailsCommon class.
     */
    private CostDetailsCommon() {
    }

    /**
     * Get the savingOptions property: The savings options.
     * 
     * @return the savingOptions value.
     */
    public SavingsOptions savingOptions() {
        return this.savingOptions;
    }

    /**
     * Get the costDetail property: The sku cost details per azure offer type.
     * 
     * @return the costDetail value.
     */
    public List<NameValuePairCostType> costDetail() {
        return this.costDetail;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (costDetail() != null) {
            costDetail().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CostDetailsCommon from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CostDetailsCommon if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CostDetailsCommon.
     */
    public static CostDetailsCommon fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CostDetailsCommon deserializedCostDetailsCommon = new CostDetailsCommon();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("savingOptions".equals(fieldName)) {
                    deserializedCostDetailsCommon.savingOptions = SavingsOptions.fromString(reader.getString());
                } else if ("costDetail".equals(fieldName)) {
                    List<NameValuePairCostType> costDetail
                        = reader.readArray(reader1 -> NameValuePairCostType.fromJson(reader1));
                    deserializedCostDetailsCommon.costDetail = costDetail;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCostDetailsCommon;
        });
    }
}
