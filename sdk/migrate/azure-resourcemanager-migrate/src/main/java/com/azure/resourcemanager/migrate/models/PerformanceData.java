// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Performance data class.
 */
@Fluent
public final class PerformanceData implements JsonSerializable<PerformanceData> {
    /*
     * Percentile of the utilization data values to be considered while assessing
     * machines.
     */
    private Percentile percentile;

    /*
     * Time Range for which the historic utilization data should be considered for
     * assessment.
     */
    private TimeRange timeRange;

    /*
     * Gets or sets the start time to consider performance data for assessment.
     */
    private OffsetDateTime perfDataStartTime;

    /*
     * Gets or sets the end time to consider performance data for assessment.
     */
    private OffsetDateTime perfDataEndTime;

    /**
     * Creates an instance of PerformanceData class.
     */
    public PerformanceData() {
    }

    /**
     * Get the percentile property: Percentile of the utilization data values to be considered while assessing
     * machines.
     * 
     * @return the percentile value.
     */
    public Percentile percentile() {
        return this.percentile;
    }

    /**
     * Set the percentile property: Percentile of the utilization data values to be considered while assessing
     * machines.
     * 
     * @param percentile the percentile value to set.
     * @return the PerformanceData object itself.
     */
    public PerformanceData withPercentile(Percentile percentile) {
        this.percentile = percentile;
        return this;
    }

    /**
     * Get the timeRange property: Time Range for which the historic utilization data should be considered for
     * assessment.
     * 
     * @return the timeRange value.
     */
    public TimeRange timeRange() {
        return this.timeRange;
    }

    /**
     * Set the timeRange property: Time Range for which the historic utilization data should be considered for
     * assessment.
     * 
     * @param timeRange the timeRange value to set.
     * @return the PerformanceData object itself.
     */
    public PerformanceData withTimeRange(TimeRange timeRange) {
        this.timeRange = timeRange;
        return this;
    }

    /**
     * Get the perfDataStartTime property: Gets or sets the start time to consider performance data for assessment.
     * 
     * @return the perfDataStartTime value.
     */
    public OffsetDateTime perfDataStartTime() {
        return this.perfDataStartTime;
    }

    /**
     * Set the perfDataStartTime property: Gets or sets the start time to consider performance data for assessment.
     * 
     * @param perfDataStartTime the perfDataStartTime value to set.
     * @return the PerformanceData object itself.
     */
    public PerformanceData withPerfDataStartTime(OffsetDateTime perfDataStartTime) {
        this.perfDataStartTime = perfDataStartTime;
        return this;
    }

    /**
     * Get the perfDataEndTime property: Gets or sets the end time to consider performance data for assessment.
     * 
     * @return the perfDataEndTime value.
     */
    public OffsetDateTime perfDataEndTime() {
        return this.perfDataEndTime;
    }

    /**
     * Set the perfDataEndTime property: Gets or sets the end time to consider performance data for assessment.
     * 
     * @param perfDataEndTime the perfDataEndTime value to set.
     * @return the PerformanceData object itself.
     */
    public PerformanceData withPerfDataEndTime(OffsetDateTime perfDataEndTime) {
        this.perfDataEndTime = perfDataEndTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("percentile", this.percentile == null ? null : this.percentile.toString());
        jsonWriter.writeStringField("timeRange", this.timeRange == null ? null : this.timeRange.toString());
        jsonWriter.writeStringField("perfDataStartTime",
            this.perfDataStartTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.perfDataStartTime));
        jsonWriter.writeStringField("perfDataEndTime",
            this.perfDataEndTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.perfDataEndTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PerformanceData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PerformanceData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PerformanceData.
     */
    public static PerformanceData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PerformanceData deserializedPerformanceData = new PerformanceData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("percentile".equals(fieldName)) {
                    deserializedPerformanceData.percentile = Percentile.fromString(reader.getString());
                } else if ("timeRange".equals(fieldName)) {
                    deserializedPerformanceData.timeRange = TimeRange.fromString(reader.getString());
                } else if ("perfDataStartTime".equals(fieldName)) {
                    deserializedPerformanceData.perfDataStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("perfDataEndTime".equals(fieldName)) {
                    deserializedPerformanceData.perfDataEndTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPerformanceData;
        });
    }
}
