// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Migration details.
 */
@Immutable
public final class MigrationDetails implements JsonSerializable<MigrationDetails> {
    /*
     * The readiness summary.
     */
    private List<NameValuePairCloudSuitabilityCommon> readinessSummary;

    /*
     * The migration type
     */
    private MigrationType migrationType;

    /**
     * Creates an instance of MigrationDetails class.
     */
    private MigrationDetails() {
    }

    /**
     * Get the readinessSummary property: The readiness summary.
     * 
     * @return the readinessSummary value.
     */
    public List<NameValuePairCloudSuitabilityCommon> readinessSummary() {
        return this.readinessSummary;
    }

    /**
     * Get the migrationType property: The migration type.
     * 
     * @return the migrationType value.
     */
    public MigrationType migrationType() {
        return this.migrationType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (readinessSummary() != null) {
            readinessSummary().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrationDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrationDetails.
     */
    public static MigrationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrationDetails deserializedMigrationDetails = new MigrationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("readinessSummary".equals(fieldName)) {
                    List<NameValuePairCloudSuitabilityCommon> readinessSummary
                        = reader.readArray(reader1 -> NameValuePairCloudSuitabilityCommon.fromJson(reader1));
                    deserializedMigrationDetails.readinessSummary = readinessSummary;
                } else if ("migrationType".equals(fieldName)) {
                    deserializedMigrationDetails.migrationType = MigrationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrationDetails;
        });
    }
}
