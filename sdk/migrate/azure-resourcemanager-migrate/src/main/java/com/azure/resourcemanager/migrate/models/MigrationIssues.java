// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Migration issues.
 */
@Immutable
public final class MigrationIssues implements JsonSerializable<MigrationIssues> {
    /*
     * The issue id.
     */
    private String issueCode;

    /*
     * The issue category.
     */
    private MigrationIssuesCategory issueCategory;

    /*
     * The issue description.
     */
    private String issueDescription;

    /*
     * The possible causes.
     */
    private String possibleCause;

    /*
     * The recommended action.
     */
    private List<String> recommendedActions;

    /*
     * The more information list.
     */
    private List<MoreInformation> moreInformation;

    /**
     * Creates an instance of MigrationIssues class.
     */
    private MigrationIssues() {
    }

    /**
     * Get the issueCode property: The issue id.
     * 
     * @return the issueCode value.
     */
    public String issueCode() {
        return this.issueCode;
    }

    /**
     * Get the issueCategory property: The issue category.
     * 
     * @return the issueCategory value.
     */
    public MigrationIssuesCategory issueCategory() {
        return this.issueCategory;
    }

    /**
     * Get the issueDescription property: The issue description.
     * 
     * @return the issueDescription value.
     */
    public String issueDescription() {
        return this.issueDescription;
    }

    /**
     * Get the possibleCause property: The possible causes.
     * 
     * @return the possibleCause value.
     */
    public String possibleCause() {
        return this.possibleCause;
    }

    /**
     * Get the recommendedActions property: The recommended action.
     * 
     * @return the recommendedActions value.
     */
    public List<String> recommendedActions() {
        return this.recommendedActions;
    }

    /**
     * Get the moreInformation property: The more information list.
     * 
     * @return the moreInformation value.
     */
    public List<MoreInformation> moreInformation() {
        return this.moreInformation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (moreInformation() != null) {
            moreInformation().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrationIssues from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrationIssues if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrationIssues.
     */
    public static MigrationIssues fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrationIssues deserializedMigrationIssues = new MigrationIssues();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issueCode".equals(fieldName)) {
                    deserializedMigrationIssues.issueCode = reader.getString();
                } else if ("issueCategory".equals(fieldName)) {
                    deserializedMigrationIssues.issueCategory = MigrationIssuesCategory.fromString(reader.getString());
                } else if ("issueDescription".equals(fieldName)) {
                    deserializedMigrationIssues.issueDescription = reader.getString();
                } else if ("possibleCause".equals(fieldName)) {
                    deserializedMigrationIssues.possibleCause = reader.getString();
                } else if ("recommendedActions".equals(fieldName)) {
                    List<String> recommendedActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedMigrationIssues.recommendedActions = recommendedActions;
                } else if ("moreInformation".equals(fieldName)) {
                    List<MoreInformation> moreInformation
                        = reader.readArray(reader1 -> MoreInformation.fromJson(reader1));
                    deserializedMigrationIssues.moreInformation = moreInformation;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrationIssues;
        });
    }
}
