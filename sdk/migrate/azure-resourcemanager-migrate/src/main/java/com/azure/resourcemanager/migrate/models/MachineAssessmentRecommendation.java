// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Machine Assessment Recommendation with additional properties.
 */
@Immutable
public final class MachineAssessmentRecommendation implements JsonSerializable<MachineAssessmentRecommendation> {
    /*
     * The configuration data.
     */
    private Configuration configuration;

    /*
     * The recommended details.
     */
    private RecommendedFor recommendedFor;

    /*
     * The migration Platform.
     */
    private MigrationPlatform migrationPlatform;

    /*
     * The confidence score.
     */
    private Double confidenceScore;

    /*
     * The migration suitability.
     */
    private MigrationSuitability migrationSuitability;

    /*
     * The security suitability.
     */
    private SecuritySuitability securitySuitability;

    /*
     * The total cost details.
     */
    private List<CostDetailsCommon> totalCost;

    /*
     * The total cost details.
     */
    private List<SavingsDetailsCommon> totalSavings;

    /*
     * The migration issues list.
     */
    private List<MigrationIssues> migrationIssues;

    /*
     * The Skus list.
     */
    private List<SkusMigrationSuitability> skus;

    /*
     * VM Security Suitability Results.
     */
    private List<VmSecuritySuitability> vmSecuritySuitabilityResults;

    /*
     * Recommended security type for the VM.
     */
    private AzureVmSecurityType recommendedVmSecurityType;

    /**
     * Creates an instance of MachineAssessmentRecommendation class.
     */
    private MachineAssessmentRecommendation() {
    }

    /**
     * Get the configuration property: The configuration data.
     * 
     * @return the configuration value.
     */
    public Configuration configuration() {
        return this.configuration;
    }

    /**
     * Get the recommendedFor property: The recommended details.
     * 
     * @return the recommendedFor value.
     */
    public RecommendedFor recommendedFor() {
        return this.recommendedFor;
    }

    /**
     * Get the migrationPlatform property: The migration Platform.
     * 
     * @return the migrationPlatform value.
     */
    public MigrationPlatform migrationPlatform() {
        return this.migrationPlatform;
    }

    /**
     * Get the confidenceScore property: The confidence score.
     * 
     * @return the confidenceScore value.
     */
    public Double confidenceScore() {
        return this.confidenceScore;
    }

    /**
     * Get the migrationSuitability property: The migration suitability.
     * 
     * @return the migrationSuitability value.
     */
    public MigrationSuitability migrationSuitability() {
        return this.migrationSuitability;
    }

    /**
     * Get the securitySuitability property: The security suitability.
     * 
     * @return the securitySuitability value.
     */
    public SecuritySuitability securitySuitability() {
        return this.securitySuitability;
    }

    /**
     * Get the totalCost property: The total cost details.
     * 
     * @return the totalCost value.
     */
    public List<CostDetailsCommon> totalCost() {
        return this.totalCost;
    }

    /**
     * Get the totalSavings property: The total cost details.
     * 
     * @return the totalSavings value.
     */
    public List<SavingsDetailsCommon> totalSavings() {
        return this.totalSavings;
    }

    /**
     * Get the migrationIssues property: The migration issues list.
     * 
     * @return the migrationIssues value.
     */
    public List<MigrationIssues> migrationIssues() {
        return this.migrationIssues;
    }

    /**
     * Get the skus property: The Skus list.
     * 
     * @return the skus value.
     */
    public List<SkusMigrationSuitability> skus() {
        return this.skus;
    }

    /**
     * Get the vmSecuritySuitabilityResults property: VM Security Suitability Results.
     * 
     * @return the vmSecuritySuitabilityResults value.
     */
    public List<VmSecuritySuitability> vmSecuritySuitabilityResults() {
        return this.vmSecuritySuitabilityResults;
    }

    /**
     * Get the recommendedVmSecurityType property: Recommended security type for the VM.
     * 
     * @return the recommendedVmSecurityType value.
     */
    public AzureVmSecurityType recommendedVmSecurityType() {
        return this.recommendedVmSecurityType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configuration() != null) {
            configuration().validate();
        }
        if (recommendedFor() != null) {
            recommendedFor().validate();
        }
        if (migrationSuitability() != null) {
            migrationSuitability().validate();
        }
        if (securitySuitability() != null) {
            securitySuitability().validate();
        }
        if (totalCost() != null) {
            totalCost().forEach(e -> e.validate());
        }
        if (totalSavings() != null) {
            totalSavings().forEach(e -> e.validate());
        }
        if (migrationIssues() != null) {
            migrationIssues().forEach(e -> e.validate());
        }
        if (skus() != null) {
            skus().forEach(e -> e.validate());
        }
        if (vmSecuritySuitabilityResults() != null) {
            vmSecuritySuitabilityResults().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachineAssessmentRecommendation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachineAssessmentRecommendation if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MachineAssessmentRecommendation.
     */
    public static MachineAssessmentRecommendation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MachineAssessmentRecommendation deserializedMachineAssessmentRecommendation
                = new MachineAssessmentRecommendation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configuration".equals(fieldName)) {
                    deserializedMachineAssessmentRecommendation.configuration = Configuration.fromJson(reader);
                } else if ("recommendedFor".equals(fieldName)) {
                    deserializedMachineAssessmentRecommendation.recommendedFor = RecommendedFor.fromJson(reader);
                } else if ("migrationPlatform".equals(fieldName)) {
                    deserializedMachineAssessmentRecommendation.migrationPlatform
                        = MigrationPlatform.fromString(reader.getString());
                } else if ("confidenceScore".equals(fieldName)) {
                    deserializedMachineAssessmentRecommendation.confidenceScore
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("migrationSuitability".equals(fieldName)) {
                    deserializedMachineAssessmentRecommendation.migrationSuitability
                        = MigrationSuitability.fromJson(reader);
                } else if ("securitySuitability".equals(fieldName)) {
                    deserializedMachineAssessmentRecommendation.securitySuitability
                        = SecuritySuitability.fromJson(reader);
                } else if ("totalCost".equals(fieldName)) {
                    List<CostDetailsCommon> totalCost
                        = reader.readArray(reader1 -> CostDetailsCommon.fromJson(reader1));
                    deserializedMachineAssessmentRecommendation.totalCost = totalCost;
                } else if ("totalSavings".equals(fieldName)) {
                    List<SavingsDetailsCommon> totalSavings
                        = reader.readArray(reader1 -> SavingsDetailsCommon.fromJson(reader1));
                    deserializedMachineAssessmentRecommendation.totalSavings = totalSavings;
                } else if ("migrationIssues".equals(fieldName)) {
                    List<MigrationIssues> migrationIssues
                        = reader.readArray(reader1 -> MigrationIssues.fromJson(reader1));
                    deserializedMachineAssessmentRecommendation.migrationIssues = migrationIssues;
                } else if ("skus".equals(fieldName)) {
                    List<SkusMigrationSuitability> skus
                        = reader.readArray(reader1 -> SkusMigrationSuitability.fromJson(reader1));
                    deserializedMachineAssessmentRecommendation.skus = skus;
                } else if ("vmSecuritySuitabilityResults".equals(fieldName)) {
                    List<VmSecuritySuitability> vmSecuritySuitabilityResults
                        = reader.readArray(reader1 -> VmSecuritySuitability.fromJson(reader1));
                    deserializedMachineAssessmentRecommendation.vmSecuritySuitabilityResults
                        = vmSecuritySuitabilityResults;
                } else if ("recommendedVmSecurityType".equals(fieldName)) {
                    deserializedMachineAssessmentRecommendation.recommendedVmSecurityType
                        = AzureVmSecurityType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMachineAssessmentRecommendation;
        });
    }
}
