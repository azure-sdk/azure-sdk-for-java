// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Number of web apps per type.
 */
@Immutable
public final class WebAppsPerType implements JsonSerializable<WebAppsPerType> {
    /*
     * Name of the web app type.
     */
    private WebAppType webAppType;

    /*
     * Count of the web app type.
     */
    private int count;

    /**
     * Creates an instance of WebAppsPerType class.
     */
    private WebAppsPerType() {
    }

    /**
     * Get the webAppType property: Name of the web app type.
     * 
     * @return the webAppType value.
     */
    public WebAppType webAppType() {
        return this.webAppType;
    }

    /**
     * Get the count property: Count of the web app type.
     * 
     * @return the count value.
     */
    public int count() {
        return this.count;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (webAppType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property webAppType in model WebAppsPerType"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WebAppsPerType.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("webAppType", this.webAppType == null ? null : this.webAppType.toString());
        jsonWriter.writeIntField("count", this.count);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebAppsPerType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebAppsPerType if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebAppsPerType.
     */
    public static WebAppsPerType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebAppsPerType deserializedWebAppsPerType = new WebAppsPerType();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("webAppType".equals(fieldName)) {
                    deserializedWebAppsPerType.webAppType = WebAppType.fromString(reader.getString());
                } else if ("count".equals(fieldName)) {
                    deserializedWebAppsPerType.count = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebAppsPerType;
        });
    }
}
