// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ARM IDs of the target assessments.
 */
@Fluent
public final class TargetAssessmentArmIds implements JsonSerializable<TargetAssessmentArmIds> {
    /*
     * ARM ID for Azure Kubernetes Service assessment.
     */
    private String aks;

    /*
     * ARM ID for Azure App Service assessment.
     */
    private String azureAppService;

    /*
     * ARM ID for Azure App Service Container assessment.
     */
    private String azureAppServiceContainer;

    /**
     * Creates an instance of TargetAssessmentArmIds class.
     */
    public TargetAssessmentArmIds() {
    }

    /**
     * Get the aks property: ARM ID for Azure Kubernetes Service assessment.
     * 
     * @return the aks value.
     */
    public String aks() {
        return this.aks;
    }

    /**
     * Set the aks property: ARM ID for Azure Kubernetes Service assessment.
     * 
     * @param aks the aks value to set.
     * @return the TargetAssessmentArmIds object itself.
     */
    public TargetAssessmentArmIds withAks(String aks) {
        this.aks = aks;
        return this;
    }

    /**
     * Get the azureAppService property: ARM ID for Azure App Service assessment.
     * 
     * @return the azureAppService value.
     */
    public String azureAppService() {
        return this.azureAppService;
    }

    /**
     * Set the azureAppService property: ARM ID for Azure App Service assessment.
     * 
     * @param azureAppService the azureAppService value to set.
     * @return the TargetAssessmentArmIds object itself.
     */
    public TargetAssessmentArmIds withAzureAppService(String azureAppService) {
        this.azureAppService = azureAppService;
        return this;
    }

    /**
     * Get the azureAppServiceContainer property: ARM ID for Azure App Service Container assessment.
     * 
     * @return the azureAppServiceContainer value.
     */
    public String azureAppServiceContainer() {
        return this.azureAppServiceContainer;
    }

    /**
     * Set the azureAppServiceContainer property: ARM ID for Azure App Service Container assessment.
     * 
     * @param azureAppServiceContainer the azureAppServiceContainer value to set.
     * @return the TargetAssessmentArmIds object itself.
     */
    public TargetAssessmentArmIds withAzureAppServiceContainer(String azureAppServiceContainer) {
        this.azureAppServiceContainer = azureAppServiceContainer;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("aks", this.aks);
        jsonWriter.writeStringField("azureAppService", this.azureAppService);
        jsonWriter.writeStringField("azureAppServiceContainer", this.azureAppServiceContainer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetAssessmentArmIds from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetAssessmentArmIds if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetAssessmentArmIds.
     */
    public static TargetAssessmentArmIds fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetAssessmentArmIds deserializedTargetAssessmentArmIds = new TargetAssessmentArmIds();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aks".equals(fieldName)) {
                    deserializedTargetAssessmentArmIds.aks = reader.getString();
                } else if ("azureAppService".equals(fieldName)) {
                    deserializedTargetAssessmentArmIds.azureAppService = reader.getString();
                } else if ("azureAppServiceContainer".equals(fieldName)) {
                    deserializedTargetAssessmentArmIds.azureAppServiceContainer = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetAssessmentArmIds;
        });
    }
}
