// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Scope of the assessment.
 */
@Fluent
public final class Scope implements JsonSerializable<Scope> {
    /*
     * The scope type
     */
    private ScopeType scopeType;

    /*
     * The server group arm id.
     */
    private String serverGroupId;

    /*
     * The ARG query.
     */
    private String azureResourceGraphQuery;

    /**
     * Creates an instance of Scope class.
     */
    public Scope() {
    }

    /**
     * Get the scopeType property: The scope type.
     * 
     * @return the scopeType value.
     */
    public ScopeType scopeType() {
        return this.scopeType;
    }

    /**
     * Set the scopeType property: The scope type.
     * 
     * @param scopeType the scopeType value to set.
     * @return the Scope object itself.
     */
    public Scope withScopeType(ScopeType scopeType) {
        this.scopeType = scopeType;
        return this;
    }

    /**
     * Get the serverGroupId property: The server group arm id.
     * 
     * @return the serverGroupId value.
     */
    public String serverGroupId() {
        return this.serverGroupId;
    }

    /**
     * Set the serverGroupId property: The server group arm id.
     * 
     * @param serverGroupId the serverGroupId value to set.
     * @return the Scope object itself.
     */
    public Scope withServerGroupId(String serverGroupId) {
        this.serverGroupId = serverGroupId;
        return this;
    }

    /**
     * Get the azureResourceGraphQuery property: The ARG query.
     * 
     * @return the azureResourceGraphQuery value.
     */
    public String azureResourceGraphQuery() {
        return this.azureResourceGraphQuery;
    }

    /**
     * Set the azureResourceGraphQuery property: The ARG query.
     * 
     * @param azureResourceGraphQuery the azureResourceGraphQuery value to set.
     * @return the Scope object itself.
     */
    public Scope withAzureResourceGraphQuery(String azureResourceGraphQuery) {
        this.azureResourceGraphQuery = azureResourceGraphQuery;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scopeType", this.scopeType == null ? null : this.scopeType.toString());
        jsonWriter.writeStringField("serverGroupId", this.serverGroupId);
        jsonWriter.writeStringField("azureResourceGraphQuery", this.azureResourceGraphQuery);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Scope from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Scope if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Scope.
     */
    public static Scope fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Scope deserializedScope = new Scope();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scopeType".equals(fieldName)) {
                    deserializedScope.scopeType = ScopeType.fromString(reader.getString());
                } else if ("serverGroupId".equals(fieldName)) {
                    deserializedScope.serverGroupId = reader.getString();
                } else if ("azureResourceGraphQuery".equals(fieldName)) {
                    deserializedScope.azureResourceGraphQuery = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScope;
        });
    }
}
