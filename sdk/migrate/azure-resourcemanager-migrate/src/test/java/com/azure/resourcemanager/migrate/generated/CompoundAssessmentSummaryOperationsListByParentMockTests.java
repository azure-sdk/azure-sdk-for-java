// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.migrate.MigrateManager;
import com.azure.resourcemanager.migrate.models.WebAppCompoundAssessmentSummary;
import com.azure.resourcemanager.migrate.models.WebAppType;
import com.azure.resourcemanager.migrate.models.WebServerType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CompoundAssessmentSummaryOperationsListByParentMockTests {
    @Test
    public void testListByParent() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"summaryType\":\"Target\",\"summaryName\":\"md\",\"sources\":[{\"sourceName\":\"OracleServer\",\"sourceType\":\"Machine\",\"platform\":\"IaaS\",\"count\":88453426},{\"sourceName\":\"OracleServer\",\"sourceType\":\"Instance\",\"platform\":\"PaaS\",\"count\":390798331},{\"sourceName\":\"SAPInstance\",\"sourceType\":\"WebServer\",\"platform\":\"IaaS\",\"count\":248274393},{\"sourceName\":\"IIS\",\"sourceType\":\"Machine\",\"platform\":\"PaaS\",\"count\":624724935}],\"targets\":[{\"targetName\":\"SqlMI\",\"targetType\":\"Server\",\"platform\":\"PaaS\",\"count\":998969185}],\"targetSourceMapping\":[{\"sourceRef\":\"MySQLServer\",\"targetRef\":\"FlexServerPG\",\"sourceCount\":1184256001,\"targetCount\":827817441,\"migrationDetails\":{\"readinessSummary\":[{},{}],\"migrationType\":\"Rehost\"},\"managementDetails\":[{}],\"costDetails\":[{}],\"savingsDetails\":[{}],\"confidenceScore\":73.18531843819797},{\"sourceRef\":\"Unknown\",\"targetRef\":\"AzureVM\",\"sourceCount\":774640076,\"targetCount\":2046808928,\"migrationDetails\":{\"readinessSummary\":[{},{}],\"migrationType\":\"Rearchitect\"},\"managementDetails\":[{},{},{},{}],\"costDetails\":[{},{},{}],\"savingsDetails\":[{}],\"confidenceScore\":72.20613642407396},{\"sourceRef\":\"SqlDatabase\",\"targetRef\":\"AzureSpringApps\",\"sourceCount\":956878361,\"targetCount\":1391467998,\"migrationDetails\":{\"readinessSummary\":[{},{},{}],\"migrationType\":\"Unknown\"},\"managementDetails\":[{},{},{}],\"costDetails\":[{},{}],\"savingsDetails\":[{},{}],\"confidenceScore\":75.13251583973188},{\"sourceRef\":\"Unknown\",\"targetRef\":\"OracleIaasVM\",\"sourceCount\":447504444,\"targetCount\":1399923471,\"migrationDetails\":{\"readinessSummary\":[{},{},{},{}],\"migrationType\":\"Rehost\"},\"managementDetails\":[{},{},{}],\"costDetails\":[{},{}],\"savingsDetails\":[{}],\"confidenceScore\":63.15306362436244}],\"costComponents\":[{\"savingOptions\":\"SavingsPlan1Year\",\"costDetail\":[{},{}]}],\"savingsComponents\":[{\"savingOptions\":\"CustomAzureOfferCode\",\"savingsDetail\":[{},{},{},{}]},{\"savingOptions\":\"RI3Year\",\"savingsDetail\":[{},{},{},{}]},{\"savingOptions\":\"RI1Year\",\"savingsDetail\":[{}]},{\"savingOptions\":\"RI1Year\",\"savingsDetail\":[{}]}],\"assessmentName\":\"biqylihkaet\",\"discoveredLightSummary\":{\"numberOfWebApps\":267259716,\"numberOfWebAppsPerType\":[{\"webAppType\":\"Java\",\"count\":1351604805},{\"webAppType\":\"Unknown\",\"count\":533172139},{\"webAppType\":\"Java\",\"count\":1960016252}],\"numberOfWebServersPerType\":[{\"webServerType\":\"IIS\",\"count\":5394429},{\"webServerType\":\"IIS\",\"count\":1059821653},{\"webServerType\":\"Unknown\",\"count\":639676552},{\"webServerType\":\"Tomcat\",\"count\":361988947}],\"numberOfWebServers\":1887113058,\"numberOfServers\":1657324555}},\"id\":\"rjcxerfuwu\",\"name\":\"ttxfvjr\",\"type\":\"i\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MigrateManager manager = MigrateManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<WebAppCompoundAssessmentSummary> response = manager.compoundAssessmentSummaryOperations()
            .listByParent("jttgzf", "ishc", "khaj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("biqylihkaet", response.iterator().next().properties().assessmentName());
        Assertions.assertEquals(267259716,
            response.iterator().next().properties().discoveredLightSummary().numberOfWebApps());
        Assertions.assertEquals(WebAppType.JAVA,
            response.iterator()
                .next()
                .properties()
                .discoveredLightSummary()
                .numberOfWebAppsPerType()
                .get(0)
                .webAppType());
        Assertions.assertEquals(1351604805,
            response.iterator().next().properties().discoveredLightSummary().numberOfWebAppsPerType().get(0).count());
        Assertions.assertEquals(WebServerType.IIS,
            response.iterator()
                .next()
                .properties()
                .discoveredLightSummary()
                .numberOfWebServersPerType()
                .get(0)
                .webServerType());
        Assertions.assertEquals(5394429,
            response.iterator()
                .next()
                .properties()
                .discoveredLightSummary()
                .numberOfWebServersPerType()
                .get(0)
                .count());
        Assertions.assertEquals(1887113058,
            response.iterator().next().properties().discoveredLightSummary().numberOfWebServers());
        Assertions.assertEquals(1657324555,
            response.iterator().next().properties().discoveredLightSummary().numberOfServers());
    }
}
