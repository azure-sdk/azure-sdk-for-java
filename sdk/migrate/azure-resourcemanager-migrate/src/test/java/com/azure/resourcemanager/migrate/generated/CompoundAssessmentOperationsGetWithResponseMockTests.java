// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.migrate.MigrateManager;
import com.azure.resourcemanager.migrate.models.CompoundAssessment;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CompoundAssessmentOperationsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Canceled\",\"targetAssessmentArmIds\":{\"aks\":\"f\",\"azureAppService\":\"keyyi\",\"azureAppServiceContainer\":\"jbdlwtgrhpdjpju\"},\"fallbackMachineAssessmentArmId\":\"sxazjpq\",\"details\":{\"createdTimestamp\":\"2021-10-21T12:52:50Z\",\"updatedTimestamp\":\"2021-12-01T17:52:28Z\",\"status\":\"Invalid\"}},\"id\":\"xxhejjzzvd\",\"name\":\"dgwdslfhot\",\"type\":\"mcy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MigrateManager manager = MigrateManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CompoundAssessment response = manager.compoundAssessmentOperations()
            .getWithResponse("zscxaqwo", "chcbonqvpkvlrxnj", "ase", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("f", response.properties().targetAssessmentArmIds().aks());
        Assertions.assertEquals("keyyi", response.properties().targetAssessmentArmIds().azureAppService());
        Assertions.assertEquals("jbdlwtgrhpdjpju",
            response.properties().targetAssessmentArmIds().azureAppServiceContainer());
        Assertions.assertEquals("sxazjpq", response.properties().fallbackMachineAssessmentArmId());
    }
}
