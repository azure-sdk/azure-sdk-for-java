// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.migrate.generated;

import com.azure.resourcemanager.migrate.models.AssessmentDetails;
import com.azure.resourcemanager.migrate.models.AssessmentSizingCriterion;
import com.azure.resourcemanager.migrate.models.AzureCurrency;
import com.azure.resourcemanager.migrate.models.AzureDiskType;
import com.azure.resourcemanager.migrate.models.AzureHybridUseBenefit;
import com.azure.resourcemanager.migrate.models.AzureOffer;
import com.azure.resourcemanager.migrate.models.AzurePricingTier;
import com.azure.resourcemanager.migrate.models.AzureSecurityOfferingType;
import com.azure.resourcemanager.migrate.models.AzureStorageRedundancy;
import com.azure.resourcemanager.migrate.models.AzureVmFamily;
import com.azure.resourcemanager.migrate.models.BillingSettings;
import com.azure.resourcemanager.migrate.models.EnvironmentType;
import com.azure.resourcemanager.migrate.models.LicensingProgram;
import com.azure.resourcemanager.migrate.models.MachineAssessmentSettings;
import com.azure.resourcemanager.migrate.models.MachineAssessmentV2Properties;
import com.azure.resourcemanager.migrate.models.Percentile;
import com.azure.resourcemanager.migrate.models.PerformanceData;
import com.azure.resourcemanager.migrate.models.SavingsOptions;
import com.azure.resourcemanager.migrate.models.SavingsSettings;
import com.azure.resourcemanager.migrate.models.Scope;
import com.azure.resourcemanager.migrate.models.ScopeType;
import com.azure.resourcemanager.migrate.models.TimeRange;
import com.azure.resourcemanager.migrate.models.VmUptime;
import java.time.OffsetDateTime;
import java.util.Arrays;

/**
 * Samples for MachineAssessmentsV2Operations Create.
 */
public final class MachineAssessmentsV2OperationsCreateSamples {
    /*
     * x-ms-original-file: 2024-03-03-preview/MachineAssessmentsV2Operations_Create_MaximumSet_Gen.json
     */
    /**
     * Sample code: MachineAssessmentsV2Operations_Create_MaximumSet.
     * 
     * @param manager Entry point to MigrateManager.
     */
    public static void
        machineAssessmentsV2OperationsCreateMaximumSet(com.azure.resourcemanager.migrate.MigrateManager manager) {
        manager.machineAssessmentsV2Operations()
            .define("assessmentName")
            .withExistingAssessmentProject("rgmachineAssessments", "contosoProject")
            .withProperties(new MachineAssessmentV2Properties()
                .withScope(new Scope().withScopeType(ScopeType.SERVER_GROUP_ID)
                    .withServerGroupId("f")
                    .withAzureResourceGraphQuery("hfhwuqalmenpcttboxvo"))
                .withSettings(new MachineAssessmentSettings().withAzureLocation("rsequlcso")
                    .withCurrency(AzureCurrency.UNKNOWN)
                    .withScalingFactor(9.0D)
                    .withDiscountPercentage(5.0D)
                    .withSizingCriterion(AssessmentSizingCriterion.PERFORMANCE_BASED)
                    .withPerformanceData(new PerformanceData().withPercentile(Percentile.fromString("Unknown"))
                        .withTimeRange(TimeRange.DAY)
                        .withPerfDataStartTime(OffsetDateTime.parse("2025-02-21T05:47:51.336Z"))
                        .withPerfDataEndTime(OffsetDateTime.parse("2025-02-21T05:47:51.336Z")))
                    .withSavingsSettings(new SavingsSettings().withSavingsOptions(SavingsOptions.NONE)
                        .withAzureOfferCode(AzureOffer.UNKNOWN))
                    .withBillingSettings(
                        new BillingSettings().withLicensingProgram(LicensingProgram.RETAIL).withSubscriptionId("lee"))
                    .withEnvironmentType(EnvironmentType.PRODUCTION)
                    .withAzureSecurityOfferingType(AzureSecurityOfferingType.NO)
                    .withAzureDiskTypes(Arrays.asList(AzureDiskType.UNKNOWN))
                    .withAzurePricingTier(AzurePricingTier.STANDARD)
                    .withAzureStorageRedundancy(AzureStorageRedundancy.UNKNOWN)
                    .withAzureHybridUseBenefit(AzureHybridUseBenefit.UNKNOWN)
                    .withLinuxAzureHybridUseBenefit(AzureHybridUseBenefit.UNKNOWN)
                    .withAzureVmFamilies(Arrays.asList(AzureVmFamily.UNKNOWN))
                    .withVmUptime(new VmUptime().withDaysPerMonth(9).withHoursPerDay(10)))
                .withDetails(new AssessmentDetails()))
            .create();
    }
}
