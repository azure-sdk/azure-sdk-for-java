// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbiembedded.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.powerbiembedded.models.CheckNameReason;
import java.io.IOException;

/**
 * The CheckNameResponse model.
 */
@Fluent
public final class CheckNameResponseInner implements JsonSerializable<CheckNameResponseInner> {
    /*
     * Specifies a Boolean value that indicates whether the specified Power BI Workspace Collection name is available to
     * use.
     */
    private Boolean nameAvailable;

    /*
     * Reason why the workspace collection name cannot be used.
     */
    private CheckNameReason reason;

    /*
     * Message indicating an unavailable name due to a conflict, or a description of the naming rules that are violated.
     */
    private String message;

    /**
     * Creates an instance of CheckNameResponseInner class.
     */
    public CheckNameResponseInner() {
    }

    /**
     * Get the nameAvailable property: Specifies a Boolean value that indicates whether the specified Power BI Workspace
     * Collection name is available to use.
     * 
     * @return the nameAvailable value.
     */
    public Boolean nameAvailable() {
        return this.nameAvailable;
    }

    /**
     * Set the nameAvailable property: Specifies a Boolean value that indicates whether the specified Power BI Workspace
     * Collection name is available to use.
     * 
     * @param nameAvailable the nameAvailable value to set.
     * @return the CheckNameResponseInner object itself.
     */
    public CheckNameResponseInner withNameAvailable(Boolean nameAvailable) {
        this.nameAvailable = nameAvailable;
        return this;
    }

    /**
     * Get the reason property: Reason why the workspace collection name cannot be used.
     * 
     * @return the reason value.
     */
    public CheckNameReason reason() {
        return this.reason;
    }

    /**
     * Set the reason property: Reason why the workspace collection name cannot be used.
     * 
     * @param reason the reason value to set.
     * @return the CheckNameResponseInner object itself.
     */
    public CheckNameResponseInner withReason(CheckNameReason reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get the message property: Message indicating an unavailable name due to a conflict, or a description of the
     * naming rules that are violated.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: Message indicating an unavailable name due to a conflict, or a description of the
     * naming rules that are violated.
     * 
     * @param message the message value to set.
     * @return the CheckNameResponseInner object itself.
     */
    public CheckNameResponseInner withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("nameAvailable", this.nameAvailable);
        jsonWriter.writeStringField("reason", this.reason == null ? null : this.reason.toString());
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CheckNameResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CheckNameResponseInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CheckNameResponseInner.
     */
    public static CheckNameResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CheckNameResponseInner deserializedCheckNameResponseInner = new CheckNameResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nameAvailable".equals(fieldName)) {
                    deserializedCheckNameResponseInner.nameAvailable = reader.getNullable(JsonReader::getBoolean);
                } else if ("reason".equals(fieldName)) {
                    deserializedCheckNameResponseInner.reason = CheckNameReason.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedCheckNameResponseInner.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCheckNameResponseInner;
        });
    }
}
