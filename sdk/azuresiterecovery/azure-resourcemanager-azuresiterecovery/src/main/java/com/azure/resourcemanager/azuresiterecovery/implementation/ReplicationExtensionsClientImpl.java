// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuresiterecovery.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azuresiterecovery.fluent.ReplicationExtensionsClient;
import com.azure.resourcemanager.azuresiterecovery.fluent.models.ReplicationExtensionModelInner;
import com.azure.resourcemanager.azuresiterecovery.models.ReplicationExtensionModelCollection;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ReplicationExtensionsClient. */
public final class ReplicationExtensionsClientImpl implements ReplicationExtensionsClient {
    /** The proxy service used to perform REST calls. */
    private final ReplicationExtensionsService service;

    /** The service client containing this operation class. */
    private final AzureSiteRecoveryManagementServiceApiImpl client;

    /**
     * Initializes an instance of ReplicationExtensionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ReplicationExtensionsClientImpl(AzureSiteRecoveryManagementServiceApiImpl client) {
        this.service =
            RestProxy
                .create(ReplicationExtensionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureSiteRecoveryManagementServiceApiReplicationExtensions to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureSiteRecoveryMan")
    public interface ReplicationExtensionsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/replicationExtensions/{replicationExtensionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ReplicationExtensionModelInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("vaultName") String vaultName,
            @PathParam("replicationExtensionName") String replicationExtensionName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/replicationExtensions/{replicationExtensionName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("vaultName") String vaultName,
            @PathParam("replicationExtensionName") String replicationExtensionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ReplicationExtensionModelInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/replicationExtensions/{replicationExtensionName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("vaultName") String vaultName,
            @PathParam("replicationExtensionName") String replicationExtensionName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/replicationExtensions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ReplicationExtensionModelCollection>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("vaultName") String vaultName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ReplicationExtensionModelCollection>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the replication extension.
     *
     * <p>Gets the details of the replication extension.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replication extension along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ReplicationExtensionModelInner>> getWithResponseAsync(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vaultName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vaultName is required and cannot be null."));
        }
        if (replicationExtensionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter replicationExtensionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            subscriptionId,
                            resourceGroupName,
                            vaultName,
                            replicationExtensionName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the replication extension.
     *
     * <p>Gets the details of the replication extension.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replication extension along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ReplicationExtensionModelInner>> getWithResponseAsync(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vaultName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vaultName is required and cannot be null."));
        }
        if (replicationExtensionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter replicationExtensionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                subscriptionId,
                resourceGroupName,
                vaultName,
                replicationExtensionName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the replication extension.
     *
     * <p>Gets the details of the replication extension.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replication extension on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationExtensionModelInner> getAsync(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        return getWithResponseAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the replication extension.
     *
     * <p>Gets the details of the replication extension.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replication extension along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ReplicationExtensionModelInner> getWithResponse(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        Context context) {
        return getWithResponseAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, context)
            .block();
    }

    /**
     * Gets the replication extension.
     *
     * <p>Gets the details of the replication extension.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replication extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationExtensionModelInner get(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        return getWithResponse(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, Context.NONE)
            .getValue();
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @param body Replication extension model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication extension model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        ReplicationExtensionModelInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vaultName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vaultName is required and cannot be null."));
        }
        if (replicationExtensionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter replicationExtensionName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            subscriptionId,
                            resourceGroupName,
                            vaultName,
                            replicationExtensionName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @param body Replication extension model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication extension model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        ReplicationExtensionModelInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vaultName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vaultName is required and cannot be null."));
        }
        if (replicationExtensionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter replicationExtensionName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                subscriptionId,
                resourceGroupName,
                vaultName,
                replicationExtensionName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @param body Replication extension model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication extension model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationExtensionModelInner>, ReplicationExtensionModelInner> beginCreateAsync(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        ReplicationExtensionModelInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, body);
        return this
            .client
            .<ReplicationExtensionModelInner, ReplicationExtensionModelInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ReplicationExtensionModelInner.class,
                ReplicationExtensionModelInner.class,
                this.client.getContext());
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication extension model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationExtensionModelInner>, ReplicationExtensionModelInner> beginCreateAsync(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        final ReplicationExtensionModelInner body = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, body);
        return this
            .client
            .<ReplicationExtensionModelInner, ReplicationExtensionModelInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ReplicationExtensionModelInner.class,
                ReplicationExtensionModelInner.class,
                this.client.getContext());
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @param body Replication extension model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of replication extension model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ReplicationExtensionModelInner>, ReplicationExtensionModelInner> beginCreateAsync(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        ReplicationExtensionModelInner body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(
                subscriptionId, resourceGroupName, vaultName, replicationExtensionName, body, context);
        return this
            .client
            .<ReplicationExtensionModelInner, ReplicationExtensionModelInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ReplicationExtensionModelInner.class,
                ReplicationExtensionModelInner.class,
                context);
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication extension model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationExtensionModelInner>, ReplicationExtensionModelInner> beginCreate(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        final ReplicationExtensionModelInner body = null;
        return this
            .beginCreateAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, body)
            .getSyncPoller();
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @param body Replication extension model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of replication extension model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ReplicationExtensionModelInner>, ReplicationExtensionModelInner> beginCreate(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        ReplicationExtensionModelInner body,
        Context context) {
        return this
            .beginCreateAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, body, context)
            .getSyncPoller();
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @param body Replication extension model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication extension model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationExtensionModelInner> createAsync(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        ReplicationExtensionModelInner body) {
        return beginCreateAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication extension model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationExtensionModelInner> createAsync(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        final ReplicationExtensionModelInner body = null;
        return beginCreateAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @param body Replication extension model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication extension model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ReplicationExtensionModelInner> createAsync(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        ReplicationExtensionModelInner body,
        Context context) {
        return beginCreateAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication extension model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationExtensionModelInner create(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        final ReplicationExtensionModelInner body = null;
        return createAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, body).block();
    }

    /**
     * Puts the replication extension.
     *
     * <p>Creates the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param replicationExtensionName Replication extension name.
     * @param body Replication extension model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication extension model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReplicationExtensionModelInner create(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        ReplicationExtensionModelInner body,
        Context context) {
        return createAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, body, context)
            .block();
    }

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault Name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vaultName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vaultName is required and cannot be null."));
        }
        if (replicationExtensionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter replicationExtensionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            subscriptionId,
                            resourceGroupName,
                            vaultName,
                            replicationExtensionName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault Name.
     * @param replicationExtensionName Replication extension name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vaultName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vaultName is required and cannot be null."));
        }
        if (replicationExtensionName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter replicationExtensionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                subscriptionId,
                resourceGroupName,
                vaultName,
                replicationExtensionName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault Name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault Name.
     * @param replicationExtensionName Replication extension name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault Name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        return this
            .beginDeleteAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName)
            .getSyncPoller();
    }

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault Name.
     * @param replicationExtensionName Replication extension name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        Context context) {
        return this
            .beginDeleteAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, context)
            .getSyncPoller();
    }

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault Name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        return beginDeleteAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault Name.
     * @param replicationExtensionName Replication extension name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        Context context) {
        return beginDeleteAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault Name.
     * @param replicationExtensionName Replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String subscriptionId, String resourceGroupName, String vaultName, String replicationExtensionName) {
        deleteAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName).block();
    }

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault Name.
     * @param replicationExtensionName Replication extension name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String replicationExtensionName,
        Context context) {
        deleteAsync(subscriptionId, resourceGroupName, vaultName, replicationExtensionName, context).block();
    }

    /**
     * Lists the replication extensions.
     *
     * <p>Gets the list of replication extensions in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of replication extensions in the given vault along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationExtensionModelInner>> listSinglePageAsync(
        String subscriptionId, String resourceGroupName, String vaultName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vaultName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vaultName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            subscriptionId,
                            resourceGroupName,
                            vaultName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<ReplicationExtensionModelInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the replication extensions.
     *
     * <p>Gets the list of replication extensions in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of replication extensions in the given vault along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationExtensionModelInner>> listSinglePageAsync(
        String subscriptionId, String resourceGroupName, String vaultName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vaultName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vaultName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                subscriptionId,
                resourceGroupName,
                vaultName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists the replication extensions.
     *
     * <p>Gets the list of replication extensions in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of replication extensions in the given vault as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ReplicationExtensionModelInner> listAsync(
        String subscriptionId, String resourceGroupName, String vaultName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(subscriptionId, resourceGroupName, vaultName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the replication extensions.
     *
     * <p>Gets the list of replication extensions in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of replication extensions in the given vault as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ReplicationExtensionModelInner> listAsync(
        String subscriptionId, String resourceGroupName, String vaultName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(subscriptionId, resourceGroupName, vaultName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the replication extensions.
     *
     * <p>Gets the list of replication extensions in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of replication extensions in the given vault as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ReplicationExtensionModelInner> list(
        String subscriptionId, String resourceGroupName, String vaultName) {
        return new PagedIterable<>(listAsync(subscriptionId, resourceGroupName, vaultName));
    }

    /**
     * Lists the replication extensions.
     *
     * <p>Gets the list of replication extensions in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of replication extensions in the given vault as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ReplicationExtensionModelInner> list(
        String subscriptionId, String resourceGroupName, String vaultName, Context context) {
        return new PagedIterable<>(listAsync(subscriptionId, resourceGroupName, vaultName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication extension model collection along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationExtensionModelInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ReplicationExtensionModelInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return replication extension model collection along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ReplicationExtensionModelInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
