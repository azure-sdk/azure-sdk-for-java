// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuresiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuresiterecovery.fluent.FabricsClient;
import com.azure.resourcemanager.azuresiterecovery.fluent.models.FabricModelInner;
import com.azure.resourcemanager.azuresiterecovery.models.FabricModel;
import com.azure.resourcemanager.azuresiterecovery.models.Fabrics;

public final class FabricsImpl implements Fabrics {
    private static final ClientLogger LOGGER = new ClientLogger(FabricsImpl.class);

    private final FabricsClient innerClient;

    private final com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager serviceManager;

    public FabricsImpl(
        FabricsClient innerClient,
        com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<FabricModel> getByResourceGroupWithResponse(
        String subscriptionId, String resourceGroupName, String fabricName, Context context) {
        Response<FabricModelInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(subscriptionId, resourceGroupName, fabricName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FabricModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FabricModel getByResourceGroup(String subscriptionId, String resourceGroupName, String fabricName) {
        FabricModelInner inner = this.serviceClient().getByResourceGroup(subscriptionId, resourceGroupName, fabricName);
        if (inner != null) {
            return new FabricModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String subscriptionId, String resourceGroupName, String fabricName) {
        this.serviceClient().delete(subscriptionId, resourceGroupName, fabricName);
    }

    public void delete(String subscriptionId, String resourceGroupName, String fabricName, Context context) {
        this.serviceClient().delete(subscriptionId, resourceGroupName, fabricName, context);
    }

    public PagedIterable<FabricModel> list(String subscriptionId) {
        PagedIterable<FabricModelInner> inner = this.serviceClient().list(subscriptionId);
        return Utils.mapPage(inner, inner1 -> new FabricModelImpl(inner1, this.manager()));
    }

    public PagedIterable<FabricModel> list(String subscriptionId, String continuationToken, Context context) {
        PagedIterable<FabricModelInner> inner = this.serviceClient().list(subscriptionId, continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new FabricModelImpl(inner1, this.manager()));
    }

    public PagedIterable<FabricModel> listByResourceGroup(String subscriptionId, String resourceGroupName) {
        PagedIterable<FabricModelInner> inner =
            this.serviceClient().listByResourceGroup(subscriptionId, resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new FabricModelImpl(inner1, this.manager()));
    }

    public PagedIterable<FabricModel> listByResourceGroup(
        String subscriptionId, String resourceGroupName, String continuationToken, Context context) {
        PagedIterable<FabricModelInner> inner =
            this.serviceClient().listByResourceGroup(subscriptionId, resourceGroupName, continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new FabricModelImpl(inner1, this.manager()));
    }

    public FabricModel getById(String id) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fabricName = Utils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        return this
            .getByResourceGroupWithResponse(subscriptionId, resourceGroupName, fabricName, Context.NONE)
            .getValue();
    }

    public Response<FabricModel> getByIdWithResponse(String id, Context context) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fabricName = Utils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        return this.getByResourceGroupWithResponse(subscriptionId, resourceGroupName, fabricName, context);
    }

    public void deleteById(String id) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fabricName = Utils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        this.delete(subscriptionId, resourceGroupName, fabricName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fabricName = Utils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        this.delete(subscriptionId, resourceGroupName, fabricName, context);
    }

    private FabricsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager manager() {
        return this.serviceManager;
    }

    public FabricModelImpl define(String name) {
        return new FabricModelImpl(name, this.manager());
    }
}
