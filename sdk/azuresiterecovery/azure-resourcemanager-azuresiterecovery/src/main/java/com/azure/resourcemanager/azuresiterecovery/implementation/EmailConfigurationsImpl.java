// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuresiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuresiterecovery.fluent.EmailConfigurationsClient;
import com.azure.resourcemanager.azuresiterecovery.fluent.models.EmailConfigurationModelInner;
import com.azure.resourcemanager.azuresiterecovery.models.EmailConfigurationModel;
import com.azure.resourcemanager.azuresiterecovery.models.EmailConfigurations;

public final class EmailConfigurationsImpl implements EmailConfigurations {
    private static final ClientLogger LOGGER = new ClientLogger(EmailConfigurationsImpl.class);

    private final EmailConfigurationsClient innerClient;

    private final com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager serviceManager;

    public EmailConfigurationsImpl(
        EmailConfigurationsClient innerClient,
        com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<EmailConfigurationModel> getWithResponse(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String emailConfigurationName,
        Context context) {
        Response<EmailConfigurationModelInner> inner =
            this
                .serviceClient()
                .getWithResponse(subscriptionId, resourceGroupName, vaultName, emailConfigurationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EmailConfigurationModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EmailConfigurationModel get(
        String subscriptionId, String resourceGroupName, String vaultName, String emailConfigurationName) {
        EmailConfigurationModelInner inner =
            this.serviceClient().get(subscriptionId, resourceGroupName, vaultName, emailConfigurationName);
        if (inner != null) {
            return new EmailConfigurationModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<EmailConfigurationModel> list(
        String subscriptionId, String resourceGroupName, String vaultName) {
        PagedIterable<EmailConfigurationModelInner> inner =
            this.serviceClient().list(subscriptionId, resourceGroupName, vaultName);
        return Utils.mapPage(inner, inner1 -> new EmailConfigurationModelImpl(inner1, this.manager()));
    }

    public PagedIterable<EmailConfigurationModel> list(
        String subscriptionId, String resourceGroupName, String vaultName, Context context) {
        PagedIterable<EmailConfigurationModelInner> inner =
            this.serviceClient().list(subscriptionId, resourceGroupName, vaultName, context);
        return Utils.mapPage(inner, inner1 -> new EmailConfigurationModelImpl(inner1, this.manager()));
    }

    public EmailConfigurationModel getById(String id) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = Utils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String emailConfigurationName = Utils.getValueFromIdByName(id, "alertSettings");
        if (emailConfigurationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'alertSettings'.", id)));
        }
        return this
            .getWithResponse(subscriptionId, resourceGroupName, vaultName, emailConfigurationName, Context.NONE)
            .getValue();
    }

    public Response<EmailConfigurationModel> getByIdWithResponse(String id, Context context) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = Utils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String emailConfigurationName = Utils.getValueFromIdByName(id, "alertSettings");
        if (emailConfigurationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'alertSettings'.", id)));
        }
        return this.getWithResponse(subscriptionId, resourceGroupName, vaultName, emailConfigurationName, context);
    }

    private EmailConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager manager() {
        return this.serviceManager;
    }

    public EmailConfigurationModelImpl define(String name) {
        return new EmailConfigurationModelImpl(name, this.manager());
    }
}
