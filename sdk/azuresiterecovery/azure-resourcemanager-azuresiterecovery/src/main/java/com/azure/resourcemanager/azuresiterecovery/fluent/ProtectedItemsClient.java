// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuresiterecovery.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azuresiterecovery.fluent.models.PlannedFailoverModelInner;
import com.azure.resourcemanager.azuresiterecovery.fluent.models.ProtectedItemModelInner;

/** An instance of this class provides access to all the operations defined in ProtectedItemsClient. */
public interface ProtectedItemsClient {
    /**
     * Gets the protected item.
     *
     * <p>Gets the details of the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the protected item along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProtectedItemModelInner> getWithResponse(
        String subscriptionId, String resourceGroupName, String vaultName, String protectedItemName, Context context);

    /**
     * Gets the protected item.
     *
     * <p>Gets the details of the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the protected item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProtectedItemModelInner get(
        String subscriptionId, String resourceGroupName, String vaultName, String protectedItemName);

    /**
     * Puts the protected item.
     *
     * <p>Creates the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of protected item model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProtectedItemModelInner>, ProtectedItemModelInner> beginCreate(
        String subscriptionId, String resourceGroupName, String vaultName, String protectedItemName);

    /**
     * Puts the protected item.
     *
     * <p>Creates the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @param body Protected item model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of protected item model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProtectedItemModelInner>, ProtectedItemModelInner> beginCreate(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String protectedItemName,
        ProtectedItemModelInner body,
        Context context);

    /**
     * Puts the protected item.
     *
     * <p>Creates the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return protected item model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProtectedItemModelInner create(
        String subscriptionId, String resourceGroupName, String vaultName, String protectedItemName);

    /**
     * Puts the protected item.
     *
     * <p>Creates the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @param body Protected item model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return protected item model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProtectedItemModelInner create(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String protectedItemName,
        ProtectedItemModelInner body,
        Context context);

    /**
     * Deletes the protected item.
     *
     * <p>Removes the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String subscriptionId, String resourceGroupName, String vaultName, String protectedItemName);

    /**
     * Deletes the protected item.
     *
     * <p>Removes the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @param forceDelete A flag indicating whether to do force delete or not.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String protectedItemName,
        Boolean forceDelete,
        Context context);

    /**
     * Deletes the protected item.
     *
     * <p>Removes the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String subscriptionId, String resourceGroupName, String vaultName, String protectedItemName);

    /**
     * Deletes the protected item.
     *
     * <p>Removes the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @param forceDelete A flag indicating whether to do force delete or not.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String protectedItemName,
        Boolean forceDelete,
        Context context);

    /**
     * Lists the protected items.
     *
     * <p>Gets the list of protected items in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of protected items in the given vault as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProtectedItemModelInner> list(String subscriptionId, String resourceGroupName, String vaultName);

    /**
     * Lists the protected items.
     *
     * <p>Gets the list of protected items in the given vault.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of protected items in the given vault as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProtectedItemModelInner> list(
        String subscriptionId, String resourceGroupName, String vaultName, Context context);

    /**
     * Performs planned failover.
     *
     * <p>Performs the planned failover on the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of planned failover model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<PlannedFailoverModelInner>, PlannedFailoverModelInner> beginPlannedFailover(
        String subscriptionId, String resourceGroupName, String vaultName, String protectedItemName);

    /**
     * Performs planned failover.
     *
     * <p>Performs the planned failover on the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @param body Planned failover model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of planned failover model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<PlannedFailoverModelInner>, PlannedFailoverModelInner> beginPlannedFailover(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String protectedItemName,
        PlannedFailoverModelInner body,
        Context context);

    /**
     * Performs planned failover.
     *
     * <p>Performs the planned failover on the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return planned failover model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PlannedFailoverModelInner plannedFailover(
        String subscriptionId, String resourceGroupName, String vaultName, String protectedItemName);

    /**
     * Performs planned failover.
     *
     * <p>Performs the planned failover on the protected item.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param vaultName Vault name.
     * @param protectedItemName Protected item name.
     * @param body Planned failover model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return planned failover model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PlannedFailoverModelInner plannedFailover(
        String subscriptionId,
        String resourceGroupName,
        String vaultName,
        String protectedItemName,
        PlannedFailoverModelInner body,
        Context context);
}
