// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuresiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuresiterecovery.fluent.PoliciesClient;
import com.azure.resourcemanager.azuresiterecovery.fluent.models.PolicyModelInner;
import com.azure.resourcemanager.azuresiterecovery.models.Policies;
import com.azure.resourcemanager.azuresiterecovery.models.PolicyModel;

public final class PoliciesImpl implements Policies {
    private static final ClientLogger LOGGER = new ClientLogger(PoliciesImpl.class);

    private final PoliciesClient innerClient;

    private final com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager serviceManager;

    public PoliciesImpl(
        PoliciesClient innerClient,
        com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<PolicyModel> getWithResponse(
        String subscriptionId, String resourceGroupName, String vaultName, String policyName, Context context) {
        Response<PolicyModelInner> inner =
            this.serviceClient().getWithResponse(subscriptionId, resourceGroupName, vaultName, policyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PolicyModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PolicyModel get(String subscriptionId, String resourceGroupName, String vaultName, String policyName) {
        PolicyModelInner inner = this.serviceClient().get(subscriptionId, resourceGroupName, vaultName, policyName);
        if (inner != null) {
            return new PolicyModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String subscriptionId, String resourceGroupName, String vaultName, String policyName) {
        this.serviceClient().delete(subscriptionId, resourceGroupName, vaultName, policyName);
    }

    public void delete(
        String subscriptionId, String resourceGroupName, String vaultName, String policyName, Context context) {
        this.serviceClient().delete(subscriptionId, resourceGroupName, vaultName, policyName, context);
    }

    public PagedIterable<PolicyModel> list(String subscriptionId, String resourceGroupName, String vaultName) {
        PagedIterable<PolicyModelInner> inner = this.serviceClient().list(subscriptionId, resourceGroupName, vaultName);
        return Utils.mapPage(inner, inner1 -> new PolicyModelImpl(inner1, this.manager()));
    }

    public PagedIterable<PolicyModel> list(
        String subscriptionId, String resourceGroupName, String vaultName, Context context) {
        PagedIterable<PolicyModelInner> inner =
            this.serviceClient().list(subscriptionId, resourceGroupName, vaultName, context);
        return Utils.mapPage(inner, inner1 -> new PolicyModelImpl(inner1, this.manager()));
    }

    public PolicyModel getById(String id) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = Utils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "replicationPolicies");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationPolicies'.", id)));
        }
        return this.getWithResponse(subscriptionId, resourceGroupName, vaultName, policyName, Context.NONE).getValue();
    }

    public Response<PolicyModel> getByIdWithResponse(String id, Context context) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = Utils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "replicationPolicies");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationPolicies'.", id)));
        }
        return this.getWithResponse(subscriptionId, resourceGroupName, vaultName, policyName, context);
    }

    public void deleteById(String id) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = Utils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "replicationPolicies");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationPolicies'.", id)));
        }
        this.delete(subscriptionId, resourceGroupName, vaultName, policyName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = Utils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "replicationPolicies");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationPolicies'.", id)));
        }
        this.delete(subscriptionId, resourceGroupName, vaultName, policyName, context);
    }

    private PoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager manager() {
        return this.serviceManager;
    }

    public PolicyModelImpl define(String name) {
        return new PolicyModelImpl(name, this.manager());
    }
}
