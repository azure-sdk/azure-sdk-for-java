// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuresiterecovery.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azuresiterecovery.fluent.models.VaultModelInner;
import com.azure.resourcemanager.azuresiterecovery.models.VaultModel;
import com.azure.resourcemanager.azuresiterecovery.models.VaultModelProperties;
import com.azure.resourcemanager.azuresiterecovery.models.VaultModelSystemData;
import com.azure.resourcemanager.azuresiterecovery.models.VaultModelUpdate;
import java.util.Collections;
import java.util.Map;

public final class VaultModelImpl implements VaultModel, VaultModel.Definition, VaultModel.Update {
    private VaultModelInner innerObject;

    private final com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public VaultModelProperties properties() {
        return this.innerModel().properties();
    }

    public VaultModelSystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public VaultModelInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager manager() {
        return this.serviceManager;
    }

    private String subscriptionId;

    private String resourceGroupName;

    private String vaultName;

    private VaultModelUpdate updateBody;

    public VaultModelImpl withExistingResourceGroup(String subscriptionId, String resourceGroupName) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public VaultModel create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVaults()
                .create(subscriptionId, resourceGroupName, vaultName, this.innerModel(), Context.NONE);
        return this;
    }

    public VaultModel create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVaults()
                .create(subscriptionId, resourceGroupName, vaultName, this.innerModel(), context);
        return this;
    }

    VaultModelImpl(String name, com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager serviceManager) {
        this.innerObject = new VaultModelInner();
        this.serviceManager = serviceManager;
        this.vaultName = name;
    }

    public VaultModelImpl update() {
        this.updateBody = new VaultModelUpdate();
        return this;
    }

    public VaultModel apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVaults()
                .update(subscriptionId, resourceGroupName, vaultName, updateBody, Context.NONE);
        return this;
    }

    public VaultModel apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVaults()
                .update(subscriptionId, resourceGroupName, vaultName, updateBody, context);
        return this;
    }

    VaultModelImpl(
        VaultModelInner innerObject,
        com.azure.resourcemanager.azuresiterecovery.AzureSiteRecoveryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.subscriptionId = Utils.getValueFromIdByName(innerObject.id(), "subscriptions");
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.vaultName = Utils.getValueFromIdByName(innerObject.id(), "replicationVaults");
    }

    public VaultModel refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVaults()
                .getByResourceGroupWithResponse(subscriptionId, resourceGroupName, vaultName, Context.NONE)
                .getValue();
        return this;
    }

    public VaultModel refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVaults()
                .getByResourceGroupWithResponse(subscriptionId, resourceGroupName, vaultName, context)
                .getValue();
        return this;
    }

    public VaultModelImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public VaultModelImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public VaultModelImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public VaultModelImpl withProperties(VaultModelProperties properties) {
        if (isInCreateMode()) {
            this.innerModel().withProperties(properties);
            return this;
        } else {
            this.updateBody.withProperties(properties);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
