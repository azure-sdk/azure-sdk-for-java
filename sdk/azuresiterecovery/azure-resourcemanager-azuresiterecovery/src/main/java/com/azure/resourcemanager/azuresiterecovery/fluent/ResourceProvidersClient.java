// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuresiterecovery.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azuresiterecovery.fluent.models.CheckNameAvailabilityResponseModelInner;
import com.azure.resourcemanager.azuresiterecovery.fluent.models.DeploymentPreflightModelInner;
import com.azure.resourcemanager.azuresiterecovery.models.CheckNameAvailabilityModel;

/** An instance of this class provides access to all the operations defined in ResourceProvidersClient. */
public interface ResourceProvidersClient {
    /**
     * Performs the resource name availability check.
     *
     * <p>Checks the resource name availability.
     *
     * @param subscriptionId The subscription Id.
     * @param location Resource location.
     * @param body Resource details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return check name availability response model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CheckNameAvailabilityResponseModelInner> checkNameAvailabilityWithResponse(
        String subscriptionId, String location, CheckNameAvailabilityModel body, Context context);

    /**
     * Performs the resource name availability check.
     *
     * <p>Checks the resource name availability.
     *
     * @param subscriptionId The subscription Id.
     * @param location Resource location.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return check name availability response model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CheckNameAvailabilityResponseModelInner checkNameAvailability(String subscriptionId, String location);

    /**
     * Performs resource deployment validation.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param deploymentId Deployment Id.
     * @param body Deployment preflight model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment preflight model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DeploymentPreflightModelInner> deploymentPreflightWithResponse(
        String subscriptionId,
        String resourceGroupName,
        String deploymentId,
        DeploymentPreflightModelInner body,
        Context context);

    /**
     * Performs resource deployment validation.
     *
     * @param subscriptionId The subscription Id.
     * @param resourceGroupName Resource group name.
     * @param deploymentId Deployment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment preflight model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DeploymentPreflightModelInner deploymentPreflight(
        String subscriptionId, String resourceGroupName, String deploymentId);
}
