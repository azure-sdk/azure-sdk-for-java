// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuresiterecovery.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuresiterecovery.models.EventModelProperties;
import com.azure.resourcemanager.azuresiterecovery.models.EventModelSystemData;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Event model. */
@Fluent
public final class EventModelInner {
    /*
     * Event model properties.
     */
    @JsonProperty(value = "properties", required = true)
    private EventModelProperties properties;

    /*
     * Gets or sets the Id of the resource.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * Gets or sets the name of the resource.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /*
     * Gets or sets the type of the resource.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /*
     * The systemData property.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private EventModelSystemData systemData;

    /*
     * Gets or sets the resource tags.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /** Creates an instance of EventModelInner class. */
    public EventModelInner() {
    }

    /**
     * Get the properties property: Event model properties.
     *
     * @return the properties value.
     */
    public EventModelProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Event model properties.
     *
     * @param properties the properties value to set.
     * @return the EventModelInner object itself.
     */
    public EventModelInner withProperties(EventModelProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the id property: Gets or sets the Id of the resource.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Gets or sets the name of the resource.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: Gets or sets the type of the resource.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the systemData property: The systemData property.
     *
     * @return the systemData value.
     */
    public EventModelSystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the tags property: Gets or sets the resource tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Gets or sets the resource tags.
     *
     * @param tags the tags value to set.
     * @return the EventModelInner object itself.
     */
    public EventModelInner withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property properties in model EventModelInner"));
        } else {
            properties().validate();
        }
        if (systemData() != null) {
            systemData().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EventModelInner.class);
}
