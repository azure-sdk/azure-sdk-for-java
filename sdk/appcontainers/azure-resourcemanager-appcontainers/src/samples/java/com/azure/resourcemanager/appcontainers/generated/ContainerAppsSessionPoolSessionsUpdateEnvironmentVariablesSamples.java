// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.generated;

import com.azure.resourcemanager.appcontainers.models.EnvironmentVar;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ContainerAppsSessionPoolSessions UpdateEnvironmentVariables.
 */
public final class ContainerAppsSessionPoolSessionsUpdateEnvironmentVariablesSamples {
    /*
     * x-ms-original-file: specification/app/resource-manager/Microsoft.App/preview/2023-11-02-preview/examples/
     * Sessions_UpdateEnvironmentVariables.json
     */
    /**
     * Sample code: Update Session environment variables.
     * 
     * @param manager Entry point to ContainerAppsApiManager.
     */
    public static void
        updateSessionEnvironmentVariables(com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager) {
        manager.containerAppsSessionPoolSessions().updateEnvironmentVariablesWithResponse("rg", "testsessionpool",
            "testsession",
            mapOf("container1",
                Arrays.asList(
                    new EnvironmentVar().withName("envvarname1").withValue("envvarval1")
                        .withSecretRef("fakeTokenPlaceholder"),
                    new EnvironmentVar()
                        .withName("envvarname2").withValue("envvarval2").withSecretRef("fakeTokenPlaceholder")),
                "container2",
                Arrays.asList(
                    new EnvironmentVar().withName("envvarname3").withValue("envvarval3")
                        .withSecretRef("fakeTokenPlaceholder"),
                    new EnvironmentVar().withName("envvarname4").withValue("envvarval4")
                        .withSecretRef("fakeTokenPlaceholder"))),
            com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
