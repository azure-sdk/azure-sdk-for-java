// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.appcontainers.models.CustomContainerConfiguration;
import com.azure.resourcemanager.appcontainers.models.DynamicPoolConfiguration;
import com.azure.resourcemanager.appcontainers.models.SecretAutoGenerated;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * SessionPool resource specific patchable properties.
 */
@Fluent
public final class SessionPoolPatchPropertiesProperties {
    /*
     * The max count of Sessions at the same time.
     */
    @JsonProperty(value = "maxConcurrentSessions")
    private Integer maxConcurrentSessions;

    /*
     * The secrets of the Session Pool.
     */
    @JsonProperty(value = "secrets")
    private List<SecretAutoGenerated> secrets;

    /*
     * The pool configuration if the poolManagementType is dynamic.
     */
    @JsonProperty(value = "dynamicPoolConfiguration")
    private DynamicPoolConfiguration dynamicPoolConfiguration;

    /*
     * The custom container configuration if the containerType is CustomContainer.
     */
    @JsonProperty(value = "customContainerConfiguration")
    private CustomContainerConfiguration customContainerConfiguration;

    /**
     * Creates an instance of SessionPoolPatchPropertiesProperties class.
     */
    public SessionPoolPatchPropertiesProperties() {
    }

    /**
     * Get the maxConcurrentSessions property: The max count of Sessions at the same time.
     * 
     * @return the maxConcurrentSessions value.
     */
    public Integer maxConcurrentSessions() {
        return this.maxConcurrentSessions;
    }

    /**
     * Set the maxConcurrentSessions property: The max count of Sessions at the same time.
     * 
     * @param maxConcurrentSessions the maxConcurrentSessions value to set.
     * @return the SessionPoolPatchPropertiesProperties object itself.
     */
    public SessionPoolPatchPropertiesProperties withMaxConcurrentSessions(Integer maxConcurrentSessions) {
        this.maxConcurrentSessions = maxConcurrentSessions;
        return this;
    }

    /**
     * Get the secrets property: The secrets of the Session Pool.
     * 
     * @return the secrets value.
     */
    public List<SecretAutoGenerated> secrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: The secrets of the Session Pool.
     * 
     * @param secrets the secrets value to set.
     * @return the SessionPoolPatchPropertiesProperties object itself.
     */
    public SessionPoolPatchPropertiesProperties withSecrets(List<SecretAutoGenerated> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Get the dynamicPoolConfiguration property: The pool configuration if the poolManagementType is dynamic.
     * 
     * @return the dynamicPoolConfiguration value.
     */
    public DynamicPoolConfiguration dynamicPoolConfiguration() {
        return this.dynamicPoolConfiguration;
    }

    /**
     * Set the dynamicPoolConfiguration property: The pool configuration if the poolManagementType is dynamic.
     * 
     * @param dynamicPoolConfiguration the dynamicPoolConfiguration value to set.
     * @return the SessionPoolPatchPropertiesProperties object itself.
     */
    public SessionPoolPatchPropertiesProperties
        withDynamicPoolConfiguration(DynamicPoolConfiguration dynamicPoolConfiguration) {
        this.dynamicPoolConfiguration = dynamicPoolConfiguration;
        return this;
    }

    /**
     * Get the customContainerConfiguration property: The custom container configuration if the containerType is
     * CustomContainer.
     * 
     * @return the customContainerConfiguration value.
     */
    public CustomContainerConfiguration customContainerConfiguration() {
        return this.customContainerConfiguration;
    }

    /**
     * Set the customContainerConfiguration property: The custom container configuration if the containerType is
     * CustomContainer.
     * 
     * @param customContainerConfiguration the customContainerConfiguration value to set.
     * @return the SessionPoolPatchPropertiesProperties object itself.
     */
    public SessionPoolPatchPropertiesProperties
        withCustomContainerConfiguration(CustomContainerConfiguration customContainerConfiguration) {
        this.customContainerConfiguration = customContainerConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
        if (dynamicPoolConfiguration() != null) {
            dynamicPoolConfiguration().validate();
        }
        if (customContainerConfiguration() != null) {
            customContainerConfiguration().validate();
        }
    }
}
