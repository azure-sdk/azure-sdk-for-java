// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.appcontainers.models.CodeExecutionConfiguration;
import com.azure.resourcemanager.appcontainers.models.ContainerType;
import com.azure.resourcemanager.appcontainers.models.SessionAuthConfiguration;
import com.azure.resourcemanager.appcontainers.models.SshConfiguration;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Session resource.
 */
@Fluent
public final class SessionInner extends ProxyResource {
    /*
     * Session resource specific properties
     */
    @JsonProperty(value = "properties")
    private SessionProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of SessionInner class.
     */
    public SessionInner() {
    }

    /**
     * Get the innerProperties property: Session resource specific properties.
     * 
     * @return the innerProperties value.
     */
    private SessionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the name property: The name of the Session.
     * 
     * @return the name value.
     */
    public String namePropertiesName() {
        return this.innerProperties() == null ? null : this.innerProperties().name();
    }

    /**
     * Set the name property: The name of the Session.
     * 
     * @param name the name value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withNamePropertiesName(String name) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withName(name);
        return this;
    }

    /**
     * Get the requestedDurationInSeconds property: The requested duration of the Session in seconds.
     * 
     * @return the requestedDurationInSeconds value.
     */
    public Integer requestedDurationInSeconds() {
        return this.innerProperties() == null ? null : this.innerProperties().requestedDurationInSeconds();
    }

    /**
     * Set the requestedDurationInSeconds property: The requested duration of the Session in seconds.
     * 
     * @param requestedDurationInSeconds the requestedDurationInSeconds value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withRequestedDurationInSeconds(Integer requestedDurationInSeconds) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withRequestedDurationInSeconds(requestedDurationInSeconds);
        return this;
    }

    /**
     * Get the timeElapsedInSeconds property: The time elapsed in seconds since the Session was created.
     * 
     * @return the timeElapsedInSeconds value.
     */
    public Integer timeElapsedInSeconds() {
        return this.innerProperties() == null ? null : this.innerProperties().timeElapsedInSeconds();
    }

    /**
     * Set the timeElapsedInSeconds property: The time elapsed in seconds since the Session was created.
     * 
     * @param timeElapsedInSeconds the timeElapsedInSeconds value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withTimeElapsedInSeconds(Integer timeElapsedInSeconds) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withTimeElapsedInSeconds(timeElapsedInSeconds);
        return this;
    }

    /**
     * Get the expiryTime property: The time when the Session will expire.
     * 
     * @return the expiryTime value.
     */
    public OffsetDateTime expiryTime() {
        return this.innerProperties() == null ? null : this.innerProperties().expiryTime();
    }

    /**
     * Set the expiryTime property: The time when the Session will expire.
     * 
     * @param expiryTime the expiryTime value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withExpiryTime(OffsetDateTime expiryTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withExpiryTime(expiryTime);
        return this;
    }

    /**
     * Get the generatedTime property: The time when the Session was generated.
     * 
     * @return the generatedTime value.
     */
    public OffsetDateTime generatedTime() {
        return this.innerProperties() == null ? null : this.innerProperties().generatedTime();
    }

    /**
     * Set the generatedTime property: The time when the Session was generated.
     * 
     * @param generatedTime the generatedTime value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withGeneratedTime(OffsetDateTime generatedTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withGeneratedTime(generatedTime);
        return this;
    }

    /**
     * Get the connectionString property: The connection string of the Session.
     * 
     * @return the connectionString value.
     */
    public String connectionString() {
        return this.innerProperties() == null ? null : this.innerProperties().connectionString();
    }

    /**
     * Set the connectionString property: The connection string of the Session.
     * 
     * @param connectionString the connectionString value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withConnectionString(String connectionString) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withConnectionString(connectionString);
        return this;
    }

    /**
     * Get the endpoint property: The endpoint of the Session.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.innerProperties() == null ? null : this.innerProperties().endpoint();
    }

    /**
     * Set the endpoint property: The endpoint of the Session.
     * 
     * @param endpoint the endpoint value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withEndpoint(String endpoint) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withEndpoint(endpoint);
        return this;
    }

    /**
     * Get the sessionKind property: The kind of the Session.
     * 
     * @return the sessionKind value.
     */
    public ContainerType sessionKind() {
        return this.innerProperties() == null ? null : this.innerProperties().sessionKind();
    }

    /**
     * Set the sessionKind property: The kind of the Session.
     * 
     * @param sessionKind the sessionKind value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withSessionKind(ContainerType sessionKind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withSessionKind(sessionKind);
        return this;
    }

    /**
     * Get the status property: The status of the Session.
     * 
     * @return the status value.
     */
    public String status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: The status of the Session.
     * 
     * @param status the status value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withStatus(String status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Get the sshConfiguration property: SSH configuration of the Session.
     * 
     * @return the sshConfiguration value.
     */
    public SshConfiguration sshConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().sshConfiguration();
    }

    /**
     * Set the sshConfiguration property: SSH configuration of the Session.
     * 
     * @param sshConfiguration the sshConfiguration value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withSshConfiguration(SshConfiguration sshConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withSshConfiguration(sshConfiguration);
        return this;
    }

    /**
     * Get the codeExecutionConfiguration property: Code execution configuration of the Session.
     * 
     * @return the codeExecutionConfiguration value.
     */
    public CodeExecutionConfiguration codeExecutionConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().codeExecutionConfiguration();
    }

    /**
     * Set the codeExecutionConfiguration property: Code execution configuration of the Session.
     * 
     * @param codeExecutionConfiguration the codeExecutionConfiguration value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withCodeExecutionConfiguration(CodeExecutionConfiguration codeExecutionConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withCodeExecutionConfiguration(codeExecutionConfiguration);
        return this;
    }

    /**
     * Get the sessionAuthConfiguration property: Session auth configuration.
     * 
     * @return the sessionAuthConfiguration value.
     */
    public SessionAuthConfiguration sessionAuthConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().sessionAuthConfiguration();
    }

    /**
     * Set the sessionAuthConfiguration property: Session auth configuration.
     * 
     * @param sessionAuthConfiguration the sessionAuthConfiguration value to set.
     * @return the SessionInner object itself.
     */
    public SessionInner withSessionAuthConfiguration(SessionAuthConfiguration sessionAuthConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionProperties();
        }
        this.innerProperties().withSessionAuthConfiguration(sessionAuthConfiguration);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
