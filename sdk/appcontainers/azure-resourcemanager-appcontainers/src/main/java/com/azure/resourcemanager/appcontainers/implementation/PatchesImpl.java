// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcontainers.fluent.PatchesClient;
import com.azure.resourcemanager.appcontainers.fluent.models.PatchCollectionInner;
import com.azure.resourcemanager.appcontainers.fluent.models.PatchResourceInner;
import com.azure.resourcemanager.appcontainers.models.PatchCollection;
import com.azure.resourcemanager.appcontainers.models.PatchResource;
import com.azure.resourcemanager.appcontainers.models.Patches;

public final class PatchesImpl implements Patches {
    private static final ClientLogger LOGGER = new ClientLogger(PatchesImpl.class);

    private final PatchesClient innerClient;

    private final com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager;

    public PatchesImpl(
        PatchesClient innerClient, com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<PatchCollection> listByBuilderResourceWithResponse(
        String resourceGroupName, String builderName, String filter, Context context) {
        Response<PatchCollectionInner> inner =
            this.serviceClient().listByBuilderResourceWithResponse(resourceGroupName, builderName, filter, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PatchCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PatchCollection listByBuilderResource(String resourceGroupName, String builderName) {
        PatchCollectionInner inner = this.serviceClient().listByBuilderResource(resourceGroupName, builderName);
        if (inner != null) {
            return new PatchCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PatchResource> getWithResponse(
        String resourceGroupName, String builderName, String patchName, Context context) {
        Response<PatchResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, builderName, patchName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PatchResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PatchResource get(String resourceGroupName, String builderName, String patchName) {
        PatchResourceInner inner = this.serviceClient().get(resourceGroupName, builderName, patchName);
        if (inner != null) {
            return new PatchResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String builderName, String patchName) {
        this.serviceClient().delete(resourceGroupName, builderName, patchName);
    }

    public void delete(String resourceGroupName, String builderName, String patchName, Context context) {
        this.serviceClient().delete(resourceGroupName, builderName, patchName, context);
    }

    public void skipConfigure(String resourceGroupName, String builderName, String patchName, boolean patchSkipConfig) {
        this.serviceClient().skipConfigure(resourceGroupName, builderName, patchName, patchSkipConfig);
    }

    public void skipConfigure(
        String resourceGroupName, String builderName, String patchName, boolean patchSkipConfig, Context context) {
        this.serviceClient().skipConfigure(resourceGroupName, builderName, patchName, patchSkipConfig, context);
    }

    public PatchResource apply(String resourceGroupName, String builderName, String patchName) {
        PatchResourceInner inner = this.serviceClient().apply(resourceGroupName, builderName, patchName);
        if (inner != null) {
            return new PatchResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PatchResource apply(String resourceGroupName, String builderName, String patchName, Context context) {
        PatchResourceInner inner = this.serviceClient().apply(resourceGroupName, builderName, patchName, context);
        if (inner != null) {
            return new PatchResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private PatchesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager() {
        return this.serviceManager;
    }
}
