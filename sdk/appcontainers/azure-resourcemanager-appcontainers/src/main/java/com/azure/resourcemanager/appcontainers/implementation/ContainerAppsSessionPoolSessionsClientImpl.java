// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.appcontainers.fluent.ContainerAppsSessionPoolSessionsClient;
import com.azure.resourcemanager.appcontainers.fluent.models.SessionInner;
import com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException;
import com.azure.resourcemanager.appcontainers.models.EnvironmentVar;
import com.azure.resourcemanager.appcontainers.models.SessionCollection;
import java.util.List;
import java.util.Map;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ContainerAppsSessionPoolSessionsClient.
 */
public final class ContainerAppsSessionPoolSessionsClientImpl implements ContainerAppsSessionPoolSessionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ContainerAppsSessionPoolSessionsService service;

    /**
     * The service client containing this operation class.
     */
    private final ContainerAppsApiClientImpl client;

    /**
     * Initializes an instance of ContainerAppsSessionPoolSessionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ContainerAppsSessionPoolSessionsClientImpl(ContainerAppsApiClientImpl client) {
        this.service = RestProxy.create(ContainerAppsSessionPoolSessionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ContainerAppsApiClientContainerAppsSessionPoolSessions to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ContainerAppsApiClie")
    public interface ContainerAppsSessionPoolSessionsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/sessionPools/{sessionPoolName}/generateSessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<SessionCollection>> generateSessions(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sessionPoolName") String sessionPoolName, @QueryParam("count") Integer count,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") SessionInner sessionEnvelope,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/sessionPools/{sessionPoolName}/sessions/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<SessionInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sessionPoolName") String sessionPoolName, @PathParam("name") String name,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/sessionPools/{sessionPoolName}/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<SessionCollection>> listBySessionPool(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sessionPoolName") String sessionPoolName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/sessionPools/{sessionPoolName}/sessions/{name}/updateEnvironmentVariables")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<Void>> updateEnvironmentVariables(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sessionPoolName") String sessionPoolName, @PathParam("name") String name,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") Map<String, List<EnvironmentVar>> environmentVariables,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<SessionCollection>> generateSessionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<SessionCollection>> listBySessionPoolNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Generate Sessions from a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param sessionEnvelope Properties used to generate a session.
     * @param count How many Sessions to generate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session collection ARM resource along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionInner>> generateSessionsSinglePageAsync(String resourceGroupName,
        String sessionPoolName, SessionInner sessionEnvelope, Integer count) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sessionPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sessionPoolName is required and cannot be null."));
        }
        if (sessionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sessionEnvelope is required and cannot be null."));
        } else {
            sessionEnvelope.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.generateSessions(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, sessionPoolName, count, this.client.getApiVersion(), sessionEnvelope, accept,
                context))
            .<PagedResponse<SessionInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Generate Sessions from a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param sessionEnvelope Properties used to generate a session.
     * @param count How many Sessions to generate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session collection ARM resource along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionInner>> generateSessionsSinglePageAsync(String resourceGroupName,
        String sessionPoolName, SessionInner sessionEnvelope, Integer count, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sessionPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sessionPoolName is required and cannot be null."));
        }
        if (sessionEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sessionEnvelope is required and cannot be null."));
        } else {
            sessionEnvelope.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .generateSessions(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                sessionPoolName, count, this.client.getApiVersion(), sessionEnvelope, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Generate Sessions from a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param sessionEnvelope Properties used to generate a session.
     * @param count How many Sessions to generate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session collection ARM resource as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SessionInner> generateSessionsAsync(String resourceGroupName, String sessionPoolName,
        SessionInner sessionEnvelope, Integer count) {
        return new PagedFlux<>(
            () -> generateSessionsSinglePageAsync(resourceGroupName, sessionPoolName, sessionEnvelope, count),
            nextLink -> generateSessionsNextSinglePageAsync(nextLink));
    }

    /**
     * Generate Sessions from a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param sessionEnvelope Properties used to generate a session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session collection ARM resource as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SessionInner> generateSessionsAsync(String resourceGroupName, String sessionPoolName,
        SessionInner sessionEnvelope) {
        final Integer count = null;
        return new PagedFlux<>(
            () -> generateSessionsSinglePageAsync(resourceGroupName, sessionPoolName, sessionEnvelope, count),
            nextLink -> generateSessionsNextSinglePageAsync(nextLink));
    }

    /**
     * Generate Sessions from a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param sessionEnvelope Properties used to generate a session.
     * @param count How many Sessions to generate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session collection ARM resource as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SessionInner> generateSessionsAsync(String resourceGroupName, String sessionPoolName,
        SessionInner sessionEnvelope, Integer count, Context context) {
        return new PagedFlux<>(
            () -> generateSessionsSinglePageAsync(resourceGroupName, sessionPoolName, sessionEnvelope, count, context),
            nextLink -> generateSessionsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Generate Sessions from a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param sessionEnvelope Properties used to generate a session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session collection ARM resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SessionInner> generateSessions(String resourceGroupName, String sessionPoolName,
        SessionInner sessionEnvelope) {
        final Integer count = null;
        return new PagedIterable<>(generateSessionsAsync(resourceGroupName, sessionPoolName, sessionEnvelope, count));
    }

    /**
     * Generate Sessions from a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param sessionEnvelope Properties used to generate a session.
     * @param count How many Sessions to generate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session collection ARM resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SessionInner> generateSessions(String resourceGroupName, String sessionPoolName,
        SessionInner sessionEnvelope, Integer count, Context context) {
        return new PagedIterable<>(
            generateSessionsAsync(resourceGroupName, sessionPoolName, sessionEnvelope, count, context));
    }

    /**
     * Get the properties of a Session.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param name Name of the Session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a Session along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SessionInner>> getWithResponseAsync(String resourceGroupName, String sessionPoolName,
        String name) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sessionPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sessionPoolName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, sessionPoolName, name, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the properties of a Session.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param name Name of the Session.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a Session along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SessionInner>> getWithResponseAsync(String resourceGroupName, String sessionPoolName,
        String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sessionPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sessionPoolName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sessionPoolName, name, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get the properties of a Session.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param name Name of the Session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a Session on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SessionInner> getAsync(String resourceGroupName, String sessionPoolName, String name) {
        return getWithResponseAsync(resourceGroupName, sessionPoolName, name)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the properties of a Session.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param name Name of the Session.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a Session along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SessionInner> getWithResponse(String resourceGroupName, String sessionPoolName, String name,
        Context context) {
        return getWithResponseAsync(resourceGroupName, sessionPoolName, name, context).block();
    }

    /**
     * Get the properties of a Session.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param name Name of the Session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a Session.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SessionInner get(String resourceGroupName, String sessionPoolName, String name) {
        return getWithResponse(resourceGroupName, sessionPoolName, name, Context.NONE).getValue();
    }

    /**
     * Get the Session Pools in a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Session Pools in a Session Pool along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionInner>> listBySessionPoolSinglePageAsync(String resourceGroupName,
        String sessionPoolName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sessionPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sessionPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySessionPool(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, sessionPoolName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<SessionInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the Session Pools in a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Session Pools in a Session Pool along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionInner>> listBySessionPoolSinglePageAsync(String resourceGroupName,
        String sessionPoolName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sessionPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sessionPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySessionPool(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                sessionPoolName, this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the Session Pools in a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Session Pools in a Session Pool as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SessionInner> listBySessionPoolAsync(String resourceGroupName, String sessionPoolName) {
        return new PagedFlux<>(() -> listBySessionPoolSinglePageAsync(resourceGroupName, sessionPoolName),
            nextLink -> listBySessionPoolNextSinglePageAsync(nextLink));
    }

    /**
     * Get the Session Pools in a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Session Pools in a Session Pool as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SessionInner> listBySessionPoolAsync(String resourceGroupName, String sessionPoolName,
        Context context) {
        return new PagedFlux<>(() -> listBySessionPoolSinglePageAsync(resourceGroupName, sessionPoolName, context),
            nextLink -> listBySessionPoolNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get the Session Pools in a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Session Pools in a Session Pool as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SessionInner> listBySessionPool(String resourceGroupName, String sessionPoolName) {
        return new PagedIterable<>(listBySessionPoolAsync(resourceGroupName, sessionPoolName));
    }

    /**
     * Get the Session Pools in a Session Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Session Pools in a Session Pool as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SessionInner> listBySessionPool(String resourceGroupName, String sessionPoolName,
        Context context) {
        return new PagedIterable<>(listBySessionPoolAsync(resourceGroupName, sessionPoolName, context));
    }

    /**
     * Update environment variables of a Session.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param name Name of the Session.
     * @param environmentVariables Environment variables to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updateEnvironmentVariablesWithResponseAsync(String resourceGroupName,
        String sessionPoolName, String name, Map<String, List<EnvironmentVar>> environmentVariables) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sessionPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sessionPoolName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (environmentVariables == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter environmentVariables is required and cannot be null."));
        } else {
            environmentVariables.values().forEach(e -> {
                if (e != null) {
                    e.forEach(e1 -> e1.validate());
                }
            });
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.updateEnvironmentVariables(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, sessionPoolName, name, this.client.getApiVersion(),
                environmentVariables, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update environment variables of a Session.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param name Name of the Session.
     * @param environmentVariables Environment variables to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updateEnvironmentVariablesWithResponseAsync(String resourceGroupName,
        String sessionPoolName, String name, Map<String, List<EnvironmentVar>> environmentVariables, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sessionPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sessionPoolName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (environmentVariables == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter environmentVariables is required and cannot be null."));
        } else {
            environmentVariables.values().forEach(e -> {
                if (e != null) {
                    e.forEach(e1 -> e1.validate());
                }
            });
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.updateEnvironmentVariables(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, sessionPoolName, name, this.client.getApiVersion(), environmentVariables, accept,
            context);
    }

    /**
     * Update environment variables of a Session.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param name Name of the Session.
     * @param environmentVariables Environment variables to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> updateEnvironmentVariablesAsync(String resourceGroupName, String sessionPoolName, String name,
        Map<String, List<EnvironmentVar>> environmentVariables) {
        return updateEnvironmentVariablesWithResponseAsync(resourceGroupName, sessionPoolName, name,
            environmentVariables).flatMap(ignored -> Mono.empty());
    }

    /**
     * Update environment variables of a Session.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param name Name of the Session.
     * @param environmentVariables Environment variables to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateEnvironmentVariablesWithResponse(String resourceGroupName, String sessionPoolName,
        String name, Map<String, List<EnvironmentVar>> environmentVariables, Context context) {
        return updateEnvironmentVariablesWithResponseAsync(resourceGroupName, sessionPoolName, name,
            environmentVariables, context).block();
    }

    /**
     * Update environment variables of a Session.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param name Name of the Session.
     * @param environmentVariables Environment variables to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateEnvironmentVariables(String resourceGroupName, String sessionPoolName, String name,
        Map<String, List<EnvironmentVar>> environmentVariables) {
        updateEnvironmentVariablesWithResponse(resourceGroupName, sessionPoolName, name, environmentVariables,
            Context.NONE);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session collection ARM resource along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionInner>> generateSessionsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.generateSessionsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SessionInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session collection ARM resource along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionInner>> generateSessionsNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.generateSessionsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session collection ARM resource along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionInner>> listBySessionPoolNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySessionPoolNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SessionInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session collection ARM resource along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionInner>> listBySessionPoolNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySessionPoolNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
