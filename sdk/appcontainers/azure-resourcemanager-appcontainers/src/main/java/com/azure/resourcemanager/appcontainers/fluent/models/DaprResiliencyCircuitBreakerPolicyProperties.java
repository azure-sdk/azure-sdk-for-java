// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** DaprResiliencyCircuitBreakerPolicy resource specific properties. */
@Fluent
public final class DaprResiliencyCircuitBreakerPolicyProperties {
    /*
     * Maximum number of requests allowed to pass through
     */
    @JsonProperty(value = "maxRequests")
    private Integer maxRequests;

    /*
     * Cyclical period of time used by the CB to clear its internal counts. Valid values are of the form 15s, 2m,
     * 1h30m, etc.
     */
    @JsonProperty(value = "interval")
    private String interval;

    /*
     * The period of the open state until the CB switches to half-open. Valid values are of the form 15s, 2m, 1h30m,
     * etc.
     */
    @JsonProperty(value = "timeout")
    private String timeout;

    /*
     * A Common Expression Language (CEL) statement that is evaluated by the CB When the statement evaluates to true,
     * the CB trips and becomes open
     */
    @JsonProperty(value = "trip")
    private String trip;

    /*
     * Specify whether circuit breaking state should be scoped to an individual actor ID, all actors across the actor
     * type, or both. Possible values include id, type, or both
     */
    @JsonProperty(value = "circuitBreakerScope")
    private String circuitBreakerScope;

    /*
     * Specify a cache size for the number of CBs to keep in memory. The value should be larger than the expected
     * number of active actor instances.
     */
    @JsonProperty(value = "circuitBreakerCacheSize")
    private Integer circuitBreakerCacheSize;

    /** Creates an instance of DaprResiliencyCircuitBreakerPolicyProperties class. */
    public DaprResiliencyCircuitBreakerPolicyProperties() {
    }

    /**
     * Get the maxRequests property: Maximum number of requests allowed to pass through.
     *
     * @return the maxRequests value.
     */
    public Integer maxRequests() {
        return this.maxRequests;
    }

    /**
     * Set the maxRequests property: Maximum number of requests allowed to pass through.
     *
     * @param maxRequests the maxRequests value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyProperties object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyProperties withMaxRequests(Integer maxRequests) {
        this.maxRequests = maxRequests;
        return this;
    }

    /**
     * Get the interval property: Cyclical period of time used by the CB to clear its internal counts. Valid values are
     * of the form 15s, 2m, 1h30m, etc.
     *
     * @return the interval value.
     */
    public String interval() {
        return this.interval;
    }

    /**
     * Set the interval property: Cyclical period of time used by the CB to clear its internal counts. Valid values are
     * of the form 15s, 2m, 1h30m, etc.
     *
     * @param interval the interval value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyProperties object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyProperties withInterval(String interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the timeout property: The period of the open state until the CB switches to half-open. Valid values are of
     * the form 15s, 2m, 1h30m, etc.
     *
     * @return the timeout value.
     */
    public String timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: The period of the open state until the CB switches to half-open. Valid values are of
     * the form 15s, 2m, 1h30m, etc.
     *
     * @param timeout the timeout value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyProperties object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyProperties withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the trip property: A Common Expression Language (CEL) statement that is evaluated by the CB When the
     * statement evaluates to true, the CB trips and becomes open.
     *
     * @return the trip value.
     */
    public String trip() {
        return this.trip;
    }

    /**
     * Set the trip property: A Common Expression Language (CEL) statement that is evaluated by the CB When the
     * statement evaluates to true, the CB trips and becomes open.
     *
     * @param trip the trip value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyProperties object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyProperties withTrip(String trip) {
        this.trip = trip;
        return this;
    }

    /**
     * Get the circuitBreakerScope property: Specify whether circuit breaking state should be scoped to an individual
     * actor ID, all actors across the actor type, or both. Possible values include id, type, or both.
     *
     * @return the circuitBreakerScope value.
     */
    public String circuitBreakerScope() {
        return this.circuitBreakerScope;
    }

    /**
     * Set the circuitBreakerScope property: Specify whether circuit breaking state should be scoped to an individual
     * actor ID, all actors across the actor type, or both. Possible values include id, type, or both.
     *
     * @param circuitBreakerScope the circuitBreakerScope value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyProperties object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyProperties withCircuitBreakerScope(String circuitBreakerScope) {
        this.circuitBreakerScope = circuitBreakerScope;
        return this;
    }

    /**
     * Get the circuitBreakerCacheSize property: Specify a cache size for the number of CBs to keep in memory. The value
     * should be larger than the expected number of active actor instances.
     *
     * @return the circuitBreakerCacheSize value.
     */
    public Integer circuitBreakerCacheSize() {
        return this.circuitBreakerCacheSize;
    }

    /**
     * Set the circuitBreakerCacheSize property: Specify a cache size for the number of CBs to keep in memory. The value
     * should be larger than the expected number of active actor instances.
     *
     * @param circuitBreakerCacheSize the circuitBreakerCacheSize value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyProperties object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyProperties withCircuitBreakerCacheSize(Integer circuitBreakerCacheSize) {
        this.circuitBreakerCacheSize = circuitBreakerCacheSize;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
