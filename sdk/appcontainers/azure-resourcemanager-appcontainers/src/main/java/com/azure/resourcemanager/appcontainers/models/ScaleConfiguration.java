// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Scale configuration.
 */
@Fluent
public final class ScaleConfiguration {
    /*
     * The maximum count of sessions at the same time.
     */
    @JsonProperty(value = "maxConcurrentSessions")
    private Integer maxConcurrentSessions;

    /*
     * The minimum count of ready session instances.
     */
    @JsonProperty(value = "readySessionInstances")
    private Integer readySessionInstances;

    /**
     * Creates an instance of ScaleConfiguration class.
     */
    public ScaleConfiguration() {
    }

    /**
     * Get the maxConcurrentSessions property: The maximum count of sessions at the same time.
     * 
     * @return the maxConcurrentSessions value.
     */
    public Integer maxConcurrentSessions() {
        return this.maxConcurrentSessions;
    }

    /**
     * Set the maxConcurrentSessions property: The maximum count of sessions at the same time.
     * 
     * @param maxConcurrentSessions the maxConcurrentSessions value to set.
     * @return the ScaleConfiguration object itself.
     */
    public ScaleConfiguration withMaxConcurrentSessions(Integer maxConcurrentSessions) {
        this.maxConcurrentSessions = maxConcurrentSessions;
        return this;
    }

    /**
     * Get the readySessionInstances property: The minimum count of ready session instances.
     * 
     * @return the readySessionInstances value.
     */
    public Integer readySessionInstances() {
        return this.readySessionInstances;
    }

    /**
     * Set the readySessionInstances property: The minimum count of ready session instances.
     * 
     * @param readySessionInstances the readySessionInstances value to set.
     * @return the ScaleConfiguration object itself.
     */
    public ScaleConfiguration withReadySessionInstances(Integer readySessionInstances) {
        this.readySessionInstances = readySessionInstances;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
