// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcontainers.fluent.AppSpaceResourcesClient;
import com.azure.resourcemanager.appcontainers.fluent.models.AppSpaceResourceInner;
import com.azure.resourcemanager.appcontainers.models.AppSpaceResource;
import com.azure.resourcemanager.appcontainers.models.AppSpaceResources;

public final class AppSpaceResourcesImpl implements AppSpaceResources {
    private static final ClientLogger LOGGER = new ClientLogger(AppSpaceResourcesImpl.class);

    private final AppSpaceResourcesClient innerClient;

    private final com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager;

    public AppSpaceResourcesImpl(AppSpaceResourcesClient innerClient,
        com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AppSpaceResource> listByAppSpace(String resourceGroupName, String appSpaceName) {
        PagedIterable<AppSpaceResourceInner> inner
            = this.serviceClient().listByAppSpace(resourceGroupName, appSpaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AppSpaceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AppSpaceResource> listByAppSpace(String resourceGroupName, String appSpaceName,
        Context context) {
        PagedIterable<AppSpaceResourceInner> inner
            = this.serviceClient().listByAppSpace(resourceGroupName, appSpaceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AppSpaceResourceImpl(inner1, this.manager()));
    }

    public Response<AppSpaceResource> getWithResponse(String resourceGroupName, String appSpaceName,
        String spaceResourceName, Context context) {
        Response<AppSpaceResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, appSpaceName, spaceResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AppSpaceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AppSpaceResource get(String resourceGroupName, String appSpaceName, String spaceResourceName) {
        AppSpaceResourceInner inner = this.serviceClient().get(resourceGroupName, appSpaceName, spaceResourceName);
        if (inner != null) {
            return new AppSpaceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String appSpaceName, String spaceResourceName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, appSpaceName, spaceResourceName, context);
    }

    public void delete(String resourceGroupName, String appSpaceName, String spaceResourceName) {
        this.serviceClient().delete(resourceGroupName, appSpaceName, spaceResourceName);
    }

    public AppSpaceResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String appSpaceName = ResourceManagerUtils.getValueFromIdByName(id, "spaces");
        if (appSpaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String spaceResourceName = ResourceManagerUtils.getValueFromIdByName(id, "spaceResources");
        if (spaceResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'spaceResources'.", id)));
        }
        return this.getWithResponse(resourceGroupName, appSpaceName, spaceResourceName, Context.NONE).getValue();
    }

    public Response<AppSpaceResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String appSpaceName = ResourceManagerUtils.getValueFromIdByName(id, "spaces");
        if (appSpaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String spaceResourceName = ResourceManagerUtils.getValueFromIdByName(id, "spaceResources");
        if (spaceResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'spaceResources'.", id)));
        }
        return this.getWithResponse(resourceGroupName, appSpaceName, spaceResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String appSpaceName = ResourceManagerUtils.getValueFromIdByName(id, "spaces");
        if (appSpaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String spaceResourceName = ResourceManagerUtils.getValueFromIdByName(id, "spaceResources");
        if (spaceResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'spaceResources'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, appSpaceName, spaceResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String appSpaceName = ResourceManagerUtils.getValueFromIdByName(id, "spaces");
        if (appSpaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'spaces'.", id)));
        }
        String spaceResourceName = ResourceManagerUtils.getValueFromIdByName(id, "spaceResources");
        if (spaceResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'spaceResources'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, appSpaceName, spaceResourceName, context);
    }

    private AppSpaceResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager() {
        return this.serviceManager;
    }

    public AppSpaceResourceImpl define(String name) {
        return new AppSpaceResourceImpl(name, this.manager());
    }
}
