// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * Spring Cloud Gateway properties.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "componentType")
@JsonTypeName("SpringCloudGateway")
@Fluent
public final class SpringCloudGatewayComponent extends JavaComponentProperties {
    /*
     * The route definitions of Spring Cloud Gateway.
     */
    @JsonProperty(value = "routes")
    private List<SpringCloudGatewayRoute> routes;

    /**
     * Creates an instance of SpringCloudGatewayComponent class.
     */
    public SpringCloudGatewayComponent() {
    }

    /**
     * Get the routes property: The route definitions of Spring Cloud Gateway.
     * 
     * @return the routes value.
     */
    public List<SpringCloudGatewayRoute> routes() {
        return this.routes;
    }

    /**
     * Set the routes property: The route definitions of Spring Cloud Gateway.
     * 
     * @param routes the routes value to set.
     * @return the SpringCloudGatewayComponent object itself.
     */
    public SpringCloudGatewayComponent withRoutes(List<SpringCloudGatewayRoute> routes) {
        this.routes = routes;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpringCloudGatewayComponent withConfigurations(List<JavaComponentConfigurationProperty> configurations) {
        super.withConfigurations(configurations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpringCloudGatewayComponent withServiceBinds(List<JavaComponentServiceBind> serviceBinds) {
        super.withServiceBinds(serviceBinds);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (routes() != null) {
            routes().forEach(e -> e.validate());
        }
    }
}
