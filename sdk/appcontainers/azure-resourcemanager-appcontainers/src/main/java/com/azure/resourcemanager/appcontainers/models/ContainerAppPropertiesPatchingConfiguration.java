// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Container App auto patch configuration.
 */
@Fluent
public final class ContainerAppPropertiesPatchingConfiguration {
    /*
     * Patching mode for the container app. Null or default in this field will be interpreted as Automatic by RP. Automatic mode will automatically apply available patches. Manual mode will require the user to manually apply patches. Disabled mode will stop patch detection and auto patching.
     */
    @JsonProperty(value = "patchingMode")
    private PatchingMode patchingMode;

    /**
     * Creates an instance of ContainerAppPropertiesPatchingConfiguration class.
     */
    public ContainerAppPropertiesPatchingConfiguration() {
    }

    /**
     * Get the patchingMode property: Patching mode for the container app. Null or default in this field will be
     * interpreted as Automatic by RP. Automatic mode will automatically apply available patches. Manual mode will
     * require the user to manually apply patches. Disabled mode will stop patch detection and auto patching.
     * 
     * @return the patchingMode value.
     */
    public PatchingMode patchingMode() {
        return this.patchingMode;
    }

    /**
     * Set the patchingMode property: Patching mode for the container app. Null or default in this field will be
     * interpreted as Automatic by RP. Automatic mode will automatically apply available patches. Manual mode will
     * require the user to manually apply patches. Disabled mode will stop patch detection and auto patching.
     * 
     * @param patchingMode the patchingMode value to set.
     * @return the ContainerAppPropertiesPatchingConfiguration object itself.
     */
    public ContainerAppPropertiesPatchingConfiguration withPatchingMode(PatchingMode patchingMode) {
        this.patchingMode = patchingMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
