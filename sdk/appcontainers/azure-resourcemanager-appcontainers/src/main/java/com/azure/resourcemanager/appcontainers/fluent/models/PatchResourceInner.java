// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.appcontainers.models.PatchApplyStatus;
import com.azure.resourcemanager.appcontainers.models.PatchDetails;
import com.azure.resourcemanager.appcontainers.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The resource representation of a patch. */
@Immutable
public final class PatchResourceInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties", access = JsonProperty.Access.WRITE_ONLY)
    private PatchProperties innerProperties;

    /** Creates an instance of PatchResourceInner class. */
    public PatchResourceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     *
     * @return the innerProperties value.
     */
    private PatchProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the targetEnvironmentId property: The id of the target environment for the patch.
     *
     * @return the targetEnvironmentId value.
     */
    public String targetEnvironmentId() {
        return this.innerProperties() == null ? null : this.innerProperties().targetEnvironmentId();
    }

    /**
     * Set the targetEnvironmentId property: The id of the target environment for the patch.
     *
     * @param targetEnvironmentId the targetEnvironmentId value to set.
     * @return the PatchResourceInner object itself.
     */
    public PatchResourceInner withTargetEnvironmentId(String targetEnvironmentId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PatchProperties();
        }
        this.innerProperties().withTargetEnvironmentId(targetEnvironmentId);
        return this;
    }

    /**
     * Get the targetContainerAppId property: The id of the target container app for the patch.
     *
     * @return the targetContainerAppId value.
     */
    public String targetContainerAppId() {
        return this.innerProperties() == null ? null : this.innerProperties().targetContainerAppId();
    }

    /**
     * Set the targetContainerAppId property: The id of the target container app for the patch.
     *
     * @param targetContainerAppId the targetContainerAppId value to set.
     * @return the PatchResourceInner object itself.
     */
    public PatchResourceInner withTargetContainerAppId(String targetContainerAppId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PatchProperties();
        }
        this.innerProperties().withTargetContainerAppId(targetContainerAppId);
        return this;
    }

    /**
     * Get the targetRevisionId property: The id of the target revision for the patch.
     *
     * @return the targetRevisionId value.
     */
    public String targetRevisionId() {
        return this.innerProperties() == null ? null : this.innerProperties().targetRevisionId();
    }

    /**
     * Set the targetRevisionId property: The id of the target revision for the patch.
     *
     * @param targetRevisionId the targetRevisionId value to set.
     * @return the PatchResourceInner object itself.
     */
    public PatchResourceInner withTargetRevisionId(String targetRevisionId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PatchProperties();
        }
        this.innerProperties().withTargetRevisionId(targetRevisionId);
        return this;
    }

    /**
     * Get the provisioningState property: Patch provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the patchApplyStatus property: The status of the patch once it has been provisioned.
     *
     * @return the patchApplyStatus value.
     */
    public PatchApplyStatus patchApplyStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().patchApplyStatus();
    }

    /**
     * Get the patchDetails property: Detailed info about the specific patch.
     *
     * @return the patchDetails value.
     */
    public List<PatchDetails> patchDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().patchDetails();
    }

    /**
     * Set the patchDetails property: Detailed info about the specific patch.
     *
     * @param patchDetails the patchDetails value to set.
     * @return the PatchResourceInner object itself.
     */
    public PatchResourceInner withPatchDetails(List<PatchDetails> patchDetails) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PatchProperties();
        }
        this.innerProperties().withPatchDetails(patchDetails);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
