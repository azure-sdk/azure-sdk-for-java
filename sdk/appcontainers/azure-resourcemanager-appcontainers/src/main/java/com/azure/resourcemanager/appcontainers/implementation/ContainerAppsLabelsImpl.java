// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcontainers.fluent.ContainerAppsLabelsClient;
import com.azure.resourcemanager.appcontainers.fluent.models.LabelsInner;
import com.azure.resourcemanager.appcontainers.models.ContainerAppsLabels;
import com.azure.resourcemanager.appcontainers.models.Labels;

public final class ContainerAppsLabelsImpl implements ContainerAppsLabels {
    private static final ClientLogger LOGGER = new ClientLogger(ContainerAppsLabelsImpl.class);

    private final ContainerAppsLabelsClient innerClient;

    private final com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager;

    public ContainerAppsLabelsImpl(ContainerAppsLabelsClient innerClient,
        com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Labels> list(String resourceGroupName, String containerAppName) {
        PagedIterable<LabelsInner> inner = this.serviceClient().list(resourceGroupName, containerAppName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LabelsImpl(inner1, this.manager()));
    }

    public PagedIterable<Labels> list(String resourceGroupName, String containerAppName, Context context) {
        PagedIterable<LabelsInner> inner = this.serviceClient().list(resourceGroupName, containerAppName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LabelsImpl(inner1, this.manager()));
    }

    public Response<Labels> getWithResponse(String resourceGroupName, String containerAppName, String labelsName,
        Context context) {
        Response<LabelsInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, containerAppName, labelsName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LabelsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Labels get(String resourceGroupName, String containerAppName, String labelsName) {
        LabelsInner inner = this.serviceClient().get(resourceGroupName, containerAppName, labelsName);
        if (inner != null) {
            return new LabelsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String containerAppName, String labelsName) {
        this.serviceClient().delete(resourceGroupName, containerAppName, labelsName);
    }

    public void delete(String resourceGroupName, String containerAppName, String labelsName, Context context) {
        this.serviceClient().delete(resourceGroupName, containerAppName, labelsName, context);
    }

    public Labels getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerAppName = ResourceManagerUtils.getValueFromIdByName(id, "containerApps");
        if (containerAppName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'containerApps'.", id)));
        }
        String labelsName = ResourceManagerUtils.getValueFromIdByName(id, "labels");
        if (labelsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'labels'.", id)));
        }
        return this.getWithResponse(resourceGroupName, containerAppName, labelsName, Context.NONE).getValue();
    }

    public Response<Labels> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerAppName = ResourceManagerUtils.getValueFromIdByName(id, "containerApps");
        if (containerAppName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'containerApps'.", id)));
        }
        String labelsName = ResourceManagerUtils.getValueFromIdByName(id, "labels");
        if (labelsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'labels'.", id)));
        }
        return this.getWithResponse(resourceGroupName, containerAppName, labelsName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerAppName = ResourceManagerUtils.getValueFromIdByName(id, "containerApps");
        if (containerAppName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'containerApps'.", id)));
        }
        String labelsName = ResourceManagerUtils.getValueFromIdByName(id, "labels");
        if (labelsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'labels'.", id)));
        }
        this.delete(resourceGroupName, containerAppName, labelsName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerAppName = ResourceManagerUtils.getValueFromIdByName(id, "containerApps");
        if (containerAppName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'containerApps'.", id)));
        }
        String labelsName = ResourceManagerUtils.getValueFromIdByName(id, "labels");
        if (labelsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'labels'.", id)));
        }
        this.delete(resourceGroupName, containerAppName, labelsName, context);
    }

    private ContainerAppsLabelsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager() {
        return this.serviceManager;
    }

    public LabelsImpl define(String name) {
        return new LabelsImpl(name, this.manager());
    }
}
