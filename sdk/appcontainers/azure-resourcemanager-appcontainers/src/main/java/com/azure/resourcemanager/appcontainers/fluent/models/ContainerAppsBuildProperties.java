// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.appcontainers.models.BuildProvisioningState;
import com.azure.resourcemanager.appcontainers.models.BuildStatus;
import com.azure.resourcemanager.appcontainers.models.ContainerAppsBuildConfiguration;
import com.azure.resourcemanager.appcontainers.models.ContainerRegistryWithCustomImage;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The ContainerAppBuild properties.
 */
@Immutable
public final class ContainerAppsBuildProperties {
    /*
     * Build provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private BuildProvisioningState provisioningState;

    /*
     * Status of the build once it has been provisioned.
     */
    @JsonProperty(value = "buildStatus", access = JsonProperty.Access.WRITE_ONLY)
    private BuildStatus buildStatus;

    /*
     * Container registry that the final image will be uploaded to.
     */
    @JsonProperty(value = "destinationContainerRegistry", access = JsonProperty.Access.WRITE_ONLY)
    private ContainerRegistryWithCustomImage destinationContainerRegistry;

    /*
     * Configuration of the build.
     */
    @JsonProperty(value = "configuration", access = JsonProperty.Access.WRITE_ONLY)
    private ContainerAppsBuildConfiguration configuration;

    /*
     * Endpoint from which the build logs can be streamed.
     */
    @JsonProperty(value = "logStreamEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String logStreamEndpoint;

    /**
     * Creates an instance of ContainerAppsBuildProperties class.
     */
    public ContainerAppsBuildProperties() {
    }

    /**
     * Get the provisioningState property: Build provisioning state.
     * 
     * @return the provisioningState value.
     */
    public BuildProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the buildStatus property: Status of the build once it has been provisioned.
     * 
     * @return the buildStatus value.
     */
    public BuildStatus buildStatus() {
        return this.buildStatus;
    }

    /**
     * Get the destinationContainerRegistry property: Container registry that the final image will be uploaded to.
     * 
     * @return the destinationContainerRegistry value.
     */
    public ContainerRegistryWithCustomImage destinationContainerRegistry() {
        return this.destinationContainerRegistry;
    }

    /**
     * Get the configuration property: Configuration of the build.
     * 
     * @return the configuration value.
     */
    public ContainerAppsBuildConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Get the logStreamEndpoint property: Endpoint from which the build logs can be streamed.
     * 
     * @return the logStreamEndpoint value.
     */
    public String logStreamEndpoint() {
        return this.logStreamEndpoint;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (destinationContainerRegistry() != null) {
            destinationContainerRegistry().validate();
        }
        if (configuration() != null) {
            configuration().validate();
        }
    }
}
