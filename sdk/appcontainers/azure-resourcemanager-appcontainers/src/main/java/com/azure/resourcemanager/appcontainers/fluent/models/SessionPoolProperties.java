// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.appcontainers.models.ContainerType;
import com.azure.resourcemanager.appcontainers.models.CustomContainerConfiguration;
import com.azure.resourcemanager.appcontainers.models.DynamicPoolConfiguration;
import com.azure.resourcemanager.appcontainers.models.PoolManagementType;
import com.azure.resourcemanager.appcontainers.models.SecretAutoGenerated;
import com.azure.resourcemanager.appcontainers.models.SessionPoolProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Container App Session Pool resource specific properties.
 */
@Fluent
public final class SessionPoolProperties {
    /*
     * Resource ID of the Session Pool's environment.
     */
    @JsonProperty(value = "environmentId")
    private String environmentId;

    /*
     * The max count of Sessions at the same time.
     */
    @JsonProperty(value = "maxConcurrentSessions")
    private Integer maxConcurrentSessions;

    /*
     * The container type of the Sessions.
     */
    @JsonProperty(value = "containerType")
    private ContainerType containerType;

    /*
     * The pool management type of the Session Pool.
     */
    @JsonProperty(value = "poolManagementType")
    private PoolManagementType poolManagementType;

    /*
     * The secrets of the Session Pool.
     */
    @JsonProperty(value = "secrets")
    private List<SecretAutoGenerated> secrets;

    /*
     * The pool configuration if the poolManagementType is dynamic.
     */
    @JsonProperty(value = "dynamicPoolConfiguration")
    private DynamicPoolConfiguration dynamicPoolConfiguration;

    /*
     * The custom container configuration if the containerType is CustomContainer.
     */
    @JsonProperty(value = "customContainerConfiguration")
    private CustomContainerConfiguration customContainerConfiguration;

    /*
     * The endpoint to manage the pool.
     */
    @JsonProperty(value = "poolManagementEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String poolManagementEndpoint;

    /*
     * Provisioning state of the Session Pool.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private SessionPoolProvisioningState provisioningState;

    /**
     * Creates an instance of SessionPoolProperties class.
     */
    public SessionPoolProperties() {
    }

    /**
     * Get the environmentId property: Resource ID of the Session Pool's environment.
     * 
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: Resource ID of the Session Pool's environment.
     * 
     * @param environmentId the environmentId value to set.
     * @return the SessionPoolProperties object itself.
     */
    public SessionPoolProperties withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the maxConcurrentSessions property: The max count of Sessions at the same time.
     * 
     * @return the maxConcurrentSessions value.
     */
    public Integer maxConcurrentSessions() {
        return this.maxConcurrentSessions;
    }

    /**
     * Set the maxConcurrentSessions property: The max count of Sessions at the same time.
     * 
     * @param maxConcurrentSessions the maxConcurrentSessions value to set.
     * @return the SessionPoolProperties object itself.
     */
    public SessionPoolProperties withMaxConcurrentSessions(Integer maxConcurrentSessions) {
        this.maxConcurrentSessions = maxConcurrentSessions;
        return this;
    }

    /**
     * Get the containerType property: The container type of the Sessions.
     * 
     * @return the containerType value.
     */
    public ContainerType containerType() {
        return this.containerType;
    }

    /**
     * Set the containerType property: The container type of the Sessions.
     * 
     * @param containerType the containerType value to set.
     * @return the SessionPoolProperties object itself.
     */
    public SessionPoolProperties withContainerType(ContainerType containerType) {
        this.containerType = containerType;
        return this;
    }

    /**
     * Get the poolManagementType property: The pool management type of the Session Pool.
     * 
     * @return the poolManagementType value.
     */
    public PoolManagementType poolManagementType() {
        return this.poolManagementType;
    }

    /**
     * Set the poolManagementType property: The pool management type of the Session Pool.
     * 
     * @param poolManagementType the poolManagementType value to set.
     * @return the SessionPoolProperties object itself.
     */
    public SessionPoolProperties withPoolManagementType(PoolManagementType poolManagementType) {
        this.poolManagementType = poolManagementType;
        return this;
    }

    /**
     * Get the secrets property: The secrets of the Session Pool.
     * 
     * @return the secrets value.
     */
    public List<SecretAutoGenerated> secrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: The secrets of the Session Pool.
     * 
     * @param secrets the secrets value to set.
     * @return the SessionPoolProperties object itself.
     */
    public SessionPoolProperties withSecrets(List<SecretAutoGenerated> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Get the dynamicPoolConfiguration property: The pool configuration if the poolManagementType is dynamic.
     * 
     * @return the dynamicPoolConfiguration value.
     */
    public DynamicPoolConfiguration dynamicPoolConfiguration() {
        return this.dynamicPoolConfiguration;
    }

    /**
     * Set the dynamicPoolConfiguration property: The pool configuration if the poolManagementType is dynamic.
     * 
     * @param dynamicPoolConfiguration the dynamicPoolConfiguration value to set.
     * @return the SessionPoolProperties object itself.
     */
    public SessionPoolProperties withDynamicPoolConfiguration(DynamicPoolConfiguration dynamicPoolConfiguration) {
        this.dynamicPoolConfiguration = dynamicPoolConfiguration;
        return this;
    }

    /**
     * Get the customContainerConfiguration property: The custom container configuration if the containerType is
     * CustomContainer.
     * 
     * @return the customContainerConfiguration value.
     */
    public CustomContainerConfiguration customContainerConfiguration() {
        return this.customContainerConfiguration;
    }

    /**
     * Set the customContainerConfiguration property: The custom container configuration if the containerType is
     * CustomContainer.
     * 
     * @param customContainerConfiguration the customContainerConfiguration value to set.
     * @return the SessionPoolProperties object itself.
     */
    public SessionPoolProperties
        withCustomContainerConfiguration(CustomContainerConfiguration customContainerConfiguration) {
        this.customContainerConfiguration = customContainerConfiguration;
        return this;
    }

    /**
     * Get the poolManagementEndpoint property: The endpoint to manage the pool.
     * 
     * @return the poolManagementEndpoint value.
     */
    public String poolManagementEndpoint() {
        return this.poolManagementEndpoint;
    }

    /**
     * Get the provisioningState property: Provisioning state of the Session Pool.
     * 
     * @return the provisioningState value.
     */
    public SessionPoolProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
        if (dynamicPoolConfiguration() != null) {
            dynamicPoolConfiguration().validate();
        }
        if (customContainerConfiguration() != null) {
            customContainerConfiguration().validate();
        }
    }
}
