// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.appcontainers.fluent.models.SessionPoolPatchPropertiesProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Container App SessionPool patchable properties.
 */
@Fluent
public final class SessionPoolPatchProperties {
    /*
     * SessionPool resource specific patchable properties.
     */
    @JsonProperty(value = "properties")
    private SessionPoolPatchPropertiesProperties innerProperties;

    /**
     * Creates an instance of SessionPoolPatchProperties class.
     */
    public SessionPoolPatchProperties() {
    }

    /**
     * Get the innerProperties property: SessionPool resource specific patchable properties.
     * 
     * @return the innerProperties value.
     */
    private SessionPoolPatchPropertiesProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the maxConcurrentSessions property: The max count of Sessions at the same time.
     * 
     * @return the maxConcurrentSessions value.
     */
    public Integer maxConcurrentSessions() {
        return this.innerProperties() == null ? null : this.innerProperties().maxConcurrentSessions();
    }

    /**
     * Set the maxConcurrentSessions property: The max count of Sessions at the same time.
     * 
     * @param maxConcurrentSessions the maxConcurrentSessions value to set.
     * @return the SessionPoolPatchProperties object itself.
     */
    public SessionPoolPatchProperties withMaxConcurrentSessions(Integer maxConcurrentSessions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionPoolPatchPropertiesProperties();
        }
        this.innerProperties().withMaxConcurrentSessions(maxConcurrentSessions);
        return this;
    }

    /**
     * Get the secrets property: The secrets of the Session Pool.
     * 
     * @return the secrets value.
     */
    public List<SecretAutoGenerated> secrets() {
        return this.innerProperties() == null ? null : this.innerProperties().secrets();
    }

    /**
     * Set the secrets property: The secrets of the Session Pool.
     * 
     * @param secrets the secrets value to set.
     * @return the SessionPoolPatchProperties object itself.
     */
    public SessionPoolPatchProperties withSecrets(List<SecretAutoGenerated> secrets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionPoolPatchPropertiesProperties();
        }
        this.innerProperties().withSecrets(secrets);
        return this;
    }

    /**
     * Get the dynamicPoolConfiguration property: The pool configuration if the poolManagementType is dynamic.
     * 
     * @return the dynamicPoolConfiguration value.
     */
    public DynamicPoolConfiguration dynamicPoolConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().dynamicPoolConfiguration();
    }

    /**
     * Set the dynamicPoolConfiguration property: The pool configuration if the poolManagementType is dynamic.
     * 
     * @param dynamicPoolConfiguration the dynamicPoolConfiguration value to set.
     * @return the SessionPoolPatchProperties object itself.
     */
    public SessionPoolPatchProperties withDynamicPoolConfiguration(DynamicPoolConfiguration dynamicPoolConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionPoolPatchPropertiesProperties();
        }
        this.innerProperties().withDynamicPoolConfiguration(dynamicPoolConfiguration);
        return this;
    }

    /**
     * Get the customContainerConfiguration property: The custom container configuration if the containerType is
     * CustomContainer.
     * 
     * @return the customContainerConfiguration value.
     */
    public CustomContainerConfiguration customContainerConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().customContainerConfiguration();
    }

    /**
     * Set the customContainerConfiguration property: The custom container configuration if the containerType is
     * CustomContainer.
     * 
     * @param customContainerConfiguration the customContainerConfiguration value to set.
     * @return the SessionPoolPatchProperties object itself.
     */
    public SessionPoolPatchProperties
        withCustomContainerConfiguration(CustomContainerConfiguration customContainerConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionPoolPatchPropertiesProperties();
        }
        this.innerProperties().withCustomContainerConfiguration(customContainerConfiguration);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
