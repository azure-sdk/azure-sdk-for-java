// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.appcontainers.models.Label;
import com.azure.resourcemanager.appcontainers.models.LabelsProvisioningState;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Labels specific properties.
 */
@Fluent
public final class LabelsProperties {
    /*
     * Current provisioning State of the operation
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private LabelsProvisioningState provisioningState;

    /*
     * Labels for the Container App.
     */
    @JsonProperty(value = "labels")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, Label> labels;

    /**
     * Creates an instance of LabelsProperties class.
     */
    public LabelsProperties() {
    }

    /**
     * Get the provisioningState property: Current provisioning State of the operation.
     * 
     * @return the provisioningState value.
     */
    public LabelsProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the labels property: Labels for the Container App.
     * 
     * @return the labels value.
     */
    public Map<String, Label> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: Labels for the Container App.
     * 
     * @param labels the labels value to set.
     * @return the LabelsProperties object itself.
     */
    public LabelsProperties withLabels(Map<String, Label> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (labels() != null) {
            labels().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }
}
