// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.appcontainers.models.Secret;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Container App SessionPool. */
@Fluent
public final class SessionPoolInner extends Resource {
    /*
     * SessionPool resource specific properties
     */
    @JsonProperty(value = "properties")
    private SessionPoolProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of SessionPoolInner class. */
    public SessionPoolInner() {
    }

    /**
     * Get the innerProperties property: SessionPool resource specific properties.
     *
     * @return the innerProperties value.
     */
    private SessionPoolProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public SessionPoolInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SessionPoolInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the managedEnvironmentId property: Resource ID of the Session Pool's environment.
     *
     * @return the managedEnvironmentId value.
     */
    public String managedEnvironmentId() {
        return this.innerProperties() == null ? null : this.innerProperties().managedEnvironmentId();
    }

    /**
     * Set the managedEnvironmentId property: Resource ID of the Session Pool's environment.
     *
     * @param managedEnvironmentId the managedEnvironmentId value to set.
     * @return the SessionPoolInner object itself.
     */
    public SessionPoolInner withManagedEnvironmentId(String managedEnvironmentId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionPoolProperties();
        }
        this.innerProperties().withManagedEnvironmentId(managedEnvironmentId);
        return this;
    }

    /**
     * Get the maxConcurrentSessions property: The max count of sessions at the same time.
     *
     * @return the maxConcurrentSessions value.
     */
    public Integer maxConcurrentSessions() {
        return this.innerProperties() == null ? null : this.innerProperties().maxConcurrentSessions();
    }

    /**
     * Set the maxConcurrentSessions property: The max count of sessions at the same time.
     *
     * @param maxConcurrentSessions the maxConcurrentSessions value to set.
     * @return the SessionPoolInner object itself.
     */
    public SessionPoolInner withMaxConcurrentSessions(Integer maxConcurrentSessions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionPoolProperties();
        }
        this.innerProperties().withMaxConcurrentSessions(maxConcurrentSessions);
        return this;
    }

    /**
     * Get the secrets property: Collection of secrets used by a Session Pool.
     *
     * @return the secrets value.
     */
    public List<Secret> secrets() {
        return this.innerProperties() == null ? null : this.innerProperties().secrets();
    }

    /**
     * Set the secrets property: Collection of secrets used by a Session Pool.
     *
     * @param secrets the secrets value to set.
     * @return the SessionPoolInner object itself.
     */
    public SessionPoolInner withSecrets(List<Secret> secrets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionPoolProperties();
        }
        this.innerProperties().withSecrets(secrets);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
