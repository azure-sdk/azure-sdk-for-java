// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.appcontainers.models.CodeExecutionConfiguration;
import com.azure.resourcemanager.appcontainers.models.ContainerType;
import com.azure.resourcemanager.appcontainers.models.SessionAuthConfiguration;
import com.azure.resourcemanager.appcontainers.models.SshConfiguration;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Session resource specific properties.
 */
@Fluent
public final class SessionProperties {
    /*
     * The name of the Session.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * The requested duration of the Session in seconds.
     */
    @JsonProperty(value = "requestedDurationInSeconds")
    private Integer requestedDurationInSeconds;

    /*
     * The time elapsed in seconds since the Session was created.
     */
    @JsonProperty(value = "timeElapsedInSeconds")
    private Integer timeElapsedInSeconds;

    /*
     * The time when the Session will expire.
     */
    @JsonProperty(value = "expiryTime")
    private OffsetDateTime expiryTime;

    /*
     * The time when the Session was generated.
     */
    @JsonProperty(value = "generatedTime")
    private OffsetDateTime generatedTime;

    /*
     * The connection string of the Session.
     */
    @JsonProperty(value = "connectionString")
    private String connectionString;

    /*
     * The endpoint of the Session.
     */
    @JsonProperty(value = "endpoint")
    private String endpoint;

    /*
     * The kind of the Session.
     */
    @JsonProperty(value = "sessionKind")
    private ContainerType sessionKind;

    /*
     * The status of the Session.
     */
    @JsonProperty(value = "status")
    private String status;

    /*
     * SSH configuration of the Session.
     */
    @JsonProperty(value = "sshConfiguration")
    private SshConfiguration sshConfiguration;

    /*
     * Code execution configuration of the Session.
     */
    @JsonProperty(value = "codeExecutionConfiguration")
    private CodeExecutionConfiguration codeExecutionConfiguration;

    /*
     * Session auth configuration.
     */
    @JsonProperty(value = "sessionAuthConfiguration")
    private SessionAuthConfiguration sessionAuthConfiguration;

    /**
     * Creates an instance of SessionProperties class.
     */
    public SessionProperties() {
    }

    /**
     * Get the name property: The name of the Session.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the Session.
     * 
     * @param name the name value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the requestedDurationInSeconds property: The requested duration of the Session in seconds.
     * 
     * @return the requestedDurationInSeconds value.
     */
    public Integer requestedDurationInSeconds() {
        return this.requestedDurationInSeconds;
    }

    /**
     * Set the requestedDurationInSeconds property: The requested duration of the Session in seconds.
     * 
     * @param requestedDurationInSeconds the requestedDurationInSeconds value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withRequestedDurationInSeconds(Integer requestedDurationInSeconds) {
        this.requestedDurationInSeconds = requestedDurationInSeconds;
        return this;
    }

    /**
     * Get the timeElapsedInSeconds property: The time elapsed in seconds since the Session was created.
     * 
     * @return the timeElapsedInSeconds value.
     */
    public Integer timeElapsedInSeconds() {
        return this.timeElapsedInSeconds;
    }

    /**
     * Set the timeElapsedInSeconds property: The time elapsed in seconds since the Session was created.
     * 
     * @param timeElapsedInSeconds the timeElapsedInSeconds value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withTimeElapsedInSeconds(Integer timeElapsedInSeconds) {
        this.timeElapsedInSeconds = timeElapsedInSeconds;
        return this;
    }

    /**
     * Get the expiryTime property: The time when the Session will expire.
     * 
     * @return the expiryTime value.
     */
    public OffsetDateTime expiryTime() {
        return this.expiryTime;
    }

    /**
     * Set the expiryTime property: The time when the Session will expire.
     * 
     * @param expiryTime the expiryTime value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withExpiryTime(OffsetDateTime expiryTime) {
        this.expiryTime = expiryTime;
        return this;
    }

    /**
     * Get the generatedTime property: The time when the Session was generated.
     * 
     * @return the generatedTime value.
     */
    public OffsetDateTime generatedTime() {
        return this.generatedTime;
    }

    /**
     * Set the generatedTime property: The time when the Session was generated.
     * 
     * @param generatedTime the generatedTime value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withGeneratedTime(OffsetDateTime generatedTime) {
        this.generatedTime = generatedTime;
        return this;
    }

    /**
     * Get the connectionString property: The connection string of the Session.
     * 
     * @return the connectionString value.
     */
    public String connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: The connection string of the Session.
     * 
     * @param connectionString the connectionString value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withConnectionString(String connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the endpoint property: The endpoint of the Session.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: The endpoint of the Session.
     * 
     * @param endpoint the endpoint value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the sessionKind property: The kind of the Session.
     * 
     * @return the sessionKind value.
     */
    public ContainerType sessionKind() {
        return this.sessionKind;
    }

    /**
     * Set the sessionKind property: The kind of the Session.
     * 
     * @param sessionKind the sessionKind value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withSessionKind(ContainerType sessionKind) {
        this.sessionKind = sessionKind;
        return this;
    }

    /**
     * Get the status property: The status of the Session.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the Session.
     * 
     * @param status the status value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the sshConfiguration property: SSH configuration of the Session.
     * 
     * @return the sshConfiguration value.
     */
    public SshConfiguration sshConfiguration() {
        return this.sshConfiguration;
    }

    /**
     * Set the sshConfiguration property: SSH configuration of the Session.
     * 
     * @param sshConfiguration the sshConfiguration value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withSshConfiguration(SshConfiguration sshConfiguration) {
        this.sshConfiguration = sshConfiguration;
        return this;
    }

    /**
     * Get the codeExecutionConfiguration property: Code execution configuration of the Session.
     * 
     * @return the codeExecutionConfiguration value.
     */
    public CodeExecutionConfiguration codeExecutionConfiguration() {
        return this.codeExecutionConfiguration;
    }

    /**
     * Set the codeExecutionConfiguration property: Code execution configuration of the Session.
     * 
     * @param codeExecutionConfiguration the codeExecutionConfiguration value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withCodeExecutionConfiguration(CodeExecutionConfiguration codeExecutionConfiguration) {
        this.codeExecutionConfiguration = codeExecutionConfiguration;
        return this;
    }

    /**
     * Get the sessionAuthConfiguration property: Session auth configuration.
     * 
     * @return the sessionAuthConfiguration value.
     */
    public SessionAuthConfiguration sessionAuthConfiguration() {
        return this.sessionAuthConfiguration;
    }

    /**
     * Set the sessionAuthConfiguration property: Session auth configuration.
     * 
     * @param sessionAuthConfiguration the sessionAuthConfiguration value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties withSessionAuthConfiguration(SessionAuthConfiguration sessionAuthConfiguration) {
        this.sessionAuthConfiguration = sessionAuthConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sshConfiguration() != null) {
            sshConfiguration().validate();
        }
        if (codeExecutionConfiguration() != null) {
            codeExecutionConfiguration().validate();
        }
        if (sessionAuthConfiguration() != null) {
            sessionAuthConfiguration().validate();
        }
    }
}
