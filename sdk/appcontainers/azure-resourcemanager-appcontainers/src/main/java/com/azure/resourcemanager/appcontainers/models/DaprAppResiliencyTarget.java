// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Dapr Application for applied policies. */
@Fluent
public final class DaprAppResiliencyTarget {
    /*
     * Name of the dapr application to apply policies to.
     */
    @JsonProperty(value = "target", required = true)
    private String target;

    /*
     * Name of Retry Policy to apply.
     */
    @JsonProperty(value = "retry")
    private String retry;

    /*
     * Name of Timeout Policy to apply.
     */
    @JsonProperty(value = "timeout")
    private String timeout;

    /*
     * Name of Circuit Breaker Policy to apply.
     */
    @JsonProperty(value = "circuitBreaker")
    private String circuitBreaker;

    /*
     * Size of policy lru cache
     */
    @JsonProperty(value = "circuitBreakerCacheSize")
    private Integer circuitBreakerCacheSize;

    /** Creates an instance of DaprAppResiliencyTarget class. */
    public DaprAppResiliencyTarget() {
    }

    /**
     * Get the target property: Name of the dapr application to apply policies to.
     *
     * @return the target value.
     */
    public String target() {
        return this.target;
    }

    /**
     * Set the target property: Name of the dapr application to apply policies to.
     *
     * @param target the target value to set.
     * @return the DaprAppResiliencyTarget object itself.
     */
    public DaprAppResiliencyTarget withTarget(String target) {
        this.target = target;
        return this;
    }

    /**
     * Get the retry property: Name of Retry Policy to apply.
     *
     * @return the retry value.
     */
    public String retry() {
        return this.retry;
    }

    /**
     * Set the retry property: Name of Retry Policy to apply.
     *
     * @param retry the retry value to set.
     * @return the DaprAppResiliencyTarget object itself.
     */
    public DaprAppResiliencyTarget withRetry(String retry) {
        this.retry = retry;
        return this;
    }

    /**
     * Get the timeout property: Name of Timeout Policy to apply.
     *
     * @return the timeout value.
     */
    public String timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: Name of Timeout Policy to apply.
     *
     * @param timeout the timeout value to set.
     * @return the DaprAppResiliencyTarget object itself.
     */
    public DaprAppResiliencyTarget withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the circuitBreaker property: Name of Circuit Breaker Policy to apply.
     *
     * @return the circuitBreaker value.
     */
    public String circuitBreaker() {
        return this.circuitBreaker;
    }

    /**
     * Set the circuitBreaker property: Name of Circuit Breaker Policy to apply.
     *
     * @param circuitBreaker the circuitBreaker value to set.
     * @return the DaprAppResiliencyTarget object itself.
     */
    public DaprAppResiliencyTarget withCircuitBreaker(String circuitBreaker) {
        this.circuitBreaker = circuitBreaker;
        return this;
    }

    /**
     * Get the circuitBreakerCacheSize property: Size of policy lru cache.
     *
     * @return the circuitBreakerCacheSize value.
     */
    public Integer circuitBreakerCacheSize() {
        return this.circuitBreakerCacheSize;
    }

    /**
     * Set the circuitBreakerCacheSize property: Size of policy lru cache.
     *
     * @param circuitBreakerCacheSize the circuitBreakerCacheSize value to set.
     * @return the DaprAppResiliencyTarget object itself.
     */
    public DaprAppResiliencyTarget withCircuitBreakerCacheSize(Integer circuitBreakerCacheSize) {
        this.circuitBreakerCacheSize = circuitBreakerCacheSize;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (target() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property target in model DaprAppResiliencyTarget"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DaprAppResiliencyTarget.class);
}
