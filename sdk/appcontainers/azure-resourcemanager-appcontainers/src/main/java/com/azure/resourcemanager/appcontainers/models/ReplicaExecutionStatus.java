// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Container Apps Job execution replica status.
 */
@Fluent
public final class ReplicaExecutionStatus {
    /*
     * Replica Name.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Containers in the execution replica
     */
    @JsonProperty(value = "containers")
    private List<ContainerExecutionStatus> containers;

    /**
     * Creates an instance of ReplicaExecutionStatus class.
     */
    public ReplicaExecutionStatus() {
    }

    /**
     * Get the name property: Replica Name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Replica Name.
     * 
     * @param name the name value to set.
     * @return the ReplicaExecutionStatus object itself.
     */
    public ReplicaExecutionStatus withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the containers property: Containers in the execution replica.
     * 
     * @return the containers value.
     */
    public List<ContainerExecutionStatus> containers() {
        return this.containers;
    }

    /**
     * Set the containers property: Containers in the execution replica.
     * 
     * @param containers the containers value to set.
     * @return the ReplicaExecutionStatus object itself.
     */
    public ReplicaExecutionStatus withContainers(List<ContainerExecutionStatus> containers) {
        this.containers = containers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containers() != null) {
            containers().forEach(e -> e.validate());
        }
    }
}
