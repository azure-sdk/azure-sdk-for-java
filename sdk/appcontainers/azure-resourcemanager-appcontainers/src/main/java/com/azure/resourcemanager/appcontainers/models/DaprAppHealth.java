// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Dapr application health check configuration.
 */
@Fluent
public final class DaprAppHealth implements JsonSerializable<DaprAppHealth> {
    /*
     * Boolean indicating if the health probe is enabled
     */
    private Boolean enabled;

    /*
     * Path for the health probe
     */
    private String path;

    /*
     * Interval for the health probe in seconds
     */
    private Integer probeInterval;

    /*
     * Timeout for the health probe in milliseconds
     */
    private Integer probeTimeout;

    /*
     * Threshold for the health probe
     */
    private Integer threshold;

    /**
     * Creates an instance of DaprAppHealth class.
     */
    public DaprAppHealth() {
    }

    /**
     * Get the enabled property: Boolean indicating if the health probe is enabled.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Boolean indicating if the health probe is enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the DaprAppHealth object itself.
     */
    public DaprAppHealth withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the path property: Path for the health probe.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: Path for the health probe.
     * 
     * @param path the path value to set.
     * @return the DaprAppHealth object itself.
     */
    public DaprAppHealth withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the probeInterval property: Interval for the health probe in seconds.
     * 
     * @return the probeInterval value.
     */
    public Integer probeInterval() {
        return this.probeInterval;
    }

    /**
     * Set the probeInterval property: Interval for the health probe in seconds.
     * 
     * @param probeInterval the probeInterval value to set.
     * @return the DaprAppHealth object itself.
     */
    public DaprAppHealth withProbeInterval(Integer probeInterval) {
        this.probeInterval = probeInterval;
        return this;
    }

    /**
     * Get the probeTimeout property: Timeout for the health probe in milliseconds.
     * 
     * @return the probeTimeout value.
     */
    public Integer probeTimeout() {
        return this.probeTimeout;
    }

    /**
     * Set the probeTimeout property: Timeout for the health probe in milliseconds.
     * 
     * @param probeTimeout the probeTimeout value to set.
     * @return the DaprAppHealth object itself.
     */
    public DaprAppHealth withProbeTimeout(Integer probeTimeout) {
        this.probeTimeout = probeTimeout;
        return this;
    }

    /**
     * Get the threshold property: Threshold for the health probe.
     * 
     * @return the threshold value.
     */
    public Integer threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: Threshold for the health probe.
     * 
     * @param threshold the threshold value to set.
     * @return the DaprAppHealth object itself.
     */
    public DaprAppHealth withThreshold(Integer threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeNumberField("probeInterval", this.probeInterval);
        jsonWriter.writeNumberField("probeTimeout", this.probeTimeout);
        jsonWriter.writeNumberField("threshold", this.threshold);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DaprAppHealth from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DaprAppHealth if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DaprAppHealth.
     */
    public static DaprAppHealth fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DaprAppHealth deserializedDaprAppHealth = new DaprAppHealth();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedDaprAppHealth.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("path".equals(fieldName)) {
                    deserializedDaprAppHealth.path = reader.getString();
                } else if ("probeInterval".equals(fieldName)) {
                    deserializedDaprAppHealth.probeInterval = reader.getNullable(JsonReader::getInt);
                } else if ("probeTimeout".equals(fieldName)) {
                    deserializedDaprAppHealth.probeTimeout = reader.getNullable(JsonReader::getInt);
                } else if ("threshold".equals(fieldName)) {
                    deserializedDaprAppHealth.threshold = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDaprAppHealth;
        });
    }
}
