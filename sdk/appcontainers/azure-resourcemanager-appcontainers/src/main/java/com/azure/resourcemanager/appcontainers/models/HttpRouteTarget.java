// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Targets - Container App Names, Revision Names, Labels.
 */
@Fluent
public final class HttpRouteTarget implements JsonSerializable<HttpRouteTarget> {
    /*
     * Container App Name to route requests to
     */
    private String containerAppName;

    /*
     * Revision to route requests to
     */
    private String revisionName;

    /*
     * Label/Revision to route requests to
     */
    private String labelName;

    /*
     * Weighted routing
     */
    private Integer weight;

    /**
     * Creates an instance of HttpRouteTarget class.
     */
    public HttpRouteTarget() {
    }

    /**
     * Get the containerAppName property: Container App Name to route requests to.
     * 
     * @return the containerAppName value.
     */
    public String containerAppName() {
        return this.containerAppName;
    }

    /**
     * Set the containerAppName property: Container App Name to route requests to.
     * 
     * @param containerAppName the containerAppName value to set.
     * @return the HttpRouteTarget object itself.
     */
    public HttpRouteTarget withContainerAppName(String containerAppName) {
        this.containerAppName = containerAppName;
        return this;
    }

    /**
     * Get the revisionName property: Revision to route requests to.
     * 
     * @return the revisionName value.
     */
    public String revisionName() {
        return this.revisionName;
    }

    /**
     * Set the revisionName property: Revision to route requests to.
     * 
     * @param revisionName the revisionName value to set.
     * @return the HttpRouteTarget object itself.
     */
    public HttpRouteTarget withRevisionName(String revisionName) {
        this.revisionName = revisionName;
        return this;
    }

    /**
     * Get the labelName property: Label/Revision to route requests to.
     * 
     * @return the labelName value.
     */
    public String labelName() {
        return this.labelName;
    }

    /**
     * Set the labelName property: Label/Revision to route requests to.
     * 
     * @param labelName the labelName value to set.
     * @return the HttpRouteTarget object itself.
     */
    public HttpRouteTarget withLabelName(String labelName) {
        this.labelName = labelName;
        return this;
    }

    /**
     * Get the weight property: Weighted routing.
     * 
     * @return the weight value.
     */
    public Integer weight() {
        return this.weight;
    }

    /**
     * Set the weight property: Weighted routing.
     * 
     * @param weight the weight value to set.
     * @return the HttpRouteTarget object itself.
     */
    public HttpRouteTarget withWeight(Integer weight) {
        this.weight = weight;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerAppName", this.containerAppName);
        jsonWriter.writeStringField("revisionName", this.revisionName);
        jsonWriter.writeStringField("labelName", this.labelName);
        jsonWriter.writeNumberField("weight", this.weight);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HttpRouteTarget from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HttpRouteTarget if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HttpRouteTarget.
     */
    public static HttpRouteTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HttpRouteTarget deserializedHttpRouteTarget = new HttpRouteTarget();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerAppName".equals(fieldName)) {
                    deserializedHttpRouteTarget.containerAppName = reader.getString();
                } else if ("revisionName".equals(fieldName)) {
                    deserializedHttpRouteTarget.revisionName = reader.getString();
                } else if ("labelName".equals(fieldName)) {
                    deserializedHttpRouteTarget.labelName = reader.getString();
                } else if ("weight".equals(fieldName)) {
                    deserializedHttpRouteTarget.weight = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHttpRouteTarget;
        });
    }
}
