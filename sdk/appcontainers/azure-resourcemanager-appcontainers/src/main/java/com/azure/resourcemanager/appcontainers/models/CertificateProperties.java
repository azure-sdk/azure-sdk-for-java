// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Certificate resource specific properties. */
@Fluent
public final class CertificateProperties {
    /*
     * Provisioning state of the certificate.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private CertificateProvisioningState provisioningState;

    /*
     * Certificate password.
     */
    @JsonProperty(value = "password")
    private String password;

    /*
     * Subject name of the certificate.
     */
    @JsonProperty(value = "subjectName")
    private String subjectName;

    /*
     * Subject alternative names the certificate applies to.
     */
    @JsonProperty(value = "subjectAlternativeNames", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> subjectAlternativeNames;

    /*
     * PFX or PEM blob
     */
    @JsonProperty(value = "value")
    private byte[] value;

    /*
     * Certificate issuer.
     */
    @JsonProperty(value = "issuer", access = JsonProperty.Access.WRITE_ONLY)
    private String issuer;

    /*
     * Certificate issue Date.
     */
    @JsonProperty(value = "issueDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime issueDate;

    /*
     * Certificate expiration date.
     */
    @JsonProperty(value = "expirationDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime expirationDate;

    /*
     * Certificate thumbprint.
     */
    @JsonProperty(value = "thumbprint", access = JsonProperty.Access.WRITE_ONLY)
    private String thumbprint;

    /*
     * Is the certificate valid?.
     */
    @JsonProperty(value = "valid", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean valid;

    /*
     * Public key hash.
     */
    @JsonProperty(value = "publicKeyHash", access = JsonProperty.Access.WRITE_ONLY)
    private String publicKeyHash;

    /*
     * Any error occurred during the certificate provision.
     */
    @JsonProperty(value = "error", access = JsonProperty.Access.WRITE_ONLY)
    private String error;

    /*
     * Selected type of domain control validation for managed certificates.
     */
    @JsonProperty(value = "domainControlValidation")
    private ManagedCertificateDomainControlValidation domainControlValidation;

    /*
     * A TXT token used for DNS TXT domain control validation when issuing this type of managed certificates.
     */
    @JsonProperty(value = "validationToken", access = JsonProperty.Access.WRITE_ONLY)
    private String validationToken;

    /** Creates an instance of CertificateProperties class. */
    public CertificateProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the certificate.
     *
     * @return the provisioningState value.
     */
    public CertificateProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the password property: Certificate password.
     *
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Certificate password.
     *
     * @param password the password value to set.
     * @return the CertificateProperties object itself.
     */
    public CertificateProperties withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the subjectName property: Subject name of the certificate.
     *
     * @return the subjectName value.
     */
    public String subjectName() {
        return this.subjectName;
    }

    /**
     * Set the subjectName property: Subject name of the certificate.
     *
     * @param subjectName the subjectName value to set.
     * @return the CertificateProperties object itself.
     */
    public CertificateProperties withSubjectName(String subjectName) {
        this.subjectName = subjectName;
        return this;
    }

    /**
     * Get the subjectAlternativeNames property: Subject alternative names the certificate applies to.
     *
     * @return the subjectAlternativeNames value.
     */
    public List<String> subjectAlternativeNames() {
        return this.subjectAlternativeNames;
    }

    /**
     * Get the value property: PFX or PEM blob.
     *
     * @return the value value.
     */
    public byte[] value() {
        return CoreUtils.clone(this.value);
    }

    /**
     * Set the value property: PFX or PEM blob.
     *
     * @param value the value value to set.
     * @return the CertificateProperties object itself.
     */
    public CertificateProperties withValue(byte[] value) {
        this.value = CoreUtils.clone(value);
        return this;
    }

    /**
     * Get the issuer property: Certificate issuer.
     *
     * @return the issuer value.
     */
    public String issuer() {
        return this.issuer;
    }

    /**
     * Get the issueDate property: Certificate issue Date.
     *
     * @return the issueDate value.
     */
    public OffsetDateTime issueDate() {
        return this.issueDate;
    }

    /**
     * Get the expirationDate property: Certificate expiration date.
     *
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.expirationDate;
    }

    /**
     * Get the thumbprint property: Certificate thumbprint.
     *
     * @return the thumbprint value.
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Get the valid property: Is the certificate valid?.
     *
     * @return the valid value.
     */
    public Boolean valid() {
        return this.valid;
    }

    /**
     * Get the publicKeyHash property: Public key hash.
     *
     * @return the publicKeyHash value.
     */
    public String publicKeyHash() {
        return this.publicKeyHash;
    }

    /**
     * Get the error property: Any error occurred during the certificate provision.
     *
     * @return the error value.
     */
    public String error() {
        return this.error;
    }

    /**
     * Get the domainControlValidation property: Selected type of domain control validation for managed certificates.
     *
     * @return the domainControlValidation value.
     */
    public ManagedCertificateDomainControlValidation domainControlValidation() {
        return this.domainControlValidation;
    }

    /**
     * Set the domainControlValidation property: Selected type of domain control validation for managed certificates.
     *
     * @param domainControlValidation the domainControlValidation value to set.
     * @return the CertificateProperties object itself.
     */
    public CertificateProperties withDomainControlValidation(
        ManagedCertificateDomainControlValidation domainControlValidation) {
        this.domainControlValidation = domainControlValidation;
        return this;
    }

    /**
     * Get the validationToken property: A TXT token used for DNS TXT domain control validation when issuing this type
     * of managed certificates.
     *
     * @return the validationToken value.
     */
    public String validationToken() {
        return this.validationToken;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
