// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Resiliency Policy Circuit Breakers Policy. */
@Fluent
public final class DaprResiliencyCircuitBreakerPolicyInner extends ProxyResource {
    /*
     * DaprResiliencyCircuitBreakerPolicy resource specific properties
     */
    @JsonProperty(value = "properties")
    private DaprResiliencyCircuitBreakerPolicyProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of DaprResiliencyCircuitBreakerPolicyInner class. */
    public DaprResiliencyCircuitBreakerPolicyInner() {
    }

    /**
     * Get the innerProperties property: DaprResiliencyCircuitBreakerPolicy resource specific properties.
     *
     * @return the innerProperties value.
     */
    private DaprResiliencyCircuitBreakerPolicyProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the maxRequests property: Maximum number of requests allowed to pass through.
     *
     * @return the maxRequests value.
     */
    public Integer maxRequests() {
        return this.innerProperties() == null ? null : this.innerProperties().maxRequests();
    }

    /**
     * Set the maxRequests property: Maximum number of requests allowed to pass through.
     *
     * @param maxRequests the maxRequests value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyInner object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyInner withMaxRequests(Integer maxRequests) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DaprResiliencyCircuitBreakerPolicyProperties();
        }
        this.innerProperties().withMaxRequests(maxRequests);
        return this;
    }

    /**
     * Get the interval property: Cyclical period of time used by the CB to clear its internal counts. Valid values are
     * of the form 200ms, 15s, 2m, 1h30m, etc.
     *
     * @return the interval value.
     */
    public String interval() {
        return this.innerProperties() == null ? null : this.innerProperties().interval();
    }

    /**
     * Set the interval property: Cyclical period of time used by the CB to clear its internal counts. Valid values are
     * of the form 200ms, 15s, 2m, 1h30m, etc.
     *
     * @param interval the interval value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyInner object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyInner withInterval(String interval) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DaprResiliencyCircuitBreakerPolicyProperties();
        }
        this.innerProperties().withInterval(interval);
        return this;
    }

    /**
     * Get the timeout property: The period of the open state until the CB switches to half-open. Valid values are of
     * the form 200ms, 15s, 2m, 1h30m, etc.
     *
     * @return the timeout value.
     */
    public String timeout() {
        return this.innerProperties() == null ? null : this.innerProperties().timeout();
    }

    /**
     * Set the timeout property: The period of the open state until the CB switches to half-open. Valid values are of
     * the form 200ms, 15s, 2m, 1h30m, etc.
     *
     * @param timeout the timeout value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyInner object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyInner withTimeout(String timeout) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DaprResiliencyCircuitBreakerPolicyProperties();
        }
        this.innerProperties().withTimeout(timeout);
        return this;
    }

    /**
     * Get the trip property: A Common Expression Language (CEL) statement that is evaluated by the CB When the
     * statement evaluates to true, the CB trips and becomes open.
     *
     * @return the trip value.
     */
    public String trip() {
        return this.innerProperties() == null ? null : this.innerProperties().trip();
    }

    /**
     * Set the trip property: A Common Expression Language (CEL) statement that is evaluated by the CB When the
     * statement evaluates to true, the CB trips and becomes open.
     *
     * @param trip the trip value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyInner object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyInner withTrip(String trip) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DaprResiliencyCircuitBreakerPolicyProperties();
        }
        this.innerProperties().withTrip(trip);
        return this;
    }

    /**
     * Get the circuitBreakerScope property: Specify whether circuit breaking state should be scoped to an individual
     * actor ID, all actors across the actor type, or both. Possible values include id, type, or both.
     *
     * @return the circuitBreakerScope value.
     */
    public String circuitBreakerScope() {
        return this.innerProperties() == null ? null : this.innerProperties().circuitBreakerScope();
    }

    /**
     * Set the circuitBreakerScope property: Specify whether circuit breaking state should be scoped to an individual
     * actor ID, all actors across the actor type, or both. Possible values include id, type, or both.
     *
     * @param circuitBreakerScope the circuitBreakerScope value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyInner object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyInner withCircuitBreakerScope(String circuitBreakerScope) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DaprResiliencyCircuitBreakerPolicyProperties();
        }
        this.innerProperties().withCircuitBreakerScope(circuitBreakerScope);
        return this;
    }

    /**
     * Get the circuitBreakerCacheSize property: Specify a cache size for the number of CBs to keep in memory. The value
     * should be larger than the expected number of active actor instances.
     *
     * @return the circuitBreakerCacheSize value.
     */
    public Integer circuitBreakerCacheSize() {
        return this.innerProperties() == null ? null : this.innerProperties().circuitBreakerCacheSize();
    }

    /**
     * Set the circuitBreakerCacheSize property: Specify a cache size for the number of CBs to keep in memory. The value
     * should be larger than the expected number of active actor instances.
     *
     * @param circuitBreakerCacheSize the circuitBreakerCacheSize value to set.
     * @return the DaprResiliencyCircuitBreakerPolicyInner object itself.
     */
    public DaprResiliencyCircuitBreakerPolicyInner withCircuitBreakerCacheSize(Integer circuitBreakerCacheSize) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DaprResiliencyCircuitBreakerPolicyProperties();
        }
        this.innerProperties().withCircuitBreakerCacheSize(circuitBreakerCacheSize);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
