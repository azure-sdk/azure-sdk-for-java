// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appcontainers.fluent.models.LabelsInner;
import com.azure.resourcemanager.appcontainers.models.Label;
import com.azure.resourcemanager.appcontainers.models.Labels;
import com.azure.resourcemanager.appcontainers.models.LabelsProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class LabelsImpl implements Labels, Labels.Definition, Labels.Update {
    private LabelsInner innerObject;

    private final com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public LabelsProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Map<String, Label> labels() {
        Map<String, Label> inner = this.innerModel().labels();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public LabelsInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String containerAppName;

    private String labelsName;

    public LabelsImpl withExistingContainerApp(String resourceGroupName, String containerAppName) {
        this.resourceGroupName = resourceGroupName;
        this.containerAppName = containerAppName;
        return this;
    }

    public Labels create() {
        this.innerObject = serviceManager.serviceClient().getContainerAppsLabels().createOrUpdate(resourceGroupName,
            containerAppName, labelsName, this.innerModel(), Context.NONE);
        return this;
    }

    public Labels create(Context context) {
        this.innerObject = serviceManager.serviceClient().getContainerAppsLabels().createOrUpdate(resourceGroupName,
            containerAppName, labelsName, this.innerModel(), context);
        return this;
    }

    LabelsImpl(String name, com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerObject = new LabelsInner();
        this.serviceManager = serviceManager;
        this.labelsName = name;
    }

    public LabelsImpl update() {
        return this;
    }

    public Labels apply() {
        this.innerObject = serviceManager.serviceClient().getContainerAppsLabels().createOrUpdate(resourceGroupName,
            containerAppName, labelsName, this.innerModel(), Context.NONE);
        return this;
    }

    public Labels apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getContainerAppsLabels().createOrUpdate(resourceGroupName,
            containerAppName, labelsName, this.innerModel(), context);
        return this;
    }

    LabelsImpl(LabelsInner innerObject,
        com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.containerAppName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "containerApps");
        this.labelsName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "labels");
    }

    public Labels refresh() {
        this.innerObject = serviceManager.serviceClient().getContainerAppsLabels()
            .getWithResponse(resourceGroupName, containerAppName, labelsName, Context.NONE).getValue();
        return this;
    }

    public Labels refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getContainerAppsLabels()
            .getWithResponse(resourceGroupName, containerAppName, labelsName, context).getValue();
        return this;
    }

    public LabelsImpl withLabels(Map<String, Label> labels) {
        this.innerModel().withLabels(labels);
        return this;
    }
}
