// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcontainers.fluent.DaprResiliencyCircuitBreakerPoliciesClient;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprResiliencyCircuitBreakerPolicyInner;
import com.azure.resourcemanager.appcontainers.models.DaprResiliencyCircuitBreakerPolicies;
import com.azure.resourcemanager.appcontainers.models.DaprResiliencyCircuitBreakerPolicy;

public final class DaprResiliencyCircuitBreakerPoliciesImpl implements DaprResiliencyCircuitBreakerPolicies {
    private static final ClientLogger LOGGER = new ClientLogger(DaprResiliencyCircuitBreakerPoliciesImpl.class);

    private final DaprResiliencyCircuitBreakerPoliciesClient innerClient;

    private final com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager;

    public DaprResiliencyCircuitBreakerPoliciesImpl(
        DaprResiliencyCircuitBreakerPoliciesClient innerClient,
        com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DaprResiliencyCircuitBreakerPolicy> list(String resourceGroupName, String environmentName) {
        PagedIterable<DaprResiliencyCircuitBreakerPolicyInner> inner =
            this.serviceClient().list(resourceGroupName, environmentName);
        return Utils.mapPage(inner, inner1 -> new DaprResiliencyCircuitBreakerPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<DaprResiliencyCircuitBreakerPolicy> list(
        String resourceGroupName, String environmentName, Context context) {
        PagedIterable<DaprResiliencyCircuitBreakerPolicyInner> inner =
            this.serviceClient().list(resourceGroupName, environmentName, context);
        return Utils.mapPage(inner, inner1 -> new DaprResiliencyCircuitBreakerPolicyImpl(inner1, this.manager()));
    }

    public Response<DaprResiliencyCircuitBreakerPolicy> getWithResponse(
        String resourceGroupName, String environmentName, String policyName, Context context) {
        Response<DaprResiliencyCircuitBreakerPolicyInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, environmentName, policyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DaprResiliencyCircuitBreakerPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DaprResiliencyCircuitBreakerPolicy get(String resourceGroupName, String environmentName, String policyName) {
        DaprResiliencyCircuitBreakerPolicyInner inner =
            this.serviceClient().get(resourceGroupName, environmentName, policyName);
        if (inner != null) {
            return new DaprResiliencyCircuitBreakerPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DaprResiliencyCircuitBreakerPolicy> createOrUpdateWithResponse(
        String resourceGroupName,
        String environmentName,
        String policyName,
        DaprResiliencyCircuitBreakerPolicyInner daprResiliencyCircuitBreakerPoliciesEnvelope,
        Context context) {
        Response<DaprResiliencyCircuitBreakerPolicyInner> inner =
            this
                .serviceClient()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    environmentName,
                    policyName,
                    daprResiliencyCircuitBreakerPoliciesEnvelope,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DaprResiliencyCircuitBreakerPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DaprResiliencyCircuitBreakerPolicy createOrUpdate(
        String resourceGroupName,
        String environmentName,
        String policyName,
        DaprResiliencyCircuitBreakerPolicyInner daprResiliencyCircuitBreakerPoliciesEnvelope) {
        DaprResiliencyCircuitBreakerPolicyInner inner =
            this
                .serviceClient()
                .createOrUpdate(
                    resourceGroupName, environmentName, policyName, daprResiliencyCircuitBreakerPoliciesEnvelope);
        if (inner != null) {
            return new DaprResiliencyCircuitBreakerPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String environmentName, String policyName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, environmentName, policyName, context);
    }

    public void delete(String resourceGroupName, String environmentName, String policyName) {
        this.serviceClient().delete(resourceGroupName, environmentName, policyName);
    }

    private DaprResiliencyCircuitBreakerPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager() {
        return this.serviceManager;
    }
}
