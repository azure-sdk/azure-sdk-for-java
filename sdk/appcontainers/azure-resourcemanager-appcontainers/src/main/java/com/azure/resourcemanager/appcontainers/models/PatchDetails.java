// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The details of specific patch item. */
@Fluent
public final class PatchDetails {
    /*
     * The name of the target container for the patch.
     */
    @JsonProperty(value = "targetContainerName")
    private String targetContainerName;

    /*
     * The name of the target image for the patch.
     */
    @JsonProperty(value = "targetImage")
    private String targetImage;

    /*
     * The status of the patch detection.
     */
    @JsonProperty(value = "detectionStatus", access = JsonProperty.Access.WRITE_ONLY)
    private DetectionStatus detectionStatus;

    /*
     * The name of the new image created by the patch.
     */
    @JsonProperty(value = "newImageName")
    private String newImageName;

    /*
     * The details of new run image for the target image.
     */
    @JsonProperty(value = "newLayer")
    private PatchDetailsNewLayer newLayer;

    /*
     * The details of old run image for the target image.
     */
    @JsonProperty(value = "oldLayer")
    private PatchDetailsOldLayer oldLayer;

    /*
     * The type for the patch.
     */
    @JsonProperty(value = "patchType")
    private PatchType patchType;

    /** Creates an instance of PatchDetails class. */
    public PatchDetails() {
    }

    /**
     * Get the targetContainerName property: The name of the target container for the patch.
     *
     * @return the targetContainerName value.
     */
    public String targetContainerName() {
        return this.targetContainerName;
    }

    /**
     * Set the targetContainerName property: The name of the target container for the patch.
     *
     * @param targetContainerName the targetContainerName value to set.
     * @return the PatchDetails object itself.
     */
    public PatchDetails withTargetContainerName(String targetContainerName) {
        this.targetContainerName = targetContainerName;
        return this;
    }

    /**
     * Get the targetImage property: The name of the target image for the patch.
     *
     * @return the targetImage value.
     */
    public String targetImage() {
        return this.targetImage;
    }

    /**
     * Set the targetImage property: The name of the target image for the patch.
     *
     * @param targetImage the targetImage value to set.
     * @return the PatchDetails object itself.
     */
    public PatchDetails withTargetImage(String targetImage) {
        this.targetImage = targetImage;
        return this;
    }

    /**
     * Get the detectionStatus property: The status of the patch detection.
     *
     * @return the detectionStatus value.
     */
    public DetectionStatus detectionStatus() {
        return this.detectionStatus;
    }

    /**
     * Get the newImageName property: The name of the new image created by the patch.
     *
     * @return the newImageName value.
     */
    public String newImageName() {
        return this.newImageName;
    }

    /**
     * Set the newImageName property: The name of the new image created by the patch.
     *
     * @param newImageName the newImageName value to set.
     * @return the PatchDetails object itself.
     */
    public PatchDetails withNewImageName(String newImageName) {
        this.newImageName = newImageName;
        return this;
    }

    /**
     * Get the newLayer property: The details of new run image for the target image.
     *
     * @return the newLayer value.
     */
    public PatchDetailsNewLayer newLayer() {
        return this.newLayer;
    }

    /**
     * Set the newLayer property: The details of new run image for the target image.
     *
     * @param newLayer the newLayer value to set.
     * @return the PatchDetails object itself.
     */
    public PatchDetails withNewLayer(PatchDetailsNewLayer newLayer) {
        this.newLayer = newLayer;
        return this;
    }

    /**
     * Get the oldLayer property: The details of old run image for the target image.
     *
     * @return the oldLayer value.
     */
    public PatchDetailsOldLayer oldLayer() {
        return this.oldLayer;
    }

    /**
     * Set the oldLayer property: The details of old run image for the target image.
     *
     * @param oldLayer the oldLayer value to set.
     * @return the PatchDetails object itself.
     */
    public PatchDetails withOldLayer(PatchDetailsOldLayer oldLayer) {
        this.oldLayer = oldLayer;
        return this;
    }

    /**
     * Get the patchType property: The type for the patch.
     *
     * @return the patchType value.
     */
    public PatchType patchType() {
        return this.patchType;
    }

    /**
     * Set the patchType property: The type for the patch.
     *
     * @param patchType the patchType value to set.
     * @return the PatchDetails object itself.
     */
    public PatchDetails withPatchType(PatchType patchType) {
        this.patchType = patchType;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (newLayer() != null) {
            newLayer().validate();
        }
        if (oldLayer() != null) {
            oldLayer().validate();
        }
    }
}
