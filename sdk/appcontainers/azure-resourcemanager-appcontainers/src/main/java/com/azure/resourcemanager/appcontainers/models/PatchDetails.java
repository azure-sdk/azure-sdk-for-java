// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The detailed info of patch operation performing when applying a patch. */
@Immutable
public final class PatchDetails {
    /*
     * The name of the target container for the patch.
     */
    @JsonProperty(value = "targetContainerName", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private String targetContainerName;

    /*
     * The name of the target image for the patch.
     */
    @JsonProperty(value = "targetImage", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private String targetImage;

    /*
     * The UTC timestamp that describes the latest detection was done.
     */
    @JsonProperty(value = "lastDetectionTime", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastDetectionTime;

    /*
     * The status of the patch detection.
     */
    @JsonProperty(value = "detectionStatus", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private DetectionStatus detectionStatus;

    /*
     * The name of the new image created by the patch.
     */
    @JsonProperty(value = "newImageName", access = JsonProperty.Access.WRITE_ONLY)
    private String newImageName;

    /*
     * New layer update details in the target image.
     */
    @JsonProperty(value = "newLayer", access = JsonProperty.Access.WRITE_ONLY)
    private PatchDetailsNewLayer newLayer;

    /*
     * The old layer details in the target image.
     */
    @JsonProperty(value = "oldLayer", access = JsonProperty.Access.WRITE_ONLY)
    private PatchDetailsOldLayer oldLayer;

    /*
     * The type for the patch.
     */
    @JsonProperty(value = "patchType", access = JsonProperty.Access.WRITE_ONLY)
    private PatchType patchType;

    /** Creates an instance of PatchDetails class. */
    public PatchDetails() {
    }

    /**
     * Get the targetContainerName property: The name of the target container for the patch.
     *
     * @return the targetContainerName value.
     */
    public String targetContainerName() {
        return this.targetContainerName;
    }

    /**
     * Get the targetImage property: The name of the target image for the patch.
     *
     * @return the targetImage value.
     */
    public String targetImage() {
        return this.targetImage;
    }

    /**
     * Get the lastDetectionTime property: The UTC timestamp that describes the latest detection was done.
     *
     * @return the lastDetectionTime value.
     */
    public OffsetDateTime lastDetectionTime() {
        return this.lastDetectionTime;
    }

    /**
     * Get the detectionStatus property: The status of the patch detection.
     *
     * @return the detectionStatus value.
     */
    public DetectionStatus detectionStatus() {
        return this.detectionStatus;
    }

    /**
     * Get the newImageName property: The name of the new image created by the patch.
     *
     * @return the newImageName value.
     */
    public String newImageName() {
        return this.newImageName;
    }

    /**
     * Get the newLayer property: New layer update details in the target image.
     *
     * @return the newLayer value.
     */
    public PatchDetailsNewLayer newLayer() {
        return this.newLayer;
    }

    /**
     * Get the oldLayer property: The old layer details in the target image.
     *
     * @return the oldLayer value.
     */
    public PatchDetailsOldLayer oldLayer() {
        return this.oldLayer;
    }

    /**
     * Get the patchType property: The type for the patch.
     *
     * @return the patchType value.
     */
    public PatchType patchType() {
        return this.patchType;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (newLayer() != null) {
            newLayer().validate();
        }
        if (oldLayer() != null) {
            oldLayer().validate();
        }
    }
}
