// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprResiliencyCircuitBreakerPolicyInner;

/** An immutable client-side representation of DaprResiliencyCircuitBreakerPolicy. */
public interface DaprResiliencyCircuitBreakerPolicy {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the maxRequests property: Maximum number of requests allowed to pass through.
     *
     * @return the maxRequests value.
     */
    Integer maxRequests();

    /**
     * Gets the interval property: Cyclical period of time used by the CB to clear its internal counts. Valid values are
     * of the form 15s, 2m, 1h30m, etc.
     *
     * @return the interval value.
     */
    String interval();

    /**
     * Gets the timeout property: The period of the open state until the CB switches to half-open. Valid values are of
     * the form 15s, 2m, 1h30m, etc.
     *
     * @return the timeout value.
     */
    String timeout();

    /**
     * Gets the trip property: A Common Expression Language (CEL) statement that is evaluated by the CB When the
     * statement evaluates to true, the CB trips and becomes open.
     *
     * @return the trip value.
     */
    String trip();

    /**
     * Gets the circuitBreakerScope property: Specify whether circuit breaking state should be scoped to an individual
     * actor ID, all actors across the actor type, or both. Possible values include id, type, or both.
     *
     * @return the circuitBreakerScope value.
     */
    String circuitBreakerScope();

    /**
     * Gets the circuitBreakerCacheSize property: Specify a cache size for the number of CBs to keep in memory. The
     * value should be larger than the expected number of active actor instances.
     *
     * @return the circuitBreakerCacheSize value.
     */
    Integer circuitBreakerCacheSize();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.appcontainers.fluent.models.DaprResiliencyCircuitBreakerPolicyInner
     * object.
     *
     * @return the inner object.
     */
    DaprResiliencyCircuitBreakerPolicyInner innerModel();

    /** The entirety of the DaprResiliencyCircuitBreakerPolicy definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The DaprResiliencyCircuitBreakerPolicy definition stages. */
    interface DefinitionStages {
        /** The first stage of the DaprResiliencyCircuitBreakerPolicy definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the DaprResiliencyCircuitBreakerPolicy definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, environmentName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param environmentName Name of the Managed Environment.
             * @return the next definition stage.
             */
            WithCreate withExistingManagedEnvironment(String resourceGroupName, String environmentName);
        }
        /**
         * The stage of the DaprResiliencyCircuitBreakerPolicy definition which contains all the minimum required
         * properties for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithMaxRequests,
                DefinitionStages.WithInterval,
                DefinitionStages.WithTimeout,
                DefinitionStages.WithTrip,
                DefinitionStages.WithCircuitBreakerScope,
                DefinitionStages.WithCircuitBreakerCacheSize {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            DaprResiliencyCircuitBreakerPolicy create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DaprResiliencyCircuitBreakerPolicy create(Context context);
        }
        /** The stage of the DaprResiliencyCircuitBreakerPolicy definition allowing to specify maxRequests. */
        interface WithMaxRequests {
            /**
             * Specifies the maxRequests property: Maximum number of requests allowed to pass through.
             *
             * @param maxRequests Maximum number of requests allowed to pass through.
             * @return the next definition stage.
             */
            WithCreate withMaxRequests(Integer maxRequests);
        }
        /** The stage of the DaprResiliencyCircuitBreakerPolicy definition allowing to specify interval. */
        interface WithInterval {
            /**
             * Specifies the interval property: Cyclical period of time used by the CB to clear its internal counts.
             * Valid values are of the form 15s, 2m, 1h30m, etc..
             *
             * @param interval Cyclical period of time used by the CB to clear its internal counts. Valid values are of
             *     the form 15s, 2m, 1h30m, etc.
             * @return the next definition stage.
             */
            WithCreate withInterval(String interval);
        }
        /** The stage of the DaprResiliencyCircuitBreakerPolicy definition allowing to specify timeout. */
        interface WithTimeout {
            /**
             * Specifies the timeout property: The period of the open state until the CB switches to half-open. Valid
             * values are of the form 15s, 2m, 1h30m, etc..
             *
             * @param timeout The period of the open state until the CB switches to half-open. Valid values are of the
             *     form 15s, 2m, 1h30m, etc.
             * @return the next definition stage.
             */
            WithCreate withTimeout(String timeout);
        }
        /** The stage of the DaprResiliencyCircuitBreakerPolicy definition allowing to specify trip. */
        interface WithTrip {
            /**
             * Specifies the trip property: A Common Expression Language (CEL) statement that is evaluated by the CB
             * When the statement evaluates to true, the CB trips and becomes open.
             *
             * @param trip A Common Expression Language (CEL) statement that is evaluated by the CB When the statement
             *     evaluates to true, the CB trips and becomes open.
             * @return the next definition stage.
             */
            WithCreate withTrip(String trip);
        }
        /** The stage of the DaprResiliencyCircuitBreakerPolicy definition allowing to specify circuitBreakerScope. */
        interface WithCircuitBreakerScope {
            /**
             * Specifies the circuitBreakerScope property: Specify whether circuit breaking state should be scoped to an
             * individual actor ID, all actors across the actor type, or both. Possible values include id, type, or
             * both.
             *
             * @param circuitBreakerScope Specify whether circuit breaking state should be scoped to an individual actor
             *     ID, all actors across the actor type, or both. Possible values include id, type, or both.
             * @return the next definition stage.
             */
            WithCreate withCircuitBreakerScope(String circuitBreakerScope);
        }
        /**
         * The stage of the DaprResiliencyCircuitBreakerPolicy definition allowing to specify circuitBreakerCacheSize.
         */
        interface WithCircuitBreakerCacheSize {
            /**
             * Specifies the circuitBreakerCacheSize property: Specify a cache size for the number of CBs to keep in
             * memory. The value should be larger than the expected number of active actor instances..
             *
             * @param circuitBreakerCacheSize Specify a cache size for the number of CBs to keep in memory. The value
             *     should be larger than the expected number of active actor instances.
             * @return the next definition stage.
             */
            WithCreate withCircuitBreakerCacheSize(Integer circuitBreakerCacheSize);
        }
    }
    /**
     * Begins update for the DaprResiliencyCircuitBreakerPolicy resource.
     *
     * @return the stage of resource update.
     */
    DaprResiliencyCircuitBreakerPolicy.Update update();

    /** The template for DaprResiliencyCircuitBreakerPolicy update. */
    interface Update
        extends UpdateStages.WithMaxRequests,
            UpdateStages.WithInterval,
            UpdateStages.WithTimeout,
            UpdateStages.WithTrip,
            UpdateStages.WithCircuitBreakerScope,
            UpdateStages.WithCircuitBreakerCacheSize {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        DaprResiliencyCircuitBreakerPolicy apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DaprResiliencyCircuitBreakerPolicy apply(Context context);
    }
    /** The DaprResiliencyCircuitBreakerPolicy update stages. */
    interface UpdateStages {
        /** The stage of the DaprResiliencyCircuitBreakerPolicy update allowing to specify maxRequests. */
        interface WithMaxRequests {
            /**
             * Specifies the maxRequests property: Maximum number of requests allowed to pass through.
             *
             * @param maxRequests Maximum number of requests allowed to pass through.
             * @return the next definition stage.
             */
            Update withMaxRequests(Integer maxRequests);
        }
        /** The stage of the DaprResiliencyCircuitBreakerPolicy update allowing to specify interval. */
        interface WithInterval {
            /**
             * Specifies the interval property: Cyclical period of time used by the CB to clear its internal counts.
             * Valid values are of the form 15s, 2m, 1h30m, etc..
             *
             * @param interval Cyclical period of time used by the CB to clear its internal counts. Valid values are of
             *     the form 15s, 2m, 1h30m, etc.
             * @return the next definition stage.
             */
            Update withInterval(String interval);
        }
        /** The stage of the DaprResiliencyCircuitBreakerPolicy update allowing to specify timeout. */
        interface WithTimeout {
            /**
             * Specifies the timeout property: The period of the open state until the CB switches to half-open. Valid
             * values are of the form 15s, 2m, 1h30m, etc..
             *
             * @param timeout The period of the open state until the CB switches to half-open. Valid values are of the
             *     form 15s, 2m, 1h30m, etc.
             * @return the next definition stage.
             */
            Update withTimeout(String timeout);
        }
        /** The stage of the DaprResiliencyCircuitBreakerPolicy update allowing to specify trip. */
        interface WithTrip {
            /**
             * Specifies the trip property: A Common Expression Language (CEL) statement that is evaluated by the CB
             * When the statement evaluates to true, the CB trips and becomes open.
             *
             * @param trip A Common Expression Language (CEL) statement that is evaluated by the CB When the statement
             *     evaluates to true, the CB trips and becomes open.
             * @return the next definition stage.
             */
            Update withTrip(String trip);
        }
        /** The stage of the DaprResiliencyCircuitBreakerPolicy update allowing to specify circuitBreakerScope. */
        interface WithCircuitBreakerScope {
            /**
             * Specifies the circuitBreakerScope property: Specify whether circuit breaking state should be scoped to an
             * individual actor ID, all actors across the actor type, or both. Possible values include id, type, or
             * both.
             *
             * @param circuitBreakerScope Specify whether circuit breaking state should be scoped to an individual actor
             *     ID, all actors across the actor type, or both. Possible values include id, type, or both.
             * @return the next definition stage.
             */
            Update withCircuitBreakerScope(String circuitBreakerScope);
        }
        /** The stage of the DaprResiliencyCircuitBreakerPolicy update allowing to specify circuitBreakerCacheSize. */
        interface WithCircuitBreakerCacheSize {
            /**
             * Specifies the circuitBreakerCacheSize property: Specify a cache size for the number of CBs to keep in
             * memory. The value should be larger than the expected number of active actor instances..
             *
             * @param circuitBreakerCacheSize Specify a cache size for the number of CBs to keep in memory. The value
             *     should be larger than the expected number of active actor instances.
             * @return the next definition stage.
             */
            Update withCircuitBreakerCacheSize(Integer circuitBreakerCacheSize);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    DaprResiliencyCircuitBreakerPolicy refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DaprResiliencyCircuitBreakerPolicy refresh(Context context);
}
