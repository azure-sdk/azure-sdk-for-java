// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcontainers.fluent.ConnectedEnvironmentsDaprResiliencyTimeoutPoliciesClient;
import com.azure.resourcemanager.appcontainers.fluent.models.DaprResiliencyTimeoutPolicyInner;
import com.azure.resourcemanager.appcontainers.models.ConnectedEnvironmentsDaprResiliencyTimeoutPolicies;
import com.azure.resourcemanager.appcontainers.models.DaprResiliencyTimeoutPolicy;

public final class ConnectedEnvironmentsDaprResiliencyTimeoutPoliciesImpl
    implements ConnectedEnvironmentsDaprResiliencyTimeoutPolicies {
    private static final ClientLogger LOGGER =
        new ClientLogger(ConnectedEnvironmentsDaprResiliencyTimeoutPoliciesImpl.class);

    private final ConnectedEnvironmentsDaprResiliencyTimeoutPoliciesClient innerClient;

    private final com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager;

    public ConnectedEnvironmentsDaprResiliencyTimeoutPoliciesImpl(
        ConnectedEnvironmentsDaprResiliencyTimeoutPoliciesClient innerClient,
        com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DaprResiliencyTimeoutPolicy> list(String resourceGroupName, String connectedEnvironmentName) {
        PagedIterable<DaprResiliencyTimeoutPolicyInner> inner =
            this.serviceClient().list(resourceGroupName, connectedEnvironmentName);
        return Utils.mapPage(inner, inner1 -> new DaprResiliencyTimeoutPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<DaprResiliencyTimeoutPolicy> list(
        String resourceGroupName, String connectedEnvironmentName, Context context) {
        PagedIterable<DaprResiliencyTimeoutPolicyInner> inner =
            this.serviceClient().list(resourceGroupName, connectedEnvironmentName, context);
        return Utils.mapPage(inner, inner1 -> new DaprResiliencyTimeoutPolicyImpl(inner1, this.manager()));
    }

    public Response<DaprResiliencyTimeoutPolicy> getWithResponse(
        String resourceGroupName, String connectedEnvironmentName, String policyName, Context context) {
        Response<DaprResiliencyTimeoutPolicyInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, connectedEnvironmentName, policyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DaprResiliencyTimeoutPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DaprResiliencyTimeoutPolicy get(
        String resourceGroupName, String connectedEnvironmentName, String policyName) {
        DaprResiliencyTimeoutPolicyInner inner =
            this.serviceClient().get(resourceGroupName, connectedEnvironmentName, policyName);
        if (inner != null) {
            return new DaprResiliencyTimeoutPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String connectedEnvironmentName, String policyName, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, connectedEnvironmentName, policyName, context);
    }

    public void delete(String resourceGroupName, String connectedEnvironmentName, String policyName) {
        this.serviceClient().delete(resourceGroupName, connectedEnvironmentName, policyName);
    }

    public DaprResiliencyTimeoutPolicy getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectedEnvironmentName = Utils.getValueFromIdByName(id, "connectedEnvironments");
        if (connectedEnvironmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectedEnvironments'.",
                                id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "daprResiliencyTimeoutPolicies");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'daprResiliencyTimeoutPolicies'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, connectedEnvironmentName, policyName, Context.NONE).getValue();
    }

    public Response<DaprResiliencyTimeoutPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectedEnvironmentName = Utils.getValueFromIdByName(id, "connectedEnvironments");
        if (connectedEnvironmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectedEnvironments'.",
                                id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "daprResiliencyTimeoutPolicies");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'daprResiliencyTimeoutPolicies'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, connectedEnvironmentName, policyName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectedEnvironmentName = Utils.getValueFromIdByName(id, "connectedEnvironments");
        if (connectedEnvironmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectedEnvironments'.",
                                id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "daprResiliencyTimeoutPolicies");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'daprResiliencyTimeoutPolicies'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, connectedEnvironmentName, policyName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectedEnvironmentName = Utils.getValueFromIdByName(id, "connectedEnvironments");
        if (connectedEnvironmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectedEnvironments'.",
                                id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "daprResiliencyTimeoutPolicies");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'daprResiliencyTimeoutPolicies'.",
                                id)));
        }
        return this.deleteWithResponse(resourceGroupName, connectedEnvironmentName, policyName, context);
    }

    private ConnectedEnvironmentsDaprResiliencyTimeoutPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager() {
        return this.serviceManager;
    }

    public DaprResiliencyTimeoutPolicyImpl define(String name) {
        return new DaprResiliencyTimeoutPolicyImpl(name, this.manager());
    }
}
