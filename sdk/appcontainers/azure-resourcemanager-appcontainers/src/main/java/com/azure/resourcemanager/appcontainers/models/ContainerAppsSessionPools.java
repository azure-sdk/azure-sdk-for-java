// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of ContainerAppsSessionPools. */
public interface ContainerAppsSessionPools {
    /**
     * Get the Session Pools in a given subscription.
     *
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Session Pools in a given subscription as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SessionPool> list();

    /**
     * Get the Session Pools in a given subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Session Pools in a given subscription as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SessionPool> list(Context context);

    /**
     * Get the SessionPools in a given resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SessionPools in a given resource group as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SessionPool> listByResourceGroup(String resourceGroupName);

    /**
     * Get the SessionPools in a given resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SessionPools in a given resource group as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SessionPool> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get the properties of a Session Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a Session Pool along with {@link Response}.
     */
    Response<SessionPool> getByResourceGroupWithResponse(
        String resourceGroupName, String sessionPoolName, Context context);

    /**
     * Get the properties of a Session Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a Session Pool.
     */
    SessionPool getByResourceGroup(String resourceGroupName, String sessionPoolName);

    /**
     * Delete a Session Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String sessionPoolName, Context context);

    /**
     * Delete a Session Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sessionPoolName Name of the Session Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String sessionPoolName);

    /**
     * Get the properties of a Session Pool.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a Session Pool along with {@link Response}.
     */
    SessionPool getById(String id);

    /**
     * Get the properties of a Session Pool.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a Session Pool along with {@link Response}.
     */
    Response<SessionPool> getByIdWithResponse(String id, Context context);

    /**
     * Delete a Session Pool.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a Session Pool.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appcontainers.models.DefaultErrorResponseErrorException thrown if the request
     *     is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new SessionPool resource.
     *
     * @param name resource name.
     * @return the first stage of the new SessionPool definition.
     */
    SessionPool.DefinitionStages.Blank define(String name);
}
