// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Model representing a pre-build step.
 */
@Fluent
public final class PreBuildStepAutoGenerated {
    /*
     * Description of the pre-build step.
     */
    @JsonProperty(value = "description", access = JsonProperty.Access.WRITE_ONLY)
    private String description;

    /*
     * List of custom commands to run.
     */
    @JsonProperty(value = "scripts", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> scripts;

    /*
     * Http get request to send before the build.
     */
    @JsonProperty(value = "httpGet")
    private HttpGetAutoGenerated httpGet;

    /**
     * Creates an instance of PreBuildStepAutoGenerated class.
     */
    public PreBuildStepAutoGenerated() {
    }

    /**
     * Get the description property: Description of the pre-build step.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the scripts property: List of custom commands to run.
     * 
     * @return the scripts value.
     */
    public List<String> scripts() {
        return this.scripts;
    }

    /**
     * Get the httpGet property: Http get request to send before the build.
     * 
     * @return the httpGet value.
     */
    public HttpGetAutoGenerated httpGet() {
        return this.httpGet;
    }

    /**
     * Set the httpGet property: Http get request to send before the build.
     * 
     * @param httpGet the httpGet value to set.
     * @return the PreBuildStepAutoGenerated object itself.
     */
    public PreBuildStepAutoGenerated withHttpGet(HttpGetAutoGenerated httpGet) {
        this.httpGet = httpGet;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (httpGet() != null) {
            httpGet().validate();
        }
    }
}
