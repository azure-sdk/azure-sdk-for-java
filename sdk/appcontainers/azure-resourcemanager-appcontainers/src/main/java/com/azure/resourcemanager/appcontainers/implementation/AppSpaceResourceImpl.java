// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appcontainers.fluent.models.AppSpaceResourceInner;
import com.azure.resourcemanager.appcontainers.models.AppSpaceResource;
import com.azure.resourcemanager.appcontainers.models.DeploymentInformation;
import com.azure.resourcemanager.appcontainers.models.ExtendedLocation;
import com.azure.resourcemanager.appcontainers.models.RepositoryInformation;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class AppSpaceResourceImpl
    implements AppSpaceResource, AppSpaceResource.Definition, AppSpaceResource.Update {
    private AppSpaceResourceInner innerObject;

    private final com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceId() {
        return this.innerModel().resourceId();
    }

    public String friendlyName() {
        return this.innerModel().friendlyName();
    }

    public String resourceLocation() {
        return this.innerModel().resourceLocation();
    }

    public RepositoryInformation repo() {
        return this.innerModel().repo();
    }

    public DeploymentInformation deployment() {
        return this.innerModel().deployment();
    }

    public Boolean isFavorite() {
        return this.innerModel().isFavorite();
    }

    public Object metadata() {
        return this.innerModel().metadata();
    }

    public List<String> dependencies() {
        List<String> inner = this.innerModel().dependencies();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public AppSpaceResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String appSpaceName;

    private String spaceResourceName;

    public AppSpaceResourceImpl withExistingAppSpace(String resourceGroupName, String appSpaceName) {
        this.resourceGroupName = resourceGroupName;
        this.appSpaceName = appSpaceName;
        return this;
    }

    public AppSpaceResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppSpaceResources()
                .createOrUpdateWithResponse(
                    resourceGroupName, appSpaceName, spaceResourceName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public AppSpaceResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppSpaceResources()
                .createOrUpdateWithResponse(
                    resourceGroupName, appSpaceName, spaceResourceName, this.innerModel(), context)
                .getValue();
        return this;
    }

    AppSpaceResourceImpl(String name, com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerObject = new AppSpaceResourceInner();
        this.serviceManager = serviceManager;
        this.spaceResourceName = name;
    }

    public AppSpaceResourceImpl update() {
        return this;
    }

    public AppSpaceResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppSpaceResources()
                .updateWithResponse(resourceGroupName, appSpaceName, spaceResourceName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public AppSpaceResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppSpaceResources()
                .updateWithResponse(resourceGroupName, appSpaceName, spaceResourceName, this.innerModel(), context)
                .getValue();
        return this;
    }

    AppSpaceResourceImpl(
        AppSpaceResourceInner innerObject,
        com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.appSpaceName = Utils.getValueFromIdByName(innerObject.id(), "appSpaces");
        this.spaceResourceName = Utils.getValueFromIdByName(innerObject.id(), "spaceResources");
    }

    public AppSpaceResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppSpaceResources()
                .getWithResponse(resourceGroupName, appSpaceName, spaceResourceName, Context.NONE)
                .getValue();
        return this;
    }

    public AppSpaceResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppSpaceResources()
                .getWithResponse(resourceGroupName, appSpaceName, spaceResourceName, context)
                .getValue();
        return this;
    }

    public AppSpaceResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public AppSpaceResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public AppSpaceResourceImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public AppSpaceResourceImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public AppSpaceResourceImpl withResourceId(String resourceId) {
        this.innerModel().withResourceId(resourceId);
        return this;
    }

    public AppSpaceResourceImpl withFriendlyName(String friendlyName) {
        this.innerModel().withFriendlyName(friendlyName);
        return this;
    }

    public AppSpaceResourceImpl withResourceLocation(String resourceLocation) {
        this.innerModel().withResourceLocation(resourceLocation);
        return this;
    }

    public AppSpaceResourceImpl withRepo(RepositoryInformation repo) {
        this.innerModel().withRepo(repo);
        return this;
    }

    public AppSpaceResourceImpl withDeployment(DeploymentInformation deployment) {
        this.innerModel().withDeployment(deployment);
        return this;
    }

    public AppSpaceResourceImpl withIsFavorite(Boolean isFavorite) {
        this.innerModel().withIsFavorite(isFavorite);
        return this;
    }

    public AppSpaceResourceImpl withMetadata(Object metadata) {
        this.innerModel().withMetadata(metadata);
        return this;
    }

    public AppSpaceResourceImpl withDependencies(List<String> dependencies) {
        this.innerModel().withDependencies(dependencies);
        return this;
    }
}
