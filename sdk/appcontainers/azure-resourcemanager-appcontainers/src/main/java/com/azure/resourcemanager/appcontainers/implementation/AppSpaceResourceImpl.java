// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appcontainers.fluent.models.AppSpaceResourceInner;
import com.azure.resourcemanager.appcontainers.models.AppSpaceResource;
import com.azure.resourcemanager.appcontainers.models.AppSpaceResourcePatch;
import com.azure.resourcemanager.appcontainers.models.AppSpaceResourceProperties;
import java.util.Collections;
import java.util.Map;

public final class AppSpaceResourceImpl
    implements AppSpaceResource, AppSpaceResource.Definition, AppSpaceResource.Update {
    private AppSpaceResourceInner innerObject;

    private final com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public AppSpaceResourceProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public AppSpaceResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String appSpaceName;

    private String spaceResourceName;

    private AppSpaceResourcePatch updateSpaceResourceEnvelope;

    public AppSpaceResourceImpl withExistingSpace(String resourceGroupName, String appSpaceName) {
        this.resourceGroupName = resourceGroupName;
        this.appSpaceName = appSpaceName;
        return this;
    }

    public AppSpaceResource create() {
        this.innerObject
            = serviceManager.serviceClient().getAppSpaceResources().createOrUpdateWithResponse(resourceGroupName,
                appSpaceName, spaceResourceName, this.innerModel(), Context.NONE).getValue();
        return this;
    }

    public AppSpaceResource create(Context context) {
        this.innerObject = serviceManager.serviceClient().getAppSpaceResources()
            .createOrUpdateWithResponse(resourceGroupName, appSpaceName, spaceResourceName, this.innerModel(), context)
            .getValue();
        return this;
    }

    AppSpaceResourceImpl(String name, com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerObject = new AppSpaceResourceInner();
        this.serviceManager = serviceManager;
        this.spaceResourceName = name;
    }

    public AppSpaceResourceImpl update() {
        this.updateSpaceResourceEnvelope = new AppSpaceResourcePatch();
        return this;
    }

    public AppSpaceResource apply() {
        this.innerObject = serviceManager.serviceClient().getAppSpaceResources().updateWithResponse(resourceGroupName,
            appSpaceName, spaceResourceName, updateSpaceResourceEnvelope, Context.NONE).getValue();
        return this;
    }

    public AppSpaceResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getAppSpaceResources().updateWithResponse(resourceGroupName,
            appSpaceName, spaceResourceName, updateSpaceResourceEnvelope, context).getValue();
        return this;
    }

    AppSpaceResourceImpl(AppSpaceResourceInner innerObject,
        com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.appSpaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "spaces");
        this.spaceResourceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "spaceResources");
    }

    public AppSpaceResource refresh() {
        this.innerObject = serviceManager.serviceClient().getAppSpaceResources()
            .getWithResponse(resourceGroupName, appSpaceName, spaceResourceName, Context.NONE).getValue();
        return this;
    }

    public AppSpaceResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getAppSpaceResources()
            .getWithResponse(resourceGroupName, appSpaceName, spaceResourceName, context).getValue();
        return this;
    }

    public AppSpaceResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public AppSpaceResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public AppSpaceResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateSpaceResourceEnvelope.withTags(tags);
            return this;
        }
    }

    public AppSpaceResourceImpl withProperties(AppSpaceResourceProperties properties) {
        if (isInCreateMode()) {
            this.innerModel().withProperties(properties);
            return this;
        } else {
            this.updateSpaceResourceEnvelope.withProperties(properties);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
