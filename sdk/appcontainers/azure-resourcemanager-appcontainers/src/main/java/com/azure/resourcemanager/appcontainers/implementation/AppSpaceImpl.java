// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appcontainers.fluent.models.AppSpaceInner;
import com.azure.resourcemanager.appcontainers.models.AppSpace;
import com.azure.resourcemanager.appcontainers.models.AppSpacePatch;
import com.azure.resourcemanager.appcontainers.models.AppSpaceProperties;
import java.util.Collections;
import java.util.Map;

public final class AppSpaceImpl implements AppSpace, AppSpace.Definition, AppSpace.Update {
    private AppSpaceInner innerObject;

    private final com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public AppSpaceProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public AppSpaceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String appSpaceName;

    private AppSpacePatch updateAppSpaceEnvelope;

    public AppSpaceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public AppSpace create() {
        this.innerObject = serviceManager.serviceClient().getAppSpaces()
            .createOrUpdateWithResponse(resourceGroupName, appSpaceName, this.innerModel(), Context.NONE).getValue();
        return this;
    }

    public AppSpace create(Context context) {
        this.innerObject = serviceManager.serviceClient().getAppSpaces()
            .createOrUpdateWithResponse(resourceGroupName, appSpaceName, this.innerModel(), context).getValue();
        return this;
    }

    AppSpaceImpl(String name, com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerObject = new AppSpaceInner();
        this.serviceManager = serviceManager;
        this.appSpaceName = name;
    }

    public AppSpaceImpl update() {
        this.updateAppSpaceEnvelope = new AppSpacePatch();
        return this;
    }

    public AppSpace apply() {
        this.innerObject = serviceManager.serviceClient().getAppSpaces()
            .updateWithResponse(resourceGroupName, appSpaceName, updateAppSpaceEnvelope, Context.NONE).getValue();
        return this;
    }

    public AppSpace apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getAppSpaces()
            .updateWithResponse(resourceGroupName, appSpaceName, updateAppSpaceEnvelope, context).getValue();
        return this;
    }

    AppSpaceImpl(AppSpaceInner innerObject,
        com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.appSpaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "spaces");
    }

    public AppSpace refresh() {
        this.innerObject = serviceManager.serviceClient().getAppSpaces()
            .getByResourceGroupWithResponse(resourceGroupName, appSpaceName, Context.NONE).getValue();
        return this;
    }

    public AppSpace refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getAppSpaces()
            .getByResourceGroupWithResponse(resourceGroupName, appSpaceName, context).getValue();
        return this;
    }

    public AppSpaceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public AppSpaceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public AppSpaceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateAppSpaceEnvelope.withTags(tags);
            return this;
        }
    }

    public AppSpaceImpl withProperties(AppSpaceProperties properties) {
        if (isInCreateMode()) {
            this.innerModel().withProperties(properties);
            return this;
        } else {
            this.updateAppSpaceEnvelope.withProperties(properties);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
