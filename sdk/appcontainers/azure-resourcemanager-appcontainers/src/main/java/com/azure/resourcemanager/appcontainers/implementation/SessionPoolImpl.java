// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appcontainers.fluent.models.SessionPoolInner;
import com.azure.resourcemanager.appcontainers.models.ContainerType;
import com.azure.resourcemanager.appcontainers.models.CustomContainerConfiguration;
import com.azure.resourcemanager.appcontainers.models.DynamicPoolConfiguration;
import com.azure.resourcemanager.appcontainers.models.PoolManagementType;
import com.azure.resourcemanager.appcontainers.models.SecretAutoGenerated;
import com.azure.resourcemanager.appcontainers.models.SessionPool;
import com.azure.resourcemanager.appcontainers.models.SessionPoolPatchProperties;
import com.azure.resourcemanager.appcontainers.models.SessionPoolProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class SessionPoolImpl implements SessionPool, SessionPool.Definition, SessionPool.Update {
    private SessionPoolInner innerObject;

    private final com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String environmentId() {
        return this.innerModel().environmentId();
    }

    public Integer maxConcurrentSessions() {
        return this.innerModel().maxConcurrentSessions();
    }

    public ContainerType containerType() {
        return this.innerModel().containerType();
    }

    public PoolManagementType poolManagementType() {
        return this.innerModel().poolManagementType();
    }

    public List<SecretAutoGenerated> secrets() {
        List<SecretAutoGenerated> inner = this.innerModel().secrets();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public DynamicPoolConfiguration dynamicPoolConfiguration() {
        return this.innerModel().dynamicPoolConfiguration();
    }

    public CustomContainerConfiguration customContainerConfiguration() {
        return this.innerModel().customContainerConfiguration();
    }

    public String poolManagementEndpoint() {
        return this.innerModel().poolManagementEndpoint();
    }

    public SessionPoolProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SessionPoolInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appcontainers.ContainerAppsApiManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String sessionPoolName;

    private SessionPoolPatchProperties updateSessionPoolEnvelope;

    public SessionPoolImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public SessionPool create() {
        this.innerObject = serviceManager.serviceClient().getContainerAppsSessionPools()
            .createOrUpdate(resourceGroupName, sessionPoolName, this.innerModel(), Context.NONE);
        return this;
    }

    public SessionPool create(Context context) {
        this.innerObject = serviceManager.serviceClient().getContainerAppsSessionPools()
            .createOrUpdate(resourceGroupName, sessionPoolName, this.innerModel(), context);
        return this;
    }

    SessionPoolImpl(String name, com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerObject = new SessionPoolInner();
        this.serviceManager = serviceManager;
        this.sessionPoolName = name;
    }

    public SessionPoolImpl update() {
        this.updateSessionPoolEnvelope = new SessionPoolPatchProperties();
        return this;
    }

    public SessionPool apply() {
        this.innerObject = serviceManager.serviceClient().getContainerAppsSessionPools().update(resourceGroupName,
            sessionPoolName, updateSessionPoolEnvelope, Context.NONE);
        return this;
    }

    public SessionPool apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getContainerAppsSessionPools().update(resourceGroupName,
            sessionPoolName, updateSessionPoolEnvelope, context);
        return this;
    }

    SessionPoolImpl(SessionPoolInner innerObject,
        com.azure.resourcemanager.appcontainers.ContainerAppsApiManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.sessionPoolName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "sessionpools");
    }

    public SessionPool refresh() {
        this.innerObject = serviceManager.serviceClient().getContainerAppsSessionPools()
            .getByResourceGroupWithResponse(resourceGroupName, sessionPoolName, Context.NONE).getValue();
        return this;
    }

    public SessionPool refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getContainerAppsSessionPools()
            .getByResourceGroupWithResponse(resourceGroupName, sessionPoolName, context).getValue();
        return this;
    }

    public SessionPoolImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SessionPoolImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SessionPoolImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public SessionPoolImpl withEnvironmentId(String environmentId) {
        this.innerModel().withEnvironmentId(environmentId);
        return this;
    }

    public SessionPoolImpl withMaxConcurrentSessions(Integer maxConcurrentSessions) {
        if (isInCreateMode()) {
            this.innerModel().withMaxConcurrentSessions(maxConcurrentSessions);
            return this;
        } else {
            this.updateSessionPoolEnvelope.withMaxConcurrentSessions(maxConcurrentSessions);
            return this;
        }
    }

    public SessionPoolImpl withContainerType(ContainerType containerType) {
        this.innerModel().withContainerType(containerType);
        return this;
    }

    public SessionPoolImpl withPoolManagementType(PoolManagementType poolManagementType) {
        this.innerModel().withPoolManagementType(poolManagementType);
        return this;
    }

    public SessionPoolImpl withSecrets(List<SecretAutoGenerated> secrets) {
        if (isInCreateMode()) {
            this.innerModel().withSecrets(secrets);
            return this;
        } else {
            this.updateSessionPoolEnvelope.withSecrets(secrets);
            return this;
        }
    }

    public SessionPoolImpl withDynamicPoolConfiguration(DynamicPoolConfiguration dynamicPoolConfiguration) {
        if (isInCreateMode()) {
            this.innerModel().withDynamicPoolConfiguration(dynamicPoolConfiguration);
            return this;
        } else {
            this.updateSessionPoolEnvelope.withDynamicPoolConfiguration(dynamicPoolConfiguration);
            return this;
        }
    }

    public SessionPoolImpl withCustomContainerConfiguration(CustomContainerConfiguration customContainerConfiguration) {
        if (isInCreateMode()) {
            this.innerModel().withCustomContainerConfiguration(customContainerConfiguration);
            return this;
        } else {
            this.updateSessionPoolEnvelope.withCustomContainerConfiguration(customContainerConfiguration);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
