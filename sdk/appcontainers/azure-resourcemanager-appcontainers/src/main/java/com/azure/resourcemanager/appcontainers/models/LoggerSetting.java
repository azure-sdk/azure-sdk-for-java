// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Logger settings for java workloads.
 */
@Fluent
public final class LoggerSetting {
    /*
     * Logger name.
     */
    @JsonProperty(value = "logger", required = true)
    private String logger;

    /*
     * The specified logger's log level.
     */
    @JsonProperty(value = "level", required = true)
    private Level level;

    /**
     * Creates an instance of LoggerSetting class.
     */
    public LoggerSetting() {
    }

    /**
     * Get the logger property: Logger name.
     * 
     * @return the logger value.
     */
    public String logger() {
        return this.logger;
    }

    /**
     * Set the logger property: Logger name.
     * 
     * @param logger the logger value to set.
     * @return the LoggerSetting object itself.
     */
    public LoggerSetting withLogger(String logger) {
        this.logger = logger;
        return this;
    }

    /**
     * Get the level property: The specified logger's log level.
     * 
     * @return the level value.
     */
    public Level level() {
        return this.level;
    }

    /**
     * Set the level property: The specified logger's log level.
     * 
     * @param level the level value to set.
     * @return the LoggerSetting object itself.
     */
    public LoggerSetting withLevel(Level level) {
        this.level = level;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (logger() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property logger in model LoggerSetting"));
        }
        if (level() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property level in model LoggerSetting"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LoggerSetting.class);
}
