// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcontainers.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.appcontainers.models.Secret;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** SessionPool resource specific patchable properties. */
@Fluent
public final class PatchPropertiesProperties {
    /*
     * The max count of sessions at the same time.
     */
    @JsonProperty(value = "maxConcurrentSessions")
    private Integer maxConcurrentSessions;

    /*
     * Collection of secrets used by a Session Pool
     */
    @JsonProperty(value = "secrets")
    private List<Secret> secrets;

    /** Creates an instance of PatchPropertiesProperties class. */
    public PatchPropertiesProperties() {
    }

    /**
     * Get the maxConcurrentSessions property: The max count of sessions at the same time.
     *
     * @return the maxConcurrentSessions value.
     */
    public Integer maxConcurrentSessions() {
        return this.maxConcurrentSessions;
    }

    /**
     * Set the maxConcurrentSessions property: The max count of sessions at the same time.
     *
     * @param maxConcurrentSessions the maxConcurrentSessions value to set.
     * @return the PatchPropertiesProperties object itself.
     */
    public PatchPropertiesProperties withMaxConcurrentSessions(Integer maxConcurrentSessions) {
        this.maxConcurrentSessions = maxConcurrentSessions;
        return this;
    }

    /**
     * Get the secrets property: Collection of secrets used by a Session Pool.
     *
     * @return the secrets value.
     */
    public List<Secret> secrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: Collection of secrets used by a Session Pool.
     *
     * @param secrets the secrets value to set.
     * @return the PatchPropertiesProperties object itself.
     */
    public PatchPropertiesProperties withSecrets(List<Secret> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
    }
}
