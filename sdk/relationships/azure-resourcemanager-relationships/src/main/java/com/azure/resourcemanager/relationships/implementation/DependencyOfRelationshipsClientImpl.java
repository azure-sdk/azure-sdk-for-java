// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.relationships.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.relationships.fluent.DependencyOfRelationshipsClient;
import com.azure.resourcemanager.relationships.fluent.models.DependencyOfRelationshipInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DependencyOfRelationshipsClient.
 */
public final class DependencyOfRelationshipsClientImpl implements DependencyOfRelationshipsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DependencyOfRelationshipsService service;

    /**
     * The service client containing this operation class.
     */
    private final MicrosoftRelationshipsManagementServiceImpl client;

    /**
     * Initializes an instance of DependencyOfRelationshipsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DependencyOfRelationshipsClientImpl(MicrosoftRelationshipsManagementServiceImpl client) {
        this.service = RestProxy.create(DependencyOfRelationshipsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftRelationshipsManagementServiceDependencyOfRelationships to
     * be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftRelationshi")
    public interface DependencyOfRelationshipsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.Relationships/dependencyOf/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DependencyOfRelationshipInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/{resourceUri}/providers/Microsoft.Relationships/dependencyOf/{name}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri, @PathParam("name") String name,
            @BodyParam("application/json") DependencyOfRelationshipInner resource, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/{resourceUri}/providers/Microsoft.Relationships/dependencyOf/{name}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DependencyOfRelationship along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DependencyOfRelationshipInner>> getWithResponseAsync(String resourceUri, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                name, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DependencyOfRelationship along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DependencyOfRelationshipInner>> getWithResponseAsync(String resourceUri, String name,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, name, accept, context);
    }

    /**
     * Get a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DependencyOfRelationship on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DependencyOfRelationshipInner> getAsync(String resourceUri, String name) {
        return getWithResponseAsync(resourceUri, name).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DependencyOfRelationship along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DependencyOfRelationshipInner> getWithResponse(String resourceUri, String name, Context context) {
        return getWithResponseAsync(resourceUri, name, context).block();
    }

    /**
     * Get a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DependencyOfRelationship.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DependencyOfRelationshipInner get(String resourceUri, String name) {
        return getWithResponse(resourceUri, name, Context.NONE).getValue();
    }

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a dependencyOf relationship resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceUri, String name,
        DependencyOfRelationshipInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, name, resource, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a dependencyOf relationship resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceUri, String name,
        DependencyOfRelationshipInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, name,
            resource, accept, context);
    }

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of defines a dependencyOf relationship resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DependencyOfRelationshipInner>, DependencyOfRelationshipInner>
        beginCreateOrUpdateAsync(String resourceUri, String name, DependencyOfRelationshipInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceUri, name, resource);
        return this.client.<DependencyOfRelationshipInner, DependencyOfRelationshipInner>getLroResult(mono,
            this.client.getHttpPipeline(), DependencyOfRelationshipInner.class, DependencyOfRelationshipInner.class,
            this.client.getContext());
    }

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of defines a dependencyOf relationship resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DependencyOfRelationshipInner>, DependencyOfRelationshipInner>
        beginCreateOrUpdateAsync(String resourceUri, String name, DependencyOfRelationshipInner resource,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceUri, name, resource, context);
        return this.client.<DependencyOfRelationshipInner, DependencyOfRelationshipInner>getLroResult(mono,
            this.client.getHttpPipeline(), DependencyOfRelationshipInner.class, DependencyOfRelationshipInner.class,
            context);
    }

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines a dependencyOf relationship resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DependencyOfRelationshipInner>, DependencyOfRelationshipInner>
        beginCreateOrUpdate(String resourceUri, String name, DependencyOfRelationshipInner resource) {
        return this.beginCreateOrUpdateAsync(resourceUri, name, resource).getSyncPoller();
    }

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines a dependencyOf relationship resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DependencyOfRelationshipInner>, DependencyOfRelationshipInner>
        beginCreateOrUpdate(String resourceUri, String name, DependencyOfRelationshipInner resource, Context context) {
        return this.beginCreateOrUpdateAsync(resourceUri, name, resource, context).getSyncPoller();
    }

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a dependencyOf relationship resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DependencyOfRelationshipInner> createOrUpdateAsync(String resourceUri, String name,
        DependencyOfRelationshipInner resource) {
        return beginCreateOrUpdateAsync(resourceUri, name, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a dependencyOf relationship resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DependencyOfRelationshipInner> createOrUpdateAsync(String resourceUri, String name,
        DependencyOfRelationshipInner resource, Context context) {
        return beginCreateOrUpdateAsync(resourceUri, name, resource, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a dependencyOf relationship resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DependencyOfRelationshipInner createOrUpdate(String resourceUri, String name,
        DependencyOfRelationshipInner resource) {
        return createOrUpdateAsync(resourceUri, name, resource).block();
    }

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a dependencyOf relationship resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DependencyOfRelationshipInner createOrUpdate(String resourceUri, String name,
        DependencyOfRelationshipInner resource, Context context) {
        return createOrUpdateAsync(resourceUri, name, resource, context).block();
    }

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceUri, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                name, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceUri, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, name, accept,
            context);
    }

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceUri, String name) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceUri, name);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceUri, String name, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceUri, name, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String name) {
        return this.beginDeleteAsync(resourceUri, name).getSyncPoller();
    }

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String name, Context context) {
        return this.beginDeleteAsync(resourceUri, name, context).getSyncPoller();
    }

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceUri, String name) {
        return beginDeleteAsync(resourceUri, name).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceUri, String name, Context context) {
        return beginDeleteAsync(resourceUri, name, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri, String name) {
        deleteAsync(resourceUri, name).block();
    }

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri, String name, Context context) {
        deleteAsync(resourceUri, name, context).block();
    }
}
