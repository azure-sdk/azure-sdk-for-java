// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.relationships.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Provides information about the relationship properties.
 */
@Immutable
public final class RelationshipMetadata implements JsonSerializable<RelationshipMetadata> {
    /*
     * The type of the relationship source resource.
     */
    private String sourceType;

    /*
     * The type of the relationship target resource.
     */
    private String targetType;

    /**
     * Creates an instance of RelationshipMetadata class.
     */
    public RelationshipMetadata() {
    }

    /**
     * Get the sourceType property: The type of the relationship source resource.
     * 
     * @return the sourceType value.
     */
    public String sourceType() {
        return this.sourceType;
    }

    /**
     * Get the targetType property: The type of the relationship target resource.
     * 
     * @return the targetType value.
     */
    public String targetType() {
        return this.targetType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RelationshipMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RelationshipMetadata if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RelationshipMetadata.
     */
    public static RelationshipMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RelationshipMetadata deserializedRelationshipMetadata = new RelationshipMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceType".equals(fieldName)) {
                    deserializedRelationshipMetadata.sourceType = reader.getString();
                } else if ("targetType".equals(fieldName)) {
                    deserializedRelationshipMetadata.targetType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRelationshipMetadata;
        });
    }
}
