// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.relationships.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.relationships.fluent.models.DependencyOfRelationshipInner;

/**
 * An instance of this class provides access to all the operations defined in DependencyOfRelationshipsClient.
 */
public interface DependencyOfRelationshipsClient {
    /**
     * Get a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DependencyOfRelationship along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DependencyOfRelationshipInner> getWithResponse(String resourceUri, String name, Context context);

    /**
     * Get a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DependencyOfRelationship.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DependencyOfRelationshipInner get(String resourceUri, String name);

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines a dependencyOf relationship resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DependencyOfRelationshipInner>, DependencyOfRelationshipInner>
        beginCreateOrUpdate(String resourceUri, String name, DependencyOfRelationshipInner resource);

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines a dependencyOf relationship resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DependencyOfRelationshipInner>, DependencyOfRelationshipInner>
        beginCreateOrUpdate(String resourceUri, String name, DependencyOfRelationshipInner resource, Context context);

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a dependencyOf relationship resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DependencyOfRelationshipInner createOrUpdate(String resourceUri, String name,
        DependencyOfRelationshipInner resource);

    /**
     * Create a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines a dependencyOf relationship resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DependencyOfRelationshipInner createOrUpdate(String resourceUri, String name,
        DependencyOfRelationshipInner resource, Context context);

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String name);

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String name, Context context);

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, String name);

    /**
     * Delete a DependencyOfRelationship.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param name Name of dependencyOf relationship.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, String name, Context context);
}
