// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.relationships.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.relationships.fluent.DependencyOfRelationshipsClient;
import com.azure.resourcemanager.relationships.fluent.models.DependencyOfRelationshipInner;
import com.azure.resourcemanager.relationships.models.DependencyOfRelationship;
import com.azure.resourcemanager.relationships.models.DependencyOfRelationships;

public final class DependencyOfRelationshipsImpl implements DependencyOfRelationships {
    private static final ClientLogger LOGGER = new ClientLogger(DependencyOfRelationshipsImpl.class);

    private final DependencyOfRelationshipsClient innerClient;

    private final com.azure.resourcemanager.relationships.RelationshipsManager serviceManager;

    public DependencyOfRelationshipsImpl(DependencyOfRelationshipsClient innerClient,
        com.azure.resourcemanager.relationships.RelationshipsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DependencyOfRelationship> getWithResponse(String resourceUri, String name, Context context) {
        Response<DependencyOfRelationshipInner> inner
            = this.serviceClient().getWithResponse(resourceUri, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DependencyOfRelationshipImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DependencyOfRelationship get(String resourceUri, String name) {
        DependencyOfRelationshipInner inner = this.serviceClient().get(resourceUri, name);
        if (inner != null) {
            return new DependencyOfRelationshipImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceUri, String name) {
        this.serviceClient().delete(resourceUri, name);
    }

    public void delete(String resourceUri, String name, Context context) {
        this.serviceClient().delete(resourceUri, name, context);
    }

    public DependencyOfRelationship getById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Relationships/dependencyOf/{name}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Relationships/dependencyOf/{name}", "name");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dependencyOf'.", id)));
        }
        return this.getWithResponse(resourceUri, name, Context.NONE).getValue();
    }

    public Response<DependencyOfRelationship> getByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Relationships/dependencyOf/{name}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Relationships/dependencyOf/{name}", "name");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dependencyOf'.", id)));
        }
        return this.getWithResponse(resourceUri, name, context);
    }

    public void deleteById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Relationships/dependencyOf/{name}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Relationships/dependencyOf/{name}", "name");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dependencyOf'.", id)));
        }
        this.delete(resourceUri, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Relationships/dependencyOf/{name}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Relationships/dependencyOf/{name}", "name");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dependencyOf'.", id)));
        }
        this.delete(resourceUri, name, context);
    }

    private DependencyOfRelationshipsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.relationships.RelationshipsManager manager() {
        return this.serviceManager;
    }

    public DependencyOfRelationshipImpl define(String name) {
        return new DependencyOfRelationshipImpl(name, this.manager());
    }
}
