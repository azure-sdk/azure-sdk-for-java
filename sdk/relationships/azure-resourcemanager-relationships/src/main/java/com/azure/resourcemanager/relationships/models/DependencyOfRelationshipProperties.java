// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.relationships.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * dependencyOf relationship properties.
 */
@Fluent
public final class DependencyOfRelationshipProperties implements JsonSerializable<DependencyOfRelationshipProperties> {
    /*
     * The relationship source resource id.
     */
    private String sourceId;

    /*
     * The relationship target resource id.
     */
    private String targetId;

    /*
     * The relationship target tenant id.
     */
    private String targetTenant;

    /*
     * Information about the origin of the relationship.
     */
    private RelationshipOriginInformation originInformation;

    /*
     * Metadata about the relationship.
     */
    private RelationshipMetadata metadata;

    /*
     * The provisioning state of the relationship.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DependencyOfRelationshipProperties class.
     */
    public DependencyOfRelationshipProperties() {
    }

    /**
     * Get the sourceId property: The relationship source resource id.
     * 
     * @return the sourceId value.
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Get the targetId property: The relationship target resource id.
     * 
     * @return the targetId value.
     */
    public String targetId() {
        return this.targetId;
    }

    /**
     * Set the targetId property: The relationship target resource id.
     * 
     * @param targetId the targetId value to set.
     * @return the DependencyOfRelationshipProperties object itself.
     */
    public DependencyOfRelationshipProperties withTargetId(String targetId) {
        this.targetId = targetId;
        return this;
    }

    /**
     * Get the targetTenant property: The relationship target tenant id.
     * 
     * @return the targetTenant value.
     */
    public String targetTenant() {
        return this.targetTenant;
    }

    /**
     * Set the targetTenant property: The relationship target tenant id.
     * 
     * @param targetTenant the targetTenant value to set.
     * @return the DependencyOfRelationshipProperties object itself.
     */
    public DependencyOfRelationshipProperties withTargetTenant(String targetTenant) {
        this.targetTenant = targetTenant;
        return this;
    }

    /**
     * Get the originInformation property: Information about the origin of the relationship.
     * 
     * @return the originInformation value.
     */
    public RelationshipOriginInformation originInformation() {
        return this.originInformation;
    }

    /**
     * Get the metadata property: Metadata about the relationship.
     * 
     * @return the metadata value.
     */
    public RelationshipMetadata metadata() {
        return this.metadata;
    }

    /**
     * Get the provisioningState property: The provisioning state of the relationship.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetId in model DependencyOfRelationshipProperties"));
        }
        if (originInformation() != null) {
            originInformation().validate();
        }
        if (metadata() != null) {
            metadata().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DependencyOfRelationshipProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetId", this.targetId);
        jsonWriter.writeStringField("targetTenant", this.targetTenant);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DependencyOfRelationshipProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DependencyOfRelationshipProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DependencyOfRelationshipProperties.
     */
    public static DependencyOfRelationshipProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DependencyOfRelationshipProperties deserializedDependencyOfRelationshipProperties
                = new DependencyOfRelationshipProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceId".equals(fieldName)) {
                    deserializedDependencyOfRelationshipProperties.sourceId = reader.getString();
                } else if ("targetId".equals(fieldName)) {
                    deserializedDependencyOfRelationshipProperties.targetId = reader.getString();
                } else if ("originInformation".equals(fieldName)) {
                    deserializedDependencyOfRelationshipProperties.originInformation
                        = RelationshipOriginInformation.fromJson(reader);
                } else if ("metadata".equals(fieldName)) {
                    deserializedDependencyOfRelationshipProperties.metadata = RelationshipMetadata.fromJson(reader);
                } else if ("targetTenant".equals(fieldName)) {
                    deserializedDependencyOfRelationshipProperties.targetTenant = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDependencyOfRelationshipProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDependencyOfRelationshipProperties;
        });
    }
}
