// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.ai.face.FaceAsyncOperationsClient;
import com.azure.ai.face.FaceClient;
import com.azure.ai.face.FaceClientBuilder;
import com.azure.ai.face.FaceListsClient;
import com.azure.ai.face.LargeFaceListsClient;
import com.azure.ai.face.LargePersonGroupsClient;
import com.azure.ai.face.LivenessSessionsClient;
import com.azure.ai.face.LivenessWithVerifySessionsClient;
import com.azure.ai.face.PersonDirectoryDynamicPersonGroupsClient;
import com.azure.ai.face.PersonDirectoryPersonsClient;
import com.azure.ai.face.PersonGroupsClient;
import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

class FaceClientTestBase extends TestProxyTestBase {
    protected FaceClient faceClient;

    protected FaceListsClient faceListsClient;

    protected LargeFaceListsClient largeFaceListsClient;

    protected FaceAsyncOperationsClient faceAsyncOperationsClient;

    protected PersonDirectoryPersonsClient personDirectoryPersonsClient;

    protected PersonDirectoryDynamicPersonGroupsClient personDirectoryDynamicPersonGroupsClient;

    protected PersonGroupsClient personGroupsClient;

    protected LargePersonGroupsClient largePersonGroupsClient;

    protected LivenessSessionsClient livenessSessionsClient;

    protected LivenessWithVerifySessionsClient livenessWithVerifySessionsClient;

    @Override
    protected void beforeTest() {
        FaceClientBuilder faceClientbuilder
            = new FaceClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            faceClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            faceClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            faceClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        faceClient = faceClientbuilder.buildClient();

        FaceClientBuilder faceListsClientbuilder
            = new FaceClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            faceListsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            faceListsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            faceListsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        faceListsClient = faceListsClientbuilder.buildFaceListsClient();

        FaceClientBuilder largeFaceListsClientbuilder
            = new FaceClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            largeFaceListsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            largeFaceListsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            largeFaceListsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        largeFaceListsClient = largeFaceListsClientbuilder.buildLargeFaceListsClient();

        FaceClientBuilder faceAsyncOperationsClientbuilder
            = new FaceClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            faceAsyncOperationsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            faceAsyncOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            faceAsyncOperationsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        faceAsyncOperationsClient = faceAsyncOperationsClientbuilder.buildFaceAsyncOperationsClient();

        FaceClientBuilder personDirectoryPersonsClientbuilder
            = new FaceClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            personDirectoryPersonsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            personDirectoryPersonsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            personDirectoryPersonsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        personDirectoryPersonsClient = personDirectoryPersonsClientbuilder.buildPersonDirectoryPersonsClient();

        FaceClientBuilder personDirectoryDynamicPersonGroupsClientbuilder
            = new FaceClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            personDirectoryDynamicPersonGroupsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            personDirectoryDynamicPersonGroupsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            personDirectoryDynamicPersonGroupsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        personDirectoryDynamicPersonGroupsClient
            = personDirectoryDynamicPersonGroupsClientbuilder.buildPersonDirectoryDynamicPersonGroupsClient();

        FaceClientBuilder personGroupsClientbuilder
            = new FaceClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            personGroupsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            personGroupsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            personGroupsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        personGroupsClient = personGroupsClientbuilder.buildPersonGroupsClient();

        FaceClientBuilder largePersonGroupsClientbuilder
            = new FaceClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            largePersonGroupsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            largePersonGroupsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            largePersonGroupsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        largePersonGroupsClient = largePersonGroupsClientbuilder.buildLargePersonGroupsClient();

        FaceClientBuilder livenessSessionsClientbuilder
            = new FaceClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            livenessSessionsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            livenessSessionsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            livenessSessionsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        livenessSessionsClient = livenessSessionsClientbuilder.buildLivenessSessionsClient();

        FaceClientBuilder livenessWithVerifySessionsClientbuilder
            = new FaceClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            livenessWithVerifySessionsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            livenessWithVerifySessionsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            livenessWithVerifySessionsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        livenessWithVerifySessionsClient
            = livenessWithVerifySessionsClientbuilder.buildLivenessWithVerifySessionsClient();

    }
}
