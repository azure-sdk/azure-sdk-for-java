// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face;

import com.azure.ai.face.implementation.FaceClientImpl;
import com.azure.ai.face.implementation.models.DetectFromUrlRequest;
import com.azure.ai.face.implementation.models.FindSimilarRequest;
import com.azure.ai.face.implementation.models.GroupRequest;
import com.azure.ai.face.implementation.models.VerifyRequest;
import com.azure.ai.face.models.DetectFromUrlOptions;
import com.azure.ai.face.models.DetectionModel;
import com.azure.ai.face.models.FaceDetectionResult;
import com.azure.ai.face.models.FindSimilarMatchMode;
import com.azure.ai.face.models.FindSimilarResult;
import com.azure.ai.face.models.GroupResult;
import com.azure.ai.face.models.RecognitionModel;
import com.azure.ai.face.models.VerifyResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;

/**
 * Initializes a new instance of the synchronous FaceClient type.
 */
@ServiceClient(builder = FaceClientBuilder.class)
public final class FaceClient {
    @Generated
    private final FaceClientImpl serviceClient;

    /**
     * Initializes an instance of FaceClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    FaceClient(FaceClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>returnFaceId</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return faceIds of the detected faces or not. The default value is true.</td>
     * </tr>
     * <tr>
     * <td>returnFaceLandmarks</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return face landmarks of the detected faces or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>returnFaceAttributes</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Analyze and return the one or more specified face attributes in the comma-separated string like
     * 'returnFaceAttributes=headPose,glasses'. Supported face attributes include headPose, glasses, occlusion,
     * accessories, blur, exposure, noise, mask, and qualityForRecognition. Face attribute analysis has additional
     * computational and time cost.</td>
     * </tr>
     * <tr>
     * <td>recognitionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'recognitionModel' associated with the detected faceIds. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".</td>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Allowed values: "detection_01", "detection_02",
     * "detection_03".</td>
     * </tr>
     * <tr>
     * <td>faceIdTimeToLive</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The
     * default value is 86400 (24 hours).</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Required)
     *         recognitionModel: String (Optional)
     *         faceRectangle (Optional): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         faceLandmarks (Optional): {
     *             pupilLeft (Required): {
     *                 x: double (Required)
     *                 y: double (Required)
     *             }
     *             pupilRight (Required): (recursive schema, see pupilRight above)
     *             noseTip (Required): (recursive schema, see noseTip above)
     *             mouthLeft (Required): (recursive schema, see mouthLeft above)
     *             mouthRight (Required): (recursive schema, see mouthRight above)
     *             eyebrowLeftOuter (Required): (recursive schema, see eyebrowLeftOuter above)
     *             eyebrowLeftInner (Required): (recursive schema, see eyebrowLeftInner above)
     *             eyeLeftOuter (Required): (recursive schema, see eyeLeftOuter above)
     *             eyeLeftTop (Required): (recursive schema, see eyeLeftTop above)
     *             eyeLeftBottom (Required): (recursive schema, see eyeLeftBottom above)
     *             eyeLeftInner (Required): (recursive schema, see eyeLeftInner above)
     *             eyebrowRightInner (Required): (recursive schema, see eyebrowRightInner above)
     *             eyebrowRightOuter (Required): (recursive schema, see eyebrowRightOuter above)
     *             eyeRightInner (Required): (recursive schema, see eyeRightInner above)
     *             eyeRightTop (Required): (recursive schema, see eyeRightTop above)
     *             eyeRightBottom (Required): (recursive schema, see eyeRightBottom above)
     *             eyeRightOuter (Required): (recursive schema, see eyeRightOuter above)
     *             noseRootLeft (Required): (recursive schema, see noseRootLeft above)
     *             noseRootRight (Required): (recursive schema, see noseRootRight above)
     *             noseLeftAlarTop (Required): (recursive schema, see noseLeftAlarTop above)
     *             noseRightAlarTop (Required): (recursive schema, see noseRightAlarTop above)
     *             noseLeftAlarOutTip (Required): (recursive schema, see noseLeftAlarOutTip above)
     *             noseRightAlarOutTip (Required): (recursive schema, see noseRightAlarOutTip above)
     *             upperLipTop (Required): (recursive schema, see upperLipTop above)
     *             upperLipBottom (Required): (recursive schema, see upperLipBottom above)
     *             underLipTop (Required): (recursive schema, see underLipTop above)
     *             underLipBottom (Required): (recursive schema, see underLipBottom above)
     *         }
     *         faceAttributes (Optional): {
     *             age: Integer (Optional)
     *             smile: Double (Optional)
     *             facialHair (Optional): {
     *                 moustache: double (Required)
     *                 beard: double (Required)
     *                 sideburns: double (Required)
     *             }
     *             glasses: String(noGlasses/readingGlasses/sunglasses/swimmingGoggles) (Optional)
     *             headPose (Optional): {
     *                 pitch: double (Required)
     *                 roll: double (Required)
     *                 yaw: double (Required)
     *             }
     *             hair (Optional): {
     *                 bald: double (Required)
     *                 invisible: boolean (Required)
     *                 hairColor (Required): [
     *                      (Required){
     *                         color: String(unknown/white/gray/blond/brown/red/black/other) (Required)
     *                         confidence: double (Required)
     *                     }
     *                 ]
     *             }
     *             occlusion (Optional): {
     *                 foreheadOccluded: boolean (Required)
     *                 eyeOccluded: boolean (Required)
     *                 mouthOccluded: boolean (Required)
     *             }
     *             accessories (Optional): [
     *                  (Optional){
     *                     type: String(headwear/glasses/mask) (Required)
     *                     confidence: double (Required)
     *                 }
     *             ]
     *             blur (Optional): {
     *                 blurLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             exposure (Optional): {
     *                 exposureLevel: String(underExposure/goodExposure/overExposure) (Required)
     *                 value: double (Required)
     *             }
     *             noise (Optional): {
     *                 noiseLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             mask (Optional): {
     *                 noseAndMouthCovered: boolean (Required)
     *                 type: String(faceMask/noMask/otherMaskOrOcclusion/uncertain) (Required)
     *             }
     *             qualityForRecognition: String(low/medium/high) (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectFromUrlWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.detectFromUrlWithResponse(request, requestOptions);
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>returnFaceId</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return faceIds of the detected faces or not. The default value is true.</td>
     * </tr>
     * <tr>
     * <td>returnFaceLandmarks</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return face landmarks of the detected faces or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>returnFaceAttributes</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Analyze and return the one or more specified face attributes in the comma-separated string like
     * 'returnFaceAttributes=headPose,glasses'. Supported face attributes include headPose, glasses, occlusion,
     * accessories, blur, exposure, noise, mask, and qualityForRecognition. Face attribute analysis has additional
     * computational and time cost.</td>
     * </tr>
     * <tr>
     * <td>recognitionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'recognitionModel' associated with the detected faceIds. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".</td>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Allowed values: "detection_01", "detection_02",
     * "detection_03".</td>
     * </tr>
     * <tr>
     * <td>faceIdTimeToLive</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The
     * default value is 86400 (24 hours).</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Required)
     *         recognitionModel: String (Optional)
     *         faceRectangle (Optional): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         faceLandmarks (Optional): {
     *             pupilLeft (Required): {
     *                 x: double (Required)
     *                 y: double (Required)
     *             }
     *             pupilRight (Required): (recursive schema, see pupilRight above)
     *             noseTip (Required): (recursive schema, see noseTip above)
     *             mouthLeft (Required): (recursive schema, see mouthLeft above)
     *             mouthRight (Required): (recursive schema, see mouthRight above)
     *             eyebrowLeftOuter (Required): (recursive schema, see eyebrowLeftOuter above)
     *             eyebrowLeftInner (Required): (recursive schema, see eyebrowLeftInner above)
     *             eyeLeftOuter (Required): (recursive schema, see eyeLeftOuter above)
     *             eyeLeftTop (Required): (recursive schema, see eyeLeftTop above)
     *             eyeLeftBottom (Required): (recursive schema, see eyeLeftBottom above)
     *             eyeLeftInner (Required): (recursive schema, see eyeLeftInner above)
     *             eyebrowRightInner (Required): (recursive schema, see eyebrowRightInner above)
     *             eyebrowRightOuter (Required): (recursive schema, see eyebrowRightOuter above)
     *             eyeRightInner (Required): (recursive schema, see eyeRightInner above)
     *             eyeRightTop (Required): (recursive schema, see eyeRightTop above)
     *             eyeRightBottom (Required): (recursive schema, see eyeRightBottom above)
     *             eyeRightOuter (Required): (recursive schema, see eyeRightOuter above)
     *             noseRootLeft (Required): (recursive schema, see noseRootLeft above)
     *             noseRootRight (Required): (recursive schema, see noseRootRight above)
     *             noseLeftAlarTop (Required): (recursive schema, see noseLeftAlarTop above)
     *             noseRightAlarTop (Required): (recursive schema, see noseRightAlarTop above)
     *             noseLeftAlarOutTip (Required): (recursive schema, see noseLeftAlarOutTip above)
     *             noseRightAlarOutTip (Required): (recursive schema, see noseRightAlarOutTip above)
     *             upperLipTop (Required): (recursive schema, see upperLipTop above)
     *             upperLipBottom (Required): (recursive schema, see upperLipBottom above)
     *             underLipTop (Required): (recursive schema, see underLipTop above)
     *             underLipBottom (Required): (recursive schema, see underLipBottom above)
     *         }
     *         faceAttributes (Optional): {
     *             age: Integer (Optional)
     *             smile: Double (Optional)
     *             facialHair (Optional): {
     *                 moustache: double (Required)
     *                 beard: double (Required)
     *                 sideburns: double (Required)
     *             }
     *             glasses: String(noGlasses/readingGlasses/sunglasses/swimmingGoggles) (Optional)
     *             headPose (Optional): {
     *                 pitch: double (Required)
     *                 roll: double (Required)
     *                 yaw: double (Required)
     *             }
     *             hair (Optional): {
     *                 bald: double (Required)
     *                 invisible: boolean (Required)
     *                 hairColor (Required): [
     *                      (Required){
     *                         color: String(unknown/white/gray/blond/brown/red/black/other) (Required)
     *                         confidence: double (Required)
     *                     }
     *                 ]
     *             }
     *             occlusion (Optional): {
     *                 foreheadOccluded: boolean (Required)
     *                 eyeOccluded: boolean (Required)
     *                 mouthOccluded: boolean (Required)
     *             }
     *             accessories (Optional): [
     *                  (Optional){
     *                     type: String(headwear/glasses/mask) (Required)
     *                     confidence: double (Required)
     *                 }
     *             ]
     *             blur (Optional): {
     *                 blurLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             exposure (Optional): {
     *                 exposureLevel: String(underExposure/goodExposure/overExposure) (Required)
     *                 value: double (Required)
     *             }
     *             noise (Optional): {
     *                 noiseLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             mask (Optional): {
     *                 noseAndMouthCovered: boolean (Required)
     *                 type: String(faceMask/noMask/otherMaskOrOcclusion/uncertain) (Required)
     *             }
     *             qualityForRecognition: String(low/medium/high) (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     * 
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectFromStreamWithResponse(BinaryData imageContent, RequestOptions requestOptions) {
        return this.serviceClient.detectFromStreamWithResponse(imageContent, requestOptions);
    }

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face
     * list.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceId: String (Required)
     *     maxNumOfCandidatesReturned: Integer (Optional)
     *     mode: String(matchPerson/matchFace) (Optional)
     *     faceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         confidence: double (Required)
     *         faceId: String (Optional)
     *         persistedFaceId: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> findSimilarWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.findSimilarWithResponse(request, requestOptions);
    }

    /**
     * Verify whether two faces belong to a same person or whether one face belongs to a person.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceId1: String (Required)
     *     faceId2: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     isIdentical: boolean (Required)
     *     confidence: double (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return verify result along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> verifyWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.verifyWithResponse(request, requestOptions);
    }

    /**
     * Divide candidate faces into groups based on face similarity.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groups (Required): [
     *          (Required)[
     *             String (Required)
     *         ]
     *     ]
     *     messyGroup (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for group face operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> groupWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.groupWithResponse(request, requestOptions);
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * 
     * @param options Options for detectFromUrl API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<FaceDetectionResult> detectFromUrl(DetectFromUrlOptions options) {
        // Generated convenience method for detectFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Boolean returnFaceId = options.isReturnFaceId();
        Boolean returnFaceLandmarks = options.isReturnFaceLandmarks();
        String returnFaceAttributes = options.getReturnFaceAttributes();
        RecognitionModel recognitionModel = options.getRecognitionModel();
        Boolean returnRecognitionModel = options.isReturnRecognitionModel();
        DetectionModel detectionModel = options.getDetectionModel();
        Integer faceIdTimeToLive = options.getFaceIdTimeToLive();
        DetectFromUrlRequest requestObj = new DetectFromUrlRequest(options.getUrl());
        BinaryData request = BinaryData.fromObject(requestObj);
        if (returnFaceId != null) {
            requestOptions.addQueryParam("returnFaceId", String.valueOf(returnFaceId), false);
        }
        if (returnFaceLandmarks != null) {
            requestOptions.addQueryParam("returnFaceLandmarks", String.valueOf(returnFaceLandmarks), false);
        }
        if (returnFaceAttributes != null) {
            requestOptions.addQueryParam("returnFaceAttributes", returnFaceAttributes, false);
        }
        if (recognitionModel != null) {
            requestOptions.addQueryParam("recognitionModel", recognitionModel.toString(), false);
        }
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (faceIdTimeToLive != null) {
            requestOptions.addQueryParam("faceIdTimeToLive", String.valueOf(faceIdTimeToLive), false);
        }
        return detectFromUrlWithResponse(request, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_FACE_DETECTION_RESULT);
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * 
     * @param imageContent The image to be analyzed.
     * @param returnFaceId Return faceIds of the detected faces or not. The default value is true.
     * @param returnFaceLandmarks Return face landmarks of the detected faces or not. The default value is false.
     * @param returnFaceAttributes Analyze and return the one or more specified face attributes in the comma-separated
     * string like 'returnFaceAttributes=headPose,glasses'. Supported face attributes include headPose, glasses,
     * occlusion, accessories, blur, exposure, noise, mask, and qualityForRecognition. Face attribute analysis has
     * additional computational and time cost.
     * @param recognitionModel The 'recognitionModel' associated with the detected faceIds.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds.
     * @param faceIdTimeToLive The number of seconds for the face ID being cached. Supported range from 60 seconds up to
     * 86400 seconds. The default value is 86400 (24 hours).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<FaceDetectionResult> detectFromStream(BinaryData imageContent, Boolean returnFaceId,
        Boolean returnFaceLandmarks, String returnFaceAttributes, RecognitionModel recognitionModel,
        Boolean returnRecognitionModel, DetectionModel detectionModel, Integer faceIdTimeToLive) {
        // Generated convenience method for detectFromStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (returnFaceId != null) {
            requestOptions.addQueryParam("returnFaceId", String.valueOf(returnFaceId), false);
        }
        if (returnFaceLandmarks != null) {
            requestOptions.addQueryParam("returnFaceLandmarks", String.valueOf(returnFaceLandmarks), false);
        }
        if (returnFaceAttributes != null) {
            requestOptions.addQueryParam("returnFaceAttributes", returnFaceAttributes, false);
        }
        if (recognitionModel != null) {
            requestOptions.addQueryParam("recognitionModel", recognitionModel.toString(), false);
        }
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (faceIdTimeToLive != null) {
            requestOptions.addQueryParam("faceIdTimeToLive", String.valueOf(faceIdTimeToLive), false);
        }
        return detectFromStreamWithResponse(imageContent, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_FACE_DETECTION_RESULT);
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * 
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<FaceDetectionResult> detectFromStream(BinaryData imageContent) {
        // Generated convenience method for detectFromStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return detectFromStreamWithResponse(imageContent, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_FACE_DETECTION_RESULT);
    }

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face
     * list.
     * 
     * @param faceId faceId of the face, comes from Face - Detect.
     * @param faceIds An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will
     * expire 24 hours after the detection call. The number of faceIds is limited to 1000.
     * @param maxNumOfCandidatesReturned The number of top similar faces returned. The valid range is [1, 1000].It
     * defaults to 20.
     * @param mode Similar face searching mode. It can be 'matchPerson' or 'matchFace'. It defaults to 'matchPerson'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<FindSimilarResult> findSimilar(String faceId, List<String> faceIds, Integer maxNumOfCandidatesReturned,
        FindSimilarMatchMode mode) {
        // Generated convenience method for findSimilarWithResponse
        RequestOptions requestOptions = new RequestOptions();
        FindSimilarRequest requestObj = new FindSimilarRequest(faceId, faceIds)
            .setMaxNumOfCandidatesReturned(maxNumOfCandidatesReturned).setMode(mode);
        BinaryData request = BinaryData.fromObject(requestObj);
        return findSimilarWithResponse(request, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_FIND_SIMILAR_RESULT);
    }

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face
     * list.
     * 
     * @param faceId faceId of the face, comes from Face - Detect.
     * @param faceIds An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will
     * expire 24 hours after the detection call. The number of faceIds is limited to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<FindSimilarResult> findSimilar(String faceId, List<String> faceIds) {
        // Generated convenience method for findSimilarWithResponse
        RequestOptions requestOptions = new RequestOptions();
        FindSimilarRequest requestObj = new FindSimilarRequest(faceId, faceIds);
        BinaryData request = BinaryData.fromObject(requestObj);
        return findSimilarWithResponse(request, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_FIND_SIMILAR_RESULT);
    }

    /**
     * Verify whether two faces belong to a same person or whether one face belongs to a person.
     * 
     * @param faceId1 faceId of the face, comes from Face - Detect.
     * @param faceId2 faceId of the face, comes from Face - Detect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return verify result.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VerifyResult verify(String faceId1, String faceId2) {
        // Generated convenience method for verifyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        VerifyRequest requestObj = new VerifyRequest(faceId1, faceId2);
        BinaryData request = BinaryData.fromObject(requestObj);
        return verifyWithResponse(request, requestOptions).getValue().toObject(VerifyResult.class);
    }

    /**
     * Divide candidate faces into groups based on face similarity.
     * 
     * @param faceIds Array of candidate faceId created by Face - Detect. The maximum is 1000 faces.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for group face operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupResult group(List<String> faceIds) {
        // Generated convenience method for groupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        GroupRequest requestObj = new GroupRequest(faceIds);
        BinaryData request = BinaryData.fromObject(requestObj);
        return groupWithResponse(request, requestOptions).getValue().toObject(GroupResult.class);
    }

    @Generated
    private static final TypeReference<List<FindSimilarResult>> TYPE_REFERENCE_LIST_FIND_SIMILAR_RESULT
        = new TypeReference<List<FindSimilarResult>>() {
        };

    @Generated
    private static final TypeReference<List<FaceDetectionResult>> TYPE_REFERENCE_LIST_FACE_DETECTION_RESULT
        = new TypeReference<List<FaceDetectionResult>>() {
        };
}
