// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face;

import com.azure.ai.face.implementation.PersonGroupsImpl;
import com.azure.ai.face.implementation.models.IdentifyFromPersonGroupRequest;
import com.azure.ai.face.implementation.models.VerifyFromPersonGroupRequest;
import com.azure.ai.face.models.AddFaceFromUrlContent;
import com.azure.ai.face.models.AddFaceResult;
import com.azure.ai.face.models.DetectionModel;
import com.azure.ai.face.models.IdentifyResult;
import com.azure.ai.face.models.PersonGroup;
import com.azure.ai.face.models.PersonGroupPerson;
import com.azure.ai.face.models.PersonGroupPersonFace;
import com.azure.ai.face.models.TrainingStatus;
import com.azure.ai.face.models.VerifyResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;

/**
 * Initializes a new instance of the synchronous FaceClient type.
 */
@ServiceClient(builder = FaceClientBuilder.class)
public final class PersonGroupsClient {
    @Generated
    private final PersonGroupsImpl serviceClient;

    /**
     * Initializes an instance of PersonGroupsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    PersonGroupsClient(PersonGroupsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     personGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createGroupWithResponse(String personGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.createGroupWithResponse(personGroupId, resource, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteGroupWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.deleteGroupWithResponse(personGroupId, requestOptions);
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     personGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return free-tier subscription quota: 1,000 person groups along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getGroupWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.getGroupWithResponse(personGroupId, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     personGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateGroupWithResponse(String personGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.updateGroupWithResponse(personGroupId, resource, requestOptions);
    }

    /**
     * Operation that lists resources in a paginated way.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         name: String (Required)
     *         userData: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         personGroupId: String (Required)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listGroupWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listGroupWithResponse(requestOptions);
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the person in a specified person group along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createPersonWithResponse(String personGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.createPersonWithResponse(personGroupId, resource, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePersonWithResponse(String personGroupId, String personId,
        RequestOptions requestOptions) {
        return this.serviceClient.deletePersonWithResponse(personGroupId, personId, requestOptions);
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the person in a specified person group along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonWithResponse(String personGroupId, String personId,
        RequestOptions requestOptions) {
        return this.serviceClient.getPersonWithResponse(personGroupId, personId, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonWithResponse(String personGroupId, String personId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.updatePersonWithResponse(personGroupId, personId, resource, requestOptions);
    }

    /**
     * Operation that lists resources in a paginated way.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         personId: String (Required)
     *         name: String (Required)
     *         userData: String (Optional)
     *         persistedFaceIds (Optional): [
     *             String (Optional)
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listPersonWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.listPersonWithResponse(personGroupId, requestOptions);
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>targetFace</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include
     * 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values:
     * "detection_01", "detection_02", "detection_03".</td>
     * </tr>
     * <tr>
     * <td>userData</td>
     * <td>String</td>
     * <td>No</td>
     * <td>User-provided data attached to the face. The size limit is 1KB.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param addFaceFromUrlContent Model for add face by url.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model for add face result along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceFromUrlWithResponse(String personGroupId, String personId,
        BinaryData addFaceFromUrlContent, RequestOptions requestOptions) {
        return this.serviceClient.addFaceFromUrlWithResponse(personGroupId, personId, addFaceFromUrlContent,
            requestOptions);
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>targetFace</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include
     * 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values:
     * "detection_01", "detection_02", "detection_03".</td>
     * </tr>
     * <tr>
     * <td>userData</td>
     * <td>String</td>
     * <td>No</td>
     * <td>User-provided data attached to the face. The size limit is 1KB.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model for add face result along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceFromStreamWithResponse(String personGroupId, String personId,
        BinaryData imageContent, RequestOptions requestOptions) {
        return this.serviceClient.addFaceFromStreamWithResponse(personGroupId, personId, imageContent, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteFaceWithResponse(String personGroupId, String personId, String persistedFaceId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteFaceWithResponse(personGroupId, personId, persistedFaceId, requestOptions);
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face resource for person group person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFaceWithResponse(String personGroupId, String personId, String persistedFaceId,
        RequestOptions requestOptions) {
        return this.serviceClient.getFaceWithResponse(personGroupId, personId, persistedFaceId, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateFaceWithResponse(String personGroupId, String personId, String persistedFaceId,
        BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.updateFaceWithResponse(personGroupId, personId, persistedFaceId, resource,
            requestOptions);
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceIds (Required): [
     *         String (Required)
     *     ]
     *     personGroupId: String (Required)
     *     maxNumOfCandidatesReturned: Integer (Optional)
     *     confidenceThreshold: Double (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Required)
     *         candidates (Required): [
     *              (Required){
     *                 personId: String (Required)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> identifyFromPersonGroupWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.identifyFromPersonGroupWithResponse(request, requestOptions);
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceId: String (Required)
     *     personGroupId: String (Required)
     *     personId: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     isIdentical: boolean (Required)
     *     confidence: double (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return verify result along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> verifyFromPersonGroupWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.verifyFromPersonGroupWithResponse(request, requestOptions);
    }

    /**
     * Resource action operation template.
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginTrainGroup(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.beginTrainGroup(personGroupId, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     status: String(nonstarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     lastSuccessfulTrainingDateTime: OffsetDateTime (Required)
     *     message: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training status of a container along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTrainingStatusWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.getTrainingStatusWithResponse(personGroupId, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personGroupId ID of the container.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createGroup(String personGroupId, PersonGroup resource) {
        // Generated convenience method for createGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createGroupWithResponse(personGroupId, BinaryData.fromObject(resource), requestOptions).getValue();
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteGroup(String personGroupId) {
        // Generated convenience method for deleteGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteGroupWithResponse(personGroupId, requestOptions).getValue();
    }

    /**
     * Resource read operation template.
     * 
     * @param personGroupId ID of the container.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return free-tier subscription quota: 1,000 person groups.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroup getGroup(String personGroupId, Boolean returnRecognitionModel) {
        // Generated convenience method for getGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getGroupWithResponse(personGroupId, requestOptions).getValue().toObject(PersonGroup.class);
    }

    /**
     * Resource read operation template.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return free-tier subscription quota: 1,000 person groups.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroup getGroup(String personGroupId) {
        // Generated convenience method for getGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getGroupWithResponse(personGroupId, requestOptions).getValue().toObject(PersonGroup.class);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personGroupId ID of the container.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateGroup(String personGroupId, PersonGroup resource) {
        // Generated convenience method for updateGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updateGroupWithResponse(personGroupId, BinaryData.fromObject(resource), requestOptions).getValue();
    }

    /**
     * Operation that lists resources in a paginated way.
     * 
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroup> listGroup(String start, Integer top, Boolean returnRecognitionModel) {
        // Generated convenience method for listGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return listGroupWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_PERSON_GROUP);
    }

    /**
     * Operation that lists resources in a paginated way.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroup> listGroup() {
        // Generated convenience method for listGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listGroupWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_PERSON_GROUP);
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param personGroupId ID of the container.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the person in a specified person group.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroupPerson createPerson(String personGroupId, PersonGroupPerson resource) {
        // Generated convenience method for createPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createPersonWithResponse(personGroupId, BinaryData.fromObject(resource), requestOptions).getValue()
            .toObject(PersonGroupPerson.class);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePerson(String personGroupId, String personId) {
        // Generated convenience method for deletePersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deletePersonWithResponse(personGroupId, personId, requestOptions).getValue();
    }

    /**
     * Resource read operation template.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the person in a specified person group.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroupPerson getPerson(String personGroupId, String personId) {
        // Generated convenience method for getPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonWithResponse(personGroupId, personId, requestOptions).getValue()
            .toObject(PersonGroupPerson.class);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePerson(String personGroupId, String personId, PersonGroupPerson resource) {
        // Generated convenience method for updatePersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updatePersonWithResponse(personGroupId, personId, BinaryData.fromObject(resource), requestOptions).getValue();
    }

    /**
     * Operation that lists resources in a paginated way.
     * 
     * @param personGroupId ID of the container.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroupPerson> listPerson(String personGroupId, String start, Integer top) {
        // Generated convenience method for listPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return listPersonWithResponse(personGroupId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_PERSON_GROUP_PERSON);
    }

    /**
     * Operation that lists resources in a paginated way.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroupPerson> listPerson(String personGroupId) {
        // Generated convenience method for listPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listPersonWithResponse(personGroupId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_PERSON_GROUP_PERSON);
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param addFaceFromUrlContent Model for add face by url.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for add face result.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addFaceFromUrl(String personGroupId, String personId,
        AddFaceFromUrlContent addFaceFromUrlContent, String targetFace, DetectionModel detectionModel,
        String userData) {
        // Generated convenience method for addFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace", targetFace, false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addFaceFromUrlWithResponse(personGroupId, personId, BinaryData.fromObject(addFaceFromUrlContent),
            requestOptions).getValue().toObject(AddFaceResult.class);
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param addFaceFromUrlContent Model for add face by url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for add face result.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addFaceFromUrl(String personGroupId, String personId,
        AddFaceFromUrlContent addFaceFromUrlContent) {
        // Generated convenience method for addFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addFaceFromUrlWithResponse(personGroupId, personId, BinaryData.fromObject(addFaceFromUrlContent),
            requestOptions).getValue().toObject(AddFaceResult.class);
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for add face result.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addFaceFromStream(String personGroupId, String personId, BinaryData imageContent,
        String targetFace, DetectionModel detectionModel, String userData) {
        // Generated convenience method for addFaceFromStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace", targetFace, false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addFaceFromStreamWithResponse(personGroupId, personId, imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for add face result.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addFaceFromStream(String personGroupId, String personId, BinaryData imageContent) {
        // Generated convenience method for addFaceFromStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addFaceFromStreamWithResponse(personGroupId, personId, imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFace(String personGroupId, String personId, String persistedFaceId) {
        // Generated convenience method for deleteFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteFaceWithResponse(personGroupId, personId, persistedFaceId, requestOptions).getValue();
    }

    /**
     * Resource read operation template.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face resource for person group person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroupPersonFace getFace(String personGroupId, String personId, String persistedFaceId) {
        // Generated convenience method for getFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFaceWithResponse(personGroupId, personId, persistedFaceId, requestOptions).getValue()
            .toObject(PersonGroupPersonFace.class);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateFace(String personGroupId, String personId, String persistedFaceId,
        PersonGroupPersonFace resource) {
        // Generated convenience method for updateFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updateFaceWithResponse(personGroupId, personId, persistedFaceId, BinaryData.fromObject(resource),
            requestOptions).getValue();
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified
     * independently. The valid number of faceIds is between [1, 10].
     * @param personGroupId Id of the target person group, created by PersonGroup - Create.
     * @param maxNumOfCandidatesReturned The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10).
     * @param confidenceThreshold Customized identification confidence threshold, in the range of [0, 1]. Advanced user
     * can tweak this value to override default internal threshold for better precision on their scenario data. Note
     * there is no guarantee of this threshold value working on other data and after algorithm updates.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IdentifyResult> identifyFromPersonGroup(List<String> faceIds, String personGroupId,
        Integer maxNumOfCandidatesReturned, Double confidenceThreshold) {
        // Generated convenience method for identifyFromPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        IdentifyFromPersonGroupRequest requestObj = new IdentifyFromPersonGroupRequest(faceIds, personGroupId)
            .setMaxNumOfCandidatesReturned(maxNumOfCandidatesReturned).setConfidenceThreshold(confidenceThreshold);
        BinaryData request = BinaryData.fromObject(requestObj);
        return identifyFromPersonGroupWithResponse(request, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_IDENTIFY_RESULT);
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified
     * independently. The valid number of faceIds is between [1, 10].
     * @param personGroupId Id of the target person group, created by PersonGroup - Create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IdentifyResult> identifyFromPersonGroup(List<String> faceIds, String personGroupId) {
        // Generated convenience method for identifyFromPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        IdentifyFromPersonGroupRequest requestObj = new IdentifyFromPersonGroupRequest(faceIds, personGroupId);
        BinaryData request = BinaryData.fromObject(requestObj);
        return identifyFromPersonGroupWithResponse(request, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_IDENTIFY_RESULT);
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param faceId faceId of the face, comes from Face - Detect.
     * @param personGroupId Id of the target person group, created by PersonGroup - Create.
     * @param personId Specify a certain person in person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return verify result.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VerifyResult verifyFromPersonGroup(String faceId, String personGroupId, String personId) {
        // Generated convenience method for verifyFromPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        VerifyFromPersonGroupRequest requestObj = new VerifyFromPersonGroupRequest(faceId, personGroupId, personId);
        BinaryData request = BinaryData.fromObject(requestObj);
        return verifyFromPersonGroupWithResponse(request, requestOptions).getValue().toObject(VerifyResult.class);
    }

    /**
     * Resource action operation template.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TrainingStatus, Void> beginTrainGroup(String personGroupId) {
        // Generated convenience method for beginTrainGroupWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginTrainGroupWithModel(personGroupId, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training status of a container.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrainingStatus getTrainingStatus(String personGroupId) {
        // Generated convenience method for getTrainingStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTrainingStatusWithResponse(personGroupId, requestOptions).getValue().toObject(TrainingStatus.class);
    }

    @Generated
    private static final TypeReference<List<IdentifyResult>> TYPE_REFERENCE_LIST_IDENTIFY_RESULT
        = new TypeReference<List<IdentifyResult>>() {
        };

    @Generated
    private static final TypeReference<List<PersonGroup>> TYPE_REFERENCE_LIST_PERSON_GROUP
        = new TypeReference<List<PersonGroup>>() {
        };

    @Generated
    private static final TypeReference<List<PersonGroupPerson>> TYPE_REFERENCE_LIST_PERSON_GROUP_PERSON
        = new TypeReference<List<PersonGroupPerson>>() {
        };
}
