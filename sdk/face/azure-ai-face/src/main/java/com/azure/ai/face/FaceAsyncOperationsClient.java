// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face;

import com.azure.ai.face.implementation.FaceAsyncOperationsImpl;
import com.azure.ai.face.models.AsyncOperationStatus;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous FaceClient type.
 */
@ServiceClient(builder = FaceClientBuilder.class)
public final class FaceAsyncOperationsClient {
    @Generated
    private final FaceAsyncOperationsImpl serviceClient;

    /**
     * Initializes an instance of FaceAsyncOperationsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    FaceAsyncOperationsClient(FaceAsyncOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     status: String(notstarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     finishedDateTime: OffsetDateTime (Optional)
     *     message: String (Optional)
     * }
     * }</pre>
     * 
     * @param operationId The operation ID, which can be found from the 'Operation-Location' response header in the
     * initial request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a long running operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getStatusWithResponse(String operationId, RequestOptions requestOptions) {
        return this.serviceClient.getStatusWithResponse(operationId, requestOptions);
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param operationId The operation ID, which can be found from the 'Operation-Location' response header in the
     * initial request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a long running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AsyncOperationStatus getStatus(String operationId) {
        // Generated convenience method for getStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getStatusWithResponse(operationId, requestOptions).getValue().toObject(AsyncOperationStatus.class);
    }
}
