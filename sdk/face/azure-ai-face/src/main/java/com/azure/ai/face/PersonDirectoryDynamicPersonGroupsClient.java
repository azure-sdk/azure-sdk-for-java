// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face;

import com.azure.ai.face.implementation.PersonDirectoryDynamicPersonGroupsImpl;
import com.azure.ai.face.implementation.models.IdentifyFromDynamicPersonGroupRequest;
import com.azure.ai.face.models.AsyncOperationStatus;
import com.azure.ai.face.models.DynamicPersonGroup;
import com.azure.ai.face.models.IdentifyResult;
import com.azure.ai.face.models.ListPersonResult;
import com.azure.ai.face.models.OkResponse;
import com.azure.ai.face.models.Resource;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;

/**
 * Initializes a new instance of the synchronous FaceClient type.
 */
@ServiceClient(builder = FaceClientBuilder.class)
public final class PersonDirectoryDynamicPersonGroupsClient {
    @Generated
    private final PersonDirectoryDynamicPersonGroupsImpl serviceClient;

    /**
     * Initializes an instance of PersonDirectoryDynamicPersonGroupsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    PersonDirectoryDynamicPersonGroupsClient(PersonDirectoryDynamicPersonGroupsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     dynamicPersonGroupId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     addPersonIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateGroup(String dynamicPersonGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCreateGroup(dynamicPersonGroupId, resource, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteGroup(String dynamicPersonGroupId, RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteGroup(dynamicPersonGroupId, requestOptions);
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     dynamicPersonGroupId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     addPersonIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a container that references PersonDirectory Person - Create along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getGroupWithResponse(String dynamicPersonGroupId, RequestOptions requestOptions) {
        return this.serviceClient.getGroupWithResponse(dynamicPersonGroupId, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     dynamicPersonGroupId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     addPersonIds (Optional): [
     *         String (Optional)
     *     ]
     *     removePersonIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginUpdateGroup(String dynamicPersonGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.beginUpdateGroup(dynamicPersonGroupId, resource, requestOptions);
    }

    /**
     * Operation that lists resources in a paginated way.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         dynamicPersonGroupId: String (Required)
     *         name: String (Required)
     *         userData: String (Optional)
     *         addPersonIds (Optional): [
     *             String (Optional)
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listGroupWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listGroupWithResponse(requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of list dynamic person group person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listGroupPersonWithResponse(String dynamicPersonGroupId,
        RequestOptions requestOptions) {
        return this.serviceClient.listGroupPersonWithResponse(dynamicPersonGroupId, requestOptions);
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceIds (Required): [
     *         String (Required)
     *     ]
     *     dynamicPersonGroupId: String (Required)
     *     maxNumOfCandidatesReturned: Integer (Optional)
     *     confidenceThreshold: Double (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Required)
     *         candidates (Required): [
     *              (Required){
     *                 personId: String (Required)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> identifyFromDynamicPersonGroupWithResponse(BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.identifyFromDynamicPersonGroupWithResponse(request, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AsyncOperationStatus, DynamicPersonGroup> beginCreateGroup(String dynamicPersonGroupId,
        DynamicPersonGroup resource) {
        // Generated convenience method for beginCreateGroupWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateGroupWithModel(dynamicPersonGroupId, BinaryData.fromObject(resource),
            requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AsyncOperationStatus, Void> beginDeleteGroup(String dynamicPersonGroupId) {
        // Generated convenience method for beginDeleteGroupWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteGroupWithModel(dynamicPersonGroupId, requestOptions);
    }

    /**
     * Resource read operation template.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container that references PersonDirectory Person - Create.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicPersonGroup getGroup(String dynamicPersonGroupId) {
        // Generated convenience method for getGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getGroupWithResponse(dynamicPersonGroupId, requestOptions).getValue().toObject(DynamicPersonGroup.class);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AsyncOperationStatus, OkResponse> beginUpdateGroup(String dynamicPersonGroupId,
        Resource resource) {
        // Generated convenience method for beginUpdateGroupWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginUpdateGroupWithModel(dynamicPersonGroupId, BinaryData.fromObject(resource),
            requestOptions);
    }

    /**
     * Operation that lists resources in a paginated way.
     * 
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<DynamicPersonGroup> listGroup(String start, Integer top) {
        // Generated convenience method for listGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return listGroupWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_DYNAMIC_PERSON_GROUP);
    }

    /**
     * Operation that lists resources in a paginated way.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<DynamicPersonGroup> listGroup() {
        // Generated convenience method for listGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listGroupWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_DYNAMIC_PERSON_GROUP);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of list dynamic person group person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListPersonResult listGroupPerson(String dynamicPersonGroupId, String start, Integer top) {
        // Generated convenience method for listGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return listGroupPersonWithResponse(dynamicPersonGroupId, requestOptions).getValue()
            .toObject(ListPersonResult.class);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of list dynamic person group person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListPersonResult listGroupPerson(String dynamicPersonGroupId) {
        // Generated convenience method for listGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listGroupPersonWithResponse(dynamicPersonGroupId, requestOptions).getValue()
            .toObject(ListPersonResult.class);
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified
     * independently. The valid number of faceIds is between [1, 10].
     * @param dynamicPersonGroupId Id of the target PersonDirectory DynamicPersonGroup to match against.
     * @param maxNumOfCandidatesReturned The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10).
     * @param confidenceThreshold Customized identification confidence threshold, in the range of [0, 1]. Advanced user
     * can tweak this value to override default internal threshold for better precision on their scenario data. Note
     * there is no guarantee of this threshold value working on other data and after algorithm updates.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IdentifyResult> identifyFromDynamicPersonGroup(List<String> faceIds, String dynamicPersonGroupId,
        Integer maxNumOfCandidatesReturned, Double confidenceThreshold) {
        // Generated convenience method for identifyFromDynamicPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        IdentifyFromDynamicPersonGroupRequest requestObj
            = new IdentifyFromDynamicPersonGroupRequest(faceIds, dynamicPersonGroupId)
                .setMaxNumOfCandidatesReturned(maxNumOfCandidatesReturned).setConfidenceThreshold(confidenceThreshold);
        BinaryData request = BinaryData.fromObject(requestObj);
        return identifyFromDynamicPersonGroupWithResponse(request, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_IDENTIFY_RESULT);
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified
     * independently. The valid number of faceIds is between [1, 10].
     * @param dynamicPersonGroupId Id of the target PersonDirectory DynamicPersonGroup to match against.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IdentifyResult> identifyFromDynamicPersonGroup(List<String> faceIds, String dynamicPersonGroupId) {
        // Generated convenience method for identifyFromDynamicPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        IdentifyFromDynamicPersonGroupRequest requestObj
            = new IdentifyFromDynamicPersonGroupRequest(faceIds, dynamicPersonGroupId);
        BinaryData request = BinaryData.fromObject(requestObj);
        return identifyFromDynamicPersonGroupWithResponse(request, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_IDENTIFY_RESULT);
    }

    @Generated
    private static final TypeReference<List<IdentifyResult>> TYPE_REFERENCE_LIST_IDENTIFY_RESULT
        = new TypeReference<List<IdentifyResult>>() {
        };

    @Generated
    private static final TypeReference<List<DynamicPersonGroup>> TYPE_REFERENCE_LIST_DYNAMIC_PERSON_GROUP
        = new TypeReference<List<DynamicPersonGroup>>() {
        };
}
