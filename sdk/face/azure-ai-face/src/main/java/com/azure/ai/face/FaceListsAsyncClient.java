// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face;

import com.azure.ai.face.implementation.FaceListsImpl;
import com.azure.ai.face.implementation.models.FindSimilarFromFaceListRequest;
import com.azure.ai.face.models.AddFaceFromUrlContent;
import com.azure.ai.face.models.AddFaceResult;
import com.azure.ai.face.models.DetectionModel;
import com.azure.ai.face.models.FaceList;
import com.azure.ai.face.models.FindSimilarMatchMode;
import com.azure.ai.face.models.FindSimilarResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous FaceClient type.
 */
@ServiceClient(builder = FaceClientBuilder.class, isAsync = true)
public final class FaceListsAsyncClient {
    @Generated
    private final FaceListsImpl serviceClient;

    /**
     * Initializes an instance of FaceListsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    FaceListsAsyncClient(FaceListsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     faceListId: String (Required)
     *     persistedFaces (Optional): [
     *          (Optional){
     *             persistedFaceId: String (Required)
     *             userData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param faceListId ID of the container.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createListWithResponse(String faceListId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.createListWithResponseAsync(faceListId, resource, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param faceListId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteListWithResponse(String faceListId, RequestOptions requestOptions) {
        return this.serviceClient.deleteListWithResponseAsync(faceListId, requestOptions);
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     faceListId: String (Required)
     *     persistedFaces (Optional): [
     *          (Optional){
     *             persistedFaceId: String (Required)
     *             userData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param faceListId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face list is a list of faces, up to 1,000 faces along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getListWithResponse(String faceListId, RequestOptions requestOptions) {
        return this.serviceClient.getListWithResponseAsync(faceListId, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     faceListId: String (Required)
     *     persistedFaces (Optional): [
     *          (Optional){
     *             persistedFaceId: String (Required)
     *             userData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param faceListId ID of the container.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateListWithResponse(String faceListId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.updateListWithResponseAsync(faceListId, resource, requestOptions);
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>targetFace</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include
     * 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values:
     * "detection_01", "detection_02", "detection_03".</td>
     * </tr>
     * <tr>
     * <td>userData</td>
     * <td>String</td>
     * <td>No</td>
     * <td>User-provided data attached to the face. The size limit is 1KB.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param faceListId ID of the container.
     * @param addFaceFromUrlContent Model for add face by url.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model for add face result along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromUrlWithResponse(String faceListId, BinaryData addFaceFromUrlContent,
        RequestOptions requestOptions) {
        return this.serviceClient.addFaceFromUrlWithResponseAsync(faceListId, addFaceFromUrlContent, requestOptions);
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>targetFace</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include
     * 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values:
     * "detection_01", "detection_02", "detection_03".</td>
     * </tr>
     * <tr>
     * <td>userData</td>
     * <td>String</td>
     * <td>No</td>
     * <td>User-provided data attached to the face. The size limit is 1KB.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param faceListId ID of the container.
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model for add face result along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromStreamWithResponse(String faceListId, BinaryData imageContent,
        RequestOptions requestOptions) {
        return this.serviceClient.addFaceFromStreamWithResponseAsync(faceListId, imageContent, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param faceListId ID of the container.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFaceWithResponse(String faceListId, String persistedFaceId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteFaceWithResponseAsync(faceListId, persistedFaceId, requestOptions);
    }

    /**
     * Operation that lists resources in a paginated way.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         name: String (Required)
     *         userData: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         faceListId: String (Required)
     *         persistedFaces (Optional): [
     *              (Optional){
     *                 persistedFaceId: String (Required)
     *                 userData: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listListWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listListWithResponseAsync(requestOptions);
    }

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face
     * list.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceId: String (Required)
     *     maxNumOfCandidatesReturned: Integer (Optional)
     *     mode: String(matchPerson/matchFace) (Optional)
     *     faceListId: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         confidence: double (Required)
     *         faceId: String (Optional)
     *         persistedFaceId: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> findSimilarFromFaceListWithResponse(BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.findSimilarFromFaceListWithResponseAsync(request, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param faceListId ID of the container.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createList(String faceListId, FaceList resource) {
        // Generated convenience method for createListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createListWithResponse(faceListId, BinaryData.fromObject(resource), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param faceListId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteList(String faceListId) {
        // Generated convenience method for deleteListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteListWithResponse(faceListId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Resource read operation template.
     * 
     * @param faceListId ID of the container.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face list is a list of faces, up to 1,000 faces on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FaceList> getList(String faceListId, Boolean returnRecognitionModel) {
        // Generated convenience method for getListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getListWithResponse(faceListId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(FaceList.class));
    }

    /**
     * Resource read operation template.
     * 
     * @param faceListId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face list is a list of faces, up to 1,000 faces on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FaceList> getList(String faceListId) {
        // Generated convenience method for getListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getListWithResponse(faceListId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(FaceList.class));
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param faceListId ID of the container.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateList(String faceListId, FaceList resource) {
        // Generated convenience method for updateListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateListWithResponse(faceListId, BinaryData.fromObject(resource), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param faceListId ID of the container.
     * @param addFaceFromUrlContent Model for add face by url.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for add face result on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddFaceResult> addFaceFromUrl(String faceListId, AddFaceFromUrlContent addFaceFromUrlContent,
        String targetFace, DetectionModel detectionModel, String userData) {
        // Generated convenience method for addFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace", targetFace, false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addFaceFromUrlWithResponse(faceListId, BinaryData.fromObject(addFaceFromUrlContent), requestOptions)
            .flatMap(FluxUtil::toMono).map(protocolMethodData -> protocolMethodData.toObject(AddFaceResult.class));
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param faceListId ID of the container.
     * @param addFaceFromUrlContent Model for add face by url.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for add face result on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddFaceResult> addFaceFromUrl(String faceListId, AddFaceFromUrlContent addFaceFromUrlContent) {
        // Generated convenience method for addFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addFaceFromUrlWithResponse(faceListId, BinaryData.fromObject(addFaceFromUrlContent), requestOptions)
            .flatMap(FluxUtil::toMono).map(protocolMethodData -> protocolMethodData.toObject(AddFaceResult.class));
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param faceListId ID of the container.
     * @param imageContent The image to be analyzed.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for add face result on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddFaceResult> addFaceFromStream(String faceListId, BinaryData imageContent, String targetFace,
        DetectionModel detectionModel, String userData) {
        // Generated convenience method for addFaceFromStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace", targetFace, false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addFaceFromStreamWithResponse(faceListId, imageContent, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AddFaceResult.class));
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param faceListId ID of the container.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for add face result on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddFaceResult> addFaceFromStream(String faceListId, BinaryData imageContent) {
        // Generated convenience method for addFaceFromStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addFaceFromStreamWithResponse(faceListId, imageContent, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AddFaceResult.class));
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param faceListId ID of the container.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteFace(String faceListId, String persistedFaceId) {
        // Generated convenience method for deleteFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteFaceWithResponse(faceListId, persistedFaceId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Operation that lists resources in a paginated way.
     * 
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<FaceList>> listList(Boolean returnRecognitionModel) {
        // Generated convenience method for listListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return listListWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_FACE_LIST));
    }

    /**
     * Operation that lists resources in a paginated way.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<FaceList>> listList() {
        // Generated convenience method for listListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listListWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_FACE_LIST));
    }

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face
     * list.
     * 
     * @param faceId faceId of the face, comes from Face - Detect.
     * @param faceListId An existing user-specified unique candidate face list, created in FaceList - Create. Face list
     * contains a set of persistedFaceIds which are persisted and will never expire.
     * @param maxNumOfCandidatesReturned The number of top similar faces returned. The valid range is [1, 1000].It
     * defaults to 20.
     * @param mode Similar face searching mode. It can be 'matchPerson' or 'matchFace'. It defaults to 'matchPerson'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<FindSimilarResult>> findSimilarFromFaceList(String faceId, String faceListId,
        Integer maxNumOfCandidatesReturned, FindSimilarMatchMode mode) {
        // Generated convenience method for findSimilarFromFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        FindSimilarFromFaceListRequest requestObj = new FindSimilarFromFaceListRequest(faceId, faceListId)
            .setMaxNumOfCandidatesReturned(maxNumOfCandidatesReturned).setMode(mode);
        BinaryData request = BinaryData.fromObject(requestObj);
        return findSimilarFromFaceListWithResponse(request, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_FIND_SIMILAR_RESULT));
    }

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face
     * list.
     * 
     * @param faceId faceId of the face, comes from Face - Detect.
     * @param faceListId An existing user-specified unique candidate face list, created in FaceList - Create. Face list
     * contains a set of persistedFaceIds which are persisted and will never expire.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<FindSimilarResult>> findSimilarFromFaceList(String faceId, String faceListId) {
        // Generated convenience method for findSimilarFromFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        FindSimilarFromFaceListRequest requestObj = new FindSimilarFromFaceListRequest(faceId, faceListId);
        BinaryData request = BinaryData.fromObject(requestObj);
        return findSimilarFromFaceListWithResponse(request, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_FIND_SIMILAR_RESULT));
    }

    @Generated
    private static final TypeReference<List<FindSimilarResult>> TYPE_REFERENCE_LIST_FIND_SIMILAR_RESULT
        = new TypeReference<List<FindSimilarResult>>() {
        };

    @Generated
    private static final TypeReference<List<FaceList>> TYPE_REFERENCE_LIST_FACE_LIST
        = new TypeReference<List<FaceList>>() {
        };
}
