// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face;

import com.azure.ai.face.implementation.FaceClientImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.client.traits.ConfigurationTrait;
import com.azure.core.client.traits.EndpointTrait;
import com.azure.core.client.traits.HttpTrait;
import com.azure.core.client.traits.KeyCredentialTrait;
import com.azure.core.client.traits.TokenCredentialTrait;
import com.azure.core.credential.KeyCredential;
import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.KeyCredentialPolicy;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.builder.ClientBuilderUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.JacksonAdapter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * A builder for creating a new instance of the FaceClient type.
 */
@ServiceClientBuilder(
    serviceClients = {
        FaceClient.class,
        FaceListsClient.class,
        LargeFaceListsClient.class,
        FaceAsyncOperationsClient.class,
        PersonDirectoryPersonsClient.class,
        PersonDirectoryDynamicPersonGroupsClient.class,
        PersonGroupsClient.class,
        LargePersonGroupsClient.class,
        LivenessSessionsClient.class,
        LivenessWithVerifySessionsClient.class,
        FaceAsyncClient.class,
        FaceListsAsyncClient.class,
        LargeFaceListsAsyncClient.class,
        FaceAsyncOperationsAsyncClient.class,
        PersonDirectoryPersonsAsyncClient.class,
        PersonDirectoryDynamicPersonGroupsAsyncClient.class,
        PersonGroupsAsyncClient.class,
        LargePersonGroupsAsyncClient.class,
        LivenessSessionsAsyncClient.class,
        LivenessWithVerifySessionsAsyncClient.class })
public final class FaceClientBuilder implements HttpTrait<FaceClientBuilder>, ConfigurationTrait<FaceClientBuilder>,
    TokenCredentialTrait<FaceClientBuilder>, KeyCredentialTrait<FaceClientBuilder>, EndpointTrait<FaceClientBuilder> {
    @Generated
    private static final String SDK_NAME = "name";

    @Generated
    private static final String SDK_VERSION = "version";

    @Generated
    private static final String[] DEFAULT_SCOPES = new String[] { "https://cognitiveservices.azure.com/.default" };

    @Generated
    private static final Map<String, String> PROPERTIES = CoreUtils.getProperties("azure-ai-face.properties");

    @Generated
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Create an instance of the FaceClientBuilder.
     */
    @Generated
    public FaceClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP pipeline to send requests through.
     */
    @Generated
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public FaceClientBuilder pipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.info("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    @Generated
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public FaceClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Generated
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public FaceClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The client options such as application ID and custom headers to set on a request.
     */
    @Generated
    private ClientOptions clientOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public FaceClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Generated
    private RetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public FaceClientBuilder retryOptions(RetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public FaceClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Generated
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public FaceClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The TokenCredential used for authentication.
     */
    @Generated
    private TokenCredential tokenCredential;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public FaceClientBuilder credential(TokenCredential tokenCredential) {
        this.tokenCredential = tokenCredential;
        return this;
    }

    /*
     * The KeyCredential used for authentication.
     */
    @Generated
    private KeyCredential keyCredential;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public FaceClientBuilder credential(KeyCredential keyCredential) {
        this.keyCredential = keyCredential;
        return this;
    }

    /*
     * The service endpoint
     */
    @Generated
    private String endpoint;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public FaceClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Service version
     */
    @Generated
    private FaceServiceVersion serviceVersion;

    /**
     * Sets Service version.
     * 
     * @param serviceVersion the serviceVersion value.
     * @return the FaceClientBuilder.
     */
    @Generated
    public FaceClientBuilder serviceVersion(FaceServiceVersion serviceVersion) {
        this.serviceVersion = serviceVersion;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if applicable.
     */
    @Generated
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     * 
     * @param retryPolicy the retryPolicy value.
     * @return the FaceClientBuilder.
     */
    @Generated
    public FaceClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /**
     * Builds an instance of FaceClientImpl with the provided parameters.
     * 
     * @return an instance of FaceClientImpl.
     */
    @Generated
    private FaceClientImpl buildInnerClient() {
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        FaceServiceVersion localServiceVersion
            = (serviceVersion != null) ? serviceVersion : FaceServiceVersion.getLatest();
        FaceClientImpl client = new FaceClientImpl(localPipeline, JacksonAdapter.createDefaultSerializerAdapter(),
            this.endpoint, localServiceVersion);
        return client;
    }

    @Generated
    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = PROPERTIES.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        policies.add(new RequestIdPolicy());
        policies.add(new AddHeadersFromContextPolicy());
        HttpHeaders headers = new HttpHeaders();
        localClientOptions.getHeaders()
            .forEach(header -> headers.set(HttpHeaderName.fromString(header.getName()), header.getValue()));
        if (headers.getSize() > 0) {
            policies.add(new AddHeadersPolicy(headers));
        }
        this.pipelinePolicies.stream().filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));
        policies.add(new AddDatePolicy());
        if (keyCredential != null) {
            policies.add(new KeyCredentialPolicy("Ocp-Apim-Subscription-Key", keyCredential));
        }
        if (tokenCredential != null) {
            policies.add(new BearerTokenAuthenticationPolicy(tokenCredential, DEFAULT_SCOPES));
        }
        this.pipelinePolicies.stream().filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
        HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0]))
            .httpClient(httpClient).clientOptions(localClientOptions).build();
        return httpPipeline;
    }

    /**
     * Builds an instance of FaceAsyncClient class.
     * 
     * @return an instance of FaceAsyncClient.
     */
    @Generated
    public FaceAsyncClient buildAsyncClient() {
        return new FaceAsyncClient(buildInnerClient());
    }

    /**
     * Builds an instance of FaceListsAsyncClient class.
     * 
     * @return an instance of FaceListsAsyncClient.
     */
    @Generated
    public FaceListsAsyncClient buildFaceListsAsyncClient() {
        return new FaceListsAsyncClient(buildInnerClient().getFaceLists());
    }

    /**
     * Builds an instance of LargeFaceListsAsyncClient class.
     * 
     * @return an instance of LargeFaceListsAsyncClient.
     */
    @Generated
    public LargeFaceListsAsyncClient buildLargeFaceListsAsyncClient() {
        return new LargeFaceListsAsyncClient(buildInnerClient().getLargeFaceLists());
    }

    /**
     * Builds an instance of FaceAsyncOperationsAsyncClient class.
     * 
     * @return an instance of FaceAsyncOperationsAsyncClient.
     */
    @Generated
    public FaceAsyncOperationsAsyncClient buildFaceAsyncOperationsAsyncClient() {
        return new FaceAsyncOperationsAsyncClient(buildInnerClient().getFaceAsyncOperations());
    }

    /**
     * Builds an instance of PersonDirectoryPersonsAsyncClient class.
     * 
     * @return an instance of PersonDirectoryPersonsAsyncClient.
     */
    @Generated
    public PersonDirectoryPersonsAsyncClient buildPersonDirectoryPersonsAsyncClient() {
        return new PersonDirectoryPersonsAsyncClient(buildInnerClient().getPersonDirectoryPersons());
    }

    /**
     * Builds an instance of PersonDirectoryDynamicPersonGroupsAsyncClient class.
     * 
     * @return an instance of PersonDirectoryDynamicPersonGroupsAsyncClient.
     */
    @Generated
    public PersonDirectoryDynamicPersonGroupsAsyncClient buildPersonDirectoryDynamicPersonGroupsAsyncClient() {
        return new PersonDirectoryDynamicPersonGroupsAsyncClient(
            buildInnerClient().getPersonDirectoryDynamicPersonGroups());
    }

    /**
     * Builds an instance of PersonGroupsAsyncClient class.
     * 
     * @return an instance of PersonGroupsAsyncClient.
     */
    @Generated
    public PersonGroupsAsyncClient buildPersonGroupsAsyncClient() {
        return new PersonGroupsAsyncClient(buildInnerClient().getPersonGroups());
    }

    /**
     * Builds an instance of LargePersonGroupsAsyncClient class.
     * 
     * @return an instance of LargePersonGroupsAsyncClient.
     */
    @Generated
    public LargePersonGroupsAsyncClient buildLargePersonGroupsAsyncClient() {
        return new LargePersonGroupsAsyncClient(buildInnerClient().getLargePersonGroups());
    }

    /**
     * Builds an instance of LivenessSessionsAsyncClient class.
     * 
     * @return an instance of LivenessSessionsAsyncClient.
     */
    @Generated
    public LivenessSessionsAsyncClient buildLivenessSessionsAsyncClient() {
        return new LivenessSessionsAsyncClient(buildInnerClient().getLivenessSessions());
    }

    /**
     * Builds an instance of LivenessWithVerifySessionsAsyncClient class.
     * 
     * @return an instance of LivenessWithVerifySessionsAsyncClient.
     */
    @Generated
    public LivenessWithVerifySessionsAsyncClient buildLivenessWithVerifySessionsAsyncClient() {
        return new LivenessWithVerifySessionsAsyncClient(buildInnerClient().getLivenessWithVerifySessions());
    }

    /**
     * Builds an instance of FaceClient class.
     * 
     * @return an instance of FaceClient.
     */
    @Generated
    public FaceClient buildClient() {
        return new FaceClient(buildInnerClient());
    }

    /**
     * Builds an instance of FaceListsClient class.
     * 
     * @return an instance of FaceListsClient.
     */
    @Generated
    public FaceListsClient buildFaceListsClient() {
        return new FaceListsClient(buildInnerClient().getFaceLists());
    }

    /**
     * Builds an instance of LargeFaceListsClient class.
     * 
     * @return an instance of LargeFaceListsClient.
     */
    @Generated
    public LargeFaceListsClient buildLargeFaceListsClient() {
        return new LargeFaceListsClient(buildInnerClient().getLargeFaceLists());
    }

    /**
     * Builds an instance of FaceAsyncOperationsClient class.
     * 
     * @return an instance of FaceAsyncOperationsClient.
     */
    @Generated
    public FaceAsyncOperationsClient buildFaceAsyncOperationsClient() {
        return new FaceAsyncOperationsClient(buildInnerClient().getFaceAsyncOperations());
    }

    /**
     * Builds an instance of PersonDirectoryPersonsClient class.
     * 
     * @return an instance of PersonDirectoryPersonsClient.
     */
    @Generated
    public PersonDirectoryPersonsClient buildPersonDirectoryPersonsClient() {
        return new PersonDirectoryPersonsClient(buildInnerClient().getPersonDirectoryPersons());
    }

    /**
     * Builds an instance of PersonDirectoryDynamicPersonGroupsClient class.
     * 
     * @return an instance of PersonDirectoryDynamicPersonGroupsClient.
     */
    @Generated
    public PersonDirectoryDynamicPersonGroupsClient buildPersonDirectoryDynamicPersonGroupsClient() {
        return new PersonDirectoryDynamicPersonGroupsClient(buildInnerClient().getPersonDirectoryDynamicPersonGroups());
    }

    /**
     * Builds an instance of PersonGroupsClient class.
     * 
     * @return an instance of PersonGroupsClient.
     */
    @Generated
    public PersonGroupsClient buildPersonGroupsClient() {
        return new PersonGroupsClient(buildInnerClient().getPersonGroups());
    }

    /**
     * Builds an instance of LargePersonGroupsClient class.
     * 
     * @return an instance of LargePersonGroupsClient.
     */
    @Generated
    public LargePersonGroupsClient buildLargePersonGroupsClient() {
        return new LargePersonGroupsClient(buildInnerClient().getLargePersonGroups());
    }

    /**
     * Builds an instance of LivenessSessionsClient class.
     * 
     * @return an instance of LivenessSessionsClient.
     */
    @Generated
    public LivenessSessionsClient buildLivenessSessionsClient() {
        return new LivenessSessionsClient(buildInnerClient().getLivenessSessions());
    }

    /**
     * Builds an instance of LivenessWithVerifySessionsClient class.
     * 
     * @return an instance of LivenessWithVerifySessionsClient.
     */
    @Generated
    public LivenessWithVerifySessionsClient buildLivenessWithVerifySessionsClient() {
        return new LivenessWithVerifySessionsClient(buildInnerClient().getLivenessWithVerifySessions());
    }

    private static final ClientLogger LOGGER = new ClientLogger(FaceClientBuilder.class);
}
