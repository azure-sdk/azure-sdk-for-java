// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face.implementation;

import com.azure.ai.face.FaceServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the FaceClient type.
 */
public final class FaceClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final FaceClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final FaceServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public FaceServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * The FaceListsImpl object to access its operations.
     */
    private final FaceListsImpl faceLists;

    /**
     * Gets the FaceListsImpl object to access its operations.
     * 
     * @return the FaceListsImpl object.
     */
    public FaceListsImpl getFaceLists() {
        return this.faceLists;
    }

    /**
     * The LargeFaceListsImpl object to access its operations.
     */
    private final LargeFaceListsImpl largeFaceLists;

    /**
     * Gets the LargeFaceListsImpl object to access its operations.
     * 
     * @return the LargeFaceListsImpl object.
     */
    public LargeFaceListsImpl getLargeFaceLists() {
        return this.largeFaceLists;
    }

    /**
     * The FaceAsyncOperationsImpl object to access its operations.
     */
    private final FaceAsyncOperationsImpl faceAsyncOperations;

    /**
     * Gets the FaceAsyncOperationsImpl object to access its operations.
     * 
     * @return the FaceAsyncOperationsImpl object.
     */
    public FaceAsyncOperationsImpl getFaceAsyncOperations() {
        return this.faceAsyncOperations;
    }

    /**
     * The PersonDirectoryPersonsImpl object to access its operations.
     */
    private final PersonDirectoryPersonsImpl personDirectoryPersons;

    /**
     * Gets the PersonDirectoryPersonsImpl object to access its operations.
     * 
     * @return the PersonDirectoryPersonsImpl object.
     */
    public PersonDirectoryPersonsImpl getPersonDirectoryPersons() {
        return this.personDirectoryPersons;
    }

    /**
     * The PersonDirectoryDynamicPersonGroupsImpl object to access its operations.
     */
    private final PersonDirectoryDynamicPersonGroupsImpl personDirectoryDynamicPersonGroups;

    /**
     * Gets the PersonDirectoryDynamicPersonGroupsImpl object to access its operations.
     * 
     * @return the PersonDirectoryDynamicPersonGroupsImpl object.
     */
    public PersonDirectoryDynamicPersonGroupsImpl getPersonDirectoryDynamicPersonGroups() {
        return this.personDirectoryDynamicPersonGroups;
    }

    /**
     * The PersonGroupsImpl object to access its operations.
     */
    private final PersonGroupsImpl personGroups;

    /**
     * Gets the PersonGroupsImpl object to access its operations.
     * 
     * @return the PersonGroupsImpl object.
     */
    public PersonGroupsImpl getPersonGroups() {
        return this.personGroups;
    }

    /**
     * The LargePersonGroupsImpl object to access its operations.
     */
    private final LargePersonGroupsImpl largePersonGroups;

    /**
     * Gets the LargePersonGroupsImpl object to access its operations.
     * 
     * @return the LargePersonGroupsImpl object.
     */
    public LargePersonGroupsImpl getLargePersonGroups() {
        return this.largePersonGroups;
    }

    /**
     * The LivenessSessionsImpl object to access its operations.
     */
    private final LivenessSessionsImpl livenessSessions;

    /**
     * Gets the LivenessSessionsImpl object to access its operations.
     * 
     * @return the LivenessSessionsImpl object.
     */
    public LivenessSessionsImpl getLivenessSessions() {
        return this.livenessSessions;
    }

    /**
     * The LivenessWithVerifySessionsImpl object to access its operations.
     */
    private final LivenessWithVerifySessionsImpl livenessWithVerifySessions;

    /**
     * Gets the LivenessWithVerifySessionsImpl object to access its operations.
     * 
     * @return the LivenessWithVerifySessionsImpl object.
     */
    public LivenessWithVerifySessionsImpl getLivenessWithVerifySessions() {
        return this.livenessWithVerifySessions;
    }

    /**
     * Initializes an instance of FaceClient client.
     * 
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public FaceClientImpl(String endpoint, FaceServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of FaceClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public FaceClientImpl(HttpPipeline httpPipeline, String endpoint, FaceServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of FaceClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public FaceClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        FaceServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.faceLists = new FaceListsImpl(this);
        this.largeFaceLists = new LargeFaceListsImpl(this);
        this.faceAsyncOperations = new FaceAsyncOperationsImpl(this);
        this.personDirectoryPersons = new PersonDirectoryPersonsImpl(this);
        this.personDirectoryDynamicPersonGroups = new PersonDirectoryDynamicPersonGroupsImpl(this);
        this.personGroups = new PersonGroupsImpl(this);
        this.largePersonGroups = new LargePersonGroupsImpl(this);
        this.livenessSessions = new LivenessSessionsImpl(this);
        this.livenessWithVerifySessions = new LivenessWithVerifySessionsImpl(this);
        this.service = RestProxy.create(FaceClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for FaceClient to be used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "FaceClient")
    public interface FaceClientService {
        @Post("/face/{apiVersion}/detect")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> detectFromUrl(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData request,
            RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/detect")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> detectFromUrlSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData request,
            RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/detect")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> detectFromStream(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/octet-stream") BinaryData imageContent,
            RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/detect")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> detectFromStreamSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/octet-stream") BinaryData imageContent,
            RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/findsimilars")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> findSimilar(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/findsimilars")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> findSimilarSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/verify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> verify(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/verify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> verifySync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/group")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> group(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/group")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> groupSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>returnFaceId</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return faceIds of the detected faces or not. The default value is true.</td>
     * </tr>
     * <tr>
     * <td>returnFaceLandmarks</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return face landmarks of the detected faces or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>returnFaceAttributes</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Analyze and return the one or more specified face attributes in the comma-separated string like
     * 'returnFaceAttributes=headPose,glasses'. Supported face attributes include headPose, glasses, occlusion,
     * accessories, blur, exposure, noise, mask, and qualityForRecognition. Face attribute analysis has additional
     * computational and time cost.</td>
     * </tr>
     * <tr>
     * <td>recognitionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'recognitionModel' associated with the detected faceIds. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".</td>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Allowed values: "detection_01", "detection_02",
     * "detection_03".</td>
     * </tr>
     * <tr>
     * <td>faceIdTimeToLive</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The
     * default value is 86400 (24 hours).</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Required)
     *         recognitionModel: String (Optional)
     *         faceRectangle (Optional): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         faceLandmarks (Optional): {
     *             pupilLeft (Required): {
     *                 x: double (Required)
     *                 y: double (Required)
     *             }
     *             pupilRight (Required): (recursive schema, see pupilRight above)
     *             noseTip (Required): (recursive schema, see noseTip above)
     *             mouthLeft (Required): (recursive schema, see mouthLeft above)
     *             mouthRight (Required): (recursive schema, see mouthRight above)
     *             eyebrowLeftOuter (Required): (recursive schema, see eyebrowLeftOuter above)
     *             eyebrowLeftInner (Required): (recursive schema, see eyebrowLeftInner above)
     *             eyeLeftOuter (Required): (recursive schema, see eyeLeftOuter above)
     *             eyeLeftTop (Required): (recursive schema, see eyeLeftTop above)
     *             eyeLeftBottom (Required): (recursive schema, see eyeLeftBottom above)
     *             eyeLeftInner (Required): (recursive schema, see eyeLeftInner above)
     *             eyebrowRightInner (Required): (recursive schema, see eyebrowRightInner above)
     *             eyebrowRightOuter (Required): (recursive schema, see eyebrowRightOuter above)
     *             eyeRightInner (Required): (recursive schema, see eyeRightInner above)
     *             eyeRightTop (Required): (recursive schema, see eyeRightTop above)
     *             eyeRightBottom (Required): (recursive schema, see eyeRightBottom above)
     *             eyeRightOuter (Required): (recursive schema, see eyeRightOuter above)
     *             noseRootLeft (Required): (recursive schema, see noseRootLeft above)
     *             noseRootRight (Required): (recursive schema, see noseRootRight above)
     *             noseLeftAlarTop (Required): (recursive schema, see noseLeftAlarTop above)
     *             noseRightAlarTop (Required): (recursive schema, see noseRightAlarTop above)
     *             noseLeftAlarOutTip (Required): (recursive schema, see noseLeftAlarOutTip above)
     *             noseRightAlarOutTip (Required): (recursive schema, see noseRightAlarOutTip above)
     *             upperLipTop (Required): (recursive schema, see upperLipTop above)
     *             upperLipBottom (Required): (recursive schema, see upperLipBottom above)
     *             underLipTop (Required): (recursive schema, see underLipTop above)
     *             underLipBottom (Required): (recursive schema, see underLipBottom above)
     *         }
     *         faceAttributes (Optional): {
     *             age: Integer (Optional)
     *             smile: Double (Optional)
     *             facialHair (Optional): {
     *                 moustache: double (Required)
     *                 beard: double (Required)
     *                 sideburns: double (Required)
     *             }
     *             glasses: String(noGlasses/readingGlasses/sunglasses/swimmingGoggles) (Optional)
     *             headPose (Optional): {
     *                 pitch: double (Required)
     *                 roll: double (Required)
     *                 yaw: double (Required)
     *             }
     *             hair (Optional): {
     *                 bald: double (Required)
     *                 invisible: boolean (Required)
     *                 hairColor (Required): [
     *                      (Required){
     *                         color: String(unknown/white/gray/blond/brown/red/black/other) (Required)
     *                         confidence: double (Required)
     *                     }
     *                 ]
     *             }
     *             occlusion (Optional): {
     *                 foreheadOccluded: boolean (Required)
     *                 eyeOccluded: boolean (Required)
     *                 mouthOccluded: boolean (Required)
     *             }
     *             accessories (Optional): [
     *                  (Optional){
     *                     type: String(headwear/glasses/mask) (Required)
     *                     confidence: double (Required)
     *                 }
     *             ]
     *             blur (Optional): {
     *                 blurLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             exposure (Optional): {
     *                 exposureLevel: String(underExposure/goodExposure/overExposure) (Required)
     *                 value: double (Required)
     *             }
     *             noise (Optional): {
     *                 noiseLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             mask (Optional): {
     *                 noseAndMouthCovered: boolean (Required)
     *                 type: String(faceMask/noMask/otherMaskOrOcclusion/uncertain) (Required)
     *             }
     *             qualityForRecognition: String(low/medium/high) (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> detectFromUrlWithResponseAsync(BinaryData request,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.detectFromUrl(this.getEndpoint(),
            this.getServiceVersion().getVersion(), contentType, accept, request, requestOptions, context));
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>returnFaceId</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return faceIds of the detected faces or not. The default value is true.</td>
     * </tr>
     * <tr>
     * <td>returnFaceLandmarks</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return face landmarks of the detected faces or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>returnFaceAttributes</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Analyze and return the one or more specified face attributes in the comma-separated string like
     * 'returnFaceAttributes=headPose,glasses'. Supported face attributes include headPose, glasses, occlusion,
     * accessories, blur, exposure, noise, mask, and qualityForRecognition. Face attribute analysis has additional
     * computational and time cost.</td>
     * </tr>
     * <tr>
     * <td>recognitionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'recognitionModel' associated with the detected faceIds. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".</td>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Allowed values: "detection_01", "detection_02",
     * "detection_03".</td>
     * </tr>
     * <tr>
     * <td>faceIdTimeToLive</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The
     * default value is 86400 (24 hours).</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Required)
     *         recognitionModel: String (Optional)
     *         faceRectangle (Optional): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         faceLandmarks (Optional): {
     *             pupilLeft (Required): {
     *                 x: double (Required)
     *                 y: double (Required)
     *             }
     *             pupilRight (Required): (recursive schema, see pupilRight above)
     *             noseTip (Required): (recursive schema, see noseTip above)
     *             mouthLeft (Required): (recursive schema, see mouthLeft above)
     *             mouthRight (Required): (recursive schema, see mouthRight above)
     *             eyebrowLeftOuter (Required): (recursive schema, see eyebrowLeftOuter above)
     *             eyebrowLeftInner (Required): (recursive schema, see eyebrowLeftInner above)
     *             eyeLeftOuter (Required): (recursive schema, see eyeLeftOuter above)
     *             eyeLeftTop (Required): (recursive schema, see eyeLeftTop above)
     *             eyeLeftBottom (Required): (recursive schema, see eyeLeftBottom above)
     *             eyeLeftInner (Required): (recursive schema, see eyeLeftInner above)
     *             eyebrowRightInner (Required): (recursive schema, see eyebrowRightInner above)
     *             eyebrowRightOuter (Required): (recursive schema, see eyebrowRightOuter above)
     *             eyeRightInner (Required): (recursive schema, see eyeRightInner above)
     *             eyeRightTop (Required): (recursive schema, see eyeRightTop above)
     *             eyeRightBottom (Required): (recursive schema, see eyeRightBottom above)
     *             eyeRightOuter (Required): (recursive schema, see eyeRightOuter above)
     *             noseRootLeft (Required): (recursive schema, see noseRootLeft above)
     *             noseRootRight (Required): (recursive schema, see noseRootRight above)
     *             noseLeftAlarTop (Required): (recursive schema, see noseLeftAlarTop above)
     *             noseRightAlarTop (Required): (recursive schema, see noseRightAlarTop above)
     *             noseLeftAlarOutTip (Required): (recursive schema, see noseLeftAlarOutTip above)
     *             noseRightAlarOutTip (Required): (recursive schema, see noseRightAlarOutTip above)
     *             upperLipTop (Required): (recursive schema, see upperLipTop above)
     *             upperLipBottom (Required): (recursive schema, see upperLipBottom above)
     *             underLipTop (Required): (recursive schema, see underLipTop above)
     *             underLipBottom (Required): (recursive schema, see underLipBottom above)
     *         }
     *         faceAttributes (Optional): {
     *             age: Integer (Optional)
     *             smile: Double (Optional)
     *             facialHair (Optional): {
     *                 moustache: double (Required)
     *                 beard: double (Required)
     *                 sideburns: double (Required)
     *             }
     *             glasses: String(noGlasses/readingGlasses/sunglasses/swimmingGoggles) (Optional)
     *             headPose (Optional): {
     *                 pitch: double (Required)
     *                 roll: double (Required)
     *                 yaw: double (Required)
     *             }
     *             hair (Optional): {
     *                 bald: double (Required)
     *                 invisible: boolean (Required)
     *                 hairColor (Required): [
     *                      (Required){
     *                         color: String(unknown/white/gray/blond/brown/red/black/other) (Required)
     *                         confidence: double (Required)
     *                     }
     *                 ]
     *             }
     *             occlusion (Optional): {
     *                 foreheadOccluded: boolean (Required)
     *                 eyeOccluded: boolean (Required)
     *                 mouthOccluded: boolean (Required)
     *             }
     *             accessories (Optional): [
     *                  (Optional){
     *                     type: String(headwear/glasses/mask) (Required)
     *                     confidence: double (Required)
     *                 }
     *             ]
     *             blur (Optional): {
     *                 blurLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             exposure (Optional): {
     *                 exposureLevel: String(underExposure/goodExposure/overExposure) (Required)
     *                 value: double (Required)
     *             }
     *             noise (Optional): {
     *                 noiseLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             mask (Optional): {
     *                 noseAndMouthCovered: boolean (Required)
     *                 type: String(faceMask/noMask/otherMaskOrOcclusion/uncertain) (Required)
     *             }
     *             qualityForRecognition: String(low/medium/high) (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectFromUrlWithResponse(BinaryData request, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.detectFromUrlSync(this.getEndpoint(), this.getServiceVersion().getVersion(), contentType, accept,
            request, requestOptions, Context.NONE);
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>returnFaceId</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return faceIds of the detected faces or not. The default value is true.</td>
     * </tr>
     * <tr>
     * <td>returnFaceLandmarks</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return face landmarks of the detected faces or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>returnFaceAttributes</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Analyze and return the one or more specified face attributes in the comma-separated string like
     * 'returnFaceAttributes=headPose,glasses'. Supported face attributes include headPose, glasses, occlusion,
     * accessories, blur, exposure, noise, mask, and qualityForRecognition. Face attribute analysis has additional
     * computational and time cost.</td>
     * </tr>
     * <tr>
     * <td>recognitionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'recognitionModel' associated with the detected faceIds. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".</td>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Allowed values: "detection_01", "detection_02",
     * "detection_03".</td>
     * </tr>
     * <tr>
     * <td>faceIdTimeToLive</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The
     * default value is 86400 (24 hours).</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Required)
     *         recognitionModel: String (Optional)
     *         faceRectangle (Optional): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         faceLandmarks (Optional): {
     *             pupilLeft (Required): {
     *                 x: double (Required)
     *                 y: double (Required)
     *             }
     *             pupilRight (Required): (recursive schema, see pupilRight above)
     *             noseTip (Required): (recursive schema, see noseTip above)
     *             mouthLeft (Required): (recursive schema, see mouthLeft above)
     *             mouthRight (Required): (recursive schema, see mouthRight above)
     *             eyebrowLeftOuter (Required): (recursive schema, see eyebrowLeftOuter above)
     *             eyebrowLeftInner (Required): (recursive schema, see eyebrowLeftInner above)
     *             eyeLeftOuter (Required): (recursive schema, see eyeLeftOuter above)
     *             eyeLeftTop (Required): (recursive schema, see eyeLeftTop above)
     *             eyeLeftBottom (Required): (recursive schema, see eyeLeftBottom above)
     *             eyeLeftInner (Required): (recursive schema, see eyeLeftInner above)
     *             eyebrowRightInner (Required): (recursive schema, see eyebrowRightInner above)
     *             eyebrowRightOuter (Required): (recursive schema, see eyebrowRightOuter above)
     *             eyeRightInner (Required): (recursive schema, see eyeRightInner above)
     *             eyeRightTop (Required): (recursive schema, see eyeRightTop above)
     *             eyeRightBottom (Required): (recursive schema, see eyeRightBottom above)
     *             eyeRightOuter (Required): (recursive schema, see eyeRightOuter above)
     *             noseRootLeft (Required): (recursive schema, see noseRootLeft above)
     *             noseRootRight (Required): (recursive schema, see noseRootRight above)
     *             noseLeftAlarTop (Required): (recursive schema, see noseLeftAlarTop above)
     *             noseRightAlarTop (Required): (recursive schema, see noseRightAlarTop above)
     *             noseLeftAlarOutTip (Required): (recursive schema, see noseLeftAlarOutTip above)
     *             noseRightAlarOutTip (Required): (recursive schema, see noseRightAlarOutTip above)
     *             upperLipTop (Required): (recursive schema, see upperLipTop above)
     *             upperLipBottom (Required): (recursive schema, see upperLipBottom above)
     *             underLipTop (Required): (recursive schema, see underLipTop above)
     *             underLipBottom (Required): (recursive schema, see underLipBottom above)
     *         }
     *         faceAttributes (Optional): {
     *             age: Integer (Optional)
     *             smile: Double (Optional)
     *             facialHair (Optional): {
     *                 moustache: double (Required)
     *                 beard: double (Required)
     *                 sideburns: double (Required)
     *             }
     *             glasses: String(noGlasses/readingGlasses/sunglasses/swimmingGoggles) (Optional)
     *             headPose (Optional): {
     *                 pitch: double (Required)
     *                 roll: double (Required)
     *                 yaw: double (Required)
     *             }
     *             hair (Optional): {
     *                 bald: double (Required)
     *                 invisible: boolean (Required)
     *                 hairColor (Required): [
     *                      (Required){
     *                         color: String(unknown/white/gray/blond/brown/red/black/other) (Required)
     *                         confidence: double (Required)
     *                     }
     *                 ]
     *             }
     *             occlusion (Optional): {
     *                 foreheadOccluded: boolean (Required)
     *                 eyeOccluded: boolean (Required)
     *                 mouthOccluded: boolean (Required)
     *             }
     *             accessories (Optional): [
     *                  (Optional){
     *                     type: String(headwear/glasses/mask) (Required)
     *                     confidence: double (Required)
     *                 }
     *             ]
     *             blur (Optional): {
     *                 blurLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             exposure (Optional): {
     *                 exposureLevel: String(underExposure/goodExposure/overExposure) (Required)
     *                 value: double (Required)
     *             }
     *             noise (Optional): {
     *                 noiseLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             mask (Optional): {
     *                 noseAndMouthCovered: boolean (Required)
     *                 type: String(faceMask/noMask/otherMaskOrOcclusion/uncertain) (Required)
     *             }
     *             qualityForRecognition: String(low/medium/high) (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     * 
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> detectFromStreamWithResponseAsync(BinaryData imageContent,
        RequestOptions requestOptions) {
        final String contentType = "application/octet-stream";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.detectFromStream(this.getEndpoint(),
            this.getServiceVersion().getVersion(), contentType, accept, imageContent, requestOptions, context));
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>returnFaceId</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return faceIds of the detected faces or not. The default value is true.</td>
     * </tr>
     * <tr>
     * <td>returnFaceLandmarks</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return face landmarks of the detected faces or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>returnFaceAttributes</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Analyze and return the one or more specified face attributes in the comma-separated string like
     * 'returnFaceAttributes=headPose,glasses'. Supported face attributes include headPose, glasses, occlusion,
     * accessories, blur, exposure, noise, mask, and qualityForRecognition. Face attribute analysis has additional
     * computational and time cost.</td>
     * </tr>
     * <tr>
     * <td>recognitionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'recognitionModel' associated with the detected faceIds. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".</td>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Allowed values: "detection_01", "detection_02",
     * "detection_03".</td>
     * </tr>
     * <tr>
     * <td>faceIdTimeToLive</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The
     * default value is 86400 (24 hours).</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Required)
     *         recognitionModel: String (Optional)
     *         faceRectangle (Optional): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         faceLandmarks (Optional): {
     *             pupilLeft (Required): {
     *                 x: double (Required)
     *                 y: double (Required)
     *             }
     *             pupilRight (Required): (recursive schema, see pupilRight above)
     *             noseTip (Required): (recursive schema, see noseTip above)
     *             mouthLeft (Required): (recursive schema, see mouthLeft above)
     *             mouthRight (Required): (recursive schema, see mouthRight above)
     *             eyebrowLeftOuter (Required): (recursive schema, see eyebrowLeftOuter above)
     *             eyebrowLeftInner (Required): (recursive schema, see eyebrowLeftInner above)
     *             eyeLeftOuter (Required): (recursive schema, see eyeLeftOuter above)
     *             eyeLeftTop (Required): (recursive schema, see eyeLeftTop above)
     *             eyeLeftBottom (Required): (recursive schema, see eyeLeftBottom above)
     *             eyeLeftInner (Required): (recursive schema, see eyeLeftInner above)
     *             eyebrowRightInner (Required): (recursive schema, see eyebrowRightInner above)
     *             eyebrowRightOuter (Required): (recursive schema, see eyebrowRightOuter above)
     *             eyeRightInner (Required): (recursive schema, see eyeRightInner above)
     *             eyeRightTop (Required): (recursive schema, see eyeRightTop above)
     *             eyeRightBottom (Required): (recursive schema, see eyeRightBottom above)
     *             eyeRightOuter (Required): (recursive schema, see eyeRightOuter above)
     *             noseRootLeft (Required): (recursive schema, see noseRootLeft above)
     *             noseRootRight (Required): (recursive schema, see noseRootRight above)
     *             noseLeftAlarTop (Required): (recursive schema, see noseLeftAlarTop above)
     *             noseRightAlarTop (Required): (recursive schema, see noseRightAlarTop above)
     *             noseLeftAlarOutTip (Required): (recursive schema, see noseLeftAlarOutTip above)
     *             noseRightAlarOutTip (Required): (recursive schema, see noseRightAlarOutTip above)
     *             upperLipTop (Required): (recursive schema, see upperLipTop above)
     *             upperLipBottom (Required): (recursive schema, see upperLipBottom above)
     *             underLipTop (Required): (recursive schema, see underLipTop above)
     *             underLipBottom (Required): (recursive schema, see underLipBottom above)
     *         }
     *         faceAttributes (Optional): {
     *             age: Integer (Optional)
     *             smile: Double (Optional)
     *             facialHair (Optional): {
     *                 moustache: double (Required)
     *                 beard: double (Required)
     *                 sideburns: double (Required)
     *             }
     *             glasses: String(noGlasses/readingGlasses/sunglasses/swimmingGoggles) (Optional)
     *             headPose (Optional): {
     *                 pitch: double (Required)
     *                 roll: double (Required)
     *                 yaw: double (Required)
     *             }
     *             hair (Optional): {
     *                 bald: double (Required)
     *                 invisible: boolean (Required)
     *                 hairColor (Required): [
     *                      (Required){
     *                         color: String(unknown/white/gray/blond/brown/red/black/other) (Required)
     *                         confidence: double (Required)
     *                     }
     *                 ]
     *             }
     *             occlusion (Optional): {
     *                 foreheadOccluded: boolean (Required)
     *                 eyeOccluded: boolean (Required)
     *                 mouthOccluded: boolean (Required)
     *             }
     *             accessories (Optional): [
     *                  (Optional){
     *                     type: String(headwear/glasses/mask) (Required)
     *                     confidence: double (Required)
     *                 }
     *             ]
     *             blur (Optional): {
     *                 blurLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             exposure (Optional): {
     *                 exposureLevel: String(underExposure/goodExposure/overExposure) (Required)
     *                 value: double (Required)
     *             }
     *             noise (Optional): {
     *                 noiseLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             mask (Optional): {
     *                 noseAndMouthCovered: boolean (Required)
     *                 type: String(faceMask/noMask/otherMaskOrOcclusion/uncertain) (Required)
     *             }
     *             qualityForRecognition: String(low/medium/high) (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     * 
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectFromStreamWithResponse(BinaryData imageContent, RequestOptions requestOptions) {
        final String contentType = "application/octet-stream";
        final String accept = "application/json";
        return service.detectFromStreamSync(this.getEndpoint(), this.getServiceVersion().getVersion(), contentType,
            accept, imageContent, requestOptions, Context.NONE);
    }

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face
     * list.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceId: String (Required)
     *     maxNumOfCandidatesReturned: Integer (Optional)
     *     mode: String(matchPerson/matchFace) (Optional)
     *     faceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         confidence: double (Required)
     *         faceId: String (Optional)
     *         persistedFaceId: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> findSimilarWithResponseAsync(BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.findSimilar(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, request, requestOptions, context));
    }

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face
     * list.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceId: String (Required)
     *     maxNumOfCandidatesReturned: Integer (Optional)
     *     mode: String(matchPerson/matchFace) (Optional)
     *     faceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         confidence: double (Required)
     *         faceId: String (Optional)
     *         persistedFaceId: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> findSimilarWithResponse(BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.findSimilarSync(this.getEndpoint(), this.getServiceVersion().getVersion(), accept, request,
            requestOptions, Context.NONE);
    }

    /**
     * Verify whether two faces belong to a same person or whether one face belongs to a person.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceId1: String (Required)
     *     faceId2: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     isIdentical: boolean (Required)
     *     confidence: double (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return verify result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> verifyWithResponseAsync(BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.verify(this.getEndpoint(), this.getServiceVersion().getVersion(),
            accept, request, requestOptions, context));
    }

    /**
     * Verify whether two faces belong to a same person or whether one face belongs to a person.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceId1: String (Required)
     *     faceId2: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     isIdentical: boolean (Required)
     *     confidence: double (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return verify result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> verifyWithResponse(BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.verifySync(this.getEndpoint(), this.getServiceVersion().getVersion(), accept, request,
            requestOptions, Context.NONE);
    }

    /**
     * Divide candidate faces into groups based on face similarity.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groups (Required): [
     *          (Required)[
     *             String (Required)
     *         ]
     *     ]
     *     messyGroup (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for group face operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> groupWithResponseAsync(BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.group(this.getEndpoint(), this.getServiceVersion().getVersion(),
            accept, request, requestOptions, context));
    }

    /**
     * Divide candidate faces into groups based on face similarity.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     groups (Required): [
     *          (Required)[
     *             String (Required)
     *         ]
     *     ]
     *     messyGroup (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for group face operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> groupWithResponse(BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.groupSync(this.getEndpoint(), this.getServiceVersion().getVersion(), accept, request,
            requestOptions, Context.NONE);
    }
}
