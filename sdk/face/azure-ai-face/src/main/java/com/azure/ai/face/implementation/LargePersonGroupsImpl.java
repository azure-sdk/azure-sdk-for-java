// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face.implementation;

import com.azure.ai.face.FaceServiceVersion;
import com.azure.ai.face.models.TrainingStatus;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncDefaultPollingStrategy;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.time.Duration;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in LargePersonGroups.
 */
public final class LargePersonGroupsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LargePersonGroupsService service;

    /**
     * The service client containing this operation class.
     */
    private final FaceClientImpl client;

    /**
     * Initializes an instance of LargePersonGroupsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    LargePersonGroupsImpl(FaceClientImpl client) {
        this.service
            = RestProxy.create(LargePersonGroupsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public FaceServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for FaceClientLargePersonGroups to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "FaceClientLargePerso")
    public interface LargePersonGroupsService {
        @Put("/face/{apiVersion}/largepersongroups/{largePersonGroupId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createGroup(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Put("/face/{apiVersion}/largepersongroups/{largePersonGroupId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> createGroupSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Delete("/face/{apiVersion}/largepersongroups/{largePersonGroupId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteGroup(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/face/{apiVersion}/largepersongroups/{largePersonGroupId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteGroupSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/largepersongroups/{largePersonGroupId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getGroup(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/largepersongroups/{largePersonGroupId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getGroupSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Patch("/face/{apiVersion}/largepersongroups/{largePersonGroupId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateGroup(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Patch("/face/{apiVersion}/largepersongroups/{largePersonGroupId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> updateGroupSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/largepersongroups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listGroup(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/largepersongroups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listGroupSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createPerson(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createPersonSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Delete("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deletePerson(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deletePersonSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPerson(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getPersonSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Patch("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updatePerson(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData resource, RequestOptions requestOptions, Context context);

        @Patch("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> updatePersonSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData resource, RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listPerson(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listPersonSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addFaceFromUrl(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData addFaceFromUrlContent, RequestOptions requestOptions,
            Context context);

        @Post("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> addFaceFromUrlSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData addFaceFromUrlContent, RequestOptions requestOptions,
            Context context);

        @Post("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addFaceFromStream(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/octet-stream") BinaryData imageContent,
            RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> addFaceFromStreamSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/octet-stream") BinaryData imageContent,
            RequestOptions requestOptions, Context context);

        @Delete("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteFace(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @PathParam("persistedFaceId") String persistedFaceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteFaceSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @PathParam("persistedFaceId") String persistedFaceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getFace(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @PathParam("persistedFaceId") String persistedFaceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getFaceSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @PathParam("persistedFaceId") String persistedFaceId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Patch("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateFace(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @PathParam("persistedFaceId") String persistedFaceId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Patch("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> updateFaceSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @PathParam("personId") String personId, @PathParam("persistedFaceId") String persistedFaceId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/identify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> identifyFromLargePersonGroup(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/identify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> identifyFromLargePersonGroupSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/verify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> verifyFromLargePersonGroup(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/verify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> verifyFromLargePersonGroupSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/train")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> trainGroup(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/train")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> trainGroupSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/training")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTrainingStatus(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/largepersongroups/{largePersonGroupId}/training")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTrainingStatusSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("largePersonGroupId") String largePersonGroupId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     largePersonGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createGroupWithResponseAsync(String largePersonGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createGroup(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                largePersonGroupId, accept, resource, requestOptions, context));
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     largePersonGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createGroupWithResponse(String largePersonGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createGroupSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, accept, resource, requestOptions, Context.NONE);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteGroupWithResponseAsync(String largePersonGroupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteGroup(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), largePersonGroupId, accept, requestOptions, context));
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteGroupWithResponse(String largePersonGroupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteGroupSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, accept, requestOptions, Context.NONE);
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     largePersonGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container of the uploaded person data, including face recognition feature, and up to 1,000,000 people
     * along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getGroupWithResponseAsync(String largePersonGroupId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getGroup(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), largePersonGroupId, accept, requestOptions, context));
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     largePersonGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container of the uploaded person data, including face recognition feature, and up to 1,000,000 people
     * along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getGroupWithResponse(String largePersonGroupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getGroupSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, accept, requestOptions, Context.NONE);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     largePersonGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateGroupWithResponseAsync(String largePersonGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.updateGroup(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                largePersonGroupId, accept, resource, requestOptions, context));
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     largePersonGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateGroupWithResponse(String largePersonGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updateGroupSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, accept, resource, requestOptions, Context.NONE);
    }

    /**
     * Operation that lists resources in a paginated way.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         name: String (Required)
     *         userData: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         largePersonGroupId: String (Required)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listGroupWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listGroup(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Operation that lists resources in a paginated way.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * <tr>
     * <td>returnRecognitionModel</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Return 'recognitionModel' or not. The default value is false.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         name: String (Required)
     *         userData: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         largePersonGroupId: String (Required)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listGroupWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listGroupSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the person in a specified large person group along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createPersonWithResponseAsync(String largePersonGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createPerson(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                largePersonGroupId, accept, resource, requestOptions, context));
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the person in a specified large person group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createPersonWithResponse(String largePersonGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createPersonSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, accept, resource, requestOptions, Context.NONE);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePersonWithResponseAsync(String largePersonGroupId, String personId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.deletePerson(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                largePersonGroupId, personId, accept, requestOptions, context));
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePersonWithResponse(String largePersonGroupId, String personId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deletePersonSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, personId, accept, requestOptions, Context.NONE);
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the person in a specified large person group along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPersonWithResponseAsync(String largePersonGroupId, String personId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getPerson(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                largePersonGroupId, personId, accept, requestOptions, context));
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the person in a specified large person group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonWithResponse(String largePersonGroupId, String personId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getPersonSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, personId, accept, requestOptions, Context.NONE);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updatePersonWithResponseAsync(String largePersonGroupId, String personId,
        BinaryData resource, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.updatePerson(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                largePersonGroupId, personId, accept, resource, requestOptions, context));
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonWithResponse(String largePersonGroupId, String personId, BinaryData resource,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updatePersonSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, personId, accept, resource, requestOptions, Context.NONE);
    }

    /**
     * Operation that lists resources in a paginated way.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         personId: String (Required)
     *         name: String (Required)
     *         userData: String (Optional)
     *         persistedFaceIds (Optional): [
     *             String (Optional)
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listPersonWithResponseAsync(String largePersonGroupId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listPerson(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), largePersonGroupId, accept, requestOptions, context));
    }

    /**
     * Operation that lists resources in a paginated way.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         personId: String (Required)
     *         name: String (Required)
     *         userData: String (Optional)
     *         persistedFaceIds (Optional): [
     *             String (Optional)
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listPersonWithResponse(String largePersonGroupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listPersonSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, accept, requestOptions, Context.NONE);
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>targetFace</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include
     * 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values:
     * "detection_01", "detection_02", "detection_03".</td>
     * </tr>
     * <tr>
     * <td>userData</td>
     * <td>String</td>
     * <td>No</td>
     * <td>User-provided data attached to the face. The size limit is 1KB.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param addFaceFromUrlContent Model for add face by url.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model for add face result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromUrlWithResponseAsync(String largePersonGroupId, String personId,
        BinaryData addFaceFromUrlContent, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.addFaceFromUrl(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                largePersonGroupId, personId, accept, addFaceFromUrlContent, requestOptions, context));
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>targetFace</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include
     * 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values:
     * "detection_01", "detection_02", "detection_03".</td>
     * </tr>
     * <tr>
     * <td>userData</td>
     * <td>String</td>
     * <td>No</td>
     * <td>User-provided data attached to the face. The size limit is 1KB.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param addFaceFromUrlContent Model for add face by url.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model for add face result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceFromUrlWithResponse(String largePersonGroupId, String personId,
        BinaryData addFaceFromUrlContent, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.addFaceFromUrlSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, personId, accept, addFaceFromUrlContent, requestOptions, Context.NONE);
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>targetFace</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include
     * 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values:
     * "detection_01", "detection_02", "detection_03".</td>
     * </tr>
     * <tr>
     * <td>userData</td>
     * <td>String</td>
     * <td>No</td>
     * <td>User-provided data attached to the face. The size limit is 1KB.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model for add face result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromStreamWithResponseAsync(String largePersonGroupId, String personId,
        BinaryData imageContent, RequestOptions requestOptions) {
        final String contentType = "application/octet-stream";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.addFaceFromStream(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), largePersonGroupId, personId, contentType, accept,
            imageContent, requestOptions, context));
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>targetFace</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include
     * 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values:
     * "detection_01", "detection_02", "detection_03".</td>
     * </tr>
     * <tr>
     * <td>userData</td>
     * <td>String</td>
     * <td>No</td>
     * <td>User-provided data attached to the face. The size limit is 1KB.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return model for add face result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceFromStreamWithResponse(String largePersonGroupId, String personId,
        BinaryData imageContent, RequestOptions requestOptions) {
        final String contentType = "application/octet-stream";
        final String accept = "application/json";
        return service.addFaceFromStreamSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, personId, contentType, accept, imageContent, requestOptions, Context.NONE);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFaceWithResponseAsync(String largePersonGroupId, String personId,
        String persistedFaceId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.deleteFace(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                largePersonGroupId, personId, persistedFaceId, accept, requestOptions, context));
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteFaceWithResponse(String largePersonGroupId, String personId, String persistedFaceId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteFaceSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, personId, persistedFaceId, accept, requestOptions, Context.NONE);
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face resource for large person group person along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFaceWithResponseAsync(String largePersonGroupId, String personId,
        String persistedFaceId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getFace(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                largePersonGroupId, personId, persistedFaceId, accept, requestOptions, context));
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face resource for large person group person along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFaceWithResponse(String largePersonGroupId, String personId, String persistedFaceId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getFaceSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, personId, persistedFaceId, accept, requestOptions, Context.NONE);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateFaceWithResponseAsync(String largePersonGroupId, String personId,
        String persistedFaceId, BinaryData resource, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.updateFace(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                largePersonGroupId, personId, persistedFaceId, accept, resource, requestOptions, context));
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateFaceWithResponse(String largePersonGroupId, String personId, String persistedFaceId,
        BinaryData resource, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updateFaceSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, personId, persistedFaceId, accept, resource, requestOptions, Context.NONE);
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceIds (Required): [
     *         String (Required)
     *     ]
     *     largePersonGroupId: String (Required)
     *     maxNumOfCandidatesReturned: Integer (Optional)
     *     confidenceThreshold: Double (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Required)
     *         candidates (Required): [
     *              (Required){
     *                 personId: String (Required)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> identifyFromLargePersonGroupWithResponseAsync(BinaryData request,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.identifyFromLargePersonGroup(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, request, requestOptions, context));
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceIds (Required): [
     *         String (Required)
     *     ]
     *     largePersonGroupId: String (Required)
     *     maxNumOfCandidatesReturned: Integer (Optional)
     *     confidenceThreshold: Double (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Required)
     *         candidates (Required): [
     *              (Required){
     *                 personId: String (Required)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> identifyFromLargePersonGroupWithResponse(BinaryData request,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.identifyFromLargePersonGroupSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, request, requestOptions, Context.NONE);
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceId: String (Required)
     *     largePersonGroupId: String (Required)
     *     personId: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     isIdentical: boolean (Required)
     *     confidence: double (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return verify result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> verifyFromLargePersonGroupWithResponseAsync(BinaryData request,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.verifyFromLargePersonGroup(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, request, requestOptions, context));
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceId: String (Required)
     *     largePersonGroupId: String (Required)
     *     personId: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     isIdentical: boolean (Required)
     *     confidence: double (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return verify result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> verifyFromLargePersonGroupWithResponse(BinaryData request,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.verifyFromLargePersonGroupSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, request, requestOptions, Context.NONE);
    }

    /**
     * Resource action operation template.
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> trainGroupWithResponseAsync(String largePersonGroupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.trainGroup(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), largePersonGroupId, accept, requestOptions, context));
    }

    /**
     * Resource action operation template.
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> trainGroupWithResponse(String largePersonGroupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.trainGroupSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, accept, requestOptions, Context.NONE);
    }

    /**
     * Resource action operation template.
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginTrainGroupAsync(String largePersonGroupId,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.trainGroupWithResponseAsync(largePersonGroupId, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Resource action operation template.
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginTrainGroup(String largePersonGroupId,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.trainGroupWithResponse(largePersonGroupId, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Resource action operation template.
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<TrainingStatus, Void> beginTrainGroupWithModelAsync(String largePersonGroupId,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.trainGroupWithResponseAsync(largePersonGroupId, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(TrainingStatus.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Resource action operation template.
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TrainingStatus, Void> beginTrainGroupWithModel(String largePersonGroupId,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.trainGroupWithResponse(largePersonGroupId, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(TrainingStatus.class), TypeReference.createInstance(Void.class));
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     status: String(nonstarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     lastSuccessfulTrainingDateTime: OffsetDateTime (Required)
     *     message: String (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training status of a container along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTrainingStatusWithResponseAsync(String largePersonGroupId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTrainingStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), largePersonGroupId, accept, requestOptions, context));
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     status: String(nonstarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     lastSuccessfulTrainingDateTime: OffsetDateTime (Required)
     *     message: String (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training status of a container along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTrainingStatusWithResponse(String largePersonGroupId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTrainingStatusSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            largePersonGroupId, accept, requestOptions, Context.NONE);
    }
}
