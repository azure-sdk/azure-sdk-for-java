// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face;

import com.azure.ai.face.implementation.LivenessWithVerifySessionsImpl;
import com.azure.ai.face.implementation.MultipartFormDataHelper;
import com.azure.ai.face.models.LivenessSessionCreationContent;
import com.azure.ai.face.models.LivenessSessionCreationResult;
import com.azure.ai.face.models.LivenessSessionItem;
import com.azure.ai.face.models.LivenessSessionWithVerifyImageCreationContent;
import com.azure.ai.face.models.LivenessWithVerifySession;
import com.azure.ai.face.models.LivenessWithVerifySessionAuditEntry;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous FaceClient type.
 */
@ServiceClient(builder = FaceClientBuilder.class, isAsync = true)
public final class LivenessWithVerifySessionsAsyncClient {
    @Generated
    private final LivenessWithVerifySessionsImpl serviceClient;

    /**
     * Initializes an instance of LivenessWithVerifySessionsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    LivenessWithVerifySessionsAsyncClient(LivenessWithVerifySessionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Lists all matching session types.
     * List sessions from the last sessionId greater than the "start".
     * The result should be ordered by sessionId in ascending order.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         createdDateTime: OffsetDateTime (Required)
     *         sessionStartDateTime: OffsetDateTime (Optional)
     *         sessionExpired: boolean (Required)
     *         deviceCorrelationId: String (Required)
     *         authTokenTimeToLiveInSeconds: Integer (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listSessionsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listSessionsWithResponseAsync(requestOptions);
    }

    /**
     * Get session result of detectLiveness.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     sessionStartDateTime: OffsetDateTime (Optional)
     *     sessionExpired: boolean (Required)
     *     deviceCorrelationId: String (Required)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     status: String(NotStarted/Started/ResultAvailable) (Required)
     *     result (Optional): {
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 String: Object (Required)
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param sessionId Unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detectLiveness along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSessionWithResponse(String sessionId, RequestOptions requestOptions) {
        return this.serviceClient.getSessionWithResponseAsync(sessionId, requestOptions);
    }

    /**
     * Deletes a session and all of it's audit results.
     * 
     * @param sessionId Unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteSessionWithResponse(String sessionId, RequestOptions requestOptions) {
        return this.serviceClient.deleteSessionWithResponseAsync(sessionId, requestOptions);
    }

    /**
     * Get session audit requests/responses for the session.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 String: Object (Required)
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *     }
     * ]
     * }</pre>
     * 
     * @param sessionId Unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session audit requests/responses for the session along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listSessionAuditEntriesWithResponse(String sessionId,
        RequestOptions requestOptions) {
        return this.serviceClient.listSessionAuditEntriesWithResponseAsync(sessionId, requestOptions);
    }

    /**
     * Creates face liveness detection session.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     livenessOperationMode: String (Required)
     *     sendResultsToClient: Boolean (Optional)
     *     deviceCorrelationIdSetInClient: Boolean (Optional)
     *     deviceCorrelationId: String (Required)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     * }
     * }</pre>
     * 
     * @param livenessSessionCreationContent Request for creating liveness session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session creation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createSessionWithResponse(BinaryData livenessSessionCreationContent,
        RequestOptions requestOptions) {
        return this.serviceClient.createSessionWithResponseAsync(livenessSessionCreationContent, requestOptions);
    }

    /**
     * Creates face liveness detection session with verify image.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     * }
     * }</pre>
     * 
     * @param livenessSessionWithVerifyImageCreationContent Request of liveness with verify session creation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session creation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> createSessionWithVerifyImageWithResponse(
        BinaryData livenessSessionWithVerifyImageCreationContent, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'createSessionWithVerifyImage' is 'multipart/form-data'
        return this.serviceClient.createSessionWithVerifyImageWithResponseAsync(
            livenessSessionWithVerifyImageCreationContent, requestOptions);
    }

    /**
     * Lists all matching session types.
     * List sessions from the last sessionId greater than the "start".
     * The result should be ordered by sessionId in ascending order.
     * 
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<LivenessSessionItem>> listSessions(String start, Integer top) {
        // Generated convenience method for listSessionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return listSessionsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_LIVENESS_SESSION_ITEM));
    }

    /**
     * Lists all matching session types.
     * List sessions from the last sessionId greater than the "start".
     * The result should be ordered by sessionId in ascending order.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<LivenessSessionItem>> listSessions() {
        // Generated convenience method for listSessionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listSessionsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_LIVENESS_SESSION_ITEM));
    }

    /**
     * Get session result of detectLiveness.
     * 
     * @param sessionId Unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session result of detectLiveness on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LivenessWithVerifySession> getSession(String sessionId) {
        // Generated convenience method for getSessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSessionWithResponse(sessionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LivenessWithVerifySession.class));
    }

    /**
     * Deletes a session and all of it's audit results.
     * 
     * @param sessionId Unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSession(String sessionId) {
        // Generated convenience method for deleteSessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteSessionWithResponse(sessionId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get session audit requests/responses for the session.
     * 
     * @param sessionId Unique ID to reference this session.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session audit requests/responses for the session on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<LivenessWithVerifySessionAuditEntry>> listSessionAuditEntries(String sessionId, String start,
        Integer top) {
        // Generated convenience method for listSessionAuditEntriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return listSessionAuditEntriesWithResponse(sessionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData
                .toObject(TYPE_REFERENCE_LIST_LIVENESS_WITH_VERIFY_SESSION_AUDIT_ENTRY));
    }

    /**
     * Get session audit requests/responses for the session.
     * 
     * @param sessionId Unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session audit requests/responses for the session on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<LivenessWithVerifySessionAuditEntry>> listSessionAuditEntries(String sessionId) {
        // Generated convenience method for listSessionAuditEntriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listSessionAuditEntriesWithResponse(sessionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData
                .toObject(TYPE_REFERENCE_LIST_LIVENESS_WITH_VERIFY_SESSION_AUDIT_ENTRY));
    }

    /**
     * Creates face liveness detection session.
     * 
     * @param livenessSessionCreationContent Request for creating liveness session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of liveness session creation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LivenessSessionCreationResult>
        createSession(LivenessSessionCreationContent livenessSessionCreationContent) {
        // Generated convenience method for createSessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createSessionWithResponse(BinaryData.fromObject(livenessSessionCreationContent), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LivenessSessionCreationResult.class));
    }

    /**
     * Creates face liveness detection session with verify image.
     * 
     * @param livenessSessionWithVerifyImageCreationContent Request of liveness with verify session creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of liveness session creation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LivenessSessionCreationResult> createSessionWithVerifyImage(
        LivenessSessionWithVerifyImageCreationContent livenessSessionWithVerifyImageCreationContent) {
        // Generated convenience method for createSessionWithVerifyImageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createSessionWithVerifyImageWithResponse(new MultipartFormDataHelper(requestOptions)
            .serializeJsonField("CreationContent", livenessSessionWithVerifyImageCreationContent.getCreationContent())
            .serializeFileField("VerifyImage",
                livenessSessionWithVerifyImageCreationContent.getVerifyImage().getContent(),
                livenessSessionWithVerifyImageCreationContent.getVerifyImage().getContentType(),
                livenessSessionWithVerifyImageCreationContent.getVerifyImage().getFilename())
            .end().getRequestBody(), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LivenessSessionCreationResult.class));
    }

    @Generated
    private static final TypeReference<List<LivenessWithVerifySessionAuditEntry>> TYPE_REFERENCE_LIST_LIVENESS_WITH_VERIFY_SESSION_AUDIT_ENTRY
        = new TypeReference<List<LivenessWithVerifySessionAuditEntry>>() {
        };

    @Generated
    private static final TypeReference<List<LivenessSessionItem>> TYPE_REFERENCE_LIST_LIVENESS_SESSION_ITEM
        = new TypeReference<List<LivenessSessionItem>>() {
        };
}
