// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Session result of detect liveness with verify.
 */
@Immutable
public final class LivenessWithVerifySession {
    /*
     * Unique ID to reference this session.
     */
    @Generated
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * Session creation time in millisecond from epoch.
     */
    @Generated
    @JsonProperty(value = "createdDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdDateTime;

    /*
     * Session started time from session auth token.
     */
    @Generated
    @JsonProperty(value = "sessionStartDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime sessionStartDateTime;

    /*
     * Whether or not the session is expired.
     */
    @Generated
    @JsonProperty(value = "sessionExpired", access = JsonProperty.Access.WRITE_ONLY)
    private boolean sessionExpired;

    /*
     * Device Correlation Id to use for linking multiple sessions together.
     */
    @Generated
    @JsonProperty(value = "deviceCorrelationId")
    private String deviceCorrelationId;

    /*
     * Session length in seconds. Range is 60 to 86400 seconds.
     */
    @Generated
    @JsonProperty(value = "authTokenTimeToLiveInSeconds")
    private Integer authTokenTimeToLiveInSeconds;

    /*
     * The session status.
     */
    @Generated
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private SessionStatus status;

    /*
     * The last result of session.
     */
    @Generated
    @JsonProperty(value = "result", access = JsonProperty.Access.WRITE_ONLY)
    private LivenessWithVerifySessionAuditEntry result;

    /**
     * Creates an instance of LivenessWithVerifySession class.
     * 
     * @param deviceCorrelationId the deviceCorrelationId value to set.
     */
    @Generated
    @JsonCreator
    private LivenessWithVerifySession(@JsonProperty(value = "deviceCorrelationId") String deviceCorrelationId) {
        this.deviceCorrelationId = deviceCorrelationId;
    }

    /**
     * Get the id property: Unique ID to reference this session.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the createdDateTime property: Session creation time in millisecond from epoch.
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the sessionStartDateTime property: Session started time from session auth token.
     * 
     * @return the sessionStartDateTime value.
     */
    @Generated
    public OffsetDateTime getSessionStartDateTime() {
        return this.sessionStartDateTime;
    }

    /**
     * Get the sessionExpired property: Whether or not the session is expired.
     * 
     * @return the sessionExpired value.
     */
    @Generated
    public boolean isSessionExpired() {
        return this.sessionExpired;
    }

    /**
     * Get the deviceCorrelationId property: Device Correlation Id to use for linking multiple sessions together.
     * 
     * @return the deviceCorrelationId value.
     */
    @Generated
    public String getDeviceCorrelationId() {
        return this.deviceCorrelationId;
    }

    /**
     * Get the authTokenTimeToLiveInSeconds property: Session length in seconds. Range is 60 to 86400 seconds.
     * 
     * @return the authTokenTimeToLiveInSeconds value.
     */
    @Generated
    public Integer getAuthTokenTimeToLiveInSeconds() {
        return this.authTokenTimeToLiveInSeconds;
    }

    /**
     * Get the status property: The session status.
     * 
     * @return the status value.
     */
    @Generated
    public SessionStatus getStatus() {
        return this.status;
    }

    /**
     * Get the result property: The last result of session.
     * 
     * @return the result value.
     */
    @Generated
    public LivenessWithVerifySessionAuditEntry getResult() {
        return this.result;
    }
}
