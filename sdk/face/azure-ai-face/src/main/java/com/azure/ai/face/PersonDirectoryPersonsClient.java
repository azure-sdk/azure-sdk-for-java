// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face;

import com.azure.ai.face.implementation.PersonDirectoryPersonsImpl;
import com.azure.ai.face.implementation.models.IdentifyFromPersonDirectoryRequest;
import com.azure.ai.face.implementation.models.VerifyFromPersonDirectoryRequest;
import com.azure.ai.face.models.AddFaceFromUrlContent;
import com.azure.ai.face.models.AddFaceResult;
import com.azure.ai.face.models.AsyncOperationStatus;
import com.azure.ai.face.models.CreatePersonResult;
import com.azure.ai.face.models.DetectionModel;
import com.azure.ai.face.models.IdentifyResult;
import com.azure.ai.face.models.ListFaceResult;
import com.azure.ai.face.models.ListGroupReferenceResult;
import com.azure.ai.face.models.PersonDirectoryFace;
import com.azure.ai.face.models.PersonDirectoryPerson;
import com.azure.ai.face.models.RecognitionModel;
import com.azure.ai.face.models.VerifyResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;

/**
 * Initializes a new instance of the synchronous FaceClient type.
 */
@ServiceClient(builder = FaceClientBuilder.class)
public final class PersonDirectoryPersonsClient {
    @Generated
    private final PersonDirectoryPersonsImpl serviceClient;

    /**
     * Initializes an instance of PersonDirectoryPersonsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    PersonDirectoryPersonsClient(PersonDirectoryPersonsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     status: String(notstarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     finishedDateTime: OffsetDateTime (Optional)
     *     message: String (Optional)
     * }
     * }</pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of the status of a long running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreatePerson(BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.beginCreatePerson(resource, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personId Person ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeletePerson(String personId, RequestOptions requestOptions) {
        return this.serviceClient.beginDeletePerson(personId, requestOptions);
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return person resource for person directory along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonWithResponse(String personId, RequestOptions requestOptions) {
        return this.serviceClient.getPersonWithResponse(personId, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonWithResponse(String personId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.updatePersonWithResponse(personId, resource, requestOptions);
    }

    /**
     * Operation that lists resources in a paginated way.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         personId: String (Required)
     *         name: String (Required)
     *         userData: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listPersonWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listPersonWithResponse(requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     dynamicPersonGroupIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of list dynamic person group of person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listGroupReferenceWithResponse(String personId, RequestOptions requestOptions) {
        return this.serviceClient.listGroupReferenceWithResponse(personId, requestOptions);
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>targetFace</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include
     * 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values:
     * "detection_01", "detection_02", "detection_03".</td>
     * </tr>
     * <tr>
     * <td>userData</td>
     * <td>String</td>
     * <td>No</td>
     * <td>User-provided data attached to the face. The size limit is 1KB.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     status: String(notstarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     finishedDateTime: OffsetDateTime (Optional)
     *     message: String (Optional)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param body The body type of the operation request or response.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of the status of a long running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginAddFaceFromUrl(String personId, String recognitionModel,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginAddFaceFromUrl(personId, recognitionModel, body, requestOptions);
    }

    /**
     * Operation that applies to a collection of resources.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>targetFace</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.</td>
     * </tr>
     * <tr>
     * <td>detectionModel</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include
     * 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values:
     * "detection_01", "detection_02", "detection_03".</td>
     * </tr>
     * <tr>
     * <td>userData</td>
     * <td>String</td>
     * <td>No</td>
     * <td>User-provided data attached to the face. The size limit is 1KB.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     status: String(notstarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     finishedDateTime: OffsetDateTime (Optional)
     *     message: String (Optional)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of the status of a long running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginAddFaceFromStream(String personId, String recognitionModel,
        BinaryData imageContent, RequestOptions requestOptions) {
        return this.serviceClient.beginAddFaceFromStream(personId, recognitionModel, imageContent, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteFace(String personId, String recognitionModel,
        String persistedFaceId, RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteFace(personId, recognitionModel, persistedFaceId, requestOptions);
    }

    /**
     * Resource read operation template.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face resource for person directory person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFaceWithResponse(String personId, String recognitionModel, String persistedFaceId,
        RequestOptions requestOptions) {
        return this.serviceClient.getFaceWithResponse(personId, recognitionModel, persistedFaceId, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateFaceWithResponse(String personId, String recognitionModel, String persistedFaceId,
        BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.updateFaceWithResponse(personId, recognitionModel, persistedFaceId, resource,
            requestOptions);
    }

    /**
     * Operation that lists resources in a paginated way.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     persistedFaceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of list face of person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFaceWithResponse(String personId, String recognitionModel,
        RequestOptions requestOptions) {
        return this.serviceClient.listFaceWithResponse(personId, recognitionModel, requestOptions);
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceIds (Required): [
     *         String (Required)
     *     ]
     *     personIds (Required): [
     *         String (Required)
     *     ]
     *     maxNumOfCandidatesReturned: Integer (Optional)
     *     confidenceThreshold: Double (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Required)
     *         candidates (Required): [
     *              (Required){
     *                 personId: String (Required)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> identifyFromPersonDirectoryWithResponse(BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.identifyFromPersonDirectoryWithResponse(request, requestOptions);
    }

    /**
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     faceId: String (Required)
     *     personId: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     isIdentical: boolean (Required)
     *     confidence: double (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return verify result along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> verifyFromPersonDirectoryWithResponse(BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.verifyFromPersonDirectoryWithResponse(request, requestOptions);
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the status of a long running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AsyncOperationStatus, CreatePersonResult> beginCreatePerson(PersonDirectoryPerson resource) {
        // Generated convenience method for beginCreatePersonWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreatePersonWithModel(BinaryData.fromObject(resource), requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personId Person ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AsyncOperationStatus, Void> beginDeletePerson(String personId) {
        // Generated convenience method for beginDeletePersonWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeletePersonWithModel(personId, requestOptions);
    }

    /**
     * Resource read operation template.
     * 
     * @param personId Person ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person resource for person directory.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonDirectoryPerson getPerson(String personId) {
        // Generated convenience method for getPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonWithResponse(personId, requestOptions).getValue().toObject(PersonDirectoryPerson.class);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personId Person ID of the person.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePerson(String personId, PersonDirectoryPerson resource) {
        // Generated convenience method for updatePersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updatePersonWithResponse(personId, BinaryData.fromObject(resource), requestOptions).getValue();
    }

    /**
     * Operation that lists resources in a paginated way.
     * 
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonDirectoryPerson> listPerson(String start, Integer top) {
        // Generated convenience method for listPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return listPersonWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_PERSON_DIRECTORY_PERSON);
    }

    /**
     * Operation that lists resources in a paginated way.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonDirectoryPerson> listPerson() {
        // Generated convenience method for listPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listPersonWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_PERSON_DIRECTORY_PERSON);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personId Person ID of the person.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of list dynamic person group of person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListGroupReferenceResult listGroupReference(String personId, String start, Integer top) {
        // Generated convenience method for listGroupReferenceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return listGroupReferenceWithResponse(personId, requestOptions).getValue()
            .toObject(ListGroupReferenceResult.class);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personId Person ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of list dynamic person group of person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListGroupReferenceResult listGroupReference(String personId) {
        // Generated convenience method for listGroupReferenceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listGroupReferenceWithResponse(personId, requestOptions).getValue()
            .toObject(ListGroupReferenceResult.class);
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param body The body type of the operation request or response.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the status of a long running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AsyncOperationStatus, AddFaceResult> beginAddFaceFromUrl(String personId,
        RecognitionModel recognitionModel, AddFaceFromUrlContent body, String targetFace, DetectionModel detectionModel,
        String userData) {
        // Generated convenience method for beginAddFaceFromUrlWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace", targetFace, false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return serviceClient.beginAddFaceFromUrlWithModel(personId, recognitionModel.toString(),
            BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param body The body type of the operation request or response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the status of a long running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AsyncOperationStatus, AddFaceResult> beginAddFaceFromUrl(String personId,
        RecognitionModel recognitionModel, AddFaceFromUrlContent body) {
        // Generated convenience method for beginAddFaceFromUrlWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginAddFaceFromUrlWithModel(personId, recognitionModel.toString(),
            BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param imageContent The image to be analyzed.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the status of a long running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AsyncOperationStatus, AddFaceResult> beginAddFaceFromStream(String personId,
        RecognitionModel recognitionModel, BinaryData imageContent, String targetFace, DetectionModel detectionModel,
        String userData) {
        // Generated convenience method for beginAddFaceFromStreamWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace", targetFace, false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return serviceClient.beginAddFaceFromStreamWithModel(personId, recognitionModel.toString(), imageContent,
            requestOptions);
    }

    /**
     * Operation that applies to a collection of resources.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the status of a long running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AsyncOperationStatus, AddFaceResult> beginAddFaceFromStream(String personId,
        RecognitionModel recognitionModel, BinaryData imageContent) {
        // Generated convenience method for beginAddFaceFromStreamWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginAddFaceFromStreamWithModel(personId, recognitionModel.toString(), imageContent,
            requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AsyncOperationStatus, Void> beginDeleteFace(String personId, RecognitionModel recognitionModel,
        String persistedFaceId) {
        // Generated convenience method for beginDeleteFaceWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteFaceWithModel(personId, recognitionModel.toString(), persistedFaceId,
            requestOptions);
    }

    /**
     * Resource read operation template.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face resource for person directory person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonDirectoryFace getFace(String personId, RecognitionModel recognitionModel, String persistedFaceId) {
        // Generated convenience method for getFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFaceWithResponse(personId, recognitionModel.toString(), persistedFaceId, requestOptions).getValue()
            .toObject(PersonDirectoryFace.class);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateFace(String personId, RecognitionModel recognitionModel, String persistedFaceId,
        PersonDirectoryFace resource) {
        // Generated convenience method for updateFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updateFaceWithResponse(personId, recognitionModel.toString(), persistedFaceId, BinaryData.fromObject(resource),
            requestOptions).getValue();
    }

    /**
     * Operation that lists resources in a paginated way.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of list face of person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListFaceResult listFace(String personId, RecognitionModel recognitionModel) {
        // Generated convenience method for listFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listFaceWithResponse(personId, recognitionModel.toString(), requestOptions).getValue()
            .toObject(ListFaceResult.class);
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified
     * independently. The valid number of faceIds is between [1, 10].
     * @param personIds Array of personIds created in PersonDirectory - PersonCreate. The valid number of personIds is
     * between [1,30].
     * @param maxNumOfCandidatesReturned The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10).
     * @param confidenceThreshold Customized identification confidence threshold, in the range of [0, 1]. Advanced user
     * can tweak this value to override default internal threshold for better precision on their scenario data. Note
     * there is no guarantee of this threshold value working on other data and after algorithm updates.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IdentifyResult> identifyFromPersonDirectory(List<String> faceIds, List<String> personIds,
        Integer maxNumOfCandidatesReturned, Double confidenceThreshold) {
        // Generated convenience method for identifyFromPersonDirectoryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        IdentifyFromPersonDirectoryRequest requestObj = new IdentifyFromPersonDirectoryRequest(faceIds, personIds)
            .setMaxNumOfCandidatesReturned(maxNumOfCandidatesReturned).setConfidenceThreshold(confidenceThreshold);
        BinaryData request = BinaryData.fromObject(requestObj);
        return identifyFromPersonDirectoryWithResponse(request, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_IDENTIFY_RESULT);
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified
     * independently. The valid number of faceIds is between [1, 10].
     * @param personIds Array of personIds created in PersonDirectory - PersonCreate. The valid number of personIds is
     * between [1,30].
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IdentifyResult> identifyFromPersonDirectory(List<String> faceIds, List<String> personIds) {
        // Generated convenience method for identifyFromPersonDirectoryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        IdentifyFromPersonDirectoryRequest requestObj = new IdentifyFromPersonDirectoryRequest(faceIds, personIds);
        BinaryData request = BinaryData.fromObject(requestObj);
        return identifyFromPersonDirectoryWithResponse(request, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_IDENTIFY_RESULT);
    }

    /**
     * A remote procedure call (RPC) operation.
     * 
     * @param faceId faceId of the face, comes from Face - Detect.
     * @param personId Specify a certain person in PersonDirectory Person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return verify result.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VerifyResult verifyFromPersonDirectory(String faceId, String personId) {
        // Generated convenience method for verifyFromPersonDirectoryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        VerifyFromPersonDirectoryRequest requestObj = new VerifyFromPersonDirectoryRequest(faceId, personId);
        BinaryData request = BinaryData.fromObject(requestObj);
        return verifyFromPersonDirectoryWithResponse(request, requestOptions).getValue().toObject(VerifyResult.class);
    }

    @Generated
    private static final TypeReference<List<IdentifyResult>> TYPE_REFERENCE_LIST_IDENTIFY_RESULT
        = new TypeReference<List<IdentifyResult>>() {
        };

    @Generated
    private static final TypeReference<List<PersonDirectoryPerson>> TYPE_REFERENCE_LIST_PERSON_DIRECTORY_PERSON
        = new TypeReference<List<PersonDirectoryPerson>>() {
        };
}
