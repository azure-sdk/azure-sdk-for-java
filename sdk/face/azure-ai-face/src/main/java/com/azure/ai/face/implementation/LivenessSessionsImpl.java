// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.face.implementation;

import com.azure.ai.face.FaceServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in LivenessSessions.
 */
public final class LivenessSessionsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LivenessSessionsService service;

    /**
     * The service client containing this operation class.
     */
    private final FaceClientImpl client;

    /**
     * Initializes an instance of LivenessSessionsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    LivenessSessionsImpl(FaceClientImpl client) {
        this.service
            = RestProxy.create(LivenessSessionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public FaceServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for FaceClientLivenessSessions to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "FaceClientLivenessSe")
    public interface LivenessSessionsService {
        @Get("/face/{apiVersion}/detectLiveness/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listSessions(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/detectLiveness/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSessionsSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/detectLiveness/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSession(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/detectLiveness/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSessionSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/face/{apiVersion}/detectLiveness/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteSession(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/face/{apiVersion}/detectLiveness/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSessionSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/detectLiveness/singleModal/sessions/{sessionId}/audit")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listSessionAuditEntries(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/face/{apiVersion}/detectLiveness/singleModal/sessions/{sessionId}/audit")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSessionAuditEntriesSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/face/{apiVersion}/detectLiveness/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createSession(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData livenessSessionCreationContent, RequestOptions requestOptions,
            Context context);

        @Post("/face/{apiVersion}/detectLiveness/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSessionSync(@HostParam("endpoint") String endpoint,
            @PathParam("apiVersion") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData livenessSessionCreationContent, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Lists all matching session types.
     * List sessions from the last sessionId greater than the "start".
     * The result should be ordered by sessionId in ascending order.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         createdDateTime: OffsetDateTime (Required)
     *         sessionStartDateTime: OffsetDateTime (Optional)
     *         sessionExpired: boolean (Required)
     *         deviceCorrelationId: String (Required)
     *         authTokenTimeToLiveInSeconds: Integer (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listSessionsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listSessions(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Lists all matching session types.
     * List sessions from the last sessionId greater than the "start".
     * The result should be ordered by sessionId in ascending order.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         createdDateTime: OffsetDateTime (Required)
     *         sessionStartDateTime: OffsetDateTime (Optional)
     *         sessionExpired: boolean (Required)
     *         deviceCorrelationId: String (Required)
     *         authTokenTimeToLiveInSeconds: Integer (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listSessionsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listSessionsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Get session result of detectLiveness.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     sessionStartDateTime: OffsetDateTime (Optional)
     *     sessionExpired: boolean (Required)
     *     deviceCorrelationId: String (Required)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     status: String(NotStarted/Started/ResultAvailable) (Required)
     *     result (Optional): {
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 String: Object (Required)
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param sessionId Unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detectLiveness along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSessionWithResponseAsync(String sessionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSession(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), sessionId, accept, requestOptions, context));
    }

    /**
     * Get session result of detectLiveness.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     sessionStartDateTime: OffsetDateTime (Optional)
     *     sessionExpired: boolean (Required)
     *     deviceCorrelationId: String (Required)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     status: String(NotStarted/Started/ResultAvailable) (Required)
     *     result (Optional): {
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 String: Object (Required)
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param sessionId Unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detectLiveness along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSessionWithResponse(String sessionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSessionSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            sessionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Deletes a session and all of it's audit results.
     * 
     * @param sessionId Unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteSessionWithResponseAsync(String sessionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteSession(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), sessionId, accept, requestOptions, context));
    }

    /**
     * Deletes a session and all of it's audit results.
     * 
     * @param sessionId Unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteSessionWithResponse(String sessionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSessionSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            sessionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get session audit requests/responses for the session.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 String: Object (Required)
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *     }
     * ]
     * }</pre>
     * 
     * @param sessionId Unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session audit requests/responses for the session along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listSessionAuditEntriesWithResponseAsync(String sessionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listSessionAuditEntries(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), sessionId, accept, requestOptions, context));
    }

    /**
     * Get session audit requests/responses for the session.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>start</td>
     * <td>String</td>
     * <td>No</td>
     * <td>List resources greater than the "start". It contains no more than 64 characters. Default is empty.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The number of items to list, ranging in [1, 1000]. Default is 1000.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 String: Object (Required)
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *     }
     * ]
     * }</pre>
     * 
     * @param sessionId Unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session audit requests/responses for the session along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listSessionAuditEntriesWithResponse(String sessionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listSessionAuditEntriesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), sessionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Creates face liveness detection session.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     livenessOperationMode: String (Required)
     *     sendResultsToClient: Boolean (Optional)
     *     deviceCorrelationIdSetInClient: Boolean (Optional)
     *     deviceCorrelationId: String (Required)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     * }
     * }</pre>
     * 
     * @param livenessSessionCreationContent Request for creating liveness session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session creation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createSessionWithResponseAsync(BinaryData livenessSessionCreationContent,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createSession(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                accept, livenessSessionCreationContent, requestOptions, context));
    }

    /**
     * Creates face liveness detection session.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     livenessOperationMode: String (Required)
     *     sendResultsToClient: Boolean (Optional)
     *     deviceCorrelationIdSetInClient: Boolean (Optional)
     *     deviceCorrelationId: String (Required)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     * }
     * }</pre>
     * 
     * @param livenessSessionCreationContent Request for creating liveness session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session creation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createSessionWithResponse(BinaryData livenessSessionCreationContent,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createSessionSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accept, livenessSessionCreationContent, requestOptions, Context.NONE);
    }
}
