// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Dedicated parameter model for multipart/form-data.
 */
@Fluent
public final class LivenessSessionCreationContentForMultipart
    implements JsonSerializable<LivenessSessionCreationContentForMultipart> {
    /*
     * The operation mode for the liveness modal.
     */
    @Generated
    private final LivenessOperationMode livenessOperationMode;

    /*
     * Whether or not send back the operation response to client.
     */
    @Generated
    private Boolean sendResultsToClient;

    /*
     * Whether or not the device correlation id is set by the client.
     */
    @Generated
    private Boolean deviceCorrelationIdSetInClient;

    /*
     * Device Correlation Id to use for linking multiple sessions together.
     */
    @Generated
    private final String deviceCorrelationId;

    /*
     * Session length in seconds. Range is 60 to 86400 seconds.
     */
    @Generated
    private Integer authTokenTimeToLiveInSeconds;

    /**
     * Creates an instance of LivenessSessionCreationContentForMultipart class.
     * 
     * @param livenessOperationMode the livenessOperationMode value to set.
     * @param deviceCorrelationId the deviceCorrelationId value to set.
     */
    @Generated
    public LivenessSessionCreationContentForMultipart(LivenessOperationMode livenessOperationMode,
        String deviceCorrelationId) {
        this.livenessOperationMode = livenessOperationMode;
        this.deviceCorrelationId = deviceCorrelationId;
    }

    /**
     * Get the livenessOperationMode property: The operation mode for the liveness modal.
     * 
     * @return the livenessOperationMode value.
     */
    @Generated
    public LivenessOperationMode getLivenessOperationMode() {
        return this.livenessOperationMode;
    }

    /**
     * Get the sendResultsToClient property: Whether or not send back the operation response to client.
     * 
     * @return the sendResultsToClient value.
     */
    @Generated
    public Boolean isSendResultsToClient() {
        return this.sendResultsToClient;
    }

    /**
     * Set the sendResultsToClient property: Whether or not send back the operation response to client.
     * 
     * @param sendResultsToClient the sendResultsToClient value to set.
     * @return the LivenessSessionCreationContentForMultipart object itself.
     */
    @Generated
    public LivenessSessionCreationContentForMultipart setSendResultsToClient(Boolean sendResultsToClient) {
        this.sendResultsToClient = sendResultsToClient;
        return this;
    }

    /**
     * Get the deviceCorrelationIdSetInClient property: Whether or not the device correlation id is set by the client.
     * 
     * @return the deviceCorrelationIdSetInClient value.
     */
    @Generated
    public Boolean isDeviceCorrelationIdSetInClient() {
        return this.deviceCorrelationIdSetInClient;
    }

    /**
     * Set the deviceCorrelationIdSetInClient property: Whether or not the device correlation id is set by the client.
     * 
     * @param deviceCorrelationIdSetInClient the deviceCorrelationIdSetInClient value to set.
     * @return the LivenessSessionCreationContentForMultipart object itself.
     */
    @Generated
    public LivenessSessionCreationContentForMultipart
        setDeviceCorrelationIdSetInClient(Boolean deviceCorrelationIdSetInClient) {
        this.deviceCorrelationIdSetInClient = deviceCorrelationIdSetInClient;
        return this;
    }

    /**
     * Get the deviceCorrelationId property: Device Correlation Id to use for linking multiple sessions together.
     * 
     * @return the deviceCorrelationId value.
     */
    @Generated
    public String getDeviceCorrelationId() {
        return this.deviceCorrelationId;
    }

    /**
     * Get the authTokenTimeToLiveInSeconds property: Session length in seconds. Range is 60 to 86400 seconds.
     * 
     * @return the authTokenTimeToLiveInSeconds value.
     */
    @Generated
    public Integer getAuthTokenTimeToLiveInSeconds() {
        return this.authTokenTimeToLiveInSeconds;
    }

    /**
     * Set the authTokenTimeToLiveInSeconds property: Session length in seconds. Range is 60 to 86400 seconds.
     * 
     * @param authTokenTimeToLiveInSeconds the authTokenTimeToLiveInSeconds value to set.
     * @return the LivenessSessionCreationContentForMultipart object itself.
     */
    @Generated
    public LivenessSessionCreationContentForMultipart
        setAuthTokenTimeToLiveInSeconds(Integer authTokenTimeToLiveInSeconds) {
        this.authTokenTimeToLiveInSeconds = authTokenTimeToLiveInSeconds;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("livenessOperationMode",
            this.livenessOperationMode == null ? null : this.livenessOperationMode.toString());
        jsonWriter.writeStringField("deviceCorrelationId", this.deviceCorrelationId);
        jsonWriter.writeBooleanField("sendResultsToClient", this.sendResultsToClient);
        jsonWriter.writeBooleanField("deviceCorrelationIdSetInClient", this.deviceCorrelationIdSetInClient);
        jsonWriter.writeNumberField("authTokenTimeToLiveInSeconds", this.authTokenTimeToLiveInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessSessionCreationContentForMultipart from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessSessionCreationContentForMultipart if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivenessSessionCreationContentForMultipart.
     */
    @Generated
    public static LivenessSessionCreationContentForMultipart fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LivenessOperationMode livenessOperationMode = null;
            String deviceCorrelationId = null;
            Boolean sendResultsToClient = null;
            Boolean deviceCorrelationIdSetInClient = null;
            Integer authTokenTimeToLiveInSeconds = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("livenessOperationMode".equals(fieldName)) {
                    livenessOperationMode = LivenessOperationMode.fromString(reader.getString());
                } else if ("deviceCorrelationId".equals(fieldName)) {
                    deviceCorrelationId = reader.getString();
                } else if ("sendResultsToClient".equals(fieldName)) {
                    sendResultsToClient = reader.getNullable(JsonReader::getBoolean);
                } else if ("deviceCorrelationIdSetInClient".equals(fieldName)) {
                    deviceCorrelationIdSetInClient = reader.getNullable(JsonReader::getBoolean);
                } else if ("authTokenTimeToLiveInSeconds".equals(fieldName)) {
                    authTokenTimeToLiveInSeconds = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            LivenessSessionCreationContentForMultipart deserializedLivenessSessionCreationContentForMultipart
                = new LivenessSessionCreationContentForMultipart(livenessOperationMode, deviceCorrelationId);
            deserializedLivenessSessionCreationContentForMultipart.sendResultsToClient = sendResultsToClient;
            deserializedLivenessSessionCreationContentForMultipart.deviceCorrelationIdSetInClient
                = deviceCorrelationIdSetInClient;
            deserializedLivenessSessionCreationContentForMultipart.authTokenTimeToLiveInSeconds
                = authTokenTimeToLiveInSeconds;

            return deserializedLivenessSessionCreationContentForMultipart;
        });
    }
}
