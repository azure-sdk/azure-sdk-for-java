// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face;

import com.azure.ai.vision.face.implementation.FaceAdministrationClientImpl;
import com.azure.ai.vision.face.implementation.models.AddFaceListFaceFromUrlRequest;
import com.azure.ai.vision.face.implementation.models.AddLargeFaceListFaceFromUrlRequest;
import com.azure.ai.vision.face.implementation.models.AddLargePersonGroupPersonFaceFromUrlRequest;
import com.azure.ai.vision.face.implementation.models.AddPersonFaceFromUrlRequest;
import com.azure.ai.vision.face.implementation.models.AddPersonGroupPersonFaceFromUrlRequest;
import com.azure.ai.vision.face.implementation.models.CreateFaceListRequest;
import com.azure.ai.vision.face.implementation.models.CreateLargeFaceListRequest;
import com.azure.ai.vision.face.implementation.models.CreateLargePersonGroupPersonRequest;
import com.azure.ai.vision.face.implementation.models.CreateLargePersonGroupRequest;
import com.azure.ai.vision.face.implementation.models.CreatePersonGroupPersonRequest;
import com.azure.ai.vision.face.implementation.models.CreatePersonGroupRequest;
import com.azure.ai.vision.face.implementation.models.Resource;
import com.azure.ai.vision.face.implementation.models.Resource1;
import com.azure.ai.vision.face.implementation.models.UpdateFaceListRequest;
import com.azure.ai.vision.face.implementation.models.UpdateLargeFaceListRequest;
import com.azure.ai.vision.face.implementation.models.UpdateLargePersonGroupPersonRequest;
import com.azure.ai.vision.face.implementation.models.UpdateLargePersonGroupRequest;
import com.azure.ai.vision.face.implementation.models.UpdatePersonGroupPersonRequest;
import com.azure.ai.vision.face.implementation.models.UpdatePersonGroupRequest;
import com.azure.ai.vision.face.implementation.models.UpdatePersonRequest;
import com.azure.ai.vision.face.models.AddFaceResult;
import com.azure.ai.vision.face.models.CreatePersonResult;
import com.azure.ai.vision.face.models.DynamicPersonGroup;
import com.azure.ai.vision.face.models.FaceCollectionTrainingStatus;
import com.azure.ai.vision.face.models.FaceDetectionModel;
import com.azure.ai.vision.face.models.FaceList;
import com.azure.ai.vision.face.models.FaceListItem;
import com.azure.ai.vision.face.models.FaceOperationStatus;
import com.azure.ai.vision.face.models.FaceRecognitionModel;
import com.azure.ai.vision.face.models.LargeFaceList;
import com.azure.ai.vision.face.models.LargeFaceListFace;
import com.azure.ai.vision.face.models.LargePersonGroup;
import com.azure.ai.vision.face.models.LargePersonGroupPerson;
import com.azure.ai.vision.face.models.LargePersonGroupPersonFace;
import com.azure.ai.vision.face.models.ListFaceResult;
import com.azure.ai.vision.face.models.ListGroupReferenceResult;
import com.azure.ai.vision.face.models.ListPersonResult;
import com.azure.ai.vision.face.models.PersonDirectoryFace;
import com.azure.ai.vision.face.models.PersonDirectoryPerson;
import com.azure.ai.vision.face.models.PersonGroup;
import com.azure.ai.vision.face.models.PersonGroupPerson;
import com.azure.ai.vision.face.models.PersonGroupPersonFace;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;

/**
 * Initializes a new instance of the synchronous FaceAdministrationClient type.
 */
@ServiceClient(builder = FaceAdministrationClientBuilder.class)
public final class FaceAdministrationClient {
    @Generated
    private final FaceAdministrationClientImpl serviceClient;

    /**
     * Initializes an instance of FaceAdministrationClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    FaceAdministrationClient(FaceAdministrationClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel.
     * 
     * Up to 64 face lists are allowed in one subscription.
     * Face list is a list of faces, up to 1,000 faces, and used by Face - Find Similar.
     * After creation, user should use FaceList - Add Face to import the faces. No image will be stored. Only the
     * extracted face feature(s) will be stored on server until FaceList - Delete is called.
     * Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way
     * face identification. But if the actual use is to identify person, please use PersonGroup / LargePersonGroup and
     * Face - Identify.
     * Please consider LargeFaceList when the face number is large. It can support up to 1,000,000 faces.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     * }
     * }</pre>
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createFaceListWithResponse(String faceListId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.createFaceListWithResponse(faceListId, request, requestOptions);
    }

    /**
     * Delete a specified face list.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteFaceListWithResponse(String faceListId, RequestOptions requestOptions) {
        return this.serviceClient.deleteFaceListWithResponse(faceListId, requestOptions);
    }

    /**
     * Retrieve a face list's faceListId, name, userData, recognitionModel and faces in the face list.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     faceListId: String (Required)
     *     persistedFaces (Optional): [
     *          (Optional){
     *             persistedFaceId: String (Required)
     *             userData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face list is a list of faces, up to 1,000 faces along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFaceListWithResponse(String faceListId, RequestOptions requestOptions) {
        return this.serviceClient.getFaceListWithResponse(faceListId, requestOptions);
    }

    /**
     * Update information of a face list, including name and userData.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateFaceListWithResponse(String faceListId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.updateFaceListWithResponse(faceListId, request, requestOptions);
    }

    /**
     * List face lists' faceListId, name, userData and recognitionModel.
     * To get face information inside faceList use Get Face List.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         name: String (Required)
     *         userData: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         faceListId: String (Required)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFaceListsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getFaceListsWithResponse(requestOptions);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until FaceList - Delete Face or FaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceListFaceFromUrlWithResponse(String faceListId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.addFaceListFaceFromUrlWithResponse(faceListId, request, requestOptions);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until FaceList - Delete Face or FaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceListFaceWithResponse(String faceListId, BinaryData imageContent,
        RequestOptions requestOptions) {
        return this.serviceClient.addFaceListFaceWithResponse(faceListId, imageContent, requestOptions);
    }

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId.
     * 
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in
     * parallel.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteFaceListFaceWithResponse(String faceListId, String persistedFaceId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteFaceListFaceWithResponse(faceListId, persistedFaceId, requestOptions);
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     * recognitionModel.
     * 
     * Large face list is a list of faces, up to 1,000,000 faces, and used by Find Similar.
     * After creation, user should use Add Large Face List Face to import the faces and Train Large Face List to make it
     * ready for Find Similar. No image will be stored. Only the extracted face feature(s) will be stored on server
     * until Delete Large Face List is called.
     * Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way
     * face identification. But if the actual use is to identify person, please use Person Group / Large Person Group
     * and Identify.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 64 large face lists.
     * &gt; * S0-tier subscription quota: 1,000,000 large face lists.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     * }
     * }</pre>
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createLargeFaceListWithResponse(String largeFaceListId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.createLargeFaceListWithResponse(largeFaceListId, request, requestOptions);
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
     * 
     * Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face
     * lists are in parallel.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLargeFaceListWithResponse(String largeFaceListId, RequestOptions requestOptions) {
        return this.serviceClient.deleteLargeFaceListWithResponse(largeFaceListId, requestOptions);
    }

    /**
     * Retrieve a large face list's largeFaceListId, name, userData and recognitionModel.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     largeFaceListId: String (Required)
     * }
     * }</pre>
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return large face list is a list of faces, up to 1,000,000 faces along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLargeFaceListWithResponse(String largeFaceListId, RequestOptions requestOptions) {
        return this.serviceClient.getLargeFaceListWithResponse(largeFaceListId, requestOptions);
    }

    /**
     * Update information of a large face list, including name and userData.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateLargeFaceListWithResponse(String largeFaceListId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.updateLargeFaceListWithResponse(largeFaceListId, request, requestOptions);
    }

    /**
     * List large face lists' information of largeFaceListId, name, userData and recognitionModel.
     * 
     * To get face information inside largeFaceList use LargeFaceList Face - Get.
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         name: String (Required)
     *         userData: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         largeFaceListId: String (Required)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLargeFaceListsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getLargeFaceListsWithResponse(requestOptions);
    }

    /**
     * To check the large face list training status completed or still ongoing. LargeFaceList Training is an
     * asynchronous operation triggered by Train Large Face List.
     * Training time depends on the number of face entries in a large face list. It could be in seconds, or up to half
     * an hour for 1,000,000 faces.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     status: String(notStarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     lastSuccessfulTrainingDateTime: OffsetDateTime (Required)
     *     message: String (Optional)
     * }
     * }</pre>
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training status of a container along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLargeFaceListTrainingStatusWithResponse(String largeFaceListId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLargeFaceListTrainingStatusWithResponse(largeFaceListId, requestOptions);
    }

    /**
     * Submit a large face list training task.
     * 
     * Training is a crucial step that only a trained large face list can be used by Find Similar.
     * The training task is an asynchronous task. Training time depends on the number of face entries in a large face
     * list. It could be in seconds, or up to half an hour for 1,000,000 faces. To check training completion, please use
     * Get Large Face List Training Status.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginTrainLargeFaceList(String largeFaceListId,
        RequestOptions requestOptions) {
        return this.serviceClient.beginTrainLargeFaceList(largeFaceListId, requestOptions);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargeFaceList - Delete Face or LargeFaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 faces per large face list.
     * &gt; * S0-tier subscription quota: 1,000,000 faces per large face list.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addLargeFaceListFaceFromUrlWithResponse(String largeFaceListId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.addLargeFaceListFaceFromUrlWithResponse(largeFaceListId, request, requestOptions);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargeFaceList - Delete Face or LargeFaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 faces per large face list.
     * &gt; * S0-tier subscription quota: 1,000,000 faces per large face list.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addLargeFaceListFaceWithResponse(String largeFaceListId, BinaryData imageContent,
        RequestOptions requestOptions) {
        return this.serviceClient.addLargeFaceListFaceWithResponse(largeFaceListId, imageContent, requestOptions);
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLargeFaceListFaceWithResponse(String largeFaceListId, String persistedFaceId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteLargeFaceListFaceWithResponse(largeFaceListId, persistedFaceId, requestOptions);
    }

    /**
     * Retrieve persisted face in large face list by largeFaceListId and persistedFaceId.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face resource for large face list along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLargeFaceListFaceWithResponse(String largeFaceListId, String persistedFaceId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLargeFaceListFaceWithResponse(largeFaceListId, persistedFaceId, requestOptions);
    }

    /**
     * Update a specified face's userData field in a large face list by its persistedFaceId.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateLargeFaceListFaceWithResponse(String largeFaceListId, String persistedFaceId,
        BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.updateLargeFaceListFaceWithResponse(largeFaceListId, persistedFaceId, resource,
            requestOptions);
    }

    /**
     * List faces' persistedFaceId and userData in a specified large face list.
     * 
     * Faces are stored in alphabetical order of persistedFaceId created in LargeFaceList Face - Add.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         persistedFaceId: String (Required)
     *         userData: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLargeFaceListFacesWithResponse(String largeFaceListId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLargeFaceListFacesWithResponse(largeFaceListId, requestOptions);
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.
     * 
     * A person group is a container holding the uploaded person data, including face recognition features.
     * After creation, use PersonGroup Person - Create to add persons into the group, and then call PersonGroup - Train
     * to get this group ready for Face - Identify.
     * No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until
     * PersonGroup Person - Delete or PersonGroup - Delete is called.
     * 
     * 'recognitionModel' should be specified to associate with this person group. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing person group will use the recognition model that's
     * already associated with the collection. Existing face feature(s) in a person group can't be updated to features
     * extracted by another version of recognition model.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
     * &gt; * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
     * &gt; * to handle larger scale face identification problem, please consider using LargePersonGroup.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createPersonGroupWithResponse(String personGroupId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.createPersonGroupWithResponse(personGroupId, request, requestOptions);
    }

    /**
     * Delete an existing person group with specified personGroupId. Persisted data in this person group will be
     * deleted.
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePersonGroupWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.deletePersonGroupWithResponse(personGroupId, requestOptions);
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use
     * PersonGroup Person - List.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     personGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container of the uploaded person data, including face recognition feature, and up to 10,000 persons
     * along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonGroupWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.getPersonGroupWithResponse(personGroupId, requestOptions);
    }

    /**
     * Update an existing person group's name and userData. The properties keep unchanged if they are not in request
     * body.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonGroupWithResponse(String personGroupId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.updatePersonGroupWithResponse(personGroupId, request, requestOptions);
    }

    /**
     * List person groups' personGroupId, name, userData and recognitionModel.
     * 
     * * Person groups are stored in alphabetical order of personGroupId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         name: String (Required)
     *         userData: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         personGroupId: String (Required)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonGroupsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getPersonGroupsWithResponse(requestOptions);
    }

    /**
     * To check person group training status completed or still ongoing. PersonGroup Training is an asynchronous
     * operation triggered by PersonGroup - Train API.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     status: String(notStarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     lastSuccessfulTrainingDateTime: OffsetDateTime (Required)
     *     message: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training status of a container along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonGroupTrainingStatusWithResponse(String personGroupId,
        RequestOptions requestOptions) {
        return this.serviceClient.getPersonGroupTrainingStatusWithResponse(personGroupId, requestOptions);
    }

    /**
     * Submit a person group training task. Training is a crucial step that only a trained person group can be used by
     * Face - Identify.
     * 
     * The training task is an asynchronous task. Training time depends on the number of person entries, and their faces
     * in a person group. It could be several seconds to minutes. To check training status, please use PersonGroup - Get
     * Training Status.
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginTrainPersonGroup(String personGroupId,
        RequestOptions requestOptions) {
        return this.serviceClient.beginTrainPersonGroup(personGroupId, requestOptions);
    }

    /**
     * Create a new person in a specified person group. To add face to this person, please call PersonGroup PersonFace -
     * Add.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota:
     * &gt; * 1,000 persons in all person groups.
     * &gt; * S0-tier subscription quota:
     * &gt; * 10,000 persons per person group.
     * &gt; * 1,000,000 person groups.
     * &gt; * 100,000,000 persons in all person groups.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     personId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of create person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createPersonGroupPersonWithResponse(String personGroupId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.createPersonGroupPersonWithResponse(personGroupId, request, requestOptions);
    }

    /**
     * Delete an existing person from a person group. The persistedFaceId, userData, person name and face feature(s) in
     * the person entry will all be deleted.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePersonGroupPersonWithResponse(String personGroupId, String personId,
        RequestOptions requestOptions) {
        return this.serviceClient.deletePersonGroupPersonWithResponse(personGroupId, personId, requestOptions);
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face
     * feature(s).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the person in a specified person group along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonGroupPersonWithResponse(String personGroupId, String personId,
        RequestOptions requestOptions) {
        return this.serviceClient.getPersonGroupPersonWithResponse(personGroupId, personId, requestOptions);
    }

    /**
     * Update name or userData of a person.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonGroupPersonWithResponse(String personGroupId, String personId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.updatePersonGroupPersonWithResponse(personGroupId, personId, request, requestOptions);
    }

    /**
     * List all persons' information in the specified person group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     * 
     * Persons are stored in alphabetical order of personId created in PersonGroup Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         personId: String (Required)
     *         name: String (Required)
     *         userData: String (Optional)
     *         persistedFaceIds (Optional): [
     *             String (Optional)
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonGroupPersonsWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.getPersonGroupPersonsWithResponse(personGroupId, requestOptions);
    }

    /**
     * Add a face to a person into a person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonGroup PersonFace - Delete, PersonGroup Person - Delete or
     * PersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addPersonGroupPersonFaceFromUrlWithResponse(String personGroupId, String personId,
        BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.addPersonGroupPersonFaceFromUrlWithResponse(personGroupId, personId, request,
            requestOptions);
    }

    /**
     * Add a face to a person into a person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonGroup PersonFace - Delete, PersonGroup Person - Delete or
     * PersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addPersonGroupPersonFaceWithResponse(String personGroupId, String personId,
        BinaryData imageContent, RequestOptions requestOptions) {
        return this.serviceClient.addPersonGroupPersonFaceWithResponse(personGroupId, personId, imageContent,
            requestOptions);
    }

    /**
     * Delete a face from a person in a person group by specified personGroupId, personId and persistedFaceId.
     * 
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePersonGroupPersonFaceWithResponse(String personGroupId, String personId,
        String persistedFaceId, RequestOptions requestOptions) {
        return this.serviceClient.deletePersonGroupPersonFaceWithResponse(personGroupId, personId, persistedFaceId,
            requestOptions);
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personGroupId, personId and
     * persistedFaceId.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face resource for person group person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonGroupPersonFaceWithResponse(String personGroupId, String personId,
        String persistedFaceId, RequestOptions requestOptions) {
        return this.serviceClient.getPersonGroupPersonFaceWithResponse(personGroupId, personId, persistedFaceId,
            requestOptions);
    }

    /**
     * Update a person persisted face's userData field.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonGroupPersonFaceWithResponse(String personGroupId, String personId,
        String persistedFaceId, BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.updatePersonGroupPersonFaceWithResponse(personGroupId, personId, persistedFaceId,
            resource, requestOptions);
    }

    /**
     * Create a new large person group with user-specified largePersonGroupId, name, an optional userData and
     * recognitionModel.
     * 
     * A large person group is a container holding the uploaded person data, including the face recognition features. It
     * can hold up to 1,000,000 entities.
     * After creation, use LargePersonGroup Person - Create to add person into the group, and call LargePersonGroup -
     * Train to get this group ready for Face - Identify.
     * No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until
     * LargePersonGroup Person - Delete or LargePersonGroup - Delete is called.
     * 
     * 'recognitionModel' should be specified to associate with this large person group. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing large person group will use the recognition model
     * that's already associated with the collection. Existing face feature(s) in a large person group can't be updated
     * to features extracted by another version of recognition model.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 large person groups.
     * &gt; * S0-tier subscription quota: 1,000,000 large person groups.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createLargePersonGroupWithResponse(String largePersonGroupId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.createLargePersonGroupWithResponse(largePersonGroupId, request, requestOptions);
    }

    /**
     * Delete an existing large person group with specified personGroupId. Persisted data in this large person group
     * will be deleted.
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLargePersonGroupWithResponse(String largePersonGroupId, RequestOptions requestOptions) {
        return this.serviceClient.deleteLargePersonGroupWithResponse(largePersonGroupId, requestOptions);
    }

    /**
     * Retrieve the information of a large person group, including its name, userData and recognitionModel. This API
     * returns large person group information only, use LargePersonGroup Person - List instead to retrieve person
     * information under the large person group.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     largePersonGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container of the uploaded person data, including face recognition feature, and up to 1,000,000 people
     * along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLargePersonGroupWithResponse(String largePersonGroupId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLargePersonGroupWithResponse(largePersonGroupId, requestOptions);
    }

    /**
     * Update an existing large person group's name and userData. The properties keep unchanged if they are not in
     * request body.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateLargePersonGroupWithResponse(String largePersonGroupId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.updateLargePersonGroupWithResponse(largePersonGroupId, request, requestOptions);
    }

    /**
     * List all existing large person groups' largePersonGroupId, name, userData and recognitionModel.
     * 
     * * Large person groups are stored in alphabetical order of largePersonGroupId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         name: String (Required)
     *         userData: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         largePersonGroupId: String (Required)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLargePersonGroupsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getLargePersonGroupsWithResponse(requestOptions);
    }

    /**
     * To check large person group training status completed or still ongoing. LargePersonGroup Training is an
     * asynchronous operation triggered by LargePersonGroup - Train API.
     * 
     * Training time depends on the number of person entries, and their faces in a large person group. It could be in
     * seconds, or up to half an hour for 1,000,000 persons.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     status: String(notStarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     lastSuccessfulTrainingDateTime: OffsetDateTime (Required)
     *     message: String (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training status of a container along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLargePersonGroupTrainingStatusWithResponse(String largePersonGroupId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLargePersonGroupTrainingStatusWithResponse(largePersonGroupId, requestOptions);
    }

    /**
     * Submit a large person group training task. Training is a crucial step that only a trained large person group can
     * be used by Face - Identify.
     * 
     * The training task is an asynchronous task. Training time depends on the number of person entries, and their faces
     * in a large person group. It could be in several seconds, or up to half a hour for 1,000,000 persons. To check
     * training completion, please use LargePersonGroup - Get Training Status.
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginTrainLargePersonGroup(String largePersonGroupId,
        RequestOptions requestOptions) {
        return this.serviceClient.beginTrainLargePersonGroup(largePersonGroupId, requestOptions);
    }

    /**
     * Create a new person in a specified large person group. To add face to this person, please call LargePersonGroup
     * PersonFace - Add.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota:
     * &gt; * 1,000 persons in all large person groups.
     * &gt; * S0-tier subscription quota:
     * &gt; * 1,000,000 persons per large person group.
     * &gt; * 1,000,000 large person groups.
     * &gt; * 1,000,000,000 persons in all large person groups.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     personId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of create person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createLargePersonGroupPersonWithResponse(String largePersonGroupId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.createLargePersonGroupPersonWithResponse(largePersonGroupId, request, requestOptions);
    }

    /**
     * Delete an existing person from a large person group. The persistedFaceId, userData, person name and face
     * feature(s) in the person entry will all be deleted.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLargePersonGroupPersonWithResponse(String largePersonGroupId, String personId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteLargePersonGroupPersonWithResponse(largePersonGroupId, personId,
            requestOptions);
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face
     * feature(s).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the person in a specified large person group along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLargePersonGroupPersonWithResponse(String largePersonGroupId, String personId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLargePersonGroupPersonWithResponse(largePersonGroupId, personId, requestOptions);
    }

    /**
     * Update name or userData of a person.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateLargePersonGroupPersonWithResponse(String largePersonGroupId, String personId,
        BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.updateLargePersonGroupPersonWithResponse(largePersonGroupId, personId, request,
            requestOptions);
    }

    /**
     * List all persons' information in the specified large person group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     * 
     * * Persons are stored in alphabetical order of personId created in LargePersonGroup Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         personId: String (Required)
     *         name: String (Required)
     *         userData: String (Optional)
     *         persistedFaceIds (Optional): [
     *             String (Optional)
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLargePersonGroupPersonsWithResponse(String largePersonGroupId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLargePersonGroupPersonsWithResponse(largePersonGroupId, requestOptions);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargePersonGroup PersonFace - Delete, LargePersonGroup Person -
     * Delete or LargePersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addLargePersonGroupPersonFaceFromUrlWithResponse(String largePersonGroupId,
        String personId, BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.addLargePersonGroupPersonFaceFromUrlWithResponse(largePersonGroupId, personId,
            request, requestOptions);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargePersonGroup PersonFace - Delete, LargePersonGroup Person -
     * Delete or LargePersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addLargePersonGroupPersonFaceWithResponse(String largePersonGroupId, String personId,
        BinaryData imageContent, RequestOptions requestOptions) {
        return this.serviceClient.addLargePersonGroupPersonFaceWithResponse(largePersonGroupId, personId, imageContent,
            requestOptions);
    }

    /**
     * Delete a face from a person in a large person group by specified largePersonGroupId, personId and
     * persistedFaceId.
     * 
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLargePersonGroupPersonFaceWithResponse(String largePersonGroupId, String personId,
        String persistedFaceId, RequestOptions requestOptions) {
        return this.serviceClient.deleteLargePersonGroupPersonFaceWithResponse(largePersonGroupId, personId,
            persistedFaceId, requestOptions);
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its largePersonGroupId, personId and
     * persistedFaceId.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face resource for large person group person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLargePersonGroupPersonFaceWithResponse(String largePersonGroupId, String personId,
        String persistedFaceId, RequestOptions requestOptions) {
        return this.serviceClient.getLargePersonGroupPersonFaceWithResponse(largePersonGroupId, personId,
            persistedFaceId, requestOptions);
    }

    /**
     * Update a person persisted face's userData field.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateLargePersonGroupPersonFaceWithResponse(String largePersonGroupId, String personId,
        String persistedFaceId, BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.updateLargePersonGroupPersonFaceWithResponse(largePersonGroupId, personId,
            persistedFaceId, resource, requestOptions);
    }

    /**
     * Creates a new person in a person directory. To add face to this person, please call PersonDirectory Person - Add
     * Face.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     personId: String (Required)
     * }
     * }</pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of create person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> createPersonWithResponse(BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.createPersonWithResponse(resource, requestOptions);
    }

    /**
     * Delete an existing person from person directory. The persistedFaceId(s), userData, person name and face
     * feature(s) in the person entry will all be deleted.
     * 
     * @param personId Person ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeletePerson(String personId, RequestOptions requestOptions) {
        return this.serviceClient.beginDeletePerson(personId, requestOptions);
    }

    /**
     * Retrieve a person's name and userData from person directory.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return person resource for person directory along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonWithResponse(String personId, RequestOptions requestOptions) {
        return this.serviceClient.getPersonWithResponse(personId, requestOptions);
    }

    /**
     * Update name or userData of a person.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonWithResponse(String personId, BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.updatePersonWithResponse(personId, request, requestOptions);
    }

    /**
     * List all persons' information in person directory, including personId, name, and userData.
     * 
     * * Persons are stored in alphabetical order of personId created in PersonDirectory Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         personId: String (Required)
     *         name: String (Required)
     *         userData: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getPersonsWithResponse(requestOptions);
    }

    /**
     * List all dynamic person groups a person has been referenced by in person directory.
     * 
     * * Dynamic person groups are stored in alphabetical order of dynamic person group id created in PersonDirectory
     * DynamicPersonGroup - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     dynamicPersonGroupIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of list dynamic person group of person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDynamicPersonGroupReferencesWithResponse(String personId,
        RequestOptions requestOptions) {
        return this.serviceClient.getDynamicPersonGroupReferencesWithResponse(personId, requestOptions);
    }

    /**
     * Add a face to a person (see PersonDirectory Person - Create) for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonDirectory Person - Delete Face or PersonDirectory Person -
     * Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * * This is a long running operation. Use Response Header "Operation-Location" to determine when the AddFace
     * operation has successfully propagated for future requests to Face - Identify. For further information about
     * Operation-Locations see Operations - Get Status.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> addPersonFaceFromUrlWithResponse(String personId, String recognitionModel, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.addPersonFaceFromUrlWithResponse(personId, recognitionModel, request, requestOptions);
    }

    /**
     * Add a face to a person (see PersonDirectory Person - Create) for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonDirectory Person - Delete Face or PersonDirectory Person -
     * Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * * This is a long running operation. Use Response Header "Operation-Location" to determine when the AddFace
     * operation has successfully propagated for future requests to Face - Identify. For further information about
     * Operation-Locations see Operations - Get Status.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> addPersonFaceWithResponse(String personId, String recognitionModel, BinaryData imageContent,
        RequestOptions requestOptions) {
        return this.serviceClient.addPersonFaceWithResponse(personId, recognitionModel, imageContent, requestOptions);
    }

    /**
     * Delete a face from a person in person directory by specified personId and persistedFaceId.
     * 
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeletePersonFace(String personId, String recognitionModel,
        String persistedFaceId, RequestOptions requestOptions) {
        return this.serviceClient.beginDeletePersonFace(personId, recognitionModel, persistedFaceId, requestOptions);
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personId. recognitionModel, and
     * persistedFaceId.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face resource for person directory person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonFaceWithResponse(String personId, String recognitionModel,
        String persistedFaceId, RequestOptions requestOptions) {
        return this.serviceClient.getPersonFaceWithResponse(personId, recognitionModel, persistedFaceId,
            requestOptions);
    }

    /**
     * Update a person persisted face's userData field.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonFaceWithResponse(String personId, String recognitionModel, String persistedFaceId,
        BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.updatePersonFaceWithResponse(personId, recognitionModel, persistedFaceId, resource,
            requestOptions);
    }

    /**
     * Retrieve a person's persistedFaceIds representing the registered person face feature(s).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     persistedFaceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces. Allowed values: "recognition_01",
     * "recognition_02", "recognition_03", "recognition_04".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of list face of person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonFacesWithResponse(String personId, String recognitionModel,
        RequestOptions requestOptions) {
        return this.serviceClient.getPersonFacesWithResponse(personId, recognitionModel, requestOptions);
    }

    /**
     * Creates a new dynamic person group with specified dynamicPersonGroupId, name, and user-provided userData.
     * 
     * A dynamic person group is a container that references PersonDirectory Person - Create. After creation, use
     * PersonDirectory DynamicPersonGroup - Update to add or remove persons into the dynamic person group.
     * DynamicPersonGroup and UserData will be stored on server until PersonDirectory DynamicPersonGroup - Delete is
     * called. Use Face - Identify with the dynamicPersonGroupId parameter to identify against persons.
     * No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until
     * PersonDirectory Person - Delete or PersonDirectory Person - Delete Face is called.
     * 
     * 'recognitionModel' does not need to be specified with dynamic person groups. Dynamic person groups are references
     * to PersonDirectory Person - Create and therefore work with most all 'recognitionModels'. The faceId's provided
     * during Face - Identify determine the 'recognitionModel' used.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     addPersonIds (Optional): [
     *         String (Optional)
     *     ]
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> createDynamicPersonGroupWithResponse(String dynamicPersonGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.createDynamicPersonGroupWithResponse(dynamicPersonGroupId, resource, requestOptions);
    }

    /**
     * Deletes an existing dynamic person group with specified dynamicPersonGroupId.
     * 
     * Deleting this dynamic person group only delete the references to persons data. To delete actual person see
     * PersonDirectory Person - Delete.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteDynamicPersonGroup(String dynamicPersonGroupId,
        RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteDynamicPersonGroup(dynamicPersonGroupId, requestOptions);
    }

    /**
     * Retrieve the information of a dynamic person group, including its name and userData.
     * 
     * This API returns dynamic person group information only, use PersonDirectory DynamicPersonGroup - List Persons
     * instead to retrieve person information under the dynamic person group.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     dynamicPersonGroupId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a container that references PersonDirectory Person - Create along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDynamicPersonGroupWithResponse(String dynamicPersonGroupId,
        RequestOptions requestOptions) {
        return this.serviceClient.getDynamicPersonGroupWithResponse(dynamicPersonGroupId, requestOptions);
    }

    /**
     * Update an existing dynamic person group name, userData, add, or remove persons.
     * 
     * The properties keep unchanged if they are not in request body.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     addPersonIds (Optional): [
     *         String (Optional)
     *     ]
     *     removePersonIds (Optional): [
     *         String (Optional)
     *     ]
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> updateDynamicPersonGroupWithResponse(String dynamicPersonGroupId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.updateDynamicPersonGroupWithResponse(dynamicPersonGroupId, resource, requestOptions);
    }

    /**
     * List all existing dynamic person groups by dynamicPersonGroupId along with name and userData.
     * 
     * * Dynamic person groups are stored in alphabetical order of dynamicPersonGroupId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         dynamicPersonGroupId: String (Required)
     *         name: String (Required)
     *         userData: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDynamicPersonGroupsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getDynamicPersonGroupsWithResponse(requestOptions);
    }

    /**
     * List all persons in the specified dynamic person group.
     * 
     * * Persons are stored in alphabetical order of personId created in PersonDirectory Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     personIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of list dynamic person group person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDynamicPersonGroupPersonsWithResponse(String dynamicPersonGroupId,
        RequestOptions requestOptions) {
        return this.serviceClient.getDynamicPersonGroupPersonsWithResponse(dynamicPersonGroupId, requestOptions);
    }

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel.
     * 
     * Up to 64 face lists are allowed in one subscription.
     * Face list is a list of faces, up to 1,000 faces, and used by Face - Find Similar.
     * After creation, user should use FaceList - Add Face to import the faces. No image will be stored. Only the
     * extracted face feature(s) will be stored on server until FaceList - Delete is called.
     * Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way
     * face identification. But if the actual use is to identify person, please use PersonGroup / LargePersonGroup and
     * Face - Identify.
     * Please consider LargeFaceList when the face number is large. It can support up to 1,000,000 faces.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @param recognitionModel The 'recognitionModel' associated with this face list. Supported 'recognitionModel'
     * values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is
     * 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared
     * with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createFaceList(String faceListId, String name, String userData, FaceRecognitionModel recognitionModel) {
        // Generated convenience method for createFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateFaceListRequest requestObj
            = new CreateFaceListRequest(name).setUserData(userData).setRecognitionModel(recognitionModel);
        BinaryData request = BinaryData.fromObject(requestObj);
        createFaceListWithResponse(faceListId, request, requestOptions).getValue();
    }

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel.
     * 
     * Up to 64 face lists are allowed in one subscription.
     * Face list is a list of faces, up to 1,000 faces, and used by Face - Find Similar.
     * After creation, user should use FaceList - Add Face to import the faces. No image will be stored. Only the
     * extracted face feature(s) will be stored on server until FaceList - Delete is called.
     * Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way
     * face identification. But if the actual use is to identify person, please use PersonGroup / LargePersonGroup and
     * Face - Identify.
     * Please consider LargeFaceList when the face number is large. It can support up to 1,000,000 faces.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createFaceList(String faceListId, String name) {
        // Generated convenience method for createFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateFaceListRequest requestObj = new CreateFaceListRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        createFaceListWithResponse(faceListId, request, requestOptions).getValue();
    }

    /**
     * Delete a specified face list.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFaceList(String faceListId) {
        // Generated convenience method for deleteFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteFaceListWithResponse(faceListId, requestOptions).getValue();
    }

    /**
     * Retrieve a face list's faceListId, name, userData, recognitionModel and faces in the face list.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face list is a list of faces, up to 1,000 faces.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FaceList getFaceList(String faceListId, Boolean returnRecognitionModel) {
        // Generated convenience method for getFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getFaceListWithResponse(faceListId, requestOptions).getValue().toObject(FaceList.class);
    }

    /**
     * Retrieve a face list's faceListId, name, userData, recognitionModel and faces in the face list.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face list is a list of faces, up to 1,000 faces.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FaceList getFaceList(String faceListId) {
        // Generated convenience method for getFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFaceListWithResponse(faceListId, requestOptions).getValue().toObject(FaceList.class);
    }

    /**
     * Update information of a face list, including name and userData.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateFaceList(String faceListId, String name, String userData) {
        // Generated convenience method for updateFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateFaceListRequest requestObj = new UpdateFaceListRequest(name).setUserData(userData);
        BinaryData request = BinaryData.fromObject(requestObj);
        updateFaceListWithResponse(faceListId, request, requestOptions).getValue();
    }

    /**
     * Update information of a face list, including name and userData.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateFaceList(String faceListId, String name) {
        // Generated convenience method for updateFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateFaceListRequest requestObj = new UpdateFaceListRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        updateFaceListWithResponse(faceListId, request, requestOptions).getValue();
    }

    /**
     * List face lists' faceListId, name, userData and recognitionModel.
     * To get face information inside faceList use Get Face List.
     * 
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<FaceListItem> getFaceLists(Boolean returnRecognitionModel) {
        // Generated convenience method for getFaceListsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getFaceListsWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_FACE_LIST_ITEM);
    }

    /**
     * List face lists' faceListId, name, userData and recognitionModel.
     * To get face information inside faceList use Get Face List.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<FaceListItem> getFaceLists() {
        // Generated convenience method for getFaceListsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFaceListsWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_FACE_LIST_ITEM);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until FaceList - Delete Face or FaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param url URL of input image.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addFaceListFaceFromUrl(String faceListId, String url, List<Integer> targetFace,
        FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addFaceListFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddFaceListFaceFromUrlRequest requestObj = new AddFaceListFaceFromUrlRequest(url);
        BinaryData request = BinaryData.fromObject(requestObj);
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addFaceListFaceFromUrlWithResponse(faceListId, request, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until FaceList - Delete Face or FaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param url URL of input image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addFaceListFaceFromUrl(String faceListId, String url) {
        // Generated convenience method for addFaceListFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddFaceListFaceFromUrlRequest requestObj = new AddFaceListFaceFromUrlRequest(url);
        BinaryData request = BinaryData.fromObject(requestObj);
        return addFaceListFaceFromUrlWithResponse(faceListId, request, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until FaceList - Delete Face or FaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param imageContent The image to be analyzed.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addFaceListFace(String faceListId, BinaryData imageContent, List<Integer> targetFace,
        FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addFaceListFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addFaceListFaceWithResponse(faceListId, imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until FaceList - Delete Face or FaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addFaceListFace(String faceListId, BinaryData imageContent) {
        // Generated convenience method for addFaceListFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addFaceListFaceWithResponse(faceListId, imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId.
     * 
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in
     * parallel.
     * 
     * @param faceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFaceListFace(String faceListId, String persistedFaceId) {
        // Generated convenience method for deleteFaceListFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteFaceListFaceWithResponse(faceListId, persistedFaceId, requestOptions).getValue();
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     * recognitionModel.
     * 
     * Large face list is a list of faces, up to 1,000,000 faces, and used by Find Similar.
     * After creation, user should use Add Large Face List Face to import the faces and Train Large Face List to make it
     * ready for Find Similar. No image will be stored. Only the extracted face feature(s) will be stored on server
     * until Delete Large Face List is called.
     * Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way
     * face identification. But if the actual use is to identify person, please use Person Group / Large Person Group
     * and Identify.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 64 large face lists.
     * &gt; * S0-tier subscription quota: 1,000,000 large face lists.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @param recognitionModel The 'recognitionModel' associated with this face list. Supported 'recognitionModel'
     * values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is
     * 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared
     * with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createLargeFaceList(String largeFaceListId, String name, String userData,
        FaceRecognitionModel recognitionModel) {
        // Generated convenience method for createLargeFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateLargeFaceListRequest requestObj
            = new CreateLargeFaceListRequest(name).setUserData(userData).setRecognitionModel(recognitionModel);
        BinaryData request = BinaryData.fromObject(requestObj);
        createLargeFaceListWithResponse(largeFaceListId, request, requestOptions).getValue();
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     * recognitionModel.
     * 
     * Large face list is a list of faces, up to 1,000,000 faces, and used by Find Similar.
     * After creation, user should use Add Large Face List Face to import the faces and Train Large Face List to make it
     * ready for Find Similar. No image will be stored. Only the extracted face feature(s) will be stored on server
     * until Delete Large Face List is called.
     * Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way
     * face identification. But if the actual use is to identify person, please use Person Group / Large Person Group
     * and Identify.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 64 large face lists.
     * &gt; * S0-tier subscription quota: 1,000,000 large face lists.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createLargeFaceList(String largeFaceListId, String name) {
        // Generated convenience method for createLargeFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateLargeFaceListRequest requestObj = new CreateLargeFaceListRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        createLargeFaceListWithResponse(largeFaceListId, request, requestOptions).getValue();
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
     * 
     * Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face
     * lists are in parallel.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteLargeFaceList(String largeFaceListId) {
        // Generated convenience method for deleteLargeFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteLargeFaceListWithResponse(largeFaceListId, requestOptions).getValue();
    }

    /**
     * Retrieve a large face list's largeFaceListId, name, userData and recognitionModel.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return large face list is a list of faces, up to 1,000,000 faces.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LargeFaceList getLargeFaceList(String largeFaceListId, Boolean returnRecognitionModel) {
        // Generated convenience method for getLargeFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getLargeFaceListWithResponse(largeFaceListId, requestOptions).getValue().toObject(LargeFaceList.class);
    }

    /**
     * Retrieve a large face list's largeFaceListId, name, userData and recognitionModel.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return large face list is a list of faces, up to 1,000,000 faces.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LargeFaceList getLargeFaceList(String largeFaceListId) {
        // Generated convenience method for getLargeFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargeFaceListWithResponse(largeFaceListId, requestOptions).getValue().toObject(LargeFaceList.class);
    }

    /**
     * Update information of a large face list, including name and userData.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateLargeFaceList(String largeFaceListId, String name, String userData) {
        // Generated convenience method for updateLargeFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateLargeFaceListRequest requestObj = new UpdateLargeFaceListRequest(name).setUserData(userData);
        BinaryData request = BinaryData.fromObject(requestObj);
        updateLargeFaceListWithResponse(largeFaceListId, request, requestOptions).getValue();
    }

    /**
     * Update information of a large face list, including name and userData.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateLargeFaceList(String largeFaceListId, String name) {
        // Generated convenience method for updateLargeFaceListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateLargeFaceListRequest requestObj = new UpdateLargeFaceListRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        updateLargeFaceListWithResponse(largeFaceListId, request, requestOptions).getValue();
    }

    /**
     * List large face lists' information of largeFaceListId, name, userData and recognitionModel.
     * 
     * To get face information inside largeFaceList use LargeFaceList Face - Get.
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LargeFaceList> getLargeFaceLists(String start, Integer top, Boolean returnRecognitionModel) {
        // Generated convenience method for getLargeFaceListsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getLargeFaceListsWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_LARGE_FACE_LIST);
    }

    /**
     * List large face lists' information of largeFaceListId, name, userData and recognitionModel.
     * 
     * To get face information inside largeFaceList use LargeFaceList Face - Get.
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LargeFaceList> getLargeFaceLists() {
        // Generated convenience method for getLargeFaceListsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargeFaceListsWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_LARGE_FACE_LIST);
    }

    /**
     * To check the large face list training status completed or still ongoing. LargeFaceList Training is an
     * asynchronous operation triggered by Train Large Face List.
     * Training time depends on the number of face entries in a large face list. It could be in seconds, or up to half
     * an hour for 1,000,000 faces.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training status of a container.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FaceCollectionTrainingStatus getLargeFaceListTrainingStatus(String largeFaceListId) {
        // Generated convenience method for getLargeFaceListTrainingStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargeFaceListTrainingStatusWithResponse(largeFaceListId, requestOptions).getValue()
            .toObject(FaceCollectionTrainingStatus.class);
    }

    /**
     * Submit a large face list training task.
     * 
     * Training is a crucial step that only a trained large face list can be used by Find Similar.
     * The training task is an asynchronous task. Training time depends on the number of face entries in a large face
     * list. It could be in seconds, or up to half an hour for 1,000,000 faces. To check training completion, please use
     * Get Large Face List Training Status.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<FaceCollectionTrainingStatus, Void> beginTrainLargeFaceList(String largeFaceListId) {
        // Generated convenience method for beginTrainLargeFaceListWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginTrainLargeFaceListWithModel(largeFaceListId, requestOptions);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargeFaceList - Delete Face or LargeFaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 faces per large face list.
     * &gt; * S0-tier subscription quota: 1,000,000 faces per large face list.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param url URL of input image.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addLargeFaceListFaceFromUrl(String largeFaceListId, String url, List<Integer> targetFace,
        FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addLargeFaceListFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddLargeFaceListFaceFromUrlRequest requestObj = new AddLargeFaceListFaceFromUrlRequest(url);
        BinaryData request = BinaryData.fromObject(requestObj);
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addLargeFaceListFaceFromUrlWithResponse(largeFaceListId, request, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargeFaceList - Delete Face or LargeFaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 faces per large face list.
     * &gt; * S0-tier subscription quota: 1,000,000 faces per large face list.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param url URL of input image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addLargeFaceListFaceFromUrl(String largeFaceListId, String url) {
        // Generated convenience method for addLargeFaceListFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddLargeFaceListFaceFromUrlRequest requestObj = new AddLargeFaceListFaceFromUrlRequest(url);
        BinaryData request = BinaryData.fromObject(requestObj);
        return addLargeFaceListFaceFromUrlWithResponse(largeFaceListId, request, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargeFaceList - Delete Face or LargeFaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 faces per large face list.
     * &gt; * S0-tier subscription quota: 1,000,000 faces per large face list.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param imageContent The image to be analyzed.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addLargeFaceListFace(String largeFaceListId, BinaryData imageContent, List<Integer> targetFace,
        FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addLargeFaceListFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addLargeFaceListFaceWithResponse(largeFaceListId, imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargeFaceList - Delete Face or LargeFaceList - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 faces per large face list.
     * &gt; * S0-tier subscription quota: 1,000,000 faces per large face list.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addLargeFaceListFace(String largeFaceListId, BinaryData imageContent) {
        // Generated convenience method for addLargeFaceListFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addLargeFaceListFaceWithResponse(largeFaceListId, imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteLargeFaceListFace(String largeFaceListId, String persistedFaceId) {
        // Generated convenience method for deleteLargeFaceListFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteLargeFaceListFaceWithResponse(largeFaceListId, persistedFaceId, requestOptions).getValue();
    }

    /**
     * Retrieve persisted face in large face list by largeFaceListId and persistedFaceId.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face resource for large face list.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LargeFaceListFace getLargeFaceListFace(String largeFaceListId, String persistedFaceId) {
        // Generated convenience method for getLargeFaceListFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargeFaceListFaceWithResponse(largeFaceListId, persistedFaceId, requestOptions).getValue()
            .toObject(LargeFaceListFace.class);
    }

    /**
     * Update a specified face's userData field in a large face list by its persistedFaceId.
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateLargeFaceListFace(String largeFaceListId, String persistedFaceId, LargeFaceListFace resource) {
        // Generated convenience method for updateLargeFaceListFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updateLargeFaceListFaceWithResponse(largeFaceListId, persistedFaceId, BinaryData.fromObject(resource),
            requestOptions).getValue();
    }

    /**
     * List faces' persistedFaceId and userData in a specified large face list.
     * 
     * Faces are stored in alphabetical order of persistedFaceId created in LargeFaceList Face - Add.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LargeFaceListFace> getLargeFaceListFaces(String largeFaceListId, String start, Integer top) {
        // Generated convenience method for getLargeFaceListFacesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getLargeFaceListFacesWithResponse(largeFaceListId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LARGE_FACE_LIST_FACE);
    }

    /**
     * List faces' persistedFaceId and userData in a specified large face list.
     * 
     * Faces are stored in alphabetical order of persistedFaceId created in LargeFaceList Face - Add.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param largeFaceListId Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LargeFaceListFace> getLargeFaceListFaces(String largeFaceListId) {
        // Generated convenience method for getLargeFaceListFacesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargeFaceListFacesWithResponse(largeFaceListId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LARGE_FACE_LIST_FACE);
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.
     * 
     * A person group is a container holding the uploaded person data, including face recognition features.
     * After creation, use PersonGroup Person - Create to add persons into the group, and then call PersonGroup - Train
     * to get this group ready for Face - Identify.
     * No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until
     * PersonGroup Person - Delete or PersonGroup - Delete is called.
     * 
     * 'recognitionModel' should be specified to associate with this person group. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing person group will use the recognition model that's
     * already associated with the collection. Existing face feature(s) in a person group can't be updated to features
     * extracted by another version of recognition model.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
     * &gt; * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
     * &gt; * to handle larger scale face identification problem, please consider using LargePersonGroup.
     * 
     * @param personGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @param recognitionModel The 'recognitionModel' associated with this face list. Supported 'recognitionModel'
     * values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is
     * 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared
     * with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createPersonGroup(String personGroupId, String name, String userData,
        FaceRecognitionModel recognitionModel) {
        // Generated convenience method for createPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreatePersonGroupRequest requestObj
            = new CreatePersonGroupRequest(name).setUserData(userData).setRecognitionModel(recognitionModel);
        BinaryData request = BinaryData.fromObject(requestObj);
        createPersonGroupWithResponse(personGroupId, request, requestOptions).getValue();
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.
     * 
     * A person group is a container holding the uploaded person data, including face recognition features.
     * After creation, use PersonGroup Person - Create to add persons into the group, and then call PersonGroup - Train
     * to get this group ready for Face - Identify.
     * No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until
     * PersonGroup Person - Delete or PersonGroup - Delete is called.
     * 
     * 'recognitionModel' should be specified to associate with this person group. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing person group will use the recognition model that's
     * already associated with the collection. Existing face feature(s) in a person group can't be updated to features
     * extracted by another version of recognition model.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
     * &gt; * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
     * &gt; * to handle larger scale face identification problem, please consider using LargePersonGroup.
     * 
     * @param personGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createPersonGroup(String personGroupId, String name) {
        // Generated convenience method for createPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreatePersonGroupRequest requestObj = new CreatePersonGroupRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        createPersonGroupWithResponse(personGroupId, request, requestOptions).getValue();
    }

    /**
     * Delete an existing person group with specified personGroupId. Persisted data in this person group will be
     * deleted.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePersonGroup(String personGroupId) {
        // Generated convenience method for deletePersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deletePersonGroupWithResponse(personGroupId, requestOptions).getValue();
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use
     * PersonGroup Person - List.
     * 
     * @param personGroupId ID of the container.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container of the uploaded person data, including face recognition feature, and up to 10,000 persons.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroup getPersonGroup(String personGroupId, Boolean returnRecognitionModel) {
        // Generated convenience method for getPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getPersonGroupWithResponse(personGroupId, requestOptions).getValue().toObject(PersonGroup.class);
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use
     * PersonGroup Person - List.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container of the uploaded person data, including face recognition feature, and up to 10,000 persons.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroup getPersonGroup(String personGroupId) {
        // Generated convenience method for getPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonGroupWithResponse(personGroupId, requestOptions).getValue().toObject(PersonGroup.class);
    }

    /**
     * Update an existing person group's name and userData. The properties keep unchanged if they are not in request
     * body.
     * 
     * @param personGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePersonGroup(String personGroupId, String name, String userData) {
        // Generated convenience method for updatePersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdatePersonGroupRequest requestObj = new UpdatePersonGroupRequest(name).setUserData(userData);
        BinaryData request = BinaryData.fromObject(requestObj);
        updatePersonGroupWithResponse(personGroupId, request, requestOptions).getValue();
    }

    /**
     * Update an existing person group's name and userData. The properties keep unchanged if they are not in request
     * body.
     * 
     * @param personGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePersonGroup(String personGroupId, String name) {
        // Generated convenience method for updatePersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdatePersonGroupRequest requestObj = new UpdatePersonGroupRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        updatePersonGroupWithResponse(personGroupId, request, requestOptions).getValue();
    }

    /**
     * List person groups' personGroupId, name, userData and recognitionModel.
     * 
     * * Person groups are stored in alphabetical order of personGroupId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroup> getPersonGroups(String start, Integer top, Boolean returnRecognitionModel) {
        // Generated convenience method for getPersonGroupsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getPersonGroupsWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_PERSON_GROUP);
    }

    /**
     * List person groups' personGroupId, name, userData and recognitionModel.
     * 
     * * Person groups are stored in alphabetical order of personGroupId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroup> getPersonGroups() {
        // Generated convenience method for getPersonGroupsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonGroupsWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_PERSON_GROUP);
    }

    /**
     * To check person group training status completed or still ongoing. PersonGroup Training is an asynchronous
     * operation triggered by PersonGroup - Train API.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training status of a container.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FaceCollectionTrainingStatus getPersonGroupTrainingStatus(String personGroupId) {
        // Generated convenience method for getPersonGroupTrainingStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonGroupTrainingStatusWithResponse(personGroupId, requestOptions).getValue()
            .toObject(FaceCollectionTrainingStatus.class);
    }

    /**
     * Submit a person group training task. Training is a crucial step that only a trained person group can be used by
     * Face - Identify.
     * 
     * The training task is an asynchronous task. Training time depends on the number of person entries, and their faces
     * in a person group. It could be several seconds to minutes. To check training status, please use PersonGroup - Get
     * Training Status.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<FaceCollectionTrainingStatus, Void> beginTrainPersonGroup(String personGroupId) {
        // Generated convenience method for beginTrainPersonGroupWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginTrainPersonGroupWithModel(personGroupId, requestOptions);
    }

    /**
     * Create a new person in a specified person group. To add face to this person, please call PersonGroup PersonFace -
     * Add.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota:
     * &gt; * 1,000 persons in all person groups.
     * &gt; * S0-tier subscription quota:
     * &gt; * 10,000 persons per person group.
     * &gt; * 1,000,000 person groups.
     * &gt; * 100,000,000 persons in all person groups.
     * 
     * @param personGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of create person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreatePersonResult createPersonGroupPerson(String personGroupId, String name, String userData) {
        // Generated convenience method for createPersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreatePersonGroupPersonRequest requestObj = new CreatePersonGroupPersonRequest(name).setUserData(userData);
        BinaryData request = BinaryData.fromObject(requestObj);
        return createPersonGroupPersonWithResponse(personGroupId, request, requestOptions).getValue()
            .toObject(CreatePersonResult.class);
    }

    /**
     * Create a new person in a specified person group. To add face to this person, please call PersonGroup PersonFace -
     * Add.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota:
     * &gt; * 1,000 persons in all person groups.
     * &gt; * S0-tier subscription quota:
     * &gt; * 10,000 persons per person group.
     * &gt; * 1,000,000 person groups.
     * &gt; * 100,000,000 persons in all person groups.
     * 
     * @param personGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of create person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreatePersonResult createPersonGroupPerson(String personGroupId, String name) {
        // Generated convenience method for createPersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreatePersonGroupPersonRequest requestObj = new CreatePersonGroupPersonRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        return createPersonGroupPersonWithResponse(personGroupId, request, requestOptions).getValue()
            .toObject(CreatePersonResult.class);
    }

    /**
     * Delete an existing person from a person group. The persistedFaceId, userData, person name and face feature(s) in
     * the person entry will all be deleted.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePersonGroupPerson(String personGroupId, String personId) {
        // Generated convenience method for deletePersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deletePersonGroupPersonWithResponse(personGroupId, personId, requestOptions).getValue();
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face
     * feature(s).
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the person in a specified person group.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroupPerson getPersonGroupPerson(String personGroupId, String personId) {
        // Generated convenience method for getPersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonGroupPersonWithResponse(personGroupId, personId, requestOptions).getValue()
            .toObject(PersonGroupPerson.class);
    }

    /**
     * Update name or userData of a person.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePersonGroupPerson(String personGroupId, String personId, String name, String userData) {
        // Generated convenience method for updatePersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdatePersonGroupPersonRequest requestObj = new UpdatePersonGroupPersonRequest(name).setUserData(userData);
        BinaryData request = BinaryData.fromObject(requestObj);
        updatePersonGroupPersonWithResponse(personGroupId, personId, request, requestOptions).getValue();
    }

    /**
     * Update name or userData of a person.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePersonGroupPerson(String personGroupId, String personId, String name) {
        // Generated convenience method for updatePersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdatePersonGroupPersonRequest requestObj = new UpdatePersonGroupPersonRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        updatePersonGroupPersonWithResponse(personGroupId, personId, request, requestOptions).getValue();
    }

    /**
     * List all persons' information in the specified person group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     * 
     * Persons are stored in alphabetical order of personId created in PersonGroup Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param personGroupId ID of the container.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroupPerson> getPersonGroupPersons(String personGroupId, String start, Integer top) {
        // Generated convenience method for getPersonGroupPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getPersonGroupPersonsWithResponse(personGroupId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_PERSON_GROUP_PERSON);
    }

    /**
     * List all persons' information in the specified person group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     * 
     * Persons are stored in alphabetical order of personId created in PersonGroup Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroupPerson> getPersonGroupPersons(String personGroupId) {
        // Generated convenience method for getPersonGroupPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonGroupPersonsWithResponse(personGroupId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_PERSON_GROUP_PERSON);
    }

    /**
     * Add a face to a person into a person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonGroup PersonFace - Delete, PersonGroup Person - Delete or
     * PersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param url URL of input image.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addPersonGroupPersonFaceFromUrl(String personGroupId, String personId, String url,
        List<Integer> targetFace, FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addPersonGroupPersonFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddPersonGroupPersonFaceFromUrlRequest requestObj = new AddPersonGroupPersonFaceFromUrlRequest(url);
        BinaryData request = BinaryData.fromObject(requestObj);
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addPersonGroupPersonFaceFromUrlWithResponse(personGroupId, personId, request, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person into a person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonGroup PersonFace - Delete, PersonGroup Person - Delete or
     * PersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param url URL of input image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addPersonGroupPersonFaceFromUrl(String personGroupId, String personId, String url) {
        // Generated convenience method for addPersonGroupPersonFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddPersonGroupPersonFaceFromUrlRequest requestObj = new AddPersonGroupPersonFaceFromUrlRequest(url);
        BinaryData request = BinaryData.fromObject(requestObj);
        return addPersonGroupPersonFaceFromUrlWithResponse(personGroupId, personId, request, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person into a person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonGroup PersonFace - Delete, PersonGroup Person - Delete or
     * PersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addPersonGroupPersonFace(String personGroupId, String personId, BinaryData imageContent,
        List<Integer> targetFace, FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addPersonGroupPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addPersonGroupPersonFaceWithResponse(personGroupId, personId, imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person into a person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonGroup PersonFace - Delete, PersonGroup Person - Delete or
     * PersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addPersonGroupPersonFace(String personGroupId, String personId, BinaryData imageContent) {
        // Generated convenience method for addPersonGroupPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addPersonGroupPersonFaceWithResponse(personGroupId, personId, imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Delete a face from a person in a person group by specified personGroupId, personId and persistedFaceId.
     * 
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePersonGroupPersonFace(String personGroupId, String personId, String persistedFaceId) {
        // Generated convenience method for deletePersonGroupPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deletePersonGroupPersonFaceWithResponse(personGroupId, personId, persistedFaceId, requestOptions).getValue();
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personGroupId, personId and
     * persistedFaceId.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face resource for person group person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroupPersonFace getPersonGroupPersonFace(String personGroupId, String personId,
        String persistedFaceId) {
        // Generated convenience method for getPersonGroupPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonGroupPersonFaceWithResponse(personGroupId, personId, persistedFaceId, requestOptions).getValue()
            .toObject(PersonGroupPersonFace.class);
    }

    /**
     * Update a person persisted face's userData field.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePersonGroupPersonFace(String personGroupId, String personId, String persistedFaceId,
        PersonGroupPersonFace resource) {
        // Generated convenience method for updatePersonGroupPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updatePersonGroupPersonFaceWithResponse(personGroupId, personId, persistedFaceId,
            BinaryData.fromObject(resource), requestOptions).getValue();
    }

    /**
     * Create a new large person group with user-specified largePersonGroupId, name, an optional userData and
     * recognitionModel.
     * 
     * A large person group is a container holding the uploaded person data, including the face recognition features. It
     * can hold up to 1,000,000 entities.
     * After creation, use LargePersonGroup Person - Create to add person into the group, and call LargePersonGroup -
     * Train to get this group ready for Face - Identify.
     * No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until
     * LargePersonGroup Person - Delete or LargePersonGroup - Delete is called.
     * 
     * 'recognitionModel' should be specified to associate with this large person group. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing large person group will use the recognition model
     * that's already associated with the collection. Existing face feature(s) in a large person group can't be updated
     * to features extracted by another version of recognition model.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 large person groups.
     * &gt; * S0-tier subscription quota: 1,000,000 large person groups.
     * 
     * @param largePersonGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @param recognitionModel The 'recognitionModel' associated with this face list. Supported 'recognitionModel'
     * values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is
     * 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared
     * with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createLargePersonGroup(String largePersonGroupId, String name, String userData,
        FaceRecognitionModel recognitionModel) {
        // Generated convenience method for createLargePersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateLargePersonGroupRequest requestObj
            = new CreateLargePersonGroupRequest(name).setUserData(userData).setRecognitionModel(recognitionModel);
        BinaryData request = BinaryData.fromObject(requestObj);
        createLargePersonGroupWithResponse(largePersonGroupId, request, requestOptions).getValue();
    }

    /**
     * Create a new large person group with user-specified largePersonGroupId, name, an optional userData and
     * recognitionModel.
     * 
     * A large person group is a container holding the uploaded person data, including the face recognition features. It
     * can hold up to 1,000,000 entities.
     * After creation, use LargePersonGroup Person - Create to add person into the group, and call LargePersonGroup -
     * Train to get this group ready for Face - Identify.
     * No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until
     * LargePersonGroup Person - Delete or LargePersonGroup - Delete is called.
     * 
     * 'recognitionModel' should be specified to associate with this large person group. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing large person group will use the recognition model
     * that's already associated with the collection. Existing face feature(s) in a large person group can't be updated
     * to features extracted by another version of recognition model.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota: 1,000 large person groups.
     * &gt; * S0-tier subscription quota: 1,000,000 large person groups.
     * 
     * @param largePersonGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createLargePersonGroup(String largePersonGroupId, String name) {
        // Generated convenience method for createLargePersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateLargePersonGroupRequest requestObj = new CreateLargePersonGroupRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        createLargePersonGroupWithResponse(largePersonGroupId, request, requestOptions).getValue();
    }

    /**
     * Delete an existing large person group with specified personGroupId. Persisted data in this large person group
     * will be deleted.
     * 
     * @param largePersonGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteLargePersonGroup(String largePersonGroupId) {
        // Generated convenience method for deleteLargePersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteLargePersonGroupWithResponse(largePersonGroupId, requestOptions).getValue();
    }

    /**
     * Retrieve the information of a large person group, including its name, userData and recognitionModel. This API
     * returns large person group information only, use LargePersonGroup Person - List instead to retrieve person
     * information under the large person group.
     * 
     * @param largePersonGroupId ID of the container.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container of the uploaded person data, including face recognition feature, and up to 1,000,000
     * people.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LargePersonGroup getLargePersonGroup(String largePersonGroupId, Boolean returnRecognitionModel) {
        // Generated convenience method for getLargePersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getLargePersonGroupWithResponse(largePersonGroupId, requestOptions).getValue()
            .toObject(LargePersonGroup.class);
    }

    /**
     * Retrieve the information of a large person group, including its name, userData and recognitionModel. This API
     * returns large person group information only, use LargePersonGroup Person - List instead to retrieve person
     * information under the large person group.
     * 
     * @param largePersonGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container of the uploaded person data, including face recognition feature, and up to 1,000,000
     * people.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LargePersonGroup getLargePersonGroup(String largePersonGroupId) {
        // Generated convenience method for getLargePersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargePersonGroupWithResponse(largePersonGroupId, requestOptions).getValue()
            .toObject(LargePersonGroup.class);
    }

    /**
     * Update an existing large person group's name and userData. The properties keep unchanged if they are not in
     * request body.
     * 
     * @param largePersonGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateLargePersonGroup(String largePersonGroupId, String name, String userData) {
        // Generated convenience method for updateLargePersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateLargePersonGroupRequest requestObj = new UpdateLargePersonGroupRequest(name).setUserData(userData);
        BinaryData request = BinaryData.fromObject(requestObj);
        updateLargePersonGroupWithResponse(largePersonGroupId, request, requestOptions).getValue();
    }

    /**
     * Update an existing large person group's name and userData. The properties keep unchanged if they are not in
     * request body.
     * 
     * @param largePersonGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateLargePersonGroup(String largePersonGroupId, String name) {
        // Generated convenience method for updateLargePersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateLargePersonGroupRequest requestObj = new UpdateLargePersonGroupRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        updateLargePersonGroupWithResponse(largePersonGroupId, request, requestOptions).getValue();
    }

    /**
     * List all existing large person groups' largePersonGroupId, name, userData and recognitionModel.
     * 
     * * Large person groups are stored in alphabetical order of largePersonGroupId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LargePersonGroup> getLargePersonGroups(String start, Integer top, Boolean returnRecognitionModel) {
        // Generated convenience method for getLargePersonGroupsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getLargePersonGroupsWithResponse(requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP);
    }

    /**
     * List all existing large person groups' largePersonGroupId, name, userData and recognitionModel.
     * 
     * * Large person groups are stored in alphabetical order of largePersonGroupId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LargePersonGroup> getLargePersonGroups() {
        // Generated convenience method for getLargePersonGroupsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargePersonGroupsWithResponse(requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP);
    }

    /**
     * To check large person group training status completed or still ongoing. LargePersonGroup Training is an
     * asynchronous operation triggered by LargePersonGroup - Train API.
     * 
     * Training time depends on the number of person entries, and their faces in a large person group. It could be in
     * seconds, or up to half an hour for 1,000,000 persons.
     * 
     * @param largePersonGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training status of a container.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FaceCollectionTrainingStatus getLargePersonGroupTrainingStatus(String largePersonGroupId) {
        // Generated convenience method for getLargePersonGroupTrainingStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargePersonGroupTrainingStatusWithResponse(largePersonGroupId, requestOptions).getValue()
            .toObject(FaceCollectionTrainingStatus.class);
    }

    /**
     * Submit a large person group training task. Training is a crucial step that only a trained large person group can
     * be used by Face - Identify.
     * 
     * The training task is an asynchronous task. Training time depends on the number of person entries, and their faces
     * in a large person group. It could be in several seconds, or up to half a hour for 1,000,000 persons. To check
     * training completion, please use LargePersonGroup - Get Training Status.
     * 
     * @param largePersonGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<FaceCollectionTrainingStatus, Void> beginTrainLargePersonGroup(String largePersonGroupId) {
        // Generated convenience method for beginTrainLargePersonGroupWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginTrainLargePersonGroupWithModel(largePersonGroupId, requestOptions);
    }

    /**
     * Create a new person in a specified large person group. To add face to this person, please call LargePersonGroup
     * PersonFace - Add.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota:
     * &gt; * 1,000 persons in all large person groups.
     * &gt; * S0-tier subscription quota:
     * &gt; * 1,000,000 persons per large person group.
     * &gt; * 1,000,000 large person groups.
     * &gt; * 1,000,000,000 persons in all large person groups.
     * 
     * @param largePersonGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of create person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreatePersonResult createLargePersonGroupPerson(String largePersonGroupId, String name, String userData) {
        // Generated convenience method for createLargePersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateLargePersonGroupPersonRequest requestObj
            = new CreateLargePersonGroupPersonRequest(name).setUserData(userData);
        BinaryData request = BinaryData.fromObject(requestObj);
        return createLargePersonGroupPersonWithResponse(largePersonGroupId, request, requestOptions).getValue()
            .toObject(CreatePersonResult.class);
    }

    /**
     * Create a new person in a specified large person group. To add face to this person, please call LargePersonGroup
     * PersonFace - Add.
     * 
     * &gt; [!NOTE]
     * &gt; * Free-tier subscription quota:
     * &gt; * 1,000 persons in all large person groups.
     * &gt; * S0-tier subscription quota:
     * &gt; * 1,000,000 persons per large person group.
     * &gt; * 1,000,000 large person groups.
     * &gt; * 1,000,000,000 persons in all large person groups.
     * 
     * @param largePersonGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of create person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreatePersonResult createLargePersonGroupPerson(String largePersonGroupId, String name) {
        // Generated convenience method for createLargePersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateLargePersonGroupPersonRequest requestObj = new CreateLargePersonGroupPersonRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        return createLargePersonGroupPersonWithResponse(largePersonGroupId, request, requestOptions).getValue()
            .toObject(CreatePersonResult.class);
    }

    /**
     * Delete an existing person from a large person group. The persistedFaceId, userData, person name and face
     * feature(s) in the person entry will all be deleted.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteLargePersonGroupPerson(String largePersonGroupId, String personId) {
        // Generated convenience method for deleteLargePersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteLargePersonGroupPersonWithResponse(largePersonGroupId, personId, requestOptions).getValue();
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face
     * feature(s).
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the person in a specified large person group.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LargePersonGroupPerson getLargePersonGroupPerson(String largePersonGroupId, String personId) {
        // Generated convenience method for getLargePersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargePersonGroupPersonWithResponse(largePersonGroupId, personId, requestOptions).getValue()
            .toObject(LargePersonGroupPerson.class);
    }

    /**
     * Update name or userData of a person.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateLargePersonGroupPerson(String largePersonGroupId, String personId, String name, String userData) {
        // Generated convenience method for updateLargePersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateLargePersonGroupPersonRequest requestObj
            = new UpdateLargePersonGroupPersonRequest(name).setUserData(userData);
        BinaryData request = BinaryData.fromObject(requestObj);
        updateLargePersonGroupPersonWithResponse(largePersonGroupId, personId, request, requestOptions).getValue();
    }

    /**
     * Update name or userData of a person.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateLargePersonGroupPerson(String largePersonGroupId, String personId, String name) {
        // Generated convenience method for updateLargePersonGroupPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateLargePersonGroupPersonRequest requestObj = new UpdateLargePersonGroupPersonRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        updateLargePersonGroupPersonWithResponse(largePersonGroupId, personId, request, requestOptions).getValue();
    }

    /**
     * List all persons' information in the specified large person group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     * 
     * * Persons are stored in alphabetical order of personId created in LargePersonGroup Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param largePersonGroupId ID of the container.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LargePersonGroupPerson> getLargePersonGroupPersons(String largePersonGroupId, String start,
        Integer top) {
        // Generated convenience method for getLargePersonGroupPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getLargePersonGroupPersonsWithResponse(largePersonGroupId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP_PERSON);
    }

    /**
     * List all persons' information in the specified large person group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     * 
     * * Persons are stored in alphabetical order of personId created in LargePersonGroup Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param largePersonGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LargePersonGroupPerson> getLargePersonGroupPersons(String largePersonGroupId) {
        // Generated convenience method for getLargePersonGroupPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargePersonGroupPersonsWithResponse(largePersonGroupId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP_PERSON);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargePersonGroup PersonFace - Delete, LargePersonGroup Person -
     * Delete or LargePersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param url URL of input image.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addLargePersonGroupPersonFaceFromUrl(String largePersonGroupId, String personId, String url,
        List<Integer> targetFace, FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addLargePersonGroupPersonFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddLargePersonGroupPersonFaceFromUrlRequest requestObj = new AddLargePersonGroupPersonFaceFromUrlRequest(url);
        BinaryData request = BinaryData.fromObject(requestObj);
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addLargePersonGroupPersonFaceFromUrlWithResponse(largePersonGroupId, personId, request, requestOptions)
            .getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargePersonGroup PersonFace - Delete, LargePersonGroup Person -
     * Delete or LargePersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param url URL of input image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addLargePersonGroupPersonFaceFromUrl(String largePersonGroupId, String personId, String url) {
        // Generated convenience method for addLargePersonGroupPersonFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddLargePersonGroupPersonFaceFromUrlRequest requestObj = new AddLargePersonGroupPersonFaceFromUrlRequest(url);
        BinaryData request = BinaryData.fromObject(requestObj);
        return addLargePersonGroupPersonFaceFromUrlWithResponse(largePersonGroupId, personId, request, requestOptions)
            .getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargePersonGroup PersonFace - Delete, LargePersonGroup Person -
     * Delete or LargePersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addLargePersonGroupPersonFace(String largePersonGroupId, String personId,
        BinaryData imageContent, List<Integer> targetFace, FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addLargePersonGroupPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addLargePersonGroupPersonFaceWithResponse(largePersonGroupId, personId, imageContent, requestOptions)
            .getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until LargePersonGroup PersonFace - Delete, LargePersonGroup Person -
     * Delete or LargePersonGroup - Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddFaceResult addLargePersonGroupPersonFace(String largePersonGroupId, String personId,
        BinaryData imageContent) {
        // Generated convenience method for addLargePersonGroupPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addLargePersonGroupPersonFaceWithResponse(largePersonGroupId, personId, imageContent, requestOptions)
            .getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Delete a face from a person in a large person group by specified largePersonGroupId, personId and
     * persistedFaceId.
     * 
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteLargePersonGroupPersonFace(String largePersonGroupId, String personId, String persistedFaceId) {
        // Generated convenience method for deleteLargePersonGroupPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteLargePersonGroupPersonFaceWithResponse(largePersonGroupId, personId, persistedFaceId, requestOptions)
            .getValue();
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its largePersonGroupId, personId and
     * persistedFaceId.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face resource for large person group person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LargePersonGroupPersonFace getLargePersonGroupPersonFace(String largePersonGroupId, String personId,
        String persistedFaceId) {
        // Generated convenience method for getLargePersonGroupPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargePersonGroupPersonFaceWithResponse(largePersonGroupId, personId, persistedFaceId, requestOptions)
            .getValue()
            .toObject(LargePersonGroupPersonFace.class);
    }

    /**
     * Update a person persisted face's userData field.
     * 
     * @param largePersonGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateLargePersonGroupPersonFace(String largePersonGroupId, String personId, String persistedFaceId,
        LargePersonGroupPersonFace resource) {
        // Generated convenience method for updateLargePersonGroupPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updateLargePersonGroupPersonFaceWithResponse(largePersonGroupId, personId, persistedFaceId,
            BinaryData.fromObject(resource), requestOptions).getValue();
    }

    /**
     * Creates a new person in a person directory. To add face to this person, please call PersonDirectory Person - Add
     * Face.
     * 
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of create person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    CreatePersonResult createPerson(PersonDirectoryPerson resource) {
        // Generated convenience method for createPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createPersonWithResponse(BinaryData.fromObject(resource), requestOptions).getValue()
            .toObject(CreatePersonResult.class);
    }

    /**
     * Delete an existing person from person directory. The persistedFaceId(s), userData, person name and face
     * feature(s) in the person entry will all be deleted.
     * 
     * @param personId Person ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<FaceOperationStatus, Void> beginDeletePerson(String personId) {
        // Generated convenience method for beginDeletePersonWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeletePersonWithModel(personId, requestOptions);
    }

    /**
     * Retrieve a person's name and userData from person directory.
     * 
     * @param personId Person ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person resource for person directory.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonDirectoryPerson getPerson(String personId) {
        // Generated convenience method for getPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonWithResponse(personId, requestOptions).getValue().toObject(PersonDirectoryPerson.class);
    }

    /**
     * Update name or userData of a person.
     * 
     * @param personId Person ID of the person.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePerson(String personId, String name, String userData) {
        // Generated convenience method for updatePersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdatePersonRequest requestObj = new UpdatePersonRequest(name).setUserData(userData);
        BinaryData request = BinaryData.fromObject(requestObj);
        updatePersonWithResponse(personId, request, requestOptions).getValue();
    }

    /**
     * Update name or userData of a person.
     * 
     * @param personId Person ID of the person.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePerson(String personId, String name) {
        // Generated convenience method for updatePersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdatePersonRequest requestObj = new UpdatePersonRequest(name);
        BinaryData request = BinaryData.fromObject(requestObj);
        updatePersonWithResponse(personId, request, requestOptions).getValue();
    }

    /**
     * List all persons' information in person directory, including personId, name, and userData.
     * 
     * * Persons are stored in alphabetical order of personId created in PersonDirectory Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonDirectoryPerson> getPersons(String start, Integer top) {
        // Generated convenience method for getPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getPersonsWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_PERSON_DIRECTORY_PERSON);
    }

    /**
     * List all persons' information in person directory, including personId, name, and userData.
     * 
     * * Persons are stored in alphabetical order of personId created in PersonDirectory Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonDirectoryPerson> getPersons() {
        // Generated convenience method for getPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonsWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_PERSON_DIRECTORY_PERSON);
    }

    /**
     * List all dynamic person groups a person has been referenced by in person directory.
     * 
     * * Dynamic person groups are stored in alphabetical order of dynamic person group id created in PersonDirectory
     * DynamicPersonGroup - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param personId Person ID of the person.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of list dynamic person group of person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListGroupReferenceResult getDynamicPersonGroupReferences(String personId, String start, Integer top) {
        // Generated convenience method for getDynamicPersonGroupReferencesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getDynamicPersonGroupReferencesWithResponse(personId, requestOptions).getValue()
            .toObject(ListGroupReferenceResult.class);
    }

    /**
     * List all dynamic person groups a person has been referenced by in person directory.
     * 
     * * Dynamic person groups are stored in alphabetical order of dynamic person group id created in PersonDirectory
     * DynamicPersonGroup - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param personId Person ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of list dynamic person group of person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListGroupReferenceResult getDynamicPersonGroupReferences(String personId) {
        // Generated convenience method for getDynamicPersonGroupReferencesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDynamicPersonGroupReferencesWithResponse(personId, requestOptions).getValue()
            .toObject(ListGroupReferenceResult.class);
    }

    /**
     * Add a face to a person (see PersonDirectory Person - Create) for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonDirectory Person - Delete Face or PersonDirectory Person -
     * Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * * This is a long running operation. Use Response Header "Operation-Location" to determine when the AddFace
     * operation has successfully propagated for future requests to Face - Identify. For further information about
     * Operation-Locations see Operations - Get Status.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param url URL of input image.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    AddFaceResult addPersonFaceFromUrl(String personId, FaceRecognitionModel recognitionModel, String url,
        List<Integer> targetFace, FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addPersonFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddPersonFaceFromUrlRequest requestObj = new AddPersonFaceFromUrlRequest(url);
        BinaryData request = BinaryData.fromObject(requestObj);
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addPersonFaceFromUrlWithResponse(personId, recognitionModel.toString(), request, requestOptions)
            .getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person (see PersonDirectory Person - Create) for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonDirectory Person - Delete Face or PersonDirectory Person -
     * Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * * This is a long running operation. Use Response Header "Operation-Location" to determine when the AddFace
     * operation has successfully propagated for future requests to Face - Identify. For further information about
     * Operation-Locations see Operations - Get Status.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param url URL of input image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    AddFaceResult addPersonFaceFromUrl(String personId, FaceRecognitionModel recognitionModel, String url) {
        // Generated convenience method for addPersonFaceFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddPersonFaceFromUrlRequest requestObj = new AddPersonFaceFromUrlRequest(url);
        BinaryData request = BinaryData.fromObject(requestObj);
        return addPersonFaceFromUrlWithResponse(personId, recognitionModel.toString(), request, requestOptions)
            .getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person (see PersonDirectory Person - Create) for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonDirectory Person - Delete Face or PersonDirectory Person -
     * Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * * This is a long running operation. Use Response Header "Operation-Location" to determine when the AddFace
     * operation has successfully propagated for future requests to Face - Identify. For further information about
     * Operation-Locations see Operations - Get Status.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param imageContent The image to be analyzed.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    AddFaceResult addPersonFace(String personId, FaceRecognitionModel recognitionModel, BinaryData imageContent,
        List<Integer> targetFace, FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addPersonFaceWithResponse(personId, recognitionModel.toString(), imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person (see PersonDirectory Person - Create) for face identification or verification.
     * 
     * To deal with an image containing multiple faces, input face can be specified as an image with a targetFace
     * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted
     * face feature(s) will be stored on server until PersonDirectory Person - Delete Face or PersonDirectory Person -
     * Delete is called.
     * Note persistedFaceId is different from faceId generated by Face - Detect.
     * 
     * * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     * clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Each person entry can hold up to 248 faces.
     * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from Face - Detect, there's no guarantee to detect and add the
     * face successfully.
     * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     * failures.
     * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer
     * to https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/specify-detection-model
     * * 'detection_01': The default detection model for PersonDirectory Person - Add Face. Recommend for near frontal
     * face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
     * orientation, the faces in such cases may not be detected.
     * * 'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and
     * blurry faces.
     * * 'detection_03': Detection model released in 2021 February with improved accuracy especially on small faces.
     * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * * This is a long running operation. Use Response Header "Operation-Location" to determine when the AddFace
     * operation has successfully propagated for future requests to Face - Identify. For further information about
     * Operation-Locations see Operations - Get Status.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    AddFaceResult addPersonFace(String personId, FaceRecognitionModel recognitionModel, BinaryData imageContent) {
        // Generated convenience method for addPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addPersonFaceWithResponse(personId, recognitionModel.toString(), imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Delete a face from a person in person directory by specified personId and persistedFaceId.
     * 
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<FaceOperationStatus, Void> beginDeletePersonFace(String personId,
        FaceRecognitionModel recognitionModel, String persistedFaceId) {
        // Generated convenience method for beginDeletePersonFaceWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeletePersonFaceWithModel(personId, recognitionModel.toString(), persistedFaceId,
            requestOptions);
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personId. recognitionModel, and
     * persistedFaceId.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face resource for person directory person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonDirectoryFace getPersonFace(String personId, FaceRecognitionModel recognitionModel,
        String persistedFaceId) {
        // Generated convenience method for getPersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonFaceWithResponse(personId, recognitionModel.toString(), persistedFaceId, requestOptions)
            .getValue()
            .toObject(PersonDirectoryFace.class);
    }

    /**
     * Update a person persisted face's userData field.
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @param persistedFaceId Face ID of the face.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePersonFace(String personId, FaceRecognitionModel recognitionModel, String persistedFaceId,
        PersonDirectoryFace resource) {
        // Generated convenience method for updatePersonFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updatePersonFaceWithResponse(personId, recognitionModel.toString(), persistedFaceId,
            BinaryData.fromObject(resource), requestOptions).getValue();
    }

    /**
     * Retrieve a person's persistedFaceIds representing the registered person face feature(s).
     * 
     * @param personId Person ID of the person.
     * @param recognitionModel The 'recognitionModel' associated with faces.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of list face of person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListFaceResult getPersonFaces(String personId, FaceRecognitionModel recognitionModel) {
        // Generated convenience method for getPersonFacesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonFacesWithResponse(personId, recognitionModel.toString(), requestOptions).getValue()
            .toObject(ListFaceResult.class);
    }

    /**
     * Creates a new dynamic person group with specified dynamicPersonGroupId, name, and user-provided userData.
     * 
     * A dynamic person group is a container that references PersonDirectory Person - Create. After creation, use
     * PersonDirectory DynamicPersonGroup - Update to add or remove persons into the dynamic person group.
     * DynamicPersonGroup and UserData will be stored on server until PersonDirectory DynamicPersonGroup - Delete is
     * called. Use Face - Identify with the dynamicPersonGroupId parameter to identify against persons.
     * No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until
     * PersonDirectory Person - Delete or PersonDirectory Person - Delete Face is called.
     * 
     * 'recognitionModel' does not need to be specified with dynamic person groups. Dynamic person groups are references
     * to PersonDirectory Person - Create and therefore work with most all 'recognitionModels'. The faceId's provided
     * during Face - Identify determine the 'recognitionModel' used.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void createDynamicPersonGroup(String dynamicPersonGroupId, Resource resource) {
        // Generated convenience method for createDynamicPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createDynamicPersonGroupWithResponse(dynamicPersonGroupId, BinaryData.fromObject(resource), requestOptions)
            .getValue();
    }

    /**
     * Deletes an existing dynamic person group with specified dynamicPersonGroupId.
     * 
     * Deleting this dynamic person group only delete the references to persons data. To delete actual person see
     * PersonDirectory Person - Delete.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<FaceOperationStatus, Void> beginDeleteDynamicPersonGroup(String dynamicPersonGroupId) {
        // Generated convenience method for beginDeleteDynamicPersonGroupWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteDynamicPersonGroupWithModel(dynamicPersonGroupId, requestOptions);
    }

    /**
     * Retrieve the information of a dynamic person group, including its name and userData.
     * 
     * This API returns dynamic person group information only, use PersonDirectory DynamicPersonGroup - List Persons
     * instead to retrieve person information under the dynamic person group.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container that references PersonDirectory Person - Create.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicPersonGroup getDynamicPersonGroup(String dynamicPersonGroupId) {
        // Generated convenience method for getDynamicPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDynamicPersonGroupWithResponse(dynamicPersonGroupId, requestOptions).getValue()
            .toObject(DynamicPersonGroup.class);
    }

    /**
     * Update an existing dynamic person group name, userData, add, or remove persons.
     * 
     * The properties keep unchanged if they are not in request body.
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void updateDynamicPersonGroup(String dynamicPersonGroupId, Resource1 resource) {
        // Generated convenience method for updateDynamicPersonGroupWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updateDynamicPersonGroupWithResponse(dynamicPersonGroupId, BinaryData.fromObject(resource), requestOptions)
            .getValue();
    }

    /**
     * List all existing dynamic person groups by dynamicPersonGroupId along with name and userData.
     * 
     * * Dynamic person groups are stored in alphabetical order of dynamicPersonGroupId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<DynamicPersonGroup> getDynamicPersonGroups(String start, Integer top) {
        // Generated convenience method for getDynamicPersonGroupsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getDynamicPersonGroupsWithResponse(requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_DYNAMIC_PERSON_GROUP);
    }

    /**
     * List all existing dynamic person groups by dynamicPersonGroupId along with name and userData.
     * 
     * * Dynamic person groups are stored in alphabetical order of dynamicPersonGroupId.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<DynamicPersonGroup> getDynamicPersonGroups() {
        // Generated convenience method for getDynamicPersonGroupsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDynamicPersonGroupsWithResponse(requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_DYNAMIC_PERSON_GROUP);
    }

    /**
     * List all persons in the specified dynamic person group.
     * 
     * * Persons are stored in alphabetical order of personId created in PersonDirectory Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of list dynamic person group person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListPersonResult getDynamicPersonGroupPersons(String dynamicPersonGroupId, String start, Integer top) {
        // Generated convenience method for getDynamicPersonGroupPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getDynamicPersonGroupPersonsWithResponse(dynamicPersonGroupId, requestOptions).getValue()
            .toObject(ListPersonResult.class);
    }

    /**
     * List all persons in the specified dynamic person group.
     * 
     * * Persons are stored in alphabetical order of personId created in PersonDirectory Person - Create.
     * * "start" parameter (string, optional) is a id value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be
     * returned in one call. To fetch more, you can specify "start" with the last returned entry's personId of the
     * current call.
     * 
     * &gt; [!TIP]
     * &gt; For example, total 5 items with their id: "itemId1", ..., "itemId5".
     * &gt; * "start=&amp;top=" will return all 5 items.
     * &gt; * "start=&amp;top=2" will return "itemId1", "itemId2".
     * &gt; * "start=itemId2&amp;top=3" will return "itemId3", "itemId4", "itemId5".
     * 
     * @param dynamicPersonGroupId ID of the dynamic person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of list dynamic person group person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListPersonResult getDynamicPersonGroupPersons(String dynamicPersonGroupId) {
        // Generated convenience method for getDynamicPersonGroupPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDynamicPersonGroupPersonsWithResponse(dynamicPersonGroupId, requestOptions).getValue()
            .toObject(ListPersonResult.class);
    }

    @Generated
    private static final TypeReference<List<LargePersonGroup>> TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP
        = new TypeReference<List<LargePersonGroup>>() {
        };

    @Generated
    private static final TypeReference<List<FaceListItem>> TYPE_REFERENCE_LIST_FACE_LIST_ITEM
        = new TypeReference<List<FaceListItem>>() {
        };

    @Generated
    private static final TypeReference<List<PersonGroup>> TYPE_REFERENCE_LIST_PERSON_GROUP
        = new TypeReference<List<PersonGroup>>() {
        };

    @Generated
    private static final TypeReference<List<LargeFaceListFace>> TYPE_REFERENCE_LIST_LARGE_FACE_LIST_FACE
        = new TypeReference<List<LargeFaceListFace>>() {
        };

    @Generated
    private static final TypeReference<List<PersonDirectoryPerson>> TYPE_REFERENCE_LIST_PERSON_DIRECTORY_PERSON
        = new TypeReference<List<PersonDirectoryPerson>>() {
        };

    @Generated
    private static final TypeReference<List<PersonGroupPerson>> TYPE_REFERENCE_LIST_PERSON_GROUP_PERSON
        = new TypeReference<List<PersonGroupPerson>>() {
        };

    @Generated
    private static final TypeReference<List<LargeFaceList>> TYPE_REFERENCE_LIST_LARGE_FACE_LIST
        = new TypeReference<List<LargeFaceList>>() {
        };

    @Generated
    private static final TypeReference<List<LargePersonGroupPerson>> TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP_PERSON
        = new TypeReference<List<LargePersonGroupPerson>>() {
        };

    @Generated
    private static final TypeReference<List<DynamicPersonGroup>> TYPE_REFERENCE_LIST_DYNAMIC_PERSON_GROUP
        = new TypeReference<List<DynamicPersonGroup>>() {
        };
}
