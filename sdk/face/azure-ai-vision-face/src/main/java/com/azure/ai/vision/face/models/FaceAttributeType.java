// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

/**
 * Available options for detect face with attribute.
 */
public enum FaceAttributeType {
    /**
     * 3-D roll/yaw/pitch angles for face direction.
     */
    HEAD_POSE("headPose"),

    /**
     * Glasses type. Values include 'NoGlasses', 'ReadingGlasses', 'Sunglasses', 'SwimmingGoggles'.
     */
    GLASSES("glasses"),

    /**
     * Whether each facial area is occluded, including forehead, eyes and mouth.
     */
    OCCLUSION("occlusion"),

    /**
     * Accessories around face, including 'headwear', 'glasses' and 'mask'. Empty array means no accessories detected.
     * Note this is after a face is detected. Large mask could result in no face to be detected.
     */
    ACCESSORIES("accessories"),

    /**
     * Face is blurry or not. Level returns 'Low', 'Medium' or 'High'. Value returns a number between [0,1], the larger
     * the blurrier.
     */
    BLUR("blur"),

    /**
     * Face exposure level. Level returns 'GoodExposure', 'OverExposure' or 'UnderExposure'.
     */
    EXPOSURE("exposure"),

    /**
     * Noise level of face pixels. Level returns 'Low', 'Medium' and 'High'. Value returns a number between [0,1], the
     * larger the noisier.
     */
    NOISE("noise"),

    /**
     * Whether each face is wearing a mask. Mask type returns 'noMask', 'faceMask', 'otherMaskOrOcclusion', or
     * 'uncertain'. Value returns a boolean 'noseAndMouthCovered' indicating whether nose and mouth are covered.
     */
    MASK("mask"),

    /**
     * The overall image quality regarding whether the image being used in the detection is of sufficient quality to
     * attempt face recognition on. The value is an informal rating of low, medium, or high. Only 'high' quality images
     * are recommended for person enrollment and quality at or above 'medium' is recommended for identification
     * scenarios. The attribute is only available when using any combinations of detection models detection_01 or
     * detection_03, and recognition models recognition_03 or recognition_04.
     */
    QUALITY_FOR_RECOGNITION("qualityForRecognition");

    /**
     * The actual serialized value for a FaceAttributeType instance.
     */
    private final String value;

    FaceAttributeType(String value) {
        this.value = value;
    }

    /**
     * Parses a serialized value to a FaceAttributeType instance.
     * 
     * @param value the serialized value to parse.
     * @return the parsed FaceAttributeType object, or null if unable to parse.
     */
    public static FaceAttributeType fromString(String value) {
        if (value == null) {
            return null;
        }
        FaceAttributeType[] items = FaceAttributeType.values();
        for (FaceAttributeType item : items) {
            if (item.toString().equalsIgnoreCase(value)) {
                return item;
            }
        }
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        return this.value;
    }
}
