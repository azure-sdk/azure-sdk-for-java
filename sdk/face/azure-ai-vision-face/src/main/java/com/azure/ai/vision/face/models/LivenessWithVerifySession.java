// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Session result of detect liveness with verify.
 */
@Immutable
public final class LivenessWithVerifySession implements JsonSerializable<LivenessWithVerifySession> {
    /*
     * Unique ID to reference this session.
     */
    @Generated
    private String id;

    /*
     * Session creation time in millisecond from epoch.
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /*
     * Session started time from session auth token.
     */
    @Generated
    private OffsetDateTime sessionStartDateTime;

    /*
     * Whether or not the session is expired.
     */
    @Generated
    private boolean sessionExpired;

    /*
     * Device Correlation Id to use for linking multiple sessions together.
     */
    @Generated
    private final String deviceCorrelationId;

    /*
     * Session length in seconds. Range is 60 to 86400 seconds.
     */
    @Generated
    private Integer authTokenTimeToLiveInSeconds;

    /*
     * The session status.
     */
    @Generated
    private FaceSessionStatus status;

    /*
     * The last result of session.
     */
    @Generated
    private LivenessSessionAuditEntry result;

    /**
     * Creates an instance of LivenessWithVerifySession class.
     * 
     * @param deviceCorrelationId the deviceCorrelationId value to set.
     */
    @Generated
    private LivenessWithVerifySession(String deviceCorrelationId) {
        this.deviceCorrelationId = deviceCorrelationId;
    }

    /**
     * Get the id property: Unique ID to reference this session.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the createdDateTime property: Session creation time in millisecond from epoch.
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the sessionStartDateTime property: Session started time from session auth token.
     * 
     * @return the sessionStartDateTime value.
     */
    @Generated
    public OffsetDateTime getSessionStartDateTime() {
        return this.sessionStartDateTime;
    }

    /**
     * Get the sessionExpired property: Whether or not the session is expired.
     * 
     * @return the sessionExpired value.
     */
    @Generated
    public boolean isSessionExpired() {
        return this.sessionExpired;
    }

    /**
     * Get the deviceCorrelationId property: Device Correlation Id to use for linking multiple sessions together.
     * 
     * @return the deviceCorrelationId value.
     */
    @Generated
    public String getDeviceCorrelationId() {
        return this.deviceCorrelationId;
    }

    /**
     * Get the authTokenTimeToLiveInSeconds property: Session length in seconds. Range is 60 to 86400 seconds.
     * 
     * @return the authTokenTimeToLiveInSeconds value.
     */
    @Generated
    public Integer getAuthTokenTimeToLiveInSeconds() {
        return this.authTokenTimeToLiveInSeconds;
    }

    /**
     * Get the status property: The session status.
     * 
     * @return the status value.
     */
    @Generated
    public FaceSessionStatus getStatus() {
        return this.status;
    }

    /**
     * Get the result property: The last result of session.
     * 
     * @return the result value.
     */
    @Generated
    public LivenessSessionAuditEntry getResult() {
        return this.result;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deviceCorrelationId", this.deviceCorrelationId);
        jsonWriter.writeNumberField("authTokenTimeToLiveInSeconds", this.authTokenTimeToLiveInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessWithVerifySession from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessWithVerifySession if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivenessWithVerifySession.
     */
    @Generated
    public static LivenessWithVerifySession fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime createdDateTime = null;
            boolean sessionExpired = false;
            String deviceCorrelationId = null;
            FaceSessionStatus status = null;
            OffsetDateTime sessionStartDateTime = null;
            Integer authTokenTimeToLiveInSeconds = null;
            LivenessSessionAuditEntry result = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("createdDateTime".equals(fieldName)) {
                    createdDateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("sessionExpired".equals(fieldName)) {
                    sessionExpired = reader.getBoolean();
                } else if ("deviceCorrelationId".equals(fieldName)) {
                    deviceCorrelationId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = FaceSessionStatus.fromString(reader.getString());
                } else if ("sessionStartDateTime".equals(fieldName)) {
                    sessionStartDateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("authTokenTimeToLiveInSeconds".equals(fieldName)) {
                    authTokenTimeToLiveInSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("result".equals(fieldName)) {
                    result = LivenessSessionAuditEntry.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            LivenessWithVerifySession deserializedLivenessWithVerifySession
                = new LivenessWithVerifySession(deviceCorrelationId);
            deserializedLivenessWithVerifySession.id = id;
            deserializedLivenessWithVerifySession.createdDateTime = createdDateTime;
            deserializedLivenessWithVerifySession.sessionExpired = sessionExpired;
            deserializedLivenessWithVerifySession.status = status;
            deserializedLivenessWithVerifySession.sessionStartDateTime = sessionStartDateTime;
            deserializedLivenessWithVerifySession.authTokenTimeToLiveInSeconds = authTokenTimeToLiveInSeconds;
            deserializedLivenessWithVerifySession.result = result;

            return deserializedLivenessWithVerifySession;
        });
    }
}
