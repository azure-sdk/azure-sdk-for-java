// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face;

import com.azure.ai.vision.face.implementation.PersonGroupsImpl;
import com.azure.ai.vision.face.implementation.models.AddFaceFromUrlRequest1;
import com.azure.ai.vision.face.implementation.models.CreatePersonRequest1;
import com.azure.ai.vision.face.implementation.models.CreateRequest1;
import com.azure.ai.vision.face.implementation.models.UpdateFaceRequest1;
import com.azure.ai.vision.face.implementation.models.UpdatePersonRequest1;
import com.azure.ai.vision.face.implementation.models.UpdateRequest1;
import com.azure.ai.vision.face.models.AddFaceResult;
import com.azure.ai.vision.face.models.CreatePersonResult;
import com.azure.ai.vision.face.models.FaceDetectionModel;
import com.azure.ai.vision.face.models.FaceRecognitionModel;
import com.azure.ai.vision.face.models.PersonGroup;
import com.azure.ai.vision.face.models.PersonGroupPerson;
import com.azure.ai.vision.face.models.PersonGroupPersonFace;
import com.azure.ai.vision.face.models.TrainingResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;

/**
 * Initializes a new instance of the synchronous FaceServiceClient type.
 */
@ServiceClient(builder = FaceServiceClientBuilder.class)
public final class PersonGroupClient {
    @Generated
    private final PersonGroupsImpl serviceClient;

    /**
     * Initializes an instance of PersonGroupClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    PersonGroupClient(PersonGroupsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a new Person Group with specified personGroupId, name, user-provided userData and recognitionModel.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-person-group for more
     * details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param createRequest1 The createRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createWithResponse(String personGroupId, BinaryData createRequest1,
        RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(personGroupId, createRequest1, requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-person-group for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(personGroupId, requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group for more
     * details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     personGroupId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container of the uploaded person data, including face recognition feature, and up to 10,000 persons
     * along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(personGroupId, requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-person-group for more
     * details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param updateRequest1 The updateRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateWithResponse(String personGroupId, BinaryData updateRequest1,
        RequestOptions requestOptions) {
        return this.serviceClient.updateWithResponse(personGroupId, updateRequest1, requestOptions);
    }

    /**
     * List Person Groups' personGroupId, name, userData and recognitionModel.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-groups for more
     * details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         name: String (Required)
     *         userData: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         personGroupId: String (Required)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonGroupsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getPersonGroupsWithResponse(requestOptions);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group-training-status for more
     * details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     status: String(notStarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     lastSuccessfulTrainingDateTime: OffsetDateTime (Required)
     *     message: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training result of a container along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTrainingStatusWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.getTrainingStatusWithResponse(personGroupId, requestOptions);
    }

    /**
     * Submit a Person Group training task. Training is a crucial step that only a trained Person Group can be used by
     * "Identify From Person Group".
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/train-person-group for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginTrain(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.beginTrain(personGroupId, requestOptions);
    }

    /**
     * Create a new person in a specified Person Group. To add face to this person, please call "Add Person Group Person
     * Face".
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-person-group-person for
     * more details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     personId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param createPersonRequest1 The createPersonRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of create person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createPersonWithResponse(String personGroupId, BinaryData createPersonRequest1,
        RequestOptions requestOptions) {
        return this.serviceClient.createPersonWithResponse(personGroupId, createPersonRequest1, requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-person-group-person for
     * more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePersonWithResponse(String personGroupId, String personId,
        RequestOptions requestOptions) {
        return this.serviceClient.deletePersonWithResponse(personGroupId, personId, requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group-person for
     * more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the person in a specified person group along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonWithResponse(String personGroupId, String personId,
        RequestOptions requestOptions) {
        return this.serviceClient.getPersonWithResponse(personGroupId, personId, requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-person-group-person for
     * more details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param updatePersonRequest1 The updatePersonRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonWithResponse(String personGroupId, String personId,
        BinaryData updatePersonRequest1, RequestOptions requestOptions) {
        return this.serviceClient.updatePersonWithResponse(personGroupId, personId, updatePersonRequest1,
            requestOptions);
    }

    /**
     * List all persons' information in the specified Person Group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group-persons for
     * more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         personId: String (Required)
     *         name: String (Required)
     *         userData: String (Optional)
     *         persistedFaceIds (Optional): [
     *             String (Optional)
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonsWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.getPersonsWithResponse(personGroupId, requestOptions);
    }

    /**
     * Add a face to a person into a Person Group for face identification or verification.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-person-group-person-face-from-url for more
     * details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param addFaceFromUrlRequest1 The addFaceFromUrlRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> addFaceFromUrlImplWithResponse(String personGroupId, String personId,
        BinaryData addFaceFromUrlRequest1, RequestOptions requestOptions) {
        return this.serviceClient.addFaceFromUrlImplWithResponse(personGroupId, personId, addFaceFromUrlRequest1,
            requestOptions);
    }

    /**
     * Add a face to a person into a Person Group for face identification or verification.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/add-person-group-person-face
     * for more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> addFaceImplWithResponse(String personGroupId, String personId, BinaryData imageContent,
        RequestOptions requestOptions) {
        return this.serviceClient.addFaceImplWithResponse(personGroupId, personId, imageContent, requestOptions);
    }

    /**
     * Delete a face from a person in a Person Group by specified personGroupId, personId and persistedFaceId.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-person-group-person-face
     * for more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteFaceWithResponse(String personGroupId, String personId, String persistedFaceId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteFaceWithResponse(personGroupId, personId, persistedFaceId, requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group-person-face
     * for more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face resource for person group person along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFaceWithResponse(String personGroupId, String personId, String persistedFaceId,
        RequestOptions requestOptions) {
        return this.serviceClient.getFaceWithResponse(personGroupId, personId, persistedFaceId, requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-person-group-person-face
     * for more details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     userData: String (Optional)
     * }
     * }</pre>
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param updateFaceRequest1 The updateFaceRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateFaceWithResponse(String personGroupId, String personId, String persistedFaceId,
        BinaryData updateFaceRequest1, RequestOptions requestOptions) {
        return this.serviceClient.updateFaceWithResponse(personGroupId, personId, persistedFaceId, updateFaceRequest1,
            requestOptions);
    }

    /**
     * Create a new Person Group with specified personGroupId, name, user-provided userData and recognitionModel.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-person-group for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @param recognitionModel The 'recognitionModel' associated with this face list. Supported 'recognitionModel'
     * values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is
     * 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared
     * with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String personGroupId, String name, String userData, FaceRecognitionModel recognitionModel) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateRequest1 createRequest1Obj
            = new CreateRequest1(name).setUserData(userData).setRecognitionModel(recognitionModel);
        BinaryData createRequest1 = BinaryData.fromObject(createRequest1Obj);
        createWithResponse(personGroupId, createRequest1, requestOptions).getValue();
    }

    /**
     * Create a new Person Group with specified personGroupId, name, user-provided userData and recognitionModel.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-person-group for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String personGroupId, String name) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateRequest1 createRequest1Obj = new CreateRequest1(name);
        BinaryData createRequest1 = BinaryData.fromObject(createRequest1Obj);
        createWithResponse(personGroupId, createRequest1, requestOptions).getValue();
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-person-group for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String personGroupId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(personGroupId, requestOptions).getValue();
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container of the uploaded person data, including face recognition feature, and up to 10,000 persons.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroup get(String personGroupId, Boolean returnRecognitionModel) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getWithResponse(personGroupId, requestOptions).getValue().toObject(PersonGroup.class);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container of the uploaded person data, including face recognition feature, and up to 10,000 persons.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroup get(String personGroupId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(personGroupId, requestOptions).getValue().toObject(PersonGroup.class);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-person-group for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void update(String personGroupId, String name, String userData) {
        // Generated convenience method for updateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateRequest1 updateRequest1Obj = new UpdateRequest1().setName(name).setUserData(userData);
        BinaryData updateRequest1 = BinaryData.fromObject(updateRequest1Obj);
        updateWithResponse(personGroupId, updateRequest1, requestOptions).getValue();
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-person-group for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void update(String personGroupId) {
        // Generated convenience method for updateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateRequest1 updateRequest1Obj = new UpdateRequest1();
        BinaryData updateRequest1 = BinaryData.fromObject(updateRequest1Obj);
        updateWithResponse(personGroupId, updateRequest1, requestOptions).getValue();
    }

    /**
     * List Person Groups' personGroupId, name, userData and recognitionModel.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-groups for more
     * details.
     * 
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroup> getPersonGroups(String start, Integer top, Boolean returnRecognitionModel) {
        // Generated convenience method for getPersonGroupsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getPersonGroupsWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_PERSON_GROUP);
    }

    /**
     * List Person Groups' personGroupId, name, userData and recognitionModel.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-groups for more
     * details.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroup> getPersonGroups() {
        // Generated convenience method for getPersonGroupsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonGroupsWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_PERSON_GROUP);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group-training-status for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training result of a container.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrainingResult getTrainingStatus(String personGroupId) {
        // Generated convenience method for getTrainingStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTrainingStatusWithResponse(personGroupId, requestOptions).getValue().toObject(TrainingResult.class);
    }

    /**
     * Submit a Person Group training task. Training is a crucial step that only a trained Person Group can be used by
     * "Identify From Person Group".
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/train-person-group for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TrainingResult, Void> beginTrain(String personGroupId) {
        // Generated convenience method for beginTrainWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginTrainWithModel(personGroupId, requestOptions);
    }

    /**
     * Create a new person in a specified Person Group. To add face to this person, please call "Add Person Group Person
     * Face".
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-person-group-person for
     * more details.
     * 
     * @param personGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of create person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreatePersonResult createPerson(String personGroupId, String name, String userData) {
        // Generated convenience method for createPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreatePersonRequest1 createPersonRequest1Obj = new CreatePersonRequest1(name).setUserData(userData);
        BinaryData createPersonRequest1 = BinaryData.fromObject(createPersonRequest1Obj);
        return createPersonWithResponse(personGroupId, createPersonRequest1, requestOptions).getValue()
            .toObject(CreatePersonResult.class);
    }

    /**
     * Create a new person in a specified Person Group. To add face to this person, please call "Add Person Group Person
     * Face".
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-person-group-person for
     * more details.
     * 
     * @param personGroupId ID of the container.
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of create person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreatePersonResult createPerson(String personGroupId, String name) {
        // Generated convenience method for createPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreatePersonRequest1 createPersonRequest1Obj = new CreatePersonRequest1(name);
        BinaryData createPersonRequest1 = BinaryData.fromObject(createPersonRequest1Obj);
        return createPersonWithResponse(personGroupId, createPersonRequest1, requestOptions).getValue()
            .toObject(CreatePersonResult.class);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-person-group-person for
     * more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePerson(String personGroupId, String personId) {
        // Generated convenience method for deletePersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deletePersonWithResponse(personGroupId, personId, requestOptions).getValue();
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group-person for
     * more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the person in a specified person group.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroupPerson getPerson(String personGroupId, String personId) {
        // Generated convenience method for getPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonWithResponse(personGroupId, personId, requestOptions).getValue()
            .toObject(PersonGroupPerson.class);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-person-group-person for
     * more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePerson(String personGroupId, String personId, String name, String userData) {
        // Generated convenience method for updatePersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdatePersonRequest1 updatePersonRequest1Obj = new UpdatePersonRequest1().setName(name).setUserData(userData);
        BinaryData updatePersonRequest1 = BinaryData.fromObject(updatePersonRequest1Obj);
        updatePersonWithResponse(personGroupId, personId, updatePersonRequest1, requestOptions).getValue();
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-person-group-person for
     * more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePerson(String personGroupId, String personId) {
        // Generated convenience method for updatePersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdatePersonRequest1 updatePersonRequest1Obj = new UpdatePersonRequest1();
        BinaryData updatePersonRequest1 = BinaryData.fromObject(updatePersonRequest1Obj);
        updatePersonWithResponse(personGroupId, personId, updatePersonRequest1, requestOptions).getValue();
    }

    /**
     * List all persons' information in the specified Person Group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group-persons for
     * more details.
     * 
     * @param personGroupId ID of the container.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroupPerson> getPersons(String personGroupId, String start, Integer top) {
        // Generated convenience method for getPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getPersonsWithResponse(personGroupId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_PERSON_GROUP_PERSON);
    }

    /**
     * List all persons' information in the specified Person Group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group-persons for
     * more details.
     * 
     * @param personGroupId ID of the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroupPerson> getPersons(String personGroupId) {
        // Generated convenience method for getPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonsWithResponse(personGroupId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_PERSON_GROUP_PERSON);
    }

    /**
     * Add a face to a person into a Person Group for face identification or verification.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-person-group-person-face-from-url for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param url URL of input image.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    AddFaceResult addFaceFromUrlImpl(String personGroupId, String personId, String url, List<Integer> targetFace,
        FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addFaceFromUrlImplWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddFaceFromUrlRequest1 addFaceFromUrlRequest1Obj = new AddFaceFromUrlRequest1(url);
        BinaryData addFaceFromUrlRequest1 = BinaryData.fromObject(addFaceFromUrlRequest1Obj);
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addFaceFromUrlImplWithResponse(personGroupId, personId, addFaceFromUrlRequest1, requestOptions)
            .getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person into a Person Group for face identification or verification.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-person-group-person-face-from-url for more
     * details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param url URL of input image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    AddFaceResult addFaceFromUrlImpl(String personGroupId, String personId, String url) {
        // Generated convenience method for addFaceFromUrlImplWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddFaceFromUrlRequest1 addFaceFromUrlRequest1Obj = new AddFaceFromUrlRequest1(url);
        BinaryData addFaceFromUrlRequest1 = BinaryData.fromObject(addFaceFromUrlRequest1Obj);
        return addFaceFromUrlImplWithResponse(personGroupId, personId, addFaceFromUrlRequest1, requestOptions)
            .getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person into a Person Group for face identification or verification.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/add-person-group-person-face
     * for more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    AddFaceResult addFaceImpl(String personGroupId, String personId, BinaryData imageContent, List<Integer> targetFace,
        FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addFaceImplWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addFaceImplWithResponse(personGroupId, personId, imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Add a face to a person into a Person Group for face identification or verification.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/add-person-group-person-face
     * for more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    AddFaceResult addFaceImpl(String personGroupId, String personId, BinaryData imageContent) {
        // Generated convenience method for addFaceImplWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addFaceImplWithResponse(personGroupId, personId, imageContent, requestOptions).getValue()
            .toObject(AddFaceResult.class);
    }

    /**
     * Delete a face from a person in a Person Group by specified personGroupId, personId and persistedFaceId.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-person-group-person-face
     * for more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFace(String personGroupId, String personId, String persistedFaceId) {
        // Generated convenience method for deleteFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteFaceWithResponse(personGroupId, personId, persistedFaceId, requestOptions).getValue();
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-person-group-person-face
     * for more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face resource for person group person.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroupPersonFace getFace(String personGroupId, String personId, String persistedFaceId) {
        // Generated convenience method for getFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFaceWithResponse(personGroupId, personId, persistedFaceId, requestOptions).getValue()
            .toObject(PersonGroupPersonFace.class);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-person-group-person-face
     * for more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param userData User-provided data attached to the face. The length limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateFace(String personGroupId, String personId, String persistedFaceId, String userData) {
        // Generated convenience method for updateFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateFaceRequest1 updateFaceRequest1Obj = new UpdateFaceRequest1().setUserData(userData);
        BinaryData updateFaceRequest1 = BinaryData.fromObject(updateFaceRequest1Obj);
        updateFaceWithResponse(personGroupId, personId, persistedFaceId, updateFaceRequest1, requestOptions).getValue();
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-person-group-person-face
     * for more details.
     * 
     * @param personGroupId ID of the container.
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateFace(String personGroupId, String personId, String persistedFaceId) {
        // Generated convenience method for updateFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateFaceRequest1 updateFaceRequest1Obj = new UpdateFaceRequest1();
        BinaryData updateFaceRequest1 = BinaryData.fromObject(updateFaceRequest1Obj);
        updateFaceWithResponse(personGroupId, personId, persistedFaceId, updateFaceRequest1, requestOptions).getValue();
    }

    @Generated
    private static final TypeReference<List<PersonGroup>> TYPE_REFERENCE_LIST_PERSON_GROUP
        = new TypeReference<List<PersonGroup>>() {
        };

    @Generated
    private static final TypeReference<List<PersonGroupPerson>> TYPE_REFERENCE_LIST_PERSON_GROUP_PERSON
        = new TypeReference<List<PersonGroupPerson>>() {
        };
}
