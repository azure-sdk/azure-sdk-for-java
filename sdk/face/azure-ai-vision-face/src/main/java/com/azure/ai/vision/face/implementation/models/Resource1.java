// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The Resource1 model.
 */
@Fluent
public final class Resource1 implements JsonSerializable<Resource1> {
    /*
     * Array of personIds created by PersonDirectory Person - Create to add.
     */
    @Generated
    private List<String> addPersonIds;

    /*
     * Array of personIds created by PersonDirectory Person - Create to remove.
     */
    @Generated
    private List<String> removePersonIds;

    /*
     * User defined name, maximum length is 128.
     */
    @Generated
    private final String name;

    /*
     * Optional user defined data. Length should not exceed 16K.
     */
    @Generated
    private String userData;

    /**
     * Creates an instance of Resource1 class.
     * 
     * @param name the name value to set.
     */
    @Generated
    public Resource1(String name) {
        this.name = name;
    }

    /**
     * Get the addPersonIds property: Array of personIds created by PersonDirectory Person - Create to add.
     * 
     * @return the addPersonIds value.
     */
    @Generated
    public List<String> getAddPersonIds() {
        return this.addPersonIds;
    }

    /**
     * Set the addPersonIds property: Array of personIds created by PersonDirectory Person - Create to add.
     * 
     * @param addPersonIds the addPersonIds value to set.
     * @return the Resource1 object itself.
     */
    @Generated
    public Resource1 setAddPersonIds(List<String> addPersonIds) {
        this.addPersonIds = addPersonIds;
        return this;
    }

    /**
     * Get the removePersonIds property: Array of personIds created by PersonDirectory Person - Create to remove.
     * 
     * @return the removePersonIds value.
     */
    @Generated
    public List<String> getRemovePersonIds() {
        return this.removePersonIds;
    }

    /**
     * Set the removePersonIds property: Array of personIds created by PersonDirectory Person - Create to remove.
     * 
     * @param removePersonIds the removePersonIds value to set.
     * @return the Resource1 object itself.
     */
    @Generated
    public Resource1 setRemovePersonIds(List<String> removePersonIds) {
        this.removePersonIds = removePersonIds;
        return this;
    }

    /**
     * Get the name property: User defined name, maximum length is 128.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the userData property: Optional user defined data. Length should not exceed 16K.
     * 
     * @return the userData value.
     */
    @Generated
    public String getUserData() {
        return this.userData;
    }

    /**
     * Set the userData property: Optional user defined data. Length should not exceed 16K.
     * 
     * @param userData the userData value to set.
     * @return the Resource1 object itself.
     */
    @Generated
    public Resource1 setUserData(String userData) {
        this.userData = userData;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("addPersonIds", this.addPersonIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("removePersonIds", this.removePersonIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("userData", this.userData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Resource1 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Resource1 if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Resource1.
     */
    @Generated
    public static Resource1 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            List<String> addPersonIds = null;
            List<String> removePersonIds = null;
            String userData = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("addPersonIds".equals(fieldName)) {
                    addPersonIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("removePersonIds".equals(fieldName)) {
                    removePersonIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("userData".equals(fieldName)) {
                    userData = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            Resource1 deserializedResource1 = new Resource1(name);
            deserializedResource1.addPersonIds = addPersonIds;
            deserializedResource1.removePersonIds = removePersonIds;
            deserializedResource1.userData = userData;

            return deserializedResource1;
        });
    }
}
