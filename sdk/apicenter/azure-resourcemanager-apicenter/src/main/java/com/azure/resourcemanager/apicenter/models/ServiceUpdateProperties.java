// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the Service.
 */
@Fluent
public final class ServiceUpdateProperties implements JsonSerializable<ServiceUpdateProperties> {
    /*
     * Flag used to restore soft-deleted API Center service. If specified and set to 'true' all other properties will be
     * ignored.
     */
    private Boolean restore;

    /**
     * Creates an instance of ServiceUpdateProperties class.
     */
    public ServiceUpdateProperties() {
    }

    /**
     * Get the restore property: Flag used to restore soft-deleted API Center service. If specified and set to 'true'
     * all other properties will be ignored.
     * 
     * @return the restore value.
     */
    public Boolean restore() {
        return this.restore;
    }

    /**
     * Set the restore property: Flag used to restore soft-deleted API Center service. If specified and set to 'true'
     * all other properties will be ignored.
     * 
     * @param restore the restore value to set.
     * @return the ServiceUpdateProperties object itself.
     */
    public ServiceUpdateProperties withRestore(Boolean restore) {
        this.restore = restore;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("restore", this.restore);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceUpdateProperties.
     */
    public static ServiceUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceUpdateProperties deserializedServiceUpdateProperties = new ServiceUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("restore".equals(fieldName)) {
                    deserializedServiceUpdateProperties.restore = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceUpdateProperties;
        });
    }
}
