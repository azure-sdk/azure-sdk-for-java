// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * API source configuration for Amazon API Gateway.
 */
@Fluent
public final class AmazonApiGatewaySource implements JsonSerializable<AmazonApiGatewaySource> {
    /*
     * Amazon API Gateway Access Key. Must be an Azure Key Vault secret reference.
     */
    private String accessKey;

    /*
     * Amazon API Gateway Secret Access Key. Must be an Azure Key Vault secret reference.
     */
    private String secretAccessKey;

    /*
     * Amazon API Gateway Region (ex. us-east-2).
     */
    private String regionName;

    /*
     * (Optional) The resource ID of the managed identity that has access to the Azure Key Vault secrets.
     */
    private String msiResourceId;

    /**
     * Creates an instance of AmazonApiGatewaySource class.
     */
    public AmazonApiGatewaySource() {
    }

    /**
     * Get the accessKey property: Amazon API Gateway Access Key. Must be an Azure Key Vault secret reference.
     * 
     * @return the accessKey value.
     */
    public String accessKey() {
        return this.accessKey;
    }

    /**
     * Set the accessKey property: Amazon API Gateway Access Key. Must be an Azure Key Vault secret reference.
     * 
     * @param accessKey the accessKey value to set.
     * @return the AmazonApiGatewaySource object itself.
     */
    public AmazonApiGatewaySource withAccessKey(String accessKey) {
        this.accessKey = accessKey;
        return this;
    }

    /**
     * Get the secretAccessKey property: Amazon API Gateway Secret Access Key. Must be an Azure Key Vault secret
     * reference.
     * 
     * @return the secretAccessKey value.
     */
    public String secretAccessKey() {
        return this.secretAccessKey;
    }

    /**
     * Set the secretAccessKey property: Amazon API Gateway Secret Access Key. Must be an Azure Key Vault secret
     * reference.
     * 
     * @param secretAccessKey the secretAccessKey value to set.
     * @return the AmazonApiGatewaySource object itself.
     */
    public AmazonApiGatewaySource withSecretAccessKey(String secretAccessKey) {
        this.secretAccessKey = secretAccessKey;
        return this;
    }

    /**
     * Get the regionName property: Amazon API Gateway Region (ex. us-east-2).
     * 
     * @return the regionName value.
     */
    public String regionName() {
        return this.regionName;
    }

    /**
     * Set the regionName property: Amazon API Gateway Region (ex. us-east-2).
     * 
     * @param regionName the regionName value to set.
     * @return the AmazonApiGatewaySource object itself.
     */
    public AmazonApiGatewaySource withRegionName(String regionName) {
        this.regionName = regionName;
        return this;
    }

    /**
     * Get the msiResourceId property: (Optional) The resource ID of the managed identity that has access to the Azure
     * Key Vault secrets.
     * 
     * @return the msiResourceId value.
     */
    public String msiResourceId() {
        return this.msiResourceId;
    }

    /**
     * Set the msiResourceId property: (Optional) The resource ID of the managed identity that has access to the Azure
     * Key Vault secrets.
     * 
     * @param msiResourceId the msiResourceId value to set.
     * @return the AmazonApiGatewaySource object itself.
     */
    public AmazonApiGatewaySource withMsiResourceId(String msiResourceId) {
        this.msiResourceId = msiResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (accessKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property accessKey in model AmazonApiGatewaySource"));
        }
        if (secretAccessKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property secretAccessKey in model AmazonApiGatewaySource"));
        }
        if (regionName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property regionName in model AmazonApiGatewaySource"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AmazonApiGatewaySource.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accessKey", this.accessKey);
        jsonWriter.writeStringField("secretAccessKey", this.secretAccessKey);
        jsonWriter.writeStringField("regionName", this.regionName);
        jsonWriter.writeStringField("msiResourceId", this.msiResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AmazonApiGatewaySource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AmazonApiGatewaySource if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AmazonApiGatewaySource.
     */
    public static AmazonApiGatewaySource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AmazonApiGatewaySource deserializedAmazonApiGatewaySource = new AmazonApiGatewaySource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessKey".equals(fieldName)) {
                    deserializedAmazonApiGatewaySource.accessKey = reader.getString();
                } else if ("secretAccessKey".equals(fieldName)) {
                    deserializedAmazonApiGatewaySource.secretAccessKey = reader.getString();
                } else if ("regionName".equals(fieldName)) {
                    deserializedAmazonApiGatewaySource.regionName = reader.getString();
                } else if ("msiResourceId".equals(fieldName)) {
                    deserializedAmazonApiGatewaySource.msiResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAmazonApiGatewaySource;
        });
    }
}
