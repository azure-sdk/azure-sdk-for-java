// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * API analyzer configuration properties.
 */
@Fluent
public final class AnalyzerConfigProperties implements JsonSerializable<AnalyzerConfigProperties> {
    /*
     * The title of the analyzer configuration, e.g. "Spectral (OpenAPI)".
     */
    private String title;

    /*
     * The description of the analyzer configuration.
     */
    private String description;

    /*
     * The type of API analyzer.
     */
    private AnalyzerType analyzerType;

    /*
     * The state of the API analyzer ruleset.
     */
    private AnalyzerRulesetState state;

    /*
     * The API analyzer filter.
     */
    private AnalyzerFilter filter;

    /**
     * Creates an instance of AnalyzerConfigProperties class.
     */
    public AnalyzerConfigProperties() {
    }

    /**
     * Get the title property: The title of the analyzer configuration, e.g. "Spectral (OpenAPI)".
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: The title of the analyzer configuration, e.g. "Spectral (OpenAPI)".
     * 
     * @param title the title value to set.
     * @return the AnalyzerConfigProperties object itself.
     */
    public AnalyzerConfigProperties withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: The description of the analyzer configuration.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the analyzer configuration.
     * 
     * @param description the description value to set.
     * @return the AnalyzerConfigProperties object itself.
     */
    public AnalyzerConfigProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the analyzerType property: The type of API analyzer.
     * 
     * @return the analyzerType value.
     */
    public AnalyzerType analyzerType() {
        return this.analyzerType;
    }

    /**
     * Set the analyzerType property: The type of API analyzer.
     * 
     * @param analyzerType the analyzerType value to set.
     * @return the AnalyzerConfigProperties object itself.
     */
    public AnalyzerConfigProperties withAnalyzerType(AnalyzerType analyzerType) {
        this.analyzerType = analyzerType;
        return this;
    }

    /**
     * Get the state property: The state of the API analyzer ruleset.
     * 
     * @return the state value.
     */
    public AnalyzerRulesetState state() {
        return this.state;
    }

    /**
     * Get the filter property: The API analyzer filter.
     * 
     * @return the filter value.
     */
    public AnalyzerFilter filter() {
        return this.filter;
    }

    /**
     * Set the filter property: The API analyzer filter.
     * 
     * @param filter the filter value to set.
     * @return the AnalyzerConfigProperties object itself.
     */
    public AnalyzerConfigProperties withFilter(AnalyzerFilter filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (title() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property title in model AnalyzerConfigProperties"));
        }
        if (analyzerType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property analyzerType in model AnalyzerConfigProperties"));
        }
        if (filter() != null) {
            filter().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AnalyzerConfigProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("analyzerType", this.analyzerType == null ? null : this.analyzerType.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("filter", this.filter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzerConfigProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzerConfigProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzerConfigProperties.
     */
    public static AnalyzerConfigProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzerConfigProperties deserializedAnalyzerConfigProperties = new AnalyzerConfigProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedAnalyzerConfigProperties.title = reader.getString();
                } else if ("analyzerType".equals(fieldName)) {
                    deserializedAnalyzerConfigProperties.analyzerType = AnalyzerType.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedAnalyzerConfigProperties.description = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedAnalyzerConfigProperties.state = AnalyzerRulesetState.fromString(reader.getString());
                } else if ("filter".equals(fieldName)) {
                    deserializedAnalyzerConfigProperties.filter = AnalyzerFilter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzerConfigProperties;
        });
    }
}
