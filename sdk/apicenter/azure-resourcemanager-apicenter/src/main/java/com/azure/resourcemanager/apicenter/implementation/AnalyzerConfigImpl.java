// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.apicenter.fluent.models.AnalyzerConfigInner;
import com.azure.resourcemanager.apicenter.models.AnalyzerConfig;
import com.azure.resourcemanager.apicenter.models.AnalyzerConfigProperties;
import com.azure.resourcemanager.apicenter.models.OperationStatusResult;
import com.azure.resourcemanager.apicenter.models.RulesetExportResult;
import com.azure.resourcemanager.apicenter.models.RulesetImportRequest;

public final class AnalyzerConfigImpl implements AnalyzerConfig, AnalyzerConfig.Definition, AnalyzerConfig.Update {
    private AnalyzerConfigInner innerObject;

    private final com.azure.resourcemanager.apicenter.ApiCenterManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public AnalyzerConfigProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public AnalyzerConfigInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.apicenter.ApiCenterManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String serviceName;

    private String workspaceName;

    private String analyzerConfigName;

    public AnalyzerConfigImpl withExistingWorkspace(String resourceGroupName, String serviceName,
        String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.serviceName = serviceName;
        this.workspaceName = workspaceName;
        return this;
    }

    public AnalyzerConfig create() {
        this.innerObject = serviceManager.serviceClient()
            .getAnalyzerConfigs()
            .createOrUpdateWithResponse(resourceGroupName, serviceName, workspaceName, analyzerConfigName,
                this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public AnalyzerConfig create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getAnalyzerConfigs()
            .createOrUpdateWithResponse(resourceGroupName, serviceName, workspaceName, analyzerConfigName,
                this.innerModel(), context)
            .getValue();
        return this;
    }

    AnalyzerConfigImpl(String name, com.azure.resourcemanager.apicenter.ApiCenterManager serviceManager) {
        this.innerObject = new AnalyzerConfigInner();
        this.serviceManager = serviceManager;
        this.analyzerConfigName = name;
    }

    public AnalyzerConfigImpl update() {
        return this;
    }

    public AnalyzerConfig apply() {
        this.innerObject = serviceManager.serviceClient()
            .getAnalyzerConfigs()
            .createOrUpdateWithResponse(resourceGroupName, serviceName, workspaceName, analyzerConfigName,
                this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public AnalyzerConfig apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getAnalyzerConfigs()
            .createOrUpdateWithResponse(resourceGroupName, serviceName, workspaceName, analyzerConfigName,
                this.innerModel(), context)
            .getValue();
        return this;
    }

    AnalyzerConfigImpl(AnalyzerConfigInner innerObject,
        com.azure.resourcemanager.apicenter.ApiCenterManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.serviceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "services");
        this.workspaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "workspaces");
        this.analyzerConfigName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "analyzerConfigs");
    }

    public AnalyzerConfig refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getAnalyzerConfigs()
            .getWithResponse(resourceGroupName, serviceName, workspaceName, analyzerConfigName, Context.NONE)
            .getValue();
        return this;
    }

    public AnalyzerConfig refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getAnalyzerConfigs()
            .getWithResponse(resourceGroupName, serviceName, workspaceName, analyzerConfigName, context)
            .getValue();
        return this;
    }

    public RulesetExportResult exportRuleset() {
        return serviceManager.analyzerConfigs()
            .exportRuleset(resourceGroupName, serviceName, workspaceName, analyzerConfigName);
    }

    public RulesetExportResult exportRuleset(Context context) {
        return serviceManager.analyzerConfigs()
            .exportRuleset(resourceGroupName, serviceName, workspaceName, analyzerConfigName, context);
    }

    public OperationStatusResult importRuleset(RulesetImportRequest body) {
        return serviceManager.analyzerConfigs()
            .importRuleset(resourceGroupName, serviceName, workspaceName, analyzerConfigName, body);
    }

    public OperationStatusResult importRuleset(RulesetImportRequest body, Context context) {
        return serviceManager.analyzerConfigs()
            .importRuleset(resourceGroupName, serviceName, workspaceName, analyzerConfigName, body, context);
    }

    public AnalyzerConfigImpl withProperties(AnalyzerConfigProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
