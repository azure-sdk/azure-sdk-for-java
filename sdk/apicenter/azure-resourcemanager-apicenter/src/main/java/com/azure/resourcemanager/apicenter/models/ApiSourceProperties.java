// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * API source properties.
 */
@Fluent
public final class ApiSourceProperties implements JsonSerializable<ApiSourceProperties> {
    /*
     * Indicates if the specification should be imported along with metadata.
     */
    private ImportSpecificationOptions importSpecification;

    /*
     * API source type
     */
    private ApiSourceType apiSourceType;

    /*
     * API source configuration for Azure API Management.
     */
    private AzureApiManagementSource azureApiManagementSource;

    /*
     * API source configuration for Amazon API Gateway.
     */
    private AmazonApiGatewaySource amazonApiGatewaySource;

    /*
     * The target environment resource ID.
     */
    private String targetEnvironmentId;

    /*
     * The target lifecycle stage.
     */
    private LifecycleStage targetLifecycleStage;

    /*
     * The state of the API source link
     */
    private LinkState linkState;

    /**
     * Creates an instance of ApiSourceProperties class.
     */
    public ApiSourceProperties() {
    }

    /**
     * Get the importSpecification property: Indicates if the specification should be imported along with metadata.
     * 
     * @return the importSpecification value.
     */
    public ImportSpecificationOptions importSpecification() {
        return this.importSpecification;
    }

    /**
     * Set the importSpecification property: Indicates if the specification should be imported along with metadata.
     * 
     * @param importSpecification the importSpecification value to set.
     * @return the ApiSourceProperties object itself.
     */
    public ApiSourceProperties withImportSpecification(ImportSpecificationOptions importSpecification) {
        this.importSpecification = importSpecification;
        return this;
    }

    /**
     * Get the apiSourceType property: API source type.
     * 
     * @return the apiSourceType value.
     */
    public ApiSourceType apiSourceType() {
        return this.apiSourceType;
    }

    /**
     * Set the apiSourceType property: API source type.
     * 
     * @param apiSourceType the apiSourceType value to set.
     * @return the ApiSourceProperties object itself.
     */
    public ApiSourceProperties withApiSourceType(ApiSourceType apiSourceType) {
        this.apiSourceType = apiSourceType;
        return this;
    }

    /**
     * Get the azureApiManagementSource property: API source configuration for Azure API Management.
     * 
     * @return the azureApiManagementSource value.
     */
    public AzureApiManagementSource azureApiManagementSource() {
        return this.azureApiManagementSource;
    }

    /**
     * Set the azureApiManagementSource property: API source configuration for Azure API Management.
     * 
     * @param azureApiManagementSource the azureApiManagementSource value to set.
     * @return the ApiSourceProperties object itself.
     */
    public ApiSourceProperties withAzureApiManagementSource(AzureApiManagementSource azureApiManagementSource) {
        this.azureApiManagementSource = azureApiManagementSource;
        return this;
    }

    /**
     * Get the amazonApiGatewaySource property: API source configuration for Amazon API Gateway.
     * 
     * @return the amazonApiGatewaySource value.
     */
    public AmazonApiGatewaySource amazonApiGatewaySource() {
        return this.amazonApiGatewaySource;
    }

    /**
     * Set the amazonApiGatewaySource property: API source configuration for Amazon API Gateway.
     * 
     * @param amazonApiGatewaySource the amazonApiGatewaySource value to set.
     * @return the ApiSourceProperties object itself.
     */
    public ApiSourceProperties withAmazonApiGatewaySource(AmazonApiGatewaySource amazonApiGatewaySource) {
        this.amazonApiGatewaySource = amazonApiGatewaySource;
        return this;
    }

    /**
     * Get the targetEnvironmentId property: The target environment resource ID.
     * 
     * @return the targetEnvironmentId value.
     */
    public String targetEnvironmentId() {
        return this.targetEnvironmentId;
    }

    /**
     * Set the targetEnvironmentId property: The target environment resource ID.
     * 
     * @param targetEnvironmentId the targetEnvironmentId value to set.
     * @return the ApiSourceProperties object itself.
     */
    public ApiSourceProperties withTargetEnvironmentId(String targetEnvironmentId) {
        this.targetEnvironmentId = targetEnvironmentId;
        return this;
    }

    /**
     * Get the targetLifecycleStage property: The target lifecycle stage.
     * 
     * @return the targetLifecycleStage value.
     */
    public LifecycleStage targetLifecycleStage() {
        return this.targetLifecycleStage;
    }

    /**
     * Set the targetLifecycleStage property: The target lifecycle stage.
     * 
     * @param targetLifecycleStage the targetLifecycleStage value to set.
     * @return the ApiSourceProperties object itself.
     */
    public ApiSourceProperties withTargetLifecycleStage(LifecycleStage targetLifecycleStage) {
        this.targetLifecycleStage = targetLifecycleStage;
        return this;
    }

    /**
     * Get the linkState property: The state of the API source link.
     * 
     * @return the linkState value.
     */
    public LinkState linkState() {
        return this.linkState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (apiSourceType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property apiSourceType in model ApiSourceProperties"));
        }
        if (azureApiManagementSource() != null) {
            azureApiManagementSource().validate();
        }
        if (amazonApiGatewaySource() != null) {
            amazonApiGatewaySource().validate();
        }
        if (linkState() != null) {
            linkState().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApiSourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("apiSourceType", this.apiSourceType == null ? null : this.apiSourceType.toString());
        jsonWriter.writeStringField("importSpecification",
            this.importSpecification == null ? null : this.importSpecification.toString());
        jsonWriter.writeJsonField("azureApiManagementSource", this.azureApiManagementSource);
        jsonWriter.writeJsonField("amazonApiGatewaySource", this.amazonApiGatewaySource);
        jsonWriter.writeStringField("targetEnvironmentId", this.targetEnvironmentId);
        jsonWriter.writeStringField("targetLifecycleStage",
            this.targetLifecycleStage == null ? null : this.targetLifecycleStage.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiSourceProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApiSourceProperties.
     */
    public static ApiSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiSourceProperties deserializedApiSourceProperties = new ApiSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("apiSourceType".equals(fieldName)) {
                    deserializedApiSourceProperties.apiSourceType = ApiSourceType.fromString(reader.getString());
                } else if ("importSpecification".equals(fieldName)) {
                    deserializedApiSourceProperties.importSpecification
                        = ImportSpecificationOptions.fromString(reader.getString());
                } else if ("azureApiManagementSource".equals(fieldName)) {
                    deserializedApiSourceProperties.azureApiManagementSource
                        = AzureApiManagementSource.fromJson(reader);
                } else if ("amazonApiGatewaySource".equals(fieldName)) {
                    deserializedApiSourceProperties.amazonApiGatewaySource = AmazonApiGatewaySource.fromJson(reader);
                } else if ("targetEnvironmentId".equals(fieldName)) {
                    deserializedApiSourceProperties.targetEnvironmentId = reader.getString();
                } else if ("targetLifecycleStage".equals(fieldName)) {
                    deserializedApiSourceProperties.targetLifecycleStage
                        = LifecycleStage.fromString(reader.getString());
                } else if ("linkState".equals(fieldName)) {
                    deserializedApiSourceProperties.linkState = LinkState.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiSourceProperties;
        });
    }
}
