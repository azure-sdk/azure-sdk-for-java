// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The API analyzer filter, used to select API definitions for static analysis. All the conditions get applied with the
 * logical AND operator.
 */
@Fluent
public final class AnalyzerFilter implements JsonSerializable<AnalyzerFilter> {
    /*
     * API filter conditions.
     */
    private List<Object> apis;

    /*
     * APi version filter conditions.
     */
    private List<Object> apiVersions;

    /*
     * Api definition filter conditions.
     */
    private List<Object> apiDefinitions;

    /**
     * Creates an instance of AnalyzerFilter class.
     */
    public AnalyzerFilter() {
    }

    /**
     * Get the apis property: API filter conditions.
     * 
     * @return the apis value.
     */
    public List<Object> apis() {
        return this.apis;
    }

    /**
     * Set the apis property: API filter conditions.
     * 
     * @param apis the apis value to set.
     * @return the AnalyzerFilter object itself.
     */
    public AnalyzerFilter withApis(List<Object> apis) {
        this.apis = apis;
        return this;
    }

    /**
     * Get the apiVersions property: APi version filter conditions.
     * 
     * @return the apiVersions value.
     */
    public List<Object> apiVersions() {
        return this.apiVersions;
    }

    /**
     * Set the apiVersions property: APi version filter conditions.
     * 
     * @param apiVersions the apiVersions value to set.
     * @return the AnalyzerFilter object itself.
     */
    public AnalyzerFilter withApiVersions(List<Object> apiVersions) {
        this.apiVersions = apiVersions;
        return this;
    }

    /**
     * Get the apiDefinitions property: Api definition filter conditions.
     * 
     * @return the apiDefinitions value.
     */
    public List<Object> apiDefinitions() {
        return this.apiDefinitions;
    }

    /**
     * Set the apiDefinitions property: Api definition filter conditions.
     * 
     * @param apiDefinitions the apiDefinitions value to set.
     * @return the AnalyzerFilter object itself.
     */
    public AnalyzerFilter withApiDefinitions(List<Object> apiDefinitions) {
        this.apiDefinitions = apiDefinitions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (apis() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property apis in model AnalyzerFilter"));
        }
        if (apiVersions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property apiVersions in model AnalyzerFilter"));
        }
        if (apiDefinitions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property apiDefinitions in model AnalyzerFilter"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AnalyzerFilter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("apis", this.apis, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeArrayField("apiVersions", this.apiVersions, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeArrayField("apiDefinitions", this.apiDefinitions,
            (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzerFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzerFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzerFilter.
     */
    public static AnalyzerFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzerFilter deserializedAnalyzerFilter = new AnalyzerFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("apis".equals(fieldName)) {
                    List<Object> apis = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedAnalyzerFilter.apis = apis;
                } else if ("apiVersions".equals(fieldName)) {
                    List<Object> apiVersions = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedAnalyzerFilter.apiVersions = apiVersions;
                } else if ("apiDefinitions".equals(fieldName)) {
                    List<Object> apiDefinitions = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedAnalyzerFilter.apiDefinitions = apiDefinitions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzerFilter;
        });
    }
}
