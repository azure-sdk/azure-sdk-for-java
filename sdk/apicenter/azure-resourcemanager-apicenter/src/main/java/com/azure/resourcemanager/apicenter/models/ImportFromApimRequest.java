// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The import from Azure API Management request.
 */
@Fluent
public final class ImportFromApimRequest implements JsonSerializable<ImportFromApimRequest> {
    /*
     * An entity the metadata schema is requested for.
     */
    private List<String> sourceResourceIds;

    /**
     * Creates an instance of ImportFromApimRequest class.
     */
    public ImportFromApimRequest() {
    }

    /**
     * Get the sourceResourceIds property: An entity the metadata schema is requested for.
     * 
     * @return the sourceResourceIds value.
     */
    public List<String> sourceResourceIds() {
        return this.sourceResourceIds;
    }

    /**
     * Set the sourceResourceIds property: An entity the metadata schema is requested for.
     * 
     * @param sourceResourceIds the sourceResourceIds value to set.
     * @return the ImportFromApimRequest object itself.
     */
    public ImportFromApimRequest withSourceResourceIds(List<String> sourceResourceIds) {
        this.sourceResourceIds = sourceResourceIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("sourceResourceIds", this.sourceResourceIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImportFromApimRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImportFromApimRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImportFromApimRequest.
     */
    public static ImportFromApimRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImportFromApimRequest deserializedImportFromApimRequest = new ImportFromApimRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceResourceIds".equals(fieldName)) {
                    List<String> sourceResourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedImportFromApimRequest.sourceResourceIds = sourceResourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImportFromApimRequest;
        });
    }
}
