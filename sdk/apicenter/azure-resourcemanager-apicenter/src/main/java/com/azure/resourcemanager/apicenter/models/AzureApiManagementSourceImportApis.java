// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * API source configuration for Azure API Management.
 */
@Fluent
public final class AzureApiManagementSourceImportApis implements JsonSerializable<AzureApiManagementSourceImportApis> {
    /*
     * An entity the metadata schema is requested for.
     */
    private List<String> sourceResourceIds;

    /*
     * (Optional) The resource ID of the managed identity that has access to the API Management instance.
     */
    private String msiResourceId;

    /**
     * Creates an instance of AzureApiManagementSourceImportApis class.
     */
    public AzureApiManagementSourceImportApis() {
    }

    /**
     * Get the sourceResourceIds property: An entity the metadata schema is requested for.
     * 
     * @return the sourceResourceIds value.
     */
    public List<String> sourceResourceIds() {
        return this.sourceResourceIds;
    }

    /**
     * Set the sourceResourceIds property: An entity the metadata schema is requested for.
     * 
     * @param sourceResourceIds the sourceResourceIds value to set.
     * @return the AzureApiManagementSourceImportApis object itself.
     */
    public AzureApiManagementSourceImportApis withSourceResourceIds(List<String> sourceResourceIds) {
        this.sourceResourceIds = sourceResourceIds;
        return this;
    }

    /**
     * Get the msiResourceId property: (Optional) The resource ID of the managed identity that has access to the API
     * Management instance.
     * 
     * @return the msiResourceId value.
     */
    public String msiResourceId() {
        return this.msiResourceId;
    }

    /**
     * Set the msiResourceId property: (Optional) The resource ID of the managed identity that has access to the API
     * Management instance.
     * 
     * @param msiResourceId the msiResourceId value to set.
     * @return the AzureApiManagementSourceImportApis object itself.
     */
    public AzureApiManagementSourceImportApis withMsiResourceId(String msiResourceId) {
        this.msiResourceId = msiResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceResourceIds() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceResourceIds in model AzureApiManagementSourceImportApis"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureApiManagementSourceImportApis.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("sourceResourceIds", this.sourceResourceIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("msiResourceId", this.msiResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureApiManagementSourceImportApis from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureApiManagementSourceImportApis if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureApiManagementSourceImportApis.
     */
    public static AzureApiManagementSourceImportApis fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureApiManagementSourceImportApis deserializedAzureApiManagementSourceImportApis
                = new AzureApiManagementSourceImportApis();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceResourceIds".equals(fieldName)) {
                    List<String> sourceResourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureApiManagementSourceImportApis.sourceResourceIds = sourceResourceIds;
                } else if ("msiResourceId".equals(fieldName)) {
                    deserializedAzureApiManagementSourceImportApis.msiResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureApiManagementSourceImportApis;
        });
    }
}
