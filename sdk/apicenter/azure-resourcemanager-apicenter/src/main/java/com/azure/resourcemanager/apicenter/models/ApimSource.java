// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * API source configuration for Azure API Management.
 */
@Fluent
public final class ApimSource implements JsonSerializable<ApimSource> {
    /*
     * API Management service resource ID.
     */
    private String resourceId;

    /*
     * The resource ID of the managed identity that has access to the API Management instance.
     */
    private String msiResourceId;

    /*
     * The target environment resource ID.
     */
    private String targetEnvironmentId;

    /*
     * The target lifecycle stage.
     */
    private LifecycleStage targetLifecycleStage;

    /*
     * The state of the API source link
     */
    private LinkState linkState;

    /**
     * Creates an instance of ApimSource class.
     */
    public ApimSource() {
    }

    /**
     * Get the resourceId property: API Management service resource ID.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: API Management service resource ID.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ApimSource object itself.
     */
    public ApimSource withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the msiResourceId property: The resource ID of the managed identity that has access to the API Management
     * instance.
     * 
     * @return the msiResourceId value.
     */
    public String msiResourceId() {
        return this.msiResourceId;
    }

    /**
     * Set the msiResourceId property: The resource ID of the managed identity that has access to the API Management
     * instance.
     * 
     * @param msiResourceId the msiResourceId value to set.
     * @return the ApimSource object itself.
     */
    public ApimSource withMsiResourceId(String msiResourceId) {
        this.msiResourceId = msiResourceId;
        return this;
    }

    /**
     * Get the targetEnvironmentId property: The target environment resource ID.
     * 
     * @return the targetEnvironmentId value.
     */
    public String targetEnvironmentId() {
        return this.targetEnvironmentId;
    }

    /**
     * Set the targetEnvironmentId property: The target environment resource ID.
     * 
     * @param targetEnvironmentId the targetEnvironmentId value to set.
     * @return the ApimSource object itself.
     */
    public ApimSource withTargetEnvironmentId(String targetEnvironmentId) {
        this.targetEnvironmentId = targetEnvironmentId;
        return this;
    }

    /**
     * Get the targetLifecycleStage property: The target lifecycle stage.
     * 
     * @return the targetLifecycleStage value.
     */
    public LifecycleStage targetLifecycleStage() {
        return this.targetLifecycleStage;
    }

    /**
     * Set the targetLifecycleStage property: The target lifecycle stage.
     * 
     * @param targetLifecycleStage the targetLifecycleStage value to set.
     * @return the ApimSource object itself.
     */
    public ApimSource withTargetLifecycleStage(LifecycleStage targetLifecycleStage) {
        this.targetLifecycleStage = targetLifecycleStage;
        return this;
    }

    /**
     * Get the linkState property: The state of the API source link.
     * 
     * @return the linkState value.
     */
    public LinkState linkState() {
        return this.linkState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property resourceId in model ApimSource"));
        }
        if (linkState() != null) {
            linkState().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApimSource.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("msiResourceId", this.msiResourceId);
        jsonWriter.writeStringField("targetEnvironmentId", this.targetEnvironmentId);
        jsonWriter.writeStringField("targetLifecycleStage",
            this.targetLifecycleStage == null ? null : this.targetLifecycleStage.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApimSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApimSource if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApimSource.
     */
    public static ApimSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApimSource deserializedApimSource = new ApimSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedApimSource.resourceId = reader.getString();
                } else if ("msiResourceId".equals(fieldName)) {
                    deserializedApimSource.msiResourceId = reader.getString();
                } else if ("targetEnvironmentId".equals(fieldName)) {
                    deserializedApimSource.targetEnvironmentId = reader.getString();
                } else if ("targetLifecycleStage".equals(fieldName)) {
                    deserializedApimSource.targetLifecycleStage = LifecycleStage.fromString(reader.getString());
                } else if ("linkState".equals(fieldName)) {
                    deserializedApimSource.linkState = LinkState.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApimSource;
        });
    }
}
