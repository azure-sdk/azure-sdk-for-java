// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The link state.
 */
@Fluent
public final class LinkState implements JsonSerializable<LinkState> {
    /*
     * The state of the link.
     */
    private String state;

    /*
     * The state message.
     */
    private String message;

    /*
     * The timestamp of the last update of the link state.
     */
    private OffsetDateTime lastUpdatedOn;

    /**
     * Creates an instance of LinkState class.
     */
    public LinkState() {
    }

    /**
     * Get the state property: The state of the link.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the link.
     * 
     * @param state the state value to set.
     * @return the LinkState object itself.
     */
    public LinkState withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the message property: The state message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: The state message.
     * 
     * @param message the message value to set.
     * @return the LinkState object itself.
     */
    public LinkState withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the lastUpdatedOn property: The timestamp of the last update of the link state.
     * 
     * @return the lastUpdatedOn value.
     */
    public OffsetDateTime lastUpdatedOn() {
        return this.lastUpdatedOn;
    }

    /**
     * Set the lastUpdatedOn property: The timestamp of the last update of the link state.
     * 
     * @param lastUpdatedOn the lastUpdatedOn value to set.
     * @return the LinkState object itself.
     */
    public LinkState withLastUpdatedOn(OffsetDateTime lastUpdatedOn) {
        this.lastUpdatedOn = lastUpdatedOn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lastUpdatedOn() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property lastUpdatedOn in model LinkState"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LinkState.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lastUpdatedOn",
            this.lastUpdatedOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedOn));
        jsonWriter.writeStringField("state", this.state);
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkState from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkState if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LinkState.
     */
    public static LinkState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkState deserializedLinkState = new LinkState();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastUpdatedOn".equals(fieldName)) {
                    deserializedLinkState.lastUpdatedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    deserializedLinkState.state = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedLinkState.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkState;
        });
    }
}
