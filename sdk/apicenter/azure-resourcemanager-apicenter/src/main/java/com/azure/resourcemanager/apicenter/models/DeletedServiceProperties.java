// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apicenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Deleted service properties.
 */
@Fluent
public final class DeletedServiceProperties implements JsonSerializable<DeletedServiceProperties> {
    /*
     * UTC date and time when the service will be automatically purged. The date conforms to the following format:
     * yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
     */
    private OffsetDateTime scheduledPurgeDate;

    /*
     * UTC date and time when the service was soft-deleted. The date conforms to the following format:
     * yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
     */
    private OffsetDateTime softDeletionDate;

    /**
     * Creates an instance of DeletedServiceProperties class.
     */
    public DeletedServiceProperties() {
    }

    /**
     * Get the scheduledPurgeDate property: UTC date and time when the service will be automatically purged. The date
     * conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
     * 
     * @return the scheduledPurgeDate value.
     */
    public OffsetDateTime scheduledPurgeDate() {
        return this.scheduledPurgeDate;
    }

    /**
     * Set the scheduledPurgeDate property: UTC date and time when the service will be automatically purged. The date
     * conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
     * 
     * @param scheduledPurgeDate the scheduledPurgeDate value to set.
     * @return the DeletedServiceProperties object itself.
     */
    public DeletedServiceProperties withScheduledPurgeDate(OffsetDateTime scheduledPurgeDate) {
        this.scheduledPurgeDate = scheduledPurgeDate;
        return this;
    }

    /**
     * Get the softDeletionDate property: UTC date and time when the service was soft-deleted. The date conforms to the
     * following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
     * 
     * @return the softDeletionDate value.
     */
    public OffsetDateTime softDeletionDate() {
        return this.softDeletionDate;
    }

    /**
     * Set the softDeletionDate property: UTC date and time when the service was soft-deleted. The date conforms to the
     * following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
     * 
     * @param softDeletionDate the softDeletionDate value to set.
     * @return the DeletedServiceProperties object itself.
     */
    public DeletedServiceProperties withSoftDeletionDate(OffsetDateTime softDeletionDate) {
        this.softDeletionDate = softDeletionDate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scheduledPurgeDate",
            this.scheduledPurgeDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.scheduledPurgeDate));
        jsonWriter.writeStringField("softDeletionDate",
            this.softDeletionDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.softDeletionDate));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeletedServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeletedServiceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeletedServiceProperties.
     */
    public static DeletedServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeletedServiceProperties deserializedDeletedServiceProperties = new DeletedServiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheduledPurgeDate".equals(fieldName)) {
                    deserializedDeletedServiceProperties.scheduledPurgeDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("softDeletionDate".equals(fieldName)) {
                    deserializedDeletedServiceProperties.softDeletionDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeletedServiceProperties;
        });
    }
}
