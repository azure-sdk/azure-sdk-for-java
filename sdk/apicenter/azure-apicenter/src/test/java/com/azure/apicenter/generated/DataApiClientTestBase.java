// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.apicenter.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.apicenter.ApiDefinitionsClient;
import com.azure.apicenter.ApiDeploymentsClient;
import com.azure.apicenter.ApisClient;
import com.azure.apicenter.ApiVersionsClient;
import com.azure.apicenter.DataApiClientBuilder;
import com.azure.apicenter.EnvironmentsClient;
import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

class DataApiClientTestBase extends TestProxyTestBase {
    protected ApisClient apisClient;

    protected ApiDefinitionsClient apiDefinitionsClient;

    protected ApiDeploymentsClient apiDeploymentsClient;

    protected EnvironmentsClient environmentsClient;

    protected ApiVersionsClient apiVersionsClient;

    @Override
    protected void beforeTest() {
        DataApiClientBuilder apisClientbuilder = new DataApiClientBuilder()
            .serviceName(Configuration.getGlobalConfiguration().get("SERVICENAME", "servicename"))
            .httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            apisClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            apisClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            apisClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        apisClient = apisClientbuilder.buildApisClient();

        DataApiClientBuilder apiDefinitionsClientbuilder = new DataApiClientBuilder()
            .serviceName(Configuration.getGlobalConfiguration().get("SERVICENAME", "servicename"))
            .httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            apiDefinitionsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            apiDefinitionsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            apiDefinitionsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        apiDefinitionsClient = apiDefinitionsClientbuilder.buildApiDefinitionsClient();

        DataApiClientBuilder apiDeploymentsClientbuilder = new DataApiClientBuilder()
            .serviceName(Configuration.getGlobalConfiguration().get("SERVICENAME", "servicename"))
            .httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            apiDeploymentsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            apiDeploymentsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            apiDeploymentsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        apiDeploymentsClient = apiDeploymentsClientbuilder.buildApiDeploymentsClient();

        DataApiClientBuilder environmentsClientbuilder = new DataApiClientBuilder()
            .serviceName(Configuration.getGlobalConfiguration().get("SERVICENAME", "servicename"))
            .httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            environmentsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            environmentsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            environmentsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        environmentsClient = environmentsClientbuilder.buildEnvironmentsClient();

        DataApiClientBuilder apiVersionsClientbuilder = new DataApiClientBuilder()
            .serviceName(Configuration.getGlobalConfiguration().get("SERVICENAME", "servicename"))
            .httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            apiVersionsClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            apiVersionsClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            apiVersionsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        apiVersionsClient = apiVersionsClientbuilder.buildApiVersionsClient();

    }
}
