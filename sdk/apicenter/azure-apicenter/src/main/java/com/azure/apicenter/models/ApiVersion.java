// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.apicenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * API version resource model.
 */
@Immutable
public final class ApiVersion implements JsonSerializable<ApiVersion> {
    /*
     * Version title.
     */
    @Generated
    private final String title;

    /*
     * Current lifecycle stage of the API version.
     */
    @Generated
    private final LifecycleStage lifecycleStage;

    /**
     * Creates an instance of ApiVersion class.
     * 
     * @param title the title value to set.
     * @param lifecycleStage the lifecycleStage value to set.
     */
    @Generated
    private ApiVersion(String title, LifecycleStage lifecycleStage) {
        this.title = title;
        this.lifecycleStage = lifecycleStage;
    }

    /**
     * Get the title property: Version title.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the lifecycleStage property: Current lifecycle stage of the API version.
     * 
     * @return the lifecycleStage value.
     */
    @Generated
    public LifecycleStage getLifecycleStage() {
        return this.lifecycleStage;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("lifecycleStage",
            this.lifecycleStage == null ? null : this.lifecycleStage.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiVersion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiVersion if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApiVersion.
     */
    @Generated
    public static ApiVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String title = null;
            LifecycleStage lifecycleStage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("lifecycleStage".equals(fieldName)) {
                    lifecycleStage = LifecycleStage.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new ApiVersion(title, lifecycleStage);
        });
    }
}
