// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.apicenter;

import com.azure.apicenter.implementation.ApiDefinitionsImpl;
import com.azure.apicenter.models.ApiDefinition;
import com.azure.apicenter.models.ApiSpecExportResult;
import com.azure.apicenter.models.GetDefinitionResponse;
import com.azure.apicenter.models.ResourceOperationStatusApiSpecExportResultApiSpecExportResultError;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.PollOperationDetails;
import com.azure.core.util.polling.SyncPoller;

/**
 * Initializes a new instance of the synchronous DataApiClient type.
 */
@ServiceClient(builder = DataApiClientBuilder.class)
public final class ApiDefinitionsClient {
    @Generated
    private final ApiDefinitionsImpl serviceClient;

    /**
     * Initializes an instance of ApiDefinitionsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ApiDefinitionsClient(ApiDefinitionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * List a collection of AasdasdPI definitions.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     title: String (Required)
     *     description: String (Optional)
     *     specification (Optional): {
     *         name: String (Required)
     *         version: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param workspaceName Workspace identifier.
     * @param apiName Api identifier.
     * @param versionName Version identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ApiDefinition items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDefinitions(String workspaceName, String apiName, String versionName,
        RequestOptions requestOptions) {
        return this.serviceClient.listDefinitions(workspaceName, apiName, versionName, requestOptions);
    }

    /**
     * Get an API definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     title: String (Required)
     *     description: String (Optional)
     *     specification (Optional): {
     *         name: String (Required)
     *         version: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param workspaceName Workspace identifier.
     * @param apiName Api identifier.
     * @param versionName Version identifier.
     * @param definitionName Definition identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an API definition along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDefinitionWithResponse(String workspaceName, String apiName, String versionName,
        String definitionName, RequestOptions requestOptions) {
        return this.serviceClient.getDefinitionWithResponse(workspaceName, apiName, versionName, definitionName,
            requestOptions);
    }

    /**
     * Gets status of a an API specification export operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     result (Optional): {
     *         definitionName: String (Required)
     *         value: String (Required)
     *         format: String(link) (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param workspaceName Workspace identifier.
     * @param apiName Api identifier.
     * @param versionName Version identifier.
     * @param definitionName API definition identifier.
     * @param operationId The unique ID of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return status of a an API specification export operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getExportSpecificationOperationStatusWithResponse(String workspaceName, String apiName,
        String versionName, String definitionName, String operationId, RequestOptions requestOptions) {
        return this.serviceClient.getExportSpecificationOperationStatusWithResponse(workspaceName, apiName, versionName,
            definitionName, operationId, requestOptions);
    }

    /**
     * Export an API specification asynchronously.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     result (Optional): {
     *         definitionName: String (Required)
     *         value: String (Required)
     *         format: String(link) (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param workspaceName Workspace identifier.
     * @param apiName Api identifier.
     * @param versionName Version identifier.
     * @param definitionName API definition identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginExportSpecification(String workspaceName, String apiName,
        String versionName, String definitionName, RequestOptions requestOptions) {
        return this.serviceClient.beginExportSpecification(workspaceName, apiName, versionName, definitionName,
            requestOptions);
    }

    /**
     * List a collection of AasdasdPI definitions.
     * 
     * @param workspaceName Workspace identifier.
     * @param apiName Api identifier.
     * @param versionName Version identifier.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ApiDefinition items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApiDefinition> listDefinitions(String workspaceName, String apiName, String versionName,
        Integer top, Integer skip) {
        // Generated convenience method for listDefinitions
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listDefinitions(workspaceName, apiName, versionName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(ApiDefinition.class));
    }

    /**
     * List a collection of AasdasdPI definitions.
     * 
     * @param workspaceName Workspace identifier.
     * @param apiName Api identifier.
     * @param versionName Version identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ApiDefinition items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApiDefinition> listDefinitions(String workspaceName, String apiName, String versionName) {
        // Generated convenience method for listDefinitions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listDefinitions(workspaceName, apiName, versionName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(ApiDefinition.class));
    }

    /**
     * Get an API definition.
     * 
     * @param workspaceName Workspace identifier.
     * @param apiName Api identifier.
     * @param versionName Version identifier.
     * @param definitionName Definition identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an API definition.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetDefinitionResponse getDefinition(String workspaceName, String apiName, String versionName,
        String definitionName) {
        // Generated convenience method for getDefinitionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDefinitionWithResponse(workspaceName, apiName, versionName, definitionName, requestOptions).getValue()
            .toObject(GetDefinitionResponse.class);
    }

    /**
     * Gets status of a an API specification export operation.
     * 
     * @param workspaceName Workspace identifier.
     * @param apiName Api identifier.
     * @param versionName Version identifier.
     * @param definitionName API definition identifier.
     * @param operationId The unique ID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a an API specification export operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceOperationStatusApiSpecExportResultApiSpecExportResultError getExportSpecificationOperationStatus(
        String workspaceName, String apiName, String versionName, String definitionName, String operationId) {
        // Generated convenience method for getExportSpecificationOperationStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getExportSpecificationOperationStatusWithResponse(workspaceName, apiName, versionName, definitionName,
            operationId, requestOptions).getValue()
            .toObject(ResourceOperationStatusApiSpecExportResultApiSpecExportResultError.class);
    }

    /**
     * Export an API specification asynchronously.
     * 
     * @param workspaceName Workspace identifier.
     * @param apiName Api identifier.
     * @param versionName Version identifier.
     * @param definitionName API definition identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollOperationDetails, ApiSpecExportResult> beginExportSpecification(String workspaceName,
        String apiName, String versionName, String definitionName) {
        // Generated convenience method for beginExportSpecificationWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginExportSpecificationWithModel(workspaceName, apiName, versionName, definitionName,
            requestOptions);
    }
}
