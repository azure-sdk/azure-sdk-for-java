// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.apicenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The GetDefinitionResponse model.
 */
@Immutable
public final class GetDefinitionResponse implements JsonSerializable<GetDefinitionResponse> {
    /*
     * The naasdasdme of the API definition.
     */
    @Generated
    private final String title;

    /*
     * The deasdasdscription of the API definition.
     */
    @Generated
    private String description;

    /*
     * The API specification details.
     */
    @Generated
    private ApiSpecification specification;

    /**
     * Creates an instance of GetDefinitionResponse class.
     * 
     * @param title the title value to set.
     */
    @Generated
    private GetDefinitionResponse(String title) {
        this.title = title;
    }

    /**
     * Get the title property: The naasdasdme of the API definition.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the description property: The deasdasdscription of the API definition.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the specification property: The API specification details.
     * 
     * @return the specification value.
     */
    @Generated
    public ApiSpecification getSpecification() {
        return this.specification;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("specification", this.specification);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetDefinitionResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetDefinitionResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetDefinitionResponse.
     */
    @Generated
    public static GetDefinitionResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String title = null;
            String description = null;
            ApiSpecification specification = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("specification".equals(fieldName)) {
                    specification = ApiSpecification.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            GetDefinitionResponse deserializedGetDefinitionResponse = new GetDefinitionResponse(title);
            deserializedGetDefinitionResponse.description = description;
            deserializedGetDefinitionResponse.specification = specification;

            return deserializedGetDefinitionResponse;
        });
    }
}
