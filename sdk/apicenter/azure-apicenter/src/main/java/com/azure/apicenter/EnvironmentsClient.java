// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.apicenter;

import com.azure.apicenter.implementation.EnvironmentsImpl;
import com.azure.apicenter.models.Environment;
import com.azure.apicenter.models.GetResponse;
import com.azure.apicenter.models.PagedEnvironmentAll;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous DataApiClient type.
 */
@ServiceClient(builder = DataApiClientBuilder.class)
public final class EnvironmentsClient {
    @Generated
    private final EnvironmentsImpl serviceClient;

    /**
     * Initializes an instance of EnvironmentsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    EnvironmentsClient(EnvironmentsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * List a collection of environments.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     title: String (Required)
     *     kind: String(development/testing/staging/production) (Required)
     *     description: String (Optional)
     *     server (Optional): {
     *         type: String (Required)
     *         managementPortalUris (Required): [
     *             String (Required)
     *         ]
     *     }
     *     onboarding (Optional): {
     *         instructions: String (Required)
     *         developerPortalUris (Required): [
     *             String (Required)
     *         ]
     *     }
     *     customProperties (Optional): {
     *     }
     * }
     * }</pre>
     * 
     * @param workspaceName Workspace identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Environment items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String workspaceName, RequestOptions requestOptions) {
        return this.serviceClient.list(workspaceName, requestOptions);
    }

    /**
     * List a collection of environments across workspaces.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             name: String (Required)
     *             title: String (Required)
     *             kind: String(development/testing/staging/production) (Required)
     *             description: String (Optional)
     *             server (Optional): {
     *                 type: String (Required)
     *                 managementPortalUris (Required): [
     *                     String (Required)
     *                 ]
     *             }
     *             onboarding (Optional): {
     *                 instructions: String (Required)
     *                 developerPortalUris (Required): [
     *                     String (Required)
     *                 ]
     *             }
     *             customProperties (Optional): {
     *             }
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Environment items across workspaces along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listAllWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listAllWithResponse(requestOptions);
    }

    /**
     * Get an environment.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     title: String (Required)
     *     kind: String(development/testing/staging/production) (Required)
     *     description: String (Optional)
     *     server (Optional): {
     *         type: String (Required)
     *         managementPortalUris (Required): [
     *             String (Required)
     *         ]
     *     }
     *     onboarding (Optional): {
     *         instructions: String (Required)
     *         developerPortalUris (Required): [
     *             String (Required)
     *         ]
     *     }
     *     customProperties (Optional): {
     *     }
     * }
     * }</pre>
     * 
     * @param workspaceName Workspace identifier.
     * @param environmentName Environment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an environment along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String workspaceName, String environmentName,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(workspaceName, environmentName, requestOptions);
    }

    /**
     * List a collection of environments.
     * 
     * @param workspaceName Workspace identifier.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Environment items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Environment> list(String workspaceName, Integer top, Integer skip) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.list(workspaceName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(Environment.class));
    }

    /**
     * List a collection of environments.
     * 
     * @param workspaceName Workspace identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Environment items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Environment> list(String workspaceName) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.list(workspaceName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(Environment.class));
    }

    /**
     * List a collection of environments across workspaces.
     * 
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxPageSize The maximum number of result items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Environment items across workspaces.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedEnvironmentAll listAll(Integer top, Integer skip, Integer maxPageSize) {
        // Generated convenience method for listAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        return listAllWithResponse(requestOptions).getValue().toObject(PagedEnvironmentAll.class);
    }

    /**
     * List a collection of environments across workspaces.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Environment items across workspaces.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedEnvironmentAll listAll() {
        // Generated convenience method for listAllWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listAllWithResponse(requestOptions).getValue().toObject(PagedEnvironmentAll.class);
    }

    /**
     * Get an environment.
     * 
     * @param workspaceName Workspace identifier.
     * @param environmentName Environment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetResponse get(String workspaceName, String environmentName) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(workspaceName, environmentName, requestOptions).getValue().toObject(GetResponse.class);
    }
}
