// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.apicenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * API License Model.
 */
@Immutable
public final class License implements JsonSerializable<License> {
    /*
     * Name of the license.
     */
    @Generated
    private final String name;

    /*
     * URL pointing to the license details. The URL field is mutually exclusive of the identifier field.
     */
    @Generated
    private String url;

    /*
     * SPDX license information for the API. The identifier field is mutually exclusive of the URL field.
     */
    @Generated
    private String identifier;

    /**
     * Creates an instance of License class.
     * 
     * @param name the name value to set.
     */
    @Generated
    private License(String name) {
        this.name = name;
    }

    /**
     * Get the name property: Name of the license.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the url property: URL pointing to the license details. The URL field is mutually exclusive of the identifier
     * field.
     * 
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the identifier property: SPDX license information for the API. The identifier field is mutually exclusive of
     * the URL field.
     * 
     * @return the identifier value.
     */
    @Generated
    public String getIdentifier() {
        return this.identifier;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("identifier", this.identifier);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of License from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of License if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the License.
     */
    @Generated
    public static License fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String url = null;
            String identifier = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("identifier".equals(fieldName)) {
                    identifier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            License deserializedLicense = new License(name);
            deserializedLicense.url = url;
            deserializedLicense.identifier = identifier;

            return deserializedLicense;
        });
    }
}
