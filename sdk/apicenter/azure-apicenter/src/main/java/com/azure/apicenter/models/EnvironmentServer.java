// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.apicenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Environment Server.
 */
@Immutable
public final class EnvironmentServer implements JsonSerializable<EnvironmentServer> {
    /*
     * Type of the server that represents the environment.
     */
    @Generated
    private final String type;

    /*
     * URIs of the server's management portal.
     */
    @Generated
    private final List<String> managementPortalUris;

    /**
     * Creates an instance of EnvironmentServer class.
     * 
     * @param type the type value to set.
     * @param managementPortalUris the managementPortalUris value to set.
     */
    @Generated
    private EnvironmentServer(String type, List<String> managementPortalUris) {
        this.type = type;
        this.managementPortalUris = managementPortalUris;
    }

    /**
     * Get the type property: Type of the server that represents the environment.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the managementPortalUris property: URIs of the server's management portal.
     * 
     * @return the managementPortalUris value.
     */
    @Generated
    public List<String> getManagementPortalUris() {
        return this.managementPortalUris;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("managementPortalUris", this.managementPortalUris,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnvironmentServer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnvironmentServer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EnvironmentServer.
     */
    @Generated
    public static EnvironmentServer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String type = null;
            List<String> managementPortalUris = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("managementPortalUris".equals(fieldName)) {
                    managementPortalUris = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new EnvironmentServer(type, managementPortalUris);
        });
    }
}
