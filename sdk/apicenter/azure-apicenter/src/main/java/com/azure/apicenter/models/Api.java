// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.apicenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * API resource model.
 */
@Immutable
public final class Api implements JsonSerializable<Api> {
    /*
     * Api identifier.
     */
    @Generated
    private String name;

    /*
     * The name of the API.
     */
    @Generated
    private final String title;

    /*
     * Short description of the API.
     */
    @Generated
    private String summary;

    /*
     * The description of the API
     */
    @Generated
    private String description;

    /*
     * Kind of API. For example, REST or GraphQL.
     */
    @Generated
    private final ApiKind kind;

    /*
     * Current lifecycle stage of the API.
     */
    @Generated
    private LifecycleStage lifecycleStage;

    /*
     * Terms of service for the API.
     */
    @Generated
    private TermsOfService termsOfService;

    /*
     * The license information for the API.
     */
    @Generated
    private License license;

    /*
     * External documentation
     */
    @Generated
    private List<ExternalDocumentation> externalDocumentation;

    /*
     * Points of contact for the API.
     */
    @Generated
    private List<Contact> contacts;

    /*
     * The custom metadata defined for API entities.
     */
    @Generated
    private ApiCustomProperties customProperties;

    /*
     * Last updated date and time.
     */
    @Generated
    private OffsetDateTime lastUpdated;

    /**
     * Creates an instance of Api class.
     * 
     * @param title the title value to set.
     * @param kind the kind value to set.
     */
    @Generated
    private Api(String title, ApiKind kind) {
        this.title = title;
        this.kind = kind;
    }

    /**
     * Get the name property: Api identifier.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the title property: The name of the API.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the summary property: Short description of the API.
     * 
     * @return the summary value.
     */
    @Generated
    public String getSummary() {
        return this.summary;
    }

    /**
     * Get the description property: The description of the API.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the kind property: Kind of API. For example, REST or GraphQL.
     * 
     * @return the kind value.
     */
    @Generated
    public ApiKind getKind() {
        return this.kind;
    }

    /**
     * Get the lifecycleStage property: Current lifecycle stage of the API.
     * 
     * @return the lifecycleStage value.
     */
    @Generated
    public LifecycleStage getLifecycleStage() {
        return this.lifecycleStage;
    }

    /**
     * Get the termsOfService property: Terms of service for the API.
     * 
     * @return the termsOfService value.
     */
    @Generated
    public TermsOfService getTermsOfService() {
        return this.termsOfService;
    }

    /**
     * Get the license property: The license information for the API.
     * 
     * @return the license value.
     */
    @Generated
    public License getLicense() {
        return this.license;
    }

    /**
     * Get the externalDocumentation property: External documentation.
     * 
     * @return the externalDocumentation value.
     */
    @Generated
    public List<ExternalDocumentation> getExternalDocumentation() {
        return this.externalDocumentation;
    }

    /**
     * Get the contacts property: Points of contact for the API.
     * 
     * @return the contacts value.
     */
    @Generated
    public List<Contact> getContacts() {
        return this.contacts;
    }

    /**
     * Get the customProperties property: The custom metadata defined for API entities.
     * 
     * @return the customProperties value.
     */
    @Generated
    public ApiCustomProperties getCustomProperties() {
        return this.customProperties;
    }

    /**
     * Get the lastUpdated property: Last updated date and time.
     * 
     * @return the lastUpdated value.
     */
    @Generated
    public OffsetDateTime getLastUpdated() {
        return this.lastUpdated;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("summary", this.summary);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("termsOfService", this.termsOfService);
        jsonWriter.writeJsonField("license", this.license);
        jsonWriter.writeArrayField("externalDocumentation", this.externalDocumentation,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("contacts", this.contacts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("customProperties", this.customProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Api from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Api if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Api.
     */
    @Generated
    public static Api fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String title = null;
            ApiKind kind = null;
            String summary = null;
            String description = null;
            LifecycleStage lifecycleStage = null;
            TermsOfService termsOfService = null;
            License license = null;
            List<ExternalDocumentation> externalDocumentation = null;
            List<Contact> contacts = null;
            ApiCustomProperties customProperties = null;
            OffsetDateTime lastUpdated = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = ApiKind.fromString(reader.getString());
                } else if ("summary".equals(fieldName)) {
                    summary = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("lifecycleStage".equals(fieldName)) {
                    lifecycleStage = LifecycleStage.fromString(reader.getString());
                } else if ("termsOfService".equals(fieldName)) {
                    termsOfService = TermsOfService.fromJson(reader);
                } else if ("license".equals(fieldName)) {
                    license = License.fromJson(reader);
                } else if ("externalDocumentation".equals(fieldName)) {
                    externalDocumentation = reader.readArray(reader1 -> ExternalDocumentation.fromJson(reader1));
                } else if ("contacts".equals(fieldName)) {
                    contacts = reader.readArray(reader1 -> Contact.fromJson(reader1));
                } else if ("customProperties".equals(fieldName)) {
                    customProperties = ApiCustomProperties.fromJson(reader);
                } else if ("lastUpdated".equals(fieldName)) {
                    lastUpdated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            Api deserializedApi = new Api(title, kind);
            deserializedApi.name = name;
            deserializedApi.summary = summary;
            deserializedApi.description = description;
            deserializedApi.lifecycleStage = lifecycleStage;
            deserializedApi.termsOfService = termsOfService;
            deserializedApi.license = license;
            deserializedApi.externalDocumentation = externalDocumentation;
            deserializedApi.contacts = contacts;
            deserializedApi.customProperties = customProperties;
            deserializedApi.lastUpdated = lastUpdated;

            return deserializedApi;
        });
    }
}
