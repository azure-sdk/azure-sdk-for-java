// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.apicenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Environment resource model.
 */
@Immutable
public final class Environment implements JsonSerializable<Environment> {
    /*
     * The name of the environment.
     */
    @Generated
    private final String title;

    /*
     * Kind of deployment environment.
     */
    @Generated
    private final EnvironmentKind kind;

    /*
     * Description of the environment.
     */
    @Generated
    private String description;

    /*
     * Server information of the environment.
     */
    @Generated
    private EnvironmentServer server;

    /*
     * Onboarding information for this environment.
     */
    @Generated
    private EnvironmentOnboardingModel onboarding;

    /*
     * The custom metadata defined for environment entities.
     */
    @Generated
    private EnvironmentCustomProperties customProperties;

    /**
     * Creates an instance of Environment class.
     * 
     * @param title the title value to set.
     * @param kind the kind value to set.
     */
    @Generated
    private Environment(String title, EnvironmentKind kind) {
        this.title = title;
        this.kind = kind;
    }

    /**
     * Get the title property: The name of the environment.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the kind property: Kind of deployment environment.
     * 
     * @return the kind value.
     */
    @Generated
    public EnvironmentKind getKind() {
        return this.kind;
    }

    /**
     * Get the description property: Description of the environment.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the server property: Server information of the environment.
     * 
     * @return the server value.
     */
    @Generated
    public EnvironmentServer getServer() {
        return this.server;
    }

    /**
     * Get the onboarding property: Onboarding information for this environment.
     * 
     * @return the onboarding value.
     */
    @Generated
    public EnvironmentOnboardingModel getOnboarding() {
        return this.onboarding;
    }

    /**
     * Get the customProperties property: The custom metadata defined for environment entities.
     * 
     * @return the customProperties value.
     */
    @Generated
    public EnvironmentCustomProperties getCustomProperties() {
        return this.customProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("server", this.server);
        jsonWriter.writeJsonField("onboarding", this.onboarding);
        jsonWriter.writeJsonField("customProperties", this.customProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Environment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Environment if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Environment.
     */
    @Generated
    public static Environment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String title = null;
            EnvironmentKind kind = null;
            String description = null;
            EnvironmentServer server = null;
            EnvironmentOnboardingModel onboarding = null;
            EnvironmentCustomProperties customProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = EnvironmentKind.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("server".equals(fieldName)) {
                    server = EnvironmentServer.fromJson(reader);
                } else if ("onboarding".equals(fieldName)) {
                    onboarding = EnvironmentOnboardingModel.fromJson(reader);
                } else if ("customProperties".equals(fieldName)) {
                    customProperties = EnvironmentCustomProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            Environment deserializedEnvironment = new Environment(title, kind);
            deserializedEnvironment.description = description;
            deserializedEnvironment.server = server;
            deserializedEnvironment.onboarding = onboarding;
            deserializedEnvironment.customProperties = customProperties;

            return deserializedEnvironment;
        });
    }
}
