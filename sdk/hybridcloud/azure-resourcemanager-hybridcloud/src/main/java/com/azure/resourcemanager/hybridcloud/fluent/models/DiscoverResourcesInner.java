// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.hybridcloud.models.DiscoveredResource;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Resource that represents resources found in remote cloud environments. */
@Fluent
public final class DiscoverResourcesInner {
    /*
     * Remote Cloud Resource Type filter
     */
    @JsonProperty(value = "resourceFilter")
    private ResourceFilter innerResourceFilter;

    /*
     * A list of discovered remote cloud resources.
     */
    @JsonProperty(value = "discoveredResources")
    private List<DiscoveredResource> discoveredResources;

    /** Creates an instance of DiscoverResourcesInner class. */
    public DiscoverResourcesInner() {
    }

    /**
     * Get the innerResourceFilter property: Remote Cloud Resource Type filter.
     *
     * @return the innerResourceFilter value.
     */
    private ResourceFilter innerResourceFilter() {
        return this.innerResourceFilter;
    }

    /**
     * Get the discoveredResources property: A list of discovered remote cloud resources.
     *
     * @return the discoveredResources value.
     */
    public List<DiscoveredResource> discoveredResources() {
        return this.discoveredResources;
    }

    /**
     * Set the discoveredResources property: A list of discovered remote cloud resources.
     *
     * @param discoveredResources the discoveredResources value to set.
     * @return the DiscoverResourcesInner object itself.
     */
    public DiscoverResourcesInner withDiscoveredResources(List<DiscoveredResource> discoveredResources) {
        this.discoveredResources = discoveredResources;
        return this;
    }

    /**
     * Get the name property: Resource name.
     *
     * @return the name value.
     */
    public String name() {
        return this.innerResourceFilter() == null ? null : this.innerResourceFilter().name();
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.innerResourceFilter() == null ? null : this.innerResourceFilter().type();
    }

    /**
     * Get the location property: Resource location.
     *
     * @return the location value.
     */
    public String location() {
        return this.innerResourceFilter() == null ? null : this.innerResourceFilter().location();
    }

    /**
     * Set the location property: Resource location.
     *
     * @param location the location value to set.
     * @return the DiscoverResourcesInner object itself.
     */
    public DiscoverResourcesInner withLocation(String location) {
        if (this.innerResourceFilter() == null) {
            this.innerResourceFilter = new ResourceFilter();
        }
        this.innerResourceFilter().withLocation(location);
        return this;
    }

    /**
     * Get the tags property: Resource tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.innerResourceFilter() == null ? null : this.innerResourceFilter().tags();
    }

    /**
     * Set the tags property: Resource tags.
     *
     * @param tags the tags value to set.
     * @return the DiscoverResourcesInner object itself.
     */
    public DiscoverResourcesInner withTags(Map<String, String> tags) {
        if (this.innerResourceFilter() == null) {
            this.innerResourceFilter = new ResourceFilter();
        }
        this.innerResourceFilter().withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerResourceFilter() != null) {
            innerResourceFilter().validate();
        }
        if (discoveredResources() != null) {
            discoveredResources().forEach(e -> e.validate());
        }
    }
}
