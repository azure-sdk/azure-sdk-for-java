// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcloud.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcloud.fluent.CloudConnectionsBySubscriptionsClient;
import com.azure.resourcemanager.hybridcloud.fluent.models.CloudConnectionInner;
import com.azure.resourcemanager.hybridcloud.models.CloudConnection;
import com.azure.resourcemanager.hybridcloud.models.CloudConnectionsBySubscriptions;

public final class CloudConnectionsBySubscriptionsImpl implements CloudConnectionsBySubscriptions {
    private static final ClientLogger LOGGER = new ClientLogger(CloudConnectionsBySubscriptionsImpl.class);

    private final CloudConnectionsBySubscriptionsClient innerClient;

    private final com.azure.resourcemanager.hybridcloud.HybridcloudManager serviceManager;

    public CloudConnectionsBySubscriptionsImpl(
        CloudConnectionsBySubscriptionsClient innerClient,
        com.azure.resourcemanager.hybridcloud.HybridcloudManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CloudConnection> list() {
        PagedIterable<CloudConnectionInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new CloudConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<CloudConnection> list(Context context) {
        PagedIterable<CloudConnectionInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new CloudConnectionImpl(inner1, this.manager()));
    }

    private CloudConnectionsBySubscriptionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridcloud.HybridcloudManager manager() {
        return this.serviceManager;
    }
}
