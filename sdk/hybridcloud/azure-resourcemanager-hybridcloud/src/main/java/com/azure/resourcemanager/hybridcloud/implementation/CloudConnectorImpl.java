// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcloud.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridcloud.fluent.models.CloudConnectorInner;
import com.azure.resourcemanager.hybridcloud.models.ClientSecret;
import com.azure.resourcemanager.hybridcloud.models.CloudConnector;
import com.azure.resourcemanager.hybridcloud.models.CloudConnectorIdentity;
import com.azure.resourcemanager.hybridcloud.models.CloudConnectorTagsObject;
import com.azure.resourcemanager.hybridcloud.models.CloudConnectorTagsObjectIdentity;
import com.azure.resourcemanager.hybridcloud.models.DiscoverResources;
import com.azure.resourcemanager.hybridcloud.models.ProvisioningState;
import com.azure.resourcemanager.hybridcloud.models.ResourceReference;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class CloudConnectorImpl implements CloudConnector, CloudConnector.Definition, CloudConnector.Update {
    private CloudConnectorInner innerObject;

    private final com.azure.resourcemanager.hybridcloud.HybridcloudManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public CloudConnectorIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String tenantUri() {
        return this.innerModel().tenantUri();
    }

    public String applicationId() {
        return this.innerModel().applicationId();
    }

    public ClientSecret clientSecret() {
        return this.innerModel().clientSecret();
    }

    public List<ResourceReference> cloudConnections() {
        List<ResourceReference> inner = this.innerModel().cloudConnections();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public CloudConnectorInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybridcloud.HybridcloudManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String cloudConnectorName;

    private CloudConnectorTagsObject updateParameters;

    public CloudConnectorImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public CloudConnector create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnectors()
                .createOrUpdate(resourceGroupName, cloudConnectorName, this.innerModel(), Context.NONE);
        return this;
    }

    public CloudConnector create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnectors()
                .createOrUpdate(resourceGroupName, cloudConnectorName, this.innerModel(), context);
        return this;
    }

    CloudConnectorImpl(String name, com.azure.resourcemanager.hybridcloud.HybridcloudManager serviceManager) {
        this.innerObject = new CloudConnectorInner();
        this.serviceManager = serviceManager;
        this.cloudConnectorName = name;
    }

    public CloudConnectorImpl update() {
        this.updateParameters = new CloudConnectorTagsObject();
        return this;
    }

    public CloudConnector apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnectors()
                .updateTagsWithResponse(resourceGroupName, cloudConnectorName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public CloudConnector apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnectors()
                .updateTagsWithResponse(resourceGroupName, cloudConnectorName, updateParameters, context)
                .getValue();
        return this;
    }

    CloudConnectorImpl(
        CloudConnectorInner innerObject, com.azure.resourcemanager.hybridcloud.HybridcloudManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.cloudConnectorName = Utils.getValueFromIdByName(innerObject.id(), "cloudConnectors");
    }

    public CloudConnector refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnectors()
                .getByResourceGroupWithResponse(resourceGroupName, cloudConnectorName, Context.NONE)
                .getValue();
        return this;
    }

    public CloudConnector refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnectors()
                .getByResourceGroupWithResponse(resourceGroupName, cloudConnectorName, context)
                .getValue();
        return this;
    }

    public Response<DiscoverResources> discoverResourcesWithResponse(Context context) {
        return serviceManager
            .cloudConnectors()
            .discoverResourcesWithResponse(resourceGroupName, cloudConnectorName, context);
    }

    public DiscoverResources discoverResources() {
        return serviceManager.cloudConnectors().discoverResources(resourceGroupName, cloudConnectorName);
    }

    public CloudConnectorImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public CloudConnectorImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public CloudConnectorImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public CloudConnectorImpl withIdentity(CloudConnectorIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public CloudConnectorImpl withTenantUri(String tenantUri) {
        this.innerModel().withTenantUri(tenantUri);
        return this;
    }

    public CloudConnectorImpl withApplicationId(String applicationId) {
        this.innerModel().withApplicationId(applicationId);
        return this;
    }

    public CloudConnectorImpl withClientSecret(ClientSecret clientSecret) {
        this.innerModel().withClientSecret(clientSecret);
        return this;
    }

    public CloudConnectorImpl withCloudConnections(List<ResourceReference> cloudConnections) {
        this.innerModel().withCloudConnections(cloudConnections);
        return this;
    }

    public CloudConnectorImpl withIdentity(CloudConnectorTagsObjectIdentity identity) {
        this.updateParameters.withIdentity(identity);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
