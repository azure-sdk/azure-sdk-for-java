// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.hybridcloud.models.ClientSecret;
import com.azure.resourcemanager.hybridcloud.models.ProvisioningState;
import com.azure.resourcemanager.hybridcloud.models.ResourceReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Cloud Connector resource properties. */
@Fluent
public final class CloudConnectorPropertiesFormat {
    /*
     * AAD Tenant URI (containing AAD URI and Directory ID). URI is needed for cloud Identification
     */
    @JsonProperty(value = "tenantUri")
    private String tenantUri;

    /*
     * AAD Application ID (aka Client ID). There can be multiple Applications replicated in the same AAD Tenant.
     */
    @JsonProperty(value = "applicationId")
    private String applicationId;

    /*
     * Secret to access the AAD Application ID and Customer KeyVault
     */
    @JsonProperty(value = "clientSecret")
    private ClientSecret clientSecret;

    /*
     * List of authorized Resources which have access to this connector
     */
    @JsonProperty(value = "cloudConnections")
    private List<ResourceReference> cloudConnections;

    /*
     * The provisioning state of the application rule collection resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of CloudConnectorPropertiesFormat class. */
    public CloudConnectorPropertiesFormat() {
    }

    /**
     * Get the tenantUri property: AAD Tenant URI (containing AAD URI and Directory ID). URI is needed for cloud
     * Identification.
     *
     * @return the tenantUri value.
     */
    public String tenantUri() {
        return this.tenantUri;
    }

    /**
     * Set the tenantUri property: AAD Tenant URI (containing AAD URI and Directory ID). URI is needed for cloud
     * Identification.
     *
     * @param tenantUri the tenantUri value to set.
     * @return the CloudConnectorPropertiesFormat object itself.
     */
    public CloudConnectorPropertiesFormat withTenantUri(String tenantUri) {
        this.tenantUri = tenantUri;
        return this;
    }

    /**
     * Get the applicationId property: AAD Application ID (aka Client ID). There can be multiple Applications replicated
     * in the same AAD Tenant.
     *
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * Set the applicationId property: AAD Application ID (aka Client ID). There can be multiple Applications replicated
     * in the same AAD Tenant.
     *
     * @param applicationId the applicationId value to set.
     * @return the CloudConnectorPropertiesFormat object itself.
     */
    public CloudConnectorPropertiesFormat withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Get the clientSecret property: Secret to access the AAD Application ID and Customer KeyVault.
     *
     * @return the clientSecret value.
     */
    public ClientSecret clientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: Secret to access the AAD Application ID and Customer KeyVault.
     *
     * @param clientSecret the clientSecret value to set.
     * @return the CloudConnectorPropertiesFormat object itself.
     */
    public CloudConnectorPropertiesFormat withClientSecret(ClientSecret clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Get the cloudConnections property: List of authorized Resources which have access to this connector.
     *
     * @return the cloudConnections value.
     */
    public List<ResourceReference> cloudConnections() {
        return this.cloudConnections;
    }

    /**
     * Set the cloudConnections property: List of authorized Resources which have access to this connector.
     *
     * @param cloudConnections the cloudConnections value to set.
     * @return the CloudConnectorPropertiesFormat object itself.
     */
    public CloudConnectorPropertiesFormat withCloudConnections(List<ResourceReference> cloudConnections) {
        this.cloudConnections = cloudConnections;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the application rule collection resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clientSecret() != null) {
            clientSecret().validate();
        }
        if (cloudConnections() != null) {
            cloudConnections().forEach(e -> e.validate());
        }
    }
}
