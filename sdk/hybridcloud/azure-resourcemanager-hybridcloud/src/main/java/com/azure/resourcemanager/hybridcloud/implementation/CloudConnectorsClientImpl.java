// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridcloud.fluent.CloudConnectorsClient;
import com.azure.resourcemanager.hybridcloud.fluent.models.CloudConnectorInner;
import com.azure.resourcemanager.hybridcloud.fluent.models.DiscoverResourcesInner;
import com.azure.resourcemanager.hybridcloud.models.CloudConnectorTagsObject;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CloudConnectorsClient. */
public final class CloudConnectorsClientImpl implements CloudConnectorsClient {
    /** The proxy service used to perform REST calls. */
    private final CloudConnectorsService service;

    /** The service client containing this operation class. */
    private final HybridcloudImpl client;

    /**
     * Initializes an instance of CloudConnectorsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CloudConnectorsClientImpl(HybridcloudImpl client) {
        this.service =
            RestProxy.create(CloudConnectorsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridcloudCloudConnectors to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridcloudCloudConn")
    public interface CloudConnectorsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud"
                + "/cloudConnectors/{cloudConnectorName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CloudConnectorInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("cloudConnectorName") String cloudConnectorName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud"
                + "/cloudConnectors/{cloudConnectorName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("cloudConnectorName") String cloudConnectorName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CloudConnectorInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud"
                + "/cloudConnectors/{cloudConnectorName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("cloudConnectorName") String cloudConnectorName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud"
                + "/cloudConnectors/{cloudConnectorName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CloudConnectorInner>> updateTags(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("cloudConnectorName") String cloudConnectorName,
            @BodyParam("application/json") CloudConnectorTagsObject parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud"
                + "/cloudConnectors/{cloudConnectorName}/discoverResources")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiscoverResourcesInner>> discoverResources(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("cloudConnectorName") String cloudConnectorName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the specified Cloud Connector in a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Cloud Connector in a specified resource group along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudConnectorInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String cloudConnectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            cloudConnectorName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the specified Cloud Connector in a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Cloud Connector in a specified resource group along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudConnectorInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String cloudConnectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                cloudConnectorName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the specified Cloud Connector in a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Cloud Connector in a specified resource group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudConnectorInner> getByResourceGroupAsync(String resourceGroupName, String cloudConnectorName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, cloudConnectorName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the specified Cloud Connector in a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Cloud Connector in a specified resource group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CloudConnectorInner> getByResourceGroupWithResponse(
        String resourceGroupName, String cloudConnectorName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, cloudConnectorName, context).block();
    }

    /**
     * Gets the specified Cloud Connector in a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Cloud Connector in a specified resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudConnectorInner getByResourceGroup(String resourceGroupName, String cloudConnectorName) {
        return getByResourceGroupWithResponse(resourceGroupName, cloudConnectorName, Context.NONE).getValue();
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters The parameters to provide for the created Cloud Connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Connector resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String cloudConnectorName, CloudConnectorInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectorName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            cloudConnectorName,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters The parameters to provide for the created Cloud Connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Connector resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String cloudConnectorName, CloudConnectorInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectorName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                cloudConnectorName,
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters The parameters to provide for the created Cloud Connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of cloud Connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CloudConnectorInner>, CloudConnectorInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String cloudConnectorName, CloudConnectorInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, cloudConnectorName, parameters);
        return this
            .client
            .<CloudConnectorInner, CloudConnectorInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CloudConnectorInner.class,
                CloudConnectorInner.class,
                this.client.getContext());
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters The parameters to provide for the created Cloud Connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of cloud Connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CloudConnectorInner>, CloudConnectorInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String cloudConnectorName, CloudConnectorInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, cloudConnectorName, parameters, context);
        return this
            .client
            .<CloudConnectorInner, CloudConnectorInner>getLroResult(
                mono, this.client.getHttpPipeline(), CloudConnectorInner.class, CloudConnectorInner.class, context);
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters The parameters to provide for the created Cloud Connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of cloud Connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CloudConnectorInner>, CloudConnectorInner> beginCreateOrUpdate(
        String resourceGroupName, String cloudConnectorName, CloudConnectorInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, cloudConnectorName, parameters).getSyncPoller();
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters The parameters to provide for the created Cloud Connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of cloud Connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CloudConnectorInner>, CloudConnectorInner> beginCreateOrUpdate(
        String resourceGroupName, String cloudConnectorName, CloudConnectorInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, cloudConnectorName, parameters, context).getSyncPoller();
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters The parameters to provide for the created Cloud Connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Connector resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudConnectorInner> createOrUpdateAsync(
        String resourceGroupName, String cloudConnectorName, CloudConnectorInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, cloudConnectorName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters The parameters to provide for the created Cloud Connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Connector resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudConnectorInner> createOrUpdateAsync(
        String resourceGroupName, String cloudConnectorName, CloudConnectorInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, cloudConnectorName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters The parameters to provide for the created Cloud Connector.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudConnectorInner createOrUpdate(
        String resourceGroupName, String cloudConnectorName, CloudConnectorInner parameters) {
        return createOrUpdateAsync(resourceGroupName, cloudConnectorName, parameters).block();
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters The parameters to provide for the created Cloud Connector.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudConnectorInner createOrUpdate(
        String resourceGroupName, String cloudConnectorName, CloudConnectorInner parameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, cloudConnectorName, parameters, context).block();
    }

    /**
     * Deletes a specified Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String cloudConnectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            cloudConnectorName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a specified Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String cloudConnectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                cloudConnectorName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes a specified Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String cloudConnectorName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, cloudConnectorName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes a specified Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String cloudConnectorName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, cloudConnectorName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes a specified Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String cloudConnectorName) {
        return beginDeleteAsync(resourceGroupName, cloudConnectorName).getSyncPoller();
    }

    /**
     * Deletes a specified Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String cloudConnectorName, Context context) {
        return beginDeleteAsync(resourceGroupName, cloudConnectorName, context).getSyncPoller();
    }

    /**
     * Deletes a specified Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String cloudConnectorName) {
        return beginDeleteAsync(resourceGroupName, cloudConnectorName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a specified Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String cloudConnectorName, Context context) {
        return beginDeleteAsync(resourceGroupName, cloudConnectorName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a specified Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String cloudConnectorName) {
        deleteAsync(resourceGroupName, cloudConnectorName).block();
    }

    /**
     * Deletes a specified Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String cloudConnectorName, Context context) {
        deleteAsync(resourceGroupName, cloudConnectorName, context).block();
    }

    /**
     * Updates the specified Cloud Connector tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters Parameters supplied to update Cloud Connector tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Connector resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudConnectorInner>> updateTagsWithResponseAsync(
        String resourceGroupName, String cloudConnectorName, CloudConnectorTagsObject parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectorName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateTags(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            cloudConnectorName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the specified Cloud Connector tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters Parameters supplied to update Cloud Connector tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Connector resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudConnectorInner>> updateTagsWithResponseAsync(
        String resourceGroupName, String cloudConnectorName, CloudConnectorTagsObject parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectorName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateTags(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                cloudConnectorName,
                parameters,
                accept,
                context);
    }

    /**
     * Updates the specified Cloud Connector tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters Parameters supplied to update Cloud Connector tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Connector resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudConnectorInner> updateTagsAsync(
        String resourceGroupName, String cloudConnectorName, CloudConnectorTagsObject parameters) {
        return updateTagsWithResponseAsync(resourceGroupName, cloudConnectorName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates the specified Cloud Connector tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters Parameters supplied to update Cloud Connector tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Connector resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CloudConnectorInner> updateTagsWithResponse(
        String resourceGroupName, String cloudConnectorName, CloudConnectorTagsObject parameters, Context context) {
        return updateTagsWithResponseAsync(resourceGroupName, cloudConnectorName, parameters, context).block();
    }

    /**
     * Updates the specified Cloud Connector tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param parameters Parameters supplied to update Cloud Connector tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudConnectorInner updateTags(
        String resourceGroupName, String cloudConnectorName, CloudConnectorTagsObject parameters) {
        return updateTagsWithResponse(resourceGroupName, cloudConnectorName, parameters, Context.NONE).getValue();
    }

    /**
     * Given the name of a cloud connector find the return a list of the remote cloud resources that are attached to
     * that name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource that represents resources found in remote cloud environments along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiscoverResourcesInner>> discoverResourcesWithResponseAsync(
        String resourceGroupName, String cloudConnectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .discoverResources(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            cloudConnectorName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Given the name of a cloud connector find the return a list of the remote cloud resources that are attached to
     * that name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource that represents resources found in remote cloud environments along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiscoverResourcesInner>> discoverResourcesWithResponseAsync(
        String resourceGroupName, String cloudConnectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .discoverResources(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                cloudConnectorName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Given the name of a cloud connector find the return a list of the remote cloud resources that are attached to
     * that name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource that represents resources found in remote cloud environments on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiscoverResourcesInner> discoverResourcesAsync(String resourceGroupName, String cloudConnectorName) {
        return discoverResourcesWithResponseAsync(resourceGroupName, cloudConnectorName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Given the name of a cloud connector find the return a list of the remote cloud resources that are attached to
     * that name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource that represents resources found in remote cloud environments along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DiscoverResourcesInner> discoverResourcesWithResponse(
        String resourceGroupName, String cloudConnectorName, Context context) {
        return discoverResourcesWithResponseAsync(resourceGroupName, cloudConnectorName, context).block();
    }

    /**
     * Given the name of a cloud connector find the return a list of the remote cloud resources that are attached to
     * that name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectorName The name of the cloud connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource that represents resources found in remote cloud environments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoverResourcesInner discoverResources(String resourceGroupName, String cloudConnectorName) {
        return discoverResourcesWithResponse(resourceGroupName, cloudConnectorName, Context.NONE).getValue();
    }
}
