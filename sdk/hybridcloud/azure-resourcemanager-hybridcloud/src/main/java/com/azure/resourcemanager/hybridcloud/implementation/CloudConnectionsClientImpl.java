// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridcloud.fluent.CloudConnectionsClient;
import com.azure.resourcemanager.hybridcloud.fluent.models.CloudConnectionInner;
import com.azure.resourcemanager.hybridcloud.models.CloudConnectionTagsObject;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CloudConnectionsClient. */
public final class CloudConnectionsClientImpl implements CloudConnectionsClient {
    /** The proxy service used to perform REST calls. */
    private final CloudConnectionsService service;

    /** The service client containing this operation class. */
    private final HybridcloudImpl client;

    /**
     * Initializes an instance of CloudConnectionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CloudConnectionsClientImpl(HybridcloudImpl client) {
        this.service =
            RestProxy.create(CloudConnectionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridcloudCloudConnections to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridcloudCloudConn")
    public interface CloudConnectionsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud"
                + "/cloudConnections/{cloudConnectionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CloudConnectionInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("cloudConnectionName") String cloudConnectionName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud"
                + "/cloudConnections/{cloudConnectionName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("cloudConnectionName") String cloudConnectionName,
            @BodyParam("application/json") CloudConnectionInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud"
                + "/cloudConnections/{cloudConnectionName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("cloudConnectionName") String cloudConnectionName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud"
                + "/cloudConnections/{cloudConnectionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CloudConnectionInner>> updateTags(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("cloudConnectionName") String cloudConnectionName,
            @BodyParam("application/json") CloudConnectionTagsObject parameters,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the specified Cloud Connection in a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Cloud Connection in a specified resource group along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudConnectionInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String cloudConnectionName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            cloudConnectionName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the specified Cloud Connection in a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Cloud Connection in a specified resource group along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudConnectionInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String cloudConnectionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                cloudConnectionName,
                accept,
                context);
    }

    /**
     * Gets the specified Cloud Connection in a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Cloud Connection in a specified resource group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudConnectionInner> getByResourceGroupAsync(String resourceGroupName, String cloudConnectionName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, cloudConnectionName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the specified Cloud Connection in a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Cloud Connection in a specified resource group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CloudConnectionInner> getByResourceGroupWithResponse(
        String resourceGroupName, String cloudConnectionName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, cloudConnectionName, context).block();
    }

    /**
     * Gets the specified Cloud Connection in a specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Cloud Connection in a specified resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudConnectionInner getByResourceGroup(String resourceGroupName, String cloudConnectionName) {
        return getByResourceGroupWithResponse(resourceGroupName, cloudConnectionName, Context.NONE).getValue();
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters The parameters to provide for the created Cloud Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource which represents the managed network connection between Azure Gateways and remote cloud gateways
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String cloudConnectionName, CloudConnectionInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            cloudConnectionName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters The parameters to provide for the created Cloud Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource which represents the managed network connection between Azure Gateways and remote cloud gateways
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String cloudConnectionName, CloudConnectionInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                cloudConnectionName,
                parameters,
                accept,
                context);
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters The parameters to provide for the created Cloud Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of resource which represents the managed network connection between
     *     Azure Gateways and remote cloud gateways.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CloudConnectionInner>, CloudConnectionInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String cloudConnectionName, CloudConnectionInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, cloudConnectionName, parameters);
        return this
            .client
            .<CloudConnectionInner, CloudConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CloudConnectionInner.class,
                CloudConnectionInner.class,
                this.client.getContext());
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters The parameters to provide for the created Cloud Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of resource which represents the managed network connection between
     *     Azure Gateways and remote cloud gateways.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CloudConnectionInner>, CloudConnectionInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String cloudConnectionName, CloudConnectionInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, cloudConnectionName, parameters, context);
        return this
            .client
            .<CloudConnectionInner, CloudConnectionInner>getLroResult(
                mono, this.client.getHttpPipeline(), CloudConnectionInner.class, CloudConnectionInner.class, context);
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters The parameters to provide for the created Cloud Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of resource which represents the managed network connection between
     *     Azure Gateways and remote cloud gateways.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CloudConnectionInner>, CloudConnectionInner> beginCreateOrUpdate(
        String resourceGroupName, String cloudConnectionName, CloudConnectionInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, cloudConnectionName, parameters).getSyncPoller();
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters The parameters to provide for the created Cloud Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of resource which represents the managed network connection between
     *     Azure Gateways and remote cloud gateways.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CloudConnectionInner>, CloudConnectionInner> beginCreateOrUpdate(
        String resourceGroupName, String cloudConnectionName, CloudConnectionInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, cloudConnectionName, parameters, context).getSyncPoller();
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters The parameters to provide for the created Cloud Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource which represents the managed network connection between Azure Gateways and remote cloud gateways
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudConnectionInner> createOrUpdateAsync(
        String resourceGroupName, String cloudConnectionName, CloudConnectionInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, cloudConnectionName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters The parameters to provide for the created Cloud Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource which represents the managed network connection between Azure Gateways and remote cloud gateways
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudConnectionInner> createOrUpdateAsync(
        String resourceGroupName, String cloudConnectionName, CloudConnectionInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, cloudConnectionName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters The parameters to provide for the created Cloud Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource which represents the managed network connection between Azure Gateways and remote cloud
     *     gateways.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudConnectionInner createOrUpdate(
        String resourceGroupName, String cloudConnectionName, CloudConnectionInner parameters) {
        return createOrUpdateAsync(resourceGroupName, cloudConnectionName, parameters).block();
    }

    /**
     * Creates or updates a Cloud Connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters The parameters to provide for the created Cloud Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource which represents the managed network connection between Azure Gateways and remote cloud
     *     gateways.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudConnectionInner createOrUpdate(
        String resourceGroupName, String cloudConnectionName, CloudConnectionInner parameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, cloudConnectionName, parameters, context).block();
    }

    /**
     * Deletes a specified Cloud Connection resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String cloudConnectionName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            cloudConnectionName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a specified Cloud Connection resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String cloudConnectionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                cloudConnectionName,
                accept,
                context);
    }

    /**
     * Deletes a specified Cloud Connection resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String cloudConnectionName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, cloudConnectionName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes a specified Cloud Connection resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String cloudConnectionName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, cloudConnectionName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes a specified Cloud Connection resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String cloudConnectionName) {
        return beginDeleteAsync(resourceGroupName, cloudConnectionName).getSyncPoller();
    }

    /**
     * Deletes a specified Cloud Connection resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String cloudConnectionName, Context context) {
        return beginDeleteAsync(resourceGroupName, cloudConnectionName, context).getSyncPoller();
    }

    /**
     * Deletes a specified Cloud Connection resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String cloudConnectionName) {
        return beginDeleteAsync(resourceGroupName, cloudConnectionName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a specified Cloud Connection resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String cloudConnectionName, Context context) {
        return beginDeleteAsync(resourceGroupName, cloudConnectionName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a specified Cloud Connection resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String cloudConnectionName) {
        deleteAsync(resourceGroupName, cloudConnectionName).block();
    }

    /**
     * Deletes a specified Cloud Connection resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String cloudConnectionName, Context context) {
        deleteAsync(resourceGroupName, cloudConnectionName, context).block();
    }

    /**
     * Updates the specified Cloud Connection tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters Parameters supplied to update Cloud Connection tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource which represents the managed network connection between Azure Gateways and remote cloud gateways
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudConnectionInner>> updateTagsWithResponseAsync(
        String resourceGroupName, String cloudConnectionName, CloudConnectionTagsObject parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateTags(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            cloudConnectionName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the specified Cloud Connection tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters Parameters supplied to update Cloud Connection tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource which represents the managed network connection between Azure Gateways and remote cloud gateways
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudConnectionInner>> updateTagsWithResponseAsync(
        String resourceGroupName, String cloudConnectionName, CloudConnectionTagsObject parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudConnectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudConnectionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateTags(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                cloudConnectionName,
                parameters,
                accept,
                context);
    }

    /**
     * Updates the specified Cloud Connection tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters Parameters supplied to update Cloud Connection tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource which represents the managed network connection between Azure Gateways and remote cloud gateways
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudConnectionInner> updateTagsAsync(
        String resourceGroupName, String cloudConnectionName, CloudConnectionTagsObject parameters) {
        return updateTagsWithResponseAsync(resourceGroupName, cloudConnectionName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates the specified Cloud Connection tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters Parameters supplied to update Cloud Connection tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource which represents the managed network connection between Azure Gateways and remote cloud gateways
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CloudConnectionInner> updateTagsWithResponse(
        String resourceGroupName, String cloudConnectionName, CloudConnectionTagsObject parameters, Context context) {
        return updateTagsWithResponseAsync(resourceGroupName, cloudConnectionName, parameters, context).block();
    }

    /**
     * Updates the specified Cloud Connection tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudConnectionName The name of the cloud connection resource.
     * @param parameters Parameters supplied to update Cloud Connection tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource which represents the managed network connection between Azure Gateways and remote cloud
     *     gateways.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudConnectionInner updateTags(
        String resourceGroupName, String cloudConnectionName, CloudConnectionTagsObject parameters) {
        return updateTagsWithResponse(resourceGroupName, cloudConnectionName, parameters, Context.NONE).getValue();
    }
}
