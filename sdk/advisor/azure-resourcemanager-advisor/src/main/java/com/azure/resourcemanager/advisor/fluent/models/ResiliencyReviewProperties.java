// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.advisor.models.ReviewStatus;
import java.io.IOException;

/**
 * Resiliency review properties.
 */
@Immutable
public final class ResiliencyReviewProperties implements JsonSerializable<ResiliencyReviewProperties> {
    /*
     * Review name.
     */
    private String reviewName;

    /*
     * Workload Name.
     */
    private String workloadName;

    /*
     * Review status.
     */
    private ReviewStatus reviewStatus;

    /*
     * Review recommendations count.
     */
    private Integer recommendationsCount;

    /*
     * Review last updated timestamp.
     */
    private String publishedAt;

    /*
     * Review last updated timestamp.
     */
    private String updatedAt;

    /**
     * Creates an instance of ResiliencyReviewProperties class.
     */
    public ResiliencyReviewProperties() {
    }

    /**
     * Get the reviewName property: Review name.
     * 
     * @return the reviewName value.
     */
    public String reviewName() {
        return this.reviewName;
    }

    /**
     * Get the workloadName property: Workload Name.
     * 
     * @return the workloadName value.
     */
    public String workloadName() {
        return this.workloadName;
    }

    /**
     * Get the reviewStatus property: Review status.
     * 
     * @return the reviewStatus value.
     */
    public ReviewStatus reviewStatus() {
        return this.reviewStatus;
    }

    /**
     * Get the recommendationsCount property: Review recommendations count.
     * 
     * @return the recommendationsCount value.
     */
    public Integer recommendationsCount() {
        return this.recommendationsCount;
    }

    /**
     * Get the publishedAt property: Review last updated timestamp.
     * 
     * @return the publishedAt value.
     */
    public String publishedAt() {
        return this.publishedAt;
    }

    /**
     * Get the updatedAt property: Review last updated timestamp.
     * 
     * @return the updatedAt value.
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResiliencyReviewProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResiliencyReviewProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResiliencyReviewProperties.
     */
    public static ResiliencyReviewProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResiliencyReviewProperties deserializedResiliencyReviewProperties = new ResiliencyReviewProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reviewName".equals(fieldName)) {
                    deserializedResiliencyReviewProperties.reviewName = reader.getString();
                } else if ("workloadName".equals(fieldName)) {
                    deserializedResiliencyReviewProperties.workloadName = reader.getString();
                } else if ("reviewStatus".equals(fieldName)) {
                    deserializedResiliencyReviewProperties.reviewStatus = ReviewStatus.fromString(reader.getString());
                } else if ("recommendationsCount".equals(fieldName)) {
                    deserializedResiliencyReviewProperties.recommendationsCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("publishedAt".equals(fieldName)) {
                    deserializedResiliencyReviewProperties.publishedAt = reader.getString();
                } else if ("updatedAt".equals(fieldName)) {
                    deserializedResiliencyReviewProperties.updatedAt = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResiliencyReviewProperties;
        });
    }
}
