// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.advisor.models.PriorityName;
import com.azure.resourcemanager.advisor.models.RecommendationStatusName;
import java.io.IOException;
import java.util.List;

/**
 * Triage recommendation data structure.
 */
@Immutable
public final class TriageRecommendationInner extends ProxyResource {
    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * Advisor resiliency review properties.
     */
    private TriageRecommendationProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of TriageRecommendationInner class.
     */
    public TriageRecommendationInner() {
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the innerProperties property: Advisor resiliency review properties.
     * 
     * @return the innerProperties value.
     */
    private TriageRecommendationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the reviewId property: Review id.
     * 
     * @return the reviewId value.
     */
    public String reviewId() {
        return this.innerProperties() == null ? null : this.innerProperties().reviewId();
    }

    /**
     * Get the title property: Recommendation label.
     * 
     * @return the title value.
     */
    public String title() {
        return this.innerProperties() == null ? null : this.innerProperties().title();
    }

    /**
     * Get the priority property: Recommendation priority.
     * 
     * @return the priority value.
     */
    public PriorityName priority() {
        return this.innerProperties() == null ? null : this.innerProperties().priority();
    }

    /**
     * Get the appliesToSubscriptions property: List of subscription ids.
     * 
     * @return the appliesToSubscriptions value.
     */
    public List<String> appliesToSubscriptions() {
        return this.innerProperties() == null ? null : this.innerProperties().appliesToSubscriptions();
    }

    /**
     * Get the recommendationStatus property: Recommendation status.
     * 
     * @return the recommendationStatus value.
     */
    public RecommendationStatusName recommendationStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().recommendationStatus();
    }

    /**
     * Get the updatedAt property: Recommendation potential benefit.
     * 
     * @return the updatedAt value.
     */
    public String updatedAt() {
        return this.innerProperties() == null ? null : this.innerProperties().updatedAt();
    }

    /**
     * Get the rejectReason property: Recommendation rejection reason.
     * 
     * @return the rejectReason value.
     */
    public String rejectReason() {
        return this.innerProperties() == null ? null : this.innerProperties().rejectReason();
    }

    /**
     * Get the potentialBenefits property: Recommendation potential benefit.
     * 
     * @return the potentialBenefits value.
     */
    public String potentialBenefits() {
        return this.innerProperties() == null ? null : this.innerProperties().potentialBenefits();
    }

    /**
     * Get the description property: Recommendation description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Get the notes property: Recommendation notes.
     * 
     * @return the notes value.
     */
    public String notes() {
        return this.innerProperties() == null ? null : this.innerProperties().notes();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TriageRecommendationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TriageRecommendationInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TriageRecommendationInner.
     */
    public static TriageRecommendationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TriageRecommendationInner deserializedTriageRecommendationInner = new TriageRecommendationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedTriageRecommendationInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedTriageRecommendationInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedTriageRecommendationInner.type = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedTriageRecommendationInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedTriageRecommendationInner.innerProperties
                        = TriageRecommendationProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTriageRecommendationInner;
        });
    }
}
