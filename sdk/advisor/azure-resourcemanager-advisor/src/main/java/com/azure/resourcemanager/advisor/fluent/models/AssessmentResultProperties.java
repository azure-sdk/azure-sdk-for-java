// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Assessment result properties.
 */
@Fluent
public final class AssessmentResultProperties implements JsonSerializable<AssessmentResultProperties> {
    /*
     * Workload Id.
     */
    private String workloadId;

    /*
     * Workload Name.
     */
    private String workloadName;

    /*
     * Assessment Id.
     */
    private String assessmentId;

    /*
     * Assessment Type Description.
     */
    private String description;

    /*
     * Assessment Type Id.
     */
    private String typeId;

    /*
     * Assessment Type.
     */
    private String type;

    /*
     * Assessment Score.
     */
    private Integer score;

    /*
     * Assessment State.
     */
    private String state;

    /*
     * Assessment Type Version.
     */
    private String typeVersion;

    /*
     * Assessment Type Locale.
     */
    private String locale;

    /**
     * Creates an instance of AssessmentResultProperties class.
     */
    public AssessmentResultProperties() {
    }

    /**
     * Get the workloadId property: Workload Id.
     * 
     * @return the workloadId value.
     */
    public String workloadId() {
        return this.workloadId;
    }

    /**
     * Set the workloadId property: Workload Id.
     * 
     * @param workloadId the workloadId value to set.
     * @return the AssessmentResultProperties object itself.
     */
    public AssessmentResultProperties withWorkloadId(String workloadId) {
        this.workloadId = workloadId;
        return this;
    }

    /**
     * Get the workloadName property: Workload Name.
     * 
     * @return the workloadName value.
     */
    public String workloadName() {
        return this.workloadName;
    }

    /**
     * Get the assessmentId property: Assessment Id.
     * 
     * @return the assessmentId value.
     */
    public String assessmentId() {
        return this.assessmentId;
    }

    /**
     * Get the description property: Assessment Type Description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the typeId property: Assessment Type Id.
     * 
     * @return the typeId value.
     */
    public String typeId() {
        return this.typeId;
    }

    /**
     * Set the typeId property: Assessment Type Id.
     * 
     * @param typeId the typeId value to set.
     * @return the AssessmentResultProperties object itself.
     */
    public AssessmentResultProperties withTypeId(String typeId) {
        this.typeId = typeId;
        return this;
    }

    /**
     * Get the type property: Assessment Type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the score property: Assessment Score.
     * 
     * @return the score value.
     */
    public Integer score() {
        return this.score;
    }

    /**
     * Get the state property: Assessment State.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Get the typeVersion property: Assessment Type Version.
     * 
     * @return the typeVersion value.
     */
    public String typeVersion() {
        return this.typeVersion;
    }

    /**
     * Get the locale property: Assessment Type Locale.
     * 
     * @return the locale value.
     */
    public String locale() {
        return this.locale;
    }

    /**
     * Set the locale property: Assessment Type Locale.
     * 
     * @param locale the locale value to set.
     * @return the AssessmentResultProperties object itself.
     */
    public AssessmentResultProperties withLocale(String locale) {
        this.locale = locale;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("workloadId", this.workloadId);
        jsonWriter.writeStringField("typeId", this.typeId);
        jsonWriter.writeStringField("locale", this.locale);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessmentResultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessmentResultProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessmentResultProperties.
     */
    public static AssessmentResultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessmentResultProperties deserializedAssessmentResultProperties = new AssessmentResultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workloadId".equals(fieldName)) {
                    deserializedAssessmentResultProperties.workloadId = reader.getString();
                } else if ("workloadName".equals(fieldName)) {
                    deserializedAssessmentResultProperties.workloadName = reader.getString();
                } else if ("assessmentId".equals(fieldName)) {
                    deserializedAssessmentResultProperties.assessmentId = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAssessmentResultProperties.description = reader.getString();
                } else if ("typeId".equals(fieldName)) {
                    deserializedAssessmentResultProperties.typeId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAssessmentResultProperties.type = reader.getString();
                } else if ("score".equals(fieldName)) {
                    deserializedAssessmentResultProperties.score = reader.getNullable(JsonReader::getInt);
                } else if ("state".equals(fieldName)) {
                    deserializedAssessmentResultProperties.state = reader.getString();
                } else if ("typeVersion".equals(fieldName)) {
                    deserializedAssessmentResultProperties.typeVersion = reader.getString();
                } else if ("locale".equals(fieldName)) {
                    deserializedAssessmentResultProperties.locale = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessmentResultProperties;
        });
    }
}
