// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Recommendation reject body.
 */
@Fluent
public final class RecommendationRejectBody implements JsonSerializable<RecommendationRejectBody> {
    /*
     * Reason for rejecting recommendation.
     */
    private ReasonForRejectionName reasonForRejection;

    /**
     * Creates an instance of RecommendationRejectBody class.
     */
    public RecommendationRejectBody() {
    }

    /**
     * Get the reasonForRejection property: Reason for rejecting recommendation.
     * 
     * @return the reasonForRejection value.
     */
    public ReasonForRejectionName reasonForRejection() {
        return this.reasonForRejection;
    }

    /**
     * Set the reasonForRejection property: Reason for rejecting recommendation.
     * 
     * @param reasonForRejection the reasonForRejection value to set.
     * @return the RecommendationRejectBody object itself.
     */
    public RecommendationRejectBody withReasonForRejection(ReasonForRejectionName reasonForRejection) {
        this.reasonForRejection = reasonForRejection;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("reasonForRejection",
            this.reasonForRejection == null ? null : this.reasonForRejection.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecommendationRejectBody from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecommendationRejectBody if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecommendationRejectBody.
     */
    public static RecommendationRejectBody fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecommendationRejectBody deserializedRecommendationRejectBody = new RecommendationRejectBody();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reasonForRejection".equals(fieldName)) {
                    deserializedRecommendationRejectBody.reasonForRejection
                        = ReasonForRejectionName.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecommendationRejectBody;
        });
    }
}
