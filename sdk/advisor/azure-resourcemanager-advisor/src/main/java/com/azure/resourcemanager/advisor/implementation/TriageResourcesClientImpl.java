// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.advisor.fluent.TriageResourcesClient;
import com.azure.resourcemanager.advisor.fluent.models.TriageResourceInner;
import com.azure.resourcemanager.advisor.models.TriageResourceCollection;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in TriageResourcesClient.
 */
public final class TriageResourcesClientImpl implements TriageResourcesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final TriageResourcesService service;

    /**
     * The service client containing this operation class.
     */
    private final AdvisorManagementClientImpl client;

    /**
     * Initializes an instance of TriageResourcesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    TriageResourcesClientImpl(AdvisorManagementClientImpl client) {
        this.service
            = RestProxy.create(TriageResourcesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AdvisorManagementClientTriageResources to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AdvisorManagementCli")
    public interface TriageResourcesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}/triageResources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TriageResourceCollection>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}/triageResources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<TriageResourceCollection> listSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}/triageResources/{recommendationResourceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TriageResourceInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @PathParam("recommendationResourceId") String recommendationResourceId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}/triageResources/{recommendationResourceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<TriageResourceInner> getSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @PathParam("recommendationResourceId") String recommendationResourceId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TriageResourceCollection>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<TriageResourceCollection> listNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List all triage resources that belong to a review and recommendation.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TriageResourceInner>> listSinglePageAsync(String reviewId, String recommendationId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            return Mono.error(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), reviewId, recommendationId, accept, context))
            .<PagedResponse<TriageResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List all triage resources that belong to a review and recommendation.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TriageResourceInner> listAsync(String reviewId, String recommendationId) {
        return new PagedFlux<>(() -> listSinglePageAsync(reviewId, recommendationId),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List all triage resources that belong to a review and recommendation.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<TriageResourceInner> listSinglePage(String reviewId, String recommendationId) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<TriageResourceCollection> res
            = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                reviewId, recommendationId, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List all triage resources that belong to a review and recommendation.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<TriageResourceInner> listSinglePage(String reviewId, String recommendationId,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<TriageResourceCollection> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), reviewId, recommendationId, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List all triage resources that belong to a review and recommendation.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TriageResourceInner> list(String reviewId, String recommendationId) {
        return new PagedIterable<>(() -> listSinglePage(reviewId, recommendationId),
            nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * List all triage resources that belong to a review and recommendation.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TriageResourceInner> list(String reviewId, String recommendationId, Context context) {
        return new PagedIterable<>(() -> listSinglePage(reviewId, recommendationId, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Get a triage resource for a given review and recommendation.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param recommendationResourceId Existing recommendation triage resource associated with a triage recommendation.
     * This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a triage resource for a given review and recommendation along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TriageResourceInner>> getWithResponseAsync(String reviewId, String recommendationId,
        String recommendationResourceId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            return Mono.error(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        if (recommendationResourceId == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter recommendationResourceId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), reviewId, recommendationId, recommendationResourceId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a triage resource for a given review and recommendation.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param recommendationResourceId Existing recommendation triage resource associated with a triage recommendation.
     * This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a triage resource for a given review and recommendation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TriageResourceInner> getAsync(String reviewId, String recommendationId,
        String recommendationResourceId) {
        return getWithResponseAsync(reviewId, recommendationId, recommendationResourceId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a triage resource for a given review and recommendation.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param recommendationResourceId Existing recommendation triage resource associated with a triage recommendation.
     * This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a triage resource for a given review and recommendation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TriageResourceInner> getWithResponse(String reviewId, String recommendationId,
        String recommendationResourceId, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        if (recommendationResourceId == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Parameter recommendationResourceId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            reviewId, recommendationId, recommendationResourceId, accept, context);
    }

    /**
     * Get a triage resource for a given review and recommendation.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param recommendationResourceId Existing recommendation triage resource associated with a triage recommendation.
     * This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a triage resource for a given review and recommendation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TriageResourceInner get(String reviewId, String recommendationId, String recommendationResourceId) {
        return getWithResponse(reviewId, recommendationId, recommendationResourceId, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TriageResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<TriageResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<TriageResourceInner> listNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<TriageResourceCollection> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<TriageResourceInner> listNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<TriageResourceCollection> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(TriageResourcesClientImpl.class);
}
