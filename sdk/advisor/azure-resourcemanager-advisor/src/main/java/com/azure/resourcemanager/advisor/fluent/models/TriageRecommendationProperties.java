// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.advisor.models.PriorityName;
import com.azure.resourcemanager.advisor.models.RecommendationStatusName;
import java.io.IOException;
import java.util.List;

/**
 * Triage recommendation properties.
 */
@Immutable
public final class TriageRecommendationProperties implements JsonSerializable<TriageRecommendationProperties> {
    /*
     * Review id.
     */
    private String reviewId;

    /*
     * Recommendation label.
     */
    private String title;

    /*
     * Recommendation priority.
     */
    private PriorityName priority;

    /*
     * List of subscription ids.
     */
    private List<String> appliesToSubscriptions;

    /*
     * Recommendation status.
     */
    private RecommendationStatusName recommendationStatus;

    /*
     * Recommendation potential benefit.
     */
    private String updatedAt;

    /*
     * Recommendation rejection reason.
     */
    private String rejectReason;

    /*
     * Recommendation potential benefit.
     */
    private String potentialBenefits;

    /*
     * Recommendation description.
     */
    private String description;

    /*
     * Recommendation notes.
     */
    private String notes;

    /**
     * Creates an instance of TriageRecommendationProperties class.
     */
    public TriageRecommendationProperties() {
    }

    /**
     * Get the reviewId property: Review id.
     * 
     * @return the reviewId value.
     */
    public String reviewId() {
        return this.reviewId;
    }

    /**
     * Get the title property: Recommendation label.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the priority property: Recommendation priority.
     * 
     * @return the priority value.
     */
    public PriorityName priority() {
        return this.priority;
    }

    /**
     * Get the appliesToSubscriptions property: List of subscription ids.
     * 
     * @return the appliesToSubscriptions value.
     */
    public List<String> appliesToSubscriptions() {
        return this.appliesToSubscriptions;
    }

    /**
     * Get the recommendationStatus property: Recommendation status.
     * 
     * @return the recommendationStatus value.
     */
    public RecommendationStatusName recommendationStatus() {
        return this.recommendationStatus;
    }

    /**
     * Get the updatedAt property: Recommendation potential benefit.
     * 
     * @return the updatedAt value.
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    /**
     * Get the rejectReason property: Recommendation rejection reason.
     * 
     * @return the rejectReason value.
     */
    public String rejectReason() {
        return this.rejectReason;
    }

    /**
     * Get the potentialBenefits property: Recommendation potential benefit.
     * 
     * @return the potentialBenefits value.
     */
    public String potentialBenefits() {
        return this.potentialBenefits;
    }

    /**
     * Get the description property: Recommendation description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the notes property: Recommendation notes.
     * 
     * @return the notes value.
     */
    public String notes() {
        return this.notes;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TriageRecommendationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TriageRecommendationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TriageRecommendationProperties.
     */
    public static TriageRecommendationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TriageRecommendationProperties deserializedTriageRecommendationProperties
                = new TriageRecommendationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reviewId".equals(fieldName)) {
                    deserializedTriageRecommendationProperties.reviewId = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedTriageRecommendationProperties.title = reader.getString();
                } else if ("priority".equals(fieldName)) {
                    deserializedTriageRecommendationProperties.priority = PriorityName.fromString(reader.getString());
                } else if ("appliesToSubscriptions".equals(fieldName)) {
                    List<String> appliesToSubscriptions = reader.readArray(reader1 -> reader1.getString());
                    deserializedTriageRecommendationProperties.appliesToSubscriptions = appliesToSubscriptions;
                } else if ("recommendationStatus".equals(fieldName)) {
                    deserializedTriageRecommendationProperties.recommendationStatus
                        = RecommendationStatusName.fromString(reader.getString());
                } else if ("updatedAt".equals(fieldName)) {
                    deserializedTriageRecommendationProperties.updatedAt = reader.getString();
                } else if ("rejectReason".equals(fieldName)) {
                    deserializedTriageRecommendationProperties.rejectReason = reader.getString();
                } else if ("potentialBenefits".equals(fieldName)) {
                    deserializedTriageRecommendationProperties.potentialBenefits = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedTriageRecommendationProperties.description = reader.getString();
                } else if ("notes".equals(fieldName)) {
                    deserializedTriageRecommendationProperties.notes = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTriageRecommendationProperties;
        });
    }
}
