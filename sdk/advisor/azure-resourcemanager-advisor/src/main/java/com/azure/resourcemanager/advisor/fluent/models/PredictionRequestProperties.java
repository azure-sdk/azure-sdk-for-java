// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.advisor.models.PredictionType;
import java.io.IOException;
import java.util.Map;

/**
 * Properties given for the predictor.
 */
@Fluent
public final class PredictionRequestProperties implements JsonSerializable<PredictionRequestProperties> {
    /*
     * Type of the prediction.
     */
    private PredictionType predictionType;

    /*
     * Extended properties are arguments specific for each prediction type.
     */
    private Map<String, Object> extendedProperties;

    /**
     * Creates an instance of PredictionRequestProperties class.
     */
    public PredictionRequestProperties() {
    }

    /**
     * Get the predictionType property: Type of the prediction.
     * 
     * @return the predictionType value.
     */
    public PredictionType predictionType() {
        return this.predictionType;
    }

    /**
     * Set the predictionType property: Type of the prediction.
     * 
     * @param predictionType the predictionType value to set.
     * @return the PredictionRequestProperties object itself.
     */
    public PredictionRequestProperties withPredictionType(PredictionType predictionType) {
        this.predictionType = predictionType;
        return this;
    }

    /**
     * Get the extendedProperties property: Extended properties are arguments specific for each prediction type.
     * 
     * @return the extendedProperties value.
     */
    public Map<String, Object> extendedProperties() {
        return this.extendedProperties;
    }

    /**
     * Set the extendedProperties property: Extended properties are arguments specific for each prediction type.
     * 
     * @param extendedProperties the extendedProperties value to set.
     * @return the PredictionRequestProperties object itself.
     */
    public PredictionRequestProperties withExtendedProperties(Map<String, Object> extendedProperties) {
        this.extendedProperties = extendedProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("predictionType",
            this.predictionType == null ? null : this.predictionType.toString());
        jsonWriter.writeMapField("extendedProperties", this.extendedProperties,
            (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PredictionRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PredictionRequestProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PredictionRequestProperties.
     */
    public static PredictionRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PredictionRequestProperties deserializedPredictionRequestProperties = new PredictionRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("predictionType".equals(fieldName)) {
                    deserializedPredictionRequestProperties.predictionType
                        = PredictionType.fromString(reader.getString());
                } else if ("extendedProperties".equals(fieldName)) {
                    Map<String, Object> extendedProperties = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedPredictionRequestProperties.extendedProperties = extendedProperties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPredictionRequestProperties;
        });
    }
}
