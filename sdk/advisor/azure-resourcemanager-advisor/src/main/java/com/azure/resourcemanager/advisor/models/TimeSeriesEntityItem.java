// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The data from different aggregation levels.
 */
@Fluent
public final class TimeSeriesEntityItem implements JsonSerializable<TimeSeriesEntityItem> {
    /*
     * The aggregation level of the score.
     */
    private Aggregated aggregationLevel;

    /*
     * The past score data
     */
    private List<ScoreEntity> scoreHistory;

    /**
     * Creates an instance of TimeSeriesEntityItem class.
     */
    public TimeSeriesEntityItem() {
    }

    /**
     * Get the aggregationLevel property: The aggregation level of the score.
     * 
     * @return the aggregationLevel value.
     */
    public Aggregated aggregationLevel() {
        return this.aggregationLevel;
    }

    /**
     * Set the aggregationLevel property: The aggregation level of the score.
     * 
     * @param aggregationLevel the aggregationLevel value to set.
     * @return the TimeSeriesEntityItem object itself.
     */
    public TimeSeriesEntityItem withAggregationLevel(Aggregated aggregationLevel) {
        this.aggregationLevel = aggregationLevel;
        return this;
    }

    /**
     * Get the scoreHistory property: The past score data.
     * 
     * @return the scoreHistory value.
     */
    public List<ScoreEntity> scoreHistory() {
        return this.scoreHistory;
    }

    /**
     * Set the scoreHistory property: The past score data.
     * 
     * @param scoreHistory the scoreHistory value to set.
     * @return the TimeSeriesEntityItem object itself.
     */
    public TimeSeriesEntityItem withScoreHistory(List<ScoreEntity> scoreHistory) {
        this.scoreHistory = scoreHistory;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scoreHistory() != null) {
            scoreHistory().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("aggregationLevel",
            this.aggregationLevel == null ? null : this.aggregationLevel.toString());
        jsonWriter.writeArrayField("scoreHistory", this.scoreHistory, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeSeriesEntityItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeSeriesEntityItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TimeSeriesEntityItem.
     */
    public static TimeSeriesEntityItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeSeriesEntityItem deserializedTimeSeriesEntityItem = new TimeSeriesEntityItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aggregationLevel".equals(fieldName)) {
                    deserializedTimeSeriesEntityItem.aggregationLevel = Aggregated.fromString(reader.getString());
                } else if ("scoreHistory".equals(fieldName)) {
                    List<ScoreEntity> scoreHistory = reader.readArray(reader1 -> ScoreEntity.fromJson(reader1));
                    deserializedTimeSeriesEntityItem.scoreHistory = scoreHistory;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTimeSeriesEntityItem;
        });
    }
}
