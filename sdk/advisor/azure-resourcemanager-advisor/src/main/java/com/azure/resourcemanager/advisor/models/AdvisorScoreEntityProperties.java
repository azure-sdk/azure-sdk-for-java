// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The Advisor score data.
 */
@Fluent
public final class AdvisorScoreEntityProperties implements JsonSerializable<AdvisorScoreEntityProperties> {
    /*
     * The details of latest available score.
     */
    private ScoreEntity lastRefreshedScore;

    /*
     * The historic Advisor score data.
     */
    private List<TimeSeriesEntityItem> timeSeries;

    /**
     * Creates an instance of AdvisorScoreEntityProperties class.
     */
    public AdvisorScoreEntityProperties() {
    }

    /**
     * Get the lastRefreshedScore property: The details of latest available score.
     * 
     * @return the lastRefreshedScore value.
     */
    public ScoreEntity lastRefreshedScore() {
        return this.lastRefreshedScore;
    }

    /**
     * Set the lastRefreshedScore property: The details of latest available score.
     * 
     * @param lastRefreshedScore the lastRefreshedScore value to set.
     * @return the AdvisorScoreEntityProperties object itself.
     */
    public AdvisorScoreEntityProperties withLastRefreshedScore(ScoreEntity lastRefreshedScore) {
        this.lastRefreshedScore = lastRefreshedScore;
        return this;
    }

    /**
     * Get the timeSeries property: The historic Advisor score data.
     * 
     * @return the timeSeries value.
     */
    public List<TimeSeriesEntityItem> timeSeries() {
        return this.timeSeries;
    }

    /**
     * Set the timeSeries property: The historic Advisor score data.
     * 
     * @param timeSeries the timeSeries value to set.
     * @return the AdvisorScoreEntityProperties object itself.
     */
    public AdvisorScoreEntityProperties withTimeSeries(List<TimeSeriesEntityItem> timeSeries) {
        this.timeSeries = timeSeries;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lastRefreshedScore() != null) {
            lastRefreshedScore().validate();
        }
        if (timeSeries() != null) {
            timeSeries().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("lastRefreshedScore", this.lastRefreshedScore);
        jsonWriter.writeArrayField("timeSeries", this.timeSeries, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdvisorScoreEntityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdvisorScoreEntityProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdvisorScoreEntityProperties.
     */
    public static AdvisorScoreEntityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdvisorScoreEntityProperties deserializedAdvisorScoreEntityProperties = new AdvisorScoreEntityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastRefreshedScore".equals(fieldName)) {
                    deserializedAdvisorScoreEntityProperties.lastRefreshedScore = ScoreEntity.fromJson(reader);
                } else if ("timeSeries".equals(fieldName)) {
                    List<TimeSeriesEntityItem> timeSeries
                        = reader.readArray(reader1 -> TimeSeriesEntityItem.fromJson(reader1));
                    deserializedAdvisorScoreEntityProperties.timeSeries = timeSeries;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdvisorScoreEntityProperties;
        });
    }
}
