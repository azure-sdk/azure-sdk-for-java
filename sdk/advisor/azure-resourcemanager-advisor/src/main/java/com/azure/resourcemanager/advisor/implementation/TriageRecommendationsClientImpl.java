// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.advisor.fluent.TriageRecommendationsClient;
import com.azure.resourcemanager.advisor.fluent.models.TriageRecommendationInner;
import com.azure.resourcemanager.advisor.models.RecommendationRejectBody;
import com.azure.resourcemanager.advisor.models.TriageRecommendationCollection;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in TriageRecommendationsClient.
 */
public final class TriageRecommendationsClientImpl implements TriageRecommendationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final TriageRecommendationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AdvisorManagementClientImpl client;

    /**
     * Initializes an instance of TriageRecommendationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    TriageRecommendationsClientImpl(AdvisorManagementClientImpl client) {
        this.service = RestProxy.create(TriageRecommendationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AdvisorManagementClientTriageRecommendations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AdvisorManagementCli")
    public interface TriageRecommendationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TriageRecommendationCollection>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @QueryParam("$top") Integer top, @QueryParam("$skip") Integer skip,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<TriageRecommendationCollection> listSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @QueryParam("$top") Integer top, @QueryParam("$skip") Integer skip,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TriageRecommendationInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<TriageRecommendationInner> getSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}/approve")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> approveTriageRecommendation(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}/approve")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Void> approveTriageRecommendationSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}/reject")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> rejectTriageRecommendation(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @BodyParam("application/json") RecommendationRejectBody recommendationRejectBody,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}/reject")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Void> rejectTriageRecommendationSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @BodyParam("application/json") RecommendationRejectBody recommendationRejectBody,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}/reset")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> resetTriageRecommendation(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/triageRecommendations/{recommendationId}/reset")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Void> resetTriageRecommendationSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("reviewId") String reviewId, @PathParam("recommendationId") String recommendationId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TriageRecommendationCollection>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<TriageRecommendationCollection> listNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get list of recommendations for an existing Azure Advisor Resiliency Review Id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param top The number of items to be included in the result.
     * @param skip The number of items to skip before starting to collect the result set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of recommendations for an existing Azure Advisor Resiliency Review Id along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TriageRecommendationInner>> listSinglePageAsync(String reviewId, Integer top,
        Integer skip) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            return Mono.error(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), reviewId, top, skip, accept, context))
            .<PagedResponse<TriageRecommendationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get list of recommendations for an existing Azure Advisor Resiliency Review Id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param top The number of items to be included in the result.
     * @param skip The number of items to skip before starting to collect the result set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of recommendations for an existing Azure Advisor Resiliency Review Id as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TriageRecommendationInner> listAsync(String reviewId, Integer top, Integer skip) {
        return new PagedFlux<>(() -> listSinglePageAsync(reviewId, top, skip),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get list of recommendations for an existing Azure Advisor Resiliency Review Id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of recommendations for an existing Azure Advisor Resiliency Review Id as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TriageRecommendationInner> listAsync(String reviewId) {
        final Integer top = null;
        final Integer skip = null;
        return new PagedFlux<>(() -> listSinglePageAsync(reviewId, top, skip),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get list of recommendations for an existing Azure Advisor Resiliency Review Id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param top The number of items to be included in the result.
     * @param skip The number of items to skip before starting to collect the result set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of recommendations for an existing Azure Advisor Resiliency Review Id along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<TriageRecommendationInner> listSinglePage(String reviewId, Integer top, Integer skip) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<TriageRecommendationCollection> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), reviewId, top, skip, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get list of recommendations for an existing Azure Advisor Resiliency Review Id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param top The number of items to be included in the result.
     * @param skip The number of items to skip before starting to collect the result set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of recommendations for an existing Azure Advisor Resiliency Review Id along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<TriageRecommendationInner> listSinglePage(String reviewId, Integer top, Integer skip,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<TriageRecommendationCollection> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), reviewId, top, skip, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get list of recommendations for an existing Azure Advisor Resiliency Review Id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of recommendations for an existing Azure Advisor Resiliency Review Id as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TriageRecommendationInner> list(String reviewId) {
        final Integer top = null;
        final Integer skip = null;
        return new PagedIterable<>(() -> listSinglePage(reviewId, top, skip), nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * Get list of recommendations for an existing Azure Advisor Resiliency Review Id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param top The number of items to be included in the result.
     * @param skip The number of items to skip before starting to collect the result set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of recommendations for an existing Azure Advisor Resiliency Review Id as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TriageRecommendationInner> list(String reviewId, Integer top, Integer skip, Context context) {
        return new PagedIterable<>(() -> listSinglePage(reviewId, top, skip, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Get an existing recommendation by id for an existing Azure Advisor Resiliency Review Id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing recommendation by id for an existing Azure Advisor Resiliency Review Id along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TriageRecommendationInner>> getWithResponseAsync(String reviewId, String recommendationId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            return Mono.error(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), reviewId, recommendationId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get an existing recommendation by id for an existing Azure Advisor Resiliency Review Id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing recommendation by id for an existing Azure Advisor Resiliency Review Id on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TriageRecommendationInner> getAsync(String reviewId, String recommendationId) {
        return getWithResponseAsync(reviewId, recommendationId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an existing recommendation by id for an existing Azure Advisor Resiliency Review Id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing recommendation by id for an existing Azure Advisor Resiliency Review Id along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TriageRecommendationInner> getWithResponse(String reviewId, String recommendationId,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            reviewId, recommendationId, accept, context);
    }

    /**
     * Get an existing recommendation by id for an existing Azure Advisor Resiliency Review Id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing recommendation by id for an existing Azure Advisor Resiliency Review Id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TriageRecommendationInner get(String reviewId, String recommendationId) {
        return getWithResponse(reviewId, recommendationId, Context.NONE).getValue();
    }

    /**
     * Approve a triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> approveTriageRecommendationWithResponseAsync(String reviewId,
        String recommendationId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            return Mono.error(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.approveTriageRecommendation(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), reviewId, recommendationId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Approve a triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> approveTriageRecommendationAsync(String reviewId, String recommendationId) {
        return approveTriageRecommendationWithResponseAsync(reviewId, recommendationId)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Approve a triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> approveTriageRecommendationWithResponse(String reviewId, String recommendationId,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.approveTriageRecommendationSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), reviewId, recommendationId, accept, context);
    }

    /**
     * Approve a triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void approveTriageRecommendation(String reviewId, String recommendationId) {
        approveTriageRecommendationWithResponse(reviewId, recommendationId, Context.NONE);
    }

    /**
     * Reject an existing triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param recommendationRejectBody JSON object that contains reason for rejecting triage recommendation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> rejectTriageRecommendationWithResponseAsync(String reviewId, String recommendationId,
        RecommendationRejectBody recommendationRejectBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            return Mono.error(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        if (recommendationRejectBody == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter recommendationRejectBody is required and cannot be null."));
        } else {
            recommendationRejectBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.rejectTriageRecommendation(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), reviewId, recommendationId,
                recommendationRejectBody, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Reject an existing triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param recommendationRejectBody JSON object that contains reason for rejecting triage recommendation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> rejectTriageRecommendationAsync(String reviewId, String recommendationId,
        RecommendationRejectBody recommendationRejectBody) {
        return rejectTriageRecommendationWithResponseAsync(reviewId, recommendationId, recommendationRejectBody)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Reject an existing triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param recommendationRejectBody JSON object that contains reason for rejecting triage recommendation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> rejectTriageRecommendationWithResponse(String reviewId, String recommendationId,
        RecommendationRejectBody recommendationRejectBody, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        if (recommendationRejectBody == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Parameter recommendationRejectBody is required and cannot be null."));
        } else {
            recommendationRejectBody.validate();
        }
        final String accept = "application/json";
        return service.rejectTriageRecommendationSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), reviewId, recommendationId, recommendationRejectBody, accept, context);
    }

    /**
     * Reject an existing triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param recommendationRejectBody JSON object that contains reason for rejecting triage recommendation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void rejectTriageRecommendation(String reviewId, String recommendationId,
        RecommendationRejectBody recommendationRejectBody) {
        rejectTriageRecommendationWithResponse(reviewId, recommendationId, recommendationRejectBody, Context.NONE);
    }

    /**
     * Reset an existing triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> resetTriageRecommendationWithResponseAsync(String reviewId, String recommendationId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            return Mono.error(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.resetTriageRecommendation(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), reviewId, recommendationId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Reset an existing triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> resetTriageRecommendationAsync(String reviewId, String recommendationId) {
        return resetTriageRecommendationWithResponseAsync(reviewId, recommendationId).flatMap(ignored -> Mono.empty());
    }

    /**
     * Reset an existing triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resetTriageRecommendationWithResponse(String reviewId, String recommendationId,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (reviewId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter reviewId is required and cannot be null."));
        }
        if (recommendationId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter recommendationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.resetTriageRecommendationSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), reviewId, recommendationId, accept, context);
    }

    /**
     * Reset an existing triage recommendation for a given id.
     * 
     * @param reviewId Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param recommendationId Existing triage recommendation id. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resetTriageRecommendation(String reviewId, String recommendationId) {
        resetTriageRecommendationWithResponse(reviewId, recommendationId, Context.NONE);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage recommendations along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TriageRecommendationInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<TriageRecommendationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage recommendations along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<TriageRecommendationInner> listNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<TriageRecommendationCollection> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Advisor triage recommendations along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<TriageRecommendationInner> listNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<TriageRecommendationCollection> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(TriageRecommendationsClientImpl.class);
}
