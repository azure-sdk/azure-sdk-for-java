// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.advisor.fluent.models.AssessmentResultInner;

/**
 * An instance of this class provides access to all the operations defined in AssessmentsClient.
 */
public interface AssessmentsClient {
    /**
     * Delete existing assessment.
     * 
     * Delete a existing Azure Advisor assessment.
     * 
     * @param assessmentName Advisor assessment name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String assessmentName, Context context);

    /**
     * Delete existing assessment.
     * 
     * Delete a existing Azure Advisor assessment.
     * 
     * @param assessmentName Advisor assessment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String assessmentName);

    /**
     * Get existing assessment.
     * 
     * Get a existing Azure Advisor assessment.
     * 
     * @param assessmentName Advisor assessment name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a existing Azure Advisor assessment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AssessmentResultInner> getWithResponse(String assessmentName, Context context);

    /**
     * Get existing assessment.
     * 
     * Get a existing Azure Advisor assessment.
     * 
     * @param assessmentName Advisor assessment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a existing Azure Advisor assessment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AssessmentResultInner get(String assessmentName);

    /**
     * Create/Overwrite Azure Advisor assessment.
     * 
     * Create or Overwrite Azure Advisor assessment resource.
     * 
     * @param assessmentName Advisor assessment name.
     * @param assessmentContract The Azure Advisor assessment data structure.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Advisor assessment result data structure along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AssessmentResultInner> putWithResponse(String assessmentName, AssessmentResultInner assessmentContract,
        Context context);

    /**
     * Create/Overwrite Azure Advisor assessment.
     * 
     * Create or Overwrite Azure Advisor assessment resource.
     * 
     * @param assessmentName Advisor assessment name.
     * @param assessmentContract The Azure Advisor assessment data structure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Advisor assessment result data structure.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AssessmentResultInner put(String assessmentName, AssessmentResultInner assessmentContract);

    /**
     * Get list of assessment.
     * 
     * Get list of Azure Advisor assessment.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Azure Advisor assessment as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AssessmentResultInner> list();

    /**
     * Get list of assessment.
     * 
     * Get list of Azure Advisor assessment.
     * 
     * @param top Limit the result to the specified number of rows.
     * @param skiptoken The page-continuation token to use with a paged version of this API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Azure Advisor assessment as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AssessmentResultInner> list(String top, String skiptoken, Context context);
}
