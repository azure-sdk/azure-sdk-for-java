// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The tracked properties of a Recommendation.
 */
@Fluent
public final class TrackedRecommendationProperties implements JsonSerializable<TrackedRecommendationProperties> {
    /*
     * The state of the Recommendation
     */
    private State state;

    /*
     * The time the Recommendation was postponed until.
     */
    private OffsetDateTime postponedTime;

    /*
     * The reason the state of the Recommendation was changed.
     */
    private Reason reason;

    /*
     * The Priority of the Recommendation.
     */
    private Priority priority;

    /**
     * Creates an instance of TrackedRecommendationProperties class.
     */
    public TrackedRecommendationProperties() {
    }

    /**
     * Get the state property: The state of the Recommendation.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the Recommendation.
     * 
     * @param state the state value to set.
     * @return the TrackedRecommendationProperties object itself.
     */
    public TrackedRecommendationProperties withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the postponedTime property: The time the Recommendation was postponed until.
     * 
     * @return the postponedTime value.
     */
    public OffsetDateTime postponedTime() {
        return this.postponedTime;
    }

    /**
     * Set the postponedTime property: The time the Recommendation was postponed until.
     * 
     * @param postponedTime the postponedTime value to set.
     * @return the TrackedRecommendationProperties object itself.
     */
    public TrackedRecommendationProperties withPostponedTime(OffsetDateTime postponedTime) {
        this.postponedTime = postponedTime;
        return this;
    }

    /**
     * Get the reason property: The reason the state of the Recommendation was changed.
     * 
     * @return the reason value.
     */
    public Reason reason() {
        return this.reason;
    }

    /**
     * Set the reason property: The reason the state of the Recommendation was changed.
     * 
     * @param reason the reason value to set.
     * @return the TrackedRecommendationProperties object itself.
     */
    public TrackedRecommendationProperties withReason(Reason reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get the priority property: The Priority of the Recommendation.
     * 
     * @return the priority value.
     */
    public Priority priority() {
        return this.priority;
    }

    /**
     * Set the priority property: The Priority of the Recommendation.
     * 
     * @param priority the priority value to set.
     * @return the TrackedRecommendationProperties object itself.
     */
    public TrackedRecommendationProperties withPriority(Priority priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("postponedTime",
            this.postponedTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.postponedTime));
        jsonWriter.writeStringField("reason", this.reason == null ? null : this.reason.toString());
        jsonWriter.writeStringField("priority", this.priority == null ? null : this.priority.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrackedRecommendationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrackedRecommendationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrackedRecommendationProperties.
     */
    public static TrackedRecommendationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrackedRecommendationProperties deserializedTrackedRecommendationProperties
                = new TrackedRecommendationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedTrackedRecommendationProperties.state = State.fromString(reader.getString());
                } else if ("postponedTime".equals(fieldName)) {
                    deserializedTrackedRecommendationProperties.postponedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("reason".equals(fieldName)) {
                    deserializedTrackedRecommendationProperties.reason = Reason.fromString(reader.getString());
                } else if ("priority".equals(fieldName)) {
                    deserializedTrackedRecommendationProperties.priority = Priority.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrackedRecommendationProperties;
        });
    }
}
