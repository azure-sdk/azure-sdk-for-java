// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The TrackedRecommendationPropertiesPayloadProperties model.
 */
@Fluent
public final class TrackedRecommendationPropertiesPayloadProperties
    implements JsonSerializable<TrackedRecommendationPropertiesPayloadProperties> {
    /*
     * The tracked properties of a Recommendation
     */
    private TrackedRecommendationProperties trackedProperties;

    /**
     * Creates an instance of TrackedRecommendationPropertiesPayloadProperties class.
     */
    public TrackedRecommendationPropertiesPayloadProperties() {
    }

    /**
     * Get the trackedProperties property: The tracked properties of a Recommendation.
     * 
     * @return the trackedProperties value.
     */
    public TrackedRecommendationProperties trackedProperties() {
        return this.trackedProperties;
    }

    /**
     * Set the trackedProperties property: The tracked properties of a Recommendation.
     * 
     * @param trackedProperties the trackedProperties value to set.
     * @return the TrackedRecommendationPropertiesPayloadProperties object itself.
     */
    public TrackedRecommendationPropertiesPayloadProperties
        withTrackedProperties(TrackedRecommendationProperties trackedProperties) {
        this.trackedProperties = trackedProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (trackedProperties() != null) {
            trackedProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("trackedProperties", this.trackedProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrackedRecommendationPropertiesPayloadProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrackedRecommendationPropertiesPayloadProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrackedRecommendationPropertiesPayloadProperties.
     */
    public static TrackedRecommendationPropertiesPayloadProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrackedRecommendationPropertiesPayloadProperties deserializedTrackedRecommendationPropertiesPayloadProperties
                = new TrackedRecommendationPropertiesPayloadProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("trackedProperties".equals(fieldName)) {
                    deserializedTrackedRecommendationPropertiesPayloadProperties.trackedProperties
                        = TrackedRecommendationProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrackedRecommendationPropertiesPayloadProperties;
        });
    }
}
