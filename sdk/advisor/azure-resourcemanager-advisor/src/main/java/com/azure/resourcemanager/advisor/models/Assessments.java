// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Assessments.
 */
public interface Assessments {
    /**
     * Get list of Azure Advisor assessment.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Azure Advisor assessment as paginated response with {@link PagedIterable}.
     */
    PagedIterable<AssessmentResult> list();

    /**
     * Get list of Azure Advisor assessment.
     * 
     * @param top Limit the result to the specified number of rows.
     * @param skiptoken The page-continuation token to use with a paged version of this API.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Azure Advisor assessment as paginated response with {@link PagedIterable}.
     */
    PagedIterable<AssessmentResult> list(String top, String skiptoken, Context context);

    /**
     * Get a existing Azure Advisor assessment.
     * 
     * @param assessmentName Advisor assessment name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a existing Azure Advisor assessment along with {@link Response}.
     */
    Response<AssessmentResult> getWithResponse(String assessmentName, Context context);

    /**
     * Get a existing Azure Advisor assessment.
     * 
     * @param assessmentName Advisor assessment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a existing Azure Advisor assessment.
     */
    AssessmentResult get(String assessmentName);

    /**
     * Delete a existing Azure Advisor assessment.
     * 
     * @param assessmentName Advisor assessment name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String assessmentName, Context context);

    /**
     * Delete a existing Azure Advisor assessment.
     * 
     * @param assessmentName Advisor assessment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String assessmentName);

    /**
     * Get a existing Azure Advisor assessment.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a existing Azure Advisor assessment along with {@link Response}.
     */
    AssessmentResult getById(String id);

    /**
     * Get a existing Azure Advisor assessment.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a existing Azure Advisor assessment along with {@link Response}.
     */
    Response<AssessmentResult> getByIdWithResponse(String id, Context context);

    /**
     * Delete a existing Azure Advisor assessment.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a existing Azure Advisor assessment.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new AssessmentResult resource.
     * 
     * @param name resource name.
     * @return the first stage of the new AssessmentResult definition.
     */
    AssessmentResult.DefinitionStages.Blank define(String name);
}
