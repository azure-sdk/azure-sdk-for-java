// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Advisor assessment result data structure.
 */
@Fluent
public final class AssessmentResultInner extends ProxyResource {
    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * The Advisor assessment result properties structure.
     */
    private AssessmentResultProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AssessmentResultInner class.
     */
    public AssessmentResultInner() {
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the innerProperties property: The Advisor assessment result properties structure.
     * 
     * @return the innerProperties value.
     */
    private AssessmentResultProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the workloadId property: Workload Id.
     * 
     * @return the workloadId value.
     */
    public String workloadId() {
        return this.innerProperties() == null ? null : this.innerProperties().workloadId();
    }

    /**
     * Set the workloadId property: Workload Id.
     * 
     * @param workloadId the workloadId value to set.
     * @return the AssessmentResultInner object itself.
     */
    public AssessmentResultInner withWorkloadId(String workloadId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AssessmentResultProperties();
        }
        this.innerProperties().withWorkloadId(workloadId);
        return this;
    }

    /**
     * Get the workloadName property: Workload Name.
     * 
     * @return the workloadName value.
     */
    public String workloadName() {
        return this.innerProperties() == null ? null : this.innerProperties().workloadName();
    }

    /**
     * Get the assessmentId property: Assessment Id.
     * 
     * @return the assessmentId value.
     */
    public String assessmentId() {
        return this.innerProperties() == null ? null : this.innerProperties().assessmentId();
    }

    /**
     * Get the description property: Assessment Type Description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Get the typeId property: Assessment Type Id.
     * 
     * @return the typeId value.
     */
    public String typeId() {
        return this.innerProperties() == null ? null : this.innerProperties().typeId();
    }

    /**
     * Set the typeId property: Assessment Type Id.
     * 
     * @param typeId the typeId value to set.
     * @return the AssessmentResultInner object itself.
     */
    public AssessmentResultInner withTypeId(String typeId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AssessmentResultProperties();
        }
        this.innerProperties().withTypeId(typeId);
        return this;
    }

    /**
     * Get the type property: Assessment Type.
     * 
     * @return the type value.
     */
    public String typePropertiesType() {
        return this.innerProperties() == null ? null : this.innerProperties().type();
    }

    /**
     * Get the score property: Assessment Score.
     * 
     * @return the score value.
     */
    public Integer score() {
        return this.innerProperties() == null ? null : this.innerProperties().score();
    }

    /**
     * Get the state property: Assessment State.
     * 
     * @return the state value.
     */
    public String state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Get the typeVersion property: Assessment Type Version.
     * 
     * @return the typeVersion value.
     */
    public String typeVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().typeVersion();
    }

    /**
     * Get the locale property: Assessment Type Locale.
     * 
     * @return the locale value.
     */
    public String locale() {
        return this.innerProperties() == null ? null : this.innerProperties().locale();
    }

    /**
     * Set the locale property: Assessment Type Locale.
     * 
     * @param locale the locale value to set.
     * @return the AssessmentResultInner object itself.
     */
    public AssessmentResultInner withLocale(String locale) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AssessmentResultProperties();
        }
        this.innerProperties().withLocale(locale);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessmentResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessmentResultInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssessmentResultInner.
     */
    public static AssessmentResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessmentResultInner deserializedAssessmentResultInner = new AssessmentResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAssessmentResultInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAssessmentResultInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAssessmentResultInner.type = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedAssessmentResultInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedAssessmentResultInner.innerProperties = AssessmentResultProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessmentResultInner;
        });
    }
}
