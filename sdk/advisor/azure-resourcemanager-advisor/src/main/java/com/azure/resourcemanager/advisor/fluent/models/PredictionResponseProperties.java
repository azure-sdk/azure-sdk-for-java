// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.advisor.models.Category;
import com.azure.resourcemanager.advisor.models.Impact;
import com.azure.resourcemanager.advisor.models.PredictionType;
import com.azure.resourcemanager.advisor.models.ShortDescription;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Properties of the prediction.
 */
@Fluent
public final class PredictionResponseProperties implements JsonSerializable<PredictionResponseProperties> {
    /*
     * Extended properties
     */
    private Map<String, Object> extendedProperties;

    /*
     * Type of the prediction.
     */
    private PredictionType predictionType;

    /*
     * The category of the recommendation.
     */
    private Category category;

    /*
     * The business impact of the recommendation.
     */
    private Impact impact;

    /*
     * The resource type identified by Advisor.
     */
    private String impactedField;

    /*
     * The most recent time that Advisor checked the validity of the recommendation.
     */
    private OffsetDateTime lastUpdated;

    /*
     * A summary of the recommendation.
     */
    private ShortDescription shortDescription;

    /**
     * Creates an instance of PredictionResponseProperties class.
     */
    public PredictionResponseProperties() {
    }

    /**
     * Get the extendedProperties property: Extended properties.
     * 
     * @return the extendedProperties value.
     */
    public Map<String, Object> extendedProperties() {
        return this.extendedProperties;
    }

    /**
     * Set the extendedProperties property: Extended properties.
     * 
     * @param extendedProperties the extendedProperties value to set.
     * @return the PredictionResponseProperties object itself.
     */
    public PredictionResponseProperties withExtendedProperties(Map<String, Object> extendedProperties) {
        this.extendedProperties = extendedProperties;
        return this;
    }

    /**
     * Get the predictionType property: Type of the prediction.
     * 
     * @return the predictionType value.
     */
    public PredictionType predictionType() {
        return this.predictionType;
    }

    /**
     * Set the predictionType property: Type of the prediction.
     * 
     * @param predictionType the predictionType value to set.
     * @return the PredictionResponseProperties object itself.
     */
    public PredictionResponseProperties withPredictionType(PredictionType predictionType) {
        this.predictionType = predictionType;
        return this;
    }

    /**
     * Get the category property: The category of the recommendation.
     * 
     * @return the category value.
     */
    public Category category() {
        return this.category;
    }

    /**
     * Set the category property: The category of the recommendation.
     * 
     * @param category the category value to set.
     * @return the PredictionResponseProperties object itself.
     */
    public PredictionResponseProperties withCategory(Category category) {
        this.category = category;
        return this;
    }

    /**
     * Get the impact property: The business impact of the recommendation.
     * 
     * @return the impact value.
     */
    public Impact impact() {
        return this.impact;
    }

    /**
     * Set the impact property: The business impact of the recommendation.
     * 
     * @param impact the impact value to set.
     * @return the PredictionResponseProperties object itself.
     */
    public PredictionResponseProperties withImpact(Impact impact) {
        this.impact = impact;
        return this;
    }

    /**
     * Get the impactedField property: The resource type identified by Advisor.
     * 
     * @return the impactedField value.
     */
    public String impactedField() {
        return this.impactedField;
    }

    /**
     * Set the impactedField property: The resource type identified by Advisor.
     * 
     * @param impactedField the impactedField value to set.
     * @return the PredictionResponseProperties object itself.
     */
    public PredictionResponseProperties withImpactedField(String impactedField) {
        this.impactedField = impactedField;
        return this;
    }

    /**
     * Get the lastUpdated property: The most recent time that Advisor checked the validity of the recommendation.
     * 
     * @return the lastUpdated value.
     */
    public OffsetDateTime lastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Set the lastUpdated property: The most recent time that Advisor checked the validity of the recommendation.
     * 
     * @param lastUpdated the lastUpdated value to set.
     * @return the PredictionResponseProperties object itself.
     */
    public PredictionResponseProperties withLastUpdated(OffsetDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
        return this;
    }

    /**
     * Get the shortDescription property: A summary of the recommendation.
     * 
     * @return the shortDescription value.
     */
    public ShortDescription shortDescription() {
        return this.shortDescription;
    }

    /**
     * Set the shortDescription property: A summary of the recommendation.
     * 
     * @param shortDescription the shortDescription value to set.
     * @return the PredictionResponseProperties object itself.
     */
    public PredictionResponseProperties withShortDescription(ShortDescription shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (shortDescription() != null) {
            shortDescription().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("extendedProperties", this.extendedProperties,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("predictionType",
            this.predictionType == null ? null : this.predictionType.toString());
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeStringField("impact", this.impact == null ? null : this.impact.toString());
        jsonWriter.writeStringField("impactedField", this.impactedField);
        jsonWriter.writeStringField("lastUpdated",
            this.lastUpdated == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdated));
        jsonWriter.writeJsonField("shortDescription", this.shortDescription);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PredictionResponseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PredictionResponseProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PredictionResponseProperties.
     */
    public static PredictionResponseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PredictionResponseProperties deserializedPredictionResponseProperties = new PredictionResponseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("extendedProperties".equals(fieldName)) {
                    Map<String, Object> extendedProperties = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedPredictionResponseProperties.extendedProperties = extendedProperties;
                } else if ("predictionType".equals(fieldName)) {
                    deserializedPredictionResponseProperties.predictionType
                        = PredictionType.fromString(reader.getString());
                } else if ("category".equals(fieldName)) {
                    deserializedPredictionResponseProperties.category = Category.fromString(reader.getString());
                } else if ("impact".equals(fieldName)) {
                    deserializedPredictionResponseProperties.impact = Impact.fromString(reader.getString());
                } else if ("impactedField".equals(fieldName)) {
                    deserializedPredictionResponseProperties.impactedField = reader.getString();
                } else if ("lastUpdated".equals(fieldName)) {
                    deserializedPredictionResponseProperties.lastUpdated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("shortDescription".equals(fieldName)) {
                    deserializedPredictionResponseProperties.shortDescription = ShortDescription.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPredictionResponseProperties;
        });
    }
}
