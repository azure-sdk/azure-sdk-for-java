// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.advisor.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.advisor.fluent.AssessmentsClient;
import com.azure.resourcemanager.advisor.fluent.models.AssessmentResultInner;
import com.azure.resourcemanager.advisor.models.AssessmentResult;
import com.azure.resourcemanager.advisor.models.Assessments;

public final class AssessmentsImpl implements Assessments {
    private static final ClientLogger LOGGER = new ClientLogger(AssessmentsImpl.class);

    private final AssessmentsClient innerClient;

    private final com.azure.resourcemanager.advisor.AdvisorManager serviceManager;

    public AssessmentsImpl(AssessmentsClient innerClient,
        com.azure.resourcemanager.advisor.AdvisorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Void> deleteWithResponse(String assessmentName, Context context) {
        return this.serviceClient().deleteWithResponse(assessmentName, context);
    }

    public void delete(String assessmentName) {
        this.serviceClient().delete(assessmentName);
    }

    public Response<AssessmentResult> getWithResponse(String assessmentName, Context context) {
        Response<AssessmentResultInner> inner = this.serviceClient().getWithResponse(assessmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AssessmentResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AssessmentResult get(String assessmentName) {
        AssessmentResultInner inner = this.serviceClient().get(assessmentName);
        if (inner != null) {
            return new AssessmentResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<AssessmentResult> list() {
        PagedIterable<AssessmentResultInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AssessmentResultImpl(inner1, this.manager()));
    }

    public PagedIterable<AssessmentResult> list(String top, String skiptoken, Context context) {
        PagedIterable<AssessmentResultInner> inner = this.serviceClient().list(top, skiptoken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AssessmentResultImpl(inner1, this.manager()));
    }

    public AssessmentResult getById(String id) {
        String assessmentName = ResourceManagerUtils.getValueFromIdByName(id, "assessments");
        if (assessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        return this.getWithResponse(assessmentName, Context.NONE).getValue();
    }

    public Response<AssessmentResult> getByIdWithResponse(String id, Context context) {
        String assessmentName = ResourceManagerUtils.getValueFromIdByName(id, "assessments");
        if (assessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        return this.getWithResponse(assessmentName, context);
    }

    public void deleteById(String id) {
        String assessmentName = ResourceManagerUtils.getValueFromIdByName(id, "assessments");
        if (assessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        this.deleteWithResponse(assessmentName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String assessmentName = ResourceManagerUtils.getValueFromIdByName(id, "assessments");
        if (assessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        return this.deleteWithResponse(assessmentName, context);
    }

    private AssessmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.advisor.AdvisorManager manager() {
        return this.serviceManager;
    }

    public AssessmentResultImpl define(String name) {
        return new AssessmentResultImpl(name, this.manager());
    }
}
