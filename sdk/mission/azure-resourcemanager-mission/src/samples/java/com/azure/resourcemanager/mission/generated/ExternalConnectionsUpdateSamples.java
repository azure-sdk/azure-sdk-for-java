// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.generated;

import com.azure.resourcemanager.mission.models.ExternalConnection;
import com.azure.resourcemanager.mission.models.ExternalConnectionState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ExternalConnections Update.
 */
public final class ExternalConnectionsUpdateSamples {
    /*
     * x-ms-original-file: specification/mission/resource-manager/Microsoft.Mission/preview/2024-11-01-preview/examples/
     * ExternalConnections_Update.json
     */
    /**
     * Sample code: ExternalConnections_Update.
     * 
     * @param manager Entry point to MissionManager.
     */
    public static void externalConnectionsUpdate(com.azure.resourcemanager.mission.MissionManager manager) {
        ExternalConnection resource = manager.externalConnections()
            .getByResourceGroupWithResponse("rgopenapi", "TestEcName", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("key4278", "fakeTokenPlaceholder"))
            .withState(ExternalConnectionState.PENDING)
            .withCommunityResourceId(
                "/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/communities/TestMyCommunity")
            .withEnclaveIds(Arrays.asList(
                "/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Mission/virtualEnclaves/TestSrcMyEnclave",
                "/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Mission/virtualEnclaves/TestDestMyEnclave"))
            .withExternalCidrs(Arrays.asList("192.168.0.1/24"))
            .withResourceCollection(Arrays.asList("resCollection"))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
