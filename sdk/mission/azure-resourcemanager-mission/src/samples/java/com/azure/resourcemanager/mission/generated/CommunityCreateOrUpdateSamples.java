// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.generated;

import com.azure.resourcemanager.mission.models.ApprovalPolicy;
import com.azure.resourcemanager.mission.models.ApprovalSettings;
import com.azure.resourcemanager.mission.models.ApprovalSettingsConnectionUpdateMode;
import com.azure.resourcemanager.mission.models.GovernedServiceItem;
import com.azure.resourcemanager.mission.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.mission.models.GovernedServiceItemOption;
import com.azure.resourcemanager.mission.models.MaintenanceModeConfiguration;
import com.azure.resourcemanager.mission.models.MaintenanceModeConfigurationJustification;
import com.azure.resourcemanager.mission.models.MaintenanceModeConfigurationMode;
import com.azure.resourcemanager.mission.models.ManagedServiceIdentity;
import com.azure.resourcemanager.mission.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mission.models.Principal;
import com.azure.resourcemanager.mission.models.PrincipalType;
import com.azure.resourcemanager.mission.models.RoleAssignmentItem;
import com.azure.resourcemanager.mission.models.ServiceIdentifier;
import com.azure.resourcemanager.mission.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Community CreateOrUpdate.
 */
public final class CommunityCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/mission/resource-manager/Microsoft.Mission/preview/2024-11-01-preview/examples/
     * Community_CreateOrUpdate.json
     */
    /**
     * Sample code: Community_CreateOrUpdate.
     * 
     * @param manager Entry point to MissionManager.
     */
    public static void communityCreateOrUpdate(com.azure.resourcemanager.mission.MissionManager manager) {
        manager.communities()
            .define("TestMyCommunity")
            .withRegion("westcentralus")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf("sampletag", "samplevalue"))
            .withIdentity(new ManagedServiceIdentity()
                .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1",
                    new UserAssignedIdentity())))
            .withAddressSpace("10.0.0.0/24")
            .withDnsServers(Arrays.asList("azure.net"))
            .withResourceCollection(Arrays.asList("resCollection"))
            .withGovernedServiceList(Arrays.asList(
                new GovernedServiceItem().withId(ServiceIdentifier.AKS)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.APP_SERVICE)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.CONTAINER_REGISTRY)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.COSMOS_DB)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.KEY_VAULT)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.MICROSOFT_SQL)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.MONITORING)
                    .withOption(GovernedServiceItemOption.fromString("Not Applicable"))
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.POSTGRE_SQL)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.SERVICE_BUS)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.STORAGE)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.AZURE_FIREWALLS)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.INSIGHTS)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.LOGIC)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.PRIVATE_DNSZONES)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false),
                new GovernedServiceItem().withId(ServiceIdentifier.DATA_CONNECTORS)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withAuditOnly(false)))
            .withCommunityRoleAssignments(Arrays.asList(
                new RoleAssignmentItem().withId("b24988ac-6180-42a0-ab88-20f7382dd24c")
                    .withPrincipals(Arrays.asList(
                        new Principal().withId("01234567-89ab-ef01-2345-0123456789ab").withType(PrincipalType.GROUP),
                        new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c0").withType(PrincipalType.USER))),
                new RoleAssignmentItem().withId("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9")
                    .withPrincipals(Arrays.asList(
                        new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c9").withType(PrincipalType.USER)))))
            .withApprovalSettings(new ApprovalSettings().withEndpointCreation(ApprovalPolicy.NOT_REQUIRED)
                .withEndpointUpdate(ApprovalPolicy.REQUIRED)
                .withEndpointDeletion(ApprovalPolicy.NOT_REQUIRED)
                .withConnectionCreation(ApprovalPolicy.REQUIRED)
                .withConnectionUpdate(ApprovalPolicy.REQUIRED)
                .withConnectionUpdateMode(ApprovalSettingsConnectionUpdateMode.MANUAL)
                .withConnectionDeletion(ApprovalPolicy.NOT_REQUIRED)
                .withEnclaveCreation(ApprovalPolicy.NOT_REQUIRED)
                .withEnclaveDeletion(ApprovalPolicy.NOT_REQUIRED)
                .withMaintenanceMode(ApprovalPolicy.NOT_REQUIRED)
                .withServiceCatalogDeployment(ApprovalPolicy.NOT_REQUIRED))
            .withMaintenanceModeConfiguration(
                new MaintenanceModeConfiguration().withMode(MaintenanceModeConfigurationMode.OFF)
                    .withPrincipals(Arrays.asList(
                        new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c9").withType(PrincipalType.USER)))
                    .withJustification(MaintenanceModeConfigurationJustification.OFF))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
