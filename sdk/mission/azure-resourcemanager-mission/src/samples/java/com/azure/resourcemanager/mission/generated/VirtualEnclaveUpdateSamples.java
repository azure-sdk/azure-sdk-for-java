// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.generated;

import com.azure.resourcemanager.mission.models.DiagnosticDestination;
import com.azure.resourcemanager.mission.models.EnclaveDefaultSettings;
import com.azure.resourcemanager.mission.models.EnclaveResource;
import com.azure.resourcemanager.mission.models.EnclaveVirtualNetworkUpdate;
import com.azure.resourcemanager.mission.models.MaintenanceModeConfigurationUpdate;
import com.azure.resourcemanager.mission.models.MaintenanceModeConfigurationUpdateJustification;
import com.azure.resourcemanager.mission.models.MaintenanceModeConfigurationUpdateMode;
import com.azure.resourcemanager.mission.models.Principal;
import com.azure.resourcemanager.mission.models.PrincipalType;
import com.azure.resourcemanager.mission.models.RoleAssignmentItem;
import com.azure.resourcemanager.mission.models.SubnetConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for VirtualEnclave Update.
 */
public final class VirtualEnclaveUpdateSamples {
    /*
     * x-ms-original-file: specification/mission/resource-manager/Microsoft.Mission/preview/2024-11-01-preview/examples/
     * VirtualEnclave_Update.json
     */
    /**
     * Sample code: VirtualEnclave_Update.
     * 
     * @param manager Entry point to MissionManager.
     */
    public static void virtualEnclaveUpdate(com.azure.resourcemanager.mission.MissionManager manager) {
        EnclaveResource resource = manager.virtualEnclaves()
            .getByResourceGroupWithResponse("rgopenapi", "TestMyEnclave", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("Tag1", "Value1"))
            .withEnclaveVirtualNetwork(new EnclaveVirtualNetworkUpdate().withNetworkSize("small")
                .withCustomCidrRange("10.0.0.0/24")
                .withSubnetConfigurations(
                    Arrays.asList(new SubnetConfiguration().withName("test").withNetworkPrefixSize(26)))
                .withAllowSubnetCommunication(true)
                .withConnectToAzureServices(true))
            .withCommunityResourceId(
                "/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/communities/TestMyCommunity")
            .withEnclaveDefaultSettings(new EnclaveDefaultSettings().withKeyVaultResourceId("fakeTokenPlaceholder")
                .withStorageAccountResourceId(
                    "/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Storage/storageAccounts/TestMyStorageAccount")
                .withLogAnalyticsResourceIdCollection(Arrays.asList(
                    "/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA1",
                    "/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA2"))
                .withDiagnosticDestination(DiagnosticDestination.BOTH))
            .withResourceCollection(Arrays.asList("g"))
            .withMaintenanceModeConfiguration(
                new MaintenanceModeConfigurationUpdate().withMode(MaintenanceModeConfigurationUpdateMode.OFF)
                    .withPrincipals(Arrays.asList(
                        new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c9").withType(PrincipalType.USER)))
                    .withJustification(MaintenanceModeConfigurationUpdateJustification.OFF))
            .withBastionEnabled(true)
            .withEnclaveRoleAssignments(
                Arrays.asList(
                    new RoleAssignmentItem().withId("b24988ac-6180-42a0-ab88-20f7382dd24c")
                        .withPrincipals(Arrays.asList(
                            new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c9").withType(PrincipalType.USER),
                            new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c0")
                                .withType(PrincipalType.USER))),
                    new RoleAssignmentItem().withId("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9")
                        .withPrincipals(Arrays.asList(new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c9")
                            .withType(PrincipalType.USER)))))
            .withWorkloadRoleAssignments(
                Arrays.asList(
                    new RoleAssignmentItem().withId("d73bb868-a0df-4d4d-bd69-98a00b01fccb")
                        .withPrincipals(Arrays.asList(new Principal().withId("01234567-89ab-ef01-2345-0123456789ab")
                            .withType(PrincipalType.GROUP))),
                    new RoleAssignmentItem().withId("fb879df8-f326-4884-b1cf-06f3ad86be52")
                        .withPrincipals(Arrays.asList(new Principal().withId("01234567-89ab-ef01-2345-0123456789ab")
                            .withType(PrincipalType.GROUP)))))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
