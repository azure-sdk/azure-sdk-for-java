// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.generated;

import com.azure.resourcemanager.mission.models.CommunityResource;
import com.azure.resourcemanager.mission.models.GovernedServiceItem;
import com.azure.resourcemanager.mission.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.mission.models.GovernedServiceItemOption;
import com.azure.resourcemanager.mission.models.Principal;
import com.azure.resourcemanager.mission.models.PrincipalType;
import com.azure.resourcemanager.mission.models.RoleAssignmentItem;
import com.azure.resourcemanager.mission.models.ServiceIdentifier;
import com.azure.resourcemanager.mission.models.UpdateCommunityPatchProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Community Update.
 */
public final class CommunityUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/mission/resource-manager/Microsoft.Mission/preview/2024-12-01-preview/examples/Community_Update.
     * json
     */
    /**
     * Sample code: Community_Update.
     * 
     * @param manager Entry point to MissionManager.
     */
    public static void communityUpdate(com.azure.resourcemanager.mission.MissionManager manager) {
        CommunityResource resource = manager.communities()
            .getByResourceGroupWithResponse("rgopenapi", "TestMyCommunity", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("sampletag", "samplevalue"))
            .withProperties(new UpdateCommunityPatchProperties().withAddressSpace("10.0.0.0/24")
                .withDnsServers(Arrays.asList("azure.net"))
                .withGovernedServiceList(Arrays.asList(
                    new GovernedServiceItem().withId(ServiceIdentifier.AKS)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.APP_SERVICE)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.CONTAINER_REGISTRY)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.COSMOS_DB)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.KEY_VAULT)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.MICROSOFT_SQL)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.MONITORING)
                        .withOption(GovernedServiceItemOption.fromString("Not Applicable"))
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.POSTGRE_SQL)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.SERVICE_BUS)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.STORAGE)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.AZURE_FIREWALLS)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.INSIGHTS)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.LOGIC)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.PRIVATE_DNSZONES)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false),
                    new GovernedServiceItem().withId(ServiceIdentifier.DATA_CONNECTORS)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withAuditOnly(false)))
                .withCommunityRoleAssignments(Arrays.asList(new RoleAssignmentItem()
                    .withId("b24988ac-6180-42a0-ab88-20f7382dd24c")
                    .withPrincipals(Arrays.asList(
                        new Principal().withId("01234567-89ab-ef01-2345-0123456789ab").withType(PrincipalType.GROUP),
                        new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c0").withType(PrincipalType.USER))),
                    new RoleAssignmentItem().withId("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9")
                        .withPrincipals(Arrays.asList(new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c9")
                            .withType(PrincipalType.USER))))))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
