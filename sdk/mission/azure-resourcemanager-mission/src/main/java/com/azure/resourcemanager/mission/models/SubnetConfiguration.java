// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Subnet Configuration.
 */
@Fluent
public final class SubnetConfiguration implements JsonSerializable<SubnetConfiguration> {
    /*
     * Subnet name.
     */
    private String name;

    /*
     * Subnet ID.
     */
    private String id;

    /*
     * Network prefix size.
     */
    private int networkPrefixSize;

    /*
     * Subnet delegation.
     */
    private String subnetDelegation;

    /*
     * Address prefix.
     */
    private String addressPrefix;

    /*
     * Network security group ID.
     */
    private String networkSecurityGroupId;

    /**
     * Creates an instance of SubnetConfiguration class.
     */
    public SubnetConfiguration() {
    }

    /**
     * Get the name property: Subnet name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Subnet name.
     * 
     * @param name the name value to set.
     * @return the SubnetConfiguration object itself.
     */
    public SubnetConfiguration withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the id property: Subnet ID.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the networkPrefixSize property: Network prefix size.
     * 
     * @return the networkPrefixSize value.
     */
    public int networkPrefixSize() {
        return this.networkPrefixSize;
    }

    /**
     * Set the networkPrefixSize property: Network prefix size.
     * 
     * @param networkPrefixSize the networkPrefixSize value to set.
     * @return the SubnetConfiguration object itself.
     */
    public SubnetConfiguration withNetworkPrefixSize(int networkPrefixSize) {
        this.networkPrefixSize = networkPrefixSize;
        return this;
    }

    /**
     * Get the subnetDelegation property: Subnet delegation.
     * 
     * @return the subnetDelegation value.
     */
    public String subnetDelegation() {
        return this.subnetDelegation;
    }

    /**
     * Set the subnetDelegation property: Subnet delegation.
     * 
     * @param subnetDelegation the subnetDelegation value to set.
     * @return the SubnetConfiguration object itself.
     */
    public SubnetConfiguration withSubnetDelegation(String subnetDelegation) {
        this.subnetDelegation = subnetDelegation;
        return this;
    }

    /**
     * Get the addressPrefix property: Address prefix.
     * 
     * @return the addressPrefix value.
     */
    public String addressPrefix() {
        return this.addressPrefix;
    }

    /**
     * Get the networkSecurityGroupId property: Network security group ID.
     * 
     * @return the networkSecurityGroupId value.
     */
    public String networkSecurityGroupId() {
        return this.networkSecurityGroupId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model SubnetConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SubnetConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeIntField("networkPrefixSize", this.networkPrefixSize);
        jsonWriter.writeStringField("subnetDelegation", this.subnetDelegation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubnetConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubnetConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SubnetConfiguration.
     */
    public static SubnetConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubnetConfiguration deserializedSubnetConfiguration = new SubnetConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSubnetConfiguration.name = reader.getString();
                } else if ("networkPrefixSize".equals(fieldName)) {
                    deserializedSubnetConfiguration.networkPrefixSize = reader.getInt();
                } else if ("id".equals(fieldName)) {
                    deserializedSubnetConfiguration.id = reader.getString();
                } else if ("subnetDelegation".equals(fieldName)) {
                    deserializedSubnetConfiguration.subnetDelegation = reader.getString();
                } else if ("addressPrefix".equals(fieldName)) {
                    deserializedSubnetConfiguration.addressPrefix = reader.getString();
                } else if ("networkSecurityGroupId".equals(fieldName)) {
                    deserializedSubnetConfiguration.networkSecurityGroupId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubnetConfiguration;
        });
    }
}
