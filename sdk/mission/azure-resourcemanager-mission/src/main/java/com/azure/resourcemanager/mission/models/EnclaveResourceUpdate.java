// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mission.fluent.models.VirtualEnclavePropertiesUpdate;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Virtual Enclave Model Resource.
 */
@Fluent
public final class EnclaveResourceUpdate extends AzureResourceManagerCommonTypesTrackedResourceUpdate {
    /*
     * The resource-specific properties for this resource.
     */
    private VirtualEnclavePropertiesUpdate innerProperties;

    /*
     * The managed service identities assigned to this resource.
     */
    private AzureResourceManagerCommonTypesManagedServiceIdentityUpdate identity;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of EnclaveResourceUpdate class.
     */
    public EnclaveResourceUpdate() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private VirtualEnclavePropertiesUpdate innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    public AzureResourceManagerCommonTypesManagedServiceIdentityUpdate identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed service identities assigned to this resource.
     * 
     * @param identity the identity value to set.
     * @return the EnclaveResourceUpdate object itself.
     */
    public EnclaveResourceUpdate withIdentity(AzureResourceManagerCommonTypesManagedServiceIdentityUpdate identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EnclaveResourceUpdate withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the enclaveVirtualNetwork property: Virtual Network.
     * 
     * @return the enclaveVirtualNetwork value.
     */
    public EnclaveVirtualNetworkUpdate enclaveVirtualNetwork() {
        return this.innerProperties() == null ? null : this.innerProperties().enclaveVirtualNetwork();
    }

    /**
     * Set the enclaveVirtualNetwork property: Virtual Network.
     * 
     * @param enclaveVirtualNetwork the enclaveVirtualNetwork value to set.
     * @return the EnclaveResourceUpdate object itself.
     */
    public EnclaveResourceUpdate withEnclaveVirtualNetwork(EnclaveVirtualNetworkUpdate enclaveVirtualNetwork) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualEnclavePropertiesUpdate();
        }
        this.innerProperties().withEnclaveVirtualNetwork(enclaveVirtualNetwork);
        return this;
    }

    /**
     * Get the communityResourceId property: Community Resource Id.
     * 
     * @return the communityResourceId value.
     */
    public String communityResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().communityResourceId();
    }

    /**
     * Set the communityResourceId property: Community Resource Id.
     * 
     * @param communityResourceId the communityResourceId value to set.
     * @return the EnclaveResourceUpdate object itself.
     */
    public EnclaveResourceUpdate withCommunityResourceId(String communityResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualEnclavePropertiesUpdate();
        }
        this.innerProperties().withCommunityResourceId(communityResourceId);
        return this;
    }

    /**
     * Get the enclaveDefaultSettings property: Default Settings.
     * 
     * @return the enclaveDefaultSettings value.
     */
    public EnclaveDefaultSettings enclaveDefaultSettings() {
        return this.innerProperties() == null ? null : this.innerProperties().enclaveDefaultSettings();
    }

    /**
     * Set the enclaveDefaultSettings property: Default Settings.
     * 
     * @param enclaveDefaultSettings the enclaveDefaultSettings value to set.
     * @return the EnclaveResourceUpdate object itself.
     */
    public EnclaveResourceUpdate withEnclaveDefaultSettings(EnclaveDefaultSettings enclaveDefaultSettings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualEnclavePropertiesUpdate();
        }
        this.innerProperties().withEnclaveDefaultSettings(enclaveDefaultSettings);
        return this;
    }

    /**
     * Get the resourceCollection property: List of resource ids created by Virtual Enclave.
     * 
     * @return the resourceCollection value.
     */
    public List<String> resourceCollection() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceCollection();
    }

    /**
     * Set the resourceCollection property: List of resource ids created by Virtual Enclave.
     * 
     * @param resourceCollection the resourceCollection value to set.
     * @return the EnclaveResourceUpdate object itself.
     */
    public EnclaveResourceUpdate withResourceCollection(List<String> resourceCollection) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualEnclavePropertiesUpdate();
        }
        this.innerProperties().withResourceCollection(resourceCollection);
        return this;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().managedResourceGroupConfiguration();
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the EnclaveResourceUpdate object itself.
     */
    public EnclaveResourceUpdate
        withManagedResourceGroupConfiguration(ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualEnclavePropertiesUpdate();
        }
        this.innerProperties().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
        return this;
    }

    /**
     * Get the maintenanceModeConfiguration property: Maintenance Mode configuration.
     * 
     * @return the maintenanceModeConfiguration value.
     */
    public MaintenanceModeConfigurationUpdate maintenanceModeConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceModeConfiguration();
    }

    /**
     * Set the maintenanceModeConfiguration property: Maintenance Mode configuration.
     * 
     * @param maintenanceModeConfiguration the maintenanceModeConfiguration value to set.
     * @return the EnclaveResourceUpdate object itself.
     */
    public EnclaveResourceUpdate
        withMaintenanceModeConfiguration(MaintenanceModeConfigurationUpdate maintenanceModeConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualEnclavePropertiesUpdate();
        }
        this.innerProperties().withMaintenanceModeConfiguration(maintenanceModeConfiguration);
        return this;
    }

    /**
     * Get the bastionEnabled property: Deploy Bastion service (True or False).
     * 
     * @return the bastionEnabled value.
     */
    public Boolean bastionEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().bastionEnabled();
    }

    /**
     * Set the bastionEnabled property: Deploy Bastion service (True or False).
     * 
     * @param bastionEnabled the bastionEnabled value to set.
     * @return the EnclaveResourceUpdate object itself.
     */
    public EnclaveResourceUpdate withBastionEnabled(Boolean bastionEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualEnclavePropertiesUpdate();
        }
        this.innerProperties().withBastionEnabled(bastionEnabled);
        return this;
    }

    /**
     * Get the enclaveRoleAssignments property: Enclave role assignments.
     * 
     * @return the enclaveRoleAssignments value.
     */
    public List<RoleAssignmentItem> enclaveRoleAssignments() {
        return this.innerProperties() == null ? null : this.innerProperties().enclaveRoleAssignments();
    }

    /**
     * Set the enclaveRoleAssignments property: Enclave role assignments.
     * 
     * @param enclaveRoleAssignments the enclaveRoleAssignments value to set.
     * @return the EnclaveResourceUpdate object itself.
     */
    public EnclaveResourceUpdate withEnclaveRoleAssignments(List<RoleAssignmentItem> enclaveRoleAssignments) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualEnclavePropertiesUpdate();
        }
        this.innerProperties().withEnclaveRoleAssignments(enclaveRoleAssignments);
        return this;
    }

    /**
     * Get the workloadRoleAssignments property: Workload role assignments.
     * 
     * @return the workloadRoleAssignments value.
     */
    public List<RoleAssignmentItem> workloadRoleAssignments() {
        return this.innerProperties() == null ? null : this.innerProperties().workloadRoleAssignments();
    }

    /**
     * Set the workloadRoleAssignments property: Workload role assignments.
     * 
     * @param workloadRoleAssignments the workloadRoleAssignments value to set.
     * @return the EnclaveResourceUpdate object itself.
     */
    public EnclaveResourceUpdate withWorkloadRoleAssignments(List<RoleAssignmentItem> workloadRoleAssignments) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualEnclavePropertiesUpdate();
        }
        this.innerProperties().withWorkloadRoleAssignments(workloadRoleAssignments);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnclaveResourceUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnclaveResourceUpdate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EnclaveResourceUpdate.
     */
    public static EnclaveResourceUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnclaveResourceUpdate deserializedEnclaveResourceUpdate = new EnclaveResourceUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedEnclaveResourceUpdate.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedEnclaveResourceUpdate.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedEnclaveResourceUpdate.type = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedEnclaveResourceUpdate.withTags(tags);
                } else if ("systemData".equals(fieldName)) {
                    deserializedEnclaveResourceUpdate.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedEnclaveResourceUpdate.innerProperties = VirtualEnclavePropertiesUpdate.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedEnclaveResourceUpdate.identity
                        = AzureResourceManagerCommonTypesManagedServiceIdentityUpdate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnclaveResourceUpdate;
        });
    }
}
