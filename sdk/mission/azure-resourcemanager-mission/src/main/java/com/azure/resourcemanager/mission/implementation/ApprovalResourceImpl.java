// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mission.fluent.models.ApprovalResourceInner;
import com.azure.resourcemanager.mission.models.ApprovalResource;
import com.azure.resourcemanager.mission.models.ApprovalResourceUpdate;
import com.azure.resourcemanager.mission.models.Approvers;
import com.azure.resourcemanager.mission.models.InitiatorCallbackRequest;
import com.azure.resourcemanager.mission.models.InitiatorCallbackResponse;
import com.azure.resourcemanager.mission.models.ProvisioningState;
import com.azure.resourcemanager.mission.models.RequestMetadata;
import com.azure.resourcemanager.mission.models.RequestMetadataUpdate;
import java.util.Collections;
import java.util.List;

public final class ApprovalResourceImpl
    implements ApprovalResource, ApprovalResource.Definition, ApprovalResource.Update {
    private ApprovalResourceInner innerObject;

    private final com.azure.resourcemanager.mission.MissionManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String parent1() {
        return this.innerModel().parent1();
    }

    public String parent2() {
        return this.innerModel().parent2();
    }

    public RequestMetadata requestMetadata() {
        return this.innerModel().requestMetadata();
    }

    public List<Approvers> approvers() {
        List<Approvers> inner = this.innerModel().approvers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<Approvers> mandatoryApprovers() {
        List<Approvers> inner = this.innerModel().mandatoryApprovers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Long minimumApproversRequired() {
        return this.innerModel().minimumApproversRequired();
    }

    public ApprovalResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mission.MissionManager manager() {
        return this.serviceManager;
    }

    private String resourceUri;

    private String approvalName;

    private ApprovalResourceUpdate updateProperties;

    public ApprovalResourceImpl withExistingResourceUri(String resourceUri) {
        this.resourceUri = resourceUri;
        return this;
    }

    public ApprovalResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getApprovals()
            .createOrUpdate(resourceUri, approvalName, this.innerModel(), Context.NONE);
        return this;
    }

    public ApprovalResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getApprovals()
            .createOrUpdate(resourceUri, approvalName, this.innerModel(), context);
        return this;
    }

    ApprovalResourceImpl(String name, com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerObject = new ApprovalResourceInner();
        this.serviceManager = serviceManager;
        this.approvalName = name;
    }

    public ApprovalResourceImpl update() {
        this.updateProperties = new ApprovalResourceUpdate();
        return this;
    }

    public ApprovalResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getApprovals()
            .update(resourceUri, approvalName, updateProperties, Context.NONE);
        return this;
    }

    public ApprovalResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getApprovals()
            .update(resourceUri, approvalName, updateProperties, context);
        return this;
    }

    ApprovalResourceImpl(ApprovalResourceInner innerObject,
        com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}", "resourceUri");
        this.approvalName = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}", "approvalName");
    }

    public ApprovalResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getApprovals()
            .getWithResponse(resourceUri, approvalName, Context.NONE)
            .getValue();
        return this;
    }

    public ApprovalResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getApprovals()
            .getWithResponse(resourceUri, approvalName, context)
            .getValue();
        return this;
    }

    public InitiatorCallbackResponse initiatorCallback(InitiatorCallbackRequest body) {
        return serviceManager.approvals().initiatorCallback(resourceUri, approvalName, body);
    }

    public InitiatorCallbackResponse initiatorCallback(InitiatorCallbackRequest body, Context context) {
        return serviceManager.approvals().initiatorCallback(resourceUri, approvalName, body, context);
    }

    public ApprovalResourceImpl withParent1(String parent1) {
        if (isInCreateMode()) {
            this.innerModel().withParent1(parent1);
            return this;
        } else {
            this.updateProperties.withParent1(parent1);
            return this;
        }
    }

    public ApprovalResourceImpl withParent2(String parent2) {
        if (isInCreateMode()) {
            this.innerModel().withParent2(parent2);
            return this;
        } else {
            this.updateProperties.withParent2(parent2);
            return this;
        }
    }

    public ApprovalResourceImpl withRequestMetadata(RequestMetadata requestMetadata) {
        this.innerModel().withRequestMetadata(requestMetadata);
        return this;
    }

    public ApprovalResourceImpl withApprovers(List<Approvers> approvers) {
        if (isInCreateMode()) {
            this.innerModel().withApprovers(approvers);
            return this;
        } else {
            this.updateProperties.withApprovers(approvers);
            return this;
        }
    }

    public ApprovalResourceImpl withMandatoryApprovers(List<Approvers> mandatoryApprovers) {
        if (isInCreateMode()) {
            this.innerModel().withMandatoryApprovers(mandatoryApprovers);
            return this;
        } else {
            this.updateProperties.withMandatoryApprovers(mandatoryApprovers);
            return this;
        }
    }

    public ApprovalResourceImpl withMinimumApproversRequired(Long minimumApproversRequired) {
        if (isInCreateMode()) {
            this.innerModel().withMinimumApproversRequired(minimumApproversRequired);
            return this;
        } else {
            this.updateProperties.withMinimumApproversRequired(minimumApproversRequired);
            return this;
        }
    }

    public ApprovalResourceImpl withRequestMetadata(RequestMetadataUpdate requestMetadata) {
        this.updateProperties.withRequestMetadata(requestMetadata);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
