// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request Metadata for approvals request.
 */
@Fluent
public final class RequestMetadata implements JsonSerializable<RequestMetadata> {
    /*
     * Resource Action of the item being approved or declined.
     */
    private String resourceAction;

    /*
     * Approval status.
     */
    private ApprovalStatus approvalStatus;

    /*
     * Route name for the approval callback
     */
    private String approvalCallbackRoute;

    /*
     * Payload to be sent upon any action on approval request
     */
    private String approvalCallbackPayload;

    /**
     * Creates an instance of RequestMetadata class.
     */
    public RequestMetadata() {
    }

    /**
     * Get the resourceAction property: Resource Action of the item being approved or declined.
     * 
     * @return the resourceAction value.
     */
    public String resourceAction() {
        return this.resourceAction;
    }

    /**
     * Set the resourceAction property: Resource Action of the item being approved or declined.
     * 
     * @param resourceAction the resourceAction value to set.
     * @return the RequestMetadata object itself.
     */
    public RequestMetadata withResourceAction(String resourceAction) {
        this.resourceAction = resourceAction;
        return this;
    }

    /**
     * Get the approvalStatus property: Approval status.
     * 
     * @return the approvalStatus value.
     */
    public ApprovalStatus approvalStatus() {
        return this.approvalStatus;
    }

    /**
     * Set the approvalStatus property: Approval status.
     * 
     * @param approvalStatus the approvalStatus value to set.
     * @return the RequestMetadata object itself.
     */
    public RequestMetadata withApprovalStatus(ApprovalStatus approvalStatus) {
        this.approvalStatus = approvalStatus;
        return this;
    }

    /**
     * Get the approvalCallbackRoute property: Route name for the approval callback.
     * 
     * @return the approvalCallbackRoute value.
     */
    public String approvalCallbackRoute() {
        return this.approvalCallbackRoute;
    }

    /**
     * Set the approvalCallbackRoute property: Route name for the approval callback.
     * 
     * @param approvalCallbackRoute the approvalCallbackRoute value to set.
     * @return the RequestMetadata object itself.
     */
    public RequestMetadata withApprovalCallbackRoute(String approvalCallbackRoute) {
        this.approvalCallbackRoute = approvalCallbackRoute;
        return this;
    }

    /**
     * Get the approvalCallbackPayload property: Payload to be sent upon any action on approval request.
     * 
     * @return the approvalCallbackPayload value.
     */
    public String approvalCallbackPayload() {
        return this.approvalCallbackPayload;
    }

    /**
     * Set the approvalCallbackPayload property: Payload to be sent upon any action on approval request.
     * 
     * @param approvalCallbackPayload the approvalCallbackPayload value to set.
     * @return the RequestMetadata object itself.
     */
    public RequestMetadata withApprovalCallbackPayload(String approvalCallbackPayload) {
        this.approvalCallbackPayload = approvalCallbackPayload;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceAction() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property resourceAction in model RequestMetadata"));
        }
        if (approvalCallbackRoute() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property approvalCallbackRoute in model RequestMetadata"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RequestMetadata.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceAction", this.resourceAction);
        jsonWriter.writeStringField("approvalCallbackRoute", this.approvalCallbackRoute);
        jsonWriter.writeStringField("approvalStatus",
            this.approvalStatus == null ? null : this.approvalStatus.toString());
        jsonWriter.writeStringField("approvalCallbackPayload", this.approvalCallbackPayload);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RequestMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RequestMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RequestMetadata.
     */
    public static RequestMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RequestMetadata deserializedRequestMetadata = new RequestMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceAction".equals(fieldName)) {
                    deserializedRequestMetadata.resourceAction = reader.getString();
                } else if ("approvalCallbackRoute".equals(fieldName)) {
                    deserializedRequestMetadata.approvalCallbackRoute = reader.getString();
                } else if ("approvalStatus".equals(fieldName)) {
                    deserializedRequestMetadata.approvalStatus = ApprovalStatus.fromString(reader.getString());
                } else if ("approvalCallbackPayload".equals(fieldName)) {
                    deserializedRequestMetadata.approvalCallbackPayload = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRequestMetadata;
        });
    }
}
