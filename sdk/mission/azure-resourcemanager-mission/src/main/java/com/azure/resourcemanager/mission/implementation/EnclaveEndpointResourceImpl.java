// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mission.fluent.models.EnclaveEndpointResourceInner;
import com.azure.resourcemanager.mission.models.ApprovalCallbackRequest;
import com.azure.resourcemanager.mission.models.ApprovalCallbackResponse;
import com.azure.resourcemanager.mission.models.ApprovalDeletionCallbackRequest;
import com.azure.resourcemanager.mission.models.ApprovalDeletionCallbackResponse;
import com.azure.resourcemanager.mission.models.EnclaveEndpointDestinationRule;
import com.azure.resourcemanager.mission.models.EnclaveEndpointPatchResource;
import com.azure.resourcemanager.mission.models.EnclaveEndpointResource;
import com.azure.resourcemanager.mission.models.ProvisioningState;
import com.azure.resourcemanager.mission.models.UpdateEnclaveEndpointPatchProperties;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class EnclaveEndpointResourceImpl
    implements EnclaveEndpointResource, EnclaveEndpointResource.Definition, EnclaveEndpointResource.Update {
    private EnclaveEndpointResourceInner innerObject;

    private final com.azure.resourcemanager.mission.MissionManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public List<EnclaveEndpointDestinationRule> ruleCollection() {
        List<EnclaveEndpointDestinationRule> inner = this.innerModel().ruleCollection();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> resourceCollection() {
        List<String> inner = this.innerModel().resourceCollection();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public EnclaveEndpointResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mission.MissionManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String virtualEnclaveName;

    private String enclaveEndpointName;

    private EnclaveEndpointPatchResource updateProperties;

    public EnclaveEndpointResourceImpl withExistingVirtualEnclave(String resourceGroupName, String virtualEnclaveName) {
        this.resourceGroupName = resourceGroupName;
        this.virtualEnclaveName = virtualEnclaveName;
        return this;
    }

    public EnclaveEndpointResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveEndpoints()
            .createOrUpdate(resourceGroupName, virtualEnclaveName, enclaveEndpointName, this.innerModel(),
                Context.NONE);
        return this;
    }

    public EnclaveEndpointResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveEndpoints()
            .createOrUpdate(resourceGroupName, virtualEnclaveName, enclaveEndpointName, this.innerModel(), context);
        return this;
    }

    EnclaveEndpointResourceImpl(String name, com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerObject = new EnclaveEndpointResourceInner();
        this.serviceManager = serviceManager;
        this.enclaveEndpointName = name;
    }

    public EnclaveEndpointResourceImpl update() {
        this.updateProperties = new EnclaveEndpointPatchResource();
        return this;
    }

    public EnclaveEndpointResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveEndpoints()
            .update(resourceGroupName, virtualEnclaveName, enclaveEndpointName, updateProperties, Context.NONE);
        return this;
    }

    public EnclaveEndpointResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveEndpoints()
            .update(resourceGroupName, virtualEnclaveName, enclaveEndpointName, updateProperties, context);
        return this;
    }

    EnclaveEndpointResourceImpl(EnclaveEndpointResourceInner innerObject,
        com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "virtualEnclaves");
        this.enclaveEndpointName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "enclaveEndpoints");
    }

    public EnclaveEndpointResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveEndpoints()
            .getWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, Context.NONE)
            .getValue();
        return this;
    }

    public EnclaveEndpointResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveEndpoints()
            .getWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context)
            .getValue();
        return this;
    }

    public ApprovalCallbackResponse approvalCallback(ApprovalCallbackRequest body) {
        return serviceManager.enclaveEndpoints()
            .approvalCallback(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body);
    }

    public ApprovalCallbackResponse approvalCallback(ApprovalCallbackRequest body, Context context) {
        return serviceManager.enclaveEndpoints()
            .approvalCallback(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, context);
    }

    public ApprovalDeletionCallbackResponse approvalDeletionCallback(ApprovalDeletionCallbackRequest body) {
        return serviceManager.enclaveEndpoints()
            .approvalDeletionCallback(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body);
    }

    public ApprovalDeletionCallbackResponse approvalDeletionCallback(ApprovalDeletionCallbackRequest body,
        Context context) {
        return serviceManager.enclaveEndpoints()
            .approvalDeletionCallback(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, context);
    }

    public EnclaveEndpointResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public EnclaveEndpointResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public EnclaveEndpointResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public EnclaveEndpointResourceImpl withRuleCollection(List<EnclaveEndpointDestinationRule> ruleCollection) {
        this.innerModel().withRuleCollection(ruleCollection);
        return this;
    }

    public EnclaveEndpointResourceImpl withResourceCollection(List<String> resourceCollection) {
        this.innerModel().withResourceCollection(resourceCollection);
        return this;
    }

    public EnclaveEndpointResourceImpl withProperties(UpdateEnclaveEndpointPatchProperties properties) {
        this.updateProperties.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
