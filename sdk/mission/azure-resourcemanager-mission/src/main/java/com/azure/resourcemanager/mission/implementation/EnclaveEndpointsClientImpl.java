// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.mission.fluent.EnclaveEndpointsClient;
import com.azure.resourcemanager.mission.fluent.models.ApprovalCallbackResponseInner;
import com.azure.resourcemanager.mission.fluent.models.ApprovalDeletionCallbackResponseInner;
import com.azure.resourcemanager.mission.fluent.models.EnclaveEndpointResourceInner;
import com.azure.resourcemanager.mission.models.ApprovalCallbackRequest;
import com.azure.resourcemanager.mission.models.ApprovalDeletionCallbackRequest;
import com.azure.resourcemanager.mission.models.EnclaveEndpointPatchResource;
import com.azure.resourcemanager.mission.models.EnclaveEndpointResourceListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in EnclaveEndpointsClient.
 */
public final class EnclaveEndpointsClientImpl implements EnclaveEndpointsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EnclaveEndpointsService service;

    /**
     * The service client containing this operation class.
     */
    private final MissionClientImpl client;

    /**
     * Initializes an instance of EnclaveEndpointsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    EnclaveEndpointsClientImpl(MissionClientImpl client) {
        this.service
            = RestProxy.create(EnclaveEndpointsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MissionClientEnclaveEndpoints to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MissionClientEnclave")
    public interface EnclaveEndpointsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveEndpointResourceListResult>> listBySubscription(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveEndpointResourceListResult>> listByEnclaveResource(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveEndpointResourceInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @BodyParam("application/json") EnclaveEndpointResourceInner resource, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @BodyParam("application/json") EnclaveEndpointPatchResource properties,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}/approvalCallback")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> approvalCallback(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @BodyParam("application/json") ApprovalCallbackRequest body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}/approvalDeletionCallback")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> approvalDeletionCallback(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @BodyParam("application/json") ApprovalDeletionCallbackRequest body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveEndpointResourceListResult>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveEndpointResourceListResult>> listByEnclaveResourceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>>
        listBySubscriptionSinglePageAsync(String virtualEnclaveName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySubscription(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), virtualEnclaveName, accept, context))
            .<PagedResponse<EnclaveEndpointResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>>
        listBySubscriptionSinglePageAsync(String virtualEnclaveName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscription(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                virtualEnclaveName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EnclaveEndpointResourceInner> listBySubscriptionAsync(String virtualEnclaveName) {
        return new PagedFlux<>(() -> listBySubscriptionSinglePageAsync(virtualEnclaveName),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EnclaveEndpointResourceInner> listBySubscriptionAsync(String virtualEnclaveName,
        Context context) {
        return new PagedFlux<>(() -> listBySubscriptionSinglePageAsync(virtualEnclaveName, context),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveEndpointResourceInner> listBySubscription(String virtualEnclaveName) {
        return new PagedIterable<>(listBySubscriptionAsync(virtualEnclaveName));
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveEndpointResourceInner> listBySubscription(String virtualEnclaveName, Context context) {
        return new PagedIterable<>(listBySubscriptionAsync(virtualEnclaveName, context));
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>>
        listByEnclaveResourceSinglePageAsync(String resourceGroupName, String virtualEnclaveName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByEnclaveResource(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, accept, context))
            .<PagedResponse<EnclaveEndpointResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>>
        listByEnclaveResourceSinglePageAsync(String resourceGroupName, String virtualEnclaveName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByEnclaveResource(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EnclaveEndpointResourceInner> listByEnclaveResourceAsync(String resourceGroupName,
        String virtualEnclaveName) {
        return new PagedFlux<>(() -> listByEnclaveResourceSinglePageAsync(resourceGroupName, virtualEnclaveName),
            nextLink -> listByEnclaveResourceNextSinglePageAsync(nextLink));
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EnclaveEndpointResourceInner> listByEnclaveResourceAsync(String resourceGroupName,
        String virtualEnclaveName, Context context) {
        return new PagedFlux<>(
            () -> listByEnclaveResourceSinglePageAsync(resourceGroupName, virtualEnclaveName, context),
            nextLink -> listByEnclaveResourceNextSinglePageAsync(nextLink, context));
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveEndpointResourceInner> listByEnclaveResource(String resourceGroupName,
        String virtualEnclaveName) {
        return new PagedIterable<>(listByEnclaveResourceAsync(resourceGroupName, virtualEnclaveName));
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveEndpointResourceInner> listByEnclaveResource(String resourceGroupName,
        String virtualEnclaveName, Context context) {
        return new PagedIterable<>(listByEnclaveResourceAsync(resourceGroupName, virtualEnclaveName, context));
    }

    /**
     * Get a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveEndpointResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EnclaveEndpointResourceInner>> getWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveEndpointResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EnclaveEndpointResourceInner>> getWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, virtualEnclaveName, enclaveEndpointName, accept, context);
    }

    /**
     * Get a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveEndpointResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnclaveEndpointResourceInner> getAsync(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName) {
        return getWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveEndpointResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EnclaveEndpointResourceInner> getWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, Context context) {
        return getWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context).block();
    }

    /**
     * Get a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveEndpointResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveEndpointResourceInner get(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName) {
        return getWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, Context.NONE).getValue();
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, EnclaveEndpointResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, EnclaveEndpointResourceInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource,
            accept, context);
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource);
        return this.client.<EnclaveEndpointResourceInner, EnclaveEndpointResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), EnclaveEndpointResourceInner.class, EnclaveEndpointResourceInner.class,
            this.client.getContext());
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointResourceInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, virtualEnclaveName,
            enclaveEndpointName, resource, context);
        return this.client.<EnclaveEndpointResourceInner, EnclaveEndpointResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), EnclaveEndpointResourceInner.class, EnclaveEndpointResourceInner.class,
            context);
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointResourceInner resource) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource)
            .getSyncPoller();
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointResourceInner resource, Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource, context)
            .getSyncPoller();
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnclaveEndpointResourceInner> createOrUpdateAsync(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointResourceInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnclaveEndpointResourceInner> createOrUpdateAsync(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointResourceInner resource, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveEndpointResourceInner createOrUpdate(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointResourceInner resource) {
        return createOrUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource).block();
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveEndpointResourceInner createOrUpdate(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointResourceInner resource, Context context) {
        return createOrUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource, context)
            .block();
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, EnclaveEndpointPatchResource properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, EnclaveEndpointPatchResource properties,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties, accept, context);
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginUpdateAsync(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointPatchResource properties) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties);
        return this.client.<EnclaveEndpointResourceInner, EnclaveEndpointResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), EnclaveEndpointResourceInner.class, EnclaveEndpointResourceInner.class,
            this.client.getContext());
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginUpdateAsync(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointPatchResource properties, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties, context);
        return this.client.<EnclaveEndpointResourceInner, EnclaveEndpointResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), EnclaveEndpointResourceInner.class, EnclaveEndpointResourceInner.class,
            context);
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginUpdate(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointPatchResource properties) {
        return this.beginUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties)
            .getSyncPoller();
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginUpdate(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointPatchResource properties, Context context) {
        return this.beginUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties, context)
            .getSyncPoller();
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnclaveEndpointResourceInner> updateAsync(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointPatchResource properties) {
        return beginUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnclaveEndpointResourceInner> updateAsync(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointPatchResource properties, Context context) {
        return beginUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveEndpointResourceInner update(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointPatchResource properties) {
        return updateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties).block();
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveEndpointResourceInner update(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointPatchResource properties, Context context) {
        return updateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties, context).block();
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, virtualEnclaveName, enclaveEndpointName, accept, context);
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName) {
        return this.beginDeleteAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName).getSyncPoller();
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context)
            .getSyncPoller();
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName) {
        return beginDeleteAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName) {
        deleteAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName).block();
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        Context context) {
        deleteAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context).block();
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> approvalCallbackWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalCallbackRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.approvalCallback(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, body,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> approvalCallbackWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalCallbackRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.approvalCallback(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, accept,
            context);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalCallbackResponseInner>, ApprovalCallbackResponseInner>
        beginApprovalCallbackAsync(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
            ApprovalCallbackRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = approvalCallbackWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body);
        return this.client.<ApprovalCallbackResponseInner, ApprovalCallbackResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalCallbackResponseInner.class, ApprovalCallbackResponseInner.class,
            this.client.getContext());
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalCallbackResponseInner>, ApprovalCallbackResponseInner>
        beginApprovalCallbackAsync(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
            ApprovalCallbackRequest body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = approvalCallbackWithResponseAsync(resourceGroupName, virtualEnclaveName,
            enclaveEndpointName, body, context);
        return this.client.<ApprovalCallbackResponseInner, ApprovalCallbackResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalCallbackResponseInner.class, ApprovalCallbackResponseInner.class,
            context);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalCallbackResponseInner>, ApprovalCallbackResponseInner> beginApprovalCallback(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName, ApprovalCallbackRequest body) {
        return this.beginApprovalCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body)
            .getSyncPoller();
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalCallbackResponseInner>, ApprovalCallbackResponseInner> beginApprovalCallback(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName, ApprovalCallbackRequest body,
        Context context) {
        return this
            .beginApprovalCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, context)
            .getSyncPoller();
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalCallbackResponseInner> approvalCallbackAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalCallbackRequest body) {
        return beginApprovalCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalCallbackResponseInner> approvalCallbackAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalCallbackRequest body, Context context) {
        return beginApprovalCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalCallbackResponseInner approvalCallback(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalCallbackRequest body) {
        return approvalCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body).block();
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalCallbackResponseInner approvalCallback(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalCallbackRequest body, Context context) {
        return approvalCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, context).block();
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> approvalDeletionCallbackWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalDeletionCallbackRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.approvalDeletionCallback(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName,
                enclaveEndpointName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> approvalDeletionCallbackWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalDeletionCallbackRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualEnclaveName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualEnclaveName is required and cannot be null."));
        }
        if (enclaveEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enclaveEndpointName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.approvalDeletionCallback(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, accept,
            context);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of response body after handling of approvalDeletionCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalDeletionCallbackResponseInner>, ApprovalDeletionCallbackResponseInner>
        beginApprovalDeletionCallbackAsync(String resourceGroupName, String virtualEnclaveName,
            String enclaveEndpointName, ApprovalDeletionCallbackRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono = approvalDeletionCallbackWithResponseAsync(resourceGroupName,
            virtualEnclaveName, enclaveEndpointName, body);
        return this.client.<ApprovalDeletionCallbackResponseInner, ApprovalDeletionCallbackResponseInner>getLroResult(
            mono, this.client.getHttpPipeline(), ApprovalDeletionCallbackResponseInner.class,
            ApprovalDeletionCallbackResponseInner.class, this.client.getContext());
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of response body after handling of approvalDeletionCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalDeletionCallbackResponseInner>, ApprovalDeletionCallbackResponseInner>
        beginApprovalDeletionCallbackAsync(String resourceGroupName, String virtualEnclaveName,
            String enclaveEndpointName, ApprovalDeletionCallbackRequest body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = approvalDeletionCallbackWithResponseAsync(resourceGroupName,
            virtualEnclaveName, enclaveEndpointName, body, context);
        return this.client.<ApprovalDeletionCallbackResponseInner, ApprovalDeletionCallbackResponseInner>getLroResult(
            mono, this.client.getHttpPipeline(), ApprovalDeletionCallbackResponseInner.class,
            ApprovalDeletionCallbackResponseInner.class, context);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of response body after handling of approvalDeletionCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalDeletionCallbackResponseInner>, ApprovalDeletionCallbackResponseInner>
        beginApprovalDeletionCallback(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
            ApprovalDeletionCallbackRequest body) {
        return this.beginApprovalDeletionCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body)
            .getSyncPoller();
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of response body after handling of approvalDeletionCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalDeletionCallbackResponseInner>, ApprovalDeletionCallbackResponseInner>
        beginApprovalDeletionCallback(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
            ApprovalDeletionCallbackRequest body, Context context) {
        return this
            .beginApprovalDeletionCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body,
                context)
            .getSyncPoller();
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalDeletionCallbackResponseInner> approvalDeletionCallbackAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalDeletionCallbackRequest body) {
        return beginApprovalDeletionCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalDeletionCallbackResponseInner> approvalDeletionCallbackAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalDeletionCallbackRequest body, Context context) {
        return beginApprovalDeletionCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalDeletionCallbackResponseInner approvalDeletionCallback(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalDeletionCallbackRequest body) {
        return approvalDeletionCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body).block();
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalDeletionCallbackResponseInner approvalDeletionCallback(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalDeletionCallbackRequest body, Context context) {
        return approvalDeletionCallbackAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, context)
            .block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EnclaveEndpointResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>> listBySubscriptionNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>>
        listByEnclaveResourceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByEnclaveResourceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EnclaveEndpointResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>> listByEnclaveResourceNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByEnclaveResourceNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
