// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Maintenance Mode.
 */
@Fluent
public final class MaintenanceModeConfigurationUpdate implements JsonSerializable<MaintenanceModeConfigurationUpdate> {
    /*
     * Current mode of Maintenance Mode Configuration
     */
    private MaintenanceModeConfigurationUpdateMode mode;

    /*
     * The user, group or service principal object affected by Maintenance Mode
     */
    private List<Principal> principals;

    /*
     * Justification for entering or exiting Maintenance Mode
     */
    private MaintenanceModeConfigurationUpdateJustification justification;

    /**
     * Creates an instance of MaintenanceModeConfigurationUpdate class.
     */
    public MaintenanceModeConfigurationUpdate() {
    }

    /**
     * Get the mode property: Current mode of Maintenance Mode Configuration.
     * 
     * @return the mode value.
     */
    public MaintenanceModeConfigurationUpdateMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Current mode of Maintenance Mode Configuration.
     * 
     * @param mode the mode value to set.
     * @return the MaintenanceModeConfigurationUpdate object itself.
     */
    public MaintenanceModeConfigurationUpdate withMode(MaintenanceModeConfigurationUpdateMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the principals property: The user, group or service principal object affected by Maintenance Mode.
     * 
     * @return the principals value.
     */
    public List<Principal> principals() {
        return this.principals;
    }

    /**
     * Set the principals property: The user, group or service principal object affected by Maintenance Mode.
     * 
     * @param principals the principals value to set.
     * @return the MaintenanceModeConfigurationUpdate object itself.
     */
    public MaintenanceModeConfigurationUpdate withPrincipals(List<Principal> principals) {
        this.principals = principals;
        return this;
    }

    /**
     * Get the justification property: Justification for entering or exiting Maintenance Mode.
     * 
     * @return the justification value.
     */
    public MaintenanceModeConfigurationUpdateJustification justification() {
        return this.justification;
    }

    /**
     * Set the justification property: Justification for entering or exiting Maintenance Mode.
     * 
     * @param justification the justification value to set.
     * @return the MaintenanceModeConfigurationUpdate object itself.
     */
    public MaintenanceModeConfigurationUpdate
        withJustification(MaintenanceModeConfigurationUpdateJustification justification) {
        this.justification = justification;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (principals() != null) {
            principals().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeArrayField("principals", this.principals, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("justification", this.justification == null ? null : this.justification.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaintenanceModeConfigurationUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaintenanceModeConfigurationUpdate if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MaintenanceModeConfigurationUpdate.
     */
    public static MaintenanceModeConfigurationUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaintenanceModeConfigurationUpdate deserializedMaintenanceModeConfigurationUpdate
                = new MaintenanceModeConfigurationUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedMaintenanceModeConfigurationUpdate.mode
                        = MaintenanceModeConfigurationUpdateMode.fromString(reader.getString());
                } else if ("principals".equals(fieldName)) {
                    List<Principal> principals = reader.readArray(reader1 -> Principal.fromJson(reader1));
                    deserializedMaintenanceModeConfigurationUpdate.principals = principals;
                } else if ("justification".equals(fieldName)) {
                    deserializedMaintenanceModeConfigurationUpdate.justification
                        = MaintenanceModeConfigurationUpdateJustification.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaintenanceModeConfigurationUpdate;
        });
    }
}
