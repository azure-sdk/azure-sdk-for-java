// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Enclave Endpoint Rule Properties.
 */
@Fluent
public final class EnclaveEndpointDestinationRule implements JsonSerializable<EnclaveEndpointDestinationRule> {
    /*
     * Endpoint Rule Name.
     */
    private String name;

    /*
     * Destination address. Can include multiple CIDR/IP Addresses or fqdn tags or fqdns (for community endpoint)
     * separated by commas.
     */
    private String destination;

    /*
     * Port. Can include multiple ports separated by commas or a range indicated by a hyphen.
     */
    private String port;

    /*
     * Protocols. Options specified by Endpoint Protocol Enum.
     */
    private List<EnclaveEndpointProtocol> protocols;

    /**
     * Creates an instance of EnclaveEndpointDestinationRule class.
     */
    public EnclaveEndpointDestinationRule() {
    }

    /**
     * Get the name property: Endpoint Rule Name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Endpoint Rule Name.
     * 
     * @param name the name value to set.
     * @return the EnclaveEndpointDestinationRule object itself.
     */
    public EnclaveEndpointDestinationRule withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the destination property: Destination address. Can include multiple CIDR/IP Addresses or fqdn tags or fqdns
     * (for community endpoint) separated by commas.
     * 
     * @return the destination value.
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Set the destination property: Destination address. Can include multiple CIDR/IP Addresses or fqdn tags or fqdns
     * (for community endpoint) separated by commas.
     * 
     * @param destination the destination value to set.
     * @return the EnclaveEndpointDestinationRule object itself.
     */
    public EnclaveEndpointDestinationRule withDestination(String destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the port property: Port. Can include multiple ports separated by commas or a range indicated by a hyphen.
     * 
     * @return the port value.
     */
    public String port() {
        return this.port;
    }

    /**
     * Set the port property: Port. Can include multiple ports separated by commas or a range indicated by a hyphen.
     * 
     * @param port the port value to set.
     * @return the EnclaveEndpointDestinationRule object itself.
     */
    public EnclaveEndpointDestinationRule withPort(String port) {
        this.port = port;
        return this;
    }

    /**
     * Get the protocols property: Protocols. Options specified by Endpoint Protocol Enum.
     * 
     * @return the protocols value.
     */
    public List<EnclaveEndpointProtocol> protocols() {
        return this.protocols;
    }

    /**
     * Set the protocols property: Protocols. Options specified by Endpoint Protocol Enum.
     * 
     * @param protocols the protocols value to set.
     * @return the EnclaveEndpointDestinationRule object itself.
     */
    public EnclaveEndpointDestinationRule withProtocols(List<EnclaveEndpointProtocol> protocols) {
        this.protocols = protocols;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("destination", this.destination);
        jsonWriter.writeStringField("port", this.port);
        jsonWriter.writeArrayField("protocols", this.protocols,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnclaveEndpointDestinationRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnclaveEndpointDestinationRule if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnclaveEndpointDestinationRule.
     */
    public static EnclaveEndpointDestinationRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnclaveEndpointDestinationRule deserializedEnclaveEndpointDestinationRule
                = new EnclaveEndpointDestinationRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedEnclaveEndpointDestinationRule.name = reader.getString();
                } else if ("destination".equals(fieldName)) {
                    deserializedEnclaveEndpointDestinationRule.destination = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedEnclaveEndpointDestinationRule.port = reader.getString();
                } else if ("protocols".equals(fieldName)) {
                    List<EnclaveEndpointProtocol> protocols
                        = reader.readArray(reader1 -> EnclaveEndpointProtocol.fromString(reader1.getString()));
                    deserializedEnclaveEndpointDestinationRule.protocols = protocols;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnclaveEndpointDestinationRule;
        });
    }
}
