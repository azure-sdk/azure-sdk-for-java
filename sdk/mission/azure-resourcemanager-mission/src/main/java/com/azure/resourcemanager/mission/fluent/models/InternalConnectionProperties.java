// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mission.models.InternalConnectionState;
import com.azure.resourcemanager.mission.models.InternalConnectionType;
import com.azure.resourcemanager.mission.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Describes the properties of an Internal Connection.
 */
@Fluent
public final class InternalConnectionProperties implements JsonSerializable<InternalConnectionProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * Specifies the type of internal connection.
     * Possible values are:
     * PrivateLink
     * NetworkSecurityGroup
     */
    private InternalConnectionType connectionType;

    /*
     * The state of the internalConnection.
     */
    private InternalConnectionState state;

    /*
     * Community Resource Id.
     */
    private String communityResourceId;

    /*
     * The destination enclave's resource ID.
     */
    private String destinationEnclaveId;

    /*
     * The destination endpoint's resource ID.
     */
    private String destinationEndpointId;

    /*
     * The source enclave's resource ID.
     */
    private String sourceEnclaveId;

    /*
     * The source CIDR IP addresses.
     */
    private List<String> sourceCidrs;

    /*
     * List of resource ids modified by internalConnections.
     */
    private List<String> resourceCollection;

    /**
     * Creates an instance of InternalConnectionProperties class.
     */
    public InternalConnectionProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the connectionType property: Specifies the type of internal connection.
     * Possible values are:
     * PrivateLink
     * NetworkSecurityGroup.
     * 
     * @return the connectionType value.
     */
    public InternalConnectionType connectionType() {
        return this.connectionType;
    }

    /**
     * Set the connectionType property: Specifies the type of internal connection.
     * Possible values are:
     * PrivateLink
     * NetworkSecurityGroup.
     * 
     * @param connectionType the connectionType value to set.
     * @return the InternalConnectionProperties object itself.
     */
    public InternalConnectionProperties withConnectionType(InternalConnectionType connectionType) {
        this.connectionType = connectionType;
        return this;
    }

    /**
     * Get the state property: The state of the internalConnection.
     * 
     * @return the state value.
     */
    public InternalConnectionState state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the internalConnection.
     * 
     * @param state the state value to set.
     * @return the InternalConnectionProperties object itself.
     */
    public InternalConnectionProperties withState(InternalConnectionState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the communityResourceId property: Community Resource Id.
     * 
     * @return the communityResourceId value.
     */
    public String communityResourceId() {
        return this.communityResourceId;
    }

    /**
     * Set the communityResourceId property: Community Resource Id.
     * 
     * @param communityResourceId the communityResourceId value to set.
     * @return the InternalConnectionProperties object itself.
     */
    public InternalConnectionProperties withCommunityResourceId(String communityResourceId) {
        this.communityResourceId = communityResourceId;
        return this;
    }

    /**
     * Get the destinationEnclaveId property: The destination enclave's resource ID.
     * 
     * @return the destinationEnclaveId value.
     */
    public String destinationEnclaveId() {
        return this.destinationEnclaveId;
    }

    /**
     * Set the destinationEnclaveId property: The destination enclave's resource ID.
     * 
     * @param destinationEnclaveId the destinationEnclaveId value to set.
     * @return the InternalConnectionProperties object itself.
     */
    public InternalConnectionProperties withDestinationEnclaveId(String destinationEnclaveId) {
        this.destinationEnclaveId = destinationEnclaveId;
        return this;
    }

    /**
     * Get the destinationEndpointId property: The destination endpoint's resource ID.
     * 
     * @return the destinationEndpointId value.
     */
    public String destinationEndpointId() {
        return this.destinationEndpointId;
    }

    /**
     * Set the destinationEndpointId property: The destination endpoint's resource ID.
     * 
     * @param destinationEndpointId the destinationEndpointId value to set.
     * @return the InternalConnectionProperties object itself.
     */
    public InternalConnectionProperties withDestinationEndpointId(String destinationEndpointId) {
        this.destinationEndpointId = destinationEndpointId;
        return this;
    }

    /**
     * Get the sourceEnclaveId property: The source enclave's resource ID.
     * 
     * @return the sourceEnclaveId value.
     */
    public String sourceEnclaveId() {
        return this.sourceEnclaveId;
    }

    /**
     * Set the sourceEnclaveId property: The source enclave's resource ID.
     * 
     * @param sourceEnclaveId the sourceEnclaveId value to set.
     * @return the InternalConnectionProperties object itself.
     */
    public InternalConnectionProperties withSourceEnclaveId(String sourceEnclaveId) {
        this.sourceEnclaveId = sourceEnclaveId;
        return this;
    }

    /**
     * Get the sourceCidrs property: The source CIDR IP addresses.
     * 
     * @return the sourceCidrs value.
     */
    public List<String> sourceCidrs() {
        return this.sourceCidrs;
    }

    /**
     * Set the sourceCidrs property: The source CIDR IP addresses.
     * 
     * @param sourceCidrs the sourceCidrs value to set.
     * @return the InternalConnectionProperties object itself.
     */
    public InternalConnectionProperties withSourceCidrs(List<String> sourceCidrs) {
        this.sourceCidrs = sourceCidrs;
        return this;
    }

    /**
     * Get the resourceCollection property: List of resource ids modified by internalConnections.
     * 
     * @return the resourceCollection value.
     */
    public List<String> resourceCollection() {
        return this.resourceCollection;
    }

    /**
     * Set the resourceCollection property: List of resource ids modified by internalConnections.
     * 
     * @param resourceCollection the resourceCollection value to set.
     * @return the InternalConnectionProperties object itself.
     */
    public InternalConnectionProperties withResourceCollection(List<String> resourceCollection) {
        this.resourceCollection = resourceCollection;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectionType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectionType in model InternalConnectionProperties"));
        }
        if (communityResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property communityResourceId in model InternalConnectionProperties"));
        }
        if (destinationEnclaveId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property destinationEnclaveId in model InternalConnectionProperties"));
        }
        if (destinationEndpointId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property destinationEndpointId in model InternalConnectionProperties"));
        }
        if (sourceEnclaveId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceEnclaveId in model InternalConnectionProperties"));
        }
        if (sourceCidrs() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceCidrs in model InternalConnectionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InternalConnectionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connectionType",
            this.connectionType == null ? null : this.connectionType.toString());
        jsonWriter.writeStringField("communityResourceId", this.communityResourceId);
        jsonWriter.writeStringField("destinationEnclaveId", this.destinationEnclaveId);
        jsonWriter.writeStringField("destinationEndpointId", this.destinationEndpointId);
        jsonWriter.writeStringField("sourceEnclaveId", this.sourceEnclaveId);
        jsonWriter.writeArrayField("sourceCidrs", this.sourceCidrs, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeArrayField("resourceCollection", this.resourceCollection,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InternalConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InternalConnectionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InternalConnectionProperties.
     */
    public static InternalConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InternalConnectionProperties deserializedInternalConnectionProperties = new InternalConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionType".equals(fieldName)) {
                    deserializedInternalConnectionProperties.connectionType
                        = InternalConnectionType.fromString(reader.getString());
                } else if ("communityResourceId".equals(fieldName)) {
                    deserializedInternalConnectionProperties.communityResourceId = reader.getString();
                } else if ("destinationEnclaveId".equals(fieldName)) {
                    deserializedInternalConnectionProperties.destinationEnclaveId = reader.getString();
                } else if ("destinationEndpointId".equals(fieldName)) {
                    deserializedInternalConnectionProperties.destinationEndpointId = reader.getString();
                } else if ("sourceEnclaveId".equals(fieldName)) {
                    deserializedInternalConnectionProperties.sourceEnclaveId = reader.getString();
                } else if ("sourceCidrs".equals(fieldName)) {
                    List<String> sourceCidrs = reader.readArray(reader1 -> reader1.getString());
                    deserializedInternalConnectionProperties.sourceCidrs = sourceCidrs;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedInternalConnectionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedInternalConnectionProperties.state
                        = InternalConnectionState.fromString(reader.getString());
                } else if ("resourceCollection".equals(fieldName)) {
                    List<String> resourceCollection = reader.readArray(reader1 -> reader1.getString());
                    deserializedInternalConnectionProperties.resourceCollection = resourceCollection;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInternalConnectionProperties;
        });
    }
}
