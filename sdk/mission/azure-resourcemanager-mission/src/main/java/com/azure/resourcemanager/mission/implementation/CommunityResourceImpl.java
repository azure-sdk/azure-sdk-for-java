// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mission.fluent.models.CommunityResourceInner;
import com.azure.resourcemanager.mission.models.ApprovalSettings;
import com.azure.resourcemanager.mission.models.AzureResourceManagerCommonTypesManagedServiceIdentityUpdate;
import com.azure.resourcemanager.mission.models.CheckAddressSpaceAvailabilityRequest;
import com.azure.resourcemanager.mission.models.CheckAddressSpaceAvailabilityResponse;
import com.azure.resourcemanager.mission.models.CommunityResource;
import com.azure.resourcemanager.mission.models.CommunityResourceUpdate;
import com.azure.resourcemanager.mission.models.GovernedServiceItem;
import com.azure.resourcemanager.mission.models.MaintenanceModeConfiguration;
import com.azure.resourcemanager.mission.models.MaintenanceModeConfigurationUpdate;
import com.azure.resourcemanager.mission.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.mission.models.ManagedServiceIdentity;
import com.azure.resourcemanager.mission.models.ProvisioningState;
import com.azure.resourcemanager.mission.models.RoleAssignmentItem;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class CommunityResourceImpl
    implements CommunityResource, CommunityResource.Definition, CommunityResource.Update {
    private CommunityResourceInner innerObject;

    private final com.azure.resourcemanager.mission.MissionManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String addressSpace() {
        return this.innerModel().addressSpace();
    }

    public List<String> dnsServers() {
        List<String> inner = this.innerModel().dnsServers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public List<String> resourceCollection() {
        List<String> inner = this.innerModel().resourceCollection();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.innerModel().managedResourceGroupConfiguration();
    }

    public List<GovernedServiceItem> governedServiceList() {
        List<GovernedServiceItem> inner = this.innerModel().governedServiceList();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<RoleAssignmentItem> communityRoleAssignments() {
        List<RoleAssignmentItem> inner = this.innerModel().communityRoleAssignments();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ApprovalSettings approvalSettings() {
        return this.innerModel().approvalSettings();
    }

    public MaintenanceModeConfiguration maintenanceModeConfiguration() {
        return this.innerModel().maintenanceModeConfiguration();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public CommunityResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mission.MissionManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String communityName;

    private CommunityResourceUpdate updateProperties;

    public CommunityResourceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public CommunityResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getCommunities()
            .createOrUpdate(resourceGroupName, communityName, this.innerModel(), Context.NONE);
        return this;
    }

    public CommunityResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getCommunities()
            .createOrUpdate(resourceGroupName, communityName, this.innerModel(), context);
        return this;
    }

    CommunityResourceImpl(String name, com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerObject = new CommunityResourceInner();
        this.serviceManager = serviceManager;
        this.communityName = name;
    }

    public CommunityResourceImpl update() {
        this.updateProperties = new CommunityResourceUpdate();
        return this;
    }

    public CommunityResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getCommunities()
            .update(resourceGroupName, communityName, updateProperties, Context.NONE);
        return this;
    }

    public CommunityResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getCommunities()
            .update(resourceGroupName, communityName, updateProperties, context);
        return this;
    }

    CommunityResourceImpl(CommunityResourceInner innerObject,
        com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.communityName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "communities");
    }

    public CommunityResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getCommunities()
            .getByResourceGroupWithResponse(resourceGroupName, communityName, Context.NONE)
            .getValue();
        return this;
    }

    public CommunityResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getCommunities()
            .getByResourceGroupWithResponse(resourceGroupName, communityName, context)
            .getValue();
        return this;
    }

    public Response<CheckAddressSpaceAvailabilityResponse> checkAddressSpaceAvailabilityWithResponse(
        CheckAddressSpaceAvailabilityRequest checkAddressSpaceAvailabilityRequest, Context context) {
        return serviceManager.communities()
            .checkAddressSpaceAvailabilityWithResponse(resourceGroupName, communityName,
                checkAddressSpaceAvailabilityRequest, context);
    }

    public CheckAddressSpaceAvailabilityResponse
        checkAddressSpaceAvailability(CheckAddressSpaceAvailabilityRequest checkAddressSpaceAvailabilityRequest) {
        return serviceManager.communities()
            .checkAddressSpaceAvailability(resourceGroupName, communityName, checkAddressSpaceAvailabilityRequest);
    }

    public CommunityResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public CommunityResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public CommunityResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public CommunityResourceImpl withIdentity(ManagedServiceIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public CommunityResourceImpl withAddressSpace(String addressSpace) {
        if (isInCreateMode()) {
            this.innerModel().withAddressSpace(addressSpace);
            return this;
        } else {
            this.updateProperties.withAddressSpace(addressSpace);
            return this;
        }
    }

    public CommunityResourceImpl withDnsServers(List<String> dnsServers) {
        if (isInCreateMode()) {
            this.innerModel().withDnsServers(dnsServers);
            return this;
        } else {
            this.updateProperties.withDnsServers(dnsServers);
            return this;
        }
    }

    public CommunityResourceImpl withResourceCollection(List<String> resourceCollection) {
        if (isInCreateMode()) {
            this.innerModel().withResourceCollection(resourceCollection);
            return this;
        } else {
            this.updateProperties.withResourceCollection(resourceCollection);
            return this;
        }
    }

    public CommunityResourceImpl
        withManagedResourceGroupConfiguration(ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        if (isInCreateMode()) {
            this.innerModel().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
            return this;
        } else {
            this.updateProperties.withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
            return this;
        }
    }

    public CommunityResourceImpl withGovernedServiceList(List<GovernedServiceItem> governedServiceList) {
        if (isInCreateMode()) {
            this.innerModel().withGovernedServiceList(governedServiceList);
            return this;
        } else {
            this.updateProperties.withGovernedServiceList(governedServiceList);
            return this;
        }
    }

    public CommunityResourceImpl withCommunityRoleAssignments(List<RoleAssignmentItem> communityRoleAssignments) {
        if (isInCreateMode()) {
            this.innerModel().withCommunityRoleAssignments(communityRoleAssignments);
            return this;
        } else {
            this.updateProperties.withCommunityRoleAssignments(communityRoleAssignments);
            return this;
        }
    }

    public CommunityResourceImpl withApprovalSettings(ApprovalSettings approvalSettings) {
        if (isInCreateMode()) {
            this.innerModel().withApprovalSettings(approvalSettings);
            return this;
        } else {
            this.updateProperties.withApprovalSettings(approvalSettings);
            return this;
        }
    }

    public CommunityResourceImpl
        withMaintenanceModeConfiguration(MaintenanceModeConfiguration maintenanceModeConfiguration) {
        this.innerModel().withMaintenanceModeConfiguration(maintenanceModeConfiguration);
        return this;
    }

    public CommunityResourceImpl withIdentity(AzureResourceManagerCommonTypesManagedServiceIdentityUpdate identity) {
        this.updateProperties.withIdentity(identity);
        return this;
    }

    public CommunityResourceImpl
        withMaintenanceModeConfiguration(MaintenanceModeConfigurationUpdate maintenanceModeConfiguration) {
        this.updateProperties.withMaintenanceModeConfiguration(maintenanceModeConfiguration);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
