// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mission.models.Approvers;
import com.azure.resourcemanager.mission.models.ProvisioningState;
import com.azure.resourcemanager.mission.models.RequestMetadata;
import java.io.IOException;
import java.util.List;

/**
 * Approvals Resource Properties.
 */
@Fluent
public final class ApprovalProperties implements JsonSerializable<ApprovalProperties> {
    /*
     * Provisioning State.
     */
    private ProvisioningState provisioningState;

    /*
     * Parameter for optimizing query results
     */
    private String parent1;

    /*
     * Parameter for optimizing query results
     */
    private String parent2;

    /*
     * Request metadata for the approval request.
     */
    private RequestMetadata requestMetadata;

    /*
     * List of approvers for the approval request
     */
    private List<Approvers> approvers;

    /*
     * List of mandatory approvers for the approval request
     */
    private List<Approvers> mandatoryApprovers;

    /*
     * Minimum number of approvers required for the approval request
     */
    private Long minimumApproversRequired;

    /**
     * Creates an instance of ApprovalProperties class.
     */
    public ApprovalProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the parent1 property: Parameter for optimizing query results.
     * 
     * @return the parent1 value.
     */
    public String parent1() {
        return this.parent1;
    }

    /**
     * Set the parent1 property: Parameter for optimizing query results.
     * 
     * @param parent1 the parent1 value to set.
     * @return the ApprovalProperties object itself.
     */
    public ApprovalProperties withParent1(String parent1) {
        this.parent1 = parent1;
        return this;
    }

    /**
     * Get the parent2 property: Parameter for optimizing query results.
     * 
     * @return the parent2 value.
     */
    public String parent2() {
        return this.parent2;
    }

    /**
     * Set the parent2 property: Parameter for optimizing query results.
     * 
     * @param parent2 the parent2 value to set.
     * @return the ApprovalProperties object itself.
     */
    public ApprovalProperties withParent2(String parent2) {
        this.parent2 = parent2;
        return this;
    }

    /**
     * Get the requestMetadata property: Request metadata for the approval request.
     * 
     * @return the requestMetadata value.
     */
    public RequestMetadata requestMetadata() {
        return this.requestMetadata;
    }

    /**
     * Set the requestMetadata property: Request metadata for the approval request.
     * 
     * @param requestMetadata the requestMetadata value to set.
     * @return the ApprovalProperties object itself.
     */
    public ApprovalProperties withRequestMetadata(RequestMetadata requestMetadata) {
        this.requestMetadata = requestMetadata;
        return this;
    }

    /**
     * Get the approvers property: List of approvers for the approval request.
     * 
     * @return the approvers value.
     */
    public List<Approvers> approvers() {
        return this.approvers;
    }

    /**
     * Set the approvers property: List of approvers for the approval request.
     * 
     * @param approvers the approvers value to set.
     * @return the ApprovalProperties object itself.
     */
    public ApprovalProperties withApprovers(List<Approvers> approvers) {
        this.approvers = approvers;
        return this;
    }

    /**
     * Get the mandatoryApprovers property: List of mandatory approvers for the approval request.
     * 
     * @return the mandatoryApprovers value.
     */
    public List<Approvers> mandatoryApprovers() {
        return this.mandatoryApprovers;
    }

    /**
     * Set the mandatoryApprovers property: List of mandatory approvers for the approval request.
     * 
     * @param mandatoryApprovers the mandatoryApprovers value to set.
     * @return the ApprovalProperties object itself.
     */
    public ApprovalProperties withMandatoryApprovers(List<Approvers> mandatoryApprovers) {
        this.mandatoryApprovers = mandatoryApprovers;
        return this;
    }

    /**
     * Get the minimumApproversRequired property: Minimum number of approvers required for the approval request.
     * 
     * @return the minimumApproversRequired value.
     */
    public Long minimumApproversRequired() {
        return this.minimumApproversRequired;
    }

    /**
     * Set the minimumApproversRequired property: Minimum number of approvers required for the approval request.
     * 
     * @param minimumApproversRequired the minimumApproversRequired value to set.
     * @return the ApprovalProperties object itself.
     */
    public ApprovalProperties withMinimumApproversRequired(Long minimumApproversRequired) {
        this.minimumApproversRequired = minimumApproversRequired;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (requestMetadata() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property requestMetadata in model ApprovalProperties"));
        } else {
            requestMetadata().validate();
        }
        if (approvers() != null) {
            approvers().forEach(e -> e.validate());
        }
        if (mandatoryApprovers() != null) {
            mandatoryApprovers().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApprovalProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("requestMetadata", this.requestMetadata);
        jsonWriter.writeStringField("parent1", this.parent1);
        jsonWriter.writeStringField("parent2", this.parent2);
        jsonWriter.writeArrayField("approvers", this.approvers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("mandatoryApprovers", this.mandatoryApprovers,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("minimumApproversRequired", this.minimumApproversRequired);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApprovalProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApprovalProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApprovalProperties.
     */
    public static ApprovalProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApprovalProperties deserializedApprovalProperties = new ApprovalProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("requestMetadata".equals(fieldName)) {
                    deserializedApprovalProperties.requestMetadata = RequestMetadata.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedApprovalProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("parent1".equals(fieldName)) {
                    deserializedApprovalProperties.parent1 = reader.getString();
                } else if ("parent2".equals(fieldName)) {
                    deserializedApprovalProperties.parent2 = reader.getString();
                } else if ("approvers".equals(fieldName)) {
                    List<Approvers> approvers = reader.readArray(reader1 -> Approvers.fromJson(reader1));
                    deserializedApprovalProperties.approvers = approvers;
                } else if ("mandatoryApprovers".equals(fieldName)) {
                    List<Approvers> mandatoryApprovers = reader.readArray(reader1 -> Approvers.fromJson(reader1));
                    deserializedApprovalProperties.mandatoryApprovers = mandatoryApprovers;
                } else if ("minimumApproversRequired".equals(fieldName)) {
                    deserializedApprovalProperties.minimumApproversRequired = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApprovalProperties;
        });
    }
}
