// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mission.fluent.models.EnclaveConnectionPropertiesUpdate;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * EnclaveConnection Model Resource.
 */
@Fluent
public final class EnclaveConnectionResourceUpdate extends AzureResourceManagerCommonTypesTrackedResourceUpdate {
    /*
     * The resource-specific properties for this resource.
     */
    private EnclaveConnectionPropertiesUpdate innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of EnclaveConnectionResourceUpdate class.
     */
    public EnclaveConnectionResourceUpdate() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private EnclaveConnectionPropertiesUpdate innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EnclaveConnectionResourceUpdate withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the state property: The state of the enclaveConnection.
     * 
     * @return the state value.
     */
    public EnclaveConnectionState state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: The state of the enclaveConnection.
     * 
     * @param state the state value to set.
     * @return the EnclaveConnectionResourceUpdate object itself.
     */
    public EnclaveConnectionResourceUpdate withState(EnclaveConnectionState state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnclaveConnectionPropertiesUpdate();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Get the communityResourceId property: Community Resource Id.
     * 
     * @return the communityResourceId value.
     */
    public String communityResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().communityResourceId();
    }

    /**
     * Set the communityResourceId property: Community Resource Id.
     * 
     * @param communityResourceId the communityResourceId value to set.
     * @return the EnclaveConnectionResourceUpdate object itself.
     */
    public EnclaveConnectionResourceUpdate withCommunityResourceId(String communityResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnclaveConnectionPropertiesUpdate();
        }
        this.innerProperties().withCommunityResourceId(communityResourceId);
        return this;
    }

    /**
     * Get the sourceResourceId property: Source Resource Id.
     * 
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceResourceId();
    }

    /**
     * Set the sourceResourceId property: Source Resource Id.
     * 
     * @param sourceResourceId the sourceResourceId value to set.
     * @return the EnclaveConnectionResourceUpdate object itself.
     */
    public EnclaveConnectionResourceUpdate withSourceResourceId(String sourceResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnclaveConnectionPropertiesUpdate();
        }
        this.innerProperties().withSourceResourceId(sourceResourceId);
        return this;
    }

    /**
     * Get the sourceCidr property: Source CIDR.
     * 
     * @return the sourceCidr value.
     */
    public String sourceCidr() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceCidr();
    }

    /**
     * Set the sourceCidr property: Source CIDR.
     * 
     * @param sourceCidr the sourceCidr value to set.
     * @return the EnclaveConnectionResourceUpdate object itself.
     */
    public EnclaveConnectionResourceUpdate withSourceCidr(String sourceCidr) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnclaveConnectionPropertiesUpdate();
        }
        this.innerProperties().withSourceCidr(sourceCidr);
        return this;
    }

    /**
     * Get the ipGroup property: Source IP group Resource Id.
     * 
     * @return the ipGroup value.
     */
    public String ipGroup() {
        return this.innerProperties() == null ? null : this.innerProperties().ipGroup();
    }

    /**
     * Set the ipGroup property: Source IP group Resource Id.
     * 
     * @param ipGroup the ipGroup value to set.
     * @return the EnclaveConnectionResourceUpdate object itself.
     */
    public EnclaveConnectionResourceUpdate withIpGroup(String ipGroup) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnclaveConnectionPropertiesUpdate();
        }
        this.innerProperties().withIpGroup(ipGroup);
        return this;
    }

    /**
     * Get the destinationEndpointId property: Destination Endpoint Resource Id.
     * 
     * @return the destinationEndpointId value.
     */
    public String destinationEndpointId() {
        return this.innerProperties() == null ? null : this.innerProperties().destinationEndpointId();
    }

    /**
     * Set the destinationEndpointId property: Destination Endpoint Resource Id.
     * 
     * @param destinationEndpointId the destinationEndpointId value to set.
     * @return the EnclaveConnectionResourceUpdate object itself.
     */
    public EnclaveConnectionResourceUpdate withDestinationEndpointId(String destinationEndpointId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnclaveConnectionPropertiesUpdate();
        }
        this.innerProperties().withDestinationEndpointId(destinationEndpointId);
        return this;
    }

    /**
     * Get the resourceCollection property: List of resource ids modified by enclave Connections.
     * 
     * @return the resourceCollection value.
     */
    public List<String> resourceCollection() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceCollection();
    }

    /**
     * Set the resourceCollection property: List of resource ids modified by enclave Connections.
     * 
     * @param resourceCollection the resourceCollection value to set.
     * @return the EnclaveConnectionResourceUpdate object itself.
     */
    public EnclaveConnectionResourceUpdate withResourceCollection(List<String> resourceCollection) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnclaveConnectionPropertiesUpdate();
        }
        this.innerProperties().withResourceCollection(resourceCollection);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnclaveConnectionResourceUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnclaveConnectionResourceUpdate if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EnclaveConnectionResourceUpdate.
     */
    public static EnclaveConnectionResourceUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnclaveConnectionResourceUpdate deserializedEnclaveConnectionResourceUpdate
                = new EnclaveConnectionResourceUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedEnclaveConnectionResourceUpdate.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedEnclaveConnectionResourceUpdate.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedEnclaveConnectionResourceUpdate.type = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedEnclaveConnectionResourceUpdate.withTags(tags);
                } else if ("systemData".equals(fieldName)) {
                    deserializedEnclaveConnectionResourceUpdate.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedEnclaveConnectionResourceUpdate.innerProperties
                        = EnclaveConnectionPropertiesUpdate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnclaveConnectionResourceUpdate;
        });
    }
}
