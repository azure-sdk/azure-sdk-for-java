// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mission.fluent.models.ExternalConnectionInner;
import com.azure.resourcemanager.mission.models.ExternalConnection;
import com.azure.resourcemanager.mission.models.ExternalConnectionState;
import com.azure.resourcemanager.mission.models.ExternalConnectionUpdate;
import com.azure.resourcemanager.mission.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ExternalConnectionImpl
    implements ExternalConnection, ExternalConnection.Definition, ExternalConnection.Update {
    private ExternalConnectionInner innerObject;

    private final com.azure.resourcemanager.mission.MissionManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ExternalConnectionState state() {
        return this.innerModel().state();
    }

    public String communityResourceId() {
        return this.innerModel().communityResourceId();
    }

    public List<String> enclaveIds() {
        List<String> inner = this.innerModel().enclaveIds();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> externalCidrs() {
        List<String> inner = this.innerModel().externalCidrs();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> resourceCollection() {
        List<String> inner = this.innerModel().resourceCollection();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ExternalConnectionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mission.MissionManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String externalConnectionName;

    private ExternalConnectionUpdate updateProperties;

    public ExternalConnectionImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ExternalConnection create() {
        this.innerObject = serviceManager.serviceClient()
            .getExternalConnections()
            .createOrUpdate(resourceGroupName, externalConnectionName, this.innerModel(), Context.NONE);
        return this;
    }

    public ExternalConnection create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getExternalConnections()
            .createOrUpdate(resourceGroupName, externalConnectionName, this.innerModel(), context);
        return this;
    }

    ExternalConnectionImpl(String name, com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerObject = new ExternalConnectionInner();
        this.serviceManager = serviceManager;
        this.externalConnectionName = name;
    }

    public ExternalConnectionImpl update() {
        this.updateProperties = new ExternalConnectionUpdate();
        return this;
    }

    public ExternalConnection apply() {
        this.innerObject = serviceManager.serviceClient()
            .getExternalConnections()
            .update(resourceGroupName, externalConnectionName, updateProperties, Context.NONE);
        return this;
    }

    public ExternalConnection apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getExternalConnections()
            .update(resourceGroupName, externalConnectionName, updateProperties, context);
        return this;
    }

    ExternalConnectionImpl(ExternalConnectionInner innerObject,
        com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.externalConnectionName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "externalConnections");
    }

    public ExternalConnection refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getExternalConnections()
            .getByResourceGroupWithResponse(resourceGroupName, externalConnectionName, Context.NONE)
            .getValue();
        return this;
    }

    public ExternalConnection refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getExternalConnections()
            .getByResourceGroupWithResponse(resourceGroupName, externalConnectionName, context)
            .getValue();
        return this;
    }

    public ExternalConnectionImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ExternalConnectionImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ExternalConnectionImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public ExternalConnectionImpl withState(ExternalConnectionState state) {
        if (isInCreateMode()) {
            this.innerModel().withState(state);
            return this;
        } else {
            this.updateProperties.withState(state);
            return this;
        }
    }

    public ExternalConnectionImpl withCommunityResourceId(String communityResourceId) {
        if (isInCreateMode()) {
            this.innerModel().withCommunityResourceId(communityResourceId);
            return this;
        } else {
            this.updateProperties.withCommunityResourceId(communityResourceId);
            return this;
        }
    }

    public ExternalConnectionImpl withEnclaveIds(List<String> enclaveIds) {
        if (isInCreateMode()) {
            this.innerModel().withEnclaveIds(enclaveIds);
            return this;
        } else {
            this.updateProperties.withEnclaveIds(enclaveIds);
            return this;
        }
    }

    public ExternalConnectionImpl withExternalCidrs(List<String> externalCidrs) {
        if (isInCreateMode()) {
            this.innerModel().withExternalCidrs(externalCidrs);
            return this;
        } else {
            this.updateProperties.withExternalCidrs(externalCidrs);
            return this;
        }
    }

    public ExternalConnectionImpl withResourceCollection(List<String> resourceCollection) {
        if (isInCreateMode()) {
            this.innerModel().withResourceCollection(resourceCollection);
            return this;
        } else {
            this.updateProperties.withResourceCollection(resourceCollection);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
