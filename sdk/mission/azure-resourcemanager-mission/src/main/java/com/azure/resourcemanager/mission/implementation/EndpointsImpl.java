// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mission.fluent.EndpointsClient;
import com.azure.resourcemanager.mission.fluent.models.EndpointResourceInner;
import com.azure.resourcemanager.mission.models.EndpointResource;
import com.azure.resourcemanager.mission.models.Endpoints;

public final class EndpointsImpl implements Endpoints {
    private static final ClientLogger LOGGER = new ClientLogger(EndpointsImpl.class);

    private final EndpointsClient innerClient;

    private final com.azure.resourcemanager.mission.MissionManager serviceManager;

    public EndpointsImpl(EndpointsClient innerClient, com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<EndpointResource> listBySubscription(String virtualEnclaveName) {
        PagedIterable<EndpointResourceInner> inner = this.serviceClient().listBySubscription(virtualEnclaveName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EndpointResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EndpointResource> listBySubscription(String virtualEnclaveName, Context context) {
        PagedIterable<EndpointResourceInner> inner
            = this.serviceClient().listBySubscription(virtualEnclaveName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EndpointResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EndpointResource> listByEnclaveResource(String resourceGroupName, String virtualEnclaveName) {
        PagedIterable<EndpointResourceInner> inner
            = this.serviceClient().listByEnclaveResource(resourceGroupName, virtualEnclaveName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EndpointResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EndpointResource> listByEnclaveResource(String resourceGroupName, String virtualEnclaveName,
        Context context) {
        PagedIterable<EndpointResourceInner> inner
            = this.serviceClient().listByEnclaveResource(resourceGroupName, virtualEnclaveName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EndpointResourceImpl(inner1, this.manager()));
    }

    public Response<EndpointResource> getWithResponse(String resourceGroupName, String virtualEnclaveName,
        String endpointName, Context context) {
        Response<EndpointResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, virtualEnclaveName, endpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EndpointResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EndpointResource get(String resourceGroupName, String virtualEnclaveName, String endpointName) {
        EndpointResourceInner inner = this.serviceClient().get(resourceGroupName, virtualEnclaveName, endpointName);
        if (inner != null) {
            return new EndpointResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String virtualEnclaveName, String endpointName) {
        this.serviceClient().delete(resourceGroupName, virtualEnclaveName, endpointName);
    }

    public void delete(String resourceGroupName, String virtualEnclaveName, String endpointName, Context context) {
        this.serviceClient().delete(resourceGroupName, virtualEnclaveName, endpointName, context);
    }

    public EndpointResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, virtualEnclaveName, endpointName, Context.NONE).getValue();
    }

    public Response<EndpointResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, virtualEnclaveName, endpointName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        this.delete(resourceGroupName, virtualEnclaveName, endpointName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        this.delete(resourceGroupName, virtualEnclaveName, endpointName, context);
    }

    private EndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.mission.MissionManager manager() {
        return this.serviceManager;
    }

    public EndpointResourceImpl define(String name) {
        return new EndpointResourceImpl(name, this.manager());
    }
}
