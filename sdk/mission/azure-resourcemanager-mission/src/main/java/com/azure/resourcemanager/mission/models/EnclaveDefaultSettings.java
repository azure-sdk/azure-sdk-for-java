// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Virtual Enclave Default Settings.
 */
@Fluent
public final class EnclaveDefaultSettings implements JsonSerializable<EnclaveDefaultSettings> {
    /*
     * Key Vault Resource Id.
     */
    private String keyVaultResourceId;

    /*
     * Storage Account Resource Id.
     */
    private String storageAccountResourceId;

    /*
     * Log Analytics Resource Ids.
     */
    private List<String> logAnalyticsResourceIdCollection;

    /*
     * Diagnostic Destination.
     */
    private DiagnosticDestination diagnosticDestination;

    /**
     * Creates an instance of EnclaveDefaultSettings class.
     */
    public EnclaveDefaultSettings() {
    }

    /**
     * Get the keyVaultResourceId property: Key Vault Resource Id.
     * 
     * @return the keyVaultResourceId value.
     */
    public String keyVaultResourceId() {
        return this.keyVaultResourceId;
    }

    /**
     * Set the keyVaultResourceId property: Key Vault Resource Id.
     * 
     * @param keyVaultResourceId the keyVaultResourceId value to set.
     * @return the EnclaveDefaultSettings object itself.
     */
    public EnclaveDefaultSettings withKeyVaultResourceId(String keyVaultResourceId) {
        this.keyVaultResourceId = keyVaultResourceId;
        return this;
    }

    /**
     * Get the storageAccountResourceId property: Storage Account Resource Id.
     * 
     * @return the storageAccountResourceId value.
     */
    public String storageAccountResourceId() {
        return this.storageAccountResourceId;
    }

    /**
     * Set the storageAccountResourceId property: Storage Account Resource Id.
     * 
     * @param storageAccountResourceId the storageAccountResourceId value to set.
     * @return the EnclaveDefaultSettings object itself.
     */
    public EnclaveDefaultSettings withStorageAccountResourceId(String storageAccountResourceId) {
        this.storageAccountResourceId = storageAccountResourceId;
        return this;
    }

    /**
     * Get the logAnalyticsResourceIdCollection property: Log Analytics Resource Ids.
     * 
     * @return the logAnalyticsResourceIdCollection value.
     */
    public List<String> logAnalyticsResourceIdCollection() {
        return this.logAnalyticsResourceIdCollection;
    }

    /**
     * Set the logAnalyticsResourceIdCollection property: Log Analytics Resource Ids.
     * 
     * @param logAnalyticsResourceIdCollection the logAnalyticsResourceIdCollection value to set.
     * @return the EnclaveDefaultSettings object itself.
     */
    public EnclaveDefaultSettings withLogAnalyticsResourceIdCollection(List<String> logAnalyticsResourceIdCollection) {
        this.logAnalyticsResourceIdCollection = logAnalyticsResourceIdCollection;
        return this;
    }

    /**
     * Get the diagnosticDestination property: Diagnostic Destination.
     * 
     * @return the diagnosticDestination value.
     */
    public DiagnosticDestination diagnosticDestination() {
        return this.diagnosticDestination;
    }

    /**
     * Set the diagnosticDestination property: Diagnostic Destination.
     * 
     * @param diagnosticDestination the diagnosticDestination value to set.
     * @return the EnclaveDefaultSettings object itself.
     */
    public EnclaveDefaultSettings withDiagnosticDestination(DiagnosticDestination diagnosticDestination) {
        this.diagnosticDestination = diagnosticDestination;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyVaultResourceId", this.keyVaultResourceId);
        jsonWriter.writeStringField("storageAccountResourceId", this.storageAccountResourceId);
        jsonWriter.writeArrayField("logAnalyticsResourceIdCollection", this.logAnalyticsResourceIdCollection,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("diagnosticDestination",
            this.diagnosticDestination == null ? null : this.diagnosticDestination.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnclaveDefaultSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnclaveDefaultSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnclaveDefaultSettings.
     */
    public static EnclaveDefaultSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnclaveDefaultSettings deserializedEnclaveDefaultSettings = new EnclaveDefaultSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultResourceId".equals(fieldName)) {
                    deserializedEnclaveDefaultSettings.keyVaultResourceId = reader.getString();
                } else if ("storageAccountResourceId".equals(fieldName)) {
                    deserializedEnclaveDefaultSettings.storageAccountResourceId = reader.getString();
                } else if ("logAnalyticsResourceIdCollection".equals(fieldName)) {
                    List<String> logAnalyticsResourceIdCollection = reader.readArray(reader1 -> reader1.getString());
                    deserializedEnclaveDefaultSettings.logAnalyticsResourceIdCollection
                        = logAnalyticsResourceIdCollection;
                } else if ("diagnosticDestination".equals(fieldName)) {
                    deserializedEnclaveDefaultSettings.diagnosticDestination
                        = DiagnosticDestination.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnclaveDefaultSettings;
        });
    }
}
