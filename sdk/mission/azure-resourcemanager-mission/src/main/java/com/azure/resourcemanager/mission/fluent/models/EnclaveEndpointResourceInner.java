// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mission.models.EnclaveEndpointDestinationRule;
import com.azure.resourcemanager.mission.models.ProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * EnclaveEndpoint Model Resource.
 */
@Fluent
public final class EnclaveEndpointResourceInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    private EnclaveEndpointProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of EnclaveEndpointResourceInner class.
     */
    public EnclaveEndpointResourceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private EnclaveEndpointProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EnclaveEndpointResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EnclaveEndpointResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the ruleCollection property: Enclave Endpoint Rule Collection.
     * 
     * @return the ruleCollection value.
     */
    public List<EnclaveEndpointDestinationRule> ruleCollection() {
        return this.innerProperties() == null ? null : this.innerProperties().ruleCollection();
    }

    /**
     * Set the ruleCollection property: Enclave Endpoint Rule Collection.
     * 
     * @param ruleCollection the ruleCollection value to set.
     * @return the EnclaveEndpointResourceInner object itself.
     */
    public EnclaveEndpointResourceInner withRuleCollection(List<EnclaveEndpointDestinationRule> ruleCollection) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnclaveEndpointProperties();
        }
        this.innerProperties().withRuleCollection(ruleCollection);
        return this;
    }

    /**
     * Get the resourceCollection property: List of resource ids created by community endpoint.
     * 
     * @return the resourceCollection value.
     */
    public List<String> resourceCollection() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceCollection();
    }

    /**
     * Set the resourceCollection property: List of resource ids created by community endpoint.
     * 
     * @param resourceCollection the resourceCollection value to set.
     * @return the EnclaveEndpointResourceInner object itself.
     */
    public EnclaveEndpointResourceInner withResourceCollection(List<String> resourceCollection) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnclaveEndpointProperties();
        }
        this.innerProperties().withResourceCollection(resourceCollection);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the approvalRequired property: Whether approval is needed for the connection (True or False).
     * 
     * @return the approvalRequired value.
     */
    public Boolean approvalRequired() {
        return this.innerProperties() == null ? null : this.innerProperties().approvalRequired();
    }

    /**
     * Set the approvalRequired property: Whether approval is needed for the connection (True or False).
     * 
     * @param approvalRequired the approvalRequired value to set.
     * @return the EnclaveEndpointResourceInner object itself.
     */
    public EnclaveEndpointResourceInner withApprovalRequired(Boolean approvalRequired) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EnclaveEndpointProperties();
        }
        this.innerProperties().withApprovalRequired(approvalRequired);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnclaveEndpointResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnclaveEndpointResourceInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EnclaveEndpointResourceInner.
     */
    public static EnclaveEndpointResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnclaveEndpointResourceInner deserializedEnclaveEndpointResourceInner = new EnclaveEndpointResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedEnclaveEndpointResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedEnclaveEndpointResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedEnclaveEndpointResourceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedEnclaveEndpointResourceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedEnclaveEndpointResourceInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedEnclaveEndpointResourceInner.innerProperties
                        = EnclaveEndpointProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedEnclaveEndpointResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnclaveEndpointResourceInner;
        });
    }
}
