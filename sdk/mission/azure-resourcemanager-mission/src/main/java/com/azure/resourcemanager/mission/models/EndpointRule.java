// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * EndpointRule Properties.
 */
@Fluent
public final class EndpointRule implements JsonSerializable<EndpointRule> {
    /*
     * Endpoint Rule Name.
     */
    private String name;

    /*
     * IP Address. Can include multiple CIDR/IP Addresses separated by commas.
     */
    private String address;

    /*
     * Port. Can include multiple ports separated by commas or a range indicated by a hyphen.
     */
    private String port;

    /*
     * Protocol. Options specified by Endpoint Protocol Enum.
     */
    private EndpointProtocol protocol;

    /**
     * Creates an instance of EndpointRule class.
     */
    public EndpointRule() {
    }

    /**
     * Get the name property: Endpoint Rule Name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Endpoint Rule Name.
     * 
     * @param name the name value to set.
     * @return the EndpointRule object itself.
     */
    public EndpointRule withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the address property: IP Address. Can include multiple CIDR/IP Addresses separated by commas.
     * 
     * @return the address value.
     */
    public String address() {
        return this.address;
    }

    /**
     * Set the address property: IP Address. Can include multiple CIDR/IP Addresses separated by commas.
     * 
     * @param address the address value to set.
     * @return the EndpointRule object itself.
     */
    public EndpointRule withAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * Get the port property: Port. Can include multiple ports separated by commas or a range indicated by a hyphen.
     * 
     * @return the port value.
     */
    public String port() {
        return this.port;
    }

    /**
     * Set the port property: Port. Can include multiple ports separated by commas or a range indicated by a hyphen.
     * 
     * @param port the port value to set.
     * @return the EndpointRule object itself.
     */
    public EndpointRule withPort(String port) {
        this.port = port;
        return this;
    }

    /**
     * Get the protocol property: Protocol. Options specified by Endpoint Protocol Enum.
     * 
     * @return the protocol value.
     */
    public EndpointProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Protocol. Options specified by Endpoint Protocol Enum.
     * 
     * @param protocol the protocol value to set.
     * @return the EndpointRule object itself.
     */
    public EndpointRule withProtocol(EndpointProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("address", this.address);
        jsonWriter.writeStringField("port", this.port);
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EndpointRule.
     */
    public static EndpointRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointRule deserializedEndpointRule = new EndpointRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedEndpointRule.name = reader.getString();
                } else if ("address".equals(fieldName)) {
                    deserializedEndpointRule.address = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedEndpointRule.port = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedEndpointRule.protocol = EndpointProtocol.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointRule;
        });
    }
}
