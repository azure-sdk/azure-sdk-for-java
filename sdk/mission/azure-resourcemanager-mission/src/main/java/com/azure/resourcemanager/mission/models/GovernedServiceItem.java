// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * GovernedServiceItem Properties.
 */
@Fluent
public final class GovernedServiceItem implements JsonSerializable<GovernedServiceItem> {
    /*
     * service id
     */
    private ServiceIdentifier id;

    /*
     * service name
     */
    private String name;

    /*
     * governance option for this service (Allow, Deny, ExceptionOnly, or NotApplicable).
     */
    private GovernedServiceItemOption option;

    /*
     * initiative enforcement (Enabled or Disabled).
     */
    private GovernedServiceItemEnforcement enforcement;

    /*
     * policies set to auditOnly (True or False).
     */
    private Boolean auditOnly;

    /*
     * initiatives associated with this service
     */
    private List<String> initiatives;

    /**
     * Creates an instance of GovernedServiceItem class.
     */
    public GovernedServiceItem() {
    }

    /**
     * Get the id property: service id.
     * 
     * @return the id value.
     */
    public ServiceIdentifier id() {
        return this.id;
    }

    /**
     * Set the id property: service id.
     * 
     * @param id the id value to set.
     * @return the GovernedServiceItem object itself.
     */
    public GovernedServiceItem withId(ServiceIdentifier id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: service name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the option property: governance option for this service (Allow, Deny, ExceptionOnly, or NotApplicable).
     * 
     * @return the option value.
     */
    public GovernedServiceItemOption option() {
        return this.option;
    }

    /**
     * Set the option property: governance option for this service (Allow, Deny, ExceptionOnly, or NotApplicable).
     * 
     * @param option the option value to set.
     * @return the GovernedServiceItem object itself.
     */
    public GovernedServiceItem withOption(GovernedServiceItemOption option) {
        this.option = option;
        return this;
    }

    /**
     * Get the enforcement property: initiative enforcement (Enabled or Disabled).
     * 
     * @return the enforcement value.
     */
    public GovernedServiceItemEnforcement enforcement() {
        return this.enforcement;
    }

    /**
     * Set the enforcement property: initiative enforcement (Enabled or Disabled).
     * 
     * @param enforcement the enforcement value to set.
     * @return the GovernedServiceItem object itself.
     */
    public GovernedServiceItem withEnforcement(GovernedServiceItemEnforcement enforcement) {
        this.enforcement = enforcement;
        return this;
    }

    /**
     * Get the auditOnly property: policies set to auditOnly (True or False).
     * 
     * @return the auditOnly value.
     */
    public Boolean auditOnly() {
        return this.auditOnly;
    }

    /**
     * Set the auditOnly property: policies set to auditOnly (True or False).
     * 
     * @param auditOnly the auditOnly value to set.
     * @return the GovernedServiceItem object itself.
     */
    public GovernedServiceItem withAuditOnly(Boolean auditOnly) {
        this.auditOnly = auditOnly;
        return this;
    }

    /**
     * Get the initiatives property: initiatives associated with this service.
     * 
     * @return the initiatives value.
     */
    public List<String> initiatives() {
        return this.initiatives;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model GovernedServiceItem"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GovernedServiceItem.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id == null ? null : this.id.toString());
        jsonWriter.writeStringField("option", this.option == null ? null : this.option.toString());
        jsonWriter.writeStringField("enforcement", this.enforcement == null ? null : this.enforcement.toString());
        jsonWriter.writeBooleanField("auditOnly", this.auditOnly);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GovernedServiceItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GovernedServiceItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GovernedServiceItem.
     */
    public static GovernedServiceItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GovernedServiceItem deserializedGovernedServiceItem = new GovernedServiceItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedGovernedServiceItem.id = ServiceIdentifier.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedGovernedServiceItem.name = reader.getString();
                } else if ("option".equals(fieldName)) {
                    deserializedGovernedServiceItem.option = GovernedServiceItemOption.fromString(reader.getString());
                } else if ("enforcement".equals(fieldName)) {
                    deserializedGovernedServiceItem.enforcement
                        = GovernedServiceItemEnforcement.fromString(reader.getString());
                } else if ("auditOnly".equals(fieldName)) {
                    deserializedGovernedServiceItem.auditOnly = reader.getNullable(JsonReader::getBoolean);
                } else if ("initiatives".equals(fieldName)) {
                    List<String> initiatives = reader.readArray(reader1 -> reader1.getString());
                    deserializedGovernedServiceItem.initiatives = initiatives;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGovernedServiceItem;
        });
    }
}
