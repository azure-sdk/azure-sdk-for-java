// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.mission.fluent.ApprovalsClient;
import com.azure.resourcemanager.mission.fluent.models.ApprovalResourceInner;
import com.azure.resourcemanager.mission.fluent.models.InitiatorCallbackResponseInner;
import com.azure.resourcemanager.mission.models.ApprovalPatchResource;
import com.azure.resourcemanager.mission.models.ApprovalResourceListResult;
import com.azure.resourcemanager.mission.models.InitiatorCallbackRequest;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ApprovalsClient.
 */
public final class ApprovalsClientImpl implements ApprovalsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ApprovalsService service;

    /**
     * The service client containing this operation class.
     */
    private final MissionClientImpl client;

    /**
     * Initializes an instance of ApprovalsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ApprovalsClientImpl(MissionClientImpl client) {
        this.service
            = RestProxy.create(ApprovalsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MissionClientApprovals to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MissionClientApprova")
    public interface ApprovalsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.Mission/approvals")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApprovalResourceListResult>> listByParent(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApprovalResourceInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName,
            @BodyParam("application/json") ApprovalResourceInner resource, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName,
            @BodyParam("application/json") ApprovalPatchResource properties, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}/initiatorCallback")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> initiatorCallback(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName,
            @BodyParam("application/json") InitiatorCallbackRequest body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApprovalResourceListResult>> listByParentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApprovalResourceInner>> listByParentSinglePageAsync(String resourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParent(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, accept, context))
            .<PagedResponse<ApprovalResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApprovalResourceInner>> listByParentSinglePageAsync(String resourceUri,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByParent(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApprovalResourceInner> listByParentAsync(String resourceUri) {
        return new PagedFlux<>(() -> listByParentSinglePageAsync(resourceUri),
            nextLink -> listByParentNextSinglePageAsync(nextLink));
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApprovalResourceInner> listByParentAsync(String resourceUri, Context context) {
        return new PagedFlux<>(() -> listByParentSinglePageAsync(resourceUri, context),
            nextLink -> listByParentNextSinglePageAsync(nextLink, context));
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApprovalResourceInner> listByParent(String resourceUri) {
        return new PagedIterable<>(listByParentAsync(resourceUri));
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApprovalResourceInner> listByParent(String resourceUri, Context context) {
        return new PagedIterable<>(listByParentAsync(resourceUri, context));
    }

    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApprovalResourceInner>> getWithResponseAsync(String resourceUri, String approvalName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (approvalName == null) {
            return Mono.error(new IllegalArgumentException("Parameter approvalName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                approvalName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApprovalResourceInner>> getWithResponseAsync(String resourceUri, String approvalName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (approvalName == null) {
            return Mono.error(new IllegalArgumentException("Parameter approvalName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, approvalName, accept,
            context);
    }

    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalResourceInner> getAsync(String resourceUri, String approvalName) {
        return getWithResponseAsync(resourceUri, approvalName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApprovalResourceInner> getWithResponse(String resourceUri, String approvalName, Context context) {
        return getWithResponseAsync(resourceUri, approvalName, context).block();
    }

    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalResourceInner get(String resourceUri, String approvalName) {
        return getWithResponse(resourceUri, approvalName, Context.NONE).getValue();
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceUri, String approvalName,
        ApprovalResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (approvalName == null) {
            return Mono.error(new IllegalArgumentException("Parameter approvalName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, approvalName, resource, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceUri, String approvalName,
        ApprovalResourceInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (approvalName == null) {
            return Mono.error(new IllegalArgumentException("Parameter approvalName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, approvalName,
            resource, accept, context);
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalResourceInner>, ApprovalResourceInner>
        beginCreateOrUpdateAsync(String resourceUri, String approvalName, ApprovalResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceUri, approvalName, resource);
        return this.client.<ApprovalResourceInner, ApprovalResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalResourceInner.class, ApprovalResourceInner.class,
            this.client.getContext());
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginCreateOrUpdateAsync(
        String resourceUri, String approvalName, ApprovalResourceInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceUri, approvalName, resource, context);
        return this.client.<ApprovalResourceInner, ApprovalResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalResourceInner.class, ApprovalResourceInner.class, context);
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginCreateOrUpdate(String resourceUri,
        String approvalName, ApprovalResourceInner resource) {
        return this.beginCreateOrUpdateAsync(resourceUri, approvalName, resource).getSyncPoller();
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginCreateOrUpdate(String resourceUri,
        String approvalName, ApprovalResourceInner resource, Context context) {
        return this.beginCreateOrUpdateAsync(resourceUri, approvalName, resource, context).getSyncPoller();
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalResourceInner> createOrUpdateAsync(String resourceUri, String approvalName,
        ApprovalResourceInner resource) {
        return beginCreateOrUpdateAsync(resourceUri, approvalName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalResourceInner> createOrUpdateAsync(String resourceUri, String approvalName,
        ApprovalResourceInner resource, Context context) {
        return beginCreateOrUpdateAsync(resourceUri, approvalName, resource, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalResourceInner createOrUpdate(String resourceUri, String approvalName,
        ApprovalResourceInner resource) {
        return createOrUpdateAsync(resourceUri, approvalName, resource).block();
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalResourceInner createOrUpdate(String resourceUri, String approvalName, ApprovalResourceInner resource,
        Context context) {
        return createOrUpdateAsync(resourceUri, approvalName, resource, context).block();
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceUri, String approvalName,
        ApprovalPatchResource properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (approvalName == null) {
            return Mono.error(new IllegalArgumentException("Parameter approvalName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                approvalName, properties, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceUri, String approvalName,
        ApprovalPatchResource properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (approvalName == null) {
            return Mono.error(new IllegalArgumentException("Parameter approvalName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, approvalName,
            properties, accept, context);
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginUpdateAsync(String resourceUri,
        String approvalName, ApprovalPatchResource properties) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceUri, approvalName, properties);
        return this.client.<ApprovalResourceInner, ApprovalResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalResourceInner.class, ApprovalResourceInner.class,
            this.client.getContext());
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginUpdateAsync(String resourceUri,
        String approvalName, ApprovalPatchResource properties, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceUri, approvalName, properties, context);
        return this.client.<ApprovalResourceInner, ApprovalResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalResourceInner.class, ApprovalResourceInner.class, context);
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginUpdate(String resourceUri,
        String approvalName, ApprovalPatchResource properties) {
        return this.beginUpdateAsync(resourceUri, approvalName, properties).getSyncPoller();
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginUpdate(String resourceUri,
        String approvalName, ApprovalPatchResource properties, Context context) {
        return this.beginUpdateAsync(resourceUri, approvalName, properties, context).getSyncPoller();
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalResourceInner> updateAsync(String resourceUri, String approvalName,
        ApprovalPatchResource properties) {
        return beginUpdateAsync(resourceUri, approvalName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalResourceInner> updateAsync(String resourceUri, String approvalName,
        ApprovalPatchResource properties, Context context) {
        return beginUpdateAsync(resourceUri, approvalName, properties, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalResourceInner update(String resourceUri, String approvalName, ApprovalPatchResource properties) {
        return updateAsync(resourceUri, approvalName, properties).block();
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalResourceInner update(String resourceUri, String approvalName, ApprovalPatchResource properties,
        Context context) {
        return updateAsync(resourceUri, approvalName, properties, context).block();
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceUri, String approvalName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (approvalName == null) {
            return Mono.error(new IllegalArgumentException("Parameter approvalName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                approvalName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceUri, String approvalName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (approvalName == null) {
            return Mono.error(new IllegalArgumentException("Parameter approvalName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, approvalName, accept,
            context);
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceUri, String approvalName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceUri, approvalName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceUri, String approvalName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceUri, approvalName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String approvalName) {
        return this.beginDeleteAsync(resourceUri, approvalName).getSyncPoller();
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String approvalName, Context context) {
        return this.beginDeleteAsync(resourceUri, approvalName, context).getSyncPoller();
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceUri, String approvalName) {
        return beginDeleteAsync(resourceUri, approvalName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceUri, String approvalName, Context context) {
        return beginDeleteAsync(resourceUri, approvalName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri, String approvalName) {
        deleteAsync(resourceUri, approvalName).block();
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri, String approvalName, Context context) {
        deleteAsync(resourceUri, approvalName, context).block();
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> initiatorCallbackWithResponseAsync(String resourceUri, String approvalName,
        InitiatorCallbackRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (approvalName == null) {
            return Mono.error(new IllegalArgumentException("Parameter approvalName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.initiatorCallback(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, approvalName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> initiatorCallbackWithResponseAsync(String resourceUri, String approvalName,
        InitiatorCallbackRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (approvalName == null) {
            return Mono.error(new IllegalArgumentException("Parameter approvalName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.initiatorCallback(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
            approvalName, body, accept, context);
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<InitiatorCallbackResponseInner>, InitiatorCallbackResponseInner>
        beginInitiatorCallbackAsync(String resourceUri, String approvalName, InitiatorCallbackRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono = initiatorCallbackWithResponseAsync(resourceUri, approvalName, body);
        return this.client.<InitiatorCallbackResponseInner, InitiatorCallbackResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), InitiatorCallbackResponseInner.class, InitiatorCallbackResponseInner.class,
            this.client.getContext());
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<InitiatorCallbackResponseInner>, InitiatorCallbackResponseInner>
        beginInitiatorCallbackAsync(String resourceUri, String approvalName, InitiatorCallbackRequest body,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = initiatorCallbackWithResponseAsync(resourceUri, approvalName, body, context);
        return this.client.<InitiatorCallbackResponseInner, InitiatorCallbackResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), InitiatorCallbackResponseInner.class, InitiatorCallbackResponseInner.class,
            context);
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InitiatorCallbackResponseInner>, InitiatorCallbackResponseInner>
        beginInitiatorCallback(String resourceUri, String approvalName, InitiatorCallbackRequest body) {
        return this.beginInitiatorCallbackAsync(resourceUri, approvalName, body).getSyncPoller();
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InitiatorCallbackResponseInner>, InitiatorCallbackResponseInner>
        beginInitiatorCallback(String resourceUri, String approvalName, InitiatorCallbackRequest body,
            Context context) {
        return this.beginInitiatorCallbackAsync(resourceUri, approvalName, body, context).getSyncPoller();
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InitiatorCallbackResponseInner> initiatorCallbackAsync(String resourceUri, String approvalName,
        InitiatorCallbackRequest body) {
        return beginInitiatorCallbackAsync(resourceUri, approvalName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InitiatorCallbackResponseInner> initiatorCallbackAsync(String resourceUri, String approvalName,
        InitiatorCallbackRequest body, Context context) {
        return beginInitiatorCallbackAsync(resourceUri, approvalName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InitiatorCallbackResponseInner initiatorCallback(String resourceUri, String approvalName,
        InitiatorCallbackRequest body) {
        return initiatorCallbackAsync(resourceUri, approvalName, body).block();
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InitiatorCallbackResponseInner initiatorCallback(String resourceUri, String approvalName,
        InitiatorCallbackRequest body, Context context) {
        return initiatorCallbackAsync(resourceUri, approvalName, body, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApprovalResourceInner>> listByParentNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParentNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ApprovalResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApprovalResourceInner>> listByParentNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByParentNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
