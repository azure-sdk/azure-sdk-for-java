// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mission.fluent.models.ApprovalPropertiesUpdate;
import java.io.IOException;
import java.util.List;

/**
 * Approval Model Resource.
 */
@Fluent
public final class ApprovalResourceUpdate extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private ApprovalPropertiesUpdate innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ApprovalResourceUpdate class.
     */
    public ApprovalResourceUpdate() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private ApprovalPropertiesUpdate innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the parent1 property: Parameter for optimizing query results.
     * 
     * @return the parent1 value.
     */
    public String parent1() {
        return this.innerProperties() == null ? null : this.innerProperties().parent1();
    }

    /**
     * Set the parent1 property: Parameter for optimizing query results.
     * 
     * @param parent1 the parent1 value to set.
     * @return the ApprovalResourceUpdate object itself.
     */
    public ApprovalResourceUpdate withParent1(String parent1) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApprovalPropertiesUpdate();
        }
        this.innerProperties().withParent1(parent1);
        return this;
    }

    /**
     * Get the parent2 property: Parameter for optimizing query results.
     * 
     * @return the parent2 value.
     */
    public String parent2() {
        return this.innerProperties() == null ? null : this.innerProperties().parent2();
    }

    /**
     * Set the parent2 property: Parameter for optimizing query results.
     * 
     * @param parent2 the parent2 value to set.
     * @return the ApprovalResourceUpdate object itself.
     */
    public ApprovalResourceUpdate withParent2(String parent2) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApprovalPropertiesUpdate();
        }
        this.innerProperties().withParent2(parent2);
        return this;
    }

    /**
     * Get the requestMetadata property: Request metadata for the approval request.
     * 
     * @return the requestMetadata value.
     */
    public RequestMetadataUpdate requestMetadata() {
        return this.innerProperties() == null ? null : this.innerProperties().requestMetadata();
    }

    /**
     * Set the requestMetadata property: Request metadata for the approval request.
     * 
     * @param requestMetadata the requestMetadata value to set.
     * @return the ApprovalResourceUpdate object itself.
     */
    public ApprovalResourceUpdate withRequestMetadata(RequestMetadataUpdate requestMetadata) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApprovalPropertiesUpdate();
        }
        this.innerProperties().withRequestMetadata(requestMetadata);
        return this;
    }

    /**
     * Get the approvers property: List of approvers for the approval request.
     * 
     * @return the approvers value.
     */
    public List<Approvers> approvers() {
        return this.innerProperties() == null ? null : this.innerProperties().approvers();
    }

    /**
     * Set the approvers property: List of approvers for the approval request.
     * 
     * @param approvers the approvers value to set.
     * @return the ApprovalResourceUpdate object itself.
     */
    public ApprovalResourceUpdate withApprovers(List<Approvers> approvers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApprovalPropertiesUpdate();
        }
        this.innerProperties().withApprovers(approvers);
        return this;
    }

    /**
     * Get the mandatoryApprovers property: List of mandatory approvers for the approval request.
     * 
     * @return the mandatoryApprovers value.
     */
    public List<Approvers> mandatoryApprovers() {
        return this.innerProperties() == null ? null : this.innerProperties().mandatoryApprovers();
    }

    /**
     * Set the mandatoryApprovers property: List of mandatory approvers for the approval request.
     * 
     * @param mandatoryApprovers the mandatoryApprovers value to set.
     * @return the ApprovalResourceUpdate object itself.
     */
    public ApprovalResourceUpdate withMandatoryApprovers(List<Approvers> mandatoryApprovers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApprovalPropertiesUpdate();
        }
        this.innerProperties().withMandatoryApprovers(mandatoryApprovers);
        return this;
    }

    /**
     * Get the minimumApproversRequired property: Minimum number of approvers required for the approval request.
     * 
     * @return the minimumApproversRequired value.
     */
    public Long minimumApproversRequired() {
        return this.innerProperties() == null ? null : this.innerProperties().minimumApproversRequired();
    }

    /**
     * Set the minimumApproversRequired property: Minimum number of approvers required for the approval request.
     * 
     * @param minimumApproversRequired the minimumApproversRequired value to set.
     * @return the ApprovalResourceUpdate object itself.
     */
    public ApprovalResourceUpdate withMinimumApproversRequired(Long minimumApproversRequired) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApprovalPropertiesUpdate();
        }
        this.innerProperties().withMinimumApproversRequired(minimumApproversRequired);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApprovalResourceUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApprovalResourceUpdate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApprovalResourceUpdate.
     */
    public static ApprovalResourceUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApprovalResourceUpdate deserializedApprovalResourceUpdate = new ApprovalResourceUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedApprovalResourceUpdate.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedApprovalResourceUpdate.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedApprovalResourceUpdate.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedApprovalResourceUpdate.innerProperties = ApprovalPropertiesUpdate.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedApprovalResourceUpdate.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApprovalResourceUpdate;
        });
    }
}
