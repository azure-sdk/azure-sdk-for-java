// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 * 
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 * 
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 * 
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `&#064;friendlyName` decorator.
 */
@Fluent
public final class UpdateVirtualEnclavePatchProperties
    implements JsonSerializable<UpdateVirtualEnclavePatchProperties> {
    /*
     * Virtual Network.
     */
    private EnclaveVirtualNetwork enclaveVirtualNetwork;

    /*
     * Community Resource Id.
     */
    private String communityResourceId;

    /*
     * Default Settings
     */
    private EnclaveDefaultSettings enclaveDefaultSettings;

    /*
     * List of resource ids created by Virtual Enclave.
     */
    private List<String> resourceCollection;

    /*
     * Managed resource group configuration.
     */
    private ManagedResourceGroupConfiguration managedResourceGroupConfiguration;

    /*
     * Maintenance Mode configuration.
     */
    private MaintenanceModeConfigurationUpdate maintenanceModeConfiguration;

    /*
     * Deploy Bastion service (True or False).
     */
    private Boolean bastionEnabled;

    /*
     * Enclave role assignments
     */
    private List<RoleAssignmentItem> enclaveRoleAssignments;

    /*
     * Workload role assignments
     */
    private List<RoleAssignmentItem> workloadRoleAssignments;

    /**
     * Creates an instance of UpdateVirtualEnclavePatchProperties class.
     */
    public UpdateVirtualEnclavePatchProperties() {
    }

    /**
     * Get the enclaveVirtualNetwork property: Virtual Network.
     * 
     * @return the enclaveVirtualNetwork value.
     */
    public EnclaveVirtualNetwork enclaveVirtualNetwork() {
        return this.enclaveVirtualNetwork;
    }

    /**
     * Set the enclaveVirtualNetwork property: Virtual Network.
     * 
     * @param enclaveVirtualNetwork the enclaveVirtualNetwork value to set.
     * @return the UpdateVirtualEnclavePatchProperties object itself.
     */
    public UpdateVirtualEnclavePatchProperties withEnclaveVirtualNetwork(EnclaveVirtualNetwork enclaveVirtualNetwork) {
        this.enclaveVirtualNetwork = enclaveVirtualNetwork;
        return this;
    }

    /**
     * Get the communityResourceId property: Community Resource Id.
     * 
     * @return the communityResourceId value.
     */
    public String communityResourceId() {
        return this.communityResourceId;
    }

    /**
     * Set the communityResourceId property: Community Resource Id.
     * 
     * @param communityResourceId the communityResourceId value to set.
     * @return the UpdateVirtualEnclavePatchProperties object itself.
     */
    public UpdateVirtualEnclavePatchProperties withCommunityResourceId(String communityResourceId) {
        this.communityResourceId = communityResourceId;
        return this;
    }

    /**
     * Get the enclaveDefaultSettings property: Default Settings.
     * 
     * @return the enclaveDefaultSettings value.
     */
    public EnclaveDefaultSettings enclaveDefaultSettings() {
        return this.enclaveDefaultSettings;
    }

    /**
     * Set the enclaveDefaultSettings property: Default Settings.
     * 
     * @param enclaveDefaultSettings the enclaveDefaultSettings value to set.
     * @return the UpdateVirtualEnclavePatchProperties object itself.
     */
    public UpdateVirtualEnclavePatchProperties
        withEnclaveDefaultSettings(EnclaveDefaultSettings enclaveDefaultSettings) {
        this.enclaveDefaultSettings = enclaveDefaultSettings;
        return this;
    }

    /**
     * Get the resourceCollection property: List of resource ids created by Virtual Enclave.
     * 
     * @return the resourceCollection value.
     */
    public List<String> resourceCollection() {
        return this.resourceCollection;
    }

    /**
     * Set the resourceCollection property: List of resource ids created by Virtual Enclave.
     * 
     * @param resourceCollection the resourceCollection value to set.
     * @return the UpdateVirtualEnclavePatchProperties object itself.
     */
    public UpdateVirtualEnclavePatchProperties withResourceCollection(List<String> resourceCollection) {
        this.resourceCollection = resourceCollection;
        return this;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.managedResourceGroupConfiguration;
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the UpdateVirtualEnclavePatchProperties object itself.
     */
    public UpdateVirtualEnclavePatchProperties
        withManagedResourceGroupConfiguration(ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        this.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
        return this;
    }

    /**
     * Get the maintenanceModeConfiguration property: Maintenance Mode configuration.
     * 
     * @return the maintenanceModeConfiguration value.
     */
    public MaintenanceModeConfigurationUpdate maintenanceModeConfiguration() {
        return this.maintenanceModeConfiguration;
    }

    /**
     * Set the maintenanceModeConfiguration property: Maintenance Mode configuration.
     * 
     * @param maintenanceModeConfiguration the maintenanceModeConfiguration value to set.
     * @return the UpdateVirtualEnclavePatchProperties object itself.
     */
    public UpdateVirtualEnclavePatchProperties
        withMaintenanceModeConfiguration(MaintenanceModeConfigurationUpdate maintenanceModeConfiguration) {
        this.maintenanceModeConfiguration = maintenanceModeConfiguration;
        return this;
    }

    /**
     * Get the bastionEnabled property: Deploy Bastion service (True or False).
     * 
     * @return the bastionEnabled value.
     */
    public Boolean bastionEnabled() {
        return this.bastionEnabled;
    }

    /**
     * Set the bastionEnabled property: Deploy Bastion service (True or False).
     * 
     * @param bastionEnabled the bastionEnabled value to set.
     * @return the UpdateVirtualEnclavePatchProperties object itself.
     */
    public UpdateVirtualEnclavePatchProperties withBastionEnabled(Boolean bastionEnabled) {
        this.bastionEnabled = bastionEnabled;
        return this;
    }

    /**
     * Get the enclaveRoleAssignments property: Enclave role assignments.
     * 
     * @return the enclaveRoleAssignments value.
     */
    public List<RoleAssignmentItem> enclaveRoleAssignments() {
        return this.enclaveRoleAssignments;
    }

    /**
     * Set the enclaveRoleAssignments property: Enclave role assignments.
     * 
     * @param enclaveRoleAssignments the enclaveRoleAssignments value to set.
     * @return the UpdateVirtualEnclavePatchProperties object itself.
     */
    public UpdateVirtualEnclavePatchProperties
        withEnclaveRoleAssignments(List<RoleAssignmentItem> enclaveRoleAssignments) {
        this.enclaveRoleAssignments = enclaveRoleAssignments;
        return this;
    }

    /**
     * Get the workloadRoleAssignments property: Workload role assignments.
     * 
     * @return the workloadRoleAssignments value.
     */
    public List<RoleAssignmentItem> workloadRoleAssignments() {
        return this.workloadRoleAssignments;
    }

    /**
     * Set the workloadRoleAssignments property: Workload role assignments.
     * 
     * @param workloadRoleAssignments the workloadRoleAssignments value to set.
     * @return the UpdateVirtualEnclavePatchProperties object itself.
     */
    public UpdateVirtualEnclavePatchProperties
        withWorkloadRoleAssignments(List<RoleAssignmentItem> workloadRoleAssignments) {
        this.workloadRoleAssignments = workloadRoleAssignments;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (enclaveVirtualNetwork() != null) {
            enclaveVirtualNetwork().validate();
        }
        if (enclaveDefaultSettings() != null) {
            enclaveDefaultSettings().validate();
        }
        if (managedResourceGroupConfiguration() != null) {
            managedResourceGroupConfiguration().validate();
        }
        if (maintenanceModeConfiguration() != null) {
            maintenanceModeConfiguration().validate();
        }
        if (enclaveRoleAssignments() != null) {
            enclaveRoleAssignments().forEach(e -> e.validate());
        }
        if (workloadRoleAssignments() != null) {
            workloadRoleAssignments().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("enclaveVirtualNetwork", this.enclaveVirtualNetwork);
        jsonWriter.writeStringField("communityResourceId", this.communityResourceId);
        jsonWriter.writeJsonField("enclaveDefaultSettings", this.enclaveDefaultSettings);
        jsonWriter.writeArrayField("resourceCollection", this.resourceCollection,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("managedResourceGroupConfiguration", this.managedResourceGroupConfiguration);
        jsonWriter.writeJsonField("maintenanceModeConfiguration", this.maintenanceModeConfiguration);
        jsonWriter.writeBooleanField("bastionEnabled", this.bastionEnabled);
        jsonWriter.writeArrayField("enclaveRoleAssignments", this.enclaveRoleAssignments,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("workloadRoleAssignments", this.workloadRoleAssignments,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateVirtualEnclavePatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateVirtualEnclavePatchProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateVirtualEnclavePatchProperties.
     */
    public static UpdateVirtualEnclavePatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateVirtualEnclavePatchProperties deserializedUpdateVirtualEnclavePatchProperties
                = new UpdateVirtualEnclavePatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enclaveVirtualNetwork".equals(fieldName)) {
                    deserializedUpdateVirtualEnclavePatchProperties.enclaveVirtualNetwork
                        = EnclaveVirtualNetwork.fromJson(reader);
                } else if ("communityResourceId".equals(fieldName)) {
                    deserializedUpdateVirtualEnclavePatchProperties.communityResourceId = reader.getString();
                } else if ("enclaveDefaultSettings".equals(fieldName)) {
                    deserializedUpdateVirtualEnclavePatchProperties.enclaveDefaultSettings
                        = EnclaveDefaultSettings.fromJson(reader);
                } else if ("resourceCollection".equals(fieldName)) {
                    List<String> resourceCollection = reader.readArray(reader1 -> reader1.getString());
                    deserializedUpdateVirtualEnclavePatchProperties.resourceCollection = resourceCollection;
                } else if ("managedResourceGroupConfiguration".equals(fieldName)) {
                    deserializedUpdateVirtualEnclavePatchProperties.managedResourceGroupConfiguration
                        = ManagedResourceGroupConfiguration.fromJson(reader);
                } else if ("maintenanceModeConfiguration".equals(fieldName)) {
                    deserializedUpdateVirtualEnclavePatchProperties.maintenanceModeConfiguration
                        = MaintenanceModeConfigurationUpdate.fromJson(reader);
                } else if ("bastionEnabled".equals(fieldName)) {
                    deserializedUpdateVirtualEnclavePatchProperties.bastionEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("enclaveRoleAssignments".equals(fieldName)) {
                    List<RoleAssignmentItem> enclaveRoleAssignments
                        = reader.readArray(reader1 -> RoleAssignmentItem.fromJson(reader1));
                    deserializedUpdateVirtualEnclavePatchProperties.enclaveRoleAssignments = enclaveRoleAssignments;
                } else if ("workloadRoleAssignments".equals(fieldName)) {
                    List<RoleAssignmentItem> workloadRoleAssignments
                        = reader.readArray(reader1 -> RoleAssignmentItem.fromJson(reader1));
                    deserializedUpdateVirtualEnclavePatchProperties.workloadRoleAssignments = workloadRoleAssignments;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateVirtualEnclavePatchProperties;
        });
    }
}
