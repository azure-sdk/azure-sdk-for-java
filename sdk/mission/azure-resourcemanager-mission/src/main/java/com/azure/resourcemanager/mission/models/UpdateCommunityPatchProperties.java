// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 * 
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 * 
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 * 
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `&#064;friendlyName` decorator.
 */
@Fluent
public final class UpdateCommunityPatchProperties implements JsonSerializable<UpdateCommunityPatchProperties> {
    /*
     * Address Space.
     */
    private String addressSpace;

    /*
     * Dns Servers.
     */
    private List<String> dnsServers;

    /*
     * Managed resource group configuration.
     */
    private ManagedResourceGroupConfiguration managedResourceGroupConfiguration;

    /*
     * List of services governed by a community.
     */
    private List<GovernedServiceItem> governedServiceList;

    /*
     * Community role assignments
     */
    private List<RoleAssignmentItem> communityRoleAssignments;

    /*
     * Approval requirements for various actions on the community's resources.
     */
    private ApprovalSettings approvalSettings;

    /*
     * Maintenance Mode configuration.
     */
    private MaintenanceModeConfigurationUpdate maintenanceModeConfiguration;

    /**
     * Creates an instance of UpdateCommunityPatchProperties class.
     */
    public UpdateCommunityPatchProperties() {
    }

    /**
     * Get the addressSpace property: Address Space.
     * 
     * @return the addressSpace value.
     */
    public String addressSpace() {
        return this.addressSpace;
    }

    /**
     * Set the addressSpace property: Address Space.
     * 
     * @param addressSpace the addressSpace value to set.
     * @return the UpdateCommunityPatchProperties object itself.
     */
    public UpdateCommunityPatchProperties withAddressSpace(String addressSpace) {
        this.addressSpace = addressSpace;
        return this;
    }

    /**
     * Get the dnsServers property: Dns Servers.
     * 
     * @return the dnsServers value.
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Set the dnsServers property: Dns Servers.
     * 
     * @param dnsServers the dnsServers value to set.
     * @return the UpdateCommunityPatchProperties object itself.
     */
    public UpdateCommunityPatchProperties withDnsServers(List<String> dnsServers) {
        this.dnsServers = dnsServers;
        return this;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.managedResourceGroupConfiguration;
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the UpdateCommunityPatchProperties object itself.
     */
    public UpdateCommunityPatchProperties
        withManagedResourceGroupConfiguration(ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        this.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
        return this;
    }

    /**
     * Get the governedServiceList property: List of services governed by a community.
     * 
     * @return the governedServiceList value.
     */
    public List<GovernedServiceItem> governedServiceList() {
        return this.governedServiceList;
    }

    /**
     * Set the governedServiceList property: List of services governed by a community.
     * 
     * @param governedServiceList the governedServiceList value to set.
     * @return the UpdateCommunityPatchProperties object itself.
     */
    public UpdateCommunityPatchProperties withGovernedServiceList(List<GovernedServiceItem> governedServiceList) {
        this.governedServiceList = governedServiceList;
        return this;
    }

    /**
     * Get the communityRoleAssignments property: Community role assignments.
     * 
     * @return the communityRoleAssignments value.
     */
    public List<RoleAssignmentItem> communityRoleAssignments() {
        return this.communityRoleAssignments;
    }

    /**
     * Set the communityRoleAssignments property: Community role assignments.
     * 
     * @param communityRoleAssignments the communityRoleAssignments value to set.
     * @return the UpdateCommunityPatchProperties object itself.
     */
    public UpdateCommunityPatchProperties
        withCommunityRoleAssignments(List<RoleAssignmentItem> communityRoleAssignments) {
        this.communityRoleAssignments = communityRoleAssignments;
        return this;
    }

    /**
     * Get the approvalSettings property: Approval requirements for various actions on the community's resources.
     * 
     * @return the approvalSettings value.
     */
    public ApprovalSettings approvalSettings() {
        return this.approvalSettings;
    }

    /**
     * Set the approvalSettings property: Approval requirements for various actions on the community's resources.
     * 
     * @param approvalSettings the approvalSettings value to set.
     * @return the UpdateCommunityPatchProperties object itself.
     */
    public UpdateCommunityPatchProperties withApprovalSettings(ApprovalSettings approvalSettings) {
        this.approvalSettings = approvalSettings;
        return this;
    }

    /**
     * Get the maintenanceModeConfiguration property: Maintenance Mode configuration.
     * 
     * @return the maintenanceModeConfiguration value.
     */
    public MaintenanceModeConfigurationUpdate maintenanceModeConfiguration() {
        return this.maintenanceModeConfiguration;
    }

    /**
     * Set the maintenanceModeConfiguration property: Maintenance Mode configuration.
     * 
     * @param maintenanceModeConfiguration the maintenanceModeConfiguration value to set.
     * @return the UpdateCommunityPatchProperties object itself.
     */
    public UpdateCommunityPatchProperties
        withMaintenanceModeConfiguration(MaintenanceModeConfigurationUpdate maintenanceModeConfiguration) {
        this.maintenanceModeConfiguration = maintenanceModeConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedResourceGroupConfiguration() != null) {
            managedResourceGroupConfiguration().validate();
        }
        if (governedServiceList() != null) {
            governedServiceList().forEach(e -> e.validate());
        }
        if (communityRoleAssignments() != null) {
            communityRoleAssignments().forEach(e -> e.validate());
        }
        if (approvalSettings() != null) {
            approvalSettings().validate();
        }
        if (maintenanceModeConfiguration() != null) {
            maintenanceModeConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("addressSpace", this.addressSpace);
        jsonWriter.writeArrayField("dnsServers", this.dnsServers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("managedResourceGroupConfiguration", this.managedResourceGroupConfiguration);
        jsonWriter.writeArrayField("governedServiceList", this.governedServiceList,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("communityRoleAssignments", this.communityRoleAssignments,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("approvalSettings", this.approvalSettings);
        jsonWriter.writeJsonField("maintenanceModeConfiguration", this.maintenanceModeConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateCommunityPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateCommunityPatchProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateCommunityPatchProperties.
     */
    public static UpdateCommunityPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateCommunityPatchProperties deserializedUpdateCommunityPatchProperties
                = new UpdateCommunityPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("addressSpace".equals(fieldName)) {
                    deserializedUpdateCommunityPatchProperties.addressSpace = reader.getString();
                } else if ("dnsServers".equals(fieldName)) {
                    List<String> dnsServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedUpdateCommunityPatchProperties.dnsServers = dnsServers;
                } else if ("managedResourceGroupConfiguration".equals(fieldName)) {
                    deserializedUpdateCommunityPatchProperties.managedResourceGroupConfiguration
                        = ManagedResourceGroupConfiguration.fromJson(reader);
                } else if ("governedServiceList".equals(fieldName)) {
                    List<GovernedServiceItem> governedServiceList
                        = reader.readArray(reader1 -> GovernedServiceItem.fromJson(reader1));
                    deserializedUpdateCommunityPatchProperties.governedServiceList = governedServiceList;
                } else if ("communityRoleAssignments".equals(fieldName)) {
                    List<RoleAssignmentItem> communityRoleAssignments
                        = reader.readArray(reader1 -> RoleAssignmentItem.fromJson(reader1));
                    deserializedUpdateCommunityPatchProperties.communityRoleAssignments = communityRoleAssignments;
                } else if ("approvalSettings".equals(fieldName)) {
                    deserializedUpdateCommunityPatchProperties.approvalSettings = ApprovalSettings.fromJson(reader);
                } else if ("maintenanceModeConfiguration".equals(fieldName)) {
                    deserializedUpdateCommunityPatchProperties.maintenanceModeConfiguration
                        = MaintenanceModeConfigurationUpdate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateCommunityPatchProperties;
        });
    }
}
