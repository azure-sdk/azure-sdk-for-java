// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mission.fluent.models.EnclaveConnectionResourceInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of EnclaveConnectionResource.
 */
public interface EnclaveConnectionResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the state property: The state of the enclaveConnection.
     * 
     * @return the state value.
     */
    EnclaveConnectionState state();

    /**
     * Gets the communityResourceId property: Community Resource Id.
     * 
     * @return the communityResourceId value.
     */
    String communityResourceId();

    /**
     * Gets the sourceResourceId property: Source Resource Id.
     * 
     * @return the sourceResourceId value.
     */
    String sourceResourceId();

    /**
     * Gets the sourceCidr property: Source CIDR.
     * 
     * @return the sourceCidr value.
     */
    String sourceCidr();

    /**
     * Gets the ipGroup property: Source IP group Resource Id.
     * 
     * @return the ipGroup value.
     */
    String ipGroup();

    /**
     * Gets the destinationEndpointId property: Destination Endpoint Resource Id.
     * 
     * @return the destinationEndpointId value.
     */
    String destinationEndpointId();

    /**
     * Gets the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the resourceCollection property: List of resource ids modified by enclave Connections.
     * 
     * @return the resourceCollection value.
     */
    List<String> resourceCollection();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.mission.fluent.models.EnclaveConnectionResourceInner object.
     * 
     * @return the inner object.
     */
    EnclaveConnectionResourceInner innerModel();

    /**
     * The entirety of the EnclaveConnectionResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The EnclaveConnectionResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the EnclaveConnectionResource definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the EnclaveConnectionResource definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the EnclaveConnectionResource definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the EnclaveConnectionResource definition which contains all the minimum required properties for
         * the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags, DefinitionStages.WithState, DefinitionStages.WithCommunityResourceId,
            DefinitionStages.WithSourceResourceId, DefinitionStages.WithSourceCidr, DefinitionStages.WithIpGroup,
            DefinitionStages.WithDestinationEndpointId, DefinitionStages.WithResourceCollection {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            EnclaveConnectionResource create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            EnclaveConnectionResource create(Context context);
        }

        /**
         * The stage of the EnclaveConnectionResource definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the EnclaveConnectionResource definition allowing to specify state.
         */
        interface WithState {
            /**
             * Specifies the state property: The state of the enclaveConnection..
             * 
             * @param state The state of the enclaveConnection.
             * @return the next definition stage.
             */
            WithCreate withState(EnclaveConnectionState state);
        }

        /**
         * The stage of the EnclaveConnectionResource definition allowing to specify communityResourceId.
         */
        interface WithCommunityResourceId {
            /**
             * Specifies the communityResourceId property: Community Resource Id..
             * 
             * @param communityResourceId Community Resource Id.
             * @return the next definition stage.
             */
            WithCreate withCommunityResourceId(String communityResourceId);
        }

        /**
         * The stage of the EnclaveConnectionResource definition allowing to specify sourceResourceId.
         */
        interface WithSourceResourceId {
            /**
             * Specifies the sourceResourceId property: Source Resource Id..
             * 
             * @param sourceResourceId Source Resource Id.
             * @return the next definition stage.
             */
            WithCreate withSourceResourceId(String sourceResourceId);
        }

        /**
         * The stage of the EnclaveConnectionResource definition allowing to specify sourceCidr.
         */
        interface WithSourceCidr {
            /**
             * Specifies the sourceCidr property: Source CIDR..
             * 
             * @param sourceCidr Source CIDR.
             * @return the next definition stage.
             */
            WithCreate withSourceCidr(String sourceCidr);
        }

        /**
         * The stage of the EnclaveConnectionResource definition allowing to specify ipGroup.
         */
        interface WithIpGroup {
            /**
             * Specifies the ipGroup property: Source IP group Resource Id..
             * 
             * @param ipGroup Source IP group Resource Id.
             * @return the next definition stage.
             */
            WithCreate withIpGroup(String ipGroup);
        }

        /**
         * The stage of the EnclaveConnectionResource definition allowing to specify destinationEndpointId.
         */
        interface WithDestinationEndpointId {
            /**
             * Specifies the destinationEndpointId property: Destination Endpoint Resource Id..
             * 
             * @param destinationEndpointId Destination Endpoint Resource Id.
             * @return the next definition stage.
             */
            WithCreate withDestinationEndpointId(String destinationEndpointId);
        }

        /**
         * The stage of the EnclaveConnectionResource definition allowing to specify resourceCollection.
         */
        interface WithResourceCollection {
            /**
             * Specifies the resourceCollection property: List of resource ids modified by enclave Connections..
             * 
             * @param resourceCollection List of resource ids modified by enclave Connections.
             * @return the next definition stage.
             */
            WithCreate withResourceCollection(List<String> resourceCollection);
        }
    }

    /**
     * Begins update for the EnclaveConnectionResource resource.
     * 
     * @return the stage of resource update.
     */
    EnclaveConnectionResource.Update update();

    /**
     * The template for EnclaveConnectionResource update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithState, UpdateStages.WithCommunityResourceId,
        UpdateStages.WithSourceResourceId, UpdateStages.WithSourceCidr, UpdateStages.WithIpGroup,
        UpdateStages.WithDestinationEndpointId, UpdateStages.WithResourceCollection {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        EnclaveConnectionResource apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        EnclaveConnectionResource apply(Context context);
    }

    /**
     * The EnclaveConnectionResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the EnclaveConnectionResource update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the EnclaveConnectionResource update allowing to specify state.
         */
        interface WithState {
            /**
             * Specifies the state property: The state of the enclaveConnection..
             * 
             * @param state The state of the enclaveConnection.
             * @return the next definition stage.
             */
            Update withState(EnclaveConnectionState state);
        }

        /**
         * The stage of the EnclaveConnectionResource update allowing to specify communityResourceId.
         */
        interface WithCommunityResourceId {
            /**
             * Specifies the communityResourceId property: Community Resource Id..
             * 
             * @param communityResourceId Community Resource Id.
             * @return the next definition stage.
             */
            Update withCommunityResourceId(String communityResourceId);
        }

        /**
         * The stage of the EnclaveConnectionResource update allowing to specify sourceResourceId.
         */
        interface WithSourceResourceId {
            /**
             * Specifies the sourceResourceId property: Source Resource Id..
             * 
             * @param sourceResourceId Source Resource Id.
             * @return the next definition stage.
             */
            Update withSourceResourceId(String sourceResourceId);
        }

        /**
         * The stage of the EnclaveConnectionResource update allowing to specify sourceCidr.
         */
        interface WithSourceCidr {
            /**
             * Specifies the sourceCidr property: Source CIDR..
             * 
             * @param sourceCidr Source CIDR.
             * @return the next definition stage.
             */
            Update withSourceCidr(String sourceCidr);
        }

        /**
         * The stage of the EnclaveConnectionResource update allowing to specify ipGroup.
         */
        interface WithIpGroup {
            /**
             * Specifies the ipGroup property: Source IP group Resource Id..
             * 
             * @param ipGroup Source IP group Resource Id.
             * @return the next definition stage.
             */
            Update withIpGroup(String ipGroup);
        }

        /**
         * The stage of the EnclaveConnectionResource update allowing to specify destinationEndpointId.
         */
        interface WithDestinationEndpointId {
            /**
             * Specifies the destinationEndpointId property: Destination Endpoint Resource Id..
             * 
             * @param destinationEndpointId Destination Endpoint Resource Id.
             * @return the next definition stage.
             */
            Update withDestinationEndpointId(String destinationEndpointId);
        }

        /**
         * The stage of the EnclaveConnectionResource update allowing to specify resourceCollection.
         */
        interface WithResourceCollection {
            /**
             * Specifies the resourceCollection property: List of resource ids modified by enclave Connections..
             * 
             * @param resourceCollection List of resource ids modified by enclave Connections.
             * @return the next definition stage.
             */
            Update withResourceCollection(List<String> resourceCollection);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    EnclaveConnectionResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    EnclaveConnectionResource refresh(Context context);

    /**
     * Callback that triggers on approval state change.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest.
     */
    ApprovalCallbackResponse approvalCallback(ApprovalCallbackRequest body);

    /**
     * Callback that triggers on approval state change.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest.
     */
    ApprovalCallbackResponse approvalCallback(ApprovalCallbackRequest body, Context context);

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest.
     */
    ApprovalDeletionCallbackResponse approvalDeletionCallback(ApprovalDeletionCallbackRequest body);

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest.
     */
    ApprovalDeletionCallbackResponse approvalDeletionCallback(ApprovalDeletionCallbackRequest body, Context context);
}
