// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mission.models.ExternalConnectionState;
import java.io.IOException;
import java.util.List;

/**
 * Describes the properties of an External Connection.
 */
@Fluent
public final class ExternalConnectionPropertiesUpdate implements JsonSerializable<ExternalConnectionPropertiesUpdate> {
    /*
     * The state of the externalConnection.
     */
    private ExternalConnectionState state;

    /*
     * Community Resource Id.
     */
    private String communityResourceId;

    /*
     * The enclaves' resource IDs.
     */
    private List<String> enclaveIds;

    /*
     * The external CIDR IP addresses.
     */
    private List<String> externalCidrs;

    /*
     * List of resource ids modified by externalConnections.
     */
    private List<String> resourceCollection;

    /**
     * Creates an instance of ExternalConnectionPropertiesUpdate class.
     */
    public ExternalConnectionPropertiesUpdate() {
    }

    /**
     * Get the state property: The state of the externalConnection.
     * 
     * @return the state value.
     */
    public ExternalConnectionState state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the externalConnection.
     * 
     * @param state the state value to set.
     * @return the ExternalConnectionPropertiesUpdate object itself.
     */
    public ExternalConnectionPropertiesUpdate withState(ExternalConnectionState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the communityResourceId property: Community Resource Id.
     * 
     * @return the communityResourceId value.
     */
    public String communityResourceId() {
        return this.communityResourceId;
    }

    /**
     * Set the communityResourceId property: Community Resource Id.
     * 
     * @param communityResourceId the communityResourceId value to set.
     * @return the ExternalConnectionPropertiesUpdate object itself.
     */
    public ExternalConnectionPropertiesUpdate withCommunityResourceId(String communityResourceId) {
        this.communityResourceId = communityResourceId;
        return this;
    }

    /**
     * Get the enclaveIds property: The enclaves' resource IDs.
     * 
     * @return the enclaveIds value.
     */
    public List<String> enclaveIds() {
        return this.enclaveIds;
    }

    /**
     * Set the enclaveIds property: The enclaves' resource IDs.
     * 
     * @param enclaveIds the enclaveIds value to set.
     * @return the ExternalConnectionPropertiesUpdate object itself.
     */
    public ExternalConnectionPropertiesUpdate withEnclaveIds(List<String> enclaveIds) {
        this.enclaveIds = enclaveIds;
        return this;
    }

    /**
     * Get the externalCidrs property: The external CIDR IP addresses.
     * 
     * @return the externalCidrs value.
     */
    public List<String> externalCidrs() {
        return this.externalCidrs;
    }

    /**
     * Set the externalCidrs property: The external CIDR IP addresses.
     * 
     * @param externalCidrs the externalCidrs value to set.
     * @return the ExternalConnectionPropertiesUpdate object itself.
     */
    public ExternalConnectionPropertiesUpdate withExternalCidrs(List<String> externalCidrs) {
        this.externalCidrs = externalCidrs;
        return this;
    }

    /**
     * Get the resourceCollection property: List of resource ids modified by externalConnections.
     * 
     * @return the resourceCollection value.
     */
    public List<String> resourceCollection() {
        return this.resourceCollection;
    }

    /**
     * Set the resourceCollection property: List of resource ids modified by externalConnections.
     * 
     * @param resourceCollection the resourceCollection value to set.
     * @return the ExternalConnectionPropertiesUpdate object itself.
     */
    public ExternalConnectionPropertiesUpdate withResourceCollection(List<String> resourceCollection) {
        this.resourceCollection = resourceCollection;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("communityResourceId", this.communityResourceId);
        jsonWriter.writeArrayField("enclaveIds", this.enclaveIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("externalCidrs", this.externalCidrs,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("resourceCollection", this.resourceCollection,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExternalConnectionPropertiesUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExternalConnectionPropertiesUpdate if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExternalConnectionPropertiesUpdate.
     */
    public static ExternalConnectionPropertiesUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExternalConnectionPropertiesUpdate deserializedExternalConnectionPropertiesUpdate
                = new ExternalConnectionPropertiesUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedExternalConnectionPropertiesUpdate.state
                        = ExternalConnectionState.fromString(reader.getString());
                } else if ("communityResourceId".equals(fieldName)) {
                    deserializedExternalConnectionPropertiesUpdate.communityResourceId = reader.getString();
                } else if ("enclaveIds".equals(fieldName)) {
                    List<String> enclaveIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedExternalConnectionPropertiesUpdate.enclaveIds = enclaveIds;
                } else if ("externalCidrs".equals(fieldName)) {
                    List<String> externalCidrs = reader.readArray(reader1 -> reader1.getString());
                    deserializedExternalConnectionPropertiesUpdate.externalCidrs = externalCidrs;
                } else if ("resourceCollection".equals(fieldName)) {
                    List<String> resourceCollection = reader.readArray(reader1 -> reader1.getString());
                    deserializedExternalConnectionPropertiesUpdate.resourceCollection = resourceCollection;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExternalConnectionPropertiesUpdate;
        });
    }
}
