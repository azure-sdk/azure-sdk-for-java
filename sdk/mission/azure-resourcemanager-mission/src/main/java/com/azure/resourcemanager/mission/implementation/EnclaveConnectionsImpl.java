// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mission.fluent.EnclaveConnectionsClient;
import com.azure.resourcemanager.mission.fluent.models.ApprovalCallbackResponseInner;
import com.azure.resourcemanager.mission.fluent.models.ApprovalDeletionCallbackResponseInner;
import com.azure.resourcemanager.mission.fluent.models.EnclaveConnectionResourceInner;
import com.azure.resourcemanager.mission.models.ApprovalCallbackRequest;
import com.azure.resourcemanager.mission.models.ApprovalCallbackResponse;
import com.azure.resourcemanager.mission.models.ApprovalDeletionCallbackRequest;
import com.azure.resourcemanager.mission.models.ApprovalDeletionCallbackResponse;
import com.azure.resourcemanager.mission.models.EnclaveConnectionResource;
import com.azure.resourcemanager.mission.models.EnclaveConnections;

public final class EnclaveConnectionsImpl implements EnclaveConnections {
    private static final ClientLogger LOGGER = new ClientLogger(EnclaveConnectionsImpl.class);

    private final EnclaveConnectionsClient innerClient;

    private final com.azure.resourcemanager.mission.MissionManager serviceManager;

    public EnclaveConnectionsImpl(EnclaveConnectionsClient innerClient,
        com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<EnclaveConnectionResource> list() {
        PagedIterable<EnclaveConnectionResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveConnectionResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EnclaveConnectionResource> list(Context context) {
        PagedIterable<EnclaveConnectionResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveConnectionResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EnclaveConnectionResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<EnclaveConnectionResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveConnectionResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EnclaveConnectionResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<EnclaveConnectionResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveConnectionResourceImpl(inner1, this.manager()));
    }

    public Response<EnclaveConnectionResource> getByResourceGroupWithResponse(String resourceGroupName,
        String enclaveConnectionName, Context context) {
        Response<EnclaveConnectionResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, enclaveConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EnclaveConnectionResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EnclaveConnectionResource getByResourceGroup(String resourceGroupName, String enclaveConnectionName) {
        EnclaveConnectionResourceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, enclaveConnectionName);
        if (inner != null) {
            return new EnclaveConnectionResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String enclaveConnectionName) {
        this.serviceClient().delete(resourceGroupName, enclaveConnectionName);
    }

    public void delete(String resourceGroupName, String enclaveConnectionName, Context context) {
        this.serviceClient().delete(resourceGroupName, enclaveConnectionName, context);
    }

    public ApprovalCallbackResponse approvalCallback(String resourceGroupName, String enclaveConnectionName,
        ApprovalCallbackRequest body) {
        ApprovalCallbackResponseInner inner
            = this.serviceClient().approvalCallback(resourceGroupName, enclaveConnectionName, body);
        if (inner != null) {
            return new ApprovalCallbackResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalCallbackResponse approvalCallback(String resourceGroupName, String enclaveConnectionName,
        ApprovalCallbackRequest body, Context context) {
        ApprovalCallbackResponseInner inner
            = this.serviceClient().approvalCallback(resourceGroupName, enclaveConnectionName, body, context);
        if (inner != null) {
            return new ApprovalCallbackResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalDeletionCallbackResponse approvalDeletionCallback(String resourceGroupName,
        String enclaveConnectionName, ApprovalDeletionCallbackRequest body) {
        ApprovalDeletionCallbackResponseInner inner
            = this.serviceClient().approvalDeletionCallback(resourceGroupName, enclaveConnectionName, body);
        if (inner != null) {
            return new ApprovalDeletionCallbackResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalDeletionCallbackResponse approvalDeletionCallback(String resourceGroupName,
        String enclaveConnectionName, ApprovalDeletionCallbackRequest body, Context context) {
        ApprovalDeletionCallbackResponseInner inner
            = this.serviceClient().approvalDeletionCallback(resourceGroupName, enclaveConnectionName, body, context);
        if (inner != null) {
            return new ApprovalDeletionCallbackResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EnclaveConnectionResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String enclaveConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "enclaveConnections");
        if (enclaveConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'enclaveConnections'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, enclaveConnectionName, Context.NONE).getValue();
    }

    public Response<EnclaveConnectionResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String enclaveConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "enclaveConnections");
        if (enclaveConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'enclaveConnections'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, enclaveConnectionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String enclaveConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "enclaveConnections");
        if (enclaveConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'enclaveConnections'.", id)));
        }
        this.delete(resourceGroupName, enclaveConnectionName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String enclaveConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "enclaveConnections");
        if (enclaveConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'enclaveConnections'.", id)));
        }
        this.delete(resourceGroupName, enclaveConnectionName, context);
    }

    private EnclaveConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.mission.MissionManager manager() {
        return this.serviceManager;
    }

    public EnclaveConnectionResourceImpl define(String name) {
        return new EnclaveConnectionResourceImpl(name, this.manager());
    }
}
