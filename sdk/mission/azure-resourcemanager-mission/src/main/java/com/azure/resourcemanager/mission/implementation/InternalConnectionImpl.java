// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mission.fluent.models.InternalConnectionInner;
import com.azure.resourcemanager.mission.models.InternalConnection;
import com.azure.resourcemanager.mission.models.InternalConnectionState;
import com.azure.resourcemanager.mission.models.InternalConnectionType;
import com.azure.resourcemanager.mission.models.InternalConnectionUpdate;
import com.azure.resourcemanager.mission.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class InternalConnectionImpl
    implements InternalConnection, InternalConnection.Definition, InternalConnection.Update {
    private InternalConnectionInner innerObject;

    private final com.azure.resourcemanager.mission.MissionManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public InternalConnectionType connectionType() {
        return this.innerModel().connectionType();
    }

    public InternalConnectionState state() {
        return this.innerModel().state();
    }

    public String communityResourceId() {
        return this.innerModel().communityResourceId();
    }

    public String destinationEnclaveId() {
        return this.innerModel().destinationEnclaveId();
    }

    public String destinationEndpointId() {
        return this.innerModel().destinationEndpointId();
    }

    public String sourceEnclaveId() {
        return this.innerModel().sourceEnclaveId();
    }

    public List<String> sourceCidrs() {
        List<String> inner = this.innerModel().sourceCidrs();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> resourceCollection() {
        List<String> inner = this.innerModel().resourceCollection();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public InternalConnectionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mission.MissionManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String internalConnectionName;

    private InternalConnectionUpdate updateProperties;

    public InternalConnectionImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public InternalConnection create() {
        this.innerObject = serviceManager.serviceClient()
            .getInternalConnections()
            .createOrUpdate(resourceGroupName, internalConnectionName, this.innerModel(), Context.NONE);
        return this;
    }

    public InternalConnection create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getInternalConnections()
            .createOrUpdate(resourceGroupName, internalConnectionName, this.innerModel(), context);
        return this;
    }

    InternalConnectionImpl(String name, com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerObject = new InternalConnectionInner();
        this.serviceManager = serviceManager;
        this.internalConnectionName = name;
    }

    public InternalConnectionImpl update() {
        this.updateProperties = new InternalConnectionUpdate();
        return this;
    }

    public InternalConnection apply() {
        this.innerObject = serviceManager.serviceClient()
            .getInternalConnections()
            .update(resourceGroupName, internalConnectionName, updateProperties, Context.NONE);
        return this;
    }

    public InternalConnection apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getInternalConnections()
            .update(resourceGroupName, internalConnectionName, updateProperties, context);
        return this;
    }

    InternalConnectionImpl(InternalConnectionInner innerObject,
        com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.internalConnectionName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "internalConnections");
    }

    public InternalConnection refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getInternalConnections()
            .getByResourceGroupWithResponse(resourceGroupName, internalConnectionName, Context.NONE)
            .getValue();
        return this;
    }

    public InternalConnection refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getInternalConnections()
            .getByResourceGroupWithResponse(resourceGroupName, internalConnectionName, context)
            .getValue();
        return this;
    }

    public InternalConnectionImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public InternalConnectionImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public InternalConnectionImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public InternalConnectionImpl withConnectionType(InternalConnectionType connectionType) {
        if (isInCreateMode()) {
            this.innerModel().withConnectionType(connectionType);
            return this;
        } else {
            this.updateProperties.withConnectionType(connectionType);
            return this;
        }
    }

    public InternalConnectionImpl withState(InternalConnectionState state) {
        if (isInCreateMode()) {
            this.innerModel().withState(state);
            return this;
        } else {
            this.updateProperties.withState(state);
            return this;
        }
    }

    public InternalConnectionImpl withCommunityResourceId(String communityResourceId) {
        if (isInCreateMode()) {
            this.innerModel().withCommunityResourceId(communityResourceId);
            return this;
        } else {
            this.updateProperties.withCommunityResourceId(communityResourceId);
            return this;
        }
    }

    public InternalConnectionImpl withDestinationEnclaveId(String destinationEnclaveId) {
        if (isInCreateMode()) {
            this.innerModel().withDestinationEnclaveId(destinationEnclaveId);
            return this;
        } else {
            this.updateProperties.withDestinationEnclaveId(destinationEnclaveId);
            return this;
        }
    }

    public InternalConnectionImpl withDestinationEndpointId(String destinationEndpointId) {
        if (isInCreateMode()) {
            this.innerModel().withDestinationEndpointId(destinationEndpointId);
            return this;
        } else {
            this.updateProperties.withDestinationEndpointId(destinationEndpointId);
            return this;
        }
    }

    public InternalConnectionImpl withSourceEnclaveId(String sourceEnclaveId) {
        if (isInCreateMode()) {
            this.innerModel().withSourceEnclaveId(sourceEnclaveId);
            return this;
        } else {
            this.updateProperties.withSourceEnclaveId(sourceEnclaveId);
            return this;
        }
    }

    public InternalConnectionImpl withSourceCidrs(List<String> sourceCidrs) {
        if (isInCreateMode()) {
            this.innerModel().withSourceCidrs(sourceCidrs);
            return this;
        } else {
            this.updateProperties.withSourceCidrs(sourceCidrs);
            return this;
        }
    }

    public InternalConnectionImpl withResourceCollection(List<String> resourceCollection) {
        if (isInCreateMode()) {
            this.innerModel().withResourceCollection(resourceCollection);
            return this;
        } else {
            this.updateProperties.withResourceCollection(resourceCollection);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
