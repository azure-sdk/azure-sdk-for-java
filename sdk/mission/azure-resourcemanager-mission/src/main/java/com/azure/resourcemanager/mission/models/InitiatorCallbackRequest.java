// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request body for calling post-action.
 */
@Fluent
public final class InitiatorCallbackRequest implements JsonSerializable<InitiatorCallbackRequest> {
    /*
     * Approval status indicating 'Approved' or 'Rejected'
     */
    private InitiatorCallbackRequestApprovalStatus approvalStatus;

    /**
     * Creates an instance of InitiatorCallbackRequest class.
     */
    public InitiatorCallbackRequest() {
    }

    /**
     * Get the approvalStatus property: Approval status indicating 'Approved' or 'Rejected'.
     * 
     * @return the approvalStatus value.
     */
    public InitiatorCallbackRequestApprovalStatus approvalStatus() {
        return this.approvalStatus;
    }

    /**
     * Set the approvalStatus property: Approval status indicating 'Approved' or 'Rejected'.
     * 
     * @param approvalStatus the approvalStatus value to set.
     * @return the InitiatorCallbackRequest object itself.
     */
    public InitiatorCallbackRequest withApprovalStatus(InitiatorCallbackRequestApprovalStatus approvalStatus) {
        this.approvalStatus = approvalStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (approvalStatus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property approvalStatus in model InitiatorCallbackRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InitiatorCallbackRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("approvalStatus",
            this.approvalStatus == null ? null : this.approvalStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InitiatorCallbackRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InitiatorCallbackRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InitiatorCallbackRequest.
     */
    public static InitiatorCallbackRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InitiatorCallbackRequest deserializedInitiatorCallbackRequest = new InitiatorCallbackRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("approvalStatus".equals(fieldName)) {
                    deserializedInitiatorCallbackRequest.approvalStatus
                        = InitiatorCallbackRequestApprovalStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInitiatorCallbackRequest;
        });
    }
}
