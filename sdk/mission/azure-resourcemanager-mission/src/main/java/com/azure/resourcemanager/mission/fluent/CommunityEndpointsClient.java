// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.mission.fluent.models.ApprovalCallbackResponseInner;
import com.azure.resourcemanager.mission.fluent.models.ApprovalDeletionCallbackResponseInner;
import com.azure.resourcemanager.mission.fluent.models.CommunityEndpointResourceInner;
import com.azure.resourcemanager.mission.models.ApprovalCallbackRequest;
import com.azure.resourcemanager.mission.models.ApprovalDeletionCallbackRequest;
import com.azure.resourcemanager.mission.models.CommunityEndpointResourceUpdate;

/**
 * An instance of this class provides access to all the operations defined in CommunityEndpointsClient.
 */
public interface CommunityEndpointsClient {
    /**
     * List CommunityEndpointResource resources by subscription ID.
     * 
     * @param communityName The name of the communityResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CommunityEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CommunityEndpointResourceInner> listBySubscription(String communityName);

    /**
     * List CommunityEndpointResource resources by subscription ID.
     * 
     * @param communityName The name of the communityResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CommunityEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CommunityEndpointResourceInner> listBySubscription(String communityName, Context context);

    /**
     * List CommunityEndpointResource resources by CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CommunityEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CommunityEndpointResourceInner> listByCommunityResource(String resourceGroupName,
        String communityName);

    /**
     * List CommunityEndpointResource resources by CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CommunityEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CommunityEndpointResourceInner> listByCommunityResource(String resourceGroupName,
        String communityName, Context context);

    /**
     * Get a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CommunityEndpointResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CommunityEndpointResourceInner> getWithResponse(String resourceGroupName, String communityName,
        String communityEndpointName, Context context);

    /**
     * Get a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CommunityEndpointResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommunityEndpointResourceInner get(String resourceGroupName, String communityName, String communityEndpointName);

    /**
     * Create a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of communityEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommunityEndpointResourceInner>, CommunityEndpointResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String communityName, String communityEndpointName,
        CommunityEndpointResourceInner resource);

    /**
     * Create a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of communityEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommunityEndpointResourceInner>, CommunityEndpointResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String communityName, String communityEndpointName,
        CommunityEndpointResourceInner resource, Context context);

    /**
     * Create a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return communityEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommunityEndpointResourceInner createOrUpdate(String resourceGroupName, String communityName,
        String communityEndpointName, CommunityEndpointResourceInner resource);

    /**
     * Create a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return communityEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommunityEndpointResourceInner createOrUpdate(String resourceGroupName, String communityName,
        String communityEndpointName, CommunityEndpointResourceInner resource, Context context);

    /**
     * Update a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of communityEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommunityEndpointResourceInner>, CommunityEndpointResourceInner> beginUpdate(
        String resourceGroupName, String communityName, String communityEndpointName,
        CommunityEndpointResourceUpdate properties);

    /**
     * Update a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of communityEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommunityEndpointResourceInner>, CommunityEndpointResourceInner> beginUpdate(
        String resourceGroupName, String communityName, String communityEndpointName,
        CommunityEndpointResourceUpdate properties, Context context);

    /**
     * Update a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return communityEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommunityEndpointResourceInner update(String resourceGroupName, String communityName, String communityEndpointName,
        CommunityEndpointResourceUpdate properties);

    /**
     * Update a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return communityEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommunityEndpointResourceInner update(String resourceGroupName, String communityName, String communityEndpointName,
        CommunityEndpointResourceUpdate properties, Context context);

    /**
     * Delete a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String communityName,
        String communityEndpointName);

    /**
     * Delete a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String communityName,
        String communityEndpointName, Context context);

    /**
     * Delete a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String communityName, String communityEndpointName);

    /**
     * Delete a CommunityEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String communityName, String communityEndpointName, Context context);

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApprovalCallbackResponseInner>, ApprovalCallbackResponseInner> beginApprovalCallback(
        String resourceGroupName, String communityName, String communityEndpointName, ApprovalCallbackRequest body);

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApprovalCallbackResponseInner>, ApprovalCallbackResponseInner> beginApprovalCallback(
        String resourceGroupName, String communityName, String communityEndpointName, ApprovalCallbackRequest body,
        Context context);

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApprovalCallbackResponseInner approvalCallback(String resourceGroupName, String communityName,
        String communityEndpointName, ApprovalCallbackRequest body);

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApprovalCallbackResponseInner approvalCallback(String resourceGroupName, String communityName,
        String communityEndpointName, ApprovalCallbackRequest body, Context context);

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of response body after handling of approvalDeletionCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApprovalDeletionCallbackResponseInner>, ApprovalDeletionCallbackResponseInner>
        beginApprovalDeletionCallback(String resourceGroupName, String communityName, String communityEndpointName,
            ApprovalDeletionCallbackRequest body);

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of response body after handling of approvalDeletionCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApprovalDeletionCallbackResponseInner>, ApprovalDeletionCallbackResponseInner>
        beginApprovalDeletionCallback(String resourceGroupName, String communityName, String communityEndpointName,
            ApprovalDeletionCallbackRequest body, Context context);

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApprovalDeletionCallbackResponseInner approvalDeletionCallback(String resourceGroupName, String communityName,
        String communityEndpointName, ApprovalDeletionCallbackRequest body);

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param communityEndpointName The name of the Community Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApprovalDeletionCallbackResponseInner approvalDeletionCallback(String resourceGroupName, String communityName,
        String communityEndpointName, ApprovalDeletionCallbackRequest body, Context context);
}
