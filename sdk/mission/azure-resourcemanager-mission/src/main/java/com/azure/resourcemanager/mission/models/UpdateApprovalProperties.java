// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 * 
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 * 
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 * 
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `&#064;friendlyName` decorator.
 */
@Fluent
public final class UpdateApprovalProperties implements JsonSerializable<UpdateApprovalProperties> {
    /*
     * Parameter for optimizing query results
     */
    private String parent1;

    /*
     * Parameter for optimizing query results
     */
    private String parent2;

    /*
     * Request metadata for the approval request.
     */
    private RequestMetadataUpdate requestMetadata;

    /*
     * List of approvers for the approval request
     */
    private List<Approver> approvers;

    /*
     * Ticket ID for the approval request
     */
    private String ticketId;

    /*
     * Approval request creation time
     */
    private OffsetDateTime createdAt;

    /*
     * Approval request state change time, time at which approval request state changed from pending to approved or
     * rejected.
     */
    private OffsetDateTime stateChangedAt;

    /**
     * Creates an instance of UpdateApprovalProperties class.
     */
    public UpdateApprovalProperties() {
    }

    /**
     * Get the parent1 property: Parameter for optimizing query results.
     * 
     * @return the parent1 value.
     */
    public String parent1() {
        return this.parent1;
    }

    /**
     * Set the parent1 property: Parameter for optimizing query results.
     * 
     * @param parent1 the parent1 value to set.
     * @return the UpdateApprovalProperties object itself.
     */
    public UpdateApprovalProperties withParent1(String parent1) {
        this.parent1 = parent1;
        return this;
    }

    /**
     * Get the parent2 property: Parameter for optimizing query results.
     * 
     * @return the parent2 value.
     */
    public String parent2() {
        return this.parent2;
    }

    /**
     * Set the parent2 property: Parameter for optimizing query results.
     * 
     * @param parent2 the parent2 value to set.
     * @return the UpdateApprovalProperties object itself.
     */
    public UpdateApprovalProperties withParent2(String parent2) {
        this.parent2 = parent2;
        return this;
    }

    /**
     * Get the requestMetadata property: Request metadata for the approval request.
     * 
     * @return the requestMetadata value.
     */
    public RequestMetadataUpdate requestMetadata() {
        return this.requestMetadata;
    }

    /**
     * Set the requestMetadata property: Request metadata for the approval request.
     * 
     * @param requestMetadata the requestMetadata value to set.
     * @return the UpdateApprovalProperties object itself.
     */
    public UpdateApprovalProperties withRequestMetadata(RequestMetadataUpdate requestMetadata) {
        this.requestMetadata = requestMetadata;
        return this;
    }

    /**
     * Get the approvers property: List of approvers for the approval request.
     * 
     * @return the approvers value.
     */
    public List<Approver> approvers() {
        return this.approvers;
    }

    /**
     * Set the approvers property: List of approvers for the approval request.
     * 
     * @param approvers the approvers value to set.
     * @return the UpdateApprovalProperties object itself.
     */
    public UpdateApprovalProperties withApprovers(List<Approver> approvers) {
        this.approvers = approvers;
        return this;
    }

    /**
     * Get the ticketId property: Ticket ID for the approval request.
     * 
     * @return the ticketId value.
     */
    public String ticketId() {
        return this.ticketId;
    }

    /**
     * Set the ticketId property: Ticket ID for the approval request.
     * 
     * @param ticketId the ticketId value to set.
     * @return the UpdateApprovalProperties object itself.
     */
    public UpdateApprovalProperties withTicketId(String ticketId) {
        this.ticketId = ticketId;
        return this;
    }

    /**
     * Get the createdAt property: Approval request creation time.
     * 
     * @return the createdAt value.
     */
    public OffsetDateTime createdAt() {
        return this.createdAt;
    }

    /**
     * Set the createdAt property: Approval request creation time.
     * 
     * @param createdAt the createdAt value to set.
     * @return the UpdateApprovalProperties object itself.
     */
    public UpdateApprovalProperties withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get the stateChangedAt property: Approval request state change time, time at which approval request state changed
     * from pending to approved or rejected.
     * 
     * @return the stateChangedAt value.
     */
    public OffsetDateTime stateChangedAt() {
        return this.stateChangedAt;
    }

    /**
     * Set the stateChangedAt property: Approval request state change time, time at which approval request state changed
     * from pending to approved or rejected.
     * 
     * @param stateChangedAt the stateChangedAt value to set.
     * @return the UpdateApprovalProperties object itself.
     */
    public UpdateApprovalProperties withStateChangedAt(OffsetDateTime stateChangedAt) {
        this.stateChangedAt = stateChangedAt;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (requestMetadata() != null) {
            requestMetadata().validate();
        }
        if (approvers() != null) {
            approvers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("parent1", this.parent1);
        jsonWriter.writeStringField("parent2", this.parent2);
        jsonWriter.writeJsonField("requestMetadata", this.requestMetadata);
        jsonWriter.writeArrayField("approvers", this.approvers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("ticketId", this.ticketId);
        jsonWriter.writeStringField("createdAt",
            this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
        jsonWriter.writeStringField("stateChangedAt",
            this.stateChangedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.stateChangedAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateApprovalProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateApprovalProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateApprovalProperties.
     */
    public static UpdateApprovalProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateApprovalProperties deserializedUpdateApprovalProperties = new UpdateApprovalProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("parent1".equals(fieldName)) {
                    deserializedUpdateApprovalProperties.parent1 = reader.getString();
                } else if ("parent2".equals(fieldName)) {
                    deserializedUpdateApprovalProperties.parent2 = reader.getString();
                } else if ("requestMetadata".equals(fieldName)) {
                    deserializedUpdateApprovalProperties.requestMetadata = RequestMetadataUpdate.fromJson(reader);
                } else if ("approvers".equals(fieldName)) {
                    List<Approver> approvers = reader.readArray(reader1 -> Approver.fromJson(reader1));
                    deserializedUpdateApprovalProperties.approvers = approvers;
                } else if ("ticketId".equals(fieldName)) {
                    deserializedUpdateApprovalProperties.ticketId = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedUpdateApprovalProperties.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("stateChangedAt".equals(fieldName)) {
                    deserializedUpdateApprovalProperties.stateChangedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateApprovalProperties;
        });
    }
}
