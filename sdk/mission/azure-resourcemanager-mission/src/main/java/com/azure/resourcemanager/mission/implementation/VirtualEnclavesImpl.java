// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mission.fluent.VirtualEnclavesClient;
import com.azure.resourcemanager.mission.fluent.models.ApprovalCallbackResponseInner;
import com.azure.resourcemanager.mission.fluent.models.ApprovalDeletionCallbackResponseInner;
import com.azure.resourcemanager.mission.fluent.models.EnclaveResourceInner;
import com.azure.resourcemanager.mission.models.ApprovalCallbackRequest;
import com.azure.resourcemanager.mission.models.ApprovalCallbackResponse;
import com.azure.resourcemanager.mission.models.ApprovalDeletionCallbackRequest;
import com.azure.resourcemanager.mission.models.ApprovalDeletionCallbackResponse;
import com.azure.resourcemanager.mission.models.EnclaveResource;
import com.azure.resourcemanager.mission.models.VirtualEnclaves;

public final class VirtualEnclavesImpl implements VirtualEnclaves {
    private static final ClientLogger LOGGER = new ClientLogger(VirtualEnclavesImpl.class);

    private final VirtualEnclavesClient innerClient;

    private final com.azure.resourcemanager.mission.MissionManager serviceManager;

    public VirtualEnclavesImpl(VirtualEnclavesClient innerClient,
        com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<EnclaveResource> list() {
        PagedIterable<EnclaveResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EnclaveResource> list(Context context) {
        PagedIterable<EnclaveResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EnclaveResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<EnclaveResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EnclaveResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<EnclaveResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveResourceImpl(inner1, this.manager()));
    }

    public Response<EnclaveResource> getByResourceGroupWithResponse(String resourceGroupName, String virtualEnclaveName,
        Context context) {
        Response<EnclaveResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, virtualEnclaveName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EnclaveResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EnclaveResource getByResourceGroup(String resourceGroupName, String virtualEnclaveName) {
        EnclaveResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, virtualEnclaveName);
        if (inner != null) {
            return new EnclaveResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String virtualEnclaveName) {
        this.serviceClient().delete(resourceGroupName, virtualEnclaveName);
    }

    public void delete(String resourceGroupName, String virtualEnclaveName, Context context) {
        this.serviceClient().delete(resourceGroupName, virtualEnclaveName, context);
    }

    public ApprovalCallbackResponse approvalCallback(String resourceGroupName, String virtualEnclaveName,
        ApprovalCallbackRequest body) {
        ApprovalCallbackResponseInner inner
            = this.serviceClient().approvalCallback(resourceGroupName, virtualEnclaveName, body);
        if (inner != null) {
            return new ApprovalCallbackResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalCallbackResponse approvalCallback(String resourceGroupName, String virtualEnclaveName,
        ApprovalCallbackRequest body, Context context) {
        ApprovalCallbackResponseInner inner
            = this.serviceClient().approvalCallback(resourceGroupName, virtualEnclaveName, body, context);
        if (inner != null) {
            return new ApprovalCallbackResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalDeletionCallbackResponse approvalDeletionCallback(String resourceGroupName,
        String virtualEnclaveName, ApprovalDeletionCallbackRequest body) {
        ApprovalDeletionCallbackResponseInner inner
            = this.serviceClient().approvalDeletionCallback(resourceGroupName, virtualEnclaveName, body);
        if (inner != null) {
            return new ApprovalDeletionCallbackResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalDeletionCallbackResponse approvalDeletionCallback(String resourceGroupName,
        String virtualEnclaveName, ApprovalDeletionCallbackRequest body, Context context) {
        ApprovalDeletionCallbackResponseInner inner
            = this.serviceClient().approvalDeletionCallback(resourceGroupName, virtualEnclaveName, body, context);
        if (inner != null) {
            return new ApprovalDeletionCallbackResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EnclaveResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, virtualEnclaveName, Context.NONE).getValue();
    }

    public Response<EnclaveResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, virtualEnclaveName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        this.delete(resourceGroupName, virtualEnclaveName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        this.delete(resourceGroupName, virtualEnclaveName, context);
    }

    private VirtualEnclavesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.mission.MissionManager manager() {
        return this.serviceManager;
    }

    public EnclaveResourceImpl define(String name) {
        return new EnclaveResourceImpl(name, this.manager());
    }
}
