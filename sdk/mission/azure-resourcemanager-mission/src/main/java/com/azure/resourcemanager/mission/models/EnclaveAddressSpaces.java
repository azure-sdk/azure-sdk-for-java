// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Enclave Address Spaces.
 */
@Fluent
public final class EnclaveAddressSpaces implements JsonSerializable<EnclaveAddressSpaces> {
    /*
     * Enclave Address Space
     */
    private String enclaveAddressSpace;

    /*
     * Managed Address Space
     */
    private String managedAddressSpace;

    /**
     * Creates an instance of EnclaveAddressSpaces class.
     */
    public EnclaveAddressSpaces() {
    }

    /**
     * Get the enclaveAddressSpace property: Enclave Address Space.
     * 
     * @return the enclaveAddressSpace value.
     */
    public String enclaveAddressSpace() {
        return this.enclaveAddressSpace;
    }

    /**
     * Set the enclaveAddressSpace property: Enclave Address Space.
     * 
     * @param enclaveAddressSpace the enclaveAddressSpace value to set.
     * @return the EnclaveAddressSpaces object itself.
     */
    public EnclaveAddressSpaces withEnclaveAddressSpace(String enclaveAddressSpace) {
        this.enclaveAddressSpace = enclaveAddressSpace;
        return this;
    }

    /**
     * Get the managedAddressSpace property: Managed Address Space.
     * 
     * @return the managedAddressSpace value.
     */
    public String managedAddressSpace() {
        return this.managedAddressSpace;
    }

    /**
     * Set the managedAddressSpace property: Managed Address Space.
     * 
     * @param managedAddressSpace the managedAddressSpace value to set.
     * @return the EnclaveAddressSpaces object itself.
     */
    public EnclaveAddressSpaces withManagedAddressSpace(String managedAddressSpace) {
        this.managedAddressSpace = managedAddressSpace;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("enclaveAddressSpace", this.enclaveAddressSpace);
        jsonWriter.writeStringField("managedAddressSpace", this.managedAddressSpace);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnclaveAddressSpaces from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnclaveAddressSpaces if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnclaveAddressSpaces.
     */
    public static EnclaveAddressSpaces fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnclaveAddressSpaces deserializedEnclaveAddressSpaces = new EnclaveAddressSpaces();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enclaveAddressSpace".equals(fieldName)) {
                    deserializedEnclaveAddressSpaces.enclaveAddressSpace = reader.getString();
                } else if ("managedAddressSpace".equals(fieldName)) {
                    deserializedEnclaveAddressSpaces.managedAddressSpace = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnclaveAddressSpaces;
        });
    }
}
