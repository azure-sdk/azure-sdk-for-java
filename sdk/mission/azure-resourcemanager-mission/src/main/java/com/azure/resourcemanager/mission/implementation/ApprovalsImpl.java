// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mission.fluent.ApprovalsClient;
import com.azure.resourcemanager.mission.fluent.models.ApprovalResourceInner;
import com.azure.resourcemanager.mission.fluent.models.InitiatorCallbackResponseInner;
import com.azure.resourcemanager.mission.models.ApprovalResource;
import com.azure.resourcemanager.mission.models.Approvals;
import com.azure.resourcemanager.mission.models.InitiatorCallbackRequest;
import com.azure.resourcemanager.mission.models.InitiatorCallbackResponse;

public final class ApprovalsImpl implements Approvals {
    private static final ClientLogger LOGGER = new ClientLogger(ApprovalsImpl.class);

    private final ApprovalsClient innerClient;

    private final com.azure.resourcemanager.mission.MissionManager serviceManager;

    public ApprovalsImpl(ApprovalsClient innerClient, com.azure.resourcemanager.mission.MissionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ApprovalResource> listByParent(String resourceUri) {
        PagedIterable<ApprovalResourceInner> inner = this.serviceClient().listByParent(resourceUri);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ApprovalResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ApprovalResource> listByParent(String resourceUri, Context context) {
        PagedIterable<ApprovalResourceInner> inner = this.serviceClient().listByParent(resourceUri, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ApprovalResourceImpl(inner1, this.manager()));
    }

    public Response<ApprovalResource> getWithResponse(String resourceUri, String approvalName, Context context) {
        Response<ApprovalResourceInner> inner
            = this.serviceClient().getWithResponse(resourceUri, approvalName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ApprovalResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApprovalResource get(String resourceUri, String approvalName) {
        ApprovalResourceInner inner = this.serviceClient().get(resourceUri, approvalName);
        if (inner != null) {
            return new ApprovalResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceUri, String approvalName) {
        this.serviceClient().delete(resourceUri, approvalName);
    }

    public void delete(String resourceUri, String approvalName, Context context) {
        this.serviceClient().delete(resourceUri, approvalName, context);
    }

    public InitiatorCallbackResponse initiatorCallback(String resourceUri, String approvalName,
        InitiatorCallbackRequest body) {
        InitiatorCallbackResponseInner inner = this.serviceClient().initiatorCallback(resourceUri, approvalName, body);
        if (inner != null) {
            return new InitiatorCallbackResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public InitiatorCallbackResponse initiatorCallback(String resourceUri, String approvalName,
        InitiatorCallbackRequest body, Context context) {
        InitiatorCallbackResponseInner inner
            = this.serviceClient().initiatorCallback(resourceUri, approvalName, body, context);
        if (inner != null) {
            return new InitiatorCallbackResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalResource getById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String approvalName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}", "approvalName");
        if (approvalName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'approvals'.", id)));
        }
        return this.getWithResponse(resourceUri, approvalName, Context.NONE).getValue();
    }

    public Response<ApprovalResource> getByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String approvalName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}", "approvalName");
        if (approvalName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'approvals'.", id)));
        }
        return this.getWithResponse(resourceUri, approvalName, context);
    }

    public void deleteById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String approvalName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}", "approvalName");
        if (approvalName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'approvals'.", id)));
        }
        this.delete(resourceUri, approvalName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String approvalName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}", "approvalName");
        if (approvalName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'approvals'.", id)));
        }
        this.delete(resourceUri, approvalName, context);
    }

    private ApprovalsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.mission.MissionManager manager() {
        return this.serviceManager;
    }

    public ApprovalResourceImpl define(String name) {
        return new ApprovalResourceImpl(name, this.manager());
    }
}
