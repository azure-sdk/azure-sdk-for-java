// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 * 
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 * 
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 * 
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `&#064;friendlyName` decorator.
 */
@Fluent
public final class UpdateEnclaveConnectionPatchProperties
    implements JsonSerializable<UpdateEnclaveConnectionPatchProperties> {
    /*
     * The state of the enclaveConnection.
     */
    private EnclaveConnectionState state;

    /*
     * Community Resource Id.
     */
    private String communityResourceId;

    /*
     * Source Resource Id.
     */
    private String sourceResourceId;

    /*
     * Source CIDR.
     */
    private String sourceCidr;

    /*
     * Source IP group Resource Id.
     */
    private String ipGroup;

    /*
     * Destination Endpoint Resource Id.
     */
    private String destinationEndpointId;

    /*
     * List of resource ids modified by enclave Connections.
     */
    private List<String> resourceCollection;

    /**
     * Creates an instance of UpdateEnclaveConnectionPatchProperties class.
     */
    public UpdateEnclaveConnectionPatchProperties() {
    }

    /**
     * Get the state property: The state of the enclaveConnection.
     * 
     * @return the state value.
     */
    public EnclaveConnectionState state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the enclaveConnection.
     * 
     * @param state the state value to set.
     * @return the UpdateEnclaveConnectionPatchProperties object itself.
     */
    public UpdateEnclaveConnectionPatchProperties withState(EnclaveConnectionState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the communityResourceId property: Community Resource Id.
     * 
     * @return the communityResourceId value.
     */
    public String communityResourceId() {
        return this.communityResourceId;
    }

    /**
     * Set the communityResourceId property: Community Resource Id.
     * 
     * @param communityResourceId the communityResourceId value to set.
     * @return the UpdateEnclaveConnectionPatchProperties object itself.
     */
    public UpdateEnclaveConnectionPatchProperties withCommunityResourceId(String communityResourceId) {
        this.communityResourceId = communityResourceId;
        return this;
    }

    /**
     * Get the sourceResourceId property: Source Resource Id.
     * 
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }

    /**
     * Set the sourceResourceId property: Source Resource Id.
     * 
     * @param sourceResourceId the sourceResourceId value to set.
     * @return the UpdateEnclaveConnectionPatchProperties object itself.
     */
    public UpdateEnclaveConnectionPatchProperties withSourceResourceId(String sourceResourceId) {
        this.sourceResourceId = sourceResourceId;
        return this;
    }

    /**
     * Get the sourceCidr property: Source CIDR.
     * 
     * @return the sourceCidr value.
     */
    public String sourceCidr() {
        return this.sourceCidr;
    }

    /**
     * Set the sourceCidr property: Source CIDR.
     * 
     * @param sourceCidr the sourceCidr value to set.
     * @return the UpdateEnclaveConnectionPatchProperties object itself.
     */
    public UpdateEnclaveConnectionPatchProperties withSourceCidr(String sourceCidr) {
        this.sourceCidr = sourceCidr;
        return this;
    }

    /**
     * Get the ipGroup property: Source IP group Resource Id.
     * 
     * @return the ipGroup value.
     */
    public String ipGroup() {
        return this.ipGroup;
    }

    /**
     * Set the ipGroup property: Source IP group Resource Id.
     * 
     * @param ipGroup the ipGroup value to set.
     * @return the UpdateEnclaveConnectionPatchProperties object itself.
     */
    public UpdateEnclaveConnectionPatchProperties withIpGroup(String ipGroup) {
        this.ipGroup = ipGroup;
        return this;
    }

    /**
     * Get the destinationEndpointId property: Destination Endpoint Resource Id.
     * 
     * @return the destinationEndpointId value.
     */
    public String destinationEndpointId() {
        return this.destinationEndpointId;
    }

    /**
     * Set the destinationEndpointId property: Destination Endpoint Resource Id.
     * 
     * @param destinationEndpointId the destinationEndpointId value to set.
     * @return the UpdateEnclaveConnectionPatchProperties object itself.
     */
    public UpdateEnclaveConnectionPatchProperties withDestinationEndpointId(String destinationEndpointId) {
        this.destinationEndpointId = destinationEndpointId;
        return this;
    }

    /**
     * Get the resourceCollection property: List of resource ids modified by enclave Connections.
     * 
     * @return the resourceCollection value.
     */
    public List<String> resourceCollection() {
        return this.resourceCollection;
    }

    /**
     * Set the resourceCollection property: List of resource ids modified by enclave Connections.
     * 
     * @param resourceCollection the resourceCollection value to set.
     * @return the UpdateEnclaveConnectionPatchProperties object itself.
     */
    public UpdateEnclaveConnectionPatchProperties withResourceCollection(List<String> resourceCollection) {
        this.resourceCollection = resourceCollection;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("communityResourceId", this.communityResourceId);
        jsonWriter.writeStringField("sourceResourceId", this.sourceResourceId);
        jsonWriter.writeStringField("sourceCidr", this.sourceCidr);
        jsonWriter.writeStringField("ipGroup", this.ipGroup);
        jsonWriter.writeStringField("destinationEndpointId", this.destinationEndpointId);
        jsonWriter.writeArrayField("resourceCollection", this.resourceCollection,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateEnclaveConnectionPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateEnclaveConnectionPatchProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateEnclaveConnectionPatchProperties.
     */
    public static UpdateEnclaveConnectionPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateEnclaveConnectionPatchProperties deserializedUpdateEnclaveConnectionPatchProperties
                = new UpdateEnclaveConnectionPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedUpdateEnclaveConnectionPatchProperties.state
                        = EnclaveConnectionState.fromString(reader.getString());
                } else if ("communityResourceId".equals(fieldName)) {
                    deserializedUpdateEnclaveConnectionPatchProperties.communityResourceId = reader.getString();
                } else if ("sourceResourceId".equals(fieldName)) {
                    deserializedUpdateEnclaveConnectionPatchProperties.sourceResourceId = reader.getString();
                } else if ("sourceCidr".equals(fieldName)) {
                    deserializedUpdateEnclaveConnectionPatchProperties.sourceCidr = reader.getString();
                } else if ("ipGroup".equals(fieldName)) {
                    deserializedUpdateEnclaveConnectionPatchProperties.ipGroup = reader.getString();
                } else if ("destinationEndpointId".equals(fieldName)) {
                    deserializedUpdateEnclaveConnectionPatchProperties.destinationEndpointId = reader.getString();
                } else if ("resourceCollection".equals(fieldName)) {
                    List<String> resourceCollection = reader.readArray(reader1 -> reader1.getString());
                    deserializedUpdateEnclaveConnectionPatchProperties.resourceCollection = resourceCollection;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateEnclaveConnectionPatchProperties;
        });
    }
}
