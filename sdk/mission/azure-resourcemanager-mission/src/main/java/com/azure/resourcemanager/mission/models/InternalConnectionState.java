// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Specifies the state of the internalConnection.
 */
public final class InternalConnectionState extends ExpandableStringEnum<InternalConnectionState> {
    /**
     * Static value PendingApproval for InternalConnectionState.
     */
    public static final InternalConnectionState PENDING_APPROVAL = fromString("PendingApproval");

    /**
     * Static value PendingUpdate for InternalConnectionState.
     */
    public static final InternalConnectionState PENDING_UPDATE = fromString("PendingUpdate");

    /**
     * Static value Approved for InternalConnectionState.
     */
    public static final InternalConnectionState APPROVED = fromString("Approved");

    /**
     * Static value Active for InternalConnectionState.
     */
    public static final InternalConnectionState ACTIVE = fromString("Active");

    /**
     * Static value Failed for InternalConnectionState.
     */
    public static final InternalConnectionState FAILED = fromString("Failed");

    /**
     * Creates a new instance of InternalConnectionState value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public InternalConnectionState() {
    }

    /**
     * Creates or finds a InternalConnectionState from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding InternalConnectionState.
     */
    public static InternalConnectionState fromString(String name) {
        return fromString(name, InternalConnectionState.class);
    }

    /**
     * Gets known InternalConnectionState values.
     * 
     * @return known InternalConnectionState values.
     */
    public static Collection<InternalConnectionState> values() {
        return values(InternalConnectionState.class);
    }
}
