// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mission.models.EndpointRule;
import com.azure.resourcemanager.mission.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Endpoint Resource properties.
 */
@Fluent
public final class EndpointProperties implements JsonSerializable<EndpointProperties> {
    /*
     * Endpoint Rule Collection.
     */
    private List<EndpointRule> endpointRuleCollection;

    /*
     * Provisioning State.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of EndpointProperties class.
     */
    public EndpointProperties() {
    }

    /**
     * Get the endpointRuleCollection property: Endpoint Rule Collection.
     * 
     * @return the endpointRuleCollection value.
     */
    public List<EndpointRule> endpointRuleCollection() {
        return this.endpointRuleCollection;
    }

    /**
     * Set the endpointRuleCollection property: Endpoint Rule Collection.
     * 
     * @param endpointRuleCollection the endpointRuleCollection value to set.
     * @return the EndpointProperties object itself.
     */
    public EndpointProperties withEndpointRuleCollection(List<EndpointRule> endpointRuleCollection) {
        this.endpointRuleCollection = endpointRuleCollection;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpointRuleCollection() != null) {
            endpointRuleCollection().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("endpointRuleCollection", this.endpointRuleCollection,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EndpointProperties.
     */
    public static EndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointProperties deserializedEndpointProperties = new EndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointRuleCollection".equals(fieldName)) {
                    List<EndpointRule> endpointRuleCollection
                        = reader.readArray(reader1 -> EndpointRule.fromJson(reader1));
                    deserializedEndpointProperties.endpointRuleCollection = endpointRuleCollection;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEndpointProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointProperties;
        });
    }
}
