// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mission.models.CommunityEndpointDestinationRule;
import com.azure.resourcemanager.mission.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Community Endpoint Resource properties.
 */
@Fluent
public final class CommunityEndpointProperties implements JsonSerializable<CommunityEndpointProperties> {
    /*
     * Community Endpoint Rule Collection.
     */
    private List<CommunityEndpointDestinationRule> ruleCollection;

    /*
     * List of resource ids created by community endpoint.
     */
    private List<String> resourceCollection;

    /*
     * Provisioning State.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of CommunityEndpointProperties class.
     */
    public CommunityEndpointProperties() {
    }

    /**
     * Get the ruleCollection property: Community Endpoint Rule Collection.
     * 
     * @return the ruleCollection value.
     */
    public List<CommunityEndpointDestinationRule> ruleCollection() {
        return this.ruleCollection;
    }

    /**
     * Set the ruleCollection property: Community Endpoint Rule Collection.
     * 
     * @param ruleCollection the ruleCollection value to set.
     * @return the CommunityEndpointProperties object itself.
     */
    public CommunityEndpointProperties withRuleCollection(List<CommunityEndpointDestinationRule> ruleCollection) {
        this.ruleCollection = ruleCollection;
        return this;
    }

    /**
     * Get the resourceCollection property: List of resource ids created by community endpoint.
     * 
     * @return the resourceCollection value.
     */
    public List<String> resourceCollection() {
        return this.resourceCollection;
    }

    /**
     * Set the resourceCollection property: List of resource ids created by community endpoint.
     * 
     * @param resourceCollection the resourceCollection value to set.
     * @return the CommunityEndpointProperties object itself.
     */
    public CommunityEndpointProperties withResourceCollection(List<String> resourceCollection) {
        this.resourceCollection = resourceCollection;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ruleCollection() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ruleCollection in model CommunityEndpointProperties"));
        } else {
            ruleCollection().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CommunityEndpointProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ruleCollection", this.ruleCollection,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("resourceCollection", this.resourceCollection,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommunityEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommunityEndpointProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommunityEndpointProperties.
     */
    public static CommunityEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunityEndpointProperties deserializedCommunityEndpointProperties = new CommunityEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ruleCollection".equals(fieldName)) {
                    List<CommunityEndpointDestinationRule> ruleCollection
                        = reader.readArray(reader1 -> CommunityEndpointDestinationRule.fromJson(reader1));
                    deserializedCommunityEndpointProperties.ruleCollection = ruleCollection;
                } else if ("resourceCollection".equals(fieldName)) {
                    List<String> resourceCollection = reader.readArray(reader1 -> reader1.getString());
                    deserializedCommunityEndpointProperties.resourceCollection = resourceCollection;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCommunityEndpointProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommunityEndpointProperties;
        });
    }
}
