// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mission.fluent.models.EnclaveResourceInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of EnclaveResource.
 */
public interface EnclaveResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    ManagedServiceIdentity identity();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the enclaveVirtualNetwork property: Virtual Network.
     * 
     * @return the enclaveVirtualNetwork value.
     */
    EnclaveVirtualNetwork enclaveVirtualNetwork();

    /**
     * Gets the enclaveAddressSpaces property: Enclave Address Spaces.
     * 
     * @return the enclaveAddressSpaces value.
     */
    EnclaveAddressSpaces enclaveAddressSpaces();

    /**
     * Gets the communityResourceId property: Community Resource Id.
     * 
     * @return the communityResourceId value.
     */
    String communityResourceId();

    /**
     * Gets the enclaveDefaultSettings property: Default Settings.
     * 
     * @return the enclaveDefaultSettings value.
     */
    EnclaveDefaultSettings enclaveDefaultSettings();

    /**
     * Gets the resourceCollection property: List of resource ids created by Virtual Enclave.
     * 
     * @return the resourceCollection value.
     */
    List<String> resourceCollection();

    /**
     * Gets the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    ManagedResourceGroupConfiguration managedResourceGroupConfiguration();

    /**
     * Gets the maintenanceModeConfiguration property: Maintenance Mode configuration.
     * 
     * @return the maintenanceModeConfiguration value.
     */
    MaintenanceModeConfiguration maintenanceModeConfiguration();

    /**
     * Gets the bastionEnabled property: Deploy Bastion service (True or False).
     * 
     * @return the bastionEnabled value.
     */
    Boolean bastionEnabled();

    /**
     * Gets the enclaveRoleAssignments property: Enclave role assignments.
     * 
     * @return the enclaveRoleAssignments value.
     */
    List<RoleAssignmentItem> enclaveRoleAssignments();

    /**
     * Gets the workloadRoleAssignments property: Workload role assignments.
     * 
     * @return the workloadRoleAssignments value.
     */
    List<RoleAssignmentItem> workloadRoleAssignments();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.mission.fluent.models.EnclaveResourceInner object.
     * 
     * @return the inner object.
     */
    EnclaveResourceInner innerModel();

    /**
     * The entirety of the EnclaveResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The EnclaveResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the EnclaveResource definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the EnclaveResource definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithIdentity,
            DefinitionStages.WithEnclaveVirtualNetwork, DefinitionStages.WithCommunityResourceId,
            DefinitionStages.WithEnclaveDefaultSettings, DefinitionStages.WithResourceCollection,
            DefinitionStages.WithManagedResourceGroupConfiguration, DefinitionStages.WithMaintenanceModeConfiguration,
            DefinitionStages.WithBastionEnabled, DefinitionStages.WithEnclaveRoleAssignments,
            DefinitionStages.WithWorkloadRoleAssignments {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            EnclaveResource create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            EnclaveResource create(Context context);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed service identities assigned to this resource..
             * 
             * @param identity The managed service identities assigned to this resource.
             * @return the next definition stage.
             */
            WithCreate withIdentity(ManagedServiceIdentity identity);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify enclaveVirtualNetwork.
         */
        interface WithEnclaveVirtualNetwork {
            /**
             * Specifies the enclaveVirtualNetwork property: Virtual Network..
             * 
             * @param enclaveVirtualNetwork Virtual Network.
             * @return the next definition stage.
             */
            WithCreate withEnclaveVirtualNetwork(EnclaveVirtualNetwork enclaveVirtualNetwork);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify communityResourceId.
         */
        interface WithCommunityResourceId {
            /**
             * Specifies the communityResourceId property: Community Resource Id..
             * 
             * @param communityResourceId Community Resource Id.
             * @return the next definition stage.
             */
            WithCreate withCommunityResourceId(String communityResourceId);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify enclaveDefaultSettings.
         */
        interface WithEnclaveDefaultSettings {
            /**
             * Specifies the enclaveDefaultSettings property: Default Settings.
             * 
             * @param enclaveDefaultSettings Default Settings.
             * @return the next definition stage.
             */
            WithCreate withEnclaveDefaultSettings(EnclaveDefaultSettings enclaveDefaultSettings);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify resourceCollection.
         */
        interface WithResourceCollection {
            /**
             * Specifies the resourceCollection property: List of resource ids created by Virtual Enclave..
             * 
             * @param resourceCollection List of resource ids created by Virtual Enclave.
             * @return the next definition stage.
             */
            WithCreate withResourceCollection(List<String> resourceCollection);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify managedResourceGroupConfiguration.
         */
        interface WithManagedResourceGroupConfiguration {
            /**
             * Specifies the managedResourceGroupConfiguration property: Managed resource group configuration..
             * 
             * @param managedResourceGroupConfiguration Managed resource group configuration.
             * @return the next definition stage.
             */
            WithCreate withManagedResourceGroupConfiguration(
                ManagedResourceGroupConfiguration managedResourceGroupConfiguration);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify maintenanceModeConfiguration.
         */
        interface WithMaintenanceModeConfiguration {
            /**
             * Specifies the maintenanceModeConfiguration property: Maintenance Mode configuration..
             * 
             * @param maintenanceModeConfiguration Maintenance Mode configuration.
             * @return the next definition stage.
             */
            WithCreate withMaintenanceModeConfiguration(MaintenanceModeConfiguration maintenanceModeConfiguration);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify bastionEnabled.
         */
        interface WithBastionEnabled {
            /**
             * Specifies the bastionEnabled property: Deploy Bastion service (True or False)..
             * 
             * @param bastionEnabled Deploy Bastion service (True or False).
             * @return the next definition stage.
             */
            WithCreate withBastionEnabled(Boolean bastionEnabled);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify enclaveRoleAssignments.
         */
        interface WithEnclaveRoleAssignments {
            /**
             * Specifies the enclaveRoleAssignments property: Enclave role assignments.
             * 
             * @param enclaveRoleAssignments Enclave role assignments.
             * @return the next definition stage.
             */
            WithCreate withEnclaveRoleAssignments(List<RoleAssignmentItem> enclaveRoleAssignments);
        }

        /**
         * The stage of the EnclaveResource definition allowing to specify workloadRoleAssignments.
         */
        interface WithWorkloadRoleAssignments {
            /**
             * Specifies the workloadRoleAssignments property: Workload role assignments.
             * 
             * @param workloadRoleAssignments Workload role assignments.
             * @return the next definition stage.
             */
            WithCreate withWorkloadRoleAssignments(List<RoleAssignmentItem> workloadRoleAssignments);
        }
    }

    /**
     * Begins update for the EnclaveResource resource.
     * 
     * @return the stage of resource update.
     */
    EnclaveResource.Update update();

    /**
     * The template for EnclaveResource update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithProperties, UpdateStages.WithIdentity {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        EnclaveResource apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        EnclaveResource apply(Context context);
    }

    /**
     * The EnclaveResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the EnclaveResource update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the EnclaveResource update allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: Virtual Enclave Patch properties.
             * 
             * @param properties Virtual Enclave Patch properties.
             * @return the next definition stage.
             */
            Update withProperties(UpdateVirtualEnclavePatchProperties properties);
        }

        /**
         * The stage of the EnclaveResource update allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed service identities assigned to this resource..
             * 
             * @param identity The managed service identities assigned to this resource.
             * @return the next definition stage.
             */
            Update withIdentity(AzureResourceManagerCommonTypesManagedServiceIdentityUpdate identity);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    EnclaveResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    EnclaveResource refresh(Context context);

    /**
     * Callback that triggers on approval state change.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest.
     */
    ApprovalCallbackResponse approvalCallback(ApprovalCallbackRequest body);

    /**
     * Callback that triggers on approval state change.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalCallbackRequest.
     */
    ApprovalCallbackResponse approvalCallback(ApprovalCallbackRequest body, Context context);

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest.
     */
    ApprovalDeletionCallbackResponse approvalDeletionCallback(ApprovalDeletionCallbackRequest body);

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body after handling of approvalDeletionCallbackRequest.
     */
    ApprovalDeletionCallbackResponse approvalDeletionCallback(ApprovalDeletionCallbackRequest body, Context context);
}
