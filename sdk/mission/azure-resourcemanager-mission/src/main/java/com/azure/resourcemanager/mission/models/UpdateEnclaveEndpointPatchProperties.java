// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 * 
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 * 
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 * 
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `&#064;friendlyName` decorator.
 */
@Fluent
public final class UpdateEnclaveEndpointPatchProperties
    implements JsonSerializable<UpdateEnclaveEndpointPatchProperties> {
    /*
     * Enclave Endpoint Rule Collection.
     */
    private List<EnclaveEndpointDestinationRule> ruleCollection;

    /*
     * List of resource ids created by community endpoint.
     */
    private List<String> resourceCollection;

    /**
     * Creates an instance of UpdateEnclaveEndpointPatchProperties class.
     */
    public UpdateEnclaveEndpointPatchProperties() {
    }

    /**
     * Get the ruleCollection property: Enclave Endpoint Rule Collection.
     * 
     * @return the ruleCollection value.
     */
    public List<EnclaveEndpointDestinationRule> ruleCollection() {
        return this.ruleCollection;
    }

    /**
     * Set the ruleCollection property: Enclave Endpoint Rule Collection.
     * 
     * @param ruleCollection the ruleCollection value to set.
     * @return the UpdateEnclaveEndpointPatchProperties object itself.
     */
    public UpdateEnclaveEndpointPatchProperties
        withRuleCollection(List<EnclaveEndpointDestinationRule> ruleCollection) {
        this.ruleCollection = ruleCollection;
        return this;
    }

    /**
     * Get the resourceCollection property: List of resource ids created by community endpoint.
     * 
     * @return the resourceCollection value.
     */
    public List<String> resourceCollection() {
        return this.resourceCollection;
    }

    /**
     * Set the resourceCollection property: List of resource ids created by community endpoint.
     * 
     * @param resourceCollection the resourceCollection value to set.
     * @return the UpdateEnclaveEndpointPatchProperties object itself.
     */
    public UpdateEnclaveEndpointPatchProperties withResourceCollection(List<String> resourceCollection) {
        this.resourceCollection = resourceCollection;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ruleCollection() != null) {
            ruleCollection().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ruleCollection", this.ruleCollection,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("resourceCollection", this.resourceCollection,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateEnclaveEndpointPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateEnclaveEndpointPatchProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateEnclaveEndpointPatchProperties.
     */
    public static UpdateEnclaveEndpointPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateEnclaveEndpointPatchProperties deserializedUpdateEnclaveEndpointPatchProperties
                = new UpdateEnclaveEndpointPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ruleCollection".equals(fieldName)) {
                    List<EnclaveEndpointDestinationRule> ruleCollection
                        = reader.readArray(reader1 -> EnclaveEndpointDestinationRule.fromJson(reader1));
                    deserializedUpdateEnclaveEndpointPatchProperties.ruleCollection = ruleCollection;
                } else if ("resourceCollection".equals(fieldName)) {
                    List<String> resourceCollection = reader.readArray(reader1 -> reader1.getString());
                    deserializedUpdateEnclaveEndpointPatchProperties.resourceCollection = resourceCollection;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateEnclaveEndpointPatchProperties;
        });
    }
}
