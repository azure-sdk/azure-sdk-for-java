// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mission.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mission.models.ExternalConnectionState;
import com.azure.resourcemanager.mission.models.ProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Describes an External Connection.
 */
@Fluent
public final class ExternalConnectionInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    private ExternalConnectionProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ExternalConnectionInner class.
     */
    public ExternalConnectionInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private ExternalConnectionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExternalConnectionInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExternalConnectionInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the state property: The state of the externalConnection.
     * 
     * @return the state value.
     */
    public ExternalConnectionState state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: The state of the externalConnection.
     * 
     * @param state the state value to set.
     * @return the ExternalConnectionInner object itself.
     */
    public ExternalConnectionInner withState(ExternalConnectionState state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalConnectionProperties();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Get the communityResourceId property: Community Resource Id.
     * 
     * @return the communityResourceId value.
     */
    public String communityResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().communityResourceId();
    }

    /**
     * Set the communityResourceId property: Community Resource Id.
     * 
     * @param communityResourceId the communityResourceId value to set.
     * @return the ExternalConnectionInner object itself.
     */
    public ExternalConnectionInner withCommunityResourceId(String communityResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalConnectionProperties();
        }
        this.innerProperties().withCommunityResourceId(communityResourceId);
        return this;
    }

    /**
     * Get the enclaveIds property: The enclaves' resource IDs.
     * 
     * @return the enclaveIds value.
     */
    public List<String> enclaveIds() {
        return this.innerProperties() == null ? null : this.innerProperties().enclaveIds();
    }

    /**
     * Set the enclaveIds property: The enclaves' resource IDs.
     * 
     * @param enclaveIds the enclaveIds value to set.
     * @return the ExternalConnectionInner object itself.
     */
    public ExternalConnectionInner withEnclaveIds(List<String> enclaveIds) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalConnectionProperties();
        }
        this.innerProperties().withEnclaveIds(enclaveIds);
        return this;
    }

    /**
     * Get the externalCidrs property: The external CIDR IP addresses.
     * 
     * @return the externalCidrs value.
     */
    public List<String> externalCidrs() {
        return this.innerProperties() == null ? null : this.innerProperties().externalCidrs();
    }

    /**
     * Set the externalCidrs property: The external CIDR IP addresses.
     * 
     * @param externalCidrs the externalCidrs value to set.
     * @return the ExternalConnectionInner object itself.
     */
    public ExternalConnectionInner withExternalCidrs(List<String> externalCidrs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalConnectionProperties();
        }
        this.innerProperties().withExternalCidrs(externalCidrs);
        return this;
    }

    /**
     * Get the resourceCollection property: List of resource ids modified by externalConnections.
     * 
     * @return the resourceCollection value.
     */
    public List<String> resourceCollection() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceCollection();
    }

    /**
     * Set the resourceCollection property: List of resource ids modified by externalConnections.
     * 
     * @param resourceCollection the resourceCollection value to set.
     * @return the ExternalConnectionInner object itself.
     */
    public ExternalConnectionInner withResourceCollection(List<String> resourceCollection) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalConnectionProperties();
        }
        this.innerProperties().withResourceCollection(resourceCollection);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExternalConnectionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExternalConnectionInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExternalConnectionInner.
     */
    public static ExternalConnectionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExternalConnectionInner deserializedExternalConnectionInner = new ExternalConnectionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedExternalConnectionInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedExternalConnectionInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedExternalConnectionInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedExternalConnectionInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedExternalConnectionInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedExternalConnectionInner.innerProperties = ExternalConnectionProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedExternalConnectionInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExternalConnectionInner;
        });
    }
}
