// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager;
import com.azure.resourcemanager.toolchainorchestrator.models.CatalogVersion;
import com.azure.resourcemanager.toolchainorchestrator.models.CatalogVersionProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CatalogVersionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"properties\":{\"clg\":\"datapcvs\",\"jj\":\"datarvwerfwxbsmtb\",\"ci\":\"datah\",\"ekqhs\":\"datakwdvbtb\"},\"metadata\":{\"igmghginztx\":\"fpwpqbyejuwyqwd\",\"qtwmlmhjnqtqeahj\":\"ujkhnjcmrnkfmkh\",\"vgua\":\"dvragpokddxejhh\"},\"parentName\":\"ptbkewk\",\"catalogType\":\"n\",\"status\":{\"properties\":{\"kwvdxa\":\"bvoffb\",\"lzbnobrqlpbcjt\":\"xqokmyrlji\",\"qeae\":\"pzuyudivbxnh\"}}},\"extendedLocation\":{\"name\":\"qelwgdhuruzytza\",\"type\":\"ogatmoljiy\"},\"location\":\"pinm\",\"tags\":{\"lugdybnhrxlelf\":\"kneerzztrknsj\",\"htdm\":\"hkeizcp\",\"c\":\"wjekptycaydbj\"},\"id\":\"ymlcfnzhmhsurlg\",\"name\":\"qkpmmzpstau\",\"type\":\"lawiubmomsgvvjhv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ToolchainOrchestratorManager manager = ToolchainOrchestratorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CatalogVersion response = manager.catalogVersions()
            .define("vx")
            .withRegion("oiglk")
            .withExistingCatalog("hzcgkrepdqhqyhwq", "e")
            .withTags(mapOf("libbf", "wnnra"))
            .withProperties(new CatalogVersionProperties()
                .withProperties(
                    mapOf("greohtwhlpuzjp", "datazeoxin", "angp", "dataeezn", "phmsexroq", "databfaxyxzlbc"))
                .withMetadata(mapOf("qgpkrie", "ktxfvonfe", "kyfwnwpiwxeiicr", "bgnixxoww"))
                .withParentName("e")
                .withCatalogType("ldmaxxijvskwsdgk"))
            .withExtendedLocation(new ExtendedLocation().withName("v").withType("simi"))
            .create();

        Assertions.assertEquals("pinm", response.location());
        Assertions.assertEquals("kneerzztrknsj", response.tags().get("lugdybnhrxlelf"));
        Assertions.assertEquals("fpwpqbyejuwyqwd", response.properties().metadata().get("igmghginztx"));
        Assertions.assertEquals("ptbkewk", response.properties().parentName());
        Assertions.assertEquals("n", response.properties().catalogType());
        Assertions.assertEquals("qelwgdhuruzytza", response.extendedLocation().name());
        Assertions.assertEquals("ogatmoljiy", response.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
