// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager;
import com.azure.resourcemanager.toolchainorchestrator.models.CampaignVersion;
import com.azure.resourcemanager.toolchainorchestrator.models.CampaignVersionProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.StageProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CampaignVersionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"firstStage\":\"iscr\",\"selfDriving\":true,\"stages\":{\"dkgaw\":{\"contexts\":\"rqre\",\"config\":{\"ldahlfxlmu\":\"dataahuqi\"},\"inputs\":{\"cskiioshjgc\":\"datauadjnfs\",\"cg\":\"dataetybnxgzt\",\"j\":\"datatjchfjvmy\",\"cljkxpyl\":\"dataebecuvlbefv\"},\"name\":\"oxz\",\"provider\":\"psyxjije\",\"stageSelector\":\"dvrbke\",\"schedule\":\"2021-09-18T17:20:37Z\"}}},\"extendedLocation\":{\"name\":\"jxildfkcef\",\"type\":\"ygzqpjoisfmn\"},\"location\":\"bdjnxume\",\"tags\":{\"why\":\"on\",\"lwivqt\":\"xym\",\"bfajcywhjqwmchq\":\"wlhlsycoybajasq\",\"mjzpwdlvwtiwsm\":\"htfxcpupuki\"},\"id\":\"sa\",\"name\":\"nhqnampp\",\"type\":\"ltassaekewna\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ToolchainOrchestratorManager manager = ToolchainOrchestratorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CampaignVersion response = manager.campaignVersions()
            .define("cme")
            .withRegion("mwvvb")
            .withExistingCampaign("ukklvzrlr", "l")
            .withTags(mapOf("wgxql", "kxxi", "qfkyfhiwvjaqu", "ekotjgxi", "nvskpaj", "by"))
            .withProperties(new CampaignVersionProperties().withFirstStage("ivfqbqnasdsy")
                .withSelfDriving(true)
                .withStages(mapOf("ncogmipnmliqmvlb",
                    new StageProperties().withContexts("uscplhyvdg")
                        .withConfig(mapOf("hezsvkolrupjovm", "datazkxitd", "lpzbtzuykykipf", "datazsayebrazw"))
                        .withInputs(mapOf("bezacfpztga", "dataepfnoc", "ctgkppgkqzkcyzmf", "datawyqejgaao"))
                        .withName("gdyfcixrhlcqvhoe")
                        .withProvider("oiutgwrmkahpq")
                        .withStageSelector("zynta")
                        .withSchedule(OffsetDateTime.parse("2021-05-04T11:04:08Z")),
                    "gj",
                    new StageProperties().withContexts("ke")
                        .withConfig(mapOf("jyies", "datarvgpomxpupdtsd", "py", "datacwiqbuout", "zvdajfwnncf",
                            "datagleofjsbgbw"))
                        .withInputs(mapOf("ixvt", "dataiqgjjrlhiql", "tnd", "dataougu", "ttbas", "datapg", "qb",
                            "dataalapdlndbe"))
                        .withName("xvvlwyn")
                        .withProvider("bfqvzfjmspu")
                        .withStageSelector("feuzjljmphfkye")
                        .withSchedule(OffsetDateTime.parse("2021-12-10T07:55:48Z")),
                    "htbbzj",
                    new StageProperties().withContexts("icuydoccn")
                        .withConfig(mapOf("dh", "dataanzbui", "sdohz", "dataatecaa", "mbwiinjdllwktl", "dataiucbda"))
                        .withInputs(mapOf("kgfcfdruws", "datawavvqxuajgcqwuly", "clhuulriqbyokv", "datakxx", "fyhcdjw",
                            "datagbzsxebrslt", "agttpufpb", "datauoard"))
                        .withName("nrholhujb")
                        .withProvider("xiplkysolsyj")
                        .withStageSelector("xslwhd")
                        .withSchedule(OffsetDateTime.parse("2020-12-20T09:30:10Z")),
                    "xzznnui",
                    new StageProperties().withContexts("vhuw")
                        .withConfig(mapOf("hotjec", "datapcqzg"))
                        .withInputs(mapOf("pbxwieexuyaderl", "dataxvvlrrsk"))
                        .withName("okyk")
                        .withProvider("imyc")
                        .withStageSelector("r")
                        .withSchedule(OffsetDateTime.parse("2021-09-18T16:47:58Z")))))
            .withExtendedLocation(new ExtendedLocation().withName("rsejegprkj").withType("uw"))
            .create();

        Assertions.assertEquals("bdjnxume", response.location());
        Assertions.assertEquals("on", response.tags().get("why"));
        Assertions.assertEquals("iscr", response.properties().firstStage());
        Assertions.assertEquals(true, response.properties().selfDriving());
        Assertions.assertEquals("rqre", response.properties().stages().get("dkgaw").contexts());
        Assertions.assertEquals("oxz", response.properties().stages().get("dkgaw").name());
        Assertions.assertEquals("psyxjije", response.properties().stages().get("dkgaw").provider());
        Assertions.assertEquals("dvrbke", response.properties().stages().get("dkgaw").stageSelector());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T17:20:37Z"),
            response.properties().stages().get("dkgaw").schedule());
        Assertions.assertEquals("jxildfkcef", response.extendedLocation().name());
        Assertions.assertEquals("ygzqpjoisfmn", response.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
