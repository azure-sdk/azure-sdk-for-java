// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.fluent.models.TargetInner;
import com.azure.resourcemanager.toolchainorchestrator.models.BindingProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ComponentProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationPolicyProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationState;
import com.azure.resourcemanager.toolchainorchestrator.models.TargetProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.TopologyProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TargetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TargetInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"metadata\":{\"hcrzevd\":\"gexpaojakhmsbz\",\"qjbpfzfsin\":\"hlxaolthqtr\",\"wzo\":\"gvfcj\",\"np\":\"xjtfelluwfzit\"},\"properties\":{\"pfxxy\":\"pjkjlxofpdv\",\"uybbkpodep\":\"ininmay\",\"zxtheotusivyevcc\":\"oginuvamiheognar\"},\"displayName\":\"ihnhun\",\"constraints\":\"wjzrnfygxgisp\",\"scope\":\"vtz\",\"topologies\":[{\"bindings\":[{\"provider\":\"bljofxqeof\",\"config\":{\"msmjqulngsntn\":\"qjhqjbas\"},\"role\":\"ybkzgcwr\"},{\"provider\":\"clxxwrljdo\",\"config\":{\"xbnjbiksq\":\"cqvkocrcjdkwtn\",\"ainqpjwnzlljfm\":\"gls\",\"vmgxsab\":\"pee\"},\"role\":\"yqduujit\"},{\"provider\":\"jczdzevndh\",\"config\":{\"dkvwrwjfe\":\"pdappds\",\"je\":\"snhu\",\"hocdgeab\":\"tmrldhugjzzdatq\"},\"role\":\"gphuticndvka\"}]},{\"bindings\":[{\"provider\":\"yiftyhxhuro\",\"config\":{\"cukjf\":\"yxolniwp\",\"lryplwckbasyy\":\"giawx\",\"jkot\":\"nddhsgcbacph\"},\"role\":\"nqgoulzndli\"},{\"provider\":\"wyqkgfgibm\",\"config\":{\"xybz\":\"akeqs\",\"mnkzsmod\":\"qedqytbciqfoufl\"},\"role\":\"glougpbk\"},{\"provider\":\"tmut\",\"config\":{\"kdosvqw\":\"ktapspwgcuertu\",\"bjf\":\"bmdg\",\"bexppb\":\"dgmb\",\"rolfpfp\":\"tq\"},\"role\":\"algbquxigjyjg\"}]}],\"components\":[{\"name\":\"o\",\"metadata\":{\"ujysvle\":\"rtxilner\"},\"properties\":{\"kcprbnw\":\"datafqawrlyxw\",\"ysszdnrujqguh\":\"dataxgjvtbv\",\"prwzwbnguitnwui\":\"datauouq\",\"zuckyfi\":\"datagazxuf\"},\"constraints\":\"fidfvzw\",\"dependencies\":[\"htymw\"],\"type\":\"sdkf\"},{\"name\":\"hwxmnteiwa\",\"metadata\":{\"jcmmxdcufufsrp\":\"km\",\"sgfyccsnew\":\"mzidnsezcxtb\",\"oosflnr\":\"dwzjeiach\",\"vypyqrimzinpv\":\"sfqpteehz\"},\"properties\":{\"nohjt\":\"datadkirsoodqxhcr\",\"soifiyipjxsqw\":\"datakwh\",\"bznorcjxvsnby\":\"datagr\"},\"constraints\":\"abnmocpcyshu\",\"dependencies\":[\"fblj\",\"gpbtoqcjmklj\",\"vbqid\",\"qajzyulpkudjkr\"],\"type\":\"khbzhfepgzg\"},{\"name\":\"e\",\"metadata\":{\"l\":\"ocxscpaierhhbcs\"},\"properties\":{\"tjaodxobnb\":\"dataa\",\"ajionpimexgstxg\":\"dataxkqpxo\"},\"constraints\":\"odgmaajrmvdjwz\",\"dependencies\":[\"vmclw\",\"ijcoejctb\",\"aqsqsycbkbfk\",\"ukdkexxppofmxa\"],\"type\":\"c\"},{\"name\":\"jpgd\",\"metadata\":{\"j\":\"c\",\"hd\":\"hvpmoue\",\"bzv\":\"xibqeojnx\",\"pzaoqvuhr\":\"dntwndeicbtw\"},\"properties\":{\"mjthjqkwp\":\"datafcyddg\"},\"constraints\":\"icxm\",\"dependencies\":[\"wqvhkhixuigdt\",\"pbobjo\"],\"type\":\"hm\"}],\"reconciliationPolicy\":{\"state\":\"inactive\",\"interval\":\"a\"},\"isDryRun\":true,\"status\":{\"lastModified\":\"2021-09-14T08:48:03Z\",\"properties\":{\"kftutqxlngxlefg\":\"yvvtpgvdfgio\",\"rvqdra\":\"gnxkrxdqmidtth\",\"skanyk\":\"hjybigehoqfbo\"}}},\"extendedLocation\":{\"name\":\"zlcuiywgqywgndrv\",\"type\":\"nhzgpphrcgyn\"},\"location\":\"cpecfvmmcoofs\",\"tags\":{\"bcypmi\":\"evgbmqjq\",\"acfi\":\"kwlzuvccfwnfn\"},\"id\":\"nlebxetqgtzxd\",\"name\":\"nqbqqwxr\",\"type\":\"feallnwsu\"}")
            .toObject(TargetInner.class);
        Assertions.assertEquals("cpecfvmmcoofs", model.location());
        Assertions.assertEquals("evgbmqjq", model.tags().get("bcypmi"));
        Assertions.assertEquals("gexpaojakhmsbz", model.properties().metadata().get("hcrzevd"));
        Assertions.assertEquals("pjkjlxofpdv", model.properties().properties().get("pfxxy"));
        Assertions.assertEquals("ihnhun", model.properties().displayName());
        Assertions.assertEquals("wjzrnfygxgisp", model.properties().constraints());
        Assertions.assertEquals("vtz", model.properties().scope());
        Assertions.assertEquals("bljofxqeof", model.properties().topologies().get(0).bindings().get(0).provider());
        Assertions.assertEquals("qjhqjbas",
            model.properties().topologies().get(0).bindings().get(0).config().get("msmjqulngsntn"));
        Assertions.assertEquals("ybkzgcwr", model.properties().topologies().get(0).bindings().get(0).role());
        Assertions.assertEquals("o", model.properties().components().get(0).name());
        Assertions.assertEquals("rtxilner", model.properties().components().get(0).metadata().get("ujysvle"));
        Assertions.assertEquals("fidfvzw", model.properties().components().get(0).constraints());
        Assertions.assertEquals("htymw", model.properties().components().get(0).dependencies().get(0));
        Assertions.assertEquals("sdkf", model.properties().components().get(0).type());
        Assertions.assertEquals(ReconciliationState.INACTIVE, model.properties().reconciliationPolicy().state());
        Assertions.assertEquals("a", model.properties().reconciliationPolicy().interval());
        Assertions.assertEquals(true, model.properties().isDryRun());
        Assertions.assertEquals("zlcuiywgqywgndrv", model.extendedLocation().name());
        Assertions.assertEquals("nhzgpphrcgyn", model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TargetInner model
            = new TargetInner().withLocation("cpecfvmmcoofs")
                .withTags(mapOf("bcypmi", "evgbmqjq", "acfi", "kwlzuvccfwnfn"))
                .withProperties(new TargetProperties()
                    .withMetadata(mapOf("hcrzevd", "gexpaojakhmsbz", "qjbpfzfsin", "hlxaolthqtr", "wzo", "gvfcj", "np",
                        "xjtfelluwfzit"))
                    .withProperties(
                        mapOf("pfxxy", "pjkjlxofpdv", "uybbkpodep", "ininmay", "zxtheotusivyevcc", "oginuvamiheognar"))
                    .withDisplayName("ihnhun")
                    .withConstraints("wjzrnfygxgisp")
                    .withScope("vtz")
                    .withTopologies(
                        Arrays
                            .asList(
                                new TopologyProperties().withBindings(Arrays.asList(
                                    new BindingProperties().withProvider("bljofxqeof")
                                        .withConfig(mapOf("msmjqulngsntn", "qjhqjbas"))
                                        .withRole("ybkzgcwr"),
                                    new BindingProperties().withProvider("clxxwrljdo")
                                        .withConfig(mapOf("xbnjbiksq", "cqvkocrcjdkwtn", "ainqpjwnzlljfm", "gls",
                                            "vmgxsab", "pee"))
                                        .withRole("yqduujit"),
                                    new BindingProperties().withProvider("jczdzevndh")
                                        .withConfig(
                                            mapOf("dkvwrwjfe", "pdappds", "je", "snhu", "hocdgeab", "tmrldhugjzzdatq"))
                                        .withRole("gphuticndvka"))),
                                new TopologyProperties()
                                    .withBindings(Arrays.asList(
                                        new BindingProperties().withProvider("yiftyhxhuro")
                                            .withConfig(mapOf("cukjf", "yxolniwp", "lryplwckbasyy", "giawx", "jkot",
                                                "nddhsgcbacph"))
                                            .withRole("nqgoulzndli"),
                                        new BindingProperties().withProvider("wyqkgfgibm")
                                            .withConfig(mapOf("xybz", "akeqs", "mnkzsmod", "qedqytbciqfoufl"))
                                            .withRole("glougpbk"),
                                        new BindingProperties()
                                            .withProvider("tmut")
                                            .withConfig(mapOf("kdosvqw", "ktapspwgcuertu", "bjf", "bmdg", "bexppb",
                                                "dgmb", "rolfpfp", "tq"))
                                            .withRole("algbquxigjyjg")))))
                    .withComponents(Arrays.asList(
                        new ComponentProperties().withName("o")
                            .withMetadata(mapOf("ujysvle", "rtxilner"))
                            .withProperties(mapOf("kcprbnw", "datafqawrlyxw", "ysszdnrujqguh", "dataxgjvtbv",
                                "prwzwbnguitnwui", "datauouq", "zuckyfi", "datagazxuf"))
                            .withConstraints("fidfvzw")
                            .withDependencies(Arrays.asList("htymw"))
                            .withType("sdkf"),
                        new ComponentProperties().withName("hwxmnteiwa")
                            .withMetadata(mapOf("jcmmxdcufufsrp", "km", "sgfyccsnew", "mzidnsezcxtb", "oosflnr",
                                "dwzjeiach", "vypyqrimzinpv", "sfqpteehz"))
                            .withProperties(mapOf("nohjt", "datadkirsoodqxhcr", "soifiyipjxsqw", "datakwh",
                                "bznorcjxvsnby", "datagr"))
                            .withConstraints("abnmocpcyshu")
                            .withDependencies(Arrays.asList("fblj", "gpbtoqcjmklj", "vbqid", "qajzyulpkudjkr"))
                            .withType("khbzhfepgzg"),
                        new ComponentProperties().withName("e")
                            .withMetadata(mapOf("l", "ocxscpaierhhbcs"))
                            .withProperties(mapOf("tjaodxobnb", "dataa", "ajionpimexgstxg", "dataxkqpxo"))
                            .withConstraints("odgmaajrmvdjwz")
                            .withDependencies(Arrays.asList("vmclw", "ijcoejctb", "aqsqsycbkbfk", "ukdkexxppofmxa"))
                            .withType("c"),
                        new ComponentProperties().withName("jpgd")
                            .withMetadata(
                                mapOf("j", "c", "hd", "hvpmoue", "bzv", "xibqeojnx", "pzaoqvuhr", "dntwndeicbtw"))
                            .withProperties(mapOf("mjthjqkwp", "datafcyddg"))
                            .withConstraints("icxm")
                            .withDependencies(Arrays.asList("wqvhkhixuigdt", "pbobjo"))
                            .withType("hm")))
                    .withReconciliationPolicy(
                        new ReconciliationPolicyProperties().withState(ReconciliationState.INACTIVE).withInterval("a"))
                    .withIsDryRun(true))
                .withExtendedLocation(new ExtendedLocation().withName("zlcuiywgqywgndrv").withType("nhzgpphrcgyn"));
        model = BinaryData.fromObject(model).toObject(TargetInner.class);
        Assertions.assertEquals("cpecfvmmcoofs", model.location());
        Assertions.assertEquals("evgbmqjq", model.tags().get("bcypmi"));
        Assertions.assertEquals("gexpaojakhmsbz", model.properties().metadata().get("hcrzevd"));
        Assertions.assertEquals("pjkjlxofpdv", model.properties().properties().get("pfxxy"));
        Assertions.assertEquals("ihnhun", model.properties().displayName());
        Assertions.assertEquals("wjzrnfygxgisp", model.properties().constraints());
        Assertions.assertEquals("vtz", model.properties().scope());
        Assertions.assertEquals("bljofxqeof", model.properties().topologies().get(0).bindings().get(0).provider());
        Assertions.assertEquals("qjhqjbas",
            model.properties().topologies().get(0).bindings().get(0).config().get("msmjqulngsntn"));
        Assertions.assertEquals("ybkzgcwr", model.properties().topologies().get(0).bindings().get(0).role());
        Assertions.assertEquals("o", model.properties().components().get(0).name());
        Assertions.assertEquals("rtxilner", model.properties().components().get(0).metadata().get("ujysvle"));
        Assertions.assertEquals("fidfvzw", model.properties().components().get(0).constraints());
        Assertions.assertEquals("htymw", model.properties().components().get(0).dependencies().get(0));
        Assertions.assertEquals("sdkf", model.properties().components().get(0).type());
        Assertions.assertEquals(ReconciliationState.INACTIVE, model.properties().reconciliationPolicy().state());
        Assertions.assertEquals("a", model.properties().reconciliationPolicy().interval());
        Assertions.assertEquals(true, model.properties().isDryRun());
        Assertions.assertEquals("zlcuiywgqywgndrv", model.extendedLocation().name());
        Assertions.assertEquals("nhzgpphrcgyn", model.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
