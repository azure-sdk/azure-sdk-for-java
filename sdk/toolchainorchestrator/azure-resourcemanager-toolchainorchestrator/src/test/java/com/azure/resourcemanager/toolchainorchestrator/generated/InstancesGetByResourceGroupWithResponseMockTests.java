// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager;
import com.azure.resourcemanager.toolchainorchestrator.models.Instance;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Failed\",\"metadata\":{\"tfvpndpmiljpn\":\"awjyosxwwhnh\",\"zp\":\"ynudqllzsa\"},\"displayName\":\"xee\",\"scope\":\"xiqhzlraymezxlsk\",\"solution\":\"hmx\",\"target\":{\"name\":\"sajrednwyysht\",\"selector\":{\"frkgwltxeq\":\"mevuafpwzy\",\"r\":\"pxgzdyimsfayor\",\"oge\":\"vk\"}},\"reconciliationPolicy\":{\"state\":\"inactive\",\"interval\":\"bnsmjkwynqxaek\"},\"isDryRun\":true,\"status\":{\"lastModified\":\"2021-09-08T03:55:38Z\",\"properties\":{\"tjcrspxklurccl\":\"tqpkevmy\",\"gpxvkqmaupxvpi\":\"gxannnoytzposewx\",\"ds\":\"dfaifyzyzeyuube\",\"ytoithgygvfl\":\"l\"}}},\"extendedLocation\":{\"name\":\"gvdihoynkrxwetwk\",\"type\":\"rcyrucpcunnu\"},\"location\":\"qumoeno\",\"tags\":{\"aadl\":\"ienhqhskndnelq\",\"anniyopetxivcnr\":\"nwf\",\"aephblkw\":\"yxnu\"},\"id\":\"pat\",\"name\":\"bqsdtcjbctvi\",\"type\":\"uzqymtuowog\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ToolchainOrchestratorManager manager = ToolchainOrchestratorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Instance response = manager.instances()
            .getByResourceGroupWithResponse("zregzgyufutrwpw", "ryekzkd", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("qumoeno", response.location());
        Assertions.assertEquals("ienhqhskndnelq", response.tags().get("aadl"));
        Assertions.assertEquals("awjyosxwwhnh", response.properties().metadata().get("tfvpndpmiljpn"));
        Assertions.assertEquals("xee", response.properties().displayName());
        Assertions.assertEquals("xiqhzlraymezxlsk", response.properties().scope());
        Assertions.assertEquals("hmx", response.properties().solution());
        Assertions.assertEquals("sajrednwyysht", response.properties().target().name());
        Assertions.assertEquals("mevuafpwzy", response.properties().target().selector().get("frkgwltxeq"));
        Assertions.assertEquals(ReconciliationState.INACTIVE, response.properties().reconciliationPolicy().state());
        Assertions.assertEquals("bnsmjkwynqxaek", response.properties().reconciliationPolicy().interval());
        Assertions.assertEquals(true, response.properties().isDryRun());
        Assertions.assertEquals("gvdihoynkrxwetwk", response.extendedLocation().name());
        Assertions.assertEquals("rcyrucpcunnu", response.extendedLocation().type());
    }
}
