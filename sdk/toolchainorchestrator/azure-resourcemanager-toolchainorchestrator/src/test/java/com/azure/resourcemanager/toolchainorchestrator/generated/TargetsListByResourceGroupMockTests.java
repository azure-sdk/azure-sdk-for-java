// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationState;
import com.azure.resourcemanager.toolchainorchestrator.models.Target;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TargetsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"metadata\":{\"lmknbnxwcdom\":\"fhfv\",\"gbrt\":\"pvfqawz\"},\"properties\":{\"iqfyuttdi\":\"aclkiexhajlfnt\"},\"displayName\":\"b\",\"constraints\":\"n\",\"scope\":\"wmtxkyctwwgz\",\"topologies\":[{\"bindings\":[{\"provider\":\"ecvo\",\"role\":\"ygzyvneezaifght\"},{\"provider\":\"oqqtl\",\"role\":\"fhzbkr\"},{\"provider\":\"jjjavfqnvhnq\",\"role\":\"ewdogiyetesy\"},{\"provider\":\"vidbztjhqtfb\",\"role\":\"vnynkb\"}]},{\"bindings\":[{\"provider\":\"njuhpsprkzya\",\"role\":\"piaccxnafb\"},{\"provider\":\"qroohtu\",\"role\":\"vmaonurjt\"},{\"provider\":\"mghihp\",\"role\":\"ecmslclbl\"},{\"provider\":\"jxl\",\"role\":\"bsjuscvsfx\"}]}],\"components\":[{\"name\":\"tmgxuupbezqcc\",\"metadata\":{\"kdqkkyihzt\":\"tce\",\"gqzgwldoychill\":\"eq\",\"a\":\"ecfehuwa\",\"rweft\":\"uhicqllizstacsjv\"},\"properties\":{\"cxtczhupeukn\":\"dataejpmvssehaepwa\",\"c\":\"datajduyyespydjfb\",\"hulrtywikdmhla\":\"datav\",\"ufr\":\"datauflgbhgauacdixm\"},\"constraints\":\"yjq\",\"dependencies\":[\"fnozoeoqbvjh\",\"efgwbmqjc\",\"ntasfaymxbu\"],\"type\":\"pzealbmqkyojw\"},{\"name\":\"vf\",\"metadata\":{\"hxsgxj\":\"tsu\",\"wsdrnpxqwodif\":\"mmzrrscub\"},\"properties\":{\"wibvjogj\":\"datacjrmmua\"},\"constraints\":\"mcyefoyzbam\",\"dependencies\":[\"eofvfkakpoldt\"],\"type\":\"evboclzhzjknyuxg\"},{\"name\":\"ttxpnrupza\",\"metadata\":{\"swyskbruffg\":\"dixtreki\",\"lcouqehbhbcdszir\":\"lukkutvlxhrpqhvm\"},\"properties\":{\"pmbltoormkfql\":\"datando\"},\"constraints\":\"ldykalsygaolnjp\",\"dependencies\":[\"m\"],\"type\":\"ksibjgsjjxx\"},{\"name\":\"hmrnadzyqegxy\",\"metadata\":{\"bjijkgqxnh\":\"inbmh\",\"aujvaa\":\"bkezn\",\"xw\":\"nggiycwkdtaa\",\"rq\":\"ekaum\"},\"properties\":{\"bnxwbjsidbirkf\":\"datamqkra\",\"dgo\":\"datakso\",\"zkye\":\"dataewijymrhbguz\",\"o\":\"datanfnzhhh\"},\"constraints\":\"ffjkutycyarnroo\",\"dependencies\":[\"abzoghktdpyczhco\",\"ocnhzqrottjzcfyj\",\"pt\"],\"type\":\"rl\"}],\"reconciliationPolicy\":{\"state\":\"inactive\",\"interval\":\"pqinf\"},\"isDryRun\":true,\"status\":{\"lastModified\":\"2021-04-28T11:21:26Z\",\"properties\":{\"mrjzral\":\"d\",\"ypsjoq\":\"xpjb\",\"qzvs\":\"jenkyh\",\"hhqxuwyvcacoyviv\":\"xfxjelgcmpzqj\"}}},\"extendedLocation\":{\"name\":\"s\",\"type\":\"zusjsz\"},\"location\":\"scmnlziji\",\"tags\":{\"flnwy\":\"hgm\",\"iylylyfw\":\"qkxrerl\",\"yjtcdxabbujftab\":\"zutgqztwhghmupg\"},\"id\":\"nbbklqpxzucafed\",\"name\":\"wwnlzafwxudgnh\",\"type\":\"ookrtalvnbw\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ToolchainOrchestratorManager manager = ToolchainOrchestratorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Target> response
            = manager.targets().listByResourceGroup("patlbijp", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("scmnlziji", response.iterator().next().location());
        Assertions.assertEquals("hgm", response.iterator().next().tags().get("flnwy"));
        Assertions.assertEquals("fhfv", response.iterator().next().properties().metadata().get("lmknbnxwcdom"));
        Assertions.assertEquals("aclkiexhajlfnt",
            response.iterator().next().properties().properties().get("iqfyuttdi"));
        Assertions.assertEquals("b", response.iterator().next().properties().displayName());
        Assertions.assertEquals("n", response.iterator().next().properties().constraints());
        Assertions.assertEquals("wmtxkyctwwgz", response.iterator().next().properties().scope());
        Assertions.assertEquals("ecvo",
            response.iterator().next().properties().topologies().get(0).bindings().get(0).provider());
        Assertions.assertEquals("ygzyvneezaifght",
            response.iterator().next().properties().topologies().get(0).bindings().get(0).role());
        Assertions.assertEquals("tmgxuupbezqcc", response.iterator().next().properties().components().get(0).name());
        Assertions.assertEquals("tce",
            response.iterator().next().properties().components().get(0).metadata().get("kdqkkyihzt"));
        Assertions.assertEquals("yjq", response.iterator().next().properties().components().get(0).constraints());
        Assertions.assertEquals("fnozoeoqbvjh",
            response.iterator().next().properties().components().get(0).dependencies().get(0));
        Assertions.assertEquals("pzealbmqkyojw", response.iterator().next().properties().components().get(0).type());
        Assertions.assertEquals(ReconciliationState.INACTIVE,
            response.iterator().next().properties().reconciliationPolicy().state());
        Assertions.assertEquals("pqinf", response.iterator().next().properties().reconciliationPolicy().interval());
        Assertions.assertEquals(true, response.iterator().next().properties().isDryRun());
        Assertions.assertEquals("s", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("zusjsz", response.iterator().next().extendedLocation().type());
    }
}
