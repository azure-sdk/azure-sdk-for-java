// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.fluent.models.CampaignVersionInner;
import com.azure.resourcemanager.toolchainorchestrator.models.CampaignVersionProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.StageProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CampaignVersionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CampaignVersionInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"firstStage\":\"wbcb\",\"selfDriving\":false,\"stages\":{\"dibmikostbzbkiwb\":{\"contexts\":\"bwvqvxkdi\",\"config\":{\"tswbzuwfmd\":\"dataheb\",\"vcjfelisdjubggb\":\"dataragegi\"},\"inputs\":{\"m\":\"datakxkbsazgakgacyr\",\"pv\":\"datadmspof\",\"iofrzgbzjedmstk\":\"datahryl\"},\"name\":\"l\",\"provider\":\"bcuiiz\",\"stageSelector\":\"twfans\",\"schedule\":\"2021-10-27T18:54:55Z\"},\"hiyxgvelfclduc\":{\"contexts\":\"n\",\"config\":{\"nezzcezelfwyfwlw\":\"datahzfylsgcrpfbc\",\"zvaylptrsqqw\":\"datajwetnpsihcla\",\"waxfewzjkj\":\"datatcmwqkchc\"},\"inputs\":{\"ylkkshkbffmbm\":\"datadeqvhp\",\"gjxsnptfu\":\"datazjrgyww\",\"tdewemxswvruu\":\"datagicgaaoepttaq\"},\"name\":\"zjgehkfkim\",\"provider\":\"ixokffqyin\",\"stageSelector\":\"qepqwhixmon\",\"schedule\":\"2021-01-17T19:00:27Z\"}}},\"extendedLocation\":{\"name\":\"irdsvuwcob\",\"type\":\"egstmninwjizci\"},\"location\":\"ghgshejjtbxqmu\",\"tags\":{\"rsbycucrwn\":\"lxqzvn\",\"qbsms\":\"mikzeb\"},\"id\":\"ziqgfuh\",\"name\":\"kzruswh\",\"type\":\"hczznvf\"}")
            .toObject(CampaignVersionInner.class);
        Assertions.assertEquals("ghgshejjtbxqmu", model.location());
        Assertions.assertEquals("lxqzvn", model.tags().get("rsbycucrwn"));
        Assertions.assertEquals("wbcb", model.properties().firstStage());
        Assertions.assertEquals(false, model.properties().selfDriving());
        Assertions.assertEquals("bwvqvxkdi", model.properties().stages().get("dibmikostbzbkiwb").contexts());
        Assertions.assertEquals("l", model.properties().stages().get("dibmikostbzbkiwb").name());
        Assertions.assertEquals("bcuiiz", model.properties().stages().get("dibmikostbzbkiwb").provider());
        Assertions.assertEquals("twfans", model.properties().stages().get("dibmikostbzbkiwb").stageSelector());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-27T18:54:55Z"),
            model.properties().stages().get("dibmikostbzbkiwb").schedule());
        Assertions.assertEquals("irdsvuwcob", model.extendedLocation().name());
        Assertions.assertEquals("egstmninwjizci", model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CampaignVersionInner model = new CampaignVersionInner().withLocation("ghgshejjtbxqmu")
            .withTags(mapOf("rsbycucrwn", "lxqzvn", "qbsms", "mikzeb"))
            .withProperties(new CampaignVersionProperties().withFirstStage("wbcb")
                .withSelfDriving(false)
                .withStages(mapOf("dibmikostbzbkiwb", new StageProperties().withContexts("bwvqvxkdi")
                    .withConfig(mapOf("tswbzuwfmd", "dataheb", "vcjfelisdjubggb", "dataragegi"))
                    .withInputs(mapOf("m", "datakxkbsazgakgacyr", "pv", "datadmspof", "iofrzgbzjedmstk", "datahryl"))
                    .withName("l")
                    .withProvider("bcuiiz")
                    .withStageSelector("twfans")
                    .withSchedule(OffsetDateTime.parse("2021-10-27T18:54:55Z")), "hiyxgvelfclduc",
                    new StageProperties().withContexts("n")
                        .withConfig(mapOf("nezzcezelfwyfwlw", "datahzfylsgcrpfbc", "zvaylptrsqqw", "datajwetnpsihcla",
                            "waxfewzjkj", "datatcmwqkchc"))
                        .withInputs(mapOf("ylkkshkbffmbm", "datadeqvhp", "gjxsnptfu", "datazjrgyww", "tdewemxswvruu",
                            "datagicgaaoepttaq"))
                        .withName("zjgehkfkim")
                        .withProvider("ixokffqyin")
                        .withStageSelector("qepqwhixmon")
                        .withSchedule(OffsetDateTime.parse("2021-01-17T19:00:27Z")))))
            .withExtendedLocation(new ExtendedLocation().withName("irdsvuwcob").withType("egstmninwjizci"));
        model = BinaryData.fromObject(model).toObject(CampaignVersionInner.class);
        Assertions.assertEquals("ghgshejjtbxqmu", model.location());
        Assertions.assertEquals("lxqzvn", model.tags().get("rsbycucrwn"));
        Assertions.assertEquals("wbcb", model.properties().firstStage());
        Assertions.assertEquals(false, model.properties().selfDriving());
        Assertions.assertEquals("bwvqvxkdi", model.properties().stages().get("dibmikostbzbkiwb").contexts());
        Assertions.assertEquals("l", model.properties().stages().get("dibmikostbzbkiwb").name());
        Assertions.assertEquals("bcuiiz", model.properties().stages().get("dibmikostbzbkiwb").provider());
        Assertions.assertEquals("twfans", model.properties().stages().get("dibmikostbzbkiwb").stageSelector());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-27T18:54:55Z"),
            model.properties().stages().get("dibmikostbzbkiwb").schedule());
        Assertions.assertEquals("irdsvuwcob", model.extendedLocation().name());
        Assertions.assertEquals("egstmninwjizci", model.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
