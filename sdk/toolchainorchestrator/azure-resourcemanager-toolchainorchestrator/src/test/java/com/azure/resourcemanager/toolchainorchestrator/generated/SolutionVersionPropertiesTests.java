// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.models.ComponentProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.SolutionVersionProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionVersionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionVersionProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Failed\",\"components\":[{\"name\":\"wpijrajci\",\"metadata\":{\"nzqodfvpg\":\"ghfcfiwrxgkneuvy\",\"zdjtxvzflbqv\":\"hoxgsgbpf\",\"vetnwsdtutn\":\"aqvlgafcqusr\",\"zhyrmewipmve\":\"lduycv\"},\"properties\":{\"xundxgk\":\"dataukuqgsj\",\"muvgp\":\"datatwzhhzjhfjmhv\"},\"constraints\":\"neqsxvmh\",\"dependencies\":[\"zjyi\",\"sasbhu\",\"ypoh\",\"uemsly\"],\"type\":\"sqy\"},{\"name\":\"pfoobr\",\"metadata\":{\"sjnygqdnfwqzdzgt\":\"y\"},\"properties\":{\"ijouwivkxoyzunb\":\"dataxhnfhqly\",\"wpgclrcivt\":\"dataxxrtikvc\"},\"constraints\":\"xfrk\",\"dependencies\":[\"pmyyefrpmpdnqq\",\"ka\",\"ao\",\"vmm\"],\"type\":\"npqfrtqlkzmeg\"}],\"displayName\":\"tgvkxlzyqd\",\"metadata\":{\"ansym\":\"gcealzxwh\"}}")
            .toObject(SolutionVersionProperties.class);
        Assertions.assertEquals("wpijrajci", model.components().get(0).name());
        Assertions.assertEquals("ghfcfiwrxgkneuvy", model.components().get(0).metadata().get("nzqodfvpg"));
        Assertions.assertEquals("neqsxvmh", model.components().get(0).constraints());
        Assertions.assertEquals("zjyi", model.components().get(0).dependencies().get(0));
        Assertions.assertEquals("sqy", model.components().get(0).type());
        Assertions.assertEquals("tgvkxlzyqd", model.displayName());
        Assertions.assertEquals("gcealzxwh", model.metadata().get("ansym"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionVersionProperties model = new SolutionVersionProperties()
            .withComponents(Arrays.asList(
                new ComponentProperties().withName("wpijrajci")
                    .withMetadata(mapOf("nzqodfvpg", "ghfcfiwrxgkneuvy", "zdjtxvzflbqv", "hoxgsgbpf", "vetnwsdtutn",
                        "aqvlgafcqusr", "zhyrmewipmve", "lduycv"))
                    .withProperties(mapOf("xundxgk", "dataukuqgsj", "muvgp", "datatwzhhzjhfjmhv"))
                    .withConstraints("neqsxvmh")
                    .withDependencies(Arrays.asList("zjyi", "sasbhu", "ypoh", "uemsly"))
                    .withType("sqy"),
                new ComponentProperties().withName("pfoobr")
                    .withMetadata(mapOf("sjnygqdnfwqzdzgt", "y"))
                    .withProperties(mapOf("ijouwivkxoyzunb", "dataxhnfhqly", "wpgclrcivt", "dataxxrtikvc"))
                    .withConstraints("xfrk")
                    .withDependencies(Arrays.asList("pmyyefrpmpdnqq", "ka", "ao", "vmm"))
                    .withType("npqfrtqlkzmeg")))
            .withDisplayName("tgvkxlzyqd")
            .withMetadata(mapOf("ansym", "gcealzxwh"));
        model = BinaryData.fromObject(model).toObject(SolutionVersionProperties.class);
        Assertions.assertEquals("wpijrajci", model.components().get(0).name());
        Assertions.assertEquals("ghfcfiwrxgkneuvy", model.components().get(0).metadata().get("nzqodfvpg"));
        Assertions.assertEquals("neqsxvmh", model.components().get(0).constraints());
        Assertions.assertEquals("zjyi", model.components().get(0).dependencies().get(0));
        Assertions.assertEquals("sqy", model.components().get(0).type());
        Assertions.assertEquals("tgvkxlzyqd", model.displayName());
        Assertions.assertEquals("gcealzxwh", model.metadata().get("ansym"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
