// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager;
import com.azure.resourcemanager.toolchainorchestrator.models.CampaignVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CampaignVersionsListByCampaignMockTests {
    @Test
    public void testListByCampaign() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"firstStage\":\"qibzji\",\"selfDriving\":false,\"stages\":{\"rhwv\":{\"contexts\":\"ph\",\"config\":{\"qsratjhd\":\"datacjwqw\",\"gv\":\"datazybspijhfrzgdkk\",\"zhwilzzh\":\"dataukhsusmmorf\",\"r\":\"dataijmri\"},\"inputs\":{\"cxiv\":\"dataneyttl\",\"umltwjflu\":\"databkut\"},\"name\":\"nbpvzlq\",\"provider\":\"auyqnj\",\"stageSelector\":\"hmocgjshg\",\"schedule\":\"2021-11-30T03:15:32Z\"},\"jqeb\":{\"contexts\":\"qqgglj\",\"config\":{\"rbctbhpjhxpcvrd\":\"datasjrclrvtzq\",\"it\":\"datay\"},\"inputs\":{\"zjahwriuomz\":\"dataqady\"},\"name\":\"fki\",\"provider\":\"evsaa\",\"stageSelector\":\"spcaxi\",\"schedule\":\"2021-11-25T01:43:49Z\"},\"nn\":{\"contexts\":\"cx\",\"config\":{\"fsvpink\":\"datazzromvygysemtmes\",\"tdiswxspvckojaz\":\"datapat\"},\"inputs\":{\"vdylytcovqseusrf\":\"dataspftesubzpv\",\"swkjmdihdcyyyz\":\"databdxzfxnxmlbmu\"},\"name\":\"hbw\",\"provider\":\"nufzr\",\"stageSelector\":\"m\",\"schedule\":\"2021-11-26T02:57:42Z\"},\"mf\":{\"contexts\":\"rtftedz\",\"config\":{\"tyjjvavdpwwobt\":\"datajtvgjsx\",\"cauwazcgwdfriwg\":\"dataphtitsffofwanmhk\",\"byfg\":\"databjpozokscvgllixd\",\"ohutxlcsk\":\"dataewqkjvxprwpxs\"},\"inputs\":{\"ggzlf\":\"datazuu\"},\"name\":\"rdcgu\",\"provider\":\"rtmdylperpil\",\"stageSelector\":\"jzgc\",\"schedule\":\"2021-08-20T15:04:41Z\"}}},\"extendedLocation\":{\"name\":\"bodetr\",\"type\":\"sr\"},\"location\":\"tshuvftwaivm\",\"tags\":{\"mpdxxzetwwzjwotn\":\"evzgjypanh\"},\"id\":\"lkfhglhrfoxqwec\",\"name\":\"snhpcselqx\",\"type\":\"vppqi\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ToolchainOrchestratorManager manager = ToolchainOrchestratorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CampaignVersion> response
            = manager.campaignVersions().listByCampaign("wyj", "nldpxottd", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tshuvftwaivm", response.iterator().next().location());
        Assertions.assertEquals("evzgjypanh", response.iterator().next().tags().get("mpdxxzetwwzjwotn"));
        Assertions.assertEquals("qibzji", response.iterator().next().properties().firstStage());
        Assertions.assertEquals(false, response.iterator().next().properties().selfDriving());
        Assertions.assertEquals("ph", response.iterator().next().properties().stages().get("rhwv").contexts());
        Assertions.assertEquals("nbpvzlq", response.iterator().next().properties().stages().get("rhwv").name());
        Assertions.assertEquals("auyqnj", response.iterator().next().properties().stages().get("rhwv").provider());
        Assertions.assertEquals("hmocgjshg",
            response.iterator().next().properties().stages().get("rhwv").stageSelector());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-30T03:15:32Z"),
            response.iterator().next().properties().stages().get("rhwv").schedule());
        Assertions.assertEquals("bodetr", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("sr", response.iterator().next().extendedLocation().type());
    }
}
