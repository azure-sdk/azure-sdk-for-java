// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.models.InstanceProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationPolicyProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationState;
import com.azure.resourcemanager.toolchainorchestrator.models.TargetSelectorProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InstancePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InstanceProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Canceled\",\"metadata\":{\"wwa\":\"df\"},\"displayName\":\"kojvd\",\"scope\":\"zfoqouicybxar\",\"solution\":\"gszufoxciqopid\",\"target\":{\"name\":\"ciodhkhaz\",\"selector\":{\"onlwntoeg\":\"nz\",\"mrv\":\"kdwbwhkszz\"}},\"reconciliationPolicy\":{\"state\":\"active\",\"interval\":\"tvb\"},\"isDryRun\":true,\"status\":{\"lastModified\":\"2021-10-01T10:28:10Z\",\"properties\":{\"wtl\":\"oyzko\",\"uximerqfobw\":\"nguxawqaldsy\"}}}")
            .toObject(InstanceProperties.class);
        Assertions.assertEquals("df", model.metadata().get("wwa"));
        Assertions.assertEquals("kojvd", model.displayName());
        Assertions.assertEquals("zfoqouicybxar", model.scope());
        Assertions.assertEquals("gszufoxciqopid", model.solution());
        Assertions.assertEquals("ciodhkhaz", model.target().name());
        Assertions.assertEquals("nz", model.target().selector().get("onlwntoeg"));
        Assertions.assertEquals(ReconciliationState.ACTIVE, model.reconciliationPolicy().state());
        Assertions.assertEquals("tvb", model.reconciliationPolicy().interval());
        Assertions.assertEquals(true, model.isDryRun());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InstanceProperties model = new InstanceProperties().withMetadata(mapOf("wwa", "df"))
            .withDisplayName("kojvd")
            .withScope("zfoqouicybxar")
            .withSolution("gszufoxciqopid")
            .withTarget(new TargetSelectorProperties().withName("ciodhkhaz")
                .withSelector(mapOf("onlwntoeg", "nz", "mrv", "kdwbwhkszz")))
            .withReconciliationPolicy(
                new ReconciliationPolicyProperties().withState(ReconciliationState.ACTIVE).withInterval("tvb"))
            .withIsDryRun(true);
        model = BinaryData.fromObject(model).toObject(InstanceProperties.class);
        Assertions.assertEquals("df", model.metadata().get("wwa"));
        Assertions.assertEquals("kojvd", model.displayName());
        Assertions.assertEquals("zfoqouicybxar", model.scope());
        Assertions.assertEquals("gszufoxciqopid", model.solution());
        Assertions.assertEquals("ciodhkhaz", model.target().name());
        Assertions.assertEquals("nz", model.target().selector().get("onlwntoeg"));
        Assertions.assertEquals(ReconciliationState.ACTIVE, model.reconciliationPolicy().state());
        Assertions.assertEquals("tvb", model.reconciliationPolicy().interval());
        Assertions.assertEquals(true, model.isDryRun());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
