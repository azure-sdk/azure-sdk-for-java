// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.models.CatalogVersionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CatalogVersionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CatalogVersionProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Canceled\",\"properties\":{\"zehtdhgb\":\"datacof\"},\"metadata\":{\"zmlovuanash\":\"reljeamur\",\"erbdk\":\"xlpm\"},\"parentName\":\"vidizozsdb\",\"catalogType\":\"xjmonf\",\"status\":{\"properties\":{\"cypuuwwlt\":\"w\",\"tzenk\":\"uqj\",\"zhmkdasvflyh\":\"if\"}}}")
            .toObject(CatalogVersionProperties.class);
        Assertions.assertEquals("reljeamur", model.metadata().get("zmlovuanash"));
        Assertions.assertEquals("vidizozsdb", model.parentName());
        Assertions.assertEquals("xjmonf", model.catalogType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CatalogVersionProperties model = new CatalogVersionProperties().withProperties(mapOf("zehtdhgb", "datacof"))
            .withMetadata(mapOf("zmlovuanash", "reljeamur", "erbdk", "xlpm"))
            .withParentName("vidizozsdb")
            .withCatalogType("xjmonf");
        model = BinaryData.fromObject(model).toObject(CatalogVersionProperties.class);
        Assertions.assertEquals("reljeamur", model.metadata().get("zmlovuanash"));
        Assertions.assertEquals("vidizozsdb", model.parentName());
        Assertions.assertEquals("xjmonf", model.catalogType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
