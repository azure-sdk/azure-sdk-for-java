// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.fluent.models.SolutionInner;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.SolutionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"quvgjxpybczme\",\"type\":\"mtz\"},\"location\":\"bsphrupidgsybbe\",\"tags\":{\"xaobhdxbmtqioqjz\":\"hoycm\"},\"id\":\"htbmuf\",\"name\":\"ownoizhw\",\"type\":\"rxybqsoq\"}")
            .toObject(SolutionInner.class);
        Assertions.assertEquals("bsphrupidgsybbe", model.location());
        Assertions.assertEquals("hoycm", model.tags().get("xaobhdxbmtqioqjz"));
        Assertions.assertEquals("quvgjxpybczme", model.extendedLocation().name());
        Assertions.assertEquals("mtz", model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionInner model = new SolutionInner().withLocation("bsphrupidgsybbe")
            .withTags(mapOf("xaobhdxbmtqioqjz", "hoycm"))
            .withProperties(new SolutionProperties())
            .withExtendedLocation(new ExtendedLocation().withName("quvgjxpybczme").withType("mtz"));
        model = BinaryData.fromObject(model).toObject(SolutionInner.class);
        Assertions.assertEquals("bsphrupidgsybbe", model.location());
        Assertions.assertEquals("hoycm", model.tags().get("xaobhdxbmtqioqjz"));
        Assertions.assertEquals("quvgjxpybczme", model.extendedLocation().name());
        Assertions.assertEquals("mtz", model.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
