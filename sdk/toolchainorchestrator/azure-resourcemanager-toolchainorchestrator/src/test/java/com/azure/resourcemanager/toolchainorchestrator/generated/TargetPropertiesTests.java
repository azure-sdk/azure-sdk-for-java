// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.models.BindingProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ComponentProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationPolicyProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationState;
import com.azure.resourcemanager.toolchainorchestrator.models.TargetProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.TopologyProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TargetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TargetProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Failed\",\"metadata\":{\"c\":\"ampmngnz\",\"ochcbonqvpkvl\":\"aqw\",\"ase\":\"xnj\",\"enjbdlwtgrhp\":\"pheoflokeyy\"},\"properties\":{\"zj\":\"jumasx\"},\"displayName\":\"yegu\",\"constraints\":\"hb\",\"scope\":\"hejjz\",\"topologies\":[{\"bindings\":[{\"provider\":\"gwdslfhotwm\",\"config\":{\"cftadeh\":\"pwlbjnpg\",\"dejbavo\":\"nltyfsoppusuesnz\",\"vudwx\":\"xzdmohctb\"},\"role\":\"ndnvo\"},{\"provider\":\"gujjugwdkcglh\",\"config\":{\"yggdtjixh\":\"zj\",\"evfyexfwhybcib\":\"kuofqweykhme\"},\"role\":\"yvdcsitynnaa\"},{\"provider\":\"dectehfiqsc\",\"config\":{\"kgqhcjrefovg\":\"pvhez\",\"jpkcattpng\":\"kqsleyyvxy\",\"czsqpjhvm\":\"cr\"},\"role\":\"ajvnysounqe\"}]},{\"bindings\":[{\"provider\":\"oaeupfhyhltrpmo\",\"config\":{\"u\":\"cma\",\"aodsfcpkv\":\"kthfui\",\"uaxbezyiuokkt\":\"odpuozmyzydag\",\"reximoryocfs\":\"hrdxwzywqsmbs\"},\"role\":\"ksymd\"}]},{\"bindings\":[{\"provider\":\"tki\",\"config\":{\"vyifqrvkdvjsl\":\"hqyudxorrqnbpoc\",\"vdfwatkpn\":\"rm\",\"wiqzbqjvsovmyo\":\"ulexxbczwtr\",\"zdobpxjmflbvvnch\":\"acspkwl\"},\"role\":\"kcciwwzjuqkhr\"},{\"provider\":\"ajiwkuo\",\"config\":{\"sauuimj\":\"kg\",\"rfbyaosvexcso\":\"vxieduugidyj\",\"vleggzfbuhfmvfax\":\"pclhocohslk\"},\"role\":\"ffeii\"},{\"provider\":\"hl\",\"config\":{\"shxmzsbbzoggigrx\":\"zy\"},\"role\":\"burvjxxjnspy\"}]}],\"components\":[{\"name\":\"koen\",\"metadata\":{\"dng\":\"knvudwtiukb\",\"g\":\"pocipazyxoegu\",\"mrbpizcdrqj\":\"npiucgygevqznty\"},\"properties\":{\"cwif\":\"dataydnfyhxdeoejz\"},\"constraints\":\"ttgzfbis\",\"dependencies\":[\"khaj\"],\"type\":\"eyeam\"}],\"reconciliationPolicy\":{\"state\":\"active\",\"interval\":\"agalpbuxwgipwhon\"},\"isDryRun\":false,\"status\":{\"lastModified\":\"2021-05-13T18:46:16Z\",\"properties\":{\"mryw\":\"ankixzbinjeput\",\"yqzrnkcqvyxlw\":\"uzoqft\",\"oqqnwvlryav\":\"zlsico\"}}}")
            .toObject(TargetProperties.class);
        Assertions.assertEquals("ampmngnz", model.metadata().get("c"));
        Assertions.assertEquals("jumasx", model.properties().get("zj"));
        Assertions.assertEquals("yegu", model.displayName());
        Assertions.assertEquals("hb", model.constraints());
        Assertions.assertEquals("hejjz", model.scope());
        Assertions.assertEquals("gwdslfhotwm", model.topologies().get(0).bindings().get(0).provider());
        Assertions.assertEquals("pwlbjnpg", model.topologies().get(0).bindings().get(0).config().get("cftadeh"));
        Assertions.assertEquals("ndnvo", model.topologies().get(0).bindings().get(0).role());
        Assertions.assertEquals("koen", model.components().get(0).name());
        Assertions.assertEquals("knvudwtiukb", model.components().get(0).metadata().get("dng"));
        Assertions.assertEquals("ttgzfbis", model.components().get(0).constraints());
        Assertions.assertEquals("khaj", model.components().get(0).dependencies().get(0));
        Assertions.assertEquals("eyeam", model.components().get(0).type());
        Assertions.assertEquals(ReconciliationState.ACTIVE, model.reconciliationPolicy().state());
        Assertions.assertEquals("agalpbuxwgipwhon", model.reconciliationPolicy().interval());
        Assertions.assertEquals(false, model.isDryRun());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TargetProperties model = new TargetProperties()
            .withMetadata(mapOf("c", "ampmngnz", "ochcbonqvpkvl", "aqw", "ase", "xnj", "enjbdlwtgrhp", "pheoflokeyy"))
            .withProperties(mapOf("zj", "jumasx"))
            .withDisplayName("yegu")
            .withConstraints("hb")
            .withScope("hejjz")
            .withTopologies(
                Arrays
                    .asList(
                        new TopologyProperties()
                            .withBindings(Arrays.asList(
                                new BindingProperties().withProvider("gwdslfhotwm")
                                    .withConfig(mapOf("cftadeh", "pwlbjnpg", "dejbavo", "nltyfsoppusuesnz", "vudwx",
                                        "xzdmohctb"))
                                    .withRole("ndnvo"),
                                new BindingProperties().withProvider("gujjugwdkcglh")
                                    .withConfig(mapOf("yggdtjixh", "zj", "evfyexfwhybcib", "kuofqweykhme"))
                                    .withRole("yvdcsitynnaa"),
                                new BindingProperties().withProvider("dectehfiqsc")
                                    .withConfig(
                                        mapOf("kgqhcjrefovg", "pvhez", "jpkcattpng", "kqsleyyvxy", "czsqpjhvm", "cr"))
                                    .withRole("ajvnysounqe"))),
                        new TopologyProperties()
                            .withBindings(Arrays.asList(new BindingProperties().withProvider("oaeupfhyhltrpmo")
                                .withConfig(mapOf("u", "cma", "aodsfcpkv", "kthfui", "uaxbezyiuokkt", "odpuozmyzydag",
                                    "reximoryocfs", "hrdxwzywqsmbs"))
                                .withRole("ksymd"))),
                        new TopologyProperties().withBindings(Arrays.asList(
                            new BindingProperties().withProvider("tki")
                                .withConfig(mapOf("vyifqrvkdvjsl", "hqyudxorrqnbpoc", "vdfwatkpn", "rm",
                                    "wiqzbqjvsovmyo", "ulexxbczwtr", "zdobpxjmflbvvnch", "acspkwl"))
                                .withRole("kcciwwzjuqkhr"),
                            new BindingProperties().withProvider("ajiwkuo")
                                .withConfig(mapOf("sauuimj", "kg", "rfbyaosvexcso", "vxieduugidyj", "vleggzfbuhfmvfax",
                                    "pclhocohslk"))
                                .withRole("ffeii"),
                            new BindingProperties().withProvider("hl")
                                .withConfig(mapOf("shxmzsbbzoggigrx", "zy"))
                                .withRole("burvjxxjnspy")))))
            .withComponents(Arrays.asList(new ComponentProperties().withName("koen")
                .withMetadata(mapOf("dng", "knvudwtiukb", "g", "pocipazyxoegu", "mrbpizcdrqj", "npiucgygevqznty"))
                .withProperties(mapOf("cwif", "dataydnfyhxdeoejz"))
                .withConstraints("ttgzfbis")
                .withDependencies(Arrays.asList("khaj"))
                .withType("eyeam")))
            .withReconciliationPolicy(new ReconciliationPolicyProperties().withState(ReconciliationState.ACTIVE)
                .withInterval("agalpbuxwgipwhon"))
            .withIsDryRun(false);
        model = BinaryData.fromObject(model).toObject(TargetProperties.class);
        Assertions.assertEquals("ampmngnz", model.metadata().get("c"));
        Assertions.assertEquals("jumasx", model.properties().get("zj"));
        Assertions.assertEquals("yegu", model.displayName());
        Assertions.assertEquals("hb", model.constraints());
        Assertions.assertEquals("hejjz", model.scope());
        Assertions.assertEquals("gwdslfhotwm", model.topologies().get(0).bindings().get(0).provider());
        Assertions.assertEquals("pwlbjnpg", model.topologies().get(0).bindings().get(0).config().get("cftadeh"));
        Assertions.assertEquals("ndnvo", model.topologies().get(0).bindings().get(0).role());
        Assertions.assertEquals("koen", model.components().get(0).name());
        Assertions.assertEquals("knvudwtiukb", model.components().get(0).metadata().get("dng"));
        Assertions.assertEquals("ttgzfbis", model.components().get(0).constraints());
        Assertions.assertEquals("khaj", model.components().get(0).dependencies().get(0));
        Assertions.assertEquals("eyeam", model.components().get(0).type());
        Assertions.assertEquals(ReconciliationState.ACTIVE, model.reconciliationPolicy().state());
        Assertions.assertEquals("agalpbuxwgipwhon", model.reconciliationPolicy().interval());
        Assertions.assertEquals(false, model.isDryRun());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
