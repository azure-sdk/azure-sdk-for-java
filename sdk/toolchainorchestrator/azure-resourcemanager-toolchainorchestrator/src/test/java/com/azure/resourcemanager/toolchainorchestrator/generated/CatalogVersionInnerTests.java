// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.fluent.models.CatalogVersionInner;
import com.azure.resourcemanager.toolchainorchestrator.models.CatalogVersionProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CatalogVersionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CatalogVersionInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"properties\":{\"xprimrsop\":\"datazhajoylhjlmuo\",\"stvasylwxdzaumw\":\"dataeecjmeis\"},\"metadata\":{\"zboyjathwt\":\"hguuf\",\"ebwjscjpahlxvea\":\"olbaemwmdx\"},\"parentName\":\"qxnmwmqt\",\"catalogType\":\"xyi\",\"status\":{\"properties\":{\"mrsieekp\":\"tvqcttadijaeu\"}}},\"extendedLocation\":{\"name\":\"zaapmudqmeqwi\",\"type\":\"pibudqwyxebeybpm\"},\"location\":\"nrtffyaqi\",\"tags\":{\"hvseufuqyrx\":\"heioqa\",\"dgamquhiosrsj\":\"dlcgqlsismjqfr\",\"hcz\":\"ivfcdisyirnx\",\"qvwre\":\"xrxzbujrtr\"},\"id\":\"khgn\",\"name\":\"nzonzl\",\"type\":\"piqywnc\"}")
            .toObject(CatalogVersionInner.class);
        Assertions.assertEquals("nrtffyaqi", model.location());
        Assertions.assertEquals("heioqa", model.tags().get("hvseufuqyrx"));
        Assertions.assertEquals("hguuf", model.properties().metadata().get("zboyjathwt"));
        Assertions.assertEquals("qxnmwmqt", model.properties().parentName());
        Assertions.assertEquals("xyi", model.properties().catalogType());
        Assertions.assertEquals("zaapmudqmeqwi", model.extendedLocation().name());
        Assertions.assertEquals("pibudqwyxebeybpm", model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CatalogVersionInner model = new CatalogVersionInner().withLocation("nrtffyaqi")
            .withTags(mapOf("hvseufuqyrx", "heioqa", "dgamquhiosrsj", "dlcgqlsismjqfr", "hcz", "ivfcdisyirnx", "qvwre",
                "xrxzbujrtr"))
            .withProperties(new CatalogVersionProperties()
                .withProperties(mapOf("xprimrsop", "datazhajoylhjlmuo", "stvasylwxdzaumw", "dataeecjmeis"))
                .withMetadata(mapOf("zboyjathwt", "hguuf", "ebwjscjpahlxvea", "olbaemwmdx"))
                .withParentName("qxnmwmqt")
                .withCatalogType("xyi"))
            .withExtendedLocation(new ExtendedLocation().withName("zaapmudqmeqwi").withType("pibudqwyxebeybpm"));
        model = BinaryData.fromObject(model).toObject(CatalogVersionInner.class);
        Assertions.assertEquals("nrtffyaqi", model.location());
        Assertions.assertEquals("heioqa", model.tags().get("hvseufuqyrx"));
        Assertions.assertEquals("hguuf", model.properties().metadata().get("zboyjathwt"));
        Assertions.assertEquals("qxnmwmqt", model.properties().parentName());
        Assertions.assertEquals("xyi", model.properties().catalogType());
        Assertions.assertEquals("zaapmudqmeqwi", model.extendedLocation().name());
        Assertions.assertEquals("pibudqwyxebeybpm", model.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
