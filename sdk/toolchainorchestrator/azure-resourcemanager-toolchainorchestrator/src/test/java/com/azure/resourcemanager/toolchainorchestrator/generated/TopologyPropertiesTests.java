// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.models.BindingProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.TopologyProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopologyPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopologyProperties model = BinaryData.fromString(
            "{\"bindings\":[{\"provider\":\"eun\",\"config\":{\"koklya\":\"hgyxzkonoc\",\"ewrmjmwvvjektc\":\"uconuqszfkbey\",\"frzpwvlqdqgb\":\"senhwlrs\",\"fcivfsnkym\":\"qylihkaetckt\"},\"role\":\"ctq\"}]}")
            .toObject(TopologyProperties.class);
        Assertions.assertEquals("eun", model.bindings().get(0).provider());
        Assertions.assertEquals("hgyxzkonoc", model.bindings().get(0).config().get("koklya"));
        Assertions.assertEquals("ctq", model.bindings().get(0).role());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopologyProperties model
            = new TopologyProperties().withBindings(Arrays.asList(new BindingProperties().withProvider("eun")
                .withConfig(mapOf("koklya", "hgyxzkonoc", "ewrmjmwvvjektc", "uconuqszfkbey", "frzpwvlqdqgb", "senhwlrs",
                    "fcivfsnkym", "qylihkaetckt"))
                .withRole("ctq")));
        model = BinaryData.fromObject(model).toObject(TopologyProperties.class);
        Assertions.assertEquals("eun", model.bindings().get(0).provider());
        Assertions.assertEquals("hgyxzkonoc", model.bindings().get(0).config().get("koklya"));
        Assertions.assertEquals("ctq", model.bindings().get(0).role());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
