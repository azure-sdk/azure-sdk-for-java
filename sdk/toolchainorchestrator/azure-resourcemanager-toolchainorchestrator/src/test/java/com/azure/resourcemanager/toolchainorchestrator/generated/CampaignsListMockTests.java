// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager;
import com.azure.resourcemanager.toolchainorchestrator.models.Campaign;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CampaignsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"eciqchxr\",\"type\":\"uicdsiwdfmmpzhzz\"},\"location\":\"ywrgyngydgr\",\"tags\":{\"djrkclamggl\":\"cakiqao\"},\"id\":\"lmf\",\"name\":\"jdoq\",\"type\":\"ykglt\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ToolchainOrchestratorManager manager = ToolchainOrchestratorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Campaign> response = manager.campaigns().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ywrgyngydgr", response.iterator().next().location());
        Assertions.assertEquals("cakiqao", response.iterator().next().tags().get("djrkclamggl"));
        Assertions.assertEquals("eciqchxr", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("uicdsiwdfmmpzhzz", response.iterator().next().extendedLocation().type());
    }
}
