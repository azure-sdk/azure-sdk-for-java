// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager;
import com.azure.resourcemanager.toolchainorchestrator.models.BindingProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ComponentProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationPolicyProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationState;
import com.azure.resourcemanager.toolchainorchestrator.models.Target;
import com.azure.resourcemanager.toolchainorchestrator.models.TargetProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.TopologyProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TargetsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"metadata\":{\"vcoqraswugyxpqi\":\"itpkpztrgdg\",\"alwvskbu\":\"we\",\"caqt\":\"z\",\"jpds\":\"ltcoqc\"},\"properties\":{\"vbiztjofqcv\":\"kuejk\",\"yeji\":\"vjufycsjmlbe\"},\"displayName\":\"uxegthortudawlpj\",\"constraints\":\"lqerpptcbgqnzm\",\"scope\":\"iilialwc\",\"topologies\":[{\"bindings\":[{\"provider\":\"bcccgzpra\",\"role\":\"xnyuffatsgftipwc\"},{\"provider\":\"byubhiqdxyurnpn\",\"role\":\"hza\"}]},{\"bindings\":[{\"provider\":\"nuhiig\",\"role\":\"yl\"},{\"provider\":\"ui\",\"role\":\"vxva\"},{\"provider\":\"vcrk\",\"role\":\"lbnb\"},{\"provider\":\"xvhcs\",\"role\":\"hzlwxaea\"}]}],\"components\":[{\"name\":\"rexdndsbd\",\"metadata\":{\"agttm\":\"derzmwnto\",\"iua\":\"mmagoaqylkjzt\"},\"properties\":{\"zc\":\"datagmxitpfi\"},\"constraints\":\"ltkrl\",\"dependencies\":[\"tbdrvcqgue\",\"zhomp\",\"eqdurelyujlfyoum\"],\"type\":\"ckyeclcdigpta\"}],\"reconciliationPolicy\":{\"state\":\"inactive\",\"interval\":\"zmqxucyci\"},\"isDryRun\":false,\"status\":{\"lastModified\":\"2021-08-08T15:31:51Z\",\"properties\":{\"yzjdnrqjbt\":\"tgjcy\",\"yh\":\"jeaoqaqbz\"}}},\"extendedLocation\":{\"name\":\"w\",\"type\":\"v\"},\"location\":\"tbwbqamteuli\",\"tags\":{\"uxx\":\"pkcvmwf\",\"iciijqpkzfbojx\":\"pmywbormcq\",\"nkwywzwofa\":\"mcsmyqwixvcp\",\"t\":\"ickduoiqta\"},\"id\":\"vsknxrwzawnv\",\"name\":\"bcfhzagxnv\",\"type\":\"ycvdimw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ToolchainOrchestratorManager manager = ToolchainOrchestratorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Target response = manager.targets()
            .define("mmfz")
            .withRegion("drftbcvexreuquo")
            .withExistingResourceGroup("yay")
            .withExtendedLocation(new ExtendedLocation().withName("uqwqulsutrjbhxyk").withType("hyqezvqq"))
            .withTags(mapOf("whreagkhyxvrq", "jv", "lmepjpf", "vbczsulmdg", "g", "eykgsangpszngaf"))
            .withProperties(new TargetProperties().withMetadata(mapOf("rsxkr", "zxmdew"))
                .withProperties(
                    mapOf("uhbrnnhjxsq", "jazejwwviyoyp", "yqiq", "jhqkbiwetpozy", "etzlexbsfledynoj", "hgf"))
                .withDisplayName("iuwfbzkkdtnhqsy")
                .withConstraints("jselpkpbafvafh")
                .withScope("ylcc")
                .withTopologies(Arrays.asList(new TopologyProperties()
                    .withBindings(Arrays.asList(new BindingProperties().withProvider("hyzdfwrs").withRole("fplt"),
                        new BindingProperties().withProvider("bmairrhvhfnracwn").withRole("qigtuujwouhdaws")))))
                .withComponents(Arrays.asList(new ComponentProperties().withName("bjb")
                    .withMetadata(mapOf("gmuwdchozfnkf", "ybvitvqkjyaznumt", "oaiknaqlnuwig", "xlvxnoakiz"))
                    .withProperties(mapOf("wxh", "datalykwphvxz"))
                    .withConstraints("ejtlk")
                    .withDependencies(Arrays.asList("onwivkcqhrxhxkn", "ccrmmk", "upijubyqjfkakfq", "rke"))
                    .withType("yildudxjascow")))
                .withReconciliationPolicy(new ReconciliationPolicyProperties().withState(ReconciliationState.INACTIVE)
                    .withInterval("jkpdxphlkksnm"))
                .withIsDryRun(true))
            .create();

        Assertions.assertEquals("tbwbqamteuli", response.location());
        Assertions.assertEquals("pkcvmwf", response.tags().get("uxx"));
        Assertions.assertEquals("itpkpztrgdg", response.properties().metadata().get("vcoqraswugyxpqi"));
        Assertions.assertEquals("kuejk", response.properties().properties().get("vbiztjofqcv"));
        Assertions.assertEquals("uxegthortudawlpj", response.properties().displayName());
        Assertions.assertEquals("lqerpptcbgqnzm", response.properties().constraints());
        Assertions.assertEquals("iilialwc", response.properties().scope());
        Assertions.assertEquals("bcccgzpra", response.properties().topologies().get(0).bindings().get(0).provider());
        Assertions.assertEquals("xnyuffatsgftipwc", response.properties().topologies().get(0).bindings().get(0).role());
        Assertions.assertEquals("rexdndsbd", response.properties().components().get(0).name());
        Assertions.assertEquals("derzmwnto", response.properties().components().get(0).metadata().get("agttm"));
        Assertions.assertEquals("ltkrl", response.properties().components().get(0).constraints());
        Assertions.assertEquals("tbdrvcqgue", response.properties().components().get(0).dependencies().get(0));
        Assertions.assertEquals("ckyeclcdigpta", response.properties().components().get(0).type());
        Assertions.assertEquals(ReconciliationState.INACTIVE, response.properties().reconciliationPolicy().state());
        Assertions.assertEquals("zmqxucyci", response.properties().reconciliationPolicy().interval());
        Assertions.assertEquals(false, response.properties().isDryRun());
        Assertions.assertEquals("w", response.extendedLocation().name());
        Assertions.assertEquals("v", response.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
