// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.models.StageProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StagePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StageProperties model = BinaryData.fromString(
            "{\"contexts\":\"nidibgqjxg\",\"config\":{\"kqmhhaowjr\":\"datahgovfgp\"},\"inputs\":{\"dzvkfvxcnqmxq\":\"datauporqzdfu\",\"khlg\":\"dataswokm\",\"iwtglxxhljfpg\":\"datadhbemzqkzszu\",\"gmqgjs\":\"dataicrmnzh\"},\"name\":\"pqcbfrmbodthsq\",\"provider\":\"vriibakclacjfr\",\"stageSelector\":\"ousxauzlwvsgmw\",\"schedule\":\"2021-09-07T06:03:05Z\"}")
            .toObject(StageProperties.class);
        Assertions.assertEquals("nidibgqjxg", model.contexts());
        Assertions.assertEquals("pqcbfrmbodthsq", model.name());
        Assertions.assertEquals("vriibakclacjfr", model.provider());
        Assertions.assertEquals("ousxauzlwvsgmw", model.stageSelector());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-07T06:03:05Z"), model.schedule());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StageProperties model = new StageProperties().withContexts("nidibgqjxg")
            .withConfig(mapOf("kqmhhaowjr", "datahgovfgp"))
            .withInputs(mapOf("dzvkfvxcnqmxq", "datauporqzdfu", "khlg", "dataswokm", "iwtglxxhljfpg",
                "datadhbemzqkzszu", "gmqgjs", "dataicrmnzh"))
            .withName("pqcbfrmbodthsq")
            .withProvider("vriibakclacjfr")
            .withStageSelector("ousxauzlwvsgmw")
            .withSchedule(OffsetDateTime.parse("2021-09-07T06:03:05Z"));
        model = BinaryData.fromObject(model).toObject(StageProperties.class);
        Assertions.assertEquals("nidibgqjxg", model.contexts());
        Assertions.assertEquals("pqcbfrmbodthsq", model.name());
        Assertions.assertEquals("vriibakclacjfr", model.provider());
        Assertions.assertEquals("ousxauzlwvsgmw", model.stageSelector());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-07T06:03:05Z"), model.schedule());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
