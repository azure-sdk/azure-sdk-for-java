// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.fluent.models.InstanceInner;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.InstanceProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationPolicyProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationState;
import com.azure.resourcemanager.toolchainorchestrator.models.TargetSelectorProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InstanceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InstanceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"metadata\":{\"ukzclewyhmlwpaz\":\"nqicvinvkjjxdxrb\"},\"displayName\":\"pofncck\",\"scope\":\"fz\",\"solution\":\"whxxbuyqax\",\"target\":{\"name\":\"qztpp\",\"selector\":{\"bqwcsdbnwdcf\":\"lxorjaltolmncws\"}},\"reconciliationPolicy\":{\"state\":\"inactive\",\"interval\":\"qdpfuvglsbjjca\"},\"isDryRun\":false,\"status\":{\"lastModified\":\"2021-05-06T23:29:51Z\",\"properties\":{\"mr\":\"udutnco\",\"f\":\"xqtvcofu\",\"u\":\"vkg\"}}},\"extendedLocation\":{\"name\":\"gdknnqv\",\"type\":\"aznqntoru\"},\"location\":\"gsahmkycgrauw\",\"tags\":{\"vsmzlxwab\":\"taeburuvdm\",\"efkifr\":\"q\"},\"id\":\"tpuqujmq\",\"name\":\"gkfbtndoaong\",\"type\":\"jcntuj\"}")
            .toObject(InstanceInner.class);
        Assertions.assertEquals("gsahmkycgrauw", model.location());
        Assertions.assertEquals("taeburuvdm", model.tags().get("vsmzlxwab"));
        Assertions.assertEquals("nqicvinvkjjxdxrb", model.properties().metadata().get("ukzclewyhmlwpaz"));
        Assertions.assertEquals("pofncck", model.properties().displayName());
        Assertions.assertEquals("fz", model.properties().scope());
        Assertions.assertEquals("whxxbuyqax", model.properties().solution());
        Assertions.assertEquals("qztpp", model.properties().target().name());
        Assertions.assertEquals("lxorjaltolmncws", model.properties().target().selector().get("bqwcsdbnwdcf"));
        Assertions.assertEquals(ReconciliationState.INACTIVE, model.properties().reconciliationPolicy().state());
        Assertions.assertEquals("qdpfuvglsbjjca", model.properties().reconciliationPolicy().interval());
        Assertions.assertEquals(false, model.properties().isDryRun());
        Assertions.assertEquals("gdknnqv", model.extendedLocation().name());
        Assertions.assertEquals("aznqntoru", model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InstanceInner model = new InstanceInner().withLocation("gsahmkycgrauw")
            .withTags(mapOf("vsmzlxwab", "taeburuvdm", "efkifr", "q"))
            .withProperties(new InstanceProperties().withMetadata(mapOf("ukzclewyhmlwpaz", "nqicvinvkjjxdxrb"))
                .withDisplayName("pofncck")
                .withScope("fz")
                .withSolution("whxxbuyqax")
                .withTarget(new TargetSelectorProperties().withName("qztpp")
                    .withSelector(mapOf("bqwcsdbnwdcf", "lxorjaltolmncws")))
                .withReconciliationPolicy(new ReconciliationPolicyProperties().withState(ReconciliationState.INACTIVE)
                    .withInterval("qdpfuvglsbjjca"))
                .withIsDryRun(false))
            .withExtendedLocation(new ExtendedLocation().withName("gdknnqv").withType("aznqntoru"));
        model = BinaryData.fromObject(model).toObject(InstanceInner.class);
        Assertions.assertEquals("gsahmkycgrauw", model.location());
        Assertions.assertEquals("taeburuvdm", model.tags().get("vsmzlxwab"));
        Assertions.assertEquals("nqicvinvkjjxdxrb", model.properties().metadata().get("ukzclewyhmlwpaz"));
        Assertions.assertEquals("pofncck", model.properties().displayName());
        Assertions.assertEquals("fz", model.properties().scope());
        Assertions.assertEquals("whxxbuyqax", model.properties().solution());
        Assertions.assertEquals("qztpp", model.properties().target().name());
        Assertions.assertEquals("lxorjaltolmncws", model.properties().target().selector().get("bqwcsdbnwdcf"));
        Assertions.assertEquals(ReconciliationState.INACTIVE, model.properties().reconciliationPolicy().state());
        Assertions.assertEquals("qdpfuvglsbjjca", model.properties().reconciliationPolicy().interval());
        Assertions.assertEquals(false, model.properties().isDryRun());
        Assertions.assertEquals("gdknnqv", model.extendedLocation().name());
        Assertions.assertEquals("aznqntoru", model.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
