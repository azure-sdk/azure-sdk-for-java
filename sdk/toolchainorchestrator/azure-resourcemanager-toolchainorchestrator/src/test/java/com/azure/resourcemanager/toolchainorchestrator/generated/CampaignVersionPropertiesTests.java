// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.models.CampaignVersionProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.StageProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CampaignVersionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CampaignVersionProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"firstStage\":\"sxjwwixz\",\"selfDriving\":true,\"stages\":{\"qeqala\":{\"contexts\":\"qhndvnoam\",\"config\":{\"lzok\":\"dataehaohdjhh\",\"ltsxoatf\":\"datacoxpelnjeta\",\"pnpbswveflocc\":\"datag\",\"xp\":\"datarmozihmipgawt\"},\"inputs\":{\"fmpcycilrmca\":\"datacxcjxgry\",\"t\":\"datakggnoxu\",\"cpfnznthjtwkja\":\"dataksxwpnd\",\"tcqiosmg\":\"datasrxuzvoam\"},\"name\":\"ahgx\",\"provider\":\"lyrtltlaprlt\",\"stageSelector\":\"atbhjmznn\",\"schedule\":\"2021-03-15T00:08:40Z\"},\"mjnnawtq\":{\"contexts\":\"lagun\",\"config\":{\"av\":\"datafebwlnbmhyreeudz\",\"lmjjyuo\":\"datapdqmjxlyyzglgouw\"},\"inputs\":{\"lbfjkwr\":\"dataobaxkjeytu\"},\"name\":\"nkqbhsyrq\",\"provider\":\"jqhden\",\"stageSelector\":\"ulkpakd\",\"schedule\":\"2021-06-10T21:14:50Z\"},\"lnapxbiygn\":{\"contexts\":\"pxuckpggq\",\"config\":{\"pizruwnpqxpxiw\":\"datayirdhlisngwflqq\",\"saasiixtmkzj\":\"datacng\",\"irhgfgrwsdp\":\"datakv\"},\"inputs\":{\"vzbglbyvi\":\"datat\"},\"name\":\"ctbrxkjzwrgxffm\",\"provider\":\"kwfbkgo\",\"stageSelector\":\"wopdbydpiz\",\"schedule\":\"2021-11-06T08:13:32Z\"},\"bcpzgpxtivh\":{\"contexts\":\"j\",\"config\":{\"oiquvrehmrnjhvs\":\"datasmfcttuxuuyilfl\",\"w\":\"datajztczytqj\",\"mr\":\"dataauunfprnjletlx\",\"amowaziynknlqwzd\":\"dataddoui\"},\"inputs\":{\"xqszdtmaajquh\":\"dataw\",\"ospspshckf\":\"dataxylrjvmtygjbmz\",\"tieyujtvczkcny\":\"datayjpmspbpssdfppyo\",\"vxlx\":\"datarxmunjdxvgln\"},\"name\":\"glqivbgkcv\",\"provider\":\"pzvuqdflvo\",\"stageSelector\":\"yp\",\"schedule\":\"2021-05-21T07:01:15Z\"}}}")
            .toObject(CampaignVersionProperties.class);
        Assertions.assertEquals("sxjwwixz", model.firstStage());
        Assertions.assertEquals(true, model.selfDriving());
        Assertions.assertEquals("qhndvnoam", model.stages().get("qeqala").contexts());
        Assertions.assertEquals("ahgx", model.stages().get("qeqala").name());
        Assertions.assertEquals("lyrtltlaprlt", model.stages().get("qeqala").provider());
        Assertions.assertEquals("atbhjmznn", model.stages().get("qeqala").stageSelector());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-15T00:08:40Z"), model.stages().get("qeqala").schedule());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CampaignVersionProperties model = new CampaignVersionProperties().withFirstStage("sxjwwixz")
            .withSelfDriving(true)
            .withStages(mapOf("qeqala",
                new StageProperties().withContexts("qhndvnoam")
                    .withConfig(mapOf("lzok", "dataehaohdjhh", "ltsxoatf", "datacoxpelnjeta", "pnpbswveflocc", "datag",
                        "xp", "datarmozihmipgawt"))
                    .withInputs(mapOf("fmpcycilrmca", "datacxcjxgry", "t", "datakggnoxu", "cpfnznthjtwkja",
                        "dataksxwpnd", "tcqiosmg", "datasrxuzvoam"))
                    .withName("ahgx")
                    .withProvider("lyrtltlaprlt")
                    .withStageSelector("atbhjmznn")
                    .withSchedule(OffsetDateTime.parse("2021-03-15T00:08:40Z")),
                "mjnnawtq",
                new StageProperties().withContexts("lagun")
                    .withConfig(mapOf("av", "datafebwlnbmhyreeudz", "lmjjyuo", "datapdqmjxlyyzglgouw"))
                    .withInputs(mapOf("lbfjkwr", "dataobaxkjeytu"))
                    .withName("nkqbhsyrq")
                    .withProvider("jqhden")
                    .withStageSelector("ulkpakd")
                    .withSchedule(OffsetDateTime.parse("2021-06-10T21:14:50Z")),
                "lnapxbiygn",
                new StageProperties().withContexts("pxuckpggq")
                    .withConfig(mapOf("pizruwnpqxpxiw", "datayirdhlisngwflqq", "saasiixtmkzj", "datacng", "irhgfgrwsdp",
                        "datakv"))
                    .withInputs(mapOf("vzbglbyvi", "datat"))
                    .withName("ctbrxkjzwrgxffm")
                    .withProvider("kwfbkgo")
                    .withStageSelector("wopdbydpiz")
                    .withSchedule(OffsetDateTime.parse("2021-11-06T08:13:32Z")),
                "bcpzgpxtivh",
                new StageProperties().withContexts("j")
                    .withConfig(mapOf("oiquvrehmrnjhvs", "datasmfcttuxuuyilfl", "w", "datajztczytqj", "mr",
                        "dataauunfprnjletlx", "amowaziynknlqwzd", "dataddoui"))
                    .withInputs(mapOf("xqszdtmaajquh", "dataw", "ospspshckf", "dataxylrjvmtygjbmz", "tieyujtvczkcny",
                        "datayjpmspbpssdfppyo", "vxlx", "datarxmunjdxvgln"))
                    .withName("glqivbgkcv")
                    .withProvider("pzvuqdflvo")
                    .withStageSelector("yp")
                    .withSchedule(OffsetDateTime.parse("2021-05-21T07:01:15Z"))));
        model = BinaryData.fromObject(model).toObject(CampaignVersionProperties.class);
        Assertions.assertEquals("sxjwwixz", model.firstStage());
        Assertions.assertEquals(true, model.selfDriving());
        Assertions.assertEquals("qhndvnoam", model.stages().get("qeqala").contexts());
        Assertions.assertEquals("ahgx", model.stages().get("qeqala").name());
        Assertions.assertEquals("lyrtltlaprlt", model.stages().get("qeqala").provider());
        Assertions.assertEquals("atbhjmznn", model.stages().get("qeqala").stageSelector());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-15T00:08:40Z"), model.stages().get("qeqala").schedule());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
