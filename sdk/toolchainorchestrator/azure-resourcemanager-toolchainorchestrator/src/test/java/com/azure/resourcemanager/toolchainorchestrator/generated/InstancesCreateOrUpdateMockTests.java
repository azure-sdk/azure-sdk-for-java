// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.Instance;
import com.azure.resourcemanager.toolchainorchestrator.models.InstanceProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationPolicyProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationState;
import com.azure.resourcemanager.toolchainorchestrator.models.TargetSelectorProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"metadata\":{\"zudblnsntrpcaq\":\"dhctmmko\"},\"displayName\":\"ofkbtf\",\"scope\":\"kl\",\"solution\":\"nldpvcbhhezyquwu\",\"target\":{\"name\":\"utrpbr\",\"selector\":{\"mxlbn\":\"uuatvlmbjwcol\",\"ahprzrvxhmtfhocn\":\"tpc\",\"isn\":\"zcmjhngxnoqrxt\",\"hepfwwtjfdoes\":\"evhdlmydid\"}},\"reconciliationPolicy\":{\"state\":\"inactive\",\"interval\":\"mwcdbcky\"},\"isDryRun\":true,\"status\":{\"lastModified\":\"2021-02-04T04:36:41Z\",\"properties\":{\"t\":\"negknjzrb\",\"lvukaobrlb\":\"e\"}}},\"extendedLocation\":{\"name\":\"gsnbagnchjh\",\"type\":\"emuowakyw\"},\"location\":\"hjym\",\"tags\":{\"gdrclssolj\":\"qt\",\"dkkgjiiytssikizb\":\"mevtfycnlbvgjc\"},\"id\":\"ufqbvntnr\",\"name\":\"mqso\",\"type\":\"hcekxgnlykm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ToolchainOrchestratorManager manager = ToolchainOrchestratorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Instance response = manager.instances()
            .define("ixqcahyhxalybxaw")
            .withRegion("wsocnequygdjbo")
            .withExistingResourceGroup("ygzmxieqvdsmak")
            .withExtendedLocation(new ExtendedLocation().withName("pdbollg").withType("yfqiuasig"))
            .withTags(mapOf("iuawvc", "mtqjkqevadrmm", "oqiqazugamx", "jzkxiidisczskos", "cekuz", "krrcoiisbamnpp"))
            .withProperties(new InstanceProperties()
                .withMetadata(mapOf("incnr", "tblxpkkwjdjodqhy", "oqodkadpp", "mehllizhceu"))
                .withDisplayName("bngqladywrx")
                .withScope("yd")
                .withSolution("luvvad")
                .withTarget(new TargetSelectorProperties().withName("snuyemlowuowhl")
                    .withSelector(mapOf("lgmokzkl", "wyrmouv", "vjdrqcrjidhftuk", "rfowtdvrfmvlih")))
                .withReconciliationPolicy(
                    new ReconciliationPolicyProperties().withState(ReconciliationState.ACTIVE).withInterval("xlwyoj"))
                .withIsDryRun(false))
            .create();

        Assertions.assertEquals("hjym", response.location());
        Assertions.assertEquals("qt", response.tags().get("gdrclssolj"));
        Assertions.assertEquals("dhctmmko", response.properties().metadata().get("zudblnsntrpcaq"));
        Assertions.assertEquals("ofkbtf", response.properties().displayName());
        Assertions.assertEquals("kl", response.properties().scope());
        Assertions.assertEquals("nldpvcbhhezyquwu", response.properties().solution());
        Assertions.assertEquals("utrpbr", response.properties().target().name());
        Assertions.assertEquals("uuatvlmbjwcol", response.properties().target().selector().get("mxlbn"));
        Assertions.assertEquals(ReconciliationState.INACTIVE, response.properties().reconciliationPolicy().state());
        Assertions.assertEquals("mwcdbcky", response.properties().reconciliationPolicy().interval());
        Assertions.assertEquals(true, response.properties().isDryRun());
        Assertions.assertEquals("gsnbagnchjh", response.extendedLocation().name());
        Assertions.assertEquals("emuowakyw", response.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
