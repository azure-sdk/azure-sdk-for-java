// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager;
import com.azure.resourcemanager.toolchainorchestrator.models.ComponentProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.SolutionVersion;
import com.azure.resourcemanager.toolchainorchestrator.models.SolutionVersionProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SolutionVersionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"components\":[{\"name\":\"cvuq\",\"metadata\":{\"bsfp\":\"zlrqhbjnqogdx\",\"xojjl\":\"xxtjlflecomi\"},\"properties\":{\"jmueza\":\"datadhilzzdzz\",\"otokhtvwtaznk\":\"dataovribq\"},\"constraints\":\"wwxwjyofgw\",\"dependencies\":[\"btlwljssmcts\",\"ldkpwolgisu\",\"xbteogfgfiijryk\"],\"type\":\"lefksxq\"},{\"name\":\"eazfpxgnmqvzvlu\",\"metadata\":{\"uacvfy\":\"aiossscyvaifp\"},\"properties\":{\"jdhsoy\":\"datapsfx\"},\"constraints\":\"pvtyqfttehdpbouj\",\"dependencies\":[\"fvvdshxcdedsue\",\"ygnxcgjtfrnqukt\",\"fnslnlrxsmy\"],\"type\":\"trwntfmtbgw\"},{\"name\":\"dxwnazkurrd\",\"metadata\":{\"qseuzuukykcyqhy\":\"zjwhsetwwjwz\",\"fop\":\"qzzdcykeyste\",\"azgbsqgpe\":\"z\",\"fut\":\"q\"},\"properties\":{\"l\":\"datavozglqjbk\",\"wmn\":\"dataclctzey\",\"a\":\"datacovdwzqaux\",\"pftxudqyeme\":\"datahmkvfruwkudrb\"},\"constraints\":\"naucmcirtnee\",\"dependencies\":[\"auwcg\",\"efnoh\",\"itranizerwguda\",\"mxubvfbngfcoce\"],\"type\":\"hpriylfm\"},{\"name\":\"ztraud\",\"metadata\":{\"moj\":\"lcdculregpq\",\"tnvgyshqrdgrt\":\"vr\"},\"properties\":{\"ykcfazz\":\"datawjzl\",\"polwzrghsrlei\":\"datajcayerzrransyby\"},\"constraints\":\"fscjfn\",\"dependencies\":[\"vuagfqwtl\",\"ngvmreuptrklzmij\",\"jwolxfsvaghmpynw\"],\"type\":\"slrcigtzj\"}],\"displayName\":\"bxqla\",\"metadata\":{\"xpavid\":\"ssov\",\"fcvvy\":\"ievw\",\"xgcbdsvalpnpt\":\"zslp\"}},\"extendedLocation\":{\"name\":\"rkxgpazwugxyqvnj\",\"type\":\"bfe\"},\"location\":\"ldiuhzzgqlm\",\"tags\":{\"iudjp\":\"wz\",\"qhnmhk\":\"pqht\"},\"id\":\"ezsdsuxheq\",\"name\":\"gcruxspinym\",\"type\":\"qgwokmikp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ToolchainOrchestratorManager manager = ToolchainOrchestratorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SolutionVersion response = manager.solutionVersions()
            .define("liejhpc")
            .withRegion("ej")
            .withExistingSolution("hzdue", "ihapfjiiknjdiq")
            .withTags(mapOf("qayamk", "wtfxpt", "ybmx", "cf"))
            .withProperties(new SolutionVersionProperties()
                .withComponents(Arrays.asList(new ComponentProperties().withName("sbw")
                    .withMetadata(mapOf("oxzpr", "vbvzipbwxgo", "swhgsaodk", "dmskxknpdgzigjsu"))
                    .withProperties(mapOf("to", "databafo", "nvkervq", "datazhaquvwsxb", "pabdsrg", "datahoadhrsxqvzv",
                        "hjnlt", "dataajglzrsubklr"))
                    .withConstraints("tjdvqydieqqkwa")
                    .withDependencies(Arrays.asList("dxvqzxoe", "w", "jxbibanb"))
                    .withType("upwtz")))
                .withDisplayName("aklozk")
                .withMetadata(mapOf("ssanbtttkgsuxun", "rpejp", "hkslgwlokhueoij", "swgkpjhboyikebh")))
            .withExtendedLocation(new ExtendedLocation().withName("cqypz").withType("zufgs"))
            .create();

        Assertions.assertEquals("ldiuhzzgqlm", response.location());
        Assertions.assertEquals("wz", response.tags().get("iudjp"));
        Assertions.assertEquals("cvuq", response.properties().components().get(0).name());
        Assertions.assertEquals("zlrqhbjnqogdx", response.properties().components().get(0).metadata().get("bsfp"));
        Assertions.assertEquals("wwxwjyofgw", response.properties().components().get(0).constraints());
        Assertions.assertEquals("btlwljssmcts", response.properties().components().get(0).dependencies().get(0));
        Assertions.assertEquals("lefksxq", response.properties().components().get(0).type());
        Assertions.assertEquals("bxqla", response.properties().displayName());
        Assertions.assertEquals("ssov", response.properties().metadata().get("xpavid"));
        Assertions.assertEquals("rkxgpazwugxyqvnj", response.extendedLocation().name());
        Assertions.assertEquals("bfe", response.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
