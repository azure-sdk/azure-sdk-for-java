// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.Solution;
import com.azure.resourcemanager.toolchainorchestrator.models.SolutionProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SolutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"eeczgfbu\",\"type\":\"klelssxb\"},\"location\":\"c\",\"tags\":{\"jcdoewb\":\"ujksrlsmdesqplpv\",\"owx\":\"dyvt\",\"sxze\":\"gpiudeug\"},\"id\":\"paxwkufyk\",\"name\":\"vuhx\",\"type\":\"pmru\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ToolchainOrchestratorManager manager = ToolchainOrchestratorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Solution response = manager.solutions()
            .define("o")
            .withRegion("snsqowxwcoml")
            .withExistingResourceGroup("gddeimaw")
            .withExtendedLocation(new ExtendedLocation().withName("um").withType("ikjcjcazt"))
            .withTags(mapOf("cswkacvejy", "twvc", "qthe", "dvlvhbwrnfxtgdd", "naoyank", "n", "swankltytmh", "oe"))
            .withProperties(new SolutionProperties())
            .create();

        Assertions.assertEquals("c", response.location());
        Assertions.assertEquals("ujksrlsmdesqplpv", response.tags().get("jcdoewb"));
        Assertions.assertEquals("eeczgfbu", response.extendedLocation().name());
        Assertions.assertEquals("klelssxb", response.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
