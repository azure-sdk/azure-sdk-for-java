// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.fluent.models.CatalogInner;
import com.azure.resourcemanager.toolchainorchestrator.models.CatalogProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CatalogInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CatalogInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"er\",\"type\":\"hp\"},\"location\":\"mfpjbabw\",\"tags\":{\"xgqddrih\":\"cxsspuunnoxyh\",\"ewda\":\"fhoqca\",\"xkzb\":\"mdjvlpj\",\"ncj\":\"msgeivsiykzk\"},\"id\":\"xonbzoggculapz\",\"name\":\"y\",\"type\":\"pgogtqxepny\"}")
            .toObject(CatalogInner.class);
        Assertions.assertEquals("mfpjbabw", model.location());
        Assertions.assertEquals("cxsspuunnoxyh", model.tags().get("xgqddrih"));
        Assertions.assertEquals("er", model.extendedLocation().name());
        Assertions.assertEquals("hp", model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CatalogInner model = new CatalogInner().withLocation("mfpjbabw")
            .withTags(mapOf("xgqddrih", "cxsspuunnoxyh", "ewda", "fhoqca", "xkzb", "mdjvlpj", "ncj", "msgeivsiykzk"))
            .withProperties(new CatalogProperties())
            .withExtendedLocation(new ExtendedLocation().withName("er").withType("hp"));
        model = BinaryData.fromObject(model).toObject(CatalogInner.class);
        Assertions.assertEquals("mfpjbabw", model.location());
        Assertions.assertEquals("cxsspuunnoxyh", model.tags().get("xgqddrih"));
        Assertions.assertEquals("er", model.extendedLocation().name());
        Assertions.assertEquals("hp", model.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
