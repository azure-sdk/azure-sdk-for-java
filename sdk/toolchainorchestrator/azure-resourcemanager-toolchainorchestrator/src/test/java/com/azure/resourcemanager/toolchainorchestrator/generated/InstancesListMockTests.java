// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager;
import com.azure.resourcemanager.toolchainorchestrator.models.Instance;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"metadata\":{\"qfblhkalehpa\":\"ezcrcssbzhddubb\",\"gqgdminictteajoh\":\"awugiqjti\",\"tp\":\"ygspnbonhpczykm\",\"mqyjgy\":\"wxqcsehchkhufmpq\"},\"displayName\":\"ulodsaeuzanhsfnh\",\"scope\":\"nwph\",\"solution\":\"zf\",\"target\":{\"name\":\"jclid\",\"selector\":{\"fwbeqrkuorh\":\"jwjj\"}},\"reconciliationPolicy\":{\"state\":\"active\",\"interval\":\"ruqnm\"},\"isDryRun\":true,\"status\":{\"lastModified\":\"2021-09-11T21:18:56Z\",\"properties\":{\"iqswbqer\":\"jy\",\"iytxt\":\"w\",\"dstyouam\":\"gukvlbpkt\"}}},\"extendedLocation\":{\"name\":\"ewres\",\"type\":\"moweg\"},\"location\":\"uteyxeyguq\",\"tags\":{\"jwaiuf\":\"jiitnspxlzdesygr\",\"aybfu\":\"n\"},\"id\":\"qfrojsydgrhyd\",\"name\":\"ygywe\",\"type\":\"skieca\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ToolchainOrchestratorManager manager = ToolchainOrchestratorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Instance> response = manager.instances().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("uteyxeyguq", response.iterator().next().location());
        Assertions.assertEquals("jiitnspxlzdesygr", response.iterator().next().tags().get("jwaiuf"));
        Assertions.assertEquals("ezcrcssbzhddubb",
            response.iterator().next().properties().metadata().get("qfblhkalehpa"));
        Assertions.assertEquals("ulodsaeuzanhsfnh", response.iterator().next().properties().displayName());
        Assertions.assertEquals("nwph", response.iterator().next().properties().scope());
        Assertions.assertEquals("zf", response.iterator().next().properties().solution());
        Assertions.assertEquals("jclid", response.iterator().next().properties().target().name());
        Assertions.assertEquals("jwjj", response.iterator().next().properties().target().selector().get("fwbeqrkuorh"));
        Assertions.assertEquals(ReconciliationState.ACTIVE,
            response.iterator().next().properties().reconciliationPolicy().state());
        Assertions.assertEquals("ruqnm", response.iterator().next().properties().reconciliationPolicy().interval());
        Assertions.assertEquals(true, response.iterator().next().properties().isDryRun());
        Assertions.assertEquals("ewres", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("moweg", response.iterator().next().extendedLocation().type());
    }
}
