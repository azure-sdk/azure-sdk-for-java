// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.models.ComponentProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ComponentPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ComponentProperties model = BinaryData.fromString(
            "{\"name\":\"gidokgjljyoxgvcl\",\"metadata\":{\"bijhtxfvgxbf\":\"sncghkjeszz\",\"ec\":\"mxnehmp\",\"gr\":\"godebfqkkrbmpu\"},\"properties\":{\"cispnqzahmgkbr\":\"datalzlfbxzpuz\"},\"constraints\":\"y\",\"dependencies\":[\"bnuqqkpik\",\"drgvtqagn\",\"uynhijg\"],\"type\":\"mebf\"}")
            .toObject(ComponentProperties.class);
        Assertions.assertEquals("gidokgjljyoxgvcl", model.name());
        Assertions.assertEquals("sncghkjeszz", model.metadata().get("bijhtxfvgxbf"));
        Assertions.assertEquals("y", model.constraints());
        Assertions.assertEquals("bnuqqkpik", model.dependencies().get(0));
        Assertions.assertEquals("mebf", model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ComponentProperties model = new ComponentProperties().withName("gidokgjljyoxgvcl")
            .withMetadata(mapOf("bijhtxfvgxbf", "sncghkjeszz", "ec", "mxnehmp", "gr", "godebfqkkrbmpu"))
            .withProperties(mapOf("cispnqzahmgkbr", "datalzlfbxzpuz"))
            .withConstraints("y")
            .withDependencies(Arrays.asList("bnuqqkpik", "drgvtqagn", "uynhijg"))
            .withType("mebf");
        model = BinaryData.fromObject(model).toObject(ComponentProperties.class);
        Assertions.assertEquals("gidokgjljyoxgvcl", model.name());
        Assertions.assertEquals("sncghkjeszz", model.metadata().get("bijhtxfvgxbf"));
        Assertions.assertEquals("y", model.constraints());
        Assertions.assertEquals("bnuqqkpik", model.dependencies().get(0));
        Assertions.assertEquals("mebf", model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
