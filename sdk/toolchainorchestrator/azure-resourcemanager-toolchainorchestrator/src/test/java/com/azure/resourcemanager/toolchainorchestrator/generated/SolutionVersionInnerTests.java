// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.toolchainorchestrator.fluent.models.SolutionVersionInner;
import com.azure.resourcemanager.toolchainorchestrator.models.ComponentProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.SolutionVersionProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionVersionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionVersionInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"components\":[{\"name\":\"zydvfvf\",\"metadata\":{\"gorf\":\"aeoisrvh\"},\"properties\":{\"vwmzhwplefaxvxil\":\"datais\",\"nzeyqxtjj\":\"databtgn\",\"vodggxdbee\":\"datazqlqhyc\"},\"constraints\":\"ieknl\",\"dependencies\":[\"iaa\"],\"type\":\"iuagydwqfbylyrfg\"},{\"name\":\"agt\",\"metadata\":{\"zldmozuxy\":\"ocqwogfnzjvus\",\"ysownbtgkbug\":\"fsbtkad\",\"pe\":\"jqctojcmisofie\",\"hihihlhzdsqtzbsr\":\"ojyqdhcuplcplcw\"},\"properties\":{\"cact\":\"datawcjhfgmv\"},\"constraints\":\"wotey\",\"dependencies\":[\"luqovekqvg\",\"ouwifzmpjw\",\"ivqikfxcvhr\",\"sphuagrttikteus\"],\"type\":\"c\"},{\"name\":\"kvyklxubyjaffmm\",\"metadata\":{\"ubgq\":\"cqc\",\"metttwgd\":\"brta\",\"seypxiutcxapz\":\"lqxihhrmooiz\",\"petogebjox\":\"y\"},\"properties\":{\"abrqnkkzj\":\"datavnh\"},\"constraints\":\"b\",\"dependencies\":[\"aehvvibrxjjstoq\",\"eitpkxztmo\",\"bklftidgfcwqmpim\",\"qxzhem\"],\"type\":\"yhohujswtwkozzwc\"}],\"displayName\":\"kb\",\"metadata\":{\"alhsnvkc\":\"fajnjwltlwtjjguk\",\"mlnwiaaomylweazu\":\"mxzrpoa\",\"hwwn\":\"cse\",\"ousnfepgfewe\":\"jhlfzswpchwahf\"}},\"extendedLocation\":{\"name\":\"l\",\"type\":\"xgncxyk\"},\"location\":\"djhlimm\",\"tags\":{\"bcporxvxcjzhqizx\":\"f\"},\"id\":\"pxtgqscjav\",\"name\":\"t\",\"type\":\"uhdqazk\"}")
            .toObject(SolutionVersionInner.class);
        Assertions.assertEquals("djhlimm", model.location());
        Assertions.assertEquals("f", model.tags().get("bcporxvxcjzhqizx"));
        Assertions.assertEquals("zydvfvf", model.properties().components().get(0).name());
        Assertions.assertEquals("aeoisrvh", model.properties().components().get(0).metadata().get("gorf"));
        Assertions.assertEquals("ieknl", model.properties().components().get(0).constraints());
        Assertions.assertEquals("iaa", model.properties().components().get(0).dependencies().get(0));
        Assertions.assertEquals("iuagydwqfbylyrfg", model.properties().components().get(0).type());
        Assertions.assertEquals("kb", model.properties().displayName());
        Assertions.assertEquals("fajnjwltlwtjjguk", model.properties().metadata().get("alhsnvkc"));
        Assertions.assertEquals("l", model.extendedLocation().name());
        Assertions.assertEquals("xgncxyk", model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionVersionInner model
            = new SolutionVersionInner().withLocation("djhlimm")
                .withTags(mapOf("bcporxvxcjzhqizx", "f"))
                .withProperties(new SolutionVersionProperties()
                    .withComponents(Arrays.asList(
                        new ComponentProperties().withName("zydvfvf")
                            .withMetadata(mapOf("gorf", "aeoisrvh"))
                            .withProperties(mapOf("vwmzhwplefaxvxil", "datais", "nzeyqxtjj", "databtgn", "vodggxdbee",
                                "datazqlqhyc"))
                            .withConstraints("ieknl")
                            .withDependencies(Arrays.asList("iaa"))
                            .withType("iuagydwqfbylyrfg"),
                        new ComponentProperties().withName("agt")
                            .withMetadata(mapOf("zldmozuxy", "ocqwogfnzjvus", "ysownbtgkbug", "fsbtkad", "pe",
                                "jqctojcmisofie", "hihihlhzdsqtzbsr", "ojyqdhcuplcplcw"))
                            .withProperties(mapOf("cact", "datawcjhfgmv"))
                            .withConstraints("wotey")
                            .withDependencies(
                                Arrays.asList("luqovekqvg", "ouwifzmpjw", "ivqikfxcvhr", "sphuagrttikteus"))
                            .withType("c"),
                        new ComponentProperties().withName("kvyklxubyjaffmm")
                            .withMetadata(mapOf("ubgq", "cqc", "metttwgd", "brta", "seypxiutcxapz", "lqxihhrmooiz",
                                "petogebjox", "y"))
                            .withProperties(mapOf("abrqnkkzj", "datavnh"))
                            .withConstraints("b")
                            .withDependencies(
                                Arrays.asList("aehvvibrxjjstoq", "eitpkxztmo", "bklftidgfcwqmpim", "qxzhem"))
                            .withType("yhohujswtwkozzwc")))
                    .withDisplayName("kb")
                    .withMetadata(mapOf("alhsnvkc", "fajnjwltlwtjjguk", "mlnwiaaomylweazu", "mxzrpoa", "hwwn", "cse",
                        "ousnfepgfewe", "jhlfzswpchwahf")))
                .withExtendedLocation(new ExtendedLocation().withName("l").withType("xgncxyk"));
        model = BinaryData.fromObject(model).toObject(SolutionVersionInner.class);
        Assertions.assertEquals("djhlimm", model.location());
        Assertions.assertEquals("f", model.tags().get("bcporxvxcjzhqizx"));
        Assertions.assertEquals("zydvfvf", model.properties().components().get(0).name());
        Assertions.assertEquals("aeoisrvh", model.properties().components().get(0).metadata().get("gorf"));
        Assertions.assertEquals("ieknl", model.properties().components().get(0).constraints());
        Assertions.assertEquals("iaa", model.properties().components().get(0).dependencies().get(0));
        Assertions.assertEquals("iuagydwqfbylyrfg", model.properties().components().get(0).type());
        Assertions.assertEquals("kb", model.properties().displayName());
        Assertions.assertEquals("fajnjwltlwtjjguk", model.properties().metadata().get("alhsnvkc"));
        Assertions.assertEquals("l", model.extendedLocation().name());
        Assertions.assertEquals("xgncxyk", model.extendedLocation().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
