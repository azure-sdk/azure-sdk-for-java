// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines a ActivationStatus.
 */
@Immutable
public final class ActivationStatusProperties implements JsonSerializable<ActivationStatusProperties> {
    /*
     * The execution history Activation
     */
    private List<StageHistoryProperties> stageHistory;

    /*
     * The activationGeneration of the ActivationStatus
     */
    private String activationGeneration;

    /*
     * The updateTime of the ActivationStatus
     */
    private String updateTime;

    /*
     * The status code of the ActivationStatus
     */
    private Integer status;

    /*
     * The status message of the ActivationStatus
     */
    private String statusMessage;

    /**
     * Creates an instance of ActivationStatusProperties class.
     */
    private ActivationStatusProperties() {
    }

    /**
     * Get the stageHistory property: The execution history Activation.
     * 
     * @return the stageHistory value.
     */
    public List<StageHistoryProperties> stageHistory() {
        return this.stageHistory;
    }

    /**
     * Get the activationGeneration property: The activationGeneration of the ActivationStatus.
     * 
     * @return the activationGeneration value.
     */
    public String activationGeneration() {
        return this.activationGeneration;
    }

    /**
     * Get the updateTime property: The updateTime of the ActivationStatus.
     * 
     * @return the updateTime value.
     */
    public String updateTime() {
        return this.updateTime;
    }

    /**
     * Get the status property: The status code of the ActivationStatus.
     * 
     * @return the status value.
     */
    public Integer status() {
        return this.status;
    }

    /**
     * Get the statusMessage property: The status message of the ActivationStatus.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (stageHistory() != null) {
            stageHistory().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("stageHistory", this.stageHistory, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("activationGeneration", this.activationGeneration);
        jsonWriter.writeStringField("updateTime", this.updateTime);
        jsonWriter.writeNumberField("status", this.status);
        jsonWriter.writeStringField("statusMessage", this.statusMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActivationStatusProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActivationStatusProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActivationStatusProperties.
     */
    public static ActivationStatusProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActivationStatusProperties deserializedActivationStatusProperties = new ActivationStatusProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stageHistory".equals(fieldName)) {
                    List<StageHistoryProperties> stageHistory
                        = reader.readArray(reader1 -> StageHistoryProperties.fromJson(reader1));
                    deserializedActivationStatusProperties.stageHistory = stageHistory;
                } else if ("activationGeneration".equals(fieldName)) {
                    deserializedActivationStatusProperties.activationGeneration = reader.getString();
                } else if ("updateTime".equals(fieldName)) {
                    deserializedActivationStatusProperties.updateTime = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedActivationStatusProperties.status = reader.getNullable(JsonReader::getInt);
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedActivationStatusProperties.statusMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActivationStatusProperties;
        });
    }
}
