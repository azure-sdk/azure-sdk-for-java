// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Defining the Activation.
 */
@Fluent
public final class ActivationProperties implements JsonSerializable<ActivationProperties> {
    /*
     * Provisioning state of the activation.
     */
    private ProvisioningState provisioningState;

    /*
     * The inputs of the Activation. Inputs holds a key-value map of user-defined parameters for the initial stage
     */
    private Map<String, Object> inputs;

    /*
     * The stage of the campaign from where the Activation should trigger.
     */
    private String stage;

    /*
     * The campaign name that the Activation should trigger.
     */
    private String campaign;

    /*
     * The status of the Activation.
     */
    private ActivationStatusProperties status;

    /**
     * Creates an instance of ActivationProperties class.
     */
    public ActivationProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the activation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the inputs property: The inputs of the Activation. Inputs holds a key-value map of user-defined parameters
     * for the initial stage.
     * 
     * @return the inputs value.
     */
    public Map<String, Object> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: The inputs of the Activation. Inputs holds a key-value map of user-defined parameters
     * for the initial stage.
     * 
     * @param inputs the inputs value to set.
     * @return the ActivationProperties object itself.
     */
    public ActivationProperties withInputs(Map<String, Object> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the stage property: The stage of the campaign from where the Activation should trigger.
     * 
     * @return the stage value.
     */
    public String stage() {
        return this.stage;
    }

    /**
     * Set the stage property: The stage of the campaign from where the Activation should trigger.
     * 
     * @param stage the stage value to set.
     * @return the ActivationProperties object itself.
     */
    public ActivationProperties withStage(String stage) {
        this.stage = stage;
        return this;
    }

    /**
     * Get the campaign property: The campaign name that the Activation should trigger.
     * 
     * @return the campaign value.
     */
    public String campaign() {
        return this.campaign;
    }

    /**
     * Set the campaign property: The campaign name that the Activation should trigger.
     * 
     * @param campaign the campaign value to set.
     * @return the ActivationProperties object itself.
     */
    public ActivationProperties withCampaign(String campaign) {
        this.campaign = campaign;
        return this;
    }

    /**
     * Get the status property: The status of the Activation.
     * 
     * @return the status value.
     */
    public ActivationStatusProperties status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (campaign() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property campaign in model ActivationProperties"));
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActivationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("campaign", this.campaign);
        jsonWriter.writeMapField("inputs", this.inputs, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("stage", this.stage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActivationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActivationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActivationProperties.
     */
    public static ActivationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActivationProperties deserializedActivationProperties = new ActivationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("campaign".equals(fieldName)) {
                    deserializedActivationProperties.campaign = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedActivationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("inputs".equals(fieldName)) {
                    Map<String, Object> inputs = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedActivationProperties.inputs = inputs;
                } else if ("stage".equals(fieldName)) {
                    deserializedActivationProperties.stage = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedActivationProperties.status = ActivationStatusProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActivationProperties;
        });
    }
}
