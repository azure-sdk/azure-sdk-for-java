// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The properties of an Instance resource.
 */
@Fluent
public final class InstanceProperties implements JsonSerializable<InstanceProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * The metadata information of the InstanceVersion resource.
     */
    private Map<String, String> metadata;

    /*
     * The display name of the InstanceVersion resource.
     */
    private String displayName;

    /*
     * The scope of the InstanceVersion resource.
     */
    private String scope;

    /*
     * The SolutionVersion resource of the InstanceVersion resource.
     */
    private String solution;

    /*
     * Defines the Target the InstanceVersion resource will deploy to.
     */
    private TargetSelectorProperties target;

    /*
     * The reconciliationPolicy of the InstanceVersion resource.
     */
    private ReconciliationPolicyProperties reconciliationPolicy;

    /*
     * The running state for the InstanceVersion resource.
     */
    private Boolean isDryRun;

    /*
     * The status of the InstanceVersion.
     */
    private InstanceTargetStatusProperties status;

    /**
     * Creates an instance of InstanceProperties class.
     */
    public InstanceProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the metadata property: The metadata information of the InstanceVersion resource.
     * 
     * @return the metadata value.
     */
    public Map<String, String> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata information of the InstanceVersion resource.
     * 
     * @param metadata the metadata value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the displayName property: The display name of the InstanceVersion resource.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the InstanceVersion resource.
     * 
     * @param displayName the displayName value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the scope property: The scope of the InstanceVersion resource.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The scope of the InstanceVersion resource.
     * 
     * @param scope the scope value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the solution property: The SolutionVersion resource of the InstanceVersion resource.
     * 
     * @return the solution value.
     */
    public String solution() {
        return this.solution;
    }

    /**
     * Set the solution property: The SolutionVersion resource of the InstanceVersion resource.
     * 
     * @param solution the solution value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withSolution(String solution) {
        this.solution = solution;
        return this;
    }

    /**
     * Get the target property: Defines the Target the InstanceVersion resource will deploy to.
     * 
     * @return the target value.
     */
    public TargetSelectorProperties target() {
        return this.target;
    }

    /**
     * Set the target property: Defines the Target the InstanceVersion resource will deploy to.
     * 
     * @param target the target value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withTarget(TargetSelectorProperties target) {
        this.target = target;
        return this;
    }

    /**
     * Get the reconciliationPolicy property: The reconciliationPolicy of the InstanceVersion resource.
     * 
     * @return the reconciliationPolicy value.
     */
    public ReconciliationPolicyProperties reconciliationPolicy() {
        return this.reconciliationPolicy;
    }

    /**
     * Set the reconciliationPolicy property: The reconciliationPolicy of the InstanceVersion resource.
     * 
     * @param reconciliationPolicy the reconciliationPolicy value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withReconciliationPolicy(ReconciliationPolicyProperties reconciliationPolicy) {
        this.reconciliationPolicy = reconciliationPolicy;
        return this;
    }

    /**
     * Get the isDryRun property: The running state for the InstanceVersion resource.
     * 
     * @return the isDryRun value.
     */
    public Boolean isDryRun() {
        return this.isDryRun;
    }

    /**
     * Set the isDryRun property: The running state for the InstanceVersion resource.
     * 
     * @param isDryRun the isDryRun value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withIsDryRun(Boolean isDryRun) {
        this.isDryRun = isDryRun;
        return this;
    }

    /**
     * Get the status property: The status of the InstanceVersion.
     * 
     * @return the status value.
     */
    public InstanceTargetStatusProperties status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solution() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property solution in model InstanceProperties"));
        }
        if (target() != null) {
            target().validate();
        }
        if (reconciliationPolicy() != null) {
            reconciliationPolicy().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InstanceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solution", this.solution);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeJsonField("target", this.target);
        jsonWriter.writeJsonField("reconciliationPolicy", this.reconciliationPolicy);
        jsonWriter.writeBooleanField("isDryRun", this.isDryRun);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InstanceProperties.
     */
    public static InstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceProperties deserializedInstanceProperties = new InstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solution".equals(fieldName)) {
                    deserializedInstanceProperties.solution = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedInstanceProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedInstanceProperties.metadata = metadata;
                } else if ("displayName".equals(fieldName)) {
                    deserializedInstanceProperties.displayName = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedInstanceProperties.scope = reader.getString();
                } else if ("target".equals(fieldName)) {
                    deserializedInstanceProperties.target = TargetSelectorProperties.fromJson(reader);
                } else if ("reconciliationPolicy".equals(fieldName)) {
                    deserializedInstanceProperties.reconciliationPolicy
                        = ReconciliationPolicyProperties.fromJson(reader);
                } else if ("isDryRun".equals(fieldName)) {
                    deserializedInstanceProperties.isDryRun = reader.getNullable(JsonReader::getBoolean);
                } else if ("status".equals(fieldName)) {
                    deserializedInstanceProperties.status = InstanceTargetStatusProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceProperties;
        });
    }
}
