// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines a desired runtime topology.
 */
@Fluent
public final class TopologyProperties implements JsonSerializable<TopologyProperties> {
    /*
     * The bindings of the Topology
     */
    private List<BindingProperties> bindings;

    /**
     * Creates an instance of TopologyProperties class.
     */
    public TopologyProperties() {
    }

    /**
     * Get the bindings property: The bindings of the Topology.
     * 
     * @return the bindings value.
     */
    public List<BindingProperties> bindings() {
        return this.bindings;
    }

    /**
     * Set the bindings property: The bindings of the Topology.
     * 
     * @param bindings the bindings value to set.
     * @return the TopologyProperties object itself.
     */
    public TopologyProperties withBindings(List<BindingProperties> bindings) {
        this.bindings = bindings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (bindings() != null) {
            bindings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("bindings", this.bindings, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TopologyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TopologyProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TopologyProperties.
     */
    public static TopologyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TopologyProperties deserializedTopologyProperties = new TopologyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bindings".equals(fieldName)) {
                    List<BindingProperties> bindings = reader.readArray(reader1 -> BindingProperties.fromJson(reader1));
                    deserializedTopologyProperties.bindings = bindings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTopologyProperties;
        });
    }
}
