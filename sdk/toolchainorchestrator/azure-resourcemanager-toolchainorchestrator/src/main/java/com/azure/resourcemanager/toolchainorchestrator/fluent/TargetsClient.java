// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.toolchainorchestrator.fluent.models.TargetInner;
import com.azure.resourcemanager.toolchainorchestrator.models.TargetTagsUpdate;

/**
 * An instance of this class provides access to all the operations defined in TargetsClient.
 */
public interface TargetsClient {
    /**
     * Returns details of specified Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Target resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TargetInner> getByResourceGroupWithResponse(String resourceGroupName, String targetName, Context context);

    /**
     * Returns details of specified Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TargetInner getByResourceGroup(String resourceGroupName, String targetName);

    /**
     * Creates new or updates existing Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TargetInner>, TargetInner> beginCreateOrUpdate(String resourceGroupName, String targetName,
        TargetInner resource);

    /**
     * Creates new or updates existing Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TargetInner>, TargetInner> beginCreateOrUpdate(String resourceGroupName, String targetName,
        TargetInner resource, Context context);

    /**
     * Creates new or updates existing Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TargetInner createOrUpdate(String resourceGroupName, String targetName, TargetInner resource);

    /**
     * Creates new or updates existing Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TargetInner createOrUpdate(String resourceGroupName, String targetName, TargetInner resource, Context context);

    /**
     * Updates existing Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TargetInner>, TargetInner> beginUpdate(String resourceGroupName, String targetName,
        TargetTagsUpdate properties);

    /**
     * Updates existing Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Target resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TargetInner>, TargetInner> beginUpdate(String resourceGroupName, String targetName,
        TargetTagsUpdate properties, Context context);

    /**
     * Updates existing Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TargetInner update(String resourceGroupName, String targetName, TargetTagsUpdate properties);

    /**
     * Updates existing Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TargetInner update(String resourceGroupName, String targetName, TargetTagsUpdate properties, Context context);

    /**
     * Deletes specified Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String targetName);

    /**
     * Deletes specified Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String targetName, Context context);

    /**
     * Deletes specified Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String targetName);

    /**
     * Deletes specified Target resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param targetName Name of target.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String targetName, Context context);

    /**
     * Returns a collection of Target resources within the resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Target list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TargetInner> listByResourceGroup(String resourceGroupName);

    /**
     * Returns a collection of Target resources within the resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Target list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TargetInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Lists Targets resources within an Azure subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Target list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TargetInner> list();

    /**
     * Lists Targets resources within an Azure subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Target list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TargetInner> list(Context context);
}
