// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Defines a binding for a provider.
 */
@Fluent
public final class BindingProperties implements JsonSerializable<BindingProperties> {
    /*
     * Name of the provider.
     */
    private String provider;

    /*
     * Configuration values for the binding.
     */
    private Map<String, String> config;

    /*
     * Role that the provider binds to with the component.
     */
    private String role;

    /**
     * Creates an instance of BindingProperties class.
     */
    public BindingProperties() {
    }

    /**
     * Get the provider property: Name of the provider.
     * 
     * @return the provider value.
     */
    public String provider() {
        return this.provider;
    }

    /**
     * Set the provider property: Name of the provider.
     * 
     * @param provider the provider value to set.
     * @return the BindingProperties object itself.
     */
    public BindingProperties withProvider(String provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the config property: Configuration values for the binding.
     * 
     * @return the config value.
     */
    public Map<String, String> config() {
        return this.config;
    }

    /**
     * Set the config property: Configuration values for the binding.
     * 
     * @param config the config value to set.
     * @return the BindingProperties object itself.
     */
    public BindingProperties withConfig(Map<String, String> config) {
        this.config = config;
        return this;
    }

    /**
     * Get the role property: Role that the provider binds to with the component.
     * 
     * @return the role value.
     */
    public String role() {
        return this.role;
    }

    /**
     * Set the role property: Role that the provider binds to with the component.
     * 
     * @param role the role value to set.
     * @return the BindingProperties object itself.
     */
    public BindingProperties withRole(String role) {
        this.role = role;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (provider() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property provider in model BindingProperties"));
        }
        if (role() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property role in model BindingProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BindingProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provider", this.provider);
        jsonWriter.writeStringField("role", this.role);
        jsonWriter.writeMapField("config", this.config, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BindingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BindingProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BindingProperties.
     */
    public static BindingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BindingProperties deserializedBindingProperties = new BindingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provider".equals(fieldName)) {
                    deserializedBindingProperties.provider = reader.getString();
                } else if ("role".equals(fieldName)) {
                    deserializedBindingProperties.role = reader.getString();
                } else if ("config".equals(fieldName)) {
                    Map<String, String> config = reader.readMap(reader1 -> reader1.getString());
                    deserializedBindingProperties.config = config;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBindingProperties;
        });
    }
}
