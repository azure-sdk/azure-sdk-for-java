// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The properties of the CatalogVersion.
 */
@Fluent
public final class CatalogVersionProperties implements JsonSerializable<CatalogVersionProperties> {
    /*
     * The provisioning state of the CatalogVersion.
     */
    private ProvisioningState provisioningState;

    /*
     * The properties of the CatalogVersion.
     */
    private Map<String, Object> properties;

    /*
     * The metadata of the CatalogVersion.
     */
    private Map<String, String> metadata;

    /*
     * The name of parent CatalogVersion
     */
    private String parentName;

    /*
     * The catalogType of the CatalogVersion.
     */
    private String catalogType;

    /*
     * The status of the CatalogVersion.
     */
    private CatalogStatusProperties status;

    /**
     * Creates an instance of CatalogVersionProperties class.
     */
    public CatalogVersionProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the CatalogVersion.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the properties property: The properties of the CatalogVersion.
     * 
     * @return the properties value.
     */
    public Map<String, Object> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The properties of the CatalogVersion.
     * 
     * @param properties the properties value to set.
     * @return the CatalogVersionProperties object itself.
     */
    public CatalogVersionProperties withProperties(Map<String, Object> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the metadata property: The metadata of the CatalogVersion.
     * 
     * @return the metadata value.
     */
    public Map<String, String> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata of the CatalogVersion.
     * 
     * @param metadata the metadata value to set.
     * @return the CatalogVersionProperties object itself.
     */
    public CatalogVersionProperties withMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the parentName property: The name of parent CatalogVersion.
     * 
     * @return the parentName value.
     */
    public String parentName() {
        return this.parentName;
    }

    /**
     * Set the parentName property: The name of parent CatalogVersion.
     * 
     * @param parentName the parentName value to set.
     * @return the CatalogVersionProperties object itself.
     */
    public CatalogVersionProperties withParentName(String parentName) {
        this.parentName = parentName;
        return this;
    }

    /**
     * Get the catalogType property: The catalogType of the CatalogVersion.
     * 
     * @return the catalogType value.
     */
    public String catalogType() {
        return this.catalogType;
    }

    /**
     * Set the catalogType property: The catalogType of the CatalogVersion.
     * 
     * @param catalogType the catalogType value to set.
     * @return the CatalogVersionProperties object itself.
     */
    public CatalogVersionProperties withCatalogType(String catalogType) {
        this.catalogType = catalogType;
        return this;
    }

    /**
     * Get the status property: The status of the CatalogVersion.
     * 
     * @return the status value.
     */
    public CatalogStatusProperties status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("parentName", this.parentName);
        jsonWriter.writeStringField("catalogType", this.catalogType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CatalogVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CatalogVersionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CatalogVersionProperties.
     */
    public static CatalogVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CatalogVersionProperties deserializedCatalogVersionProperties = new CatalogVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedCatalogVersionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    Map<String, Object> properties = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedCatalogVersionProperties.properties = properties;
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedCatalogVersionProperties.metadata = metadata;
                } else if ("parentName".equals(fieldName)) {
                    deserializedCatalogVersionProperties.parentName = reader.getString();
                } else if ("catalogType".equals(fieldName)) {
                    deserializedCatalogVersionProperties.catalogType = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedCatalogVersionProperties.status = CatalogStatusProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCatalogVersionProperties;
        });
    }
}
