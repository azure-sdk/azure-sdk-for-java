// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.toolchainorchestrator.models.EvalExpressionResponseError;
import com.azure.resourcemanager.toolchainorchestrator.models.ResourceProvisioningState;
import java.io.IOException;
import java.util.Map;

/**
 * The expression evaluation result response.
 */
@Immutable
public final class EvalExpressionResponseInner implements JsonSerializable<EvalExpressionResponseInner> {
    /*
     * Operation Id
     */
    private String id;

    /*
     * Operation Name
     */
    private String name;

    /*
     * Provisioning state of the expression evaluation resource
     */
    private ResourceProvisioningState status;

    /*
     * Error listing the expression evaluation response.
     */
    private EvalExpressionResponseError error;

    /*
     * Properties of the expression evaluation response.
     */
    private Map<String, Object> properties;

    /**
     * Creates an instance of EvalExpressionResponseInner class.
     */
    private EvalExpressionResponseInner() {
    }

    /**
     * Get the id property: Operation Id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Operation Name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the status property: Provisioning state of the expression evaluation resource.
     * 
     * @return the status value.
     */
    public ResourceProvisioningState status() {
        return this.status;
    }

    /**
     * Get the error property: Error listing the expression evaluation response.
     * 
     * @return the error value.
     */
    public EvalExpressionResponseError error() {
        return this.error;
    }

    /**
     * Get the properties property: Properties of the expression evaluation response.
     * 
     * @return the properties value.
     */
    public Map<String, Object> properties() {
        return this.properties;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (error() != null) {
            error().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EvalExpressionResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EvalExpressionResponseInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EvalExpressionResponseInner.
     */
    public static EvalExpressionResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EvalExpressionResponseInner deserializedEvalExpressionResponseInner = new EvalExpressionResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedEvalExpressionResponseInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedEvalExpressionResponseInner.name = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedEvalExpressionResponseInner.status
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("error".equals(fieldName)) {
                    deserializedEvalExpressionResponseInner.error = EvalExpressionResponseError.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    Map<String, Object> properties = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedEvalExpressionResponseInner.properties = properties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEvalExpressionResponseInner;
        });
    }
}
