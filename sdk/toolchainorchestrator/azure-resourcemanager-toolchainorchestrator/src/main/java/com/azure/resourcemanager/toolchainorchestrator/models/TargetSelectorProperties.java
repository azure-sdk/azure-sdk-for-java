// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Properties of the reference target.
 */
@Fluent
public final class TargetSelectorProperties implements JsonSerializable<TargetSelectorProperties> {
    /*
     * Name of the TargetVersion resource.
     */
    private String name;

    /*
     * The selector of the TargetVersion resource.
     */
    private Map<String, String> selector;

    /**
     * Creates an instance of TargetSelectorProperties class.
     */
    public TargetSelectorProperties() {
    }

    /**
     * Get the name property: Name of the TargetVersion resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the TargetVersion resource.
     * 
     * @param name the name value to set.
     * @return the TargetSelectorProperties object itself.
     */
    public TargetSelectorProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the selector property: The selector of the TargetVersion resource.
     * 
     * @return the selector value.
     */
    public Map<String, String> selector() {
        return this.selector;
    }

    /**
     * Set the selector property: The selector of the TargetVersion resource.
     * 
     * @param selector the selector value to set.
     * @return the TargetSelectorProperties object itself.
     */
    public TargetSelectorProperties withSelector(Map<String, String> selector) {
        this.selector = selector;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeMapField("selector", this.selector, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetSelectorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetSelectorProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetSelectorProperties.
     */
    public static TargetSelectorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetSelectorProperties deserializedTargetSelectorProperties = new TargetSelectorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedTargetSelectorProperties.name = reader.getString();
                } else if ("selector".equals(fieldName)) {
                    Map<String, String> selector = reader.readMap(reader1 -> reader1.getString());
                    deserializedTargetSelectorProperties.selector = selector;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetSelectorProperties;
        });
    }
}
