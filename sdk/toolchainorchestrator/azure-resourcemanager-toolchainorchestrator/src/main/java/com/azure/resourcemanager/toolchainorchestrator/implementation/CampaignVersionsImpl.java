// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.toolchainorchestrator.fluent.CampaignVersionsClient;
import com.azure.resourcemanager.toolchainorchestrator.fluent.models.CampaignVersionInner;
import com.azure.resourcemanager.toolchainorchestrator.models.CampaignVersion;
import com.azure.resourcemanager.toolchainorchestrator.models.CampaignVersions;

public final class CampaignVersionsImpl implements CampaignVersions {
    private static final ClientLogger LOGGER = new ClientLogger(CampaignVersionsImpl.class);

    private final CampaignVersionsClient innerClient;

    private final com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager serviceManager;

    public CampaignVersionsImpl(CampaignVersionsClient innerClient,
        com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CampaignVersion> getWithResponse(String resourceGroupName, String campaignName, String versionName,
        Context context) {
        Response<CampaignVersionInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, campaignName, versionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CampaignVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CampaignVersion get(String resourceGroupName, String campaignName, String versionName) {
        CampaignVersionInner inner = this.serviceClient().get(resourceGroupName, campaignName, versionName);
        if (inner != null) {
            return new CampaignVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String campaignName, String versionName) {
        this.serviceClient().delete(resourceGroupName, campaignName, versionName);
    }

    public void delete(String resourceGroupName, String campaignName, String versionName, Context context) {
        this.serviceClient().delete(resourceGroupName, campaignName, versionName, context);
    }

    public PagedIterable<CampaignVersion> listByCampaign(String resourceGroupName, String campaignName) {
        PagedIterable<CampaignVersionInner> inner
            = this.serviceClient().listByCampaign(resourceGroupName, campaignName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CampaignVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<CampaignVersion> listByCampaign(String resourceGroupName, String campaignName,
        Context context) {
        PagedIterable<CampaignVersionInner> inner
            = this.serviceClient().listByCampaign(resourceGroupName, campaignName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CampaignVersionImpl(inner1, this.manager()));
    }

    public CampaignVersion getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String campaignName = ResourceManagerUtils.getValueFromIdByName(id, "campaigns");
        if (campaignName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'campaigns'.", id)));
        }
        String versionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (versionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, campaignName, versionName, Context.NONE).getValue();
    }

    public Response<CampaignVersion> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String campaignName = ResourceManagerUtils.getValueFromIdByName(id, "campaigns");
        if (campaignName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'campaigns'.", id)));
        }
        String versionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (versionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, campaignName, versionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String campaignName = ResourceManagerUtils.getValueFromIdByName(id, "campaigns");
        if (campaignName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'campaigns'.", id)));
        }
        String versionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (versionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        this.delete(resourceGroupName, campaignName, versionName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String campaignName = ResourceManagerUtils.getValueFromIdByName(id, "campaigns");
        if (campaignName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'campaigns'.", id)));
        }
        String versionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (versionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        this.delete(resourceGroupName, campaignName, versionName, context);
    }

    private CampaignVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager manager() {
        return this.serviceManager;
    }

    public CampaignVersionImpl define(String name) {
        return new CampaignVersionImpl(name, this.manager());
    }
}
