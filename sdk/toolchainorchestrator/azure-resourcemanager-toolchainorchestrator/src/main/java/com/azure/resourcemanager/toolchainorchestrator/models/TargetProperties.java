// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The properties of a Target resource.
 */
@Fluent
public final class TargetProperties implements JsonSerializable<TargetProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * The metadata information of the TargetVersion.
     */
    private Map<String, String> metadata;

    /*
     * The properties of the TargetVersion.
     */
    private Map<String, String> properties;

    /*
     * The display name of the TargetVersion.
     */
    private String displayName;

    /*
     * The constraints of the TargetVersion.
     */
    private String constraints;

    /*
     * The scope of the TargetVersion.
     */
    private String scope;

    /*
     * Defines the device topology for a target or instance.
     */
    private List<TopologyProperties> topologies;

    /*
     * A list of components.
     */
    private List<ComponentProperties> components;

    /*
     * The reconciliationPolicy of the TargetVersion.
     */
    private ReconciliationPolicyProperties reconciliationPolicy;

    /*
     * The running state for the TargetVersion resource.
     */
    private Boolean isDryRun;

    /*
     * The status of the TargetVersion.
     */
    private InstanceTargetStatusProperties status;

    /**
     * Creates an instance of TargetProperties class.
     */
    public TargetProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the metadata property: The metadata information of the TargetVersion.
     * 
     * @return the metadata value.
     */
    public Map<String, String> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata information of the TargetVersion.
     * 
     * @param metadata the metadata value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the properties property: The properties of the TargetVersion.
     * 
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The properties of the TargetVersion.
     * 
     * @param properties the properties value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the displayName property: The display name of the TargetVersion.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the TargetVersion.
     * 
     * @param displayName the displayName value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the constraints property: The constraints of the TargetVersion.
     * 
     * @return the constraints value.
     */
    public String constraints() {
        return this.constraints;
    }

    /**
     * Set the constraints property: The constraints of the TargetVersion.
     * 
     * @param constraints the constraints value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withConstraints(String constraints) {
        this.constraints = constraints;
        return this;
    }

    /**
     * Get the scope property: The scope of the TargetVersion.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The scope of the TargetVersion.
     * 
     * @param scope the scope value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the topologies property: Defines the device topology for a target or instance.
     * 
     * @return the topologies value.
     */
    public List<TopologyProperties> topologies() {
        return this.topologies;
    }

    /**
     * Set the topologies property: Defines the device topology for a target or instance.
     * 
     * @param topologies the topologies value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withTopologies(List<TopologyProperties> topologies) {
        this.topologies = topologies;
        return this;
    }

    /**
     * Get the components property: A list of components.
     * 
     * @return the components value.
     */
    public List<ComponentProperties> components() {
        return this.components;
    }

    /**
     * Set the components property: A list of components.
     * 
     * @param components the components value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withComponents(List<ComponentProperties> components) {
        this.components = components;
        return this;
    }

    /**
     * Get the reconciliationPolicy property: The reconciliationPolicy of the TargetVersion.
     * 
     * @return the reconciliationPolicy value.
     */
    public ReconciliationPolicyProperties reconciliationPolicy() {
        return this.reconciliationPolicy;
    }

    /**
     * Set the reconciliationPolicy property: The reconciliationPolicy of the TargetVersion.
     * 
     * @param reconciliationPolicy the reconciliationPolicy value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withReconciliationPolicy(ReconciliationPolicyProperties reconciliationPolicy) {
        this.reconciliationPolicy = reconciliationPolicy;
        return this;
    }

    /**
     * Get the isDryRun property: The running state for the TargetVersion resource.
     * 
     * @return the isDryRun value.
     */
    public Boolean isDryRun() {
        return this.isDryRun;
    }

    /**
     * Set the isDryRun property: The running state for the TargetVersion resource.
     * 
     * @param isDryRun the isDryRun value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withIsDryRun(Boolean isDryRun) {
        this.isDryRun = isDryRun;
        return this;
    }

    /**
     * Get the status property: The status of the TargetVersion.
     * 
     * @return the status value.
     */
    public InstanceTargetStatusProperties status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (topologies() != null) {
            topologies().forEach(e -> e.validate());
        }
        if (components() != null) {
            components().forEach(e -> e.validate());
        }
        if (reconciliationPolicy() != null) {
            reconciliationPolicy().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("constraints", this.constraints);
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeArrayField("topologies", this.topologies, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("components", this.components, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("reconciliationPolicy", this.reconciliationPolicy);
        jsonWriter.writeBooleanField("isDryRun", this.isDryRun);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetProperties.
     */
    public static TargetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetProperties deserializedTargetProperties = new TargetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedTargetProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedTargetProperties.metadata = metadata;
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedTargetProperties.properties = properties;
                } else if ("displayName".equals(fieldName)) {
                    deserializedTargetProperties.displayName = reader.getString();
                } else if ("constraints".equals(fieldName)) {
                    deserializedTargetProperties.constraints = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedTargetProperties.scope = reader.getString();
                } else if ("topologies".equals(fieldName)) {
                    List<TopologyProperties> topologies
                        = reader.readArray(reader1 -> TopologyProperties.fromJson(reader1));
                    deserializedTargetProperties.topologies = topologies;
                } else if ("components".equals(fieldName)) {
                    List<ComponentProperties> components
                        = reader.readArray(reader1 -> ComponentProperties.fromJson(reader1));
                    deserializedTargetProperties.components = components;
                } else if ("reconciliationPolicy".equals(fieldName)) {
                    deserializedTargetProperties.reconciliationPolicy = ReconciliationPolicyProperties.fromJson(reader);
                } else if ("isDryRun".equals(fieldName)) {
                    deserializedTargetProperties.isDryRun = reader.getNullable(JsonReader::getBoolean);
                } else if ("status".equals(fieldName)) {
                    deserializedTargetProperties.status = InstanceTargetStatusProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetProperties;
        });
    }
}
