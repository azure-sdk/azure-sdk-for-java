// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Defining the CampaignVersion.
 */
@Fluent
public final class CampaignVersionProperties implements JsonSerializable<CampaignVersionProperties> {
    /*
     * Provisioning state of the campaignVersion.
     */
    private ProvisioningState provisioningState;

    /*
     * The initial stage of the CampaignVersion.
     */
    private String firstStage;

    /*
     * Whether campaign is self driving or not. That is whether a stage should trigger the next stage when it finishes.
     */
    private Boolean selfDriving;

    /*
     * The stages of the CampaignVersion.
     */
    private Map<String, StageProperties> stages;

    /**
     * Creates an instance of CampaignVersionProperties class.
     */
    public CampaignVersionProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the campaignVersion.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the firstStage property: The initial stage of the CampaignVersion.
     * 
     * @return the firstStage value.
     */
    public String firstStage() {
        return this.firstStage;
    }

    /**
     * Set the firstStage property: The initial stage of the CampaignVersion.
     * 
     * @param firstStage the firstStage value to set.
     * @return the CampaignVersionProperties object itself.
     */
    public CampaignVersionProperties withFirstStage(String firstStage) {
        this.firstStage = firstStage;
        return this;
    }

    /**
     * Get the selfDriving property: Whether campaign is self driving or not. That is whether a stage should trigger the
     * next stage when it finishes.
     * 
     * @return the selfDriving value.
     */
    public Boolean selfDriving() {
        return this.selfDriving;
    }

    /**
     * Set the selfDriving property: Whether campaign is self driving or not. That is whether a stage should trigger the
     * next stage when it finishes.
     * 
     * @param selfDriving the selfDriving value to set.
     * @return the CampaignVersionProperties object itself.
     */
    public CampaignVersionProperties withSelfDriving(Boolean selfDriving) {
        this.selfDriving = selfDriving;
        return this;
    }

    /**
     * Get the stages property: The stages of the CampaignVersion.
     * 
     * @return the stages value.
     */
    public Map<String, StageProperties> stages() {
        return this.stages;
    }

    /**
     * Set the stages property: The stages of the CampaignVersion.
     * 
     * @param stages the stages value to set.
     * @return the CampaignVersionProperties object itself.
     */
    public CampaignVersionProperties withStages(Map<String, StageProperties> stages) {
        this.stages = stages;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (stages() != null) {
            stages().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("firstStage", this.firstStage);
        jsonWriter.writeBooleanField("selfDriving", this.selfDriving);
        jsonWriter.writeMapField("stages", this.stages, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CampaignVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CampaignVersionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CampaignVersionProperties.
     */
    public static CampaignVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CampaignVersionProperties deserializedCampaignVersionProperties = new CampaignVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedCampaignVersionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("firstStage".equals(fieldName)) {
                    deserializedCampaignVersionProperties.firstStage = reader.getString();
                } else if ("selfDriving".equals(fieldName)) {
                    deserializedCampaignVersionProperties.selfDriving = reader.getNullable(JsonReader::getBoolean);
                } else if ("stages".equals(fieldName)) {
                    Map<String, StageProperties> stages = reader.readMap(reader1 -> StageProperties.fromJson(reader1));
                    deserializedCampaignVersionProperties.stages = stages;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCampaignVersionProperties;
        });
    }
}
