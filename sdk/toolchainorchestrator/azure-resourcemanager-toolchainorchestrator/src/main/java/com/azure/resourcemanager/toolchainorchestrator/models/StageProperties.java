// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Defines a Stage.
 */
@Fluent
public final class StageProperties implements JsonSerializable<StageProperties> {
    /*
     * The contexts of the Stage
     */
    private String contexts;

    /*
     * The config of the Stage
     */
    private Map<String, Object> config;

    /*
     * The inputs of the Stage
     */
    private Map<String, Object> inputs;

    /*
     * The name of the Stage
     */
    private String name;

    /*
     * The provider of the Stage
     */
    private String provider;

    /*
     * The stageSelector of the Stage
     */
    private String stageSelector;

    /*
     * The schedule of the Stage
     */
    private OffsetDateTime schedule;

    /**
     * Creates an instance of StageProperties class.
     */
    public StageProperties() {
    }

    /**
     * Get the contexts property: The contexts of the Stage.
     * 
     * @return the contexts value.
     */
    public String contexts() {
        return this.contexts;
    }

    /**
     * Set the contexts property: The contexts of the Stage.
     * 
     * @param contexts the contexts value to set.
     * @return the StageProperties object itself.
     */
    public StageProperties withContexts(String contexts) {
        this.contexts = contexts;
        return this;
    }

    /**
     * Get the config property: The config of the Stage.
     * 
     * @return the config value.
     */
    public Map<String, Object> config() {
        return this.config;
    }

    /**
     * Set the config property: The config of the Stage.
     * 
     * @param config the config value to set.
     * @return the StageProperties object itself.
     */
    public StageProperties withConfig(Map<String, Object> config) {
        this.config = config;
        return this;
    }

    /**
     * Get the inputs property: The inputs of the Stage.
     * 
     * @return the inputs value.
     */
    public Map<String, Object> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: The inputs of the Stage.
     * 
     * @param inputs the inputs value to set.
     * @return the StageProperties object itself.
     */
    public StageProperties withInputs(Map<String, Object> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the name property: The name of the Stage.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the Stage.
     * 
     * @param name the name value to set.
     * @return the StageProperties object itself.
     */
    public StageProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the provider property: The provider of the Stage.
     * 
     * @return the provider value.
     */
    public String provider() {
        return this.provider;
    }

    /**
     * Set the provider property: The provider of the Stage.
     * 
     * @param provider the provider value to set.
     * @return the StageProperties object itself.
     */
    public StageProperties withProvider(String provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the stageSelector property: The stageSelector of the Stage.
     * 
     * @return the stageSelector value.
     */
    public String stageSelector() {
        return this.stageSelector;
    }

    /**
     * Set the stageSelector property: The stageSelector of the Stage.
     * 
     * @param stageSelector the stageSelector value to set.
     * @return the StageProperties object itself.
     */
    public StageProperties withStageSelector(String stageSelector) {
        this.stageSelector = stageSelector;
        return this;
    }

    /**
     * Get the schedule property: The schedule of the Stage.
     * 
     * @return the schedule value.
     */
    public OffsetDateTime schedule() {
        return this.schedule;
    }

    /**
     * Set the schedule property: The schedule of the Stage.
     * 
     * @param schedule the schedule value to set.
     * @return the StageProperties object itself.
     */
    public StageProperties withSchedule(OffsetDateTime schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("contexts", this.contexts);
        jsonWriter.writeMapField("config", this.config, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("inputs", this.inputs, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("provider", this.provider);
        jsonWriter.writeStringField("stageSelector", this.stageSelector);
        jsonWriter.writeStringField("schedule",
            this.schedule == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.schedule));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StageProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StageProperties.
     */
    public static StageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StageProperties deserializedStageProperties = new StageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contexts".equals(fieldName)) {
                    deserializedStageProperties.contexts = reader.getString();
                } else if ("config".equals(fieldName)) {
                    Map<String, Object> config = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedStageProperties.config = config;
                } else if ("inputs".equals(fieldName)) {
                    Map<String, Object> inputs = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedStageProperties.inputs = inputs;
                } else if ("name".equals(fieldName)) {
                    deserializedStageProperties.name = reader.getString();
                } else if ("provider".equals(fieldName)) {
                    deserializedStageProperties.provider = reader.getString();
                } else if ("stageSelector".equals(fieldName)) {
                    deserializedStageProperties.stageSelector = reader.getString();
                } else if ("schedule".equals(fieldName)) {
                    deserializedStageProperties.schedule = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStageProperties;
        });
    }
}
