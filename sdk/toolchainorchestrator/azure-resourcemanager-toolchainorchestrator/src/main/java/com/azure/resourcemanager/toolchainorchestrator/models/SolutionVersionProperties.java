// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The properties of a SolutionVersion resource.
 */
@Fluent
public final class SolutionVersionProperties implements JsonSerializable<SolutionVersionProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * A list of components.
     */
    private List<ComponentProperties> components;

    /*
     * The display name of the SolutionVersion resource.
     */
    private String displayName;

    /*
     * The metadata information of the SolutionVersion resource.
     */
    private Map<String, String> metadata;

    /**
     * Creates an instance of SolutionVersionProperties class.
     */
    public SolutionVersionProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the components property: A list of components.
     * 
     * @return the components value.
     */
    public List<ComponentProperties> components() {
        return this.components;
    }

    /**
     * Set the components property: A list of components.
     * 
     * @param components the components value to set.
     * @return the SolutionVersionProperties object itself.
     */
    public SolutionVersionProperties withComponents(List<ComponentProperties> components) {
        this.components = components;
        return this;
    }

    /**
     * Get the displayName property: The display name of the SolutionVersion resource.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the SolutionVersion resource.
     * 
     * @param displayName the displayName value to set.
     * @return the SolutionVersionProperties object itself.
     */
    public SolutionVersionProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the metadata property: The metadata information of the SolutionVersion resource.
     * 
     * @return the metadata value.
     */
    public Map<String, String> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata information of the SolutionVersion resource.
     * 
     * @param metadata the metadata value to set.
     * @return the SolutionVersionProperties object itself.
     */
    public SolutionVersionProperties withMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (components() != null) {
            components().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("components", this.components, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionVersionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SolutionVersionProperties.
     */
    public static SolutionVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionVersionProperties deserializedSolutionVersionProperties = new SolutionVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedSolutionVersionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("components".equals(fieldName)) {
                    List<ComponentProperties> components
                        = reader.readArray(reader1 -> ComponentProperties.fromJson(reader1));
                    deserializedSolutionVersionProperties.components = components;
                } else if ("displayName".equals(fieldName)) {
                    deserializedSolutionVersionProperties.displayName = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedSolutionVersionProperties.metadata = metadata;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionVersionProperties;
        });
    }
}
