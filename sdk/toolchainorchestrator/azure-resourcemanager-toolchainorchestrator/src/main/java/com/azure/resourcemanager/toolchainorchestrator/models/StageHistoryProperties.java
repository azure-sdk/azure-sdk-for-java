// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Defines a StageHistory.
 */
@Immutable
public final class StageHistoryProperties implements JsonSerializable<StageHistoryProperties> {
    /*
     * The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters for the initial stage
     */
    private Map<String, Object> inputs;

    /*
     * The outputs of the StageHistory, it is different as the different input stages.
     */
    private Map<String, Object> outputs;

    /*
     * The stage of the StageHistory
     */
    private String stage;

    /*
     * The state of the StageHistory
     */
    private Boolean isActive;

    /*
     * The nextStage of the StageHistory
     */
    private String nextStage;

    /*
     * The errorMessage of the StageHistory
     */
    private String errorMessage;

    /*
     * The status code of the StageHistory
     */
    private Integer status;

    /*
     * The status message of the StageHistory
     */
    private String statusMessage;

    /**
     * Creates an instance of StageHistoryProperties class.
     */
    private StageHistoryProperties() {
    }

    /**
     * Get the inputs property: The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters
     * for the initial stage.
     * 
     * @return the inputs value.
     */
    public Map<String, Object> inputs() {
        return this.inputs;
    }

    /**
     * Get the outputs property: The outputs of the StageHistory, it is different as the different input stages.
     * 
     * @return the outputs value.
     */
    public Map<String, Object> outputs() {
        return this.outputs;
    }

    /**
     * Get the stage property: The stage of the StageHistory.
     * 
     * @return the stage value.
     */
    public String stage() {
        return this.stage;
    }

    /**
     * Get the isActive property: The state of the StageHistory.
     * 
     * @return the isActive value.
     */
    public Boolean isActive() {
        return this.isActive;
    }

    /**
     * Get the nextStage property: The nextStage of the StageHistory.
     * 
     * @return the nextStage value.
     */
    public String nextStage() {
        return this.nextStage;
    }

    /**
     * Get the errorMessage property: The errorMessage of the StageHistory.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the status property: The status code of the StageHistory.
     * 
     * @return the status value.
     */
    public Integer status() {
        return this.status;
    }

    /**
     * Get the statusMessage property: The status message of the StageHistory.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (stage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property stage in model StageHistoryProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StageHistoryProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("stage", this.stage);
        jsonWriter.writeMapField("inputs", this.inputs, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("outputs", this.outputs, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeBooleanField("isActive", this.isActive);
        jsonWriter.writeStringField("nextStage", this.nextStage);
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        jsonWriter.writeNumberField("status", this.status);
        jsonWriter.writeStringField("statusMessage", this.statusMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StageHistoryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StageHistoryProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StageHistoryProperties.
     */
    public static StageHistoryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StageHistoryProperties deserializedStageHistoryProperties = new StageHistoryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stage".equals(fieldName)) {
                    deserializedStageHistoryProperties.stage = reader.getString();
                } else if ("inputs".equals(fieldName)) {
                    Map<String, Object> inputs = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedStageHistoryProperties.inputs = inputs;
                } else if ("outputs".equals(fieldName)) {
                    Map<String, Object> outputs = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedStageHistoryProperties.outputs = outputs;
                } else if ("isActive".equals(fieldName)) {
                    deserializedStageHistoryProperties.isActive = reader.getNullable(JsonReader::getBoolean);
                } else if ("nextStage".equals(fieldName)) {
                    deserializedStageHistoryProperties.nextStage = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedStageHistoryProperties.errorMessage = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedStageHistoryProperties.status = reader.getNullable(JsonReader::getInt);
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedStageHistoryProperties.statusMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStageHistoryProperties;
        });
    }
}
