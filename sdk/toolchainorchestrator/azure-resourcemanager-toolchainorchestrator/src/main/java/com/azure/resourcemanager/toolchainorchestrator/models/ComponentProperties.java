// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Defines a desired runtime component.
 */
@Fluent
public final class ComponentProperties implements JsonSerializable<ComponentProperties> {
    /*
     * Name of the component.
     */
    private String name;

    /*
     * Metadata information of the component.
     */
    private Map<String, String> metadata;

    /*
     * Properties of the component.
     */
    private Map<String, Object> properties;

    /*
     * Constraints of the component.
     */
    private String constraints;

    /*
     * Dependencies of the component.
     */
    private List<String> dependencies;

    /*
     * Component type.
     */
    private String type;

    /**
     * Creates an instance of ComponentProperties class.
     */
    public ComponentProperties() {
    }

    /**
     * Get the name property: Name of the component.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the component.
     * 
     * @param name the name value to set.
     * @return the ComponentProperties object itself.
     */
    public ComponentProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the metadata property: Metadata information of the component.
     * 
     * @return the metadata value.
     */
    public Map<String, String> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Metadata information of the component.
     * 
     * @param metadata the metadata value to set.
     * @return the ComponentProperties object itself.
     */
    public ComponentProperties withMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the properties property: Properties of the component.
     * 
     * @return the properties value.
     */
    public Map<String, Object> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Properties of the component.
     * 
     * @param properties the properties value to set.
     * @return the ComponentProperties object itself.
     */
    public ComponentProperties withProperties(Map<String, Object> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the constraints property: Constraints of the component.
     * 
     * @return the constraints value.
     */
    public String constraints() {
        return this.constraints;
    }

    /**
     * Set the constraints property: Constraints of the component.
     * 
     * @param constraints the constraints value to set.
     * @return the ComponentProperties object itself.
     */
    public ComponentProperties withConstraints(String constraints) {
        this.constraints = constraints;
        return this;
    }

    /**
     * Get the dependencies property: Dependencies of the component.
     * 
     * @return the dependencies value.
     */
    public List<String> dependencies() {
        return this.dependencies;
    }

    /**
     * Set the dependencies property: Dependencies of the component.
     * 
     * @param dependencies the dependencies value to set.
     * @return the ComponentProperties object itself.
     */
    public ComponentProperties withDependencies(List<String> dependencies) {
        this.dependencies = dependencies;
        return this;
    }

    /**
     * Get the type property: Component type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Component type.
     * 
     * @param type the type value to set.
     * @return the ComponentProperties object itself.
     */
    public ComponentProperties withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model ComponentProperties"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model ComponentProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ComponentProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("constraints", this.constraints);
        jsonWriter.writeArrayField("dependencies", this.dependencies, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComponentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComponentProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ComponentProperties.
     */
    public static ComponentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComponentProperties deserializedComponentProperties = new ComponentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedComponentProperties.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedComponentProperties.type = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedComponentProperties.metadata = metadata;
                } else if ("properties".equals(fieldName)) {
                    Map<String, Object> properties = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedComponentProperties.properties = properties;
                } else if ("constraints".equals(fieldName)) {
                    deserializedComponentProperties.constraints = reader.getString();
                } else if ("dependencies".equals(fieldName)) {
                    List<String> dependencies = reader.readArray(reader1 -> reader1.getString());
                    deserializedComponentProperties.dependencies = dependencies;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComponentProperties;
        });
    }
}
