// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.toolchainorchestrator.models.CampaignVersionProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.StageProperties;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for CampaignVersions CreateOrUpdate.
 */
public final class CampaignVersionsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2024-08-01-preview/CampaignVersions_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: CampaignVersions_CreateOrUpdate - generated by [MaximumSet] rule - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to ToolchainOrchestratorManager.
     */
    public static void campaignVersionsCreateOrUpdateGeneratedByMaximumSetRuleGeneratedByMaximumSetRule(
        com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager manager) throws IOException {
        manager.campaignVersions()
            .define("j6555")
            .withRegion("uzehbktba")
            .withExistingCampaign("rgopenapi", "j6555")
            .withTags(mapOf())
            .withProperties(new CampaignVersionProperties().withFirstStage("approval")
                .withSelfDriving(true)
                .withStages(mapOf("approval",
                    new StageProperties()
                        .withConfig(mapOf("baseUrl", "https://bing.com", "method", "GET", "statusCodes", "[200]"))
                        .withName("approval")
                        .withProvider("providers.stage.http")
                        .withStageSelector("${{$if($equal($output(approval,status), 200),'deploy','end')}}"),
                    "deploy",
                    new StageProperties()
                        .withConfig(
                            mapOf("baseUrl", "http://symphony-service:8080/v1alpha2/", "user", "admin", "password", ""))
                        .withInputs(mapOf("names",
                            SerializerFactory.createDefaultManagementSerializerAdapter()
                                .deserialize("[\"test-gated-instance\"]", Object.class, SerializerEncoding.JSON)))
                        .withName("deploy")
                        .withProvider("providers.stage.materialize")
                        .withStageSelector(""),
                    "end",
                    new StageProperties().withName("end").withProvider("providers.stage.mock").withStageSelector(""))))
            .withExtendedLocation(
                new ExtendedLocation().withName("bjjhfqsplgzdlbdlddleetyg").withType("sosibrbmmrfbbyp"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
