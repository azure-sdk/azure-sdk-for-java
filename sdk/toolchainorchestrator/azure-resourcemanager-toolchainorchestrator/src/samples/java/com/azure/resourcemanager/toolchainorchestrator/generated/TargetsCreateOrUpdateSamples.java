// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.toolchainorchestrator.generated;

import com.azure.resourcemanager.toolchainorchestrator.models.BindingProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ComponentProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ExtendedLocation;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationPolicyProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.ReconciliationState;
import com.azure.resourcemanager.toolchainorchestrator.models.TargetProperties;
import com.azure.resourcemanager.toolchainorchestrator.models.TopologyProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Targets CreateOrUpdate.
 */
public final class TargetsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2024-08-01-preview/Targets_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Targets_CreateOrUpdate - generated by [MaximumSet] rule - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to ToolchainOrchestratorManager.
     */
    public static void targetsCreateOrUpdateGeneratedByMaximumSetRuleGeneratedByMaximumSetRule(
        com.azure.resourcemanager.toolchainorchestrator.ToolchainOrchestratorManager manager) {
        manager.targets()
            .define("7sds4")
            .withRegion("pjjkifnrwvzcyohz")
            .withExistingResourceGroup("rgopenapi")
            .withExtendedLocation(
                new ExtendedLocation().withName("bjjhfqsplgzdlbdlddleetyg").withType("sosibrbmmrfbbyp"))
            .withTags(mapOf())
            .withProperties(new TargetProperties().withScope("lm")
                .withTopologies(Arrays.asList(new TopologyProperties()
                    .withBindings(Arrays.asList(new BindingProperties().withProvider("qpwesjlyyggcbehwigbobqum")
                        .withConfig(mapOf())
                        .withRole("role")))))
                .withComponents(Arrays.asList(new ComponentProperties().withName("yhnelpxsobdyurwvhkq")
                    .withProperties(mapOf())
                    .withDependencies(Arrays.asList("x"))
                    .withType("wiabwsfqhhxru")))
                .withReconciliationPolicy(new ReconciliationPolicyProperties().withState(ReconciliationState.ACTIVE)
                    .withInterval("wyrrzydmfgzymvzbppscxyfobku")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
