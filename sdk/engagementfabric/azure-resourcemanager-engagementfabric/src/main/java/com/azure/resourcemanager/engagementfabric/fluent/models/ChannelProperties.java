// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.engagementfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The EngagementFabric channel properties.
 */
@Fluent
public final class ChannelProperties implements JsonSerializable<ChannelProperties> {
    /*
     * The channel type
     */
    private String channelType;

    /*
     * The functions to be enabled for the channel
     */
    private List<String> channelFunctions;

    /*
     * The channel credentials
     */
    private Map<String, String> credentials;

    /**
     * Creates an instance of ChannelProperties class.
     */
    public ChannelProperties() {
    }

    /**
     * Get the channelType property: The channel type.
     * 
     * @return the channelType value.
     */
    public String channelType() {
        return this.channelType;
    }

    /**
     * Set the channelType property: The channel type.
     * 
     * @param channelType the channelType value to set.
     * @return the ChannelProperties object itself.
     */
    public ChannelProperties withChannelType(String channelType) {
        this.channelType = channelType;
        return this;
    }

    /**
     * Get the channelFunctions property: The functions to be enabled for the channel.
     * 
     * @return the channelFunctions value.
     */
    public List<String> channelFunctions() {
        return this.channelFunctions;
    }

    /**
     * Set the channelFunctions property: The functions to be enabled for the channel.
     * 
     * @param channelFunctions the channelFunctions value to set.
     * @return the ChannelProperties object itself.
     */
    public ChannelProperties withChannelFunctions(List<String> channelFunctions) {
        this.channelFunctions = channelFunctions;
        return this;
    }

    /**
     * Get the credentials property: The channel credentials.
     * 
     * @return the credentials value.
     */
    public Map<String, String> credentials() {
        return this.credentials;
    }

    /**
     * Set the credentials property: The channel credentials.
     * 
     * @param credentials the credentials value to set.
     * @return the ChannelProperties object itself.
     */
    public ChannelProperties withCredentials(Map<String, String> credentials) {
        this.credentials = credentials;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (channelType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property channelType in model ChannelProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ChannelProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("channelType", this.channelType);
        jsonWriter.writeArrayField("channelFunctions", this.channelFunctions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("credentials", this.credentials, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChannelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChannelProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChannelProperties.
     */
    public static ChannelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChannelProperties deserializedChannelProperties = new ChannelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("channelType".equals(fieldName)) {
                    deserializedChannelProperties.channelType = reader.getString();
                } else if ("channelFunctions".equals(fieldName)) {
                    List<String> channelFunctions = reader.readArray(reader1 -> reader1.getString());
                    deserializedChannelProperties.channelFunctions = channelFunctions;
                } else if ("credentials".equals(fieldName)) {
                    Map<String, String> credentials = reader.readMap(reader1 -> reader1.getString());
                    deserializedChannelProperties.credentials = credentials;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChannelProperties;
        });
    }
}
