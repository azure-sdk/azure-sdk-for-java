// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.engagementfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.engagementfabric.models.ProxyOnlyResource;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The EngagementFabric channel.
 */
@Fluent
public final class ChannelInner extends ProxyOnlyResource {
    /*
     * The properties of the channel
     */
    private ChannelProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ChannelInner class.
     */
    public ChannelInner() {
    }

    /**
     * Get the innerProperties property: The properties of the channel.
     * 
     * @return the innerProperties value.
     */
    private ChannelProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the channelType property: The channel type.
     * 
     * @return the channelType value.
     */
    public String channelType() {
        return this.innerProperties() == null ? null : this.innerProperties().channelType();
    }

    /**
     * Set the channelType property: The channel type.
     * 
     * @param channelType the channelType value to set.
     * @return the ChannelInner object itself.
     */
    public ChannelInner withChannelType(String channelType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ChannelProperties();
        }
        this.innerProperties().withChannelType(channelType);
        return this;
    }

    /**
     * Get the channelFunctions property: The functions to be enabled for the channel.
     * 
     * @return the channelFunctions value.
     */
    public List<String> channelFunctions() {
        return this.innerProperties() == null ? null : this.innerProperties().channelFunctions();
    }

    /**
     * Set the channelFunctions property: The functions to be enabled for the channel.
     * 
     * @param channelFunctions the channelFunctions value to set.
     * @return the ChannelInner object itself.
     */
    public ChannelInner withChannelFunctions(List<String> channelFunctions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ChannelProperties();
        }
        this.innerProperties().withChannelFunctions(channelFunctions);
        return this;
    }

    /**
     * Get the credentials property: The channel credentials.
     * 
     * @return the credentials value.
     */
    public Map<String, String> credentials() {
        return this.innerProperties() == null ? null : this.innerProperties().credentials();
    }

    /**
     * Set the credentials property: The channel credentials.
     * 
     * @param credentials the credentials value to set.
     * @return the ChannelInner object itself.
     */
    public ChannelInner withCredentials(Map<String, String> credentials) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ChannelProperties();
        }
        this.innerProperties().withCredentials(credentials);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChannelInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChannelInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChannelInner.
     */
    public static ChannelInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChannelInner deserializedChannelInner = new ChannelInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedChannelInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedChannelInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedChannelInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedChannelInner.innerProperties = ChannelProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChannelInner;
        });
    }
}
