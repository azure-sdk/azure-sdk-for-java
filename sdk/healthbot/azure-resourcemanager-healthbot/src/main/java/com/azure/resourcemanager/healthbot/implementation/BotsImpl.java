// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthbot.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.healthbot.fluent.BotsClient;
import com.azure.resourcemanager.healthbot.fluent.models.HealthBotInner;
import com.azure.resourcemanager.healthbot.fluent.models.HealthBotKeyInner;
import com.azure.resourcemanager.healthbot.fluent.models.HealthBotKeysResponseInner;
import com.azure.resourcemanager.healthbot.models.Bots;
import com.azure.resourcemanager.healthbot.models.HealthBot;
import com.azure.resourcemanager.healthbot.models.HealthBotKey;
import com.azure.resourcemanager.healthbot.models.HealthBotKeysResponse;

public final class BotsImpl implements Bots {
    private static final ClientLogger LOGGER = new ClientLogger(BotsImpl.class);

    private final BotsClient innerClient;

    private final com.azure.resourcemanager.healthbot.HealthbotManager serviceManager;

    public BotsImpl(BotsClient innerClient, com.azure.resourcemanager.healthbot.HealthbotManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<HealthBotKeysResponse> listSecretsWithResponse(String resourceGroupName, String botName,
        Context context) {
        Response<HealthBotKeysResponseInner> inner
            = this.serviceClient().listSecretsWithResponse(resourceGroupName, botName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new HealthBotKeysResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HealthBotKeysResponse listSecrets(String resourceGroupName, String botName) {
        HealthBotKeysResponseInner inner = this.serviceClient().listSecrets(resourceGroupName, botName);
        if (inner != null) {
            return new HealthBotKeysResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HealthBotKey> regenerateApiJwtSecretWithResponse(String resourceGroupName, String botName,
        Context context) {
        Response<HealthBotKeyInner> inner
            = this.serviceClient().regenerateApiJwtSecretWithResponse(resourceGroupName, botName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new HealthBotKeyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HealthBotKey regenerateApiJwtSecret(String resourceGroupName, String botName) {
        HealthBotKeyInner inner = this.serviceClient().regenerateApiJwtSecret(resourceGroupName, botName);
        if (inner != null) {
            return new HealthBotKeyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<HealthBot> listByResourceGroup(String resourceGroupName) {
        PagedIterable<HealthBotInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new HealthBotImpl(inner1, this.manager()));
    }

    public PagedIterable<HealthBot> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<HealthBotInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new HealthBotImpl(inner1, this.manager()));
    }

    public PagedIterable<HealthBot> list() {
        PagedIterable<HealthBotInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new HealthBotImpl(inner1, this.manager()));
    }

    public PagedIterable<HealthBot> list(Context context) {
        PagedIterable<HealthBotInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new HealthBotImpl(inner1, this.manager()));
    }

    private BotsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.healthbot.HealthbotManager manager() {
        return this.serviceManager;
    }
}
