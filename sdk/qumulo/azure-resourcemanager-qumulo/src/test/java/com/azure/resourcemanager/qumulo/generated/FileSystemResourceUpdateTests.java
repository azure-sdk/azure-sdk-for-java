// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.qumulo.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.qumulo.models.FileSystemResourceUpdate;
import com.azure.resourcemanager.qumulo.models.FileSystemResourceUpdateProperties;
import com.azure.resourcemanager.qumulo.models.ManagedServiceIdentity;
import com.azure.resourcemanager.qumulo.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.qumulo.models.MarketplaceDetails;
import com.azure.resourcemanager.qumulo.models.UserAssignedIdentity;
import com.azure.resourcemanager.qumulo.models.UserDetails;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FileSystemResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FileSystemResourceUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"asvm\",\"tenantId\":\"jqul\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"vkocrcjdkwtn\":{\"principalId\":\"nbybkzgcwrwcl\",\"clientId\":\"wrljdouskc\"},\"eebvmgxsab\":{\"principalId\":\"bnjbiksqrglssain\",\"clientId\":\"jwnzlljfmp\"},\"d\":{\"principalId\":\"qduujitcjczdz\",\"clientId\":\"ndhkrw\"}}},\"tags\":{\"usnhutje\":\"dsbdkvwrwjf\"},\"properties\":{\"marketplaceDetails\":{\"marketplaceSubscriptionId\":\"ldhugjzzdatqxh\",\"planId\":\"cdgea\",\"offerId\":\"lgphu\",\"publisherId\":\"cndvkaozwyiftyhx\",\"termUnit\":\"rokft\",\"marketplaceSubscriptionStatus\":\"Suspended\"},\"userDetails\":{\"email\":\"niwpwcukj\"},\"delegatedSubnetId\":\"giawx\"}}")
            .toObject(FileSystemResourceUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("dsbdkvwrwjf", model.tags().get("usnhutje"));
        Assertions.assertEquals("ldhugjzzdatqxh", model.properties().marketplaceDetails().marketplaceSubscriptionId());
        Assertions.assertEquals("cdgea", model.properties().marketplaceDetails().planId());
        Assertions.assertEquals("lgphu", model.properties().marketplaceDetails().offerId());
        Assertions.assertEquals("cndvkaozwyiftyhx", model.properties().marketplaceDetails().publisherId());
        Assertions.assertEquals("rokft", model.properties().marketplaceDetails().termUnit());
        Assertions.assertEquals("niwpwcukj", model.properties().userDetails().email());
        Assertions.assertEquals("giawx", model.properties().delegatedSubnetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FileSystemResourceUpdate model = new FileSystemResourceUpdate()
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("vkocrcjdkwtn", new UserAssignedIdentity(), "eebvmgxsab",
                        new UserAssignedIdentity(), "d", new UserAssignedIdentity())))
            .withTags(mapOf("usnhutje", "dsbdkvwrwjf"))
            .withProperties(new FileSystemResourceUpdateProperties()
                .withMarketplaceDetails(new MarketplaceDetails().withMarketplaceSubscriptionId("ldhugjzzdatqxh")
                    .withPlanId("cdgea")
                    .withOfferId("lgphu")
                    .withPublisherId("cndvkaozwyiftyhx")
                    .withTermUnit("rokft"))
                .withUserDetails(new UserDetails().withEmail("niwpwcukj"))
                .withDelegatedSubnetId("giawx"));
        model = BinaryData.fromObject(model).toObject(FileSystemResourceUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("dsbdkvwrwjf", model.tags().get("usnhutje"));
        Assertions.assertEquals("ldhugjzzdatqxh", model.properties().marketplaceDetails().marketplaceSubscriptionId());
        Assertions.assertEquals("cdgea", model.properties().marketplaceDetails().planId());
        Assertions.assertEquals("lgphu", model.properties().marketplaceDetails().offerId());
        Assertions.assertEquals("cndvkaozwyiftyhx", model.properties().marketplaceDetails().publisherId());
        Assertions.assertEquals("rokft", model.properties().marketplaceDetails().termUnit());
        Assertions.assertEquals("niwpwcukj", model.properties().userDetails().email());
        Assertions.assertEquals("giawx", model.properties().delegatedSubnetId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
