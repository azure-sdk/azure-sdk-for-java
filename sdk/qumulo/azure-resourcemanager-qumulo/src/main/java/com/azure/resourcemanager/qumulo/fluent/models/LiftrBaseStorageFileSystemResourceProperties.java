// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.qumulo.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.qumulo.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.qumulo.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.qumulo.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Properties specific to the Qumulo File System resource.
 */
@Fluent
public final class LiftrBaseStorageFileSystemResourceProperties
    implements JsonSerializable<LiftrBaseStorageFileSystemResourceProperties> {
    /*
     * Marketplace details
     */
    private LiftrBaseMarketplaceDetails marketplaceDetails;

    /*
     * Provisioning State of the resource
     */
    private ProvisioningState provisioningState;

    /*
     * Storage Sku
     */
    private String storageSku;

    /*
     * User Details
     */
    private LiftrBaseUserDetails userDetails;

    /*
     * Delegated subnet id for Vnet injection
     */
    private String delegatedSubnetId;

    /*
     * File system Id of the resource
     */
    private String clusterLoginUrl;

    /*
     * Private IPs of the resource
     */
    private List<String> privateIPs;

    /*
     * Initial administrator password of the resource
     */
    private String adminPassword;

    /*
     * Availability zone
     */
    private String availabilityZone;

    /**
     * Creates an instance of LiftrBaseStorageFileSystemResourceProperties class.
     */
    public LiftrBaseStorageFileSystemResourceProperties() {
    }

    /**
     * Get the marketplaceDetails property: Marketplace details.
     * 
     * @return the marketplaceDetails value.
     */
    public LiftrBaseMarketplaceDetails marketplaceDetails() {
        return this.marketplaceDetails;
    }

    /**
     * Set the marketplaceDetails property: Marketplace details.
     * 
     * @param marketplaceDetails the marketplaceDetails value to set.
     * @return the LiftrBaseStorageFileSystemResourceProperties object itself.
     */
    public LiftrBaseStorageFileSystemResourceProperties
        withMarketplaceDetails(LiftrBaseMarketplaceDetails marketplaceDetails) {
        this.marketplaceDetails = marketplaceDetails;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the storageSku property: Storage Sku.
     * 
     * @return the storageSku value.
     */
    public String storageSku() {
        return this.storageSku;
    }

    /**
     * Set the storageSku property: Storage Sku.
     * 
     * @param storageSku the storageSku value to set.
     * @return the LiftrBaseStorageFileSystemResourceProperties object itself.
     */
    public LiftrBaseStorageFileSystemResourceProperties withStorageSku(String storageSku) {
        this.storageSku = storageSku;
        return this;
    }

    /**
     * Get the userDetails property: User Details.
     * 
     * @return the userDetails value.
     */
    public LiftrBaseUserDetails userDetails() {
        return this.userDetails;
    }

    /**
     * Set the userDetails property: User Details.
     * 
     * @param userDetails the userDetails value to set.
     * @return the LiftrBaseStorageFileSystemResourceProperties object itself.
     */
    public LiftrBaseStorageFileSystemResourceProperties withUserDetails(LiftrBaseUserDetails userDetails) {
        this.userDetails = userDetails;
        return this;
    }

    /**
     * Get the delegatedSubnetId property: Delegated subnet id for Vnet injection.
     * 
     * @return the delegatedSubnetId value.
     */
    public String delegatedSubnetId() {
        return this.delegatedSubnetId;
    }

    /**
     * Set the delegatedSubnetId property: Delegated subnet id for Vnet injection.
     * 
     * @param delegatedSubnetId the delegatedSubnetId value to set.
     * @return the LiftrBaseStorageFileSystemResourceProperties object itself.
     */
    public LiftrBaseStorageFileSystemResourceProperties withDelegatedSubnetId(String delegatedSubnetId) {
        this.delegatedSubnetId = delegatedSubnetId;
        return this;
    }

    /**
     * Get the clusterLoginUrl property: File system Id of the resource.
     * 
     * @return the clusterLoginUrl value.
     */
    public String clusterLoginUrl() {
        return this.clusterLoginUrl;
    }

    /**
     * Set the clusterLoginUrl property: File system Id of the resource.
     * 
     * @param clusterLoginUrl the clusterLoginUrl value to set.
     * @return the LiftrBaseStorageFileSystemResourceProperties object itself.
     */
    public LiftrBaseStorageFileSystemResourceProperties withClusterLoginUrl(String clusterLoginUrl) {
        this.clusterLoginUrl = clusterLoginUrl;
        return this;
    }

    /**
     * Get the privateIPs property: Private IPs of the resource.
     * 
     * @return the privateIPs value.
     */
    public List<String> privateIPs() {
        return this.privateIPs;
    }

    /**
     * Set the privateIPs property: Private IPs of the resource.
     * 
     * @param privateIPs the privateIPs value to set.
     * @return the LiftrBaseStorageFileSystemResourceProperties object itself.
     */
    public LiftrBaseStorageFileSystemResourceProperties withPrivateIPs(List<String> privateIPs) {
        this.privateIPs = privateIPs;
        return this;
    }

    /**
     * Get the adminPassword property: Initial administrator password of the resource.
     * 
     * @return the adminPassword value.
     */
    public String adminPassword() {
        return this.adminPassword;
    }

    /**
     * Set the adminPassword property: Initial administrator password of the resource.
     * 
     * @param adminPassword the adminPassword value to set.
     * @return the LiftrBaseStorageFileSystemResourceProperties object itself.
     */
    public LiftrBaseStorageFileSystemResourceProperties withAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
        return this;
    }

    /**
     * Get the availabilityZone property: Availability zone.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: Availability zone.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the LiftrBaseStorageFileSystemResourceProperties object itself.
     */
    public LiftrBaseStorageFileSystemResourceProperties withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (marketplaceDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property marketplaceDetails in model LiftrBaseStorageFileSystemResourceProperties"));
        } else {
            marketplaceDetails().validate();
        }
        if (storageSku() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageSku in model LiftrBaseStorageFileSystemResourceProperties"));
        }
        if (userDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property userDetails in model LiftrBaseStorageFileSystemResourceProperties"));
        } else {
            userDetails().validate();
        }
        if (delegatedSubnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property delegatedSubnetId in model LiftrBaseStorageFileSystemResourceProperties"));
        }
        if (adminPassword() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property adminPassword in model LiftrBaseStorageFileSystemResourceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LiftrBaseStorageFileSystemResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("marketplaceDetails", this.marketplaceDetails);
        jsonWriter.writeStringField("storageSku", this.storageSku);
        jsonWriter.writeJsonField("userDetails", this.userDetails);
        jsonWriter.writeStringField("delegatedSubnetId", this.delegatedSubnetId);
        jsonWriter.writeStringField("adminPassword", this.adminPassword);
        jsonWriter.writeStringField("clusterLoginUrl", this.clusterLoginUrl);
        jsonWriter.writeArrayField("privateIPs", this.privateIPs, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LiftrBaseStorageFileSystemResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LiftrBaseStorageFileSystemResourceProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LiftrBaseStorageFileSystemResourceProperties.
     */
    public static LiftrBaseStorageFileSystemResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LiftrBaseStorageFileSystemResourceProperties deserializedLiftrBaseStorageFileSystemResourceProperties
                = new LiftrBaseStorageFileSystemResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("marketplaceDetails".equals(fieldName)) {
                    deserializedLiftrBaseStorageFileSystemResourceProperties.marketplaceDetails
                        = LiftrBaseMarketplaceDetails.fromJson(reader);
                } else if ("storageSku".equals(fieldName)) {
                    deserializedLiftrBaseStorageFileSystemResourceProperties.storageSku = reader.getString();
                } else if ("userDetails".equals(fieldName)) {
                    deserializedLiftrBaseStorageFileSystemResourceProperties.userDetails
                        = LiftrBaseUserDetails.fromJson(reader);
                } else if ("delegatedSubnetId".equals(fieldName)) {
                    deserializedLiftrBaseStorageFileSystemResourceProperties.delegatedSubnetId = reader.getString();
                } else if ("adminPassword".equals(fieldName)) {
                    deserializedLiftrBaseStorageFileSystemResourceProperties.adminPassword = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLiftrBaseStorageFileSystemResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("clusterLoginUrl".equals(fieldName)) {
                    deserializedLiftrBaseStorageFileSystemResourceProperties.clusterLoginUrl = reader.getString();
                } else if ("privateIPs".equals(fieldName)) {
                    List<String> privateIPs = reader.readArray(reader1 -> reader1.getString());
                    deserializedLiftrBaseStorageFileSystemResourceProperties.privateIPs = privateIPs;
                } else if ("availabilityZone".equals(fieldName)) {
                    deserializedLiftrBaseStorageFileSystemResourceProperties.availabilityZone = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLiftrBaseStorageFileSystemResourceProperties;
        });
    }
}
