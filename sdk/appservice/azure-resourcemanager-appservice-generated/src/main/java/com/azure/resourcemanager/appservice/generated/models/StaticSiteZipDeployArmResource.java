// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.appservice.generated.fluent.models.ZipDeployStaticSite;
import java.io.IOException;

/**
 * Static site zip deploy ARM resource.
 */
@Fluent
public final class StaticSiteZipDeployArmResource extends ProxyOnlyResource {
    /*
     * Core resource properties
     */
    private ZipDeployStaticSite innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of StaticSiteZipDeployArmResource class.
     */
    public StaticSiteZipDeployArmResource() {
    }

    /**
     * Get the innerProperties property: Core resource properties.
     * 
     * @return the innerProperties value.
     */
    private ZipDeployStaticSite innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StaticSiteZipDeployArmResource withKind(String kind) {
        super.withKind(kind);
        return this;
    }

    /**
     * Get the contentUrl property: URL for the zipped content. Contains app, api and/or data-api folders.
     * 
     * @return the contentUrl value.
     */
    public String contentUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().contentUrl();
    }

    /**
     * Set the contentUrl property: URL for the zipped content. Contains app, api and/or data-api folders.
     * 
     * @param contentUrl the contentUrl value to set.
     * @return the StaticSiteZipDeployArmResource object itself.
     */
    public StaticSiteZipDeployArmResource withContentUrl(String contentUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ZipDeployStaticSite();
        }
        this.innerProperties().withContentUrl(contentUrl);
        return this;
    }

    /**
     * Get the storageAccountReferenceIdentity property: UserAssigned or SystemAssigned MI.
     * 
     * @return the storageAccountReferenceIdentity value.
     */
    public String storageAccountReferenceIdentity() {
        return this.innerProperties() == null ? null : this.innerProperties().storageAccountReferenceIdentity();
    }

    /**
     * Set the storageAccountReferenceIdentity property: UserAssigned or SystemAssigned MI.
     * 
     * @param storageAccountReferenceIdentity the storageAccountReferenceIdentity value to set.
     * @return the StaticSiteZipDeployArmResource object itself.
     */
    public StaticSiteZipDeployArmResource withStorageAccountReferenceIdentity(String storageAccountReferenceIdentity) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ZipDeployStaticSite();
        }
        this.innerProperties().withStorageAccountReferenceIdentity(storageAccountReferenceIdentity);
        return this;
    }

    /**
     * Get the storageAccountResourceId property: Resource Id of storage account with artifacts to be deployed.
     * 
     * @return the storageAccountResourceId value.
     */
    public String storageAccountResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().storageAccountResourceId();
    }

    /**
     * Set the storageAccountResourceId property: Resource Id of storage account with artifacts to be deployed.
     * 
     * @param storageAccountResourceId the storageAccountResourceId value to set.
     * @return the StaticSiteZipDeployArmResource object itself.
     */
    public StaticSiteZipDeployArmResource withStorageAccountResourceId(String storageAccountResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ZipDeployStaticSite();
        }
        this.innerProperties().withStorageAccountResourceId(storageAccountResourceId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", kind());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StaticSiteZipDeployArmResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StaticSiteZipDeployArmResource if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StaticSiteZipDeployArmResource.
     */
    public static StaticSiteZipDeployArmResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StaticSiteZipDeployArmResource deserializedStaticSiteZipDeployArmResource
                = new StaticSiteZipDeployArmResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedStaticSiteZipDeployArmResource.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedStaticSiteZipDeployArmResource.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedStaticSiteZipDeployArmResource.type = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedStaticSiteZipDeployArmResource.withKind(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedStaticSiteZipDeployArmResource.innerProperties = ZipDeployStaticSite.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStaticSiteZipDeployArmResource;
        });
    }
}
