// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SwiftVirtualNetwork resource specific properties.
 */
@Fluent
public final class SwiftVirtualNetworkProperties implements JsonSerializable<SwiftVirtualNetworkProperties> {
    /*
     * The Virtual Network subnet's Azure resource ID
     */
    private String subnetResourceId;

    /*
     * Boolean flag indicating whether Swift integration is supported
     */
    private Boolean swiftSupported;

    /*
     * IP allocation for a Swift Subnet
     */
    private SwiftVirtualNetworkPropertiesSubnetIpAllocation subnetIpAllocation;

    /*
     * Swift Connection allocations for an App Service Plan
     */
    private SwiftVirtualNetworkPropertiesVnetConnectionAllocation vnetConnectionAllocation;

    /*
     * Resources (sites and serverfarms) allocated to this subnet
     */
    private SwiftVirtualNetworkPropertiesResourceAllocation resourceAllocation;

    /**
     * Creates an instance of SwiftVirtualNetworkProperties class.
     */
    public SwiftVirtualNetworkProperties() {
    }

    /**
     * Get the subnetResourceId property: The Virtual Network subnet's Azure resource ID.
     * 
     * @return the subnetResourceId value.
     */
    public String subnetResourceId() {
        return this.subnetResourceId;
    }

    /**
     * Set the subnetResourceId property: The Virtual Network subnet's Azure resource ID.
     * 
     * @param subnetResourceId the subnetResourceId value to set.
     * @return the SwiftVirtualNetworkProperties object itself.
     */
    public SwiftVirtualNetworkProperties withSubnetResourceId(String subnetResourceId) {
        this.subnetResourceId = subnetResourceId;
        return this;
    }

    /**
     * Get the swiftSupported property: Boolean flag indicating whether Swift integration is supported.
     * 
     * @return the swiftSupported value.
     */
    public Boolean swiftSupported() {
        return this.swiftSupported;
    }

    /**
     * Set the swiftSupported property: Boolean flag indicating whether Swift integration is supported.
     * 
     * @param swiftSupported the swiftSupported value to set.
     * @return the SwiftVirtualNetworkProperties object itself.
     */
    public SwiftVirtualNetworkProperties withSwiftSupported(Boolean swiftSupported) {
        this.swiftSupported = swiftSupported;
        return this;
    }

    /**
     * Get the subnetIpAllocation property: IP allocation for a Swift Subnet.
     * 
     * @return the subnetIpAllocation value.
     */
    public SwiftVirtualNetworkPropertiesSubnetIpAllocation subnetIpAllocation() {
        return this.subnetIpAllocation;
    }

    /**
     * Set the subnetIpAllocation property: IP allocation for a Swift Subnet.
     * 
     * @param subnetIpAllocation the subnetIpAllocation value to set.
     * @return the SwiftVirtualNetworkProperties object itself.
     */
    public SwiftVirtualNetworkProperties
        withSubnetIpAllocation(SwiftVirtualNetworkPropertiesSubnetIpAllocation subnetIpAllocation) {
        this.subnetIpAllocation = subnetIpAllocation;
        return this;
    }

    /**
     * Get the vnetConnectionAllocation property: Swift Connection allocations for an App Service Plan.
     * 
     * @return the vnetConnectionAllocation value.
     */
    public SwiftVirtualNetworkPropertiesVnetConnectionAllocation vnetConnectionAllocation() {
        return this.vnetConnectionAllocation;
    }

    /**
     * Set the vnetConnectionAllocation property: Swift Connection allocations for an App Service Plan.
     * 
     * @param vnetConnectionAllocation the vnetConnectionAllocation value to set.
     * @return the SwiftVirtualNetworkProperties object itself.
     */
    public SwiftVirtualNetworkProperties
        withVnetConnectionAllocation(SwiftVirtualNetworkPropertiesVnetConnectionAllocation vnetConnectionAllocation) {
        this.vnetConnectionAllocation = vnetConnectionAllocation;
        return this;
    }

    /**
     * Get the resourceAllocation property: Resources (sites and serverfarms) allocated to this subnet.
     * 
     * @return the resourceAllocation value.
     */
    public SwiftVirtualNetworkPropertiesResourceAllocation resourceAllocation() {
        return this.resourceAllocation;
    }

    /**
     * Set the resourceAllocation property: Resources (sites and serverfarms) allocated to this subnet.
     * 
     * @param resourceAllocation the resourceAllocation value to set.
     * @return the SwiftVirtualNetworkProperties object itself.
     */
    public SwiftVirtualNetworkProperties
        withResourceAllocation(SwiftVirtualNetworkPropertiesResourceAllocation resourceAllocation) {
        this.resourceAllocation = resourceAllocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetIpAllocation() != null) {
            subnetIpAllocation().validate();
        }
        if (vnetConnectionAllocation() != null) {
            vnetConnectionAllocation().validate();
        }
        if (resourceAllocation() != null) {
            resourceAllocation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetResourceId", this.subnetResourceId);
        jsonWriter.writeBooleanField("swiftSupported", this.swiftSupported);
        jsonWriter.writeJsonField("subnetIpAllocation", this.subnetIpAllocation);
        jsonWriter.writeJsonField("vnetConnectionAllocation", this.vnetConnectionAllocation);
        jsonWriter.writeJsonField("resourceAllocation", this.resourceAllocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SwiftVirtualNetworkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SwiftVirtualNetworkProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SwiftVirtualNetworkProperties.
     */
    public static SwiftVirtualNetworkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SwiftVirtualNetworkProperties deserializedSwiftVirtualNetworkProperties
                = new SwiftVirtualNetworkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetResourceId".equals(fieldName)) {
                    deserializedSwiftVirtualNetworkProperties.subnetResourceId = reader.getString();
                } else if ("swiftSupported".equals(fieldName)) {
                    deserializedSwiftVirtualNetworkProperties.swiftSupported
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("subnetIpAllocation".equals(fieldName)) {
                    deserializedSwiftVirtualNetworkProperties.subnetIpAllocation
                        = SwiftVirtualNetworkPropertiesSubnetIpAllocation.fromJson(reader);
                } else if ("vnetConnectionAllocation".equals(fieldName)) {
                    deserializedSwiftVirtualNetworkProperties.vnetConnectionAllocation
                        = SwiftVirtualNetworkPropertiesVnetConnectionAllocation.fromJson(reader);
                } else if ("resourceAllocation".equals(fieldName)) {
                    deserializedSwiftVirtualNetworkProperties.resourceAllocation
                        = SwiftVirtualNetworkPropertiesResourceAllocation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSwiftVirtualNetworkProperties;
        });
    }
}
