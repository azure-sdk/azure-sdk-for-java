// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * IP allocation for a Swift Subnet.
 */
@Fluent
public final class SwiftVirtualNetworkSubnetIpAllocation
    implements JsonSerializable<SwiftVirtualNetworkSubnetIpAllocation> {
    /*
     * The number of IP addresses available in the Swift subnet address space
     */
    private Integer subnetIpAddressesAvailable;

    /*
     * The number of IP addresses that have already been used in the Swift subnet address space
     */
    private Integer subnetIpAddressesUsed;

    /**
     * Creates an instance of SwiftVirtualNetworkSubnetIpAllocation class.
     */
    public SwiftVirtualNetworkSubnetIpAllocation() {
    }

    /**
     * Get the subnetIpAddressesAvailable property: The number of IP addresses available in the Swift subnet address
     * space.
     * 
     * @return the subnetIpAddressesAvailable value.
     */
    public Integer subnetIpAddressesAvailable() {
        return this.subnetIpAddressesAvailable;
    }

    /**
     * Set the subnetIpAddressesAvailable property: The number of IP addresses available in the Swift subnet address
     * space.
     * 
     * @param subnetIpAddressesAvailable the subnetIpAddressesAvailable value to set.
     * @return the SwiftVirtualNetworkSubnetIpAllocation object itself.
     */
    public SwiftVirtualNetworkSubnetIpAllocation withSubnetIpAddressesAvailable(Integer subnetIpAddressesAvailable) {
        this.subnetIpAddressesAvailable = subnetIpAddressesAvailable;
        return this;
    }

    /**
     * Get the subnetIpAddressesUsed property: The number of IP addresses that have already been used in the Swift
     * subnet address space.
     * 
     * @return the subnetIpAddressesUsed value.
     */
    public Integer subnetIpAddressesUsed() {
        return this.subnetIpAddressesUsed;
    }

    /**
     * Set the subnetIpAddressesUsed property: The number of IP addresses that have already been used in the Swift
     * subnet address space.
     * 
     * @param subnetIpAddressesUsed the subnetIpAddressesUsed value to set.
     * @return the SwiftVirtualNetworkSubnetIpAllocation object itself.
     */
    public SwiftVirtualNetworkSubnetIpAllocation withSubnetIpAddressesUsed(Integer subnetIpAddressesUsed) {
        this.subnetIpAddressesUsed = subnetIpAddressesUsed;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("subnetIpAddressesAvailable", this.subnetIpAddressesAvailable);
        jsonWriter.writeNumberField("subnetIpAddressesUsed", this.subnetIpAddressesUsed);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SwiftVirtualNetworkSubnetIpAllocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SwiftVirtualNetworkSubnetIpAllocation if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SwiftVirtualNetworkSubnetIpAllocation.
     */
    public static SwiftVirtualNetworkSubnetIpAllocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SwiftVirtualNetworkSubnetIpAllocation deserializedSwiftVirtualNetworkSubnetIpAllocation
                = new SwiftVirtualNetworkSubnetIpAllocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetIpAddressesAvailable".equals(fieldName)) {
                    deserializedSwiftVirtualNetworkSubnetIpAllocation.subnetIpAddressesAvailable
                        = reader.getNullable(JsonReader::getInt);
                } else if ("subnetIpAddressesUsed".equals(fieldName)) {
                    deserializedSwiftVirtualNetworkSubnetIpAllocation.subnetIpAddressesUsed
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSwiftVirtualNetworkSubnetIpAllocation;
        });
    }
}
