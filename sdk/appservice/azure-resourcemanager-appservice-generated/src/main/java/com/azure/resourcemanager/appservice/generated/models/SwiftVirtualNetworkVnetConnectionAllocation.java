// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Swift Connection allocations for an App Service Plan.
 */
@Fluent
public final class SwiftVirtualNetworkVnetConnectionAllocation
    implements JsonSerializable<SwiftVirtualNetworkVnetConnectionAllocation> {
    /*
     * The number of Swift Connections used for an App Service Plan
     */
    private Integer vnetConnectionsUsed;

    /*
     * The maximum number of Swift Connections available for an App Service Plan
     */
    private Integer vnetConnectionsMax;

    /**
     * Creates an instance of SwiftVirtualNetworkVnetConnectionAllocation class.
     */
    public SwiftVirtualNetworkVnetConnectionAllocation() {
    }

    /**
     * Get the vnetConnectionsUsed property: The number of Swift Connections used for an App Service Plan.
     * 
     * @return the vnetConnectionsUsed value.
     */
    public Integer vnetConnectionsUsed() {
        return this.vnetConnectionsUsed;
    }

    /**
     * Set the vnetConnectionsUsed property: The number of Swift Connections used for an App Service Plan.
     * 
     * @param vnetConnectionsUsed the vnetConnectionsUsed value to set.
     * @return the SwiftVirtualNetworkVnetConnectionAllocation object itself.
     */
    public SwiftVirtualNetworkVnetConnectionAllocation withVnetConnectionsUsed(Integer vnetConnectionsUsed) {
        this.vnetConnectionsUsed = vnetConnectionsUsed;
        return this;
    }

    /**
     * Get the vnetConnectionsMax property: The maximum number of Swift Connections available for an App Service Plan.
     * 
     * @return the vnetConnectionsMax value.
     */
    public Integer vnetConnectionsMax() {
        return this.vnetConnectionsMax;
    }

    /**
     * Set the vnetConnectionsMax property: The maximum number of Swift Connections available for an App Service Plan.
     * 
     * @param vnetConnectionsMax the vnetConnectionsMax value to set.
     * @return the SwiftVirtualNetworkVnetConnectionAllocation object itself.
     */
    public SwiftVirtualNetworkVnetConnectionAllocation withVnetConnectionsMax(Integer vnetConnectionsMax) {
        this.vnetConnectionsMax = vnetConnectionsMax;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("vnetConnectionsUsed", this.vnetConnectionsUsed);
        jsonWriter.writeNumberField("vnetConnectionsMax", this.vnetConnectionsMax);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SwiftVirtualNetworkVnetConnectionAllocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SwiftVirtualNetworkVnetConnectionAllocation if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SwiftVirtualNetworkVnetConnectionAllocation.
     */
    public static SwiftVirtualNetworkVnetConnectionAllocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SwiftVirtualNetworkVnetConnectionAllocation deserializedSwiftVirtualNetworkVnetConnectionAllocation
                = new SwiftVirtualNetworkVnetConnectionAllocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vnetConnectionsUsed".equals(fieldName)) {
                    deserializedSwiftVirtualNetworkVnetConnectionAllocation.vnetConnectionsUsed
                        = reader.getNullable(JsonReader::getInt);
                } else if ("vnetConnectionsMax".equals(fieldName)) {
                    deserializedSwiftVirtualNetworkVnetConnectionAllocation.vnetConnectionsMax
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSwiftVirtualNetworkVnetConnectionAllocation;
        });
    }
}
