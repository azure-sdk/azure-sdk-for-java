// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Virtual Network Integration request content.
 */
@Fluent
public final class VirtualNetworkIntegrationRequest implements JsonSerializable<VirtualNetworkIntegrationRequest> {
    /*
     * The Azure Resource ID of the subnet
     */
    private String subnetResourceId;

    /**
     * Creates an instance of VirtualNetworkIntegrationRequest class.
     */
    public VirtualNetworkIntegrationRequest() {
    }

    /**
     * Get the subnetResourceId property: The Azure Resource ID of the subnet.
     * 
     * @return the subnetResourceId value.
     */
    public String subnetResourceId() {
        return this.subnetResourceId;
    }

    /**
     * Set the subnetResourceId property: The Azure Resource ID of the subnet.
     * 
     * @param subnetResourceId the subnetResourceId value to set.
     * @return the VirtualNetworkIntegrationRequest object itself.
     */
    public VirtualNetworkIntegrationRequest withSubnetResourceId(String subnetResourceId) {
        this.subnetResourceId = subnetResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subnetResourceId in model VirtualNetworkIntegrationRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualNetworkIntegrationRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetResourceId", this.subnetResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualNetworkIntegrationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualNetworkIntegrationRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualNetworkIntegrationRequest.
     */
    public static VirtualNetworkIntegrationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualNetworkIntegrationRequest deserializedVirtualNetworkIntegrationRequest
                = new VirtualNetworkIntegrationRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetResourceId".equals(fieldName)) {
                    deserializedVirtualNetworkIntegrationRequest.subnetResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualNetworkIntegrationRequest;
        });
    }
}
