// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A static site zip deployment.
 */
@Fluent
public final class ZipDeployStaticSite implements JsonSerializable<ZipDeployStaticSite> {
    /*
     * URL for the zipped content. Contains app, api and/or data-api folders.
     */
    private String contentUrl;

    /*
     * UserAssigned or SystemAssigned MI
     */
    private String storageAccountReferenceIdentity;

    /*
     * Resource Id of storage account with artifacts to be deployed.
     */
    private String storageAccountResourceId;

    /**
     * Creates an instance of ZipDeployStaticSite class.
     */
    public ZipDeployStaticSite() {
    }

    /**
     * Get the contentUrl property: URL for the zipped content. Contains app, api and/or data-api folders.
     * 
     * @return the contentUrl value.
     */
    public String contentUrl() {
        return this.contentUrl;
    }

    /**
     * Set the contentUrl property: URL for the zipped content. Contains app, api and/or data-api folders.
     * 
     * @param contentUrl the contentUrl value to set.
     * @return the ZipDeployStaticSite object itself.
     */
    public ZipDeployStaticSite withContentUrl(String contentUrl) {
        this.contentUrl = contentUrl;
        return this;
    }

    /**
     * Get the storageAccountReferenceIdentity property: UserAssigned or SystemAssigned MI.
     * 
     * @return the storageAccountReferenceIdentity value.
     */
    public String storageAccountReferenceIdentity() {
        return this.storageAccountReferenceIdentity;
    }

    /**
     * Set the storageAccountReferenceIdentity property: UserAssigned or SystemAssigned MI.
     * 
     * @param storageAccountReferenceIdentity the storageAccountReferenceIdentity value to set.
     * @return the ZipDeployStaticSite object itself.
     */
    public ZipDeployStaticSite withStorageAccountReferenceIdentity(String storageAccountReferenceIdentity) {
        this.storageAccountReferenceIdentity = storageAccountReferenceIdentity;
        return this;
    }

    /**
     * Get the storageAccountResourceId property: Resource Id of storage account with artifacts to be deployed.
     * 
     * @return the storageAccountResourceId value.
     */
    public String storageAccountResourceId() {
        return this.storageAccountResourceId;
    }

    /**
     * Set the storageAccountResourceId property: Resource Id of storage account with artifacts to be deployed.
     * 
     * @param storageAccountResourceId the storageAccountResourceId value to set.
     * @return the ZipDeployStaticSite object itself.
     */
    public ZipDeployStaticSite withStorageAccountResourceId(String storageAccountResourceId) {
        this.storageAccountResourceId = storageAccountResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("contentUrl", this.contentUrl);
        jsonWriter.writeStringField("storageAccountReferenceIdentity", this.storageAccountReferenceIdentity);
        jsonWriter.writeStringField("storageAccountResourceId", this.storageAccountResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ZipDeployStaticSite from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ZipDeployStaticSite if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ZipDeployStaticSite.
     */
    public static ZipDeployStaticSite fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ZipDeployStaticSite deserializedZipDeployStaticSite = new ZipDeployStaticSite();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contentUrl".equals(fieldName)) {
                    deserializedZipDeployStaticSite.contentUrl = reader.getString();
                } else if ("storageAccountReferenceIdentity".equals(fieldName)) {
                    deserializedZipDeployStaticSite.storageAccountReferenceIdentity = reader.getString();
                } else if ("storageAccountResourceId".equals(fieldName)) {
                    deserializedZipDeployStaticSite.storageAccountResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedZipDeployStaticSite;
        });
    }
}
