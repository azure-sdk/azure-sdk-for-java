// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Resources (sites and serverfarms) allocated to this subnet.
 */
@Fluent
public final class SwiftVirtualNetworkPropertiesResourceAllocation
    implements JsonSerializable<SwiftVirtualNetworkPropertiesResourceAllocation> {
    /*
     * The list of all ServerFarms' Azure resource ID that are using the VNET
     */
    private List<String> connectedServerFarmsId;

    /*
     * The list of all Sites' Azure resource ID that are using the VNET
     */
    private List<String> connectedSitesId;

    /**
     * Creates an instance of SwiftVirtualNetworkPropertiesResourceAllocation class.
     */
    public SwiftVirtualNetworkPropertiesResourceAllocation() {
    }

    /**
     * Get the connectedServerFarmsId property: The list of all ServerFarms' Azure resource ID that are using the VNET.
     * 
     * @return the connectedServerFarmsId value.
     */
    public List<String> connectedServerFarmsId() {
        return this.connectedServerFarmsId;
    }

    /**
     * Set the connectedServerFarmsId property: The list of all ServerFarms' Azure resource ID that are using the VNET.
     * 
     * @param connectedServerFarmsId the connectedServerFarmsId value to set.
     * @return the SwiftVirtualNetworkPropertiesResourceAllocation object itself.
     */
    public SwiftVirtualNetworkPropertiesResourceAllocation
        withConnectedServerFarmsId(List<String> connectedServerFarmsId) {
        this.connectedServerFarmsId = connectedServerFarmsId;
        return this;
    }

    /**
     * Get the connectedSitesId property: The list of all Sites' Azure resource ID that are using the VNET.
     * 
     * @return the connectedSitesId value.
     */
    public List<String> connectedSitesId() {
        return this.connectedSitesId;
    }

    /**
     * Set the connectedSitesId property: The list of all Sites' Azure resource ID that are using the VNET.
     * 
     * @param connectedSitesId the connectedSitesId value to set.
     * @return the SwiftVirtualNetworkPropertiesResourceAllocation object itself.
     */
    public SwiftVirtualNetworkPropertiesResourceAllocation withConnectedSitesId(List<String> connectedSitesId) {
        this.connectedSitesId = connectedSitesId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("connectedServerFarmsId", this.connectedServerFarmsId,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("connectedSitesId", this.connectedSitesId,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SwiftVirtualNetworkPropertiesResourceAllocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SwiftVirtualNetworkPropertiesResourceAllocation if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SwiftVirtualNetworkPropertiesResourceAllocation.
     */
    public static SwiftVirtualNetworkPropertiesResourceAllocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SwiftVirtualNetworkPropertiesResourceAllocation deserializedSwiftVirtualNetworkPropertiesResourceAllocation
                = new SwiftVirtualNetworkPropertiesResourceAllocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectedServerFarmsId".equals(fieldName)) {
                    List<String> connectedServerFarmsId = reader.readArray(reader1 -> reader1.getString());
                    deserializedSwiftVirtualNetworkPropertiesResourceAllocation.connectedServerFarmsId
                        = connectedServerFarmsId;
                } else if ("connectedSitesId".equals(fieldName)) {
                    List<String> connectedSitesId = reader.readArray(reader1 -> reader1.getString());
                    deserializedSwiftVirtualNetworkPropertiesResourceAllocation.connectedSitesId = connectedSitesId;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSwiftVirtualNetworkPropertiesResourceAllocation;
        });
    }
}
