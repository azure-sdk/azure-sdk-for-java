// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** OneDeploy settings defined by user. */
@Fluent
public final class OneDeployRequest extends ProxyOnlyResource {
    /*
     * The Uri where the source artifact can be pulled from
     */
    @JsonProperty(value = "packageUri")
    private String packageUri;

    /*
     * Specifies whether the deployment should be performed asynchronously
     */
    @JsonProperty(value = "async")
    private Boolean async;

    /*
     * The absolute path to deploy the artifact to
     */
    @JsonProperty(value = "path")
    private String path;

    /*
     * Specifies whether to restart the app following the deployment
     */
    @JsonProperty(value = "restart")
    private Boolean restart;

    /*
     * Specifies whether to clean the target deployment directory
     */
    @JsonProperty(value = "clean")
    private Boolean clean;

    /*
     * Disables any language-specific defaults
     */
    @JsonProperty(value = "ignoreStack")
    private Boolean ignoreStack;

    /*
     * The type of the artifact being deployed
     */
    @JsonProperty(value = "trackDeploymentProgress")
    private Boolean trackDeploymentProgress;

    /*
     * Resets Java apps to the default parking page if set to true with no type specified
     */
    @JsonProperty(value = "reset")
    private Boolean reset;

    /** Creates an instance of OneDeployRequest class. */
    public OneDeployRequest() {
    }

    /**
     * Get the packageUri property: The Uri where the source artifact can be pulled from.
     *
     * @return the packageUri value.
     */
    public String packageUri() {
        return this.packageUri;
    }

    /**
     * Set the packageUri property: The Uri where the source artifact can be pulled from.
     *
     * @param packageUri the packageUri value to set.
     * @return the OneDeployRequest object itself.
     */
    public OneDeployRequest withPackageUri(String packageUri) {
        this.packageUri = packageUri;
        return this;
    }

    /**
     * Get the async property: Specifies whether the deployment should be performed asynchronously.
     *
     * @return the async value.
     */
    public Boolean async() {
        return this.async;
    }

    /**
     * Set the async property: Specifies whether the deployment should be performed asynchronously.
     *
     * @param async the async value to set.
     * @return the OneDeployRequest object itself.
     */
    public OneDeployRequest withAsync(Boolean async) {
        this.async = async;
        return this;
    }

    /**
     * Get the path property: The absolute path to deploy the artifact to.
     *
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The absolute path to deploy the artifact to.
     *
     * @param path the path value to set.
     * @return the OneDeployRequest object itself.
     */
    public OneDeployRequest withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the restart property: Specifies whether to restart the app following the deployment.
     *
     * @return the restart value.
     */
    public Boolean restart() {
        return this.restart;
    }

    /**
     * Set the restart property: Specifies whether to restart the app following the deployment.
     *
     * @param restart the restart value to set.
     * @return the OneDeployRequest object itself.
     */
    public OneDeployRequest withRestart(Boolean restart) {
        this.restart = restart;
        return this;
    }

    /**
     * Get the clean property: Specifies whether to clean the target deployment directory.
     *
     * @return the clean value.
     */
    public Boolean clean() {
        return this.clean;
    }

    /**
     * Set the clean property: Specifies whether to clean the target deployment directory.
     *
     * @param clean the clean value to set.
     * @return the OneDeployRequest object itself.
     */
    public OneDeployRequest withClean(Boolean clean) {
        this.clean = clean;
        return this;
    }

    /**
     * Get the ignoreStack property: Disables any language-specific defaults.
     *
     * @return the ignoreStack value.
     */
    public Boolean ignoreStack() {
        return this.ignoreStack;
    }

    /**
     * Set the ignoreStack property: Disables any language-specific defaults.
     *
     * @param ignoreStack the ignoreStack value to set.
     * @return the OneDeployRequest object itself.
     */
    public OneDeployRequest withIgnoreStack(Boolean ignoreStack) {
        this.ignoreStack = ignoreStack;
        return this;
    }

    /**
     * Get the trackDeploymentProgress property: The type of the artifact being deployed.
     *
     * @return the trackDeploymentProgress value.
     */
    public Boolean trackDeploymentProgress() {
        return this.trackDeploymentProgress;
    }

    /**
     * Set the trackDeploymentProgress property: The type of the artifact being deployed.
     *
     * @param trackDeploymentProgress the trackDeploymentProgress value to set.
     * @return the OneDeployRequest object itself.
     */
    public OneDeployRequest withTrackDeploymentProgress(Boolean trackDeploymentProgress) {
        this.trackDeploymentProgress = trackDeploymentProgress;
        return this;
    }

    /**
     * Get the reset property: Resets Java apps to the default parking page if set to true with no type specified.
     *
     * @return the reset value.
     */
    public Boolean reset() {
        return this.reset;
    }

    /**
     * Set the reset property: Resets Java apps to the default parking page if set to true with no type specified.
     *
     * @param reset the reset value to set.
     * @return the OneDeployRequest object itself.
     */
    public OneDeployRequest withReset(Boolean reset) {
        this.reset = reset;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public OneDeployRequest withKind(String kind) {
        super.withKind(kind);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
