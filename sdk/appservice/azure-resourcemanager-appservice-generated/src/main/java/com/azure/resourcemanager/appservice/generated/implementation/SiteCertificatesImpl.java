// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.fluent.SiteCertificatesClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.CertificateInner;
import com.azure.resourcemanager.appservice.generated.models.Certificate;
import com.azure.resourcemanager.appservice.generated.models.CertificatePatchResource;
import com.azure.resourcemanager.appservice.generated.models.SiteCertificates;

public final class SiteCertificatesImpl implements SiteCertificates {
    private static final ClientLogger LOGGER = new ClientLogger(SiteCertificatesImpl.class);

    private final SiteCertificatesClient innerClient;

    private final com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager;

    public SiteCertificatesImpl(SiteCertificatesClient innerClient,
        com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Certificate> list(String resourceGroupName, String siteName) {
        PagedIterable<CertificateInner> inner = this.serviceClient().list(resourceGroupName, siteName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CertificateImpl(inner1, this.manager()));
    }

    public PagedIterable<Certificate> list(String resourceGroupName, String siteName, Context context) {
        PagedIterable<CertificateInner> inner = this.serviceClient().list(resourceGroupName, siteName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CertificateImpl(inner1, this.manager()));
    }

    public Response<Certificate> getWithResponse(String resourceGroupName, String siteName, String name,
        Context context) {
        Response<CertificateInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, siteName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Certificate get(String resourceGroupName, String siteName, String name) {
        CertificateInner inner = this.serviceClient().get(resourceGroupName, siteName, name);
        if (inner != null) {
            return new CertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Certificate> createOrUpdateWithResponse(String resourceGroupName, String siteName, String name,
        CertificateInner certificateEnvelope, Context context) {
        Response<CertificateInner> inner = this.serviceClient()
            .createOrUpdateWithResponse(resourceGroupName, siteName, name, certificateEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Certificate createOrUpdate(String resourceGroupName, String siteName, String name,
        CertificateInner certificateEnvelope) {
        CertificateInner inner
            = this.serviceClient().createOrUpdate(resourceGroupName, siteName, name, certificateEnvelope);
        if (inner != null) {
            return new CertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String siteName, String name, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, siteName, name, context);
    }

    public void delete(String resourceGroupName, String siteName, String name) {
        this.serviceClient().delete(resourceGroupName, siteName, name);
    }

    public Response<Certificate> updateWithResponse(String resourceGroupName, String siteName, String name,
        CertificatePatchResource certificateEnvelope, Context context) {
        Response<CertificateInner> inner
            = this.serviceClient().updateWithResponse(resourceGroupName, siteName, name, certificateEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Certificate update(String resourceGroupName, String siteName, String name,
        CertificatePatchResource certificateEnvelope) {
        CertificateInner inner = this.serviceClient().update(resourceGroupName, siteName, name, certificateEnvelope);
        if (inner != null) {
            return new CertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Certificate> listSlot(String resourceGroupName, String siteName, String slot) {
        PagedIterable<CertificateInner> inner = this.serviceClient().listSlot(resourceGroupName, siteName, slot);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CertificateImpl(inner1, this.manager()));
    }

    public PagedIterable<Certificate> listSlot(String resourceGroupName, String siteName, String slot,
        Context context) {
        PagedIterable<CertificateInner> inner
            = this.serviceClient().listSlot(resourceGroupName, siteName, slot, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CertificateImpl(inner1, this.manager()));
    }

    public Response<Certificate> getSlotWithResponse(String resourceGroupName, String siteName, String slot,
        String name, Context context) {
        Response<CertificateInner> inner
            = this.serviceClient().getSlotWithResponse(resourceGroupName, siteName, slot, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Certificate getSlot(String resourceGroupName, String siteName, String slot, String name) {
        CertificateInner inner = this.serviceClient().getSlot(resourceGroupName, siteName, slot, name);
        if (inner != null) {
            return new CertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Certificate> createOrUpdateSlotWithResponse(String resourceGroupName, String siteName, String name,
        String slot, CertificateInner certificateEnvelope, Context context) {
        Response<CertificateInner> inner = this.serviceClient()
            .createOrUpdateSlotWithResponse(resourceGroupName, siteName, name, slot, certificateEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Certificate createOrUpdateSlot(String resourceGroupName, String siteName, String name, String slot,
        CertificateInner certificateEnvelope) {
        CertificateInner inner
            = this.serviceClient().createOrUpdateSlot(resourceGroupName, siteName, name, slot, certificateEnvelope);
        if (inner != null) {
            return new CertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteSlotWithResponse(String resourceGroupName, String siteName, String slot, String name,
        Context context) {
        return this.serviceClient().deleteSlotWithResponse(resourceGroupName, siteName, slot, name, context);
    }

    public void deleteSlot(String resourceGroupName, String siteName, String slot, String name) {
        this.serviceClient().deleteSlot(resourceGroupName, siteName, slot, name);
    }

    public Response<Certificate> updateSlotWithResponse(String resourceGroupName, String siteName, String name,
        String slot, CertificatePatchResource certificateEnvelope, Context context) {
        Response<CertificateInner> inner = this.serviceClient()
            .updateSlotWithResponse(resourceGroupName, siteName, name, slot, certificateEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Certificate updateSlot(String resourceGroupName, String siteName, String name, String slot,
        CertificatePatchResource certificateEnvelope) {
        CertificateInner inner
            = this.serviceClient().updateSlot(resourceGroupName, siteName, name, slot, certificateEnvelope);
        if (inner != null) {
            return new CertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private SiteCertificatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appservice.generated.AppServiceManager manager() {
        return this.serviceManager;
    }
}
