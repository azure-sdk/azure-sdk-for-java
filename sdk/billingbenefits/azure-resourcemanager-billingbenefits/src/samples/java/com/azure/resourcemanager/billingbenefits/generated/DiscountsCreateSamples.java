// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.billingbenefits.generated;

import com.azure.resourcemanager.billingbenefits.models.ApplyDiscountOn;
import com.azure.resourcemanager.billingbenefits.models.ConditionsItem;
import com.azure.resourcemanager.billingbenefits.models.DiscountAppliedScopeType;
import com.azure.resourcemanager.billingbenefits.models.DiscountCombinationRule;
import com.azure.resourcemanager.billingbenefits.models.DiscountTypeProductFamily;
import com.azure.resourcemanager.billingbenefits.models.DiscountTypeProductSku;
import com.azure.resourcemanager.billingbenefits.models.DiscountTypeProperties;
import com.azure.resourcemanager.billingbenefits.models.EntityTypeAffiliateDiscount;
import com.azure.resourcemanager.billingbenefits.models.EntityTypePrimaryDiscount;
import com.azure.resourcemanager.billingbenefits.models.PriceGuaranteeProperties;
import com.azure.resourcemanager.billingbenefits.models.PricingPolicy;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Discounts Create.
 */
public final class DiscountsCreateSamples {
    /*
     * x-ms-original-file: 2024-11-01-preview/DiscountsCreatePrimaryBackfill.json
     */
    /**
     * Sample code: DiscountsCreatePrimaryBackfill.
     * 
     * @param manager Entry point to BillingBenefitsManager.
     */
    public static void
        discountsCreatePrimaryBackfill(com.azure.resourcemanager.billingbenefits.BillingBenefitsManager manager) {
        manager.discounts()
            .define("testprimarydiscount")
            .withRegion("global")
            .withExistingResourceGroup("testrg")
            .withTags(mapOf("key1", "fakeTokenPlaceholder", "key2", "fakeTokenPlaceholder"))
            .withProperties(new EntityTypePrimaryDiscount().withProductCode("fakeTokenPlaceholder")
                .withStartAt(OffsetDateTime.parse("2023-07-01T00:00:00Z"))
                .withSystemId("13810867107109237")
                .withDisplayName("Virtual Machines D Series")
                .withAppliedScopeType(DiscountAppliedScopeType.BILLING_ACCOUNT)
                .withDiscountTypeProperties(
                    new DiscountTypeProductFamily().withApplyDiscountOn(ApplyDiscountOn.PURCHASE)
                        .withDiscountPercentage(14.0D)
                        .withDiscountCombinationRule(DiscountCombinationRule.BEST_OF)
                        .withConditions(Arrays.asList(new ConditionsItem().withConditionName("Cloud")
                            .withValue(Arrays.asList("US-Sec"))
                            .withType("equalAny")))
                        .withProductFamilyName("Azure"))
                .withEndAt(OffsetDateTime.parse("2024-07-01T23:59:59Z")))
            .create();
    }

    /*
     * x-ms-original-file: 2024-11-01-preview/DiscountsCreatePrimaryWithCustomPrice.json
     */
    /**
     * Sample code: DiscountsCreatePrimaryWithCustomPrice.
     * 
     * @param manager Entry point to BillingBenefitsManager.
     */
    public static void discountsCreatePrimaryWithCustomPrice(
        com.azure.resourcemanager.billingbenefits.BillingBenefitsManager manager) {
        manager.discounts()
            .define("testprimarydiscount")
            .withRegion("global")
            .withExistingResourceGroup("testrg")
            .withTags(mapOf("key1", "fakeTokenPlaceholder", "key2", "fakeTokenPlaceholder"))
            .withProperties(new EntityTypePrimaryDiscount().withProductCode("fakeTokenPlaceholder")
                .withStartAt(OffsetDateTime.parse("2023-07-01T00:00:00Z"))
                .withDisplayName("Virtual Machines D Series")
                .withAppliedScopeType(DiscountAppliedScopeType.BILLING_ACCOUNT)
                .withDiscountTypeProperties(new DiscountTypeProperties().withApplyDiscountOn(ApplyDiscountOn.PURCHASE)
                    .withDiscountPercentage(14.0D)
                    .withDiscountCombinationRule(DiscountCombinationRule.BEST_OF)
                    .withConditions(Arrays.asList(new ConditionsItem().withConditionName("Cloud")
                        .withValue(Arrays.asList("US-Sec"))
                        .withType("equalAny"))))
                .withEndAt(OffsetDateTime.parse("2024-07-01T23:59:59Z")))
            .create();
    }

    /*
     * x-ms-original-file: 2024-11-01-preview/DiscountsCreatePrimaryWithPriceGuarantee.json
     */
    /**
     * Sample code: DiscountsCreatePrimaryWithPriceGuarantee.
     * 
     * @param manager Entry point to BillingBenefitsManager.
     */
    public static void discountsCreatePrimaryWithPriceGuarantee(
        com.azure.resourcemanager.billingbenefits.BillingBenefitsManager manager) {
        manager.discounts()
            .define("testprimarydiscount")
            .withRegion("global")
            .withExistingResourceGroup("testrg")
            .withTags(mapOf("key1", "fakeTokenPlaceholder", "key2", "fakeTokenPlaceholder"))
            .withProperties(new EntityTypePrimaryDiscount().withProductCode("fakeTokenPlaceholder")
                .withStartAt(OffsetDateTime.parse("2023-07-01T00:00:00Z"))
                .withDisplayName("Virtual Machines D Series")
                .withAppliedScopeType(DiscountAppliedScopeType.BILLING_ACCOUNT)
                .withDiscountTypeProperties(new DiscountTypeProductSku().withApplyDiscountOn(ApplyDiscountOn.PURCHASE)
                    .withDiscountCombinationRule(DiscountCombinationRule.BEST_OF)
                    .withPriceGuaranteeProperties(
                        new PriceGuaranteeProperties().withPricingPolicy(PricingPolicy.PROTECTED)
                            .withPriceGuaranteeDate(OffsetDateTime.parse("2024-11-01T00:00:00")))
                    .withConditions(Arrays.asList(new ConditionsItem().withConditionName("Cloud")
                        .withValue(Arrays.asList("US-Sec"))
                        .withType("equalAny")))
                    .withProductFamilyName("Azure")
                    .withProductId("DZH318Z0BQ35")
                    .withSkuId("0001"))
                .withEndAt(OffsetDateTime.parse("2024-07-01T23:59:59Z")))
            .create();
    }

    /*
     * x-ms-original-file: 2024-11-01-preview/DiscountsCreateAffiliate.json
     */
    /**
     * Sample code: DiscountsCreateAffiliate.
     * 
     * @param manager Entry point to BillingBenefitsManager.
     */
    public static void
        discountsCreateAffiliate(com.azure.resourcemanager.billingbenefits.BillingBenefitsManager manager) {
        manager.discounts()
            .define("testaffiliatediscount")
            .withRegion("global")
            .withExistingResourceGroup("testrg")
            .withTags(mapOf("key1", "fakeTokenPlaceholder", "key2", "fakeTokenPlaceholder"))
            .withProperties(new EntityTypeAffiliateDiscount().withProductCode("fakeTokenPlaceholder")
                .withStartAt(OffsetDateTime.parse("2023-07-01T00:00:00Z"))
                .withSystemId("13810867107109237")
                .withDisplayName("Virtual Machines D Series"))
            .create();
    }

    /*
     * x-ms-original-file: 2024-11-01-preview/DiscountsCreatePrimary.json
     */
    /**
     * Sample code: DiscountsCreatePrimary.
     * 
     * @param manager Entry point to BillingBenefitsManager.
     */
    public static void
        discountsCreatePrimary(com.azure.resourcemanager.billingbenefits.BillingBenefitsManager manager) {
        manager.discounts()
            .define("testprimarydiscount")
            .withRegion("global")
            .withExistingResourceGroup("testrg")
            .withTags(mapOf("key1", "fakeTokenPlaceholder", "key2", "fakeTokenPlaceholder"))
            .withProperties(new EntityTypePrimaryDiscount().withProductCode("fakeTokenPlaceholder")
                .withStartAt(OffsetDateTime.parse("2023-07-01T00:00:00Z"))
                .withDisplayName("Virtual Machines D Series")
                .withAppliedScopeType(DiscountAppliedScopeType.BILLING_ACCOUNT)
                .withDiscountTypeProperties(new DiscountTypeProductSku().withApplyDiscountOn(ApplyDiscountOn.PURCHASE)
                    .withDiscountPercentage(14.0D)
                    .withDiscountCombinationRule(DiscountCombinationRule.BEST_OF)
                    .withConditions(Arrays.asList(new ConditionsItem().withConditionName("Cloud")
                        .withValue(Arrays.asList("US-Sec"))
                        .withType("equalAny")))
                    .withProductFamilyName("Azure")
                    .withProductId("DZH318Z0BQ35")
                    .withSkuId("0001"))
                .withEndAt(OffsetDateTime.parse("2024-07-01T23:59:59Z")))
            .create();
    }

    /*
     * x-ms-original-file: 2024-11-01-preview/DiscountsCreatePrimaryWithCustomPriceMultiCurrency.json
     */
    /**
     * Sample code: DiscountsCreatePrimaryWithCustomPriceMultiCurrency.
     * 
     * @param manager Entry point to BillingBenefitsManager.
     */
    public static void discountsCreatePrimaryWithCustomPriceMultiCurrency(
        com.azure.resourcemanager.billingbenefits.BillingBenefitsManager manager) {
        manager.discounts()
            .define("testprimarydiscount")
            .withRegion("global")
            .withExistingResourceGroup("testrg")
            .withTags(mapOf("key1", "fakeTokenPlaceholder", "key2", "fakeTokenPlaceholder"))
            .withProperties(new EntityTypePrimaryDiscount().withProductCode("fakeTokenPlaceholder")
                .withStartAt(OffsetDateTime.parse("2023-07-01T00:00:00Z"))
                .withDisplayName("Virtual Machines D Series")
                .withAppliedScopeType(DiscountAppliedScopeType.BILLING_ACCOUNT)
                .withDiscountTypeProperties(new DiscountTypeProperties().withApplyDiscountOn(ApplyDiscountOn.PURCHASE)
                    .withDiscountPercentage(14.0D)
                    .withDiscountCombinationRule(DiscountCombinationRule.BEST_OF)
                    .withConditions(Arrays.asList(new ConditionsItem().withConditionName("Cloud")
                        .withValue(Arrays.asList("US-Sec"))
                        .withType("equalAny"))))
                .withEndAt(OffsetDateTime.parse("2024-07-01T23:59:59Z")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
