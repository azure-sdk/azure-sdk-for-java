// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.billingbenefits.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billingbenefits.BillingBenefitsManager;
import com.azure.resourcemanager.billingbenefits.models.AppliedScopeType;
import com.azure.resourcemanager.billingbenefits.models.BillingPlan;
import com.azure.resourcemanager.billingbenefits.models.InstanceFlexibility;
import com.azure.resourcemanager.billingbenefits.models.ReservationOrderAliasResponse;
import com.azure.resourcemanager.billingbenefits.models.ReservedResourceType;
import com.azure.resourcemanager.billingbenefits.models.Term;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ReservationOrderAliasResponsesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"vljxywsu\"},\"location\":\"yrs\",\"properties\":{\"displayName\":\"ytgadgvraeaene\",\"reservationOrderId\":\"zar\",\"provisioningState\":\"Failed\",\"billingScopeId\":\"uu\",\"term\":\"P5Y\",\"billingPlan\":\"P1M\",\"appliedScopeType\":\"Shared\",\"appliedScopeProperties\":{\"tenantId\":\"iipfpubj\",\"managementGroupId\":\"wwiftohqkvpuv\",\"subscriptionId\":\"gplsaknynf\",\"resourceGroupId\":\"n\",\"displayName\":\"ph\"},\"quantity\":1676380944,\"renew\":true,\"reservedResourceType\":\"CosmosDb\",\"reviewDateTime\":\"2021-03-08T03:06:08Z\",\"reservedResourceProperties\":{\"instanceFlexibility\":\"On\"}},\"id\":\"rz\",\"name\":\"hleosjsw\",\"type\":\"rmslyzrpzbchckqq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingBenefitsManager manager = BillingBenefitsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ReservationOrderAliasResponse response = manager.reservationOrderAliasResponses()
            .getWithResponse("kkpwdreqnovvq", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("vljxywsu", response.sku().name());
        Assertions.assertEquals("yrs", response.location());
        Assertions.assertEquals("ytgadgvraeaene", response.displayName());
        Assertions.assertEquals("uu", response.billingScopeId());
        Assertions.assertEquals(Term.P5Y, response.term());
        Assertions.assertEquals(BillingPlan.P1M, response.billingPlan());
        Assertions.assertEquals(AppliedScopeType.SHARED, response.appliedScopeType());
        Assertions.assertEquals("iipfpubj", response.appliedScopeProperties().tenantId());
        Assertions.assertEquals("wwiftohqkvpuv", response.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("gplsaknynf", response.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("n", response.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("ph", response.appliedScopeProperties().displayName());
        Assertions.assertEquals(1676380944, response.quantity());
        Assertions.assertTrue(response.renew());
        Assertions.assertEquals(ReservedResourceType.COSMOS_DB, response.reservedResourceType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-08T03:06:08Z"), response.reviewDateTime());
        Assertions.assertEquals(InstanceFlexibility.ON, response.reservedResourceProperties().instanceFlexibility());
    }
}
