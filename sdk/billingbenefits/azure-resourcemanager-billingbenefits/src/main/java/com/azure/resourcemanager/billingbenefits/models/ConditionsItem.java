// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.billingbenefits.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Condition for a discount.
 */
@Fluent
public final class ConditionsItem implements JsonSerializable<ConditionsItem> {
    /*
     * The conditionName property.
     */
    private String conditionName;

    /*
     * These items are open-ended strings.
     */
    private List<String> value;

    /*
     * The type property.
     */
    private String type;

    /**
     * Creates an instance of ConditionsItem class.
     */
    public ConditionsItem() {
    }

    /**
     * Get the conditionName property: The conditionName property.
     * 
     * @return the conditionName value.
     */
    public String conditionName() {
        return this.conditionName;
    }

    /**
     * Set the conditionName property: The conditionName property.
     * 
     * @param conditionName the conditionName value to set.
     * @return the ConditionsItem object itself.
     */
    public ConditionsItem withConditionName(String conditionName) {
        this.conditionName = conditionName;
        return this;
    }

    /**
     * Get the value property: These items are open-ended strings.
     * 
     * @return the value value.
     */
    public List<String> value() {
        return this.value;
    }

    /**
     * Set the value property: These items are open-ended strings.
     * 
     * @param value the value value to set.
     * @return the ConditionsItem object itself.
     */
    public ConditionsItem withValue(List<String> value) {
        this.value = value;
        return this;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type property.
     * 
     * @param type the type value to set.
     * @return the ConditionsItem object itself.
     */
    public ConditionsItem withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("conditionName", this.conditionName);
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConditionsItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConditionsItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConditionsItem.
     */
    public static ConditionsItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConditionsItem deserializedConditionsItem = new ConditionsItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("conditionName".equals(fieldName)) {
                    deserializedConditionsItem.conditionName = reader.getString();
                } else if ("value".equals(fieldName)) {
                    List<String> value = reader.readArray(reader1 -> reader1.getString());
                    deserializedConditionsItem.value = value;
                } else if ("type".equals(fieldName)) {
                    deserializedConditionsItem.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConditionsItem;
        });
    }
}
