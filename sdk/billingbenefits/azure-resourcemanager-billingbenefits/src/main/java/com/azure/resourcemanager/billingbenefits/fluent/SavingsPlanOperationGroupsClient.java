// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.billingbenefits.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.billingbenefits.fluent.models.SavingsPlanModelInner;
import com.azure.resourcemanager.billingbenefits.fluent.models.SavingsPlanValidateResponseInner;
import com.azure.resourcemanager.billingbenefits.models.SavingsPlanPurchaseValidateRequest;

/**
 * An instance of this class provides access to all the operations defined in SavingsPlanOperationGroupsClient.
 */
public interface SavingsPlanOperationGroupsClient {
    /**
     * List savings plans.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SavingsPlanModelInner> listAll();

    /**
     * List savings plans.
     * 
     * @param filter May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does
     * not currently support 'ne', 'gt', 'le', 'ge', or 'not'. Reservation properties include sku/name,
     * properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate,
     * provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType,
     * userFriendlyRenewState}.
     * @param orderby May be used to sort order by reservation properties.
     * @param refreshSummary To indicate whether to refresh the roll up counts of the savings plans group by
     * provisioning states.
     * @param skiptoken The number of savings plans to skip from the list before returning results.
     * @param selectedState The selected provisioning state.
     * @param take To number of savings plans to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SavingsPlanModelInner> listAll(String filter, String orderby, String refreshSummary, Double skiptoken,
        String selectedState, Double take, Context context);

    /**
     * Validate savings plan purchase.
     * 
     * @param body The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SavingsPlanValidateResponseInner> validatePurchaseWithResponse(SavingsPlanPurchaseValidateRequest body,
        Context context);

    /**
     * Validate savings plan purchase.
     * 
     * @param body The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SavingsPlanValidateResponseInner validatePurchase(SavingsPlanPurchaseValidateRequest body);
}
