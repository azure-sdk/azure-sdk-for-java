// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Entity type for primary discounts.
 */
@Fluent
public final class EntityTypePrimaryDiscount extends DiscountProperties {
    /*
     * This defines whether the entity being created is primary or affiliate. Supported values: primary, affiliate.
     * Validation: Required, must match one of the 2 values.
     */
    private DiscountEntityType entityType = DiscountEntityType.PRIMARY;

    /*
     * This defines the conditions for a given discount type.
     */
    private DiscountTypeProperties discountTypeProperties;

    /*
     * End date of the discount. No duration will be supported. Allowed value is any date greater than or equal to
     * startDate.
     */
    private OffsetDateTime endAt;

    /**
     * Creates an instance of EntityTypePrimaryDiscount class.
     */
    public EntityTypePrimaryDiscount() {
    }

    /**
     * Get the entityType property: This defines whether the entity being created is primary or affiliate. Supported
     * values: primary, affiliate. Validation: Required, must match one of the 2 values.
     * 
     * @return the entityType value.
     */
    @Override
    public DiscountEntityType entityType() {
        return this.entityType;
    }

    /**
     * Get the discountTypeProperties property: This defines the conditions for a given discount type.
     * 
     * @return the discountTypeProperties value.
     */
    public DiscountTypeProperties discountTypeProperties() {
        return this.discountTypeProperties;
    }

    /**
     * Set the discountTypeProperties property: This defines the conditions for a given discount type.
     * 
     * @param discountTypeProperties the discountTypeProperties value to set.
     * @return the EntityTypePrimaryDiscount object itself.
     */
    public EntityTypePrimaryDiscount withDiscountTypeProperties(DiscountTypeProperties discountTypeProperties) {
        this.discountTypeProperties = discountTypeProperties;
        return this;
    }

    /**
     * Get the endAt property: End date of the discount. No duration will be supported. Allowed value is any date
     * greater than or equal to startDate.
     * 
     * @return the endAt value.
     */
    public OffsetDateTime endAt() {
        return this.endAt;
    }

    /**
     * Set the endAt property: End date of the discount. No duration will be supported. Allowed value is any date
     * greater than or equal to startDate.
     * 
     * @param endAt the endAt value to set.
     * @return the EntityTypePrimaryDiscount object itself.
     */
    public EntityTypePrimaryDiscount withEndAt(OffsetDateTime endAt) {
        this.endAt = endAt;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityTypePrimaryDiscount withProductCode(String productCode) {
        super.withProductCode(productCode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityTypePrimaryDiscount withStartAt(OffsetDateTime startAt) {
        super.withStartAt(startAt);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityTypePrimaryDiscount withSystemId(String systemId) {
        super.withSystemId(systemId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityTypePrimaryDiscount withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityTypePrimaryDiscount withAppliedScopeType(DiscountAppliedScopeType appliedScopeType) {
        super.withAppliedScopeType(appliedScopeType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (discountTypeProperties() != null) {
            discountTypeProperties().validate();
        }
        if (endAt() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property endAt in model EntityTypePrimaryDiscount"));
        }
        if (productCode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property productCode in model EntityTypePrimaryDiscount"));
        }
        if (startAt() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property startAt in model EntityTypePrimaryDiscount"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EntityTypePrimaryDiscount.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("productCode", productCode());
        jsonWriter.writeStringField("startAt",
            startAt() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(startAt()));
        jsonWriter.writeStringField("systemId", systemId());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("appliedScopeType",
            appliedScopeType() == null ? null : appliedScopeType().toString());
        jsonWriter.writeStringField("endAt",
            this.endAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endAt));
        jsonWriter.writeStringField("entityType", this.entityType == null ? null : this.entityType.toString());
        jsonWriter.writeJsonField("discountTypeProperties", this.discountTypeProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntityTypePrimaryDiscount from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntityTypePrimaryDiscount if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EntityTypePrimaryDiscount.
     */
    public static EntityTypePrimaryDiscount fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntityTypePrimaryDiscount deserializedEntityTypePrimaryDiscount = new EntityTypePrimaryDiscount();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("productCode".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.withProductCode(reader.getString());
                } else if ("startAt".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.withStartAt(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("systemId".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.withSystemId(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount
                        .withProvisioningState(DiscountProvisioningState.fromString(reader.getString()));
                } else if ("billingAccountResourceId".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.withBillingAccountResourceId(reader.getString());
                } else if ("billingProfileResourceId".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.withBillingProfileResourceId(reader.getString());
                } else if ("customerResourceId".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.withCustomerResourceId(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.withDisplayName(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.withStatus(DiscountStatus.fromString(reader.getString()));
                } else if ("benefitResourceId".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.withBenefitResourceId(reader.getString());
                } else if ("appliedScopeType".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount
                        .withAppliedScopeType(DiscountAppliedScopeType.fromString(reader.getString()));
                } else if ("endAt".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.endAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("entityType".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.entityType
                        = DiscountEntityType.fromString(reader.getString());
                } else if ("discountTypeProperties".equals(fieldName)) {
                    deserializedEntityTypePrimaryDiscount.discountTypeProperties
                        = DiscountTypeProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEntityTypePrimaryDiscount;
        });
    }
}
