// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.billingbenefits.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * This defines the conditions for a given discount type.
 */
@Fluent
public class DiscountTypeProperties implements JsonSerializable<DiscountTypeProperties> {
    /*
     * Defines the type of discount. Supported values are ProductFamily, Product, Sku, CustomPrice, and
     * CustomPriceMultiCurrency.
     */
    private DiscountType discountType = DiscountType.fromString("DiscountTypeProperties");

    /*
     * The customer action on which the discount is applied. Supported values are Purchase, Consume, and Renew.
     * Validation: Required, one of supported values.
     */
    private ApplyDiscountOn applyDiscountOn;

    /*
     * Discount percentage provided for the customer. Validation: Required unless this is a price rule.
     */
    private Double discountPercentage;

    /*
     * The discount combination rule when there are multiple applicable custom prices. Validation: Required. Supported
     * values are Stackable and BestOf.
     */
    private DiscountCombinationRule discountCombinationRule;

    /*
     * Set only in price guarantee scenario.
     */
    private PriceGuaranteeProperties priceGuaranteeProperties;

    /*
     * Array of conditions for the discount. Validation: Optional. Maximum length is 1000.
     */
    private List<ConditionsItem> conditions;

    /**
     * Creates an instance of DiscountTypeProperties class.
     */
    public DiscountTypeProperties() {
    }

    /**
     * Get the discountType property: Defines the type of discount. Supported values are ProductFamily, Product, Sku,
     * CustomPrice, and CustomPriceMultiCurrency.
     * 
     * @return the discountType value.
     */
    public DiscountType discountType() {
        return this.discountType;
    }

    /**
     * Get the applyDiscountOn property: The customer action on which the discount is applied. Supported values are
     * Purchase, Consume, and Renew. Validation: Required, one of supported values.
     * 
     * @return the applyDiscountOn value.
     */
    public ApplyDiscountOn applyDiscountOn() {
        return this.applyDiscountOn;
    }

    /**
     * Set the applyDiscountOn property: The customer action on which the discount is applied. Supported values are
     * Purchase, Consume, and Renew. Validation: Required, one of supported values.
     * 
     * @param applyDiscountOn the applyDiscountOn value to set.
     * @return the DiscountTypeProperties object itself.
     */
    public DiscountTypeProperties withApplyDiscountOn(ApplyDiscountOn applyDiscountOn) {
        this.applyDiscountOn = applyDiscountOn;
        return this;
    }

    /**
     * Get the discountPercentage property: Discount percentage provided for the customer. Validation: Required unless
     * this is a price rule.
     * 
     * @return the discountPercentage value.
     */
    public Double discountPercentage() {
        return this.discountPercentage;
    }

    /**
     * Set the discountPercentage property: Discount percentage provided for the customer. Validation: Required unless
     * this is a price rule.
     * 
     * @param discountPercentage the discountPercentage value to set.
     * @return the DiscountTypeProperties object itself.
     */
    public DiscountTypeProperties withDiscountPercentage(Double discountPercentage) {
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * Get the discountCombinationRule property: The discount combination rule when there are multiple applicable custom
     * prices. Validation: Required. Supported values are Stackable and BestOf.
     * 
     * @return the discountCombinationRule value.
     */
    public DiscountCombinationRule discountCombinationRule() {
        return this.discountCombinationRule;
    }

    /**
     * Set the discountCombinationRule property: The discount combination rule when there are multiple applicable custom
     * prices. Validation: Required. Supported values are Stackable and BestOf.
     * 
     * @param discountCombinationRule the discountCombinationRule value to set.
     * @return the DiscountTypeProperties object itself.
     */
    public DiscountTypeProperties withDiscountCombinationRule(DiscountCombinationRule discountCombinationRule) {
        this.discountCombinationRule = discountCombinationRule;
        return this;
    }

    /**
     * Get the priceGuaranteeProperties property: Set only in price guarantee scenario.
     * 
     * @return the priceGuaranteeProperties value.
     */
    public PriceGuaranteeProperties priceGuaranteeProperties() {
        return this.priceGuaranteeProperties;
    }

    /**
     * Set the priceGuaranteeProperties property: Set only in price guarantee scenario.
     * 
     * @param priceGuaranteeProperties the priceGuaranteeProperties value to set.
     * @return the DiscountTypeProperties object itself.
     */
    public DiscountTypeProperties withPriceGuaranteeProperties(PriceGuaranteeProperties priceGuaranteeProperties) {
        this.priceGuaranteeProperties = priceGuaranteeProperties;
        return this;
    }

    /**
     * Get the conditions property: Array of conditions for the discount. Validation: Optional. Maximum length is 1000.
     * 
     * @return the conditions value.
     */
    public List<ConditionsItem> conditions() {
        return this.conditions;
    }

    /**
     * Set the conditions property: Array of conditions for the discount. Validation: Optional. Maximum length is 1000.
     * 
     * @param conditions the conditions value to set.
     * @return the DiscountTypeProperties object itself.
     */
    public DiscountTypeProperties withConditions(List<ConditionsItem> conditions) {
        this.conditions = conditions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (applyDiscountOn() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property applyDiscountOn in model DiscountTypeProperties"));
        }
        if (priceGuaranteeProperties() != null) {
            priceGuaranteeProperties().validate();
        }
        if (conditions() != null) {
            conditions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiscountTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applyDiscountOn",
            this.applyDiscountOn == null ? null : this.applyDiscountOn.toString());
        jsonWriter.writeStringField("discountType", this.discountType == null ? null : this.discountType.toString());
        jsonWriter.writeNumberField("discountPercentage", this.discountPercentage);
        jsonWriter.writeStringField("discountCombinationRule",
            this.discountCombinationRule == null ? null : this.discountCombinationRule.toString());
        jsonWriter.writeJsonField("priceGuaranteeProperties", this.priceGuaranteeProperties);
        jsonWriter.writeArrayField("conditions", this.conditions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscountTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscountTypeProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiscountTypeProperties.
     */
    public static DiscountTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("discountType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("ProductFamily".equals(discriminatorValue)) {
                    return DiscountTypeProductFamily.fromJson(readerToUse.reset());
                } else if ("Product".equals(discriminatorValue)) {
                    return DiscountTypeProduct.fromJson(readerToUse.reset());
                } else if ("Sku".equals(discriminatorValue)) {
                    return DiscountTypeProductSku.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DiscountTypeProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscountTypeProperties deserializedDiscountTypeProperties = new DiscountTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applyDiscountOn".equals(fieldName)) {
                    deserializedDiscountTypeProperties.applyDiscountOn = ApplyDiscountOn.fromString(reader.getString());
                } else if ("discountType".equals(fieldName)) {
                    deserializedDiscountTypeProperties.discountType = DiscountType.fromString(reader.getString());
                } else if ("discountPercentage".equals(fieldName)) {
                    deserializedDiscountTypeProperties.discountPercentage = reader.getNullable(JsonReader::getDouble);
                } else if ("discountCombinationRule".equals(fieldName)) {
                    deserializedDiscountTypeProperties.discountCombinationRule
                        = DiscountCombinationRule.fromString(reader.getString());
                } else if ("priceGuaranteeProperties".equals(fieldName)) {
                    deserializedDiscountTypeProperties.priceGuaranteeProperties
                        = PriceGuaranteeProperties.fromJson(reader);
                } else if ("conditions".equals(fieldName)) {
                    List<ConditionsItem> conditions = reader.readArray(reader1 -> ConditionsItem.fromJson(reader1));
                    deserializedDiscountTypeProperties.conditions = conditions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiscountTypeProperties;
        });
    }
}
