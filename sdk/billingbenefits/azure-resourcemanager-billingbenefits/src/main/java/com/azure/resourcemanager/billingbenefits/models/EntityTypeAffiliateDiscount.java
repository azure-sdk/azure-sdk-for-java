// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.billingbenefits.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Entity type for affiliate discounts.
 */
@Fluent
public final class EntityTypeAffiliateDiscount extends DiscountProperties {
    /*
     * This defines whether the entity being created is primary or affiliate. Supported values: primary, affiliate.
     * Validation: Required, must match one of the 2 values.
     */
    private DiscountEntityType entityType = DiscountEntityType.AFFILIATE;

    /*
     * This will be present in the response if the primary has a resource ID
     */
    private String primaryResourceId;

    /*
     * End date of the discount. No duration will be supported. Allowed value is any date greater than or equal to
     * startDate.
     */
    private OffsetDateTime endAt;

    /**
     * Creates an instance of EntityTypeAffiliateDiscount class.
     */
    public EntityTypeAffiliateDiscount() {
    }

    /**
     * Get the entityType property: This defines whether the entity being created is primary or affiliate. Supported
     * values: primary, affiliate. Validation: Required, must match one of the 2 values.
     * 
     * @return the entityType value.
     */
    @Override
    public DiscountEntityType entityType() {
        return this.entityType;
    }

    /**
     * Get the primaryResourceId property: This will be present in the response if the primary has a resource ID.
     * 
     * @return the primaryResourceId value.
     */
    public String primaryResourceId() {
        return this.primaryResourceId;
    }

    /**
     * Get the endAt property: End date of the discount. No duration will be supported. Allowed value is any date
     * greater than or equal to startDate.
     * 
     * @return the endAt value.
     */
    public OffsetDateTime endAt() {
        return this.endAt;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityTypeAffiliateDiscount withProductCode(String productCode) {
        super.withProductCode(productCode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityTypeAffiliateDiscount withStartAt(OffsetDateTime startAt) {
        super.withStartAt(startAt);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityTypeAffiliateDiscount withSystemId(String systemId) {
        super.withSystemId(systemId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityTypeAffiliateDiscount withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntityTypeAffiliateDiscount withAppliedScopeType(DiscountAppliedScopeType appliedScopeType) {
        super.withAppliedScopeType(appliedScopeType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (productCode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property productCode in model EntityTypeAffiliateDiscount"));
        }
        if (startAt() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property startAt in model EntityTypeAffiliateDiscount"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EntityTypeAffiliateDiscount.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("productCode", productCode());
        jsonWriter.writeStringField("startAt",
            startAt() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(startAt()));
        jsonWriter.writeStringField("systemId", systemId());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("appliedScopeType",
            appliedScopeType() == null ? null : appliedScopeType().toString());
        jsonWriter.writeStringField("entityType", this.entityType == null ? null : this.entityType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntityTypeAffiliateDiscount from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntityTypeAffiliateDiscount if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EntityTypeAffiliateDiscount.
     */
    public static EntityTypeAffiliateDiscount fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntityTypeAffiliateDiscount deserializedEntityTypeAffiliateDiscount = new EntityTypeAffiliateDiscount();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("productCode".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.withProductCode(reader.getString());
                } else if ("startAt".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.withStartAt(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("systemId".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.withSystemId(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount
                        .withProvisioningState(DiscountProvisioningState.fromString(reader.getString()));
                } else if ("billingAccountResourceId".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.withBillingAccountResourceId(reader.getString());
                } else if ("billingProfileResourceId".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.withBillingProfileResourceId(reader.getString());
                } else if ("customerResourceId".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.withCustomerResourceId(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.withDisplayName(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.withStatus(DiscountStatus.fromString(reader.getString()));
                } else if ("benefitResourceId".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.withBenefitResourceId(reader.getString());
                } else if ("appliedScopeType".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount
                        .withAppliedScopeType(DiscountAppliedScopeType.fromString(reader.getString()));
                } else if ("entityType".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.entityType
                        = DiscountEntityType.fromString(reader.getString());
                } else if ("primaryResourceId".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.primaryResourceId = reader.getString();
                } else if ("endAt".equals(fieldName)) {
                    deserializedEntityTypeAffiliateDiscount.endAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEntityTypeAffiliateDiscount;
        });
    }
}
