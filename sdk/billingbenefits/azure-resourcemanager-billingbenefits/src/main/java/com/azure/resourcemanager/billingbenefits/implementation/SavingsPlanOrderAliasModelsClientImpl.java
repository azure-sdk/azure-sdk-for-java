// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.billingbenefits.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.billingbenefits.fluent.SavingsPlanOrderAliasModelsClient;
import com.azure.resourcemanager.billingbenefits.fluent.models.SavingsPlanOrderAliasModelInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SavingsPlanOrderAliasModelsClient.
 */
public final class SavingsPlanOrderAliasModelsClientImpl implements SavingsPlanOrderAliasModelsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SavingsPlanOrderAliasModelsService service;

    /**
     * The service client containing this operation class.
     */
    private final BillingBenefitsClientImpl client;

    /**
     * Initializes an instance of SavingsPlanOrderAliasModelsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SavingsPlanOrderAliasModelsClientImpl(BillingBenefitsClientImpl client) {
        this.service = RestProxy.create(SavingsPlanOrderAliasModelsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingBenefitsClientSavingsPlanOrderAliasModels to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "BillingBenefitsClien")
    public interface SavingsPlanOrderAliasModelsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.BillingBenefits/savingsPlanOrderAliases/{savingsPlanOrderAliasName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SavingsPlanOrderAliasModelInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("savingsPlanOrderAliasName") String savingsPlanOrderAliasName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.BillingBenefits/savingsPlanOrderAliases/{savingsPlanOrderAliasName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SavingsPlanOrderAliasModelInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("savingsPlanOrderAliasName") String savingsPlanOrderAliasName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/providers/Microsoft.BillingBenefits/savingsPlanOrderAliases/{savingsPlanOrderAliasName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("savingsPlanOrderAliasName") String savingsPlanOrderAliasName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SavingsPlanOrderAliasModelInner body, Context context);

        @Put("/providers/Microsoft.BillingBenefits/savingsPlanOrderAliases/{savingsPlanOrderAliasName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("savingsPlanOrderAliasName") String savingsPlanOrderAliasName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SavingsPlanOrderAliasModelInner body, Context context);
    }

    /**
     * Get a savings plan.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a savings plan along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SavingsPlanOrderAliasModelInner>> getWithResponseAsync(String savingsPlanOrderAliasName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (savingsPlanOrderAliasName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter savingsPlanOrderAliasName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                savingsPlanOrderAliasName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a savings plan.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a savings plan on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SavingsPlanOrderAliasModelInner> getAsync(String savingsPlanOrderAliasName) {
        return getWithResponseAsync(savingsPlanOrderAliasName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a savings plan.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a savings plan along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SavingsPlanOrderAliasModelInner> getWithResponse(String savingsPlanOrderAliasName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (savingsPlanOrderAliasName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter savingsPlanOrderAliasName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), savingsPlanOrderAliasName,
            accept, context);
    }

    /**
     * Get a savings plan.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a savings plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavingsPlanOrderAliasModelInner get(String savingsPlanOrderAliasName) {
        return getWithResponse(savingsPlanOrderAliasName, Context.NONE).getValue();
    }

    /**
     * Create a savings plan. Learn more about permissions needed at https://go.microsoft.com/fwlink/?linkid=2215851.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @param body Request body for creating a savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan order alias along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String savingsPlanOrderAliasName,
        SavingsPlanOrderAliasModelInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (savingsPlanOrderAliasName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter savingsPlanOrderAliasName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(),
                savingsPlanOrderAliasName, contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a savings plan. Learn more about permissions needed at https://go.microsoft.com/fwlink/?linkid=2215851.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @param body Request body for creating a savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan order alias along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String savingsPlanOrderAliasName,
        SavingsPlanOrderAliasModelInner body) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (savingsPlanOrderAliasName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter savingsPlanOrderAliasName is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(), savingsPlanOrderAliasName,
            contentType, accept, body, Context.NONE);
    }

    /**
     * Create a savings plan. Learn more about permissions needed at https://go.microsoft.com/fwlink/?linkid=2215851.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @param body Request body for creating a savings plan order alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan order alias along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String savingsPlanOrderAliasName,
        SavingsPlanOrderAliasModelInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (savingsPlanOrderAliasName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter savingsPlanOrderAliasName is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(), savingsPlanOrderAliasName,
            contentType, accept, body, context);
    }

    /**
     * Create a savings plan. Learn more about permissions needed at https://go.microsoft.com/fwlink/?linkid=2215851.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @param body Request body for creating a savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of savings plan order alias.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SavingsPlanOrderAliasModelInner>, SavingsPlanOrderAliasModelInner>
        beginCreateAsync(String savingsPlanOrderAliasName, SavingsPlanOrderAliasModelInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(savingsPlanOrderAliasName, body);
        return this.client.<SavingsPlanOrderAliasModelInner, SavingsPlanOrderAliasModelInner>getLroResult(mono,
            this.client.getHttpPipeline(), SavingsPlanOrderAliasModelInner.class, SavingsPlanOrderAliasModelInner.class,
            this.client.getContext());
    }

    /**
     * Create a savings plan. Learn more about permissions needed at https://go.microsoft.com/fwlink/?linkid=2215851.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @param body Request body for creating a savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of savings plan order alias.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SavingsPlanOrderAliasModelInner>, SavingsPlanOrderAliasModelInner>
        beginCreate(String savingsPlanOrderAliasName, SavingsPlanOrderAliasModelInner body) {
        Response<BinaryData> response = createWithResponse(savingsPlanOrderAliasName, body);
        return this.client.<SavingsPlanOrderAliasModelInner, SavingsPlanOrderAliasModelInner>getLroResult(response,
            SavingsPlanOrderAliasModelInner.class, SavingsPlanOrderAliasModelInner.class, Context.NONE);
    }

    /**
     * Create a savings plan. Learn more about permissions needed at https://go.microsoft.com/fwlink/?linkid=2215851.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @param body Request body for creating a savings plan order alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of savings plan order alias.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SavingsPlanOrderAliasModelInner>, SavingsPlanOrderAliasModelInner>
        beginCreate(String savingsPlanOrderAliasName, SavingsPlanOrderAliasModelInner body, Context context) {
        Response<BinaryData> response = createWithResponse(savingsPlanOrderAliasName, body, context);
        return this.client.<SavingsPlanOrderAliasModelInner, SavingsPlanOrderAliasModelInner>getLroResult(response,
            SavingsPlanOrderAliasModelInner.class, SavingsPlanOrderAliasModelInner.class, context);
    }

    /**
     * Create a savings plan. Learn more about permissions needed at https://go.microsoft.com/fwlink/?linkid=2215851.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @param body Request body for creating a savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan order alias on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SavingsPlanOrderAliasModelInner> createAsync(String savingsPlanOrderAliasName,
        SavingsPlanOrderAliasModelInner body) {
        return beginCreateAsync(savingsPlanOrderAliasName, body).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a savings plan. Learn more about permissions needed at https://go.microsoft.com/fwlink/?linkid=2215851.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @param body Request body for creating a savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan order alias.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavingsPlanOrderAliasModelInner create(String savingsPlanOrderAliasName,
        SavingsPlanOrderAliasModelInner body) {
        return beginCreate(savingsPlanOrderAliasName, body).getFinalResult();
    }

    /**
     * Create a savings plan. Learn more about permissions needed at https://go.microsoft.com/fwlink/?linkid=2215851.
     * 
     * @param savingsPlanOrderAliasName Name of the savings plan order alias.
     * @param body Request body for creating a savings plan order alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan order alias.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavingsPlanOrderAliasModelInner create(String savingsPlanOrderAliasName,
        SavingsPlanOrderAliasModelInner body, Context context) {
        return beginCreate(savingsPlanOrderAliasName, body, context).getFinalResult();
    }

    private static final ClientLogger LOGGER = new ClientLogger(SavingsPlanOrderAliasModelsClientImpl.class);
}
