// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.billingbenefits.fluent.models.CalculateMigrationCostOperationResultResponseInner;
import com.azure.resourcemanager.billingbenefits.models.CalculateMigrationCostRequest;

/** An instance of this class provides access to all the operations defined in CalculateMigrationCostsClient. */
public interface CalculateMigrationCostsClient {
    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of calculateMigrationCost operation result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<
            PollResult<CalculateMigrationCostOperationResultResponseInner>,
            CalculateMigrationCostOperationResultResponseInner>
        beginPost(CalculateMigrationCostRequest body);

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of calculateMigrationCost operation result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<
            PollResult<CalculateMigrationCostOperationResultResponseInner>,
            CalculateMigrationCostOperationResultResponseInner>
        beginPost(CalculateMigrationCostRequest body, Context context);

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return calculateMigrationCost operation result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CalculateMigrationCostOperationResultResponseInner post(CalculateMigrationCostRequest body);

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return calculateMigrationCost operation result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CalculateMigrationCostOperationResultResponseInner post(CalculateMigrationCostRequest body, Context context);
}
