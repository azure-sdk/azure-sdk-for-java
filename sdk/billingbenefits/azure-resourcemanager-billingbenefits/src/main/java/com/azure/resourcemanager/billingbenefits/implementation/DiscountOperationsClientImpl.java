// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.billingbenefits.fluent.DiscountOperationsClient;
import com.azure.resourcemanager.billingbenefits.fluent.models.DiscountInner;
import com.azure.resourcemanager.billingbenefits.models.DiscountPatchRequest;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DiscountOperationsClient.
 */
public final class DiscountOperationsClientImpl implements DiscountOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DiscountOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final BillingBenefitsRPImpl client;

    /**
     * Initializes an instance of DiscountOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DiscountOperationsClientImpl(BillingBenefitsRPImpl client) {
        this.service = RestProxy.create(DiscountOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingBenefitsRPDiscountOperations to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "BillingBenefitsRPDis")
    public interface DiscountOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BillingBenefits/discounts/{discountName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiscountInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("discountName") String discountName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BillingBenefits/discounts/{discountName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("discountName") String discountName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") DiscountPatchRequest body,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get discount at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discount at resource group level along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiscountInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String discountName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (discountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter discountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, discountName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get discount at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discount at resource group level along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiscountInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String discountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (discountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter discountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            discountName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get discount at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discount at resource group level on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiscountInner> getByResourceGroupAsync(String resourceGroupName, String discountName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, discountName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get discount at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discount at resource group level along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DiscountInner> getByResourceGroupWithResponse(String resourceGroupName, String discountName,
        Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, discountName, context).block();
    }

    /**
     * Get discount at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discount at resource group level.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscountInner getByResourceGroup(String resourceGroupName, String discountName) {
        return getByResourceGroupWithResponse(resourceGroupName, discountName, Context.NONE).getValue();
    }

    /**
     * Update discounts.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for updating discounts.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource definition for Discounts along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String discountName,
        DiscountPatchRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (discountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter discountName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, discountName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update discounts.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for updating discounts.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource definition for Discounts along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String discountName,
        DiscountPatchRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (discountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter discountName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            discountName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Update discounts.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for updating discounts.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DiscountInner>, DiscountInner> beginUpdateAsync(String resourceGroupName,
        String discountName, DiscountPatchRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, discountName, body);
        return this.client.<DiscountInner, DiscountInner>getLroResult(mono, this.client.getHttpPipeline(),
            DiscountInner.class, DiscountInner.class, this.client.getContext());
    }

    /**
     * Update discounts.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for updating discounts.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DiscountInner>, DiscountInner> beginUpdateAsync(String resourceGroupName,
        String discountName, DiscountPatchRequest body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, discountName, body, context);
        return this.client.<DiscountInner, DiscountInner>getLroResult(mono, this.client.getHttpPipeline(),
            DiscountInner.class, DiscountInner.class, context);
    }

    /**
     * Update discounts.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for updating discounts.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DiscountInner>, DiscountInner> beginUpdate(String resourceGroupName,
        String discountName, DiscountPatchRequest body) {
        return this.beginUpdateAsync(resourceGroupName, discountName, body).getSyncPoller();
    }

    /**
     * Update discounts.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for updating discounts.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DiscountInner>, DiscountInner> beginUpdate(String resourceGroupName,
        String discountName, DiscountPatchRequest body, Context context) {
        return this.beginUpdateAsync(resourceGroupName, discountName, body, context).getSyncPoller();
    }

    /**
     * Update discounts.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for updating discounts.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource definition for Discounts on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiscountInner> updateAsync(String resourceGroupName, String discountName, DiscountPatchRequest body) {
        return beginUpdateAsync(resourceGroupName, discountName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update discounts.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for updating discounts.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource definition for Discounts on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiscountInner> updateAsync(String resourceGroupName, String discountName, DiscountPatchRequest body,
        Context context) {
        return beginUpdateAsync(resourceGroupName, discountName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update discounts.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for updating discounts.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscountInner update(String resourceGroupName, String discountName, DiscountPatchRequest body) {
        return updateAsync(resourceGroupName, discountName, body).block();
    }

    /**
     * Update discounts.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for updating discounts.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscountInner update(String resourceGroupName, String discountName, DiscountPatchRequest body,
        Context context) {
        return updateAsync(resourceGroupName, discountName, body, context).block();
    }
}
