// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Items in the MarketSetPrices array.
 */
@Fluent
public final class MarketSetPricesItems implements JsonSerializable<MarketSetPricesItems> {
    /*
     * The markets property.
     */
    private List<String> markets;

    /*
     * The locked price for the priceable node. Validation: Required. Must be greater than or equal to 0. If the case of
     * billing plans. This represents the price for each cycle charge.
     */
    private float value;

    /*
     * The currency of the locked price value. Validation: Required. Must be a valid ISO 4217 3-letter currency code.
     */
    private String currency;

    /**
     * Creates an instance of MarketSetPricesItems class.
     */
    public MarketSetPricesItems() {
    }

    /**
     * Get the markets property: The markets property.
     * 
     * @return the markets value.
     */
    public List<String> markets() {
        return this.markets;
    }

    /**
     * Set the markets property: The markets property.
     * 
     * @param markets the markets value to set.
     * @return the MarketSetPricesItems object itself.
     */
    public MarketSetPricesItems withMarkets(List<String> markets) {
        this.markets = markets;
        return this;
    }

    /**
     * Get the value property: The locked price for the priceable node. Validation: Required. Must be greater than or
     * equal to 0. If the case of billing plans. This represents the price for each cycle charge.
     * 
     * @return the value value.
     */
    public float value() {
        return this.value;
    }

    /**
     * Set the value property: The locked price for the priceable node. Validation: Required. Must be greater than or
     * equal to 0. If the case of billing plans. This represents the price for each cycle charge.
     * 
     * @param value the value value to set.
     * @return the MarketSetPricesItems object itself.
     */
    public MarketSetPricesItems withValue(float value) {
        this.value = value;
        return this;
    }

    /**
     * Get the currency property: The currency of the locked price value. Validation: Required. Must be a valid ISO 4217
     * 3-letter currency code.
     * 
     * @return the currency value.
     */
    public String currency() {
        return this.currency;
    }

    /**
     * Set the currency property: The currency of the locked price value. Validation: Required. Must be a valid ISO 4217
     * 3-letter currency code.
     * 
     * @param currency the currency value to set.
     * @return the MarketSetPricesItems object itself.
     */
    public MarketSetPricesItems withCurrency(String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (markets() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property markets in model MarketSetPricesItems"));
        }
        if (currency() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property currency in model MarketSetPricesItems"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MarketSetPricesItems.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("markets", this.markets, (writer, element) -> writer.writeString(element));
        jsonWriter.writeFloatField("value", this.value);
        jsonWriter.writeStringField("currency", this.currency);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MarketSetPricesItems from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MarketSetPricesItems if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MarketSetPricesItems.
     */
    public static MarketSetPricesItems fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MarketSetPricesItems deserializedMarketSetPricesItems = new MarketSetPricesItems();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("markets".equals(fieldName)) {
                    List<String> markets = reader.readArray(reader1 -> reader1.getString());
                    deserializedMarketSetPricesItems.markets = markets;
                } else if ("value".equals(fieldName)) {
                    deserializedMarketSetPricesItems.value = reader.getFloat();
                } else if ("currency".equals(fieldName)) {
                    deserializedMarketSetPricesItems.currency = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMarketSetPricesItems;
        });
    }
}
