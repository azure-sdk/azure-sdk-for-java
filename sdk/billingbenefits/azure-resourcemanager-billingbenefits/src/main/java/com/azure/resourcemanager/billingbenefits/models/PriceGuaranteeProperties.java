// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Set only in price guarantee scenario.
 */
@Fluent
public final class PriceGuaranteeProperties implements JsonSerializable<PriceGuaranteeProperties> {
    /*
     * Supported values: Protected, Locked
     */
    private PricingPolicy pricingPolicy;

    /*
     * The date on which prices are to be used for guarantee calculation. Validation: expected to be 00 hours, Format:
     * 2024-09-30T00:00:00Z. Must be in UTC.
     */
    private OffsetDateTime priceGuaranteeDate;

    /**
     * Creates an instance of PriceGuaranteeProperties class.
     */
    public PriceGuaranteeProperties() {
    }

    /**
     * Get the pricingPolicy property: Supported values: Protected, Locked.
     * 
     * @return the pricingPolicy value.
     */
    public PricingPolicy pricingPolicy() {
        return this.pricingPolicy;
    }

    /**
     * Set the pricingPolicy property: Supported values: Protected, Locked.
     * 
     * @param pricingPolicy the pricingPolicy value to set.
     * @return the PriceGuaranteeProperties object itself.
     */
    public PriceGuaranteeProperties withPricingPolicy(PricingPolicy pricingPolicy) {
        this.pricingPolicy = pricingPolicy;
        return this;
    }

    /**
     * Get the priceGuaranteeDate property: The date on which prices are to be used for guarantee calculation.
     * Validation: expected to be 00 hours, Format: 2024-09-30T00:00:00Z. Must be in UTC.
     * 
     * @return the priceGuaranteeDate value.
     */
    public OffsetDateTime priceGuaranteeDate() {
        return this.priceGuaranteeDate;
    }

    /**
     * Set the priceGuaranteeDate property: The date on which prices are to be used for guarantee calculation.
     * Validation: expected to be 00 hours, Format: 2024-09-30T00:00:00Z. Must be in UTC.
     * 
     * @param priceGuaranteeDate the priceGuaranteeDate value to set.
     * @return the PriceGuaranteeProperties object itself.
     */
    public PriceGuaranteeProperties withPriceGuaranteeDate(OffsetDateTime priceGuaranteeDate) {
        this.priceGuaranteeDate = priceGuaranteeDate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pricingPolicy", this.pricingPolicy == null ? null : this.pricingPolicy.toString());
        jsonWriter.writeStringField("priceGuaranteeDate",
            this.priceGuaranteeDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.priceGuaranteeDate));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PriceGuaranteeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PriceGuaranteeProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PriceGuaranteeProperties.
     */
    public static PriceGuaranteeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PriceGuaranteeProperties deserializedPriceGuaranteeProperties = new PriceGuaranteeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pricingPolicy".equals(fieldName)) {
                    deserializedPriceGuaranteeProperties.pricingPolicy = PricingPolicy.fromString(reader.getString());
                } else if ("priceGuaranteeDate".equals(fieldName)) {
                    deserializedPriceGuaranteeProperties.priceGuaranteeDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPriceGuaranteeProperties;
        });
    }
}
