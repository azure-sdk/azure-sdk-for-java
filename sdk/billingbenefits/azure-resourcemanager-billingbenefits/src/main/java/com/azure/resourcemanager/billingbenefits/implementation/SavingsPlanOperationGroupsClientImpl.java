// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.billingbenefits.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.billingbenefits.fluent.SavingsPlanOperationGroupsClient;
import com.azure.resourcemanager.billingbenefits.fluent.models.SavingsPlanModelInner;
import com.azure.resourcemanager.billingbenefits.fluent.models.SavingsPlanValidateResponseInner;
import com.azure.resourcemanager.billingbenefits.implementation.models.SavingsPlanModelListResult;
import com.azure.resourcemanager.billingbenefits.models.SavingsPlanPurchaseValidateRequest;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SavingsPlanOperationGroupsClient.
 */
public final class SavingsPlanOperationGroupsClientImpl implements SavingsPlanOperationGroupsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SavingsPlanOperationGroupsService service;

    /**
     * The service client containing this operation class.
     */
    private final BillingBenefitsClientImpl client;

    /**
     * Initializes an instance of SavingsPlanOperationGroupsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SavingsPlanOperationGroupsClientImpl(BillingBenefitsClientImpl client) {
        this.service = RestProxy.create(SavingsPlanOperationGroupsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingBenefitsClientSavingsPlanOperationGroups to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "BillingBenefitsClien")
    public interface SavingsPlanOperationGroupsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.BillingBenefits/savingsPlans")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SavingsPlanModelListResult>> listAll(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("$filter") String filter,
            @QueryParam("$orderby") String orderby, @QueryParam("refreshSummary") String refreshSummary,
            @QueryParam("$skiptoken") Double skiptoken, @QueryParam("selectedState") String selectedState,
            @QueryParam("take") Double take, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.BillingBenefits/savingsPlans")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SavingsPlanModelListResult> listAllSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("$filter") String filter,
            @QueryParam("$orderby") String orderby, @QueryParam("refreshSummary") String refreshSummary,
            @QueryParam("$skiptoken") Double skiptoken, @QueryParam("selectedState") String selectedState,
            @QueryParam("take") Double take, @HeaderParam("Accept") String accept, Context context);

        @Post("/providers/Microsoft.BillingBenefits/validate")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SavingsPlanValidateResponseInner>> validatePurchase(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SavingsPlanPurchaseValidateRequest body, Context context);

        @Post("/providers/Microsoft.BillingBenefits/validate")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SavingsPlanValidateResponseInner> validatePurchaseSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SavingsPlanPurchaseValidateRequest body, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SavingsPlanModelListResult>> listAllNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SavingsPlanModelListResult> listAllNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List savings plans.
     * 
     * @param filter May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does
     * not currently support 'ne', 'gt', 'le', 'ge', or 'not'. Reservation properties include sku/name,
     * properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate,
     * provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType,
     * userFriendlyRenewState}.
     * @param orderby May be used to sort order by reservation properties.
     * @param refreshSummary To indicate whether to refresh the roll up counts of the savings plans group by
     * provisioning states.
     * @param skiptoken The number of savings plans to skip from the list before returning results.
     * @param selectedState The selected provisioning state.
     * @param take To number of savings plans to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SavingsPlanModelInner>> listAllSinglePageAsync(String filter, String orderby,
        String refreshSummary, Double skiptoken, String selectedState, Double take) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAll(this.client.getEndpoint(), this.client.getApiVersion(), filter,
                orderby, refreshSummary, skiptoken, selectedState, take, accept, context))
            .<PagedResponse<SavingsPlanModelInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List savings plans.
     * 
     * @param filter May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does
     * not currently support 'ne', 'gt', 'le', 'ge', or 'not'. Reservation properties include sku/name,
     * properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate,
     * provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType,
     * userFriendlyRenewState}.
     * @param orderby May be used to sort order by reservation properties.
     * @param refreshSummary To indicate whether to refresh the roll up counts of the savings plans group by
     * provisioning states.
     * @param skiptoken The number of savings plans to skip from the list before returning results.
     * @param selectedState The selected provisioning state.
     * @param take To number of savings plans to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SavingsPlanModelInner> listAllAsync(String filter, String orderby, String refreshSummary,
        Double skiptoken, String selectedState, Double take) {
        return new PagedFlux<>(
            () -> listAllSinglePageAsync(filter, orderby, refreshSummary, skiptoken, selectedState, take),
            nextLink -> listAllNextSinglePageAsync(nextLink));
    }

    /**
     * List savings plans.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SavingsPlanModelInner> listAllAsync() {
        final String filter = null;
        final String orderby = null;
        final String refreshSummary = null;
        final Double skiptoken = null;
        final String selectedState = null;
        final Double take = null;
        return new PagedFlux<>(
            () -> listAllSinglePageAsync(filter, orderby, refreshSummary, skiptoken, selectedState, take),
            nextLink -> listAllNextSinglePageAsync(nextLink));
    }

    /**
     * List savings plans.
     * 
     * @param filter May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does
     * not currently support 'ne', 'gt', 'le', 'ge', or 'not'. Reservation properties include sku/name,
     * properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate,
     * provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType,
     * userFriendlyRenewState}.
     * @param orderby May be used to sort order by reservation properties.
     * @param refreshSummary To indicate whether to refresh the roll up counts of the savings plans group by
     * provisioning states.
     * @param skiptoken The number of savings plans to skip from the list before returning results.
     * @param selectedState The selected provisioning state.
     * @param take To number of savings plans to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SavingsPlanModelInner> listAllSinglePage(String filter, String orderby, String refreshSummary,
        Double skiptoken, String selectedState, Double take) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SavingsPlanModelListResult> res
            = service.listAllSync(this.client.getEndpoint(), this.client.getApiVersion(), filter, orderby,
                refreshSummary, skiptoken, selectedState, take, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List savings plans.
     * 
     * @param filter May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does
     * not currently support 'ne', 'gt', 'le', 'ge', or 'not'. Reservation properties include sku/name,
     * properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate,
     * provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType,
     * userFriendlyRenewState}.
     * @param orderby May be used to sort order by reservation properties.
     * @param refreshSummary To indicate whether to refresh the roll up counts of the savings plans group by
     * provisioning states.
     * @param skiptoken The number of savings plans to skip from the list before returning results.
     * @param selectedState The selected provisioning state.
     * @param take To number of savings plans to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SavingsPlanModelInner> listAllSinglePage(String filter, String orderby, String refreshSummary,
        Double skiptoken, String selectedState, Double take, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SavingsPlanModelListResult> res
            = service.listAllSync(this.client.getEndpoint(), this.client.getApiVersion(), filter, orderby,
                refreshSummary, skiptoken, selectedState, take, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List savings plans.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SavingsPlanModelInner> listAll() {
        final String filter = null;
        final String orderby = null;
        final String refreshSummary = null;
        final Double skiptoken = null;
        final String selectedState = null;
        final Double take = null;
        return new PagedIterable<>(
            () -> listAllSinglePage(filter, orderby, refreshSummary, skiptoken, selectedState, take),
            nextLink -> listAllNextSinglePage(nextLink));
    }

    /**
     * List savings plans.
     * 
     * @param filter May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does
     * not currently support 'ne', 'gt', 'le', 'ge', or 'not'. Reservation properties include sku/name,
     * properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate,
     * provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType,
     * userFriendlyRenewState}.
     * @param orderby May be used to sort order by reservation properties.
     * @param refreshSummary To indicate whether to refresh the roll up counts of the savings plans group by
     * provisioning states.
     * @param skiptoken The number of savings plans to skip from the list before returning results.
     * @param selectedState The selected provisioning state.
     * @param take To number of savings plans to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SavingsPlanModelInner> listAll(String filter, String orderby, String refreshSummary,
        Double skiptoken, String selectedState, Double take, Context context) {
        return new PagedIterable<>(
            () -> listAllSinglePage(filter, orderby, refreshSummary, skiptoken, selectedState, take, context),
            nextLink -> listAllNextSinglePage(nextLink, context));
    }

    /**
     * Validate savings plan purchase.
     * 
     * @param body The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SavingsPlanValidateResponseInner>>
        validatePurchaseWithResponseAsync(SavingsPlanPurchaseValidateRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.validatePurchase(this.client.getEndpoint(), this.client.getApiVersion(),
                contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Validate savings plan purchase.
     * 
     * @param body The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SavingsPlanValidateResponseInner> validatePurchaseAsync(SavingsPlanPurchaseValidateRequest body) {
        return validatePurchaseWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Validate savings plan purchase.
     * 
     * @param body The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SavingsPlanValidateResponseInner>
        validatePurchaseWithResponse(SavingsPlanPurchaseValidateRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.validatePurchaseSync(this.client.getEndpoint(), this.client.getApiVersion(), contentType, accept,
            body, context);
    }

    /**
     * Validate savings plan purchase.
     * 
     * @param body The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavingsPlanValidateResponseInner validatePurchase(SavingsPlanPurchaseValidateRequest body) {
        return validatePurchaseWithResponse(body, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SavingsPlanModelInner>> listAllNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAllNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SavingsPlanModelInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SavingsPlanModelInner> listAllNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SavingsPlanModelListResult> res
            = service.listAllNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the result of listing savings plan models along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SavingsPlanModelInner> listAllNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SavingsPlanModelListResult> res
            = service.listAllNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(SavingsPlanOperationGroupsClientImpl.class);
}
