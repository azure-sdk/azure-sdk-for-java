// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.billingbenefits.fluent.CalculateMigrationCostsClient;
import com.azure.resourcemanager.billingbenefits.fluent.models.CalculateMigrationCostOperationResultResponseInner;
import com.azure.resourcemanager.billingbenefits.models.CalculateMigrationCostRequest;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CalculateMigrationCostsClient. */
public final class CalculateMigrationCostsClientImpl implements CalculateMigrationCostsClient {
    /** The proxy service used to perform REST calls. */
    private final CalculateMigrationCostsService service;

    /** The service client containing this operation class. */
    private final BenefitsRPImpl client;

    /**
     * Initializes an instance of CalculateMigrationCostsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CalculateMigrationCostsClientImpl(BenefitsRPImpl client) {
        this.service =
            RestProxy
                .create(CalculateMigrationCostsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BenefitsRPCalculateMigrationCosts to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "BenefitsRPCalculateM")
    private interface CalculateMigrationCostsService {
        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.BillingBenefits/calculateMigrationCost")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> post(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CalculateMigrationCostRequest body,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return calculateMigrationCost operation result along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> postWithResponseAsync(CalculateMigrationCostRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.post(this.client.getEndpoint(), this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return calculateMigrationCost operation result along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> postWithResponseAsync(
        CalculateMigrationCostRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.post(this.client.getEndpoint(), this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of calculateMigrationCost operation result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<CalculateMigrationCostOperationResultResponseInner>,
            CalculateMigrationCostOperationResultResponseInner>
        beginPostAsync(CalculateMigrationCostRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono = postWithResponseAsync(body);
        return this
            .client
            .<CalculateMigrationCostOperationResultResponseInner, CalculateMigrationCostOperationResultResponseInner>
                getLroResult(
                    mono,
                    this.client.getHttpPipeline(),
                    CalculateMigrationCostOperationResultResponseInner.class,
                    CalculateMigrationCostOperationResultResponseInner.class,
                    this.client.getContext());
    }

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of calculateMigrationCost operation result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<CalculateMigrationCostOperationResultResponseInner>,
            CalculateMigrationCostOperationResultResponseInner>
        beginPostAsync(CalculateMigrationCostRequest body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = postWithResponseAsync(body, context);
        return this
            .client
            .<CalculateMigrationCostOperationResultResponseInner, CalculateMigrationCostOperationResultResponseInner>
                getLroResult(
                    mono,
                    this.client.getHttpPipeline(),
                    CalculateMigrationCostOperationResultResponseInner.class,
                    CalculateMigrationCostOperationResultResponseInner.class,
                    context);
    }

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of calculateMigrationCost operation result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<CalculateMigrationCostOperationResultResponseInner>,
            CalculateMigrationCostOperationResultResponseInner>
        beginPost(CalculateMigrationCostRequest body) {
        return beginPostAsync(body).getSyncPoller();
    }

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of calculateMigrationCost operation result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<CalculateMigrationCostOperationResultResponseInner>,
            CalculateMigrationCostOperationResultResponseInner>
        beginPost(CalculateMigrationCostRequest body, Context context) {
        return beginPostAsync(body, context).getSyncPoller();
    }

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return calculateMigrationCost operation result on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CalculateMigrationCostOperationResultResponseInner> postAsync(CalculateMigrationCostRequest body) {
        return beginPostAsync(body).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return calculateMigrationCost operation result on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CalculateMigrationCostOperationResultResponseInner> postAsync(
        CalculateMigrationCostRequest body, Context context) {
        return beginPostAsync(body, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return calculateMigrationCost operation result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CalculateMigrationCostOperationResultResponseInner post(CalculateMigrationCostRequest body) {
        return postAsync(body).block();
    }

    /**
     * Calculates the refund amounts in EA account and price of the corresponding new purchases in MCA account.
     *
     * <p>Calculates price for migrating `SavingsPlans` from EA to MCA account.
     *
     * @param body Request body for migrating all savings plan order into mca account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return calculateMigrationCost operation result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CalculateMigrationCostOperationResultResponseInner post(
        CalculateMigrationCostRequest body, Context context) {
        return postAsync(body, context).block();
    }
}
