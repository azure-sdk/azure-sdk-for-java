// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Discount type properties including product family name, product id, sku, and custom price properties. Allows multiple
 * entries in marketSetPrices.
 */
@Fluent
public final class DiscountTypeCustomPriceMultiCurrency extends DiscountTypeCustomPrice {
    /*
     * Defines the type of discount. Supported values are ProductFamily, Product, Sku, CustomPrice, and
     * CustomPriceMultiCurrency.
     */
    private DiscountType discountType = DiscountType.CUSTOM_PRICE_MULTI_CURRENCY;

    /**
     * Creates an instance of DiscountTypeCustomPriceMultiCurrency class.
     */
    public DiscountTypeCustomPriceMultiCurrency() {
    }

    /**
     * Get the discountType property: Defines the type of discount. Supported values are ProductFamily, Product, Sku,
     * CustomPrice, and CustomPriceMultiCurrency.
     * 
     * @return the discountType value.
     */
    @Override
    public DiscountType discountType() {
        return this.discountType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiscountTypeCustomPriceMultiCurrency withProductFamilyName(String productFamilyName) {
        super.withProductFamilyName(productFamilyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiscountTypeCustomPriceMultiCurrency withProductId(String productId) {
        super.withProductId(productId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiscountTypeCustomPriceMultiCurrency withSkuId(String skuId) {
        super.withSkuId(skuId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiscountTypeCustomPriceMultiCurrency withCustomPriceProperties(CustomPriceProperties customPriceProperties) {
        super.withCustomPriceProperties(customPriceProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiscountTypeCustomPriceMultiCurrency withApplyDiscountOn(ApplyDiscountOn applyDiscountOn) {
        super.withApplyDiscountOn(applyDiscountOn);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiscountTypeCustomPriceMultiCurrency withDiscountPercentage(Float discountPercentage) {
        super.withDiscountPercentage(discountPercentage);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiscountTypeCustomPriceMultiCurrency
        withDiscountCombinationRule(DiscountCombinationRule discountCombinationRule) {
        super.withDiscountCombinationRule(discountCombinationRule);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiscountTypeCustomPriceMultiCurrency
        withPriceGuaranteeProperties(PriceGuaranteeProperties priceGuaranteeProperties) {
        super.withPriceGuaranteeProperties(priceGuaranteeProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiscountTypeCustomPriceMultiCurrency withConditions(List<ConditionsItem> conditions) {
        super.withConditions(conditions);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (applyDiscountOn() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property applyDiscountOn in model DiscountTypeCustomPriceMultiCurrency"));
        }
        if (priceGuaranteeProperties() != null) {
            priceGuaranteeProperties().validate();
        }
        if (conditions() != null) {
            conditions().forEach(e -> e.validate());
        }
        if (customPriceProperties() != null) {
            customPriceProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiscountTypeCustomPriceMultiCurrency.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applyDiscountOn", applyDiscountOn() == null ? null : applyDiscountOn().toString());
        jsonWriter.writeNumberField("discountPercentage", discountPercentage());
        jsonWriter.writeStringField("discountCombinationRule",
            discountCombinationRule() == null ? null : discountCombinationRule().toString());
        jsonWriter.writeJsonField("priceGuaranteeProperties", priceGuaranteeProperties());
        jsonWriter.writeArrayField("conditions", conditions(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("productFamilyName", productFamilyName());
        jsonWriter.writeStringField("productId", productId());
        jsonWriter.writeStringField("skuId", skuId());
        jsonWriter.writeJsonField("customPriceProperties", customPriceProperties());
        jsonWriter.writeStringField("discountType", this.discountType == null ? null : this.discountType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscountTypeCustomPriceMultiCurrency from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscountTypeCustomPriceMultiCurrency if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiscountTypeCustomPriceMultiCurrency.
     */
    public static DiscountTypeCustomPriceMultiCurrency fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscountTypeCustomPriceMultiCurrency deserializedDiscountTypeCustomPriceMultiCurrency
                = new DiscountTypeCustomPriceMultiCurrency();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applyDiscountOn".equals(fieldName)) {
                    deserializedDiscountTypeCustomPriceMultiCurrency
                        .withApplyDiscountOn(ApplyDiscountOn.fromString(reader.getString()));
                } else if ("discountPercentage".equals(fieldName)) {
                    deserializedDiscountTypeCustomPriceMultiCurrency
                        .withDiscountPercentage(reader.getNullable(JsonReader::getFloat));
                } else if ("discountCombinationRule".equals(fieldName)) {
                    deserializedDiscountTypeCustomPriceMultiCurrency
                        .withDiscountCombinationRule(DiscountCombinationRule.fromString(reader.getString()));
                } else if ("priceGuaranteeProperties".equals(fieldName)) {
                    deserializedDiscountTypeCustomPriceMultiCurrency
                        .withPriceGuaranteeProperties(PriceGuaranteeProperties.fromJson(reader));
                } else if ("conditions".equals(fieldName)) {
                    List<ConditionsItem> conditions = reader.readArray(reader1 -> ConditionsItem.fromJson(reader1));
                    deserializedDiscountTypeCustomPriceMultiCurrency.withConditions(conditions);
                } else if ("productFamilyName".equals(fieldName)) {
                    deserializedDiscountTypeCustomPriceMultiCurrency.withProductFamilyName(reader.getString());
                } else if ("productId".equals(fieldName)) {
                    deserializedDiscountTypeCustomPriceMultiCurrency.withProductId(reader.getString());
                } else if ("skuId".equals(fieldName)) {
                    deserializedDiscountTypeCustomPriceMultiCurrency.withSkuId(reader.getString());
                } else if ("customPriceProperties".equals(fieldName)) {
                    deserializedDiscountTypeCustomPriceMultiCurrency
                        .withCustomPriceProperties(CustomPriceProperties.fromJson(reader));
                } else if ("discountType".equals(fieldName)) {
                    deserializedDiscountTypeCustomPriceMultiCurrency.discountType
                        = DiscountType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiscountTypeCustomPriceMultiCurrency;
        });
    }
}
