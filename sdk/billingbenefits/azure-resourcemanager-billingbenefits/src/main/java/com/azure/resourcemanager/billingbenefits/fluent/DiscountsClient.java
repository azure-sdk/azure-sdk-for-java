// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billingbenefits.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.billingbenefits.fluent.models.DiscountInner;

/**
 * An instance of this class provides access to all the operations defined in DiscountsClient.
 */
public interface DiscountsClient {
    /**
     * Create discount.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for creating a discount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DiscountInner>, DiscountInner> beginCreate(String resourceGroupName, String discountName,
        DiscountInner body);

    /**
     * Create discount.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for creating a discount.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DiscountInner>, DiscountInner> beginCreate(String resourceGroupName, String discountName,
        DiscountInner body, Context context);

    /**
     * Create discount.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for creating a discount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DiscountInner create(String resourceGroupName, String discountName, DiscountInner body);

    /**
     * Create discount.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param body Request body for creating a discount.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DiscountInner create(String resourceGroupName, String discountName, DiscountInner body, Context context);

    /**
     * Delete discount. Clears the metadata from the user's view.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String discountName);

    /**
     * Delete discount. Clears the metadata from the user's view.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String discountName, Context context);

    /**
     * Delete discount. Clears the metadata from the user's view.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String discountName);

    /**
     * Delete discount. Clears the metadata from the user's view.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String discountName, Context context);

    /**
     * List discounts at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discount list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DiscountInner> listByResourceGroup(String resourceGroupName);

    /**
     * List discounts at resource group level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discount list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DiscountInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List discounts at subscription level.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discount list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DiscountInner> list();

    /**
     * List discounts at subscription level.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discount list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DiscountInner> list(Context context);

    /**
     * Cancel discount. Stops applying the benefit.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DiscountInner>, DiscountInner> beginCancel(String resourceGroupName, String discountName);

    /**
     * Cancel discount. Stops applying the benefit.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DiscountInner>, DiscountInner> beginCancel(String resourceGroupName, String discountName,
        Context context);

    /**
     * Cancel discount. Stops applying the benefit.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DiscountInner cancel(String resourceGroupName, String discountName);

    /**
     * Cancel discount. Stops applying the benefit.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param discountName Name of the discount.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource definition for Discounts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DiscountInner cancel(String resourceGroupName, String discountName, Context context);

    /**
     * List discounts that are applicable for a given scope. Currently supported scopes: billing accounts.
     * 
     * @param scope The scope at which the benefits are listed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discount list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DiscountInner> scopeList(String scope);

    /**
     * List discounts that are applicable for a given scope. Currently supported scopes: billing accounts.
     * 
     * @param scope The scope at which the benefits are listed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discount list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DiscountInner> scopeList(String scope, Context context);
}
