// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.billingbenefits.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Properties belonging to discounts.
 */
@Fluent
public class DiscountProperties implements JsonSerializable<DiscountProperties> {
    /*
     * This defines whether the entity being created is primary or affiliate. Supported values: primary, affiliate.
     * Validation: Required, must match one of the 2 values.
     */
    private DiscountEntityType entityType = DiscountEntityType.fromString("DiscountProperties");

    /*
     * This is the catalog UPN for the product.
     */
    private String productCode;

    /*
     * Start date of the discount. Value is the date the discount started or will start in the future.
     */
    private OffsetDateTime startAt;

    /*
     * This is the globally unique identifier of the Discount which will not change for the lifetime of the Discount.
     */
    private String systemId;

    /*
     * The state of the resource. Supported values are Pending, Failed, Succeeded, Canceled.
     */
    private DiscountProvisioningState provisioningState;

    /*
     * Billing account resource id where the discount metadata is present.
     */
    private String billingAccountResourceId;

    /*
     * Billing profile resource id where the discount is scoped to.
     */
    private String billingProfileResourceId;

    /*
     * Customer resource id where the discount is scoped to.
     */
    private String customerResourceId;

    /*
     * This defines a user friendly display name for the discount.
     */
    private String displayName;

    /*
     * Represents the current status of the discount.
     */
    private DiscountStatus status;

    /*
     * Fully-qualified identifier of the benefit under applicable benefit list.
     */
    private String benefitResourceId;

    /*
     * List of applied scopes supported for discounts.
     */
    private DiscountAppliedScopeType appliedScopeType;

    /**
     * Creates an instance of DiscountProperties class.
     */
    public DiscountProperties() {
    }

    /**
     * Get the entityType property: This defines whether the entity being created is primary or affiliate. Supported
     * values: primary, affiliate. Validation: Required, must match one of the 2 values.
     * 
     * @return the entityType value.
     */
    public DiscountEntityType entityType() {
        return this.entityType;
    }

    /**
     * Get the productCode property: This is the catalog UPN for the product.
     * 
     * @return the productCode value.
     */
    public String productCode() {
        return this.productCode;
    }

    /**
     * Set the productCode property: This is the catalog UPN for the product.
     * 
     * @param productCode the productCode value to set.
     * @return the DiscountProperties object itself.
     */
    public DiscountProperties withProductCode(String productCode) {
        this.productCode = productCode;
        return this;
    }

    /**
     * Get the startAt property: Start date of the discount. Value is the date the discount started or will start in the
     * future.
     * 
     * @return the startAt value.
     */
    public OffsetDateTime startAt() {
        return this.startAt;
    }

    /**
     * Set the startAt property: Start date of the discount. Value is the date the discount started or will start in the
     * future.
     * 
     * @param startAt the startAt value to set.
     * @return the DiscountProperties object itself.
     */
    public DiscountProperties withStartAt(OffsetDateTime startAt) {
        this.startAt = startAt;
        return this;
    }

    /**
     * Get the systemId property: This is the globally unique identifier of the Discount which will not change for the
     * lifetime of the Discount.
     * 
     * @return the systemId value.
     */
    public String systemId() {
        return this.systemId;
    }

    /**
     * Set the systemId property: This is the globally unique identifier of the Discount which will not change for the
     * lifetime of the Discount.
     * 
     * @param systemId the systemId value to set.
     * @return the DiscountProperties object itself.
     */
    public DiscountProperties withSystemId(String systemId) {
        this.systemId = systemId;
        return this;
    }

    /**
     * Get the provisioningState property: The state of the resource. Supported values are Pending, Failed, Succeeded,
     * Canceled.
     * 
     * @return the provisioningState value.
     */
    public DiscountProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The state of the resource. Supported values are Pending, Failed, Succeeded,
     * Canceled.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the DiscountProperties object itself.
     */
    DiscountProperties withProvisioningState(DiscountProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the billingAccountResourceId property: Billing account resource id where the discount metadata is present.
     * 
     * @return the billingAccountResourceId value.
     */
    public String billingAccountResourceId() {
        return this.billingAccountResourceId;
    }

    /**
     * Set the billingAccountResourceId property: Billing account resource id where the discount metadata is present.
     * 
     * @param billingAccountResourceId the billingAccountResourceId value to set.
     * @return the DiscountProperties object itself.
     */
    DiscountProperties withBillingAccountResourceId(String billingAccountResourceId) {
        this.billingAccountResourceId = billingAccountResourceId;
        return this;
    }

    /**
     * Get the billingProfileResourceId property: Billing profile resource id where the discount is scoped to.
     * 
     * @return the billingProfileResourceId value.
     */
    public String billingProfileResourceId() {
        return this.billingProfileResourceId;
    }

    /**
     * Set the billingProfileResourceId property: Billing profile resource id where the discount is scoped to.
     * 
     * @param billingProfileResourceId the billingProfileResourceId value to set.
     * @return the DiscountProperties object itself.
     */
    DiscountProperties withBillingProfileResourceId(String billingProfileResourceId) {
        this.billingProfileResourceId = billingProfileResourceId;
        return this;
    }

    /**
     * Get the customerResourceId property: Customer resource id where the discount is scoped to.
     * 
     * @return the customerResourceId value.
     */
    public String customerResourceId() {
        return this.customerResourceId;
    }

    /**
     * Set the customerResourceId property: Customer resource id where the discount is scoped to.
     * 
     * @param customerResourceId the customerResourceId value to set.
     * @return the DiscountProperties object itself.
     */
    DiscountProperties withCustomerResourceId(String customerResourceId) {
        this.customerResourceId = customerResourceId;
        return this;
    }

    /**
     * Get the displayName property: This defines a user friendly display name for the discount.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: This defines a user friendly display name for the discount.
     * 
     * @param displayName the displayName value to set.
     * @return the DiscountProperties object itself.
     */
    public DiscountProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the status property: Represents the current status of the discount.
     * 
     * @return the status value.
     */
    public DiscountStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Represents the current status of the discount.
     * 
     * @param status the status value to set.
     * @return the DiscountProperties object itself.
     */
    DiscountProperties withStatus(DiscountStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the benefitResourceId property: Fully-qualified identifier of the benefit under applicable benefit list.
     * 
     * @return the benefitResourceId value.
     */
    public String benefitResourceId() {
        return this.benefitResourceId;
    }

    /**
     * Set the benefitResourceId property: Fully-qualified identifier of the benefit under applicable benefit list.
     * 
     * @param benefitResourceId the benefitResourceId value to set.
     * @return the DiscountProperties object itself.
     */
    DiscountProperties withBenefitResourceId(String benefitResourceId) {
        this.benefitResourceId = benefitResourceId;
        return this;
    }

    /**
     * Get the appliedScopeType property: List of applied scopes supported for discounts.
     * 
     * @return the appliedScopeType value.
     */
    public DiscountAppliedScopeType appliedScopeType() {
        return this.appliedScopeType;
    }

    /**
     * Set the appliedScopeType property: List of applied scopes supported for discounts.
     * 
     * @param appliedScopeType the appliedScopeType value to set.
     * @return the DiscountProperties object itself.
     */
    public DiscountProperties withAppliedScopeType(DiscountAppliedScopeType appliedScopeType) {
        this.appliedScopeType = appliedScopeType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (productCode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property productCode in model DiscountProperties"));
        }
        if (startAt() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property startAt in model DiscountProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiscountProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("productCode", this.productCode);
        jsonWriter.writeStringField("startAt",
            this.startAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startAt));
        jsonWriter.writeStringField("entityType", this.entityType == null ? null : this.entityType.toString());
        jsonWriter.writeStringField("systemId", this.systemId);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("appliedScopeType",
            this.appliedScopeType == null ? null : this.appliedScopeType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscountProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscountProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiscountProperties.
     */
    public static DiscountProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("entityType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Affiliate".equals(discriminatorValue)) {
                    return EntityTypeAffiliateDiscount.fromJson(readerToUse.reset());
                } else if ("Primary".equals(discriminatorValue)) {
                    return EntityTypePrimaryDiscount.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DiscountProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscountProperties deserializedDiscountProperties = new DiscountProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("productCode".equals(fieldName)) {
                    deserializedDiscountProperties.productCode = reader.getString();
                } else if ("startAt".equals(fieldName)) {
                    deserializedDiscountProperties.startAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("entityType".equals(fieldName)) {
                    deserializedDiscountProperties.entityType = DiscountEntityType.fromString(reader.getString());
                } else if ("systemId".equals(fieldName)) {
                    deserializedDiscountProperties.systemId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDiscountProperties.provisioningState
                        = DiscountProvisioningState.fromString(reader.getString());
                } else if ("billingAccountResourceId".equals(fieldName)) {
                    deserializedDiscountProperties.billingAccountResourceId = reader.getString();
                } else if ("billingProfileResourceId".equals(fieldName)) {
                    deserializedDiscountProperties.billingProfileResourceId = reader.getString();
                } else if ("customerResourceId".equals(fieldName)) {
                    deserializedDiscountProperties.customerResourceId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedDiscountProperties.displayName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedDiscountProperties.status = DiscountStatus.fromString(reader.getString());
                } else if ("benefitResourceId".equals(fieldName)) {
                    deserializedDiscountProperties.benefitResourceId = reader.getString();
                } else if ("appliedScopeType".equals(fieldName)) {
                    deserializedDiscountProperties.appliedScopeType
                        = DiscountAppliedScopeType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiscountProperties;
        });
    }
}
