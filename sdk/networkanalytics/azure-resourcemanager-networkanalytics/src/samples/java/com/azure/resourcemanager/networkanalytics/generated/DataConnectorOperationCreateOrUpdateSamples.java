// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.resourcemanager.networkanalytics.models.ComputeConfiguration;
import com.azure.resourcemanager.networkanalytics.models.DataConnectorConfiguration;
import com.azure.resourcemanager.networkanalytics.models.DataRetentionProperties;
import com.azure.resourcemanager.networkanalytics.models.DatasetConfiguration;
import com.azure.resourcemanager.networkanalytics.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkanalytics.models.RetentionProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for DataConnectorOperation CreateOrUpdate. */
public final class DataConnectorOperationCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-04-30/examples/DataConnector_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: DataConnector_CreateOrUpdate_Max.
     *
     * @param manager Entry point to NetworkanalyticsManager.
     */
    public static void dataConnectorCreateOrUpdateMax(
        com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager manager) {
        manager
            .dataConnectorOperations()
            .define("rtjrnwmvydrsclcye")
            .withRegion("lkdprsvepnusozfvpkqqv")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf("key1835", "zatlpsdiibblpxqyxvnxrvk"))
            .withManagedResourceGroupConfiguration(
                new ManagedResourceGroupConfiguration()
                    .withName("flfqtliobufzhuxkhfhj")
                    .withLocation("ecafvspgcuuampnlsrihbgtujgouq"))
            .withProductName("dbdypish")
            .withProductVersion("yybjrksardkllouublivbduzjlwqjk")
            .withProductConnector("yrazxjkyicvx")
            .withProductConnectorDataset("dmlyvcshemlfhmyvofqofw")
            .withDataLakeHouses(Arrays.asList("advwikycmuguhupha"))
            .withDataConnectorConfiguration(
                new DataConnectorConfiguration()
                    .withDataRetentionProperties(
                        new DataRetentionProperties()
                            .withDataExplorer(new RetentionProperties().withRetentionDays(7))
                            .withBronzeStorageAccount(new RetentionProperties().withRetentionDays(7))
                            .withSilverStorageAccount(new RetentionProperties().withRetentionDays(7))
                            .withGoldStorageAccount(new RetentionProperties().withRetentionDays(7)))
                    .withDataset(
                        new DatasetConfiguration()
                            .withDatasetName("ptknewelhh")
                            .withTimestampKey(OffsetDateTime.parse("2023-01-30T18:13:09.337Z"))
                            .withColumnsToMask(Arrays.asList("gdjwh")))
                    .withCompute(new ComputeConfiguration().withFailureAlertEmail("pummjy").withThroughput(20)))
            .create();
    }

    /*
     * x-ms-original-file: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-04-30/examples/DataConnector_CreateOrUpdate_MinimumSet_Gen.json
     */
    /**
     * Sample code: DataConnector_CreateOrUpdate_Min.
     *
     * @param manager Entry point to NetworkanalyticsManager.
     */
    public static void dataConnectorCreateOrUpdateMin(
        com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager manager) {
        manager
            .dataConnectorOperations()
            .define("dndnibjbfuuhrkqhlofcjke")
            .withRegion("lkdprsvepnusozfvpkqqv")
            .withExistingResourceGroup("rgopenapi")
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
