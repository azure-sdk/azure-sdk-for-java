// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.resourcemanager.networkanalytics.models.AzureDataExplorerProperties;
import com.azure.resourcemanager.networkanalytics.models.BlobServices;
import com.azure.resourcemanager.networkanalytics.models.BronzeStorageAccountProperties;
import com.azure.resourcemanager.networkanalytics.models.Bypass;
import com.azure.resourcemanager.networkanalytics.models.CommonStorageAccountProperties;
import com.azure.resourcemanager.networkanalytics.models.DefaultAction;
import com.azure.resourcemanager.networkanalytics.models.IpRules;
import com.azure.resourcemanager.networkanalytics.models.KustoClusterPrincipalAssignments;
import com.azure.resourcemanager.networkanalytics.models.KustoRole;
import com.azure.resourcemanager.networkanalytics.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkanalytics.models.NetworkAcls;
import com.azure.resourcemanager.networkanalytics.models.PrincipalType;
import com.azure.resourcemanager.networkanalytics.models.PrivateEndPoint;
import com.azure.resourcemanager.networkanalytics.models.ResourceAccessRules;
import com.azure.resourcemanager.networkanalytics.models.RestorePolicy;
import com.azure.resourcemanager.networkanalytics.models.VirtualNetworkConfiguration;
import com.azure.resourcemanager.networkanalytics.models.VirtualNetworkRule;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for Storage CreateOrUpdate. */
public final class StorageCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-04-30/examples/Storage_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Storage_CreateOrUpdate_Max.
     *
     * @param manager Entry point to NetworkanalyticsManager.
     */
    public static void storageCreateOrUpdateMax(
        com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager manager) {
        manager
            .storages()
            .define("jnnuodll")
            .withRegion("sybchhoambcfnzflnztjwgfu")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf("key2848", "kfzdswbuaip"))
            .withManagedResourceGroupConfiguration(
                new ManagedResourceGroupConfiguration()
                    .withName("flfqtliobufzhuxkhfhj")
                    .withLocation("ecafvspgcuuampnlsrihbgtujgouq"))
            .withUniqueIdentifierName("suoxyedxsghz")
            .withCommonStorageAccountProperties(
                new CommonStorageAccountProperties()
                    .withPublicNetworkAccess("azfwzowpeno")
                    .withNetworkacls(
                        new NetworkAcls()
                            .withBypass(Bypass.NONE)
                            .withVirtualNetworkRule(
                                Arrays
                                    .asList(
                                        new VirtualNetworkRule()
                                            .withId("xofnybcganrcfiimqreegaqouxfnlm")
                                            .withAction("zwzn")
                                            .withState("tnzqojumw")))
                            .withIpRules(
                                Arrays
                                    .asList(
                                        new IpRules().withValue("kzxsxagfrpdvkjzusofdxko").withAction("wgqxykwovhff")))
                            .withResourceAccessRules(
                                Arrays
                                    .asList(
                                        new ResourceAccessRules()
                                            .withTenantId("ho")
                                            .withResourceId("svitkayadlrrdxrjbzcemnaccoamqq")))
                            .withDefaultActionType(DefaultAction.ALLOW))
                    .withBlobServices(
                        new BlobServices().withRestorePolicy(new RestorePolicy().withEnabled(true).withDays(30)))
                    .withPrivateEndPoint(
                        new PrivateEndPoint()
                            .withSubnetId("qggeyzgrqodijtcutjelsizyxhd")
                            .withPrivateLinkServiceId("zqiirxmwqhakbabwneipctzxk")
                            .withGroupIds(Arrays.asList("itvtdkkpifhfiqhpjb"))
                            .withCustomDnsConfigs("cylmvnl")))
            .withBronzeStorageAccountProperties(new BronzeStorageAccountProperties().withIsSftpEnabled(true))
            .withAzureDataExplorerProperties(
                new AzureDataExplorerProperties()
                    .withVirtualNetworkConfiguration(
                        new VirtualNetworkConfiguration()
                            .withSubnetId("wybwuekeixatewpihdfww")
                            .withEnginePublicIpId("qesxpfxpgzusjhgrjhtbrziv")
                            .withDataManagementPublicIpId("yaunpigmlnsbzjyal"))
                    .withKustoClusterPrincipalAssignments(
                        new KustoClusterPrincipalAssignments()
                            .withSystemIdentityName("dpvrzrysnb")
                            .withRole(KustoRole.ALL_DATABASES_ADMIN)
                            .withPrincipalType(PrincipalType.APP)))
            .create();
    }

    /*
     * x-ms-original-file: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-04-30/examples/Storage_CreateOrUpdate_MinimumSet_Gen.json
     */
    /**
     * Sample code: Storage_CreateOrUpdate_Min.
     *
     * @param manager Entry point to NetworkanalyticsManager.
     */
    public static void storageCreateOrUpdateMin(
        com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager manager) {
        manager
            .storages()
            .define("wssafffmuepzooqsiormn")
            .withRegion("sybchhoambcfnzflnztjwgfu")
            .withExistingResourceGroup("rgopenapi")
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
