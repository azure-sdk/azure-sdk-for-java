// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.networkanalytics.models.AzureDataExplorerProperties;
import com.azure.resourcemanager.networkanalytics.models.BronzeStorageAccountProperties;
import com.azure.resourcemanager.networkanalytics.models.CommonStorageAccountProperties;
import com.azure.resourcemanager.networkanalytics.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkanalytics.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The data lake house resource. */
@Fluent
public final class DataLakeHouseResourcesInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private StorageProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of DataLakeHouseResourcesInner class. */
    public DataLakeHouseResourcesInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     *
     * @return the innerProperties value.
     */
    private StorageProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public DataLakeHouseResourcesInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DataLakeHouseResourcesInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: Storage properties.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed Resource Group configuration.
     *
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().managedResourceGroupConfiguration();
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed Resource Group configuration.
     *
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the DataLakeHouseResourcesInner object itself.
     */
    public DataLakeHouseResourcesInner withManagedResourceGroupConfiguration(
        ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageProperties();
        }
        this.innerProperties().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
        return this;
    }

    /**
     * Get the uniqueIdentifierName property: unique Identifier Name.
     *
     * @return the uniqueIdentifierName value.
     */
    public String uniqueIdentifierName() {
        return this.innerProperties() == null ? null : this.innerProperties().uniqueIdentifierName();
    }

    /**
     * Set the uniqueIdentifierName property: unique Identifier Name.
     *
     * @param uniqueIdentifierName the uniqueIdentifierName value to set.
     * @return the DataLakeHouseResourcesInner object itself.
     */
    public DataLakeHouseResourcesInner withUniqueIdentifierName(String uniqueIdentifierName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageProperties();
        }
        this.innerProperties().withUniqueIdentifierName(uniqueIdentifierName);
        return this;
    }

    /**
     * Get the commonStorageAccountProperties property: Common Storage Account properties.
     *
     * @return the commonStorageAccountProperties value.
     */
    public CommonStorageAccountProperties commonStorageAccountProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().commonStorageAccountProperties();
    }

    /**
     * Set the commonStorageAccountProperties property: Common Storage Account properties.
     *
     * @param commonStorageAccountProperties the commonStorageAccountProperties value to set.
     * @return the DataLakeHouseResourcesInner object itself.
     */
    public DataLakeHouseResourcesInner withCommonStorageAccountProperties(
        CommonStorageAccountProperties commonStorageAccountProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageProperties();
        }
        this.innerProperties().withCommonStorageAccountProperties(commonStorageAccountProperties);
        return this;
    }

    /**
     * Get the bronzeStorageAccountProperties property: Bronze Storage Account properties.
     *
     * @return the bronzeStorageAccountProperties value.
     */
    public BronzeStorageAccountProperties bronzeStorageAccountProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().bronzeStorageAccountProperties();
    }

    /**
     * Set the bronzeStorageAccountProperties property: Bronze Storage Account properties.
     *
     * @param bronzeStorageAccountProperties the bronzeStorageAccountProperties value to set.
     * @return the DataLakeHouseResourcesInner object itself.
     */
    public DataLakeHouseResourcesInner withBronzeStorageAccountProperties(
        BronzeStorageAccountProperties bronzeStorageAccountProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageProperties();
        }
        this.innerProperties().withBronzeStorageAccountProperties(bronzeStorageAccountProperties);
        return this;
    }

    /**
     * Get the azureDataExplorerProperties property: Azure DataExplorer Cluster properties.
     *
     * @return the azureDataExplorerProperties value.
     */
    public AzureDataExplorerProperties azureDataExplorerProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().azureDataExplorerProperties();
    }

    /**
     * Set the azureDataExplorerProperties property: Azure DataExplorer Cluster properties.
     *
     * @param azureDataExplorerProperties the azureDataExplorerProperties value to set.
     * @return the DataLakeHouseResourcesInner object itself.
     */
    public DataLakeHouseResourcesInner withAzureDataExplorerProperties(
        AzureDataExplorerProperties azureDataExplorerProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageProperties();
        }
        this.innerProperties().withAzureDataExplorerProperties(azureDataExplorerProperties);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
