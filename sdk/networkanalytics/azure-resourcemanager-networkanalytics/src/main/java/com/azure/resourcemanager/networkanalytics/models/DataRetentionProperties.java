// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The data retention properties. */
@Fluent
public final class DataRetentionProperties {
    /*
     * The Azure data explorer retention properties
     */
    @JsonProperty(value = "dataExplorer", required = true)
    private RetentionProperties dataExplorer;

    /*
     * The bronze storage account retention properties
     */
    @JsonProperty(value = "bronzeStorageAccount", required = true)
    private RetentionProperties bronzeStorageAccount;

    /*
     * The silver storage account retention properties
     */
    @JsonProperty(value = "silverStorageAccount", required = true)
    private RetentionProperties silverStorageAccount;

    /*
     * The gold storage account retention properties
     */
    @JsonProperty(value = "goldStorageAccount", required = true)
    private RetentionProperties goldStorageAccount;

    /** Creates an instance of DataRetentionProperties class. */
    public DataRetentionProperties() {
    }

    /**
     * Get the dataExplorer property: The Azure data explorer retention properties.
     *
     * @return the dataExplorer value.
     */
    public RetentionProperties dataExplorer() {
        return this.dataExplorer;
    }

    /**
     * Set the dataExplorer property: The Azure data explorer retention properties.
     *
     * @param dataExplorer the dataExplorer value to set.
     * @return the DataRetentionProperties object itself.
     */
    public DataRetentionProperties withDataExplorer(RetentionProperties dataExplorer) {
        this.dataExplorer = dataExplorer;
        return this;
    }

    /**
     * Get the bronzeStorageAccount property: The bronze storage account retention properties.
     *
     * @return the bronzeStorageAccount value.
     */
    public RetentionProperties bronzeStorageAccount() {
        return this.bronzeStorageAccount;
    }

    /**
     * Set the bronzeStorageAccount property: The bronze storage account retention properties.
     *
     * @param bronzeStorageAccount the bronzeStorageAccount value to set.
     * @return the DataRetentionProperties object itself.
     */
    public DataRetentionProperties withBronzeStorageAccount(RetentionProperties bronzeStorageAccount) {
        this.bronzeStorageAccount = bronzeStorageAccount;
        return this;
    }

    /**
     * Get the silverStorageAccount property: The silver storage account retention properties.
     *
     * @return the silverStorageAccount value.
     */
    public RetentionProperties silverStorageAccount() {
        return this.silverStorageAccount;
    }

    /**
     * Set the silverStorageAccount property: The silver storage account retention properties.
     *
     * @param silverStorageAccount the silverStorageAccount value to set.
     * @return the DataRetentionProperties object itself.
     */
    public DataRetentionProperties withSilverStorageAccount(RetentionProperties silverStorageAccount) {
        this.silverStorageAccount = silverStorageAccount;
        return this;
    }

    /**
     * Get the goldStorageAccount property: The gold storage account retention properties.
     *
     * @return the goldStorageAccount value.
     */
    public RetentionProperties goldStorageAccount() {
        return this.goldStorageAccount;
    }

    /**
     * Set the goldStorageAccount property: The gold storage account retention properties.
     *
     * @param goldStorageAccount the goldStorageAccount value to set.
     * @return the DataRetentionProperties object itself.
     */
    public DataRetentionProperties withGoldStorageAccount(RetentionProperties goldStorageAccount) {
        this.goldStorageAccount = goldStorageAccount;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataExplorer() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property dataExplorer in model DataRetentionProperties"));
        } else {
            dataExplorer().validate();
        }
        if (bronzeStorageAccount() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property bronzeStorageAccount in model DataRetentionProperties"));
        } else {
            bronzeStorageAccount().validate();
        }
        if (silverStorageAccount() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property silverStorageAccount in model DataRetentionProperties"));
        } else {
            silverStorageAccount().validate();
        }
        if (goldStorageAccount() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property goldStorageAccount in model DataRetentionProperties"));
        } else {
            goldStorageAccount().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataRetentionProperties.class);
}
