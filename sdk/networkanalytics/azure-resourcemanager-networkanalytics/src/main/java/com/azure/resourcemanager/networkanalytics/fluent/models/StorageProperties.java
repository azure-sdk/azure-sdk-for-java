// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkanalytics.models.AzureDataExplorerProperties;
import com.azure.resourcemanager.networkanalytics.models.BronzeStorageAccountProperties;
import com.azure.resourcemanager.networkanalytics.models.CommonStorageAccountProperties;
import com.azure.resourcemanager.networkanalytics.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkanalytics.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Details of the NetworkAnalytics Storage. */
@Fluent
public final class StorageProperties {
    /*
     * Storage properties
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Managed Resource Group configuration.
     */
    @JsonProperty(value = "managedResourceGroupConfiguration")
    private ManagedResourceGroupConfiguration managedResourceGroupConfiguration;

    /*
     * unique Identifier Name
     */
    @JsonProperty(value = "uniqueIdentifierName", required = true)
    private String uniqueIdentifierName;

    /*
     * Common Storage Account properties.
     */
    @JsonProperty(value = "commonStorageAccountProperties")
    private CommonStorageAccountProperties commonStorageAccountProperties;

    /*
     * Bronze Storage Account properties.
     */
    @JsonProperty(value = "bronzeStorageAccountProperties")
    private BronzeStorageAccountProperties bronzeStorageAccountProperties;

    /*
     * Azure DataExplorer Cluster properties.
     */
    @JsonProperty(value = "azureDataExplorerProperties", required = true)
    private AzureDataExplorerProperties azureDataExplorerProperties;

    /** Creates an instance of StorageProperties class. */
    public StorageProperties() {
    }

    /**
     * Get the provisioningState property: Storage properties.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed Resource Group configuration.
     *
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.managedResourceGroupConfiguration;
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed Resource Group configuration.
     *
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the StorageProperties object itself.
     */
    public StorageProperties withManagedResourceGroupConfiguration(
        ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        this.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
        return this;
    }

    /**
     * Get the uniqueIdentifierName property: unique Identifier Name.
     *
     * @return the uniqueIdentifierName value.
     */
    public String uniqueIdentifierName() {
        return this.uniqueIdentifierName;
    }

    /**
     * Set the uniqueIdentifierName property: unique Identifier Name.
     *
     * @param uniqueIdentifierName the uniqueIdentifierName value to set.
     * @return the StorageProperties object itself.
     */
    public StorageProperties withUniqueIdentifierName(String uniqueIdentifierName) {
        this.uniqueIdentifierName = uniqueIdentifierName;
        return this;
    }

    /**
     * Get the commonStorageAccountProperties property: Common Storage Account properties.
     *
     * @return the commonStorageAccountProperties value.
     */
    public CommonStorageAccountProperties commonStorageAccountProperties() {
        return this.commonStorageAccountProperties;
    }

    /**
     * Set the commonStorageAccountProperties property: Common Storage Account properties.
     *
     * @param commonStorageAccountProperties the commonStorageAccountProperties value to set.
     * @return the StorageProperties object itself.
     */
    public StorageProperties withCommonStorageAccountProperties(
        CommonStorageAccountProperties commonStorageAccountProperties) {
        this.commonStorageAccountProperties = commonStorageAccountProperties;
        return this;
    }

    /**
     * Get the bronzeStorageAccountProperties property: Bronze Storage Account properties.
     *
     * @return the bronzeStorageAccountProperties value.
     */
    public BronzeStorageAccountProperties bronzeStorageAccountProperties() {
        return this.bronzeStorageAccountProperties;
    }

    /**
     * Set the bronzeStorageAccountProperties property: Bronze Storage Account properties.
     *
     * @param bronzeStorageAccountProperties the bronzeStorageAccountProperties value to set.
     * @return the StorageProperties object itself.
     */
    public StorageProperties withBronzeStorageAccountProperties(
        BronzeStorageAccountProperties bronzeStorageAccountProperties) {
        this.bronzeStorageAccountProperties = bronzeStorageAccountProperties;
        return this;
    }

    /**
     * Get the azureDataExplorerProperties property: Azure DataExplorer Cluster properties.
     *
     * @return the azureDataExplorerProperties value.
     */
    public AzureDataExplorerProperties azureDataExplorerProperties() {
        return this.azureDataExplorerProperties;
    }

    /**
     * Set the azureDataExplorerProperties property: Azure DataExplorer Cluster properties.
     *
     * @param azureDataExplorerProperties the azureDataExplorerProperties value to set.
     * @return the StorageProperties object itself.
     */
    public StorageProperties withAzureDataExplorerProperties(AzureDataExplorerProperties azureDataExplorerProperties) {
        this.azureDataExplorerProperties = azureDataExplorerProperties;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedResourceGroupConfiguration() != null) {
            managedResourceGroupConfiguration().validate();
        }
        if (uniqueIdentifierName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property uniqueIdentifierName in model StorageProperties"));
        }
        if (commonStorageAccountProperties() != null) {
            commonStorageAccountProperties().validate();
        }
        if (bronzeStorageAccountProperties() != null) {
            bronzeStorageAccountProperties().validate();
        }
        if (azureDataExplorerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property azureDataExplorerProperties in model StorageProperties"));
        } else {
            azureDataExplorerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageProperties.class);
}
