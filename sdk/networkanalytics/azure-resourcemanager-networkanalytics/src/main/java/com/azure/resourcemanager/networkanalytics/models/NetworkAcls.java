// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Network rule set. */
@Fluent
public final class NetworkAcls {
    /*
     * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices
     */
    @JsonProperty(value = "bypass", required = true)
    private Bypass bypass;

    /*
     * Virtual Network Rule
     */
    @JsonProperty(value = "virtualNetworkRule", required = true)
    private List<VirtualNetworkRule> virtualNetworkRule;

    /*
     * IP rule with specific IP or IP range in CIDR format.
     */
    @JsonProperty(value = "ipRules", required = true)
    private List<IpRules> ipRules;

    /*
     * Resource Access Rules.
     */
    @JsonProperty(value = "resourceAccessRules", required = true)
    private List<ResourceAccessRules> resourceAccessRules;

    /*
     * Default Action
     */
    @JsonProperty(value = "defaultActionType", required = true)
    private DefaultAction defaultActionType;

    /** Creates an instance of NetworkAcls class. */
    public NetworkAcls() {
    }

    /**
     * Get the bypass property: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices.
     *
     * @return the bypass value.
     */
    public Bypass bypass() {
        return this.bypass;
    }

    /**
     * Set the bypass property: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices.
     *
     * @param bypass the bypass value to set.
     * @return the NetworkAcls object itself.
     */
    public NetworkAcls withBypass(Bypass bypass) {
        this.bypass = bypass;
        return this;
    }

    /**
     * Get the virtualNetworkRule property: Virtual Network Rule.
     *
     * @return the virtualNetworkRule value.
     */
    public List<VirtualNetworkRule> virtualNetworkRule() {
        return this.virtualNetworkRule;
    }

    /**
     * Set the virtualNetworkRule property: Virtual Network Rule.
     *
     * @param virtualNetworkRule the virtualNetworkRule value to set.
     * @return the NetworkAcls object itself.
     */
    public NetworkAcls withVirtualNetworkRule(List<VirtualNetworkRule> virtualNetworkRule) {
        this.virtualNetworkRule = virtualNetworkRule;
        return this;
    }

    /**
     * Get the ipRules property: IP rule with specific IP or IP range in CIDR format.
     *
     * @return the ipRules value.
     */
    public List<IpRules> ipRules() {
        return this.ipRules;
    }

    /**
     * Set the ipRules property: IP rule with specific IP or IP range in CIDR format.
     *
     * @param ipRules the ipRules value to set.
     * @return the NetworkAcls object itself.
     */
    public NetworkAcls withIpRules(List<IpRules> ipRules) {
        this.ipRules = ipRules;
        return this;
    }

    /**
     * Get the resourceAccessRules property: Resource Access Rules.
     *
     * @return the resourceAccessRules value.
     */
    public List<ResourceAccessRules> resourceAccessRules() {
        return this.resourceAccessRules;
    }

    /**
     * Set the resourceAccessRules property: Resource Access Rules.
     *
     * @param resourceAccessRules the resourceAccessRules value to set.
     * @return the NetworkAcls object itself.
     */
    public NetworkAcls withResourceAccessRules(List<ResourceAccessRules> resourceAccessRules) {
        this.resourceAccessRules = resourceAccessRules;
        return this;
    }

    /**
     * Get the defaultActionType property: Default Action.
     *
     * @return the defaultActionType value.
     */
    public DefaultAction defaultActionType() {
        return this.defaultActionType;
    }

    /**
     * Set the defaultActionType property: Default Action.
     *
     * @param defaultActionType the defaultActionType value to set.
     * @return the NetworkAcls object itself.
     */
    public NetworkAcls withDefaultActionType(DefaultAction defaultActionType) {
        this.defaultActionType = defaultActionType;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (bypass() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property bypass in model NetworkAcls"));
        }
        if (virtualNetworkRule() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property virtualNetworkRule in model NetworkAcls"));
        } else {
            virtualNetworkRule().forEach(e -> e.validate());
        }
        if (ipRules() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property ipRules in model NetworkAcls"));
        } else {
            ipRules().forEach(e -> e.validate());
        }
        if (resourceAccessRules() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property resourceAccessRules in model NetworkAcls"));
        } else {
            resourceAccessRules().forEach(e -> e.validate());
        }
        if (defaultActionType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property defaultActionType in model NetworkAcls"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkAcls.class);
}
