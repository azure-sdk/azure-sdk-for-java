// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of Storages. */
public interface Storages {
    /**
     * List DataLakeHouseResources resources by subscription ID.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataLakeHouseResources list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DataLakeHouseResources> list();

    /**
     * List DataLakeHouseResources resources by subscription ID.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataLakeHouseResources list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DataLakeHouseResources> list(Context context);

    /**
     * List DataLakeHouseResources resources by resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataLakeHouseResources list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DataLakeHouseResources> listByResourceGroup(String resourceGroupName);

    /**
     * List DataLakeHouseResources resources by resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataLakeHouseResources list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DataLakeHouseResources> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DataLakeHouseResources along with {@link Response}.
     */
    Response<DataLakeHouseResources> getByResourceGroupWithResponse(
        String resourceGroupName, String storageName, Context context);

    /**
     * Get a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DataLakeHouseResources.
     */
    DataLakeHouseResources getByResourceGroup(String resourceGroupName, String storageName);

    /**
     * Delete a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String storageName);

    /**
     * Delete a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String storageName, Context context);

    /**
     * Get a DataLakeHouseResources.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DataLakeHouseResources along with {@link Response}.
     */
    DataLakeHouseResources getById(String id);

    /**
     * Get a DataLakeHouseResources.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DataLakeHouseResources along with {@link Response}.
     */
    Response<DataLakeHouseResources> getByIdWithResponse(String id, Context context);

    /**
     * Delete a DataLakeHouseResources.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a DataLakeHouseResources.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new DataLakeHouseResources resource.
     *
     * @param name resource name.
     * @return the first stage of the new DataLakeHouseResources definition.
     */
    DataLakeHouseResources.DefinitionStages.Blank define(String name);
}
