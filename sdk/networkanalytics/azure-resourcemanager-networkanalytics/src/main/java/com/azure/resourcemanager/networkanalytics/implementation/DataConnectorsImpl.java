// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.networkanalytics.fluent.models.DataConnectorsInner;
import com.azure.resourcemanager.networkanalytics.models.DataConnectorConfiguration;
import com.azure.resourcemanager.networkanalytics.models.DataConnectors;
import com.azure.resourcemanager.networkanalytics.models.DataConnectorsUpdate;
import com.azure.resourcemanager.networkanalytics.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkanalytics.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class DataConnectorsImpl implements DataConnectors, DataConnectors.Definition, DataConnectors.Update {
    private DataConnectorsInner innerObject;

    private final com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.innerModel().managedResourceGroupConfiguration();
    }

    public String productName() {
        return this.innerModel().productName();
    }

    public String productVersion() {
        return this.innerModel().productVersion();
    }

    public String productConnector() {
        return this.innerModel().productConnector();
    }

    public String productConnectorDataset() {
        return this.innerModel().productConnectorDataset();
    }

    public List<String> dataLakeHouses() {
        List<String> inner = this.innerModel().dataLakeHouses();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String dataIngestionPath() {
        return this.innerModel().dataIngestionPath();
    }

    public DataConnectorConfiguration dataConnectorConfiguration() {
        return this.innerModel().dataConnectorConfiguration();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DataConnectorsInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String dataConnectorName;

    private DataConnectorsUpdate updateProperties;

    public DataConnectorsImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public DataConnectors create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorOperations()
                .createOrUpdate(resourceGroupName, dataConnectorName, this.innerModel(), Context.NONE);
        return this;
    }

    public DataConnectors create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorOperations()
                .createOrUpdate(resourceGroupName, dataConnectorName, this.innerModel(), context);
        return this;
    }

    DataConnectorsImpl(String name, com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager) {
        this.innerObject = new DataConnectorsInner();
        this.serviceManager = serviceManager;
        this.dataConnectorName = name;
    }

    public DataConnectorsImpl update() {
        this.updateProperties = new DataConnectorsUpdate();
        return this;
    }

    public DataConnectors apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorOperations()
                .updateWithResponse(resourceGroupName, dataConnectorName, updateProperties, Context.NONE)
                .getValue();
        return this;
    }

    public DataConnectors apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorOperations()
                .updateWithResponse(resourceGroupName, dataConnectorName, updateProperties, context)
                .getValue();
        return this;
    }

    DataConnectorsImpl(
        DataConnectorsInner innerObject,
        com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.dataConnectorName = Utils.getValueFromIdByName(innerObject.id(), "dataConnectors");
    }

    public DataConnectors refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorOperations()
                .getByResourceGroupWithResponse(resourceGroupName, dataConnectorName, Context.NONE)
                .getValue();
        return this;
    }

    public DataConnectors refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataConnectorOperations()
                .getByResourceGroupWithResponse(resourceGroupName, dataConnectorName, context)
                .getValue();
        return this;
    }

    public DataConnectorsImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DataConnectorsImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DataConnectorsImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public DataConnectorsImpl withManagedResourceGroupConfiguration(
        ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        if (isInCreateMode()) {
            this.innerModel().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
            return this;
        } else {
            this.updateProperties.withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
            return this;
        }
    }

    public DataConnectorsImpl withProductName(String productName) {
        this.innerModel().withProductName(productName);
        return this;
    }

    public DataConnectorsImpl withProductVersion(String productVersion) {
        this.innerModel().withProductVersion(productVersion);
        return this;
    }

    public DataConnectorsImpl withProductConnector(String productConnector) {
        this.innerModel().withProductConnector(productConnector);
        return this;
    }

    public DataConnectorsImpl withProductConnectorDataset(String productConnectorDataset) {
        this.innerModel().withProductConnectorDataset(productConnectorDataset);
        return this;
    }

    public DataConnectorsImpl withDataLakeHouses(List<String> dataLakeHouses) {
        this.innerModel().withDataLakeHouses(dataLakeHouses);
        return this;
    }

    public DataConnectorsImpl withDataConnectorConfiguration(DataConnectorConfiguration dataConnectorConfiguration) {
        this.innerModel().withDataConnectorConfiguration(dataConnectorConfiguration);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
