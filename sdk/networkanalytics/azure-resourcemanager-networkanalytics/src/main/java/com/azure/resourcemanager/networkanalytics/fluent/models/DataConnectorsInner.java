// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.networkanalytics.models.DataConnectorConfiguration;
import com.azure.resourcemanager.networkanalytics.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkanalytics.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The data connector resource. */
@Fluent
public final class DataConnectorsInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private DataConnectorsProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of DataConnectorsInner class. */
    public DataConnectorsInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     *
     * @return the innerProperties value.
     */
    private DataConnectorsProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public DataConnectorsInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DataConnectorsInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The data connector provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed resource group configuration.
     *
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().managedResourceGroupConfiguration();
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed resource group configuration.
     *
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the DataConnectorsInner object itself.
     */
    public DataConnectorsInner withManagedResourceGroupConfiguration(
        ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataConnectorsProperties();
        }
        this.innerProperties().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
        return this;
    }

    /**
     * Get the productName property: The network analytics product to which this connector belongs to.
     *
     * @return the productName value.
     */
    public String productName() {
        return this.innerProperties() == null ? null : this.innerProperties().productName();
    }

    /**
     * Set the productName property: The network analytics product to which this connector belongs to.
     *
     * @param productName the productName value to set.
     * @return the DataConnectorsInner object itself.
     */
    public DataConnectorsInner withProductName(String productName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataConnectorsProperties();
        }
        this.innerProperties().withProductName(productName);
        return this;
    }

    /**
     * Get the productVersion property: The version of the corresponding product.
     *
     * @return the productVersion value.
     */
    public String productVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().productVersion();
    }

    /**
     * Set the productVersion property: The version of the corresponding product.
     *
     * @param productVersion the productVersion value to set.
     * @return the DataConnectorsInner object itself.
     */
    public DataConnectorsInner withProductVersion(String productVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataConnectorsProperties();
        }
        this.innerProperties().withProductVersion(productVersion);
        return this;
    }

    /**
     * Get the productConnector property: The product connector.
     *
     * @return the productConnector value.
     */
    public String productConnector() {
        return this.innerProperties() == null ? null : this.innerProperties().productConnector();
    }

    /**
     * Set the productConnector property: The product connector.
     *
     * @param productConnector the productConnector value to set.
     * @return the DataConnectorsInner object itself.
     */
    public DataConnectorsInner withProductConnector(String productConnector) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataConnectorsProperties();
        }
        this.innerProperties().withProductConnector(productConnector);
        return this;
    }

    /**
     * Get the productConnectorDataset property: The product connector dataset.
     *
     * @return the productConnectorDataset value.
     */
    public String productConnectorDataset() {
        return this.innerProperties() == null ? null : this.innerProperties().productConnectorDataset();
    }

    /**
     * Set the productConnectorDataset property: The product connector dataset.
     *
     * @param productConnectorDataset the productConnectorDataset value to set.
     * @return the DataConnectorsInner object itself.
     */
    public DataConnectorsInner withProductConnectorDataset(String productConnectorDataset) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataConnectorsProperties();
        }
        this.innerProperties().withProductConnectorDataset(productConnectorDataset);
        return this;
    }

    /**
     * Get the dataLakeHouses property: An array of the ARM IDs for the Data Lake House resources.
     *
     * @return the dataLakeHouses value.
     */
    public List<String> dataLakeHouses() {
        return this.innerProperties() == null ? null : this.innerProperties().dataLakeHouses();
    }

    /**
     * Set the dataLakeHouses property: An array of the ARM IDs for the Data Lake House resources.
     *
     * @param dataLakeHouses the dataLakeHouses value to set.
     * @return the DataConnectorsInner object itself.
     */
    public DataConnectorsInner withDataLakeHouses(List<String> dataLakeHouses) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataConnectorsProperties();
        }
        this.innerProperties().withDataLakeHouses(dataLakeHouses);
        return this;
    }

    /**
     * Get the dataIngestionPath property: The data ingestion path.
     *
     * @return the dataIngestionPath value.
     */
    public String dataIngestionPath() {
        return this.innerProperties() == null ? null : this.innerProperties().dataIngestionPath();
    }

    /**
     * Get the dataConnectorConfiguration property: The data connector configuration.
     *
     * @return the dataConnectorConfiguration value.
     */
    public DataConnectorConfiguration dataConnectorConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().dataConnectorConfiguration();
    }

    /**
     * Set the dataConnectorConfiguration property: The data connector configuration.
     *
     * @param dataConnectorConfiguration the dataConnectorConfiguration value to set.
     * @return the DataConnectorsInner object itself.
     */
    public DataConnectorsInner withDataConnectorConfiguration(DataConnectorConfiguration dataConnectorConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataConnectorsProperties();
        }
        this.innerProperties().withDataConnectorConfiguration(dataConnectorConfiguration);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
