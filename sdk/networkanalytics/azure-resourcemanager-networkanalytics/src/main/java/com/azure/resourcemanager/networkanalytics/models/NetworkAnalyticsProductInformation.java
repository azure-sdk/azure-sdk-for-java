// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The network analytics product information. */
@Fluent
public final class NetworkAnalyticsProductInformation {
    /*
     * Name of the network analytics product
     */
    @JsonProperty(value = "productName", required = true)
    private String productName;

    /*
     * The available versions for the product
     */
    @JsonProperty(value = "productVersions", required = true)
    private List<String> productVersions;

    /*
     * The connectors supported by the product
     */
    @JsonProperty(value = "productConnectors", required = true)
    private List<NetworkAnalyticsProductConnectorInformation> productConnectors;

    /** Creates an instance of NetworkAnalyticsProductInformation class. */
    public NetworkAnalyticsProductInformation() {
    }

    /**
     * Get the productName property: Name of the network analytics product.
     *
     * @return the productName value.
     */
    public String productName() {
        return this.productName;
    }

    /**
     * Set the productName property: Name of the network analytics product.
     *
     * @param productName the productName value to set.
     * @return the NetworkAnalyticsProductInformation object itself.
     */
    public NetworkAnalyticsProductInformation withProductName(String productName) {
        this.productName = productName;
        return this;
    }

    /**
     * Get the productVersions property: The available versions for the product.
     *
     * @return the productVersions value.
     */
    public List<String> productVersions() {
        return this.productVersions;
    }

    /**
     * Set the productVersions property: The available versions for the product.
     *
     * @param productVersions the productVersions value to set.
     * @return the NetworkAnalyticsProductInformation object itself.
     */
    public NetworkAnalyticsProductInformation withProductVersions(List<String> productVersions) {
        this.productVersions = productVersions;
        return this;
    }

    /**
     * Get the productConnectors property: The connectors supported by the product.
     *
     * @return the productConnectors value.
     */
    public List<NetworkAnalyticsProductConnectorInformation> productConnectors() {
        return this.productConnectors;
    }

    /**
     * Set the productConnectors property: The connectors supported by the product.
     *
     * @param productConnectors the productConnectors value to set.
     * @return the NetworkAnalyticsProductInformation object itself.
     */
    public NetworkAnalyticsProductInformation withProductConnectors(
        List<NetworkAnalyticsProductConnectorInformation> productConnectors) {
        this.productConnectors = productConnectors;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (productName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property productName in model NetworkAnalyticsProductInformation"));
        }
        if (productVersions() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property productVersions in model NetworkAnalyticsProductInformation"));
        }
        if (productConnectors() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property productConnectors in model NetworkAnalyticsProductInformation"));
        } else {
            productConnectors().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkAnalyticsProductInformation.class);
}
