// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkanalytics.fluent.models.MetricsIngestionEndpointResourcesInner;

/** An instance of this class provides access to all the operations defined in MetricsIngestionEndpointsClient. */
public interface MetricsIngestionEndpointsClient {
    /**
     * List MetricsIngestionEndpointResources resources by parent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a MetricsIngestionEndpointResources list operation as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MetricsIngestionEndpointResourcesInner> list(String resourceUri);

    /**
     * List MetricsIngestionEndpointResources resources by parent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a MetricsIngestionEndpointResources list operation as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MetricsIngestionEndpointResourcesInner> list(String resourceUri, Context context);

    /**
     * Get a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MetricsIngestionEndpointResources along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MetricsIngestionEndpointResourcesInner> getWithResponse(String resourceUri, Context context);

    /**
     * Get a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MetricsIngestionEndpointResources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MetricsIngestionEndpointResourcesInner get(String resourceUri);

    /**
     * Create a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an ingestion endpoint for metrics relating to the parent resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MetricsIngestionEndpointResourcesInner>, MetricsIngestionEndpointResourcesInner>
        beginCreateOrUpdate(String resourceUri, MetricsIngestionEndpointResourcesInner resource);

    /**
     * Create a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an ingestion endpoint for metrics relating to the parent resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MetricsIngestionEndpointResourcesInner>, MetricsIngestionEndpointResourcesInner>
        beginCreateOrUpdate(String resourceUri, MetricsIngestionEndpointResourcesInner resource, Context context);

    /**
     * Create a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an ingestion endpoint for metrics relating to the parent resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MetricsIngestionEndpointResourcesInner createOrUpdate(
        String resourceUri, MetricsIngestionEndpointResourcesInner resource);

    /**
     * Create a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an ingestion endpoint for metrics relating to the parent resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MetricsIngestionEndpointResourcesInner createOrUpdate(
        String resourceUri, MetricsIngestionEndpointResourcesInner resource, Context context);

    /**
     * Update a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an ingestion endpoint for metrics relating to the parent resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MetricsIngestionEndpointResourcesInner> updateWithResponse(
        String resourceUri, Object properties, Context context);

    /**
     * Update a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an ingestion endpoint for metrics relating to the parent resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MetricsIngestionEndpointResourcesInner update(String resourceUri, Object properties);

    /**
     * Delete a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri);

    /**
     * Delete a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, Context context);

    /**
     * Delete a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri);

    /**
     * Delete a MetricsIngestionEndpointResources.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, Context context);
}
