// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkanalytics.models.DataConnectorConfiguration;
import com.azure.resourcemanager.networkanalytics.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkanalytics.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Details of the Data Connector Properties. The product details are to be added from the supported values which can be
 * fetched by making a GET call on the Network Analytics Product resource.
 */
@Fluent
public final class DataConnectorsProperties {
    /*
     * The data connector provisioning state
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Managed resource group configuration.
     */
    @JsonProperty(value = "managedResourceGroupConfiguration")
    private ManagedResourceGroupConfiguration managedResourceGroupConfiguration;

    /*
     * The network analytics product to which this connector belongs to
     */
    @JsonProperty(value = "productName", required = true)
    private String productName;

    /*
     * The version of the corresponding product
     */
    @JsonProperty(value = "productVersion", required = true)
    private String productVersion;

    /*
     * The product connector
     */
    @JsonProperty(value = "productConnector", required = true)
    private String productConnector;

    /*
     * The product connector dataset
     */
    @JsonProperty(value = "productConnectorDataset", required = true)
    private String productConnectorDataset;

    /*
     * An array of the ARM IDs for the Data Lake House resources
     */
    @JsonProperty(value = "dataLakeHouses", required = true)
    private List<String> dataLakeHouses;

    /*
     * The data ingestion path
     */
    @JsonProperty(value = "dataIngestionPath", access = JsonProperty.Access.WRITE_ONLY)
    private String dataIngestionPath;

    /*
     * The data connector configuration
     */
    @JsonProperty(value = "dataConnectorConfiguration", required = true)
    private DataConnectorConfiguration dataConnectorConfiguration;

    /** Creates an instance of DataConnectorsProperties class. */
    public DataConnectorsProperties() {
    }

    /**
     * Get the provisioningState property: The data connector provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed resource group configuration.
     *
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.managedResourceGroupConfiguration;
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed resource group configuration.
     *
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the DataConnectorsProperties object itself.
     */
    public DataConnectorsProperties withManagedResourceGroupConfiguration(
        ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        this.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
        return this;
    }

    /**
     * Get the productName property: The network analytics product to which this connector belongs to.
     *
     * @return the productName value.
     */
    public String productName() {
        return this.productName;
    }

    /**
     * Set the productName property: The network analytics product to which this connector belongs to.
     *
     * @param productName the productName value to set.
     * @return the DataConnectorsProperties object itself.
     */
    public DataConnectorsProperties withProductName(String productName) {
        this.productName = productName;
        return this;
    }

    /**
     * Get the productVersion property: The version of the corresponding product.
     *
     * @return the productVersion value.
     */
    public String productVersion() {
        return this.productVersion;
    }

    /**
     * Set the productVersion property: The version of the corresponding product.
     *
     * @param productVersion the productVersion value to set.
     * @return the DataConnectorsProperties object itself.
     */
    public DataConnectorsProperties withProductVersion(String productVersion) {
        this.productVersion = productVersion;
        return this;
    }

    /**
     * Get the productConnector property: The product connector.
     *
     * @return the productConnector value.
     */
    public String productConnector() {
        return this.productConnector;
    }

    /**
     * Set the productConnector property: The product connector.
     *
     * @param productConnector the productConnector value to set.
     * @return the DataConnectorsProperties object itself.
     */
    public DataConnectorsProperties withProductConnector(String productConnector) {
        this.productConnector = productConnector;
        return this;
    }

    /**
     * Get the productConnectorDataset property: The product connector dataset.
     *
     * @return the productConnectorDataset value.
     */
    public String productConnectorDataset() {
        return this.productConnectorDataset;
    }

    /**
     * Set the productConnectorDataset property: The product connector dataset.
     *
     * @param productConnectorDataset the productConnectorDataset value to set.
     * @return the DataConnectorsProperties object itself.
     */
    public DataConnectorsProperties withProductConnectorDataset(String productConnectorDataset) {
        this.productConnectorDataset = productConnectorDataset;
        return this;
    }

    /**
     * Get the dataLakeHouses property: An array of the ARM IDs for the Data Lake House resources.
     *
     * @return the dataLakeHouses value.
     */
    public List<String> dataLakeHouses() {
        return this.dataLakeHouses;
    }

    /**
     * Set the dataLakeHouses property: An array of the ARM IDs for the Data Lake House resources.
     *
     * @param dataLakeHouses the dataLakeHouses value to set.
     * @return the DataConnectorsProperties object itself.
     */
    public DataConnectorsProperties withDataLakeHouses(List<String> dataLakeHouses) {
        this.dataLakeHouses = dataLakeHouses;
        return this;
    }

    /**
     * Get the dataIngestionPath property: The data ingestion path.
     *
     * @return the dataIngestionPath value.
     */
    public String dataIngestionPath() {
        return this.dataIngestionPath;
    }

    /**
     * Get the dataConnectorConfiguration property: The data connector configuration.
     *
     * @return the dataConnectorConfiguration value.
     */
    public DataConnectorConfiguration dataConnectorConfiguration() {
        return this.dataConnectorConfiguration;
    }

    /**
     * Set the dataConnectorConfiguration property: The data connector configuration.
     *
     * @param dataConnectorConfiguration the dataConnectorConfiguration value to set.
     * @return the DataConnectorsProperties object itself.
     */
    public DataConnectorsProperties withDataConnectorConfiguration(
        DataConnectorConfiguration dataConnectorConfiguration) {
        this.dataConnectorConfiguration = dataConnectorConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedResourceGroupConfiguration() != null) {
            managedResourceGroupConfiguration().validate();
        }
        if (productName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property productName in model DataConnectorsProperties"));
        }
        if (productVersion() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property productVersion in model DataConnectorsProperties"));
        }
        if (productConnector() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property productConnector in model DataConnectorsProperties"));
        }
        if (productConnectorDataset() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property productConnectorDataset in model DataConnectorsProperties"));
        }
        if (dataLakeHouses() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property dataLakeHouses in model DataConnectorsProperties"));
        }
        if (dataConnectorConfiguration() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property dataConnectorConfiguration in model DataConnectorsProperties"));
        } else {
            dataConnectorConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataConnectorsProperties.class);
}
