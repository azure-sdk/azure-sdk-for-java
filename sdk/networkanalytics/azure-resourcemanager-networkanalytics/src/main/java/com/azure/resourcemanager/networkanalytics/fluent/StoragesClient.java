// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkanalytics.fluent.models.DataLakeHouseResourcesInner;
import com.azure.resourcemanager.networkanalytics.models.DataLakeHouseResourcesUpdate;

/** An instance of this class provides access to all the operations defined in StoragesClient. */
public interface StoragesClient {
    /**
     * List DataLakeHouseResources resources by subscription ID.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataLakeHouseResources list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DataLakeHouseResourcesInner> list();

    /**
     * List DataLakeHouseResources resources by subscription ID.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataLakeHouseResources list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DataLakeHouseResourcesInner> list(Context context);

    /**
     * List DataLakeHouseResources resources by resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataLakeHouseResources list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DataLakeHouseResourcesInner> listByResourceGroup(String resourceGroupName);

    /**
     * List DataLakeHouseResources resources by resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataLakeHouseResources list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DataLakeHouseResourcesInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DataLakeHouseResources along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DataLakeHouseResourcesInner> getByResourceGroupWithResponse(
        String resourceGroupName, String storageName, Context context);

    /**
     * Get a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DataLakeHouseResources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataLakeHouseResourcesInner getByResourceGroup(String resourceGroupName, String storageName);

    /**
     * Create a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the data lake house resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DataLakeHouseResourcesInner>, DataLakeHouseResourcesInner> beginCreateOrUpdate(
        String resourceGroupName, String storageName, DataLakeHouseResourcesInner resource);

    /**
     * Create a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the data lake house resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DataLakeHouseResourcesInner>, DataLakeHouseResourcesInner> beginCreateOrUpdate(
        String resourceGroupName, String storageName, DataLakeHouseResourcesInner resource, Context context);

    /**
     * Create a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the data lake house resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataLakeHouseResourcesInner createOrUpdate(
        String resourceGroupName, String storageName, DataLakeHouseResourcesInner resource);

    /**
     * Create a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the data lake house resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataLakeHouseResourcesInner createOrUpdate(
        String resourceGroupName, String storageName, DataLakeHouseResourcesInner resource, Context context);

    /**
     * Update a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the data lake house resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DataLakeHouseResourcesInner> updateWithResponse(
        String resourceGroupName, String storageName, DataLakeHouseResourcesUpdate properties, Context context);

    /**
     * Update a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the data lake house resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataLakeHouseResourcesInner update(
        String resourceGroupName, String storageName, DataLakeHouseResourcesUpdate properties);

    /**
     * Delete a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String storageName);

    /**
     * Delete a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String storageName, Context context);

    /**
     * Delete a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String storageName);

    /**
     * Delete a DataLakeHouseResources.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageName The data lake house resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String storageName, Context context);
}
