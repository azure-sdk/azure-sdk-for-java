// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.networkanalytics.fluent.models.DataLakeHouseResourcesInner;
import com.azure.resourcemanager.networkanalytics.models.AzureDataExplorerProperties;
import com.azure.resourcemanager.networkanalytics.models.BronzeStorageAccountProperties;
import com.azure.resourcemanager.networkanalytics.models.CommonStorageAccountProperties;
import com.azure.resourcemanager.networkanalytics.models.DataLakeHouseResources;
import com.azure.resourcemanager.networkanalytics.models.DataLakeHouseResourcesUpdate;
import com.azure.resourcemanager.networkanalytics.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkanalytics.models.ProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class DataLakeHouseResourcesImpl
    implements DataLakeHouseResources, DataLakeHouseResources.Definition, DataLakeHouseResources.Update {
    private DataLakeHouseResourcesInner innerObject;

    private final com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.innerModel().managedResourceGroupConfiguration();
    }

    public String uniqueIdentifierName() {
        return this.innerModel().uniqueIdentifierName();
    }

    public CommonStorageAccountProperties commonStorageAccountProperties() {
        return this.innerModel().commonStorageAccountProperties();
    }

    public BronzeStorageAccountProperties bronzeStorageAccountProperties() {
        return this.innerModel().bronzeStorageAccountProperties();
    }

    public AzureDataExplorerProperties azureDataExplorerProperties() {
        return this.innerModel().azureDataExplorerProperties();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DataLakeHouseResourcesInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String storageName;

    private DataLakeHouseResourcesUpdate updateProperties;

    public DataLakeHouseResourcesImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public DataLakeHouseResources create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorages()
                .createOrUpdate(resourceGroupName, storageName, this.innerModel(), Context.NONE);
        return this;
    }

    public DataLakeHouseResources create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorages()
                .createOrUpdate(resourceGroupName, storageName, this.innerModel(), context);
        return this;
    }

    DataLakeHouseResourcesImpl(
        String name, com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager) {
        this.innerObject = new DataLakeHouseResourcesInner();
        this.serviceManager = serviceManager;
        this.storageName = name;
    }

    public DataLakeHouseResourcesImpl update() {
        this.updateProperties = new DataLakeHouseResourcesUpdate();
        return this;
    }

    public DataLakeHouseResources apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorages()
                .updateWithResponse(resourceGroupName, storageName, updateProperties, Context.NONE)
                .getValue();
        return this;
    }

    public DataLakeHouseResources apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorages()
                .updateWithResponse(resourceGroupName, storageName, updateProperties, context)
                .getValue();
        return this;
    }

    DataLakeHouseResourcesImpl(
        DataLakeHouseResourcesInner innerObject,
        com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.storageName = Utils.getValueFromIdByName(innerObject.id(), "dataLakeHouses");
    }

    public DataLakeHouseResources refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorages()
                .getByResourceGroupWithResponse(resourceGroupName, storageName, Context.NONE)
                .getValue();
        return this;
    }

    public DataLakeHouseResources refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorages()
                .getByResourceGroupWithResponse(resourceGroupName, storageName, context)
                .getValue();
        return this;
    }

    public DataLakeHouseResourcesImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DataLakeHouseResourcesImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DataLakeHouseResourcesImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public DataLakeHouseResourcesImpl withManagedResourceGroupConfiguration(
        ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        if (isInCreateMode()) {
            this.innerModel().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
            return this;
        } else {
            this.updateProperties.withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
            return this;
        }
    }

    public DataLakeHouseResourcesImpl withUniqueIdentifierName(String uniqueIdentifierName) {
        this.innerModel().withUniqueIdentifierName(uniqueIdentifierName);
        return this;
    }

    public DataLakeHouseResourcesImpl withCommonStorageAccountProperties(
        CommonStorageAccountProperties commonStorageAccountProperties) {
        this.innerModel().withCommonStorageAccountProperties(commonStorageAccountProperties);
        return this;
    }

    public DataLakeHouseResourcesImpl withBronzeStorageAccountProperties(
        BronzeStorageAccountProperties bronzeStorageAccountProperties) {
        this.innerModel().withBronzeStorageAccountProperties(bronzeStorageAccountProperties);
        return this;
    }

    public DataLakeHouseResourcesImpl withAzureDataExplorerProperties(
        AzureDataExplorerProperties azureDataExplorerProperties) {
        this.innerModel().withAzureDataExplorerProperties(azureDataExplorerProperties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
