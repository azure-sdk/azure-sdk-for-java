// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Private End Point Resource. */
@Fluent
public final class PrivateEndPoint {
    /*
     * Resource ID of a subnet
     */
    @JsonProperty(value = "subnetId", required = true)
    private String subnetId;

    /*
     * The private link resource service id
     */
    @JsonProperty(value = "privateLinkServiceId", required = true)
    private String privateLinkServiceId;

    /*
     * The private link resource group id.
     */
    @JsonProperty(value = "groupIds", required = true)
    private List<String> groupIds;

    /*
     * The private link resource customDnsConfigs.
     */
    @JsonProperty(value = "customDnsConfigs", required = true)
    private String customDnsConfigs;

    /** Creates an instance of PrivateEndPoint class. */
    public PrivateEndPoint() {
    }

    /**
     * Get the subnetId property: Resource ID of a subnet.
     *
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Resource ID of a subnet.
     *
     * @param subnetId the subnetId value to set.
     * @return the PrivateEndPoint object itself.
     */
    public PrivateEndPoint withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the privateLinkServiceId property: The private link resource service id.
     *
     * @return the privateLinkServiceId value.
     */
    public String privateLinkServiceId() {
        return this.privateLinkServiceId;
    }

    /**
     * Set the privateLinkServiceId property: The private link resource service id.
     *
     * @param privateLinkServiceId the privateLinkServiceId value to set.
     * @return the PrivateEndPoint object itself.
     */
    public PrivateEndPoint withPrivateLinkServiceId(String privateLinkServiceId) {
        this.privateLinkServiceId = privateLinkServiceId;
        return this;
    }

    /**
     * Get the groupIds property: The private link resource group id.
     *
     * @return the groupIds value.
     */
    public List<String> groupIds() {
        return this.groupIds;
    }

    /**
     * Set the groupIds property: The private link resource group id.
     *
     * @param groupIds the groupIds value to set.
     * @return the PrivateEndPoint object itself.
     */
    public PrivateEndPoint withGroupIds(List<String> groupIds) {
        this.groupIds = groupIds;
        return this;
    }

    /**
     * Get the customDnsConfigs property: The private link resource customDnsConfigs.
     *
     * @return the customDnsConfigs value.
     */
    public String customDnsConfigs() {
        return this.customDnsConfigs;
    }

    /**
     * Set the customDnsConfigs property: The private link resource customDnsConfigs.
     *
     * @param customDnsConfigs the customDnsConfigs value to set.
     * @return the PrivateEndPoint object itself.
     */
    public PrivateEndPoint withCustomDnsConfigs(String customDnsConfigs) {
        this.customDnsConfigs = customDnsConfigs;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property subnetId in model PrivateEndPoint"));
        }
        if (privateLinkServiceId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property privateLinkServiceId in model PrivateEndPoint"));
        }
        if (groupIds() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property groupIds in model PrivateEndPoint"));
        }
        if (customDnsConfigs() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property customDnsConfigs in model PrivateEndPoint"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PrivateEndPoint.class);
}
