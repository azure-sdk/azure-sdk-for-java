// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkanalytics.fluent.MetricsIngestionEndpointsClient;
import com.azure.resourcemanager.networkanalytics.fluent.models.MetricsIngestionEndpointResourcesInner;
import com.azure.resourcemanager.networkanalytics.models.MetricsIngestionEndpointResources;
import com.azure.resourcemanager.networkanalytics.models.MetricsIngestionEndpoints;

public final class MetricsIngestionEndpointsImpl implements MetricsIngestionEndpoints {
    private static final ClientLogger LOGGER = new ClientLogger(MetricsIngestionEndpointsImpl.class);

    private final MetricsIngestionEndpointsClient innerClient;

    private final com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager;

    public MetricsIngestionEndpointsImpl(
        MetricsIngestionEndpointsClient innerClient,
        com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<MetricsIngestionEndpointResources> list(String resourceUri) {
        PagedIterable<MetricsIngestionEndpointResourcesInner> inner = this.serviceClient().list(resourceUri);
        return Utils.mapPage(inner, inner1 -> new MetricsIngestionEndpointResourcesImpl(inner1, this.manager()));
    }

    public PagedIterable<MetricsIngestionEndpointResources> list(String resourceUri, Context context) {
        PagedIterable<MetricsIngestionEndpointResourcesInner> inner = this.serviceClient().list(resourceUri, context);
        return Utils.mapPage(inner, inner1 -> new MetricsIngestionEndpointResourcesImpl(inner1, this.manager()));
    }

    public Response<MetricsIngestionEndpointResources> getWithResponse(String resourceUri, Context context) {
        Response<MetricsIngestionEndpointResourcesInner> inner =
            this.serviceClient().getWithResponse(resourceUri, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MetricsIngestionEndpointResourcesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MetricsIngestionEndpointResources get(String resourceUri) {
        MetricsIngestionEndpointResourcesInner inner = this.serviceClient().get(resourceUri);
        if (inner != null) {
            return new MetricsIngestionEndpointResourcesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MetricsIngestionEndpointResources createOrUpdate(
        String resourceUri, MetricsIngestionEndpointResourcesInner resource) {
        MetricsIngestionEndpointResourcesInner inner = this.serviceClient().createOrUpdate(resourceUri, resource);
        if (inner != null) {
            return new MetricsIngestionEndpointResourcesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MetricsIngestionEndpointResources createOrUpdate(
        String resourceUri, MetricsIngestionEndpointResourcesInner resource, Context context) {
        MetricsIngestionEndpointResourcesInner inner =
            this.serviceClient().createOrUpdate(resourceUri, resource, context);
        if (inner != null) {
            return new MetricsIngestionEndpointResourcesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MetricsIngestionEndpointResources> updateWithResponse(
        String resourceUri, Object properties, Context context) {
        Response<MetricsIngestionEndpointResourcesInner> inner =
            this.serviceClient().updateWithResponse(resourceUri, properties, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MetricsIngestionEndpointResourcesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MetricsIngestionEndpointResources update(String resourceUri, Object properties) {
        MetricsIngestionEndpointResourcesInner inner = this.serviceClient().update(resourceUri, properties);
        if (inner != null) {
            return new MetricsIngestionEndpointResourcesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceUri) {
        this.serviceClient().delete(resourceUri);
    }

    public void delete(String resourceUri, Context context) {
        this.serviceClient().delete(resourceUri, context);
    }

    private MetricsIngestionEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager manager() {
        return this.serviceManager;
    }
}
