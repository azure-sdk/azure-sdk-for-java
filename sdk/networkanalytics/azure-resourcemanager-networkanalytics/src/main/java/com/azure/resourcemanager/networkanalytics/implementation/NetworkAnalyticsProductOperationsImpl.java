// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkanalytics.fluent.NetworkAnalyticsProductOperationsClient;
import com.azure.resourcemanager.networkanalytics.fluent.models.NetworkAnalyticsProductsInner;
import com.azure.resourcemanager.networkanalytics.models.NetworkAnalyticsProductOperations;
import com.azure.resourcemanager.networkanalytics.models.NetworkAnalyticsProducts;

public final class NetworkAnalyticsProductOperationsImpl implements NetworkAnalyticsProductOperations {
    private static final ClientLogger LOGGER = new ClientLogger(NetworkAnalyticsProductOperationsImpl.class);

    private final NetworkAnalyticsProductOperationsClient innerClient;

    private final com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager;

    public NetworkAnalyticsProductOperationsImpl(
        NetworkAnalyticsProductOperationsClient innerClient,
        com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<NetworkAnalyticsProducts> list() {
        PagedIterable<NetworkAnalyticsProductsInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new NetworkAnalyticsProductsImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkAnalyticsProducts> list(Context context) {
        PagedIterable<NetworkAnalyticsProductsInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new NetworkAnalyticsProductsImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkAnalyticsProducts> listByResourceGroup(String resourceGroupName) {
        PagedIterable<NetworkAnalyticsProductsInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new NetworkAnalyticsProductsImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkAnalyticsProducts> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<NetworkAnalyticsProductsInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new NetworkAnalyticsProductsImpl(inner1, this.manager()));
    }

    public Response<NetworkAnalyticsProducts> getByResourceGroupWithResponse(
        String resourceGroupName, Context context) {
        Response<NetworkAnalyticsProductsInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkAnalyticsProductsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkAnalyticsProducts getByResourceGroup(String resourceGroupName) {
        NetworkAnalyticsProductsInner inner = this.serviceClient().getByResourceGroup(resourceGroupName);
        if (inner != null) {
            return new NetworkAnalyticsProductsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public NetworkAnalyticsProducts createOrUpdate(String resourceGroupName, NetworkAnalyticsProductsInner resource) {
        NetworkAnalyticsProductsInner inner = this.serviceClient().createOrUpdate(resourceGroupName, resource);
        if (inner != null) {
            return new NetworkAnalyticsProductsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public NetworkAnalyticsProducts createOrUpdate(
        String resourceGroupName, NetworkAnalyticsProductsInner resource, Context context) {
        NetworkAnalyticsProductsInner inner = this.serviceClient().createOrUpdate(resourceGroupName, resource, context);
        if (inner != null) {
            return new NetworkAnalyticsProductsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NetworkAnalyticsProducts> updateWithResponse(
        String resourceGroupName, Object properties, Context context) {
        Response<NetworkAnalyticsProductsInner> inner =
            this.serviceClient().updateWithResponse(resourceGroupName, properties, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkAnalyticsProductsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkAnalyticsProducts update(String resourceGroupName, Object properties) {
        NetworkAnalyticsProductsInner inner = this.serviceClient().update(resourceGroupName, properties);
        if (inner != null) {
            return new NetworkAnalyticsProductsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName) {
        this.serviceClient().delete(resourceGroupName);
    }

    public void delete(String resourceGroupName, Context context) {
        this.serviceClient().delete(resourceGroupName, context);
    }

    private NetworkAnalyticsProductOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager manager() {
        return this.serviceManager;
    }
}
