// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.baremetalinfrastructure.generated;

import com.azure.resourcemanager.baremetalinfrastructure.models.AzureBareMetalHardwareTypeNamesEnum;
import com.azure.resourcemanager.baremetalinfrastructure.models.AzureBareMetalInstancePowerStateEnum;
import com.azure.resourcemanager.baremetalinfrastructure.models.AzureBareMetalInstanceSizeNamesEnum;
import com.azure.resourcemanager.baremetalinfrastructure.models.HardwareProfile;
import com.azure.resourcemanager.baremetalinfrastructure.models.NetworkInterface;
import com.azure.resourcemanager.baremetalinfrastructure.models.NetworkProfile;
import com.azure.resourcemanager.baremetalinfrastructure.models.OSProfile;
import com.azure.resourcemanager.baremetalinfrastructure.models.StorageProfile;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for AzureBareMetalInstances Create.
 */
public final class AzureBareMetalInstancesCreateSamples {
    /*
     * x-ms-original-file:
     * specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/preview/2024-08-01-
     * preview/examples/AzureBareMetalInstances_Create.json
     */
    /**
     * Sample code: AzureBareMetalInstances_Create.
     * 
     * @param manager Entry point to BareMetalInfrastructureManager.
     */
    public static void azureBareMetalInstancesCreate(
        com.azure.resourcemanager.baremetalinfrastructure.BareMetalInfrastructureManager manager) {
        manager.azureBareMetalInstances()
            .define("myBMIInstance")
            .withRegion("westus")
            .withExistingResourceGroup("myResourceGroup")
            .withTags(mapOf("testkey", "fakeTokenPlaceholder"))
            .withHardwareProfile(new HardwareProfile().withHardwareType(AzureBareMetalHardwareTypeNamesEnum.CISCO_UCS)
                .withAzureBareMetalInstanceSize(AzureBareMetalInstanceSizeNamesEnum.S72))
            .withStorageProfile(new StorageProfile().withNfsIpAddress("200.200.200.200"))
            .withOsProfile(new OSProfile().withComputerName("myComputerName")
                .withOsType("SUSE")
                .withVersion("12 SP1")
                .withSshPublicKey("fakeTokenPlaceholder"))
            .withNetworkProfile(new NetworkProfile()
                .withNetworkInterfaces(Arrays.asList(new NetworkInterface().withIpAddress("100.100.100.100")))
                .withCircuitId(
                    "/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Network/expressRouteCircuit"))
            .withAzureBareMetalInstanceId("23415635-4d7e-41dc-9598-8194f22c24e1")
            .withPowerState(AzureBareMetalInstancePowerStateEnum.STARTED)
            .withProximityPlacementGroup(
                "/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myplacementgroup")
            .withHwRevision("Rev 3")
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
