// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Information required to execute the import operation.
 */
@Fluent
public final class AmlFilesystemImportInfo {
    /*
     * Lustre file system path to import into relative to the file system root. Specify '/' to import all data.
     */
    @JsonProperty(value = "filesystemPath")
    private String filesystemPath;

    /*
     * How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but
     * a file is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do
     * anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the
     * import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or was not
     * previously imported. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored
     * but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a
     * thorough explanation of these resolution modes.
     */
    @JsonProperty(value = "conflictResolutionMode")
    private ConflictResolutionMode conflictResolutionMode;

    /**
     * Creates an instance of AmlFilesystemImportInfo class.
     */
    public AmlFilesystemImportInfo() {
    }

    /**
     * Get the filesystemPath property: Lustre file system path to import into relative to the file system root.
     * Specify '/' to import all data.
     * 
     * @return the filesystemPath value.
     */
    public String filesystemPath() {
        return this.filesystemPath;
    }

    /**
     * Set the filesystemPath property: Lustre file system path to import into relative to the file system root.
     * Specify '/' to import all data.
     * 
     * @param filesystemPath the filesystemPath value to set.
     * @return the AmlFilesystemImportInfo object itself.
     */
    public AmlFilesystemImportInfo withFilesystemPath(String filesystemPath) {
        this.filesystemPath = filesystemPath;
        return this;
    }

    /**
     * Get the conflictResolutionMode property: How the import job will handle conflicts. For example, if the import
     * job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the
     * import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass
     * over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is
     * a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to
     * include releasing files that had been restored but were not dirty. Please reference
     * https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution
     * modes.
     * 
     * @return the conflictResolutionMode value.
     */
    public ConflictResolutionMode conflictResolutionMode() {
        return this.conflictResolutionMode;
    }

    /**
     * Set the conflictResolutionMode property: How the import job will handle conflicts. For example, if the import
     * job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the
     * import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass
     * over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is
     * a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to
     * include releasing files that had been restored but were not dirty. Please reference
     * https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution
     * modes.
     * 
     * @param conflictResolutionMode the conflictResolutionMode value to set.
     * @return the AmlFilesystemImportInfo object itself.
     */
    public AmlFilesystemImportInfo withConflictResolutionMode(ConflictResolutionMode conflictResolutionMode) {
        this.conflictResolutionMode = conflictResolutionMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
