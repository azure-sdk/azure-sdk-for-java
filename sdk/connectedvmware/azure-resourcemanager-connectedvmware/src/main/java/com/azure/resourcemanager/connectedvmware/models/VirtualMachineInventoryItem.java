// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * The VM inventory item.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "inventoryType",
    defaultImpl = VirtualMachineInventoryItem.class,
    visible = true)
@JsonTypeName("VirtualMachine")
@Fluent
public final class VirtualMachineInventoryItem extends InventoryItemProperties {
    /*
     * They inventory type.
     */
    @JsonTypeId
    @JsonProperty(value = "inventoryType", required = true)
    private InventoryType inventoryType = InventoryType.VIRTUAL_MACHINE;

    /*
     * Gets or sets the type of the os.
     */
    @JsonProperty(value = "osType")
    private OsType osType;

    /*
     * Gets or sets os name.
     */
    @JsonProperty(value = "osName")
    private String osName;

    /*
     * Gets or sets the nic ip addresses.
     */
    @JsonProperty(value = "ipAddresses")
    private List<String> ipAddresses;

    /*
     * Gets or sets the folder path of the vm.
     */
    @JsonProperty(value = "folderPath")
    private String folderPath;

    /*
     * Host inventory resource details.
     */
    @JsonProperty(value = "host")
    private InventoryItemDetails host;

    /*
     * ResourcePool inventory resource details.
     */
    @JsonProperty(value = "resourcePool")
    private InventoryItemDetails resourcePool;

    /*
     * Cluster inventory resource details.
     */
    @JsonProperty(value = "cluster")
    private InventoryItemDetails cluster;

    /*
     * Gets or sets the instance uuid of the vm.
     */
    @JsonProperty(value = "instanceUuid")
    private String instanceUuid;

    /*
     * Gets or sets the SMBIOS UUID of the vm.
     */
    @JsonProperty(value = "smbiosUuid")
    private String smbiosUuid;

    /*
     * Gets the power state of the virtual machine.
     */
    @JsonProperty(value = "powerState", access = JsonProperty.Access.WRITE_ONLY)
    private String powerState;

    /*
     * Gets or sets the current running status of VMware Tools running in the guest operating system.
     */
    @JsonProperty(value = "toolsRunningStatus", access = JsonProperty.Access.WRITE_ONLY)
    private String toolsRunningStatus;

    /*
     * Gets or sets the current version status of VMware Tools installed in the guest operating system.
     */
    @JsonProperty(value = "toolsVersionStatus", access = JsonProperty.Access.WRITE_ONLY)
    private String toolsVersionStatus;

    /*
     * Gets or sets the current version of VMware Tools.
     */
    @JsonProperty(value = "toolsVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String toolsVersion;

    /*
     * Firmware type
     */
    @JsonProperty(value = "firmwareType", access = JsonProperty.Access.WRITE_ONLY)
    private FirmwareType firmwareType;

    /*
     * Gets a value indicating whether change tracking is supported.
     */
    @JsonProperty(value = "changeTrackingSupported", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean changeTrackingSupported;

    /*
     * Gets a value indicating whether change tracking is enabled.
     */
    @JsonProperty(value = "changeTrackingEnabled", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean changeTrackingEnabled;

    /*
     * Gets a value indicating the maximum possible number of snapshots.
     */
    @JsonProperty(value = "maxSnapshots", access = JsonProperty.Access.WRITE_ONLY)
    private Integer maxSnapshots;

    /*
     * Gets a value indicating the number of snapshots on the vm.
     */
    @JsonProperty(value = "numberOfSnapshots", access = JsonProperty.Access.WRITE_ONLY)
    private Integer numberOfSnapshots;

    /*
     * Gets or sets the disk Enabled UUID of the vm.
     */
    @JsonProperty(value = "diskEnabledUuid", access = JsonProperty.Access.WRITE_ONLY)
    private String diskEnabledUuid;

    /*
     * Gets the computer name.
     */
    @JsonProperty(value = "computerName", access = JsonProperty.Access.WRITE_ONLY)
    private String computerName;

    /*
     * Gets or sets memory size in MBs for the vm.
     */
    @JsonProperty(value = "memorySizeMB", access = JsonProperty.Access.WRITE_ONLY)
    private Integer memorySizeMB;

    /*
     * Gets or sets the number of vCPU for the vm.
     */
    @JsonProperty(value = "numCPUs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer numCPUs;

    /*
     * Storage properties.
     */
    @JsonProperty(value = "storageProfile")
    private StorageProfileInventory storageProfile;

    /*
     * Network properties.
     */
    @JsonProperty(value = "networkProfile")
    private NetworkProfileInventory networkProfile;

    /**
     * Creates an instance of VirtualMachineInventoryItem class.
     */
    public VirtualMachineInventoryItem() {
    }

    /**
     * Get the inventoryType property: They inventory type.
     * 
     * @return the inventoryType value.
     */
    @Override
    public InventoryType inventoryType() {
        return this.inventoryType;
    }

    /**
     * Get the osType property: Gets or sets the type of the os.
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Set the osType property: Gets or sets the type of the os.
     * 
     * @param osType the osType value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withOsType(OsType osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the osName property: Gets or sets os name.
     * 
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Set the osName property: Gets or sets os name.
     * 
     * @param osName the osName value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withOsName(String osName) {
        this.osName = osName;
        return this;
    }

    /**
     * Get the ipAddresses property: Gets or sets the nic ip addresses.
     * 
     * @return the ipAddresses value.
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Set the ipAddresses property: Gets or sets the nic ip addresses.
     * 
     * @param ipAddresses the ipAddresses value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withIpAddresses(List<String> ipAddresses) {
        this.ipAddresses = ipAddresses;
        return this;
    }

    /**
     * Get the folderPath property: Gets or sets the folder path of the vm.
     * 
     * @return the folderPath value.
     */
    public String folderPath() {
        return this.folderPath;
    }

    /**
     * Set the folderPath property: Gets or sets the folder path of the vm.
     * 
     * @param folderPath the folderPath value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withFolderPath(String folderPath) {
        this.folderPath = folderPath;
        return this;
    }

    /**
     * Get the host property: Host inventory resource details.
     * 
     * @return the host value.
     */
    public InventoryItemDetails host() {
        return this.host;
    }

    /**
     * Set the host property: Host inventory resource details.
     * 
     * @param host the host value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withHost(InventoryItemDetails host) {
        this.host = host;
        return this;
    }

    /**
     * Get the resourcePool property: ResourcePool inventory resource details.
     * 
     * @return the resourcePool value.
     */
    public InventoryItemDetails resourcePool() {
        return this.resourcePool;
    }

    /**
     * Set the resourcePool property: ResourcePool inventory resource details.
     * 
     * @param resourcePool the resourcePool value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withResourcePool(InventoryItemDetails resourcePool) {
        this.resourcePool = resourcePool;
        return this;
    }

    /**
     * Get the cluster property: Cluster inventory resource details.
     * 
     * @return the cluster value.
     */
    public InventoryItemDetails cluster() {
        return this.cluster;
    }

    /**
     * Set the cluster property: Cluster inventory resource details.
     * 
     * @param cluster the cluster value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withCluster(InventoryItemDetails cluster) {
        this.cluster = cluster;
        return this;
    }

    /**
     * Get the instanceUuid property: Gets or sets the instance uuid of the vm.
     * 
     * @return the instanceUuid value.
     */
    public String instanceUuid() {
        return this.instanceUuid;
    }

    /**
     * Set the instanceUuid property: Gets or sets the instance uuid of the vm.
     * 
     * @param instanceUuid the instanceUuid value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withInstanceUuid(String instanceUuid) {
        this.instanceUuid = instanceUuid;
        return this;
    }

    /**
     * Get the smbiosUuid property: Gets or sets the SMBIOS UUID of the vm.
     * 
     * @return the smbiosUuid value.
     */
    public String smbiosUuid() {
        return this.smbiosUuid;
    }

    /**
     * Set the smbiosUuid property: Gets or sets the SMBIOS UUID of the vm.
     * 
     * @param smbiosUuid the smbiosUuid value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withSmbiosUuid(String smbiosUuid) {
        this.smbiosUuid = smbiosUuid;
        return this;
    }

    /**
     * Get the powerState property: Gets the power state of the virtual machine.
     * 
     * @return the powerState value.
     */
    public String powerState() {
        return this.powerState;
    }

    /**
     * Get the toolsRunningStatus property: Gets or sets the current running status of VMware Tools running in the guest
     * operating system.
     * 
     * @return the toolsRunningStatus value.
     */
    public String toolsRunningStatus() {
        return this.toolsRunningStatus;
    }

    /**
     * Get the toolsVersionStatus property: Gets or sets the current version status of VMware Tools installed in the
     * guest operating system.
     * 
     * @return the toolsVersionStatus value.
     */
    public String toolsVersionStatus() {
        return this.toolsVersionStatus;
    }

    /**
     * Get the toolsVersion property: Gets or sets the current version of VMware Tools.
     * 
     * @return the toolsVersion value.
     */
    public String toolsVersion() {
        return this.toolsVersion;
    }

    /**
     * Get the firmwareType property: Firmware type.
     * 
     * @return the firmwareType value.
     */
    public FirmwareType firmwareType() {
        return this.firmwareType;
    }

    /**
     * Get the changeTrackingSupported property: Gets a value indicating whether change tracking is supported.
     * 
     * @return the changeTrackingSupported value.
     */
    public Boolean changeTrackingSupported() {
        return this.changeTrackingSupported;
    }

    /**
     * Get the changeTrackingEnabled property: Gets a value indicating whether change tracking is enabled.
     * 
     * @return the changeTrackingEnabled value.
     */
    public Boolean changeTrackingEnabled() {
        return this.changeTrackingEnabled;
    }

    /**
     * Get the maxSnapshots property: Gets a value indicating the maximum possible number of snapshots.
     * 
     * @return the maxSnapshots value.
     */
    public Integer maxSnapshots() {
        return this.maxSnapshots;
    }

    /**
     * Get the numberOfSnapshots property: Gets a value indicating the number of snapshots on the vm.
     * 
     * @return the numberOfSnapshots value.
     */
    public Integer numberOfSnapshots() {
        return this.numberOfSnapshots;
    }

    /**
     * Get the diskEnabledUuid property: Gets or sets the disk Enabled UUID of the vm.
     * 
     * @return the diskEnabledUuid value.
     */
    public String diskEnabledUuid() {
        return this.diskEnabledUuid;
    }

    /**
     * Get the computerName property: Gets the computer name.
     * 
     * @return the computerName value.
     */
    public String computerName() {
        return this.computerName;
    }

    /**
     * Get the memorySizeMB property: Gets or sets memory size in MBs for the vm.
     * 
     * @return the memorySizeMB value.
     */
    public Integer memorySizeMB() {
        return this.memorySizeMB;
    }

    /**
     * Get the numCPUs property: Gets or sets the number of vCPU for the vm.
     * 
     * @return the numCPUs value.
     */
    public Integer numCPUs() {
        return this.numCPUs;
    }

    /**
     * Get the storageProfile property: Storage properties.
     * 
     * @return the storageProfile value.
     */
    public StorageProfileInventory storageProfile() {
        return this.storageProfile;
    }

    /**
     * Set the storageProfile property: Storage properties.
     * 
     * @param storageProfile the storageProfile value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withStorageProfile(StorageProfileInventory storageProfile) {
        this.storageProfile = storageProfile;
        return this;
    }

    /**
     * Get the networkProfile property: Network properties.
     * 
     * @return the networkProfile value.
     */
    public NetworkProfileInventory networkProfile() {
        return this.networkProfile;
    }

    /**
     * Set the networkProfile property: Network properties.
     * 
     * @param networkProfile the networkProfile value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withNetworkProfile(NetworkProfileInventory networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineInventoryItem withManagedResourceId(String managedResourceId) {
        super.withManagedResourceId(managedResourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineInventoryItem withMoRefId(String moRefId) {
        super.withMoRefId(moRefId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineInventoryItem withMoName(String moName) {
        super.withMoName(moName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (host() != null) {
            host().validate();
        }
        if (resourcePool() != null) {
            resourcePool().validate();
        }
        if (cluster() != null) {
            cluster().validate();
        }
        if (storageProfile() != null) {
            storageProfile().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
    }
}
