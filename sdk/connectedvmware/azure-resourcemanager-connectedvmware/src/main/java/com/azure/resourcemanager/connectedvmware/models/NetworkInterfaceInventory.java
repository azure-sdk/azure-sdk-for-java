// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Inventory Network Interface model.
 */
@Immutable
public final class NetworkInterfaceInventory implements JsonSerializable<NetworkInterfaceInventory> {
    /*
     * Gets or sets the label of the virtual network in vCenter that the nic is connected to.
     */
    private String label;

    /*
     * Gets or sets the nic ip addresses.
     */
    private List<String> ipAddresses;

    /*
     * Gets or sets the NIC MAC address.
     */
    private String macAddress;

    /*
     * NIC type
     */
    private NicType nicType;

    /*
     * Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network
     * that the nic is connected to.
     */
    private String networkMoRefId;

    /*
     * Gets or sets the name of the virtual network in vCenter that the nic is connected to.
     */
    private String networkMoName;

    /*
     * Gets or sets the device key value.
     */
    private Integer deviceKey;

    /**
     * Creates an instance of NetworkInterfaceInventory class.
     */
    public NetworkInterfaceInventory() {
    }

    /**
     * Get the label property: Gets or sets the label of the virtual network in vCenter that the nic is connected to.
     * 
     * @return the label value.
     */
    public String label() {
        return this.label;
    }

    /**
     * Get the ipAddresses property: Gets or sets the nic ip addresses.
     * 
     * @return the ipAddresses value.
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Get the macAddress property: Gets or sets the NIC MAC address.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Get the nicType property: NIC type.
     * 
     * @return the nicType value.
     */
    public NicType nicType() {
        return this.nicType;
    }

    /**
     * Get the networkMoRefId property: Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual
     * network
     * that the nic is connected to.
     * 
     * @return the networkMoRefId value.
     */
    public String networkMoRefId() {
        return this.networkMoRefId;
    }

    /**
     * Get the networkMoName property: Gets or sets the name of the virtual network in vCenter that the nic is connected
     * to.
     * 
     * @return the networkMoName value.
     */
    public String networkMoName() {
        return this.networkMoName;
    }

    /**
     * Get the deviceKey property: Gets or sets the device key value.
     * 
     * @return the deviceKey value.
     */
    public Integer deviceKey() {
        return this.deviceKey;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkInterfaceInventory from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkInterfaceInventory if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkInterfaceInventory.
     */
    public static NetworkInterfaceInventory fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkInterfaceInventory deserializedNetworkInterfaceInventory = new NetworkInterfaceInventory();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("label".equals(fieldName)) {
                    deserializedNetworkInterfaceInventory.label = reader.getString();
                } else if ("ipAddresses".equals(fieldName)) {
                    List<String> ipAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkInterfaceInventory.ipAddresses = ipAddresses;
                } else if ("macAddress".equals(fieldName)) {
                    deserializedNetworkInterfaceInventory.macAddress = reader.getString();
                } else if ("nicType".equals(fieldName)) {
                    deserializedNetworkInterfaceInventory.nicType = NicType.fromString(reader.getString());
                } else if ("networkMoRefId".equals(fieldName)) {
                    deserializedNetworkInterfaceInventory.networkMoRefId = reader.getString();
                } else if ("networkMoName".equals(fieldName)) {
                    deserializedNetworkInterfaceInventory.networkMoName = reader.getString();
                } else if ("deviceKey".equals(fieldName)) {
                    deserializedNetworkInterfaceInventory.deviceKey = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkInterfaceInventory;
        });
    }
}
