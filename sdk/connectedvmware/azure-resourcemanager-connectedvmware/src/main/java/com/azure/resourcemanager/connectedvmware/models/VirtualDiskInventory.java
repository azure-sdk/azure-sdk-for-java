// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Virtual disk model.
 */
@Fluent
public final class VirtualDiskInventory implements JsonSerializable<VirtualDiskInventory> {
    /*
     * Gets or sets the name of the virtual disk.
     */
    private String diskName;

    /*
     * Gets or sets the label of the virtual disk in vCenter.
     */
    private String label;

    /*
     * Gets or sets the disk total size.
     */
    private Integer diskSizeGB;

    /*
     * Gets or sets the device key value.
     */
    private Integer deviceKey;

    /*
     * Gets or sets the disk mode.
     */
    private DiskMode diskMode;

    /*
     * Gets or sets the controller id.
     */
    private Integer controllerKey;

    /*
     * Gets or sets the unit number of the disk on the controller.
     */
    private Integer unitNumber;

    /*
     * Gets or sets the device name.
     */
    private String deviceName;

    /*
     * Gets or sets the disk file name.
     */
    private String fileName;

    /*
     * Gets or sets the disk backing type.
     */
    private DiskType diskType;

    /*
     * Gets or sets the eagerly scrub property of disk.
     */
    private Boolean eagerlyScrub;

    /*
     * Gets or sets the thin provisioning property of disk.
     */
    private Boolean thinProvisioned;

    /*
     * Gets or sets the controller type.
     */
    private String controllerType;

    /*
     * Gets or sets a unique identifier for this resource.
     */
    private String uuid;

    /**
     * Creates an instance of VirtualDiskInventory class.
     */
    public VirtualDiskInventory() {
    }

    /**
     * Get the diskName property: Gets or sets the name of the virtual disk.
     * 
     * @return the diskName value.
     */
    public String diskName() {
        return this.diskName;
    }

    /**
     * Set the diskName property: Gets or sets the name of the virtual disk.
     * 
     * @param diskName the diskName value to set.
     * @return the VirtualDiskInventory object itself.
     */
    public VirtualDiskInventory withDiskName(String diskName) {
        this.diskName = diskName;
        return this;
    }

    /**
     * Get the label property: Gets or sets the label of the virtual disk in vCenter.
     * 
     * @return the label value.
     */
    public String label() {
        return this.label;
    }

    /**
     * Get the diskSizeGB property: Gets or sets the disk total size.
     * 
     * @return the diskSizeGB value.
     */
    public Integer diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Get the deviceKey property: Gets or sets the device key value.
     * 
     * @return the deviceKey value.
     */
    public Integer deviceKey() {
        return this.deviceKey;
    }

    /**
     * Get the diskMode property: Gets or sets the disk mode.
     * 
     * @return the diskMode value.
     */
    public DiskMode diskMode() {
        return this.diskMode;
    }

    /**
     * Get the controllerKey property: Gets or sets the controller id.
     * 
     * @return the controllerKey value.
     */
    public Integer controllerKey() {
        return this.controllerKey;
    }

    /**
     * Get the unitNumber property: Gets or sets the unit number of the disk on the controller.
     * 
     * @return the unitNumber value.
     */
    public Integer unitNumber() {
        return this.unitNumber;
    }

    /**
     * Get the deviceName property: Gets or sets the device name.
     * 
     * @return the deviceName value.
     */
    public String deviceName() {
        return this.deviceName;
    }

    /**
     * Get the fileName property: Gets or sets the disk file name.
     * 
     * @return the fileName value.
     */
    public String fileName() {
        return this.fileName;
    }

    /**
     * Get the diskType property: Gets or sets the disk backing type.
     * 
     * @return the diskType value.
     */
    public DiskType diskType() {
        return this.diskType;
    }

    /**
     * Get the eagerlyScrub property: Gets or sets the eagerly scrub property of disk.
     * 
     * @return the eagerlyScrub value.
     */
    public Boolean eagerlyScrub() {
        return this.eagerlyScrub;
    }

    /**
     * Get the thinProvisioned property: Gets or sets the thin provisioning property of disk.
     * 
     * @return the thinProvisioned value.
     */
    public Boolean thinProvisioned() {
        return this.thinProvisioned;
    }

    /**
     * Get the controllerType property: Gets or sets the controller type.
     * 
     * @return the controllerType value.
     */
    public String controllerType() {
        return this.controllerType;
    }

    /**
     * Get the uuid property: Gets or sets a unique identifier for this resource.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskName", this.diskName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualDiskInventory from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualDiskInventory if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualDiskInventory.
     */
    public static VirtualDiskInventory fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualDiskInventory deserializedVirtualDiskInventory = new VirtualDiskInventory();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskName".equals(fieldName)) {
                    deserializedVirtualDiskInventory.diskName = reader.getString();
                } else if ("label".equals(fieldName)) {
                    deserializedVirtualDiskInventory.label = reader.getString();
                } else if ("diskSizeGB".equals(fieldName)) {
                    deserializedVirtualDiskInventory.diskSizeGB = reader.getNullable(JsonReader::getInt);
                } else if ("deviceKey".equals(fieldName)) {
                    deserializedVirtualDiskInventory.deviceKey = reader.getNullable(JsonReader::getInt);
                } else if ("diskMode".equals(fieldName)) {
                    deserializedVirtualDiskInventory.diskMode = DiskMode.fromString(reader.getString());
                } else if ("controllerKey".equals(fieldName)) {
                    deserializedVirtualDiskInventory.controllerKey = reader.getNullable(JsonReader::getInt);
                } else if ("unitNumber".equals(fieldName)) {
                    deserializedVirtualDiskInventory.unitNumber = reader.getNullable(JsonReader::getInt);
                } else if ("deviceName".equals(fieldName)) {
                    deserializedVirtualDiskInventory.deviceName = reader.getString();
                } else if ("fileName".equals(fieldName)) {
                    deserializedVirtualDiskInventory.fileName = reader.getString();
                } else if ("diskType".equals(fieldName)) {
                    deserializedVirtualDiskInventory.diskType = DiskType.fromString(reader.getString());
                } else if ("eagerlyScrub".equals(fieldName)) {
                    deserializedVirtualDiskInventory.eagerlyScrub = reader.getNullable(JsonReader::getBoolean);
                } else if ("thinProvisioned".equals(fieldName)) {
                    deserializedVirtualDiskInventory.thinProvisioned = reader.getNullable(JsonReader::getBoolean);
                } else if ("controllerType".equals(fieldName)) {
                    deserializedVirtualDiskInventory.controllerType = reader.getString();
                } else if ("uuid".equals(fieldName)) {
                    deserializedVirtualDiskInventory.uuid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualDiskInventory;
        });
    }
}
