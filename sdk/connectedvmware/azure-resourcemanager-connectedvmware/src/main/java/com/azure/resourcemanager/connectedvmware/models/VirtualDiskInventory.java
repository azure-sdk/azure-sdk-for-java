// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Virtual disk model.
 */
@Fluent
public final class VirtualDiskInventory {
    /*
     * Gets or sets the name of the virtual disk.
     */
    @JsonProperty(value = "diskName")
    private String diskName;

    /*
     * Gets or sets the label of the virtual disk in vCenter.
     */
    @JsonProperty(value = "label", access = JsonProperty.Access.WRITE_ONLY)
    private String label;

    /*
     * Gets or sets the disk total size.
     */
    @JsonProperty(value = "diskSizeGB", access = JsonProperty.Access.WRITE_ONLY)
    private Integer diskSizeGB;

    /*
     * Gets or sets the device key value.
     */
    @JsonProperty(value = "deviceKey", access = JsonProperty.Access.WRITE_ONLY)
    private Integer deviceKey;

    /*
     * Gets or sets the disk mode.
     */
    @JsonProperty(value = "diskMode", access = JsonProperty.Access.WRITE_ONLY)
    private DiskMode diskMode;

    /*
     * Gets or sets the controller id.
     */
    @JsonProperty(value = "controllerKey", access = JsonProperty.Access.WRITE_ONLY)
    private Integer controllerKey;

    /*
     * Gets or sets the unit number of the disk on the controller.
     */
    @JsonProperty(value = "unitNumber", access = JsonProperty.Access.WRITE_ONLY)
    private Integer unitNumber;

    /*
     * Gets or sets the device name.
     */
    @JsonProperty(value = "deviceName", access = JsonProperty.Access.WRITE_ONLY)
    private String deviceName;

    /*
     * Gets or sets the disk file name.
     */
    @JsonProperty(value = "fileName", access = JsonProperty.Access.WRITE_ONLY)
    private String fileName;

    /*
     * Gets or sets the disk backing type.
     */
    @JsonProperty(value = "diskType", access = JsonProperty.Access.WRITE_ONLY)
    private DiskType diskType;

    /*
     * Gets or sets the eagerly scrub property of disk.
     */
    @JsonProperty(value = "eagerlyScrub", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean eagerlyScrub;

    /*
     * Gets or sets the thin provisioning property of disk.
     */
    @JsonProperty(value = "thinProvisioned", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean thinProvisioned;

    /*
     * Gets or sets the controller type.
     */
    @JsonProperty(value = "controllerType", access = JsonProperty.Access.WRITE_ONLY)
    private String controllerType;

    /*
     * Gets or sets a unique identifier for this resource.
     */
    @JsonProperty(value = "uuid", access = JsonProperty.Access.WRITE_ONLY)
    private String uuid;

    /**
     * Creates an instance of VirtualDiskInventory class.
     */
    public VirtualDiskInventory() {
    }

    /**
     * Get the diskName property: Gets or sets the name of the virtual disk.
     * 
     * @return the diskName value.
     */
    public String diskName() {
        return this.diskName;
    }

    /**
     * Set the diskName property: Gets or sets the name of the virtual disk.
     * 
     * @param diskName the diskName value to set.
     * @return the VirtualDiskInventory object itself.
     */
    public VirtualDiskInventory withDiskName(String diskName) {
        this.diskName = diskName;
        return this;
    }

    /**
     * Get the label property: Gets or sets the label of the virtual disk in vCenter.
     * 
     * @return the label value.
     */
    public String label() {
        return this.label;
    }

    /**
     * Get the diskSizeGB property: Gets or sets the disk total size.
     * 
     * @return the diskSizeGB value.
     */
    public Integer diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Get the deviceKey property: Gets or sets the device key value.
     * 
     * @return the deviceKey value.
     */
    public Integer deviceKey() {
        return this.deviceKey;
    }

    /**
     * Get the diskMode property: Gets or sets the disk mode.
     * 
     * @return the diskMode value.
     */
    public DiskMode diskMode() {
        return this.diskMode;
    }

    /**
     * Get the controllerKey property: Gets or sets the controller id.
     * 
     * @return the controllerKey value.
     */
    public Integer controllerKey() {
        return this.controllerKey;
    }

    /**
     * Get the unitNumber property: Gets or sets the unit number of the disk on the controller.
     * 
     * @return the unitNumber value.
     */
    public Integer unitNumber() {
        return this.unitNumber;
    }

    /**
     * Get the deviceName property: Gets or sets the device name.
     * 
     * @return the deviceName value.
     */
    public String deviceName() {
        return this.deviceName;
    }

    /**
     * Get the fileName property: Gets or sets the disk file name.
     * 
     * @return the fileName value.
     */
    public String fileName() {
        return this.fileName;
    }

    /**
     * Get the diskType property: Gets or sets the disk backing type.
     * 
     * @return the diskType value.
     */
    public DiskType diskType() {
        return this.diskType;
    }

    /**
     * Get the eagerlyScrub property: Gets or sets the eagerly scrub property of disk.
     * 
     * @return the eagerlyScrub value.
     */
    public Boolean eagerlyScrub() {
        return this.eagerlyScrub;
    }

    /**
     * Get the thinProvisioned property: Gets or sets the thin provisioning property of disk.
     * 
     * @return the thinProvisioned value.
     */
    public Boolean thinProvisioned() {
        return this.thinProvisioned;
    }

    /**
     * Get the controllerType property: Gets or sets the controller type.
     * 
     * @return the controllerType value.
     */
    public String controllerType() {
        return this.controllerType;
    }

    /**
     * Get the uuid property: Gets or sets a unique identifier for this resource.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
