// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Connection body inside a pipeline.
 */
@Fluent
public final class PipelineConnection implements JsonSerializable<PipelineConnection> {
    /*
     * Connection id inside pipeline
     */
    private String id;

    /*
     * Connection name inside pipeline
     */
    private String name;

    /*
     * Connection type inside pipeline
     */
    private String type;

    /*
     * Connection location inside pipeline
     */
    private String location;

    /*
     * Connection etag inside pipeline
     */
    private String etag;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * Connection properties inside pipeline
     */
    private PipelineConnectionProperties properties;

    /*
     * Connection body inside a pipeline
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of PipelineConnection class.
     */
    public PipelineConnection() {
    }

    /**
     * Get the id property: Connection id inside pipeline.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Connection id inside pipeline.
     * 
     * @param id the id value to set.
     * @return the PipelineConnection object itself.
     */
    public PipelineConnection withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Connection name inside pipeline.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: Connection type inside pipeline.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the location property: Connection location inside pipeline.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Get the etag property: Connection etag inside pipeline.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the properties property: Connection properties inside pipeline.
     * 
     * @return the properties value.
     */
    public PipelineConnectionProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Connection properties inside pipeline.
     * 
     * @param properties the properties value to set.
     * @return the PipelineConnection object itself.
     */
    public PipelineConnection withProperties(PipelineConnectionProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the additionalProperties property: Connection body inside a pipeline.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Connection body inside a pipeline.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the PipelineConnection object itself.
     */
    public PipelineConnection withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model PipelineConnection"));
        }
        if (properties() != null) {
            properties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PipelineConnection.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("properties", this.properties);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineConnection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineConnection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PipelineConnection.
     */
    public static PipelineConnection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineConnection deserializedPipelineConnection = new PipelineConnection();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPipelineConnection.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPipelineConnection.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPipelineConnection.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedPipelineConnection.location = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedPipelineConnection.etag = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedPipelineConnection.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedPipelineConnection.properties = PipelineConnectionProperties.fromJson(reader);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedPipelineConnection.additionalProperties = additionalProperties;

            return deserializedPipelineConnection;
        });
    }
}
