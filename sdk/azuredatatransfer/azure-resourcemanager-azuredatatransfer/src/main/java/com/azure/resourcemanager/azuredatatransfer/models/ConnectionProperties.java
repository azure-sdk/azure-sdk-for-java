// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Properties of connection.
 */
@Fluent
public class ConnectionProperties implements JsonSerializable<ConnectionProperties> {
    /*
     * Pipeline to use to transfer data
     */
    private String pipeline;

    /*
     * Direction of data movement
     */
    private Direction direction;

    /*
     * Justification for the connection request
     */
    private String justification;

    /*
     * Status of the connection
     */
    private Status status;

    /*
     * Force disablement status of the current connection
     */
    private List<ForceDisabledStatus> forceDisabledStatus;

    /*
     * Reason for status
     */
    private String statusReason;

    /*
     * Link status of the current connection
     */
    private LinkStatus linkStatus;

    /*
     * Resource ID of the linked connection
     */
    private String linkedConnectionId;

    /*
     * The flow types being requested for this connection
     */
    private List<FlowType> flowTypes;

    /*
     * Requirement ID of the connection
     */
    private String requirementId;

    /*
     * Subscription ID to link cloud subscriptions together
     */
    private String remoteSubscriptionId;

    /*
     * Approver of this connection request
     */
    private String approver;

    /*
     * PIN to link requests together
     */
    private String pin;

    /*
     * The timestamp that this connection request was submitted at
     */
    private OffsetDateTime dateSubmitted;

    /*
     * The primary contact for this connection request
     */
    private String primaryContact;

    /*
     * The secondary contacts for this connection request
     */
    private List<String> secondaryContacts;

    /*
     * Provisioning state of the connection
     */
    private ProvisioningState provisioningState;

    /*
     * The policies for this connection
     */
    private List<String> policies;

    /*
     * The schemas for this connection
     */
    private List<Schema> schemas;

    /*
     * The schema URIs for this connection
     */
    private List<String> schemaUris;

    /**
     * Creates an instance of ConnectionProperties class.
     */
    public ConnectionProperties() {
    }

    /**
     * Get the pipeline property: Pipeline to use to transfer data.
     * 
     * @return the pipeline value.
     */
    public String pipeline() {
        return this.pipeline;
    }

    /**
     * Set the pipeline property: Pipeline to use to transfer data.
     * 
     * @param pipeline the pipeline value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withPipeline(String pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /**
     * Get the direction property: Direction of data movement.
     * 
     * @return the direction value.
     */
    public Direction direction() {
        return this.direction;
    }

    /**
     * Set the direction property: Direction of data movement.
     * 
     * @param direction the direction value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withDirection(Direction direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the justification property: Justification for the connection request.
     * 
     * @return the justification value.
     */
    public String justification() {
        return this.justification;
    }

    /**
     * Set the justification property: Justification for the connection request.
     * 
     * @param justification the justification value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withJustification(String justification) {
        this.justification = justification;
        return this;
    }

    /**
     * Get the status property: Status of the connection.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the connection.
     * 
     * @param status the status value to set.
     * @return the ConnectionProperties object itself.
     */
    ConnectionProperties withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the forceDisabledStatus property: Force disablement status of the current connection.
     * 
     * @return the forceDisabledStatus value.
     */
    public List<ForceDisabledStatus> forceDisabledStatus() {
        return this.forceDisabledStatus;
    }

    /**
     * Set the forceDisabledStatus property: Force disablement status of the current connection.
     * 
     * @param forceDisabledStatus the forceDisabledStatus value to set.
     * @return the ConnectionProperties object itself.
     */
    ConnectionProperties withForceDisabledStatus(List<ForceDisabledStatus> forceDisabledStatus) {
        this.forceDisabledStatus = forceDisabledStatus;
        return this;
    }

    /**
     * Get the statusReason property: Reason for status.
     * 
     * @return the statusReason value.
     */
    public String statusReason() {
        return this.statusReason;
    }

    /**
     * Set the statusReason property: Reason for status.
     * 
     * @param statusReason the statusReason value to set.
     * @return the ConnectionProperties object itself.
     */
    ConnectionProperties withStatusReason(String statusReason) {
        this.statusReason = statusReason;
        return this;
    }

    /**
     * Get the linkStatus property: Link status of the current connection.
     * 
     * @return the linkStatus value.
     */
    public LinkStatus linkStatus() {
        return this.linkStatus;
    }

    /**
     * Set the linkStatus property: Link status of the current connection.
     * 
     * @param linkStatus the linkStatus value to set.
     * @return the ConnectionProperties object itself.
     */
    ConnectionProperties withLinkStatus(LinkStatus linkStatus) {
        this.linkStatus = linkStatus;
        return this;
    }

    /**
     * Get the linkedConnectionId property: Resource ID of the linked connection.
     * 
     * @return the linkedConnectionId value.
     */
    public String linkedConnectionId() {
        return this.linkedConnectionId;
    }

    /**
     * Set the linkedConnectionId property: Resource ID of the linked connection.
     * 
     * @param linkedConnectionId the linkedConnectionId value to set.
     * @return the ConnectionProperties object itself.
     */
    ConnectionProperties withLinkedConnectionId(String linkedConnectionId) {
        this.linkedConnectionId = linkedConnectionId;
        return this;
    }

    /**
     * Get the flowTypes property: The flow types being requested for this connection.
     * 
     * @return the flowTypes value.
     */
    public List<FlowType> flowTypes() {
        return this.flowTypes;
    }

    /**
     * Set the flowTypes property: The flow types being requested for this connection.
     * 
     * @param flowTypes the flowTypes value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withFlowTypes(List<FlowType> flowTypes) {
        this.flowTypes = flowTypes;
        return this;
    }

    /**
     * Get the requirementId property: Requirement ID of the connection.
     * 
     * @return the requirementId value.
     */
    public String requirementId() {
        return this.requirementId;
    }

    /**
     * Set the requirementId property: Requirement ID of the connection.
     * 
     * @param requirementId the requirementId value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withRequirementId(String requirementId) {
        this.requirementId = requirementId;
        return this;
    }

    /**
     * Get the remoteSubscriptionId property: Subscription ID to link cloud subscriptions together.
     * 
     * @return the remoteSubscriptionId value.
     */
    public String remoteSubscriptionId() {
        return this.remoteSubscriptionId;
    }

    /**
     * Set the remoteSubscriptionId property: Subscription ID to link cloud subscriptions together.
     * 
     * @param remoteSubscriptionId the remoteSubscriptionId value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withRemoteSubscriptionId(String remoteSubscriptionId) {
        this.remoteSubscriptionId = remoteSubscriptionId;
        return this;
    }

    /**
     * Get the approver property: Approver of this connection request.
     * 
     * @return the approver value.
     */
    public String approver() {
        return this.approver;
    }

    /**
     * Set the approver property: Approver of this connection request.
     * 
     * @param approver the approver value to set.
     * @return the ConnectionProperties object itself.
     */
    ConnectionProperties withApprover(String approver) {
        this.approver = approver;
        return this;
    }

    /**
     * Get the pin property: PIN to link requests together.
     * 
     * @return the pin value.
     */
    public String pin() {
        return this.pin;
    }

    /**
     * Set the pin property: PIN to link requests together.
     * 
     * @param pin the pin value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withPin(String pin) {
        this.pin = pin;
        return this;
    }

    /**
     * Get the dateSubmitted property: The timestamp that this connection request was submitted at.
     * 
     * @return the dateSubmitted value.
     */
    public OffsetDateTime dateSubmitted() {
        return this.dateSubmitted;
    }

    /**
     * Set the dateSubmitted property: The timestamp that this connection request was submitted at.
     * 
     * @param dateSubmitted the dateSubmitted value to set.
     * @return the ConnectionProperties object itself.
     */
    ConnectionProperties withDateSubmitted(OffsetDateTime dateSubmitted) {
        this.dateSubmitted = dateSubmitted;
        return this;
    }

    /**
     * Get the primaryContact property: The primary contact for this connection request.
     * 
     * @return the primaryContact value.
     */
    public String primaryContact() {
        return this.primaryContact;
    }

    /**
     * Set the primaryContact property: The primary contact for this connection request.
     * 
     * @param primaryContact the primaryContact value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withPrimaryContact(String primaryContact) {
        this.primaryContact = primaryContact;
        return this;
    }

    /**
     * Get the secondaryContacts property: The secondary contacts for this connection request.
     * 
     * @return the secondaryContacts value.
     */
    public List<String> secondaryContacts() {
        return this.secondaryContacts;
    }

    /**
     * Set the secondaryContacts property: The secondary contacts for this connection request.
     * 
     * @param secondaryContacts the secondaryContacts value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withSecondaryContacts(List<String> secondaryContacts) {
        this.secondaryContacts = secondaryContacts;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the connection.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Provisioning state of the connection.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the ConnectionProperties object itself.
     */
    ConnectionProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the policies property: The policies for this connection.
     * 
     * @return the policies value.
     */
    public List<String> policies() {
        return this.policies;
    }

    /**
     * Set the policies property: The policies for this connection.
     * 
     * @param policies the policies value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withPolicies(List<String> policies) {
        this.policies = policies;
        return this;
    }

    /**
     * Get the schemas property: The schemas for this connection.
     * 
     * @return the schemas value.
     */
    public List<Schema> schemas() {
        return this.schemas;
    }

    /**
     * Set the schemas property: The schemas for this connection.
     * 
     * @param schemas the schemas value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withSchemas(List<Schema> schemas) {
        this.schemas = schemas;
        return this;
    }

    /**
     * Get the schemaUris property: The schema URIs for this connection.
     * 
     * @return the schemaUris value.
     */
    public List<String> schemaUris() {
        return this.schemaUris;
    }

    /**
     * Set the schemaUris property: The schema URIs for this connection.
     * 
     * @param schemaUris the schemaUris value to set.
     * @return the ConnectionProperties object itself.
     */
    public ConnectionProperties withSchemaUris(List<String> schemaUris) {
        this.schemaUris = schemaUris;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (pipeline() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property pipeline in model ConnectionProperties"));
        }
        if (schemas() != null) {
            schemas().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pipeline", this.pipeline);
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        jsonWriter.writeStringField("justification", this.justification);
        jsonWriter.writeArrayField("flowTypes", this.flowTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("requirementId", this.requirementId);
        jsonWriter.writeStringField("remoteSubscriptionId", this.remoteSubscriptionId);
        jsonWriter.writeStringField("pin", this.pin);
        jsonWriter.writeStringField("primaryContact", this.primaryContact);
        jsonWriter.writeArrayField("secondaryContacts", this.secondaryContacts,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("policies", this.policies, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("schemas", this.schemas, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("schemaUris", this.schemaUris, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectionProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectionProperties.
     */
    public static ConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectionProperties deserializedConnectionProperties = new ConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pipeline".equals(fieldName)) {
                    deserializedConnectionProperties.pipeline = reader.getString();
                } else if ("direction".equals(fieldName)) {
                    deserializedConnectionProperties.direction = Direction.fromString(reader.getString());
                } else if ("justification".equals(fieldName)) {
                    deserializedConnectionProperties.justification = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedConnectionProperties.status = Status.fromString(reader.getString());
                } else if ("forceDisabledStatus".equals(fieldName)) {
                    List<ForceDisabledStatus> forceDisabledStatus
                        = reader.readArray(reader1 -> ForceDisabledStatus.fromString(reader1.getString()));
                    deserializedConnectionProperties.forceDisabledStatus = forceDisabledStatus;
                } else if ("statusReason".equals(fieldName)) {
                    deserializedConnectionProperties.statusReason = reader.getString();
                } else if ("linkStatus".equals(fieldName)) {
                    deserializedConnectionProperties.linkStatus = LinkStatus.fromString(reader.getString());
                } else if ("linkedConnectionId".equals(fieldName)) {
                    deserializedConnectionProperties.linkedConnectionId = reader.getString();
                } else if ("flowTypes".equals(fieldName)) {
                    List<FlowType> flowTypes = reader.readArray(reader1 -> FlowType.fromString(reader1.getString()));
                    deserializedConnectionProperties.flowTypes = flowTypes;
                } else if ("requirementId".equals(fieldName)) {
                    deserializedConnectionProperties.requirementId = reader.getString();
                } else if ("remoteSubscriptionId".equals(fieldName)) {
                    deserializedConnectionProperties.remoteSubscriptionId = reader.getString();
                } else if ("approver".equals(fieldName)) {
                    deserializedConnectionProperties.approver = reader.getString();
                } else if ("pin".equals(fieldName)) {
                    deserializedConnectionProperties.pin = reader.getString();
                } else if ("dateSubmitted".equals(fieldName)) {
                    deserializedConnectionProperties.dateSubmitted = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("primaryContact".equals(fieldName)) {
                    deserializedConnectionProperties.primaryContact = reader.getString();
                } else if ("secondaryContacts".equals(fieldName)) {
                    List<String> secondaryContacts = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectionProperties.secondaryContacts = secondaryContacts;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedConnectionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("policies".equals(fieldName)) {
                    List<String> policies = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectionProperties.policies = policies;
                } else if ("schemas".equals(fieldName)) {
                    List<Schema> schemas = reader.readArray(reader1 -> Schema.fromJson(reader1));
                    deserializedConnectionProperties.schemas = schemas;
                } else if ("schemaUris".equals(fieldName)) {
                    List<String> schemaUris = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectionProperties.schemaUris = schemaUris;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectionProperties;
        });
    }
}
