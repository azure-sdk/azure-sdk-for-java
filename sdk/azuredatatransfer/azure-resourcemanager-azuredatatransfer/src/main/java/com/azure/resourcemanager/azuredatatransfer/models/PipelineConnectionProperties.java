// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Connection properties inside pipeline.
 */
@Fluent
public final class PipelineConnectionProperties implements JsonSerializable<PipelineConnectionProperties> {
    /*
     * Internal metadata of the connection inside pipeline.
     */
    private InternalMetadataProperties internalMetadata;

    /*
     * Connection properties inside pipeline
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of PipelineConnectionProperties class.
     */
    public PipelineConnectionProperties() {
    }

    /**
     * Get the internalMetadata property: Internal metadata of the connection inside pipeline.
     * 
     * @return the internalMetadata value.
     */
    public InternalMetadataProperties internalMetadata() {
        return this.internalMetadata;
    }

    /**
     * Set the internalMetadata property: Internal metadata of the connection inside pipeline.
     * 
     * @param internalMetadata the internalMetadata value to set.
     * @return the PipelineConnectionProperties object itself.
     */
    public PipelineConnectionProperties withInternalMetadata(InternalMetadataProperties internalMetadata) {
        this.internalMetadata = internalMetadata;
        return this;
    }

    /**
     * Get the additionalProperties property: Connection properties inside pipeline.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Connection properties inside pipeline.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the PipelineConnectionProperties object itself.
     */
    public PipelineConnectionProperties withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (internalMetadata() != null) {
            internalMetadata().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("internalMetadata", this.internalMetadata);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineConnectionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PipelineConnectionProperties.
     */
    public static PipelineConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineConnectionProperties deserializedPipelineConnectionProperties = new PipelineConnectionProperties();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("internalMetadata".equals(fieldName)) {
                    deserializedPipelineConnectionProperties.internalMetadata
                        = InternalMetadataProperties.fromJson(reader);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedPipelineConnectionProperties.additionalProperties = additionalProperties;

            return deserializedPipelineConnectionProperties;
        });
    }
}
