// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.FlowInner;
import com.azure.resourcemanager.azuredatatransfer.models.Flow;
import com.azure.resourcemanager.azuredatatransfer.models.FlowProperties;
import com.azure.resourcemanager.azuredatatransfer.models.FlowsPatch;
import com.azure.resourcemanager.azuredatatransfer.models.ManagedServiceIdentity;
import com.azure.resourcemanager.azuredatatransfer.models.Plan;
import com.azure.resourcemanager.azuredatatransfer.models.ResourceBody;
import java.util.Collections;
import java.util.Map;

public final class FlowImpl implements Flow, Flow.Definition, Flow.Update {
    private FlowInner innerObject;

    private final com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public FlowProperties properties() {
        return this.innerModel().properties();
    }

    public Plan plan() {
        return this.innerModel().plan();
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public FlowInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String connectionName;

    private String flowName;

    private FlowsPatch updateFlow;

    public FlowImpl withExistingConnection(String resourceGroupName, String connectionName) {
        this.resourceGroupName = resourceGroupName;
        this.connectionName = connectionName;
        return this;
    }

    public Flow create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFlows()
                .createOrUpdate(resourceGroupName, connectionName, flowName, this.innerModel(), Context.NONE);
        return this;
    }

    public Flow create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFlows()
                .createOrUpdate(resourceGroupName, connectionName, flowName, this.innerModel(), context);
        return this;
    }

    FlowImpl(String name, com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager) {
        this.innerObject = new FlowInner();
        this.serviceManager = serviceManager;
        this.flowName = name;
    }

    public FlowImpl update() {
        this.updateFlow = new FlowsPatch();
        return this;
    }

    public Flow apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFlows()
                .update(resourceGroupName, connectionName, flowName, updateFlow, Context.NONE);
        return this;
    }

    public Flow apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFlows()
                .update(resourceGroupName, connectionName, flowName, updateFlow, context);
        return this;
    }

    FlowImpl(
        FlowInner innerObject, com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.connectionName = Utils.getValueFromIdByName(innerObject.id(), "connections");
        this.flowName = Utils.getValueFromIdByName(innerObject.id(), "flows");
    }

    public Flow refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFlows()
                .getWithResponse(resourceGroupName, connectionName, flowName, Context.NONE)
                .getValue();
        return this;
    }

    public Flow refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFlows()
                .getWithResponse(resourceGroupName, connectionName, flowName, context)
                .getValue();
        return this;
    }

    public Flow enable() {
        return serviceManager.flows().enable(resourceGroupName, connectionName, flowName);
    }

    public Flow enable(Context context) {
        return serviceManager.flows().enable(resourceGroupName, connectionName, flowName, context);
    }

    public Flow disable() {
        return serviceManager.flows().disable(resourceGroupName, connectionName, flowName);
    }

    public Flow disable(Context context) {
        return serviceManager.flows().disable(resourceGroupName, connectionName, flowName, context);
    }

    public Flow link(ResourceBody flow) {
        return serviceManager.flows().link(resourceGroupName, connectionName, flowName, flow);
    }

    public Flow link(ResourceBody flow, Context context) {
        return serviceManager.flows().link(resourceGroupName, connectionName, flowName, flow, context);
    }

    public FlowImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public FlowImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public FlowImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateFlow.withTags(tags);
            return this;
        }
    }

    public FlowImpl withProperties(FlowProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public FlowImpl withPlan(Plan plan) {
        this.innerModel().withPlan(plan);
        return this;
    }

    public FlowImpl withIdentity(ManagedServiceIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
