// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An individual that would like to subscribe to events that occur on a pipeline.
 */
@Fluent
public final class Subscriber implements JsonSerializable<Subscriber> {
    /*
     * Email of the subscriber
     */
    private String email;

    /*
     * Number specifying what notifications to receive
     */
    private Long notifications;

    /**
     * Creates an instance of Subscriber class.
     */
    public Subscriber() {
    }

    /**
     * Get the email property: Email of the subscriber.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: Email of the subscriber.
     * 
     * @param email the email value to set.
     * @return the Subscriber object itself.
     */
    public Subscriber withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the notifications property: Number specifying what notifications to receive.
     * 
     * @return the notifications value.
     */
    public Long notifications() {
        return this.notifications;
    }

    /**
     * Set the notifications property: Number specifying what notifications to receive.
     * 
     * @param notifications the notifications value to set.
     * @return the Subscriber object itself.
     */
    public Subscriber withNotifications(Long notifications) {
        this.notifications = notifications;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeNumberField("notifications", this.notifications);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Subscriber from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Subscriber if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Subscriber.
     */
    public static Subscriber fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Subscriber deserializedSubscriber = new Subscriber();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("email".equals(fieldName)) {
                    deserializedSubscriber.email = reader.getString();
                } else if ("notifications".equals(fieldName)) {
                    deserializedSubscriber.notifications = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubscriber;
        });
    }
}
