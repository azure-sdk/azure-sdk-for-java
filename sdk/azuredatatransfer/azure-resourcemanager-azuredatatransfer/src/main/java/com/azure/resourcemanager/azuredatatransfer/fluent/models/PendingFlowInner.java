// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azuredatatransfer.models.ApiFlowOptions;
import com.azure.resourcemanager.azuredatatransfer.models.DataType;
import com.azure.resourcemanager.azuredatatransfer.models.FlowStatus;
import com.azure.resourcemanager.azuredatatransfer.models.FlowType;
import com.azure.resourcemanager.azuredatatransfer.models.ForceDisabledStatus;
import com.azure.resourcemanager.azuredatatransfer.models.LinkStatusFlow;
import com.azure.resourcemanager.azuredatatransfer.models.MessagingOptions;
import com.azure.resourcemanager.azuredatatransfer.models.ProvisioningState;
import com.azure.resourcemanager.azuredatatransfer.models.Schema;
import com.azure.resourcemanager.azuredatatransfer.models.SelectedResource;
import com.azure.resourcemanager.azuredatatransfer.models.StreamProtocol;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Pending flow object.
 */
@Fluent
public final class PendingFlowInner extends FlowPropertiesInner {
    /*
     * Subscription ID of the pending flow.
     */
    private String subscriptionId;

    /*
     * Connection ID of the pending flow.
     */
    private String connectionId;

    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The geo-location where the resource lives
     */
    private String location;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * the fully qualified resource ID for the resource
     */
    private String id;

    /*
     * the name of the resource
     */
    private String name;

    /*
     * the type of the resource
     */
    private String type;

    /*
     * Provisioning state of the flow
     */
    private ProvisioningState provisioningState;

    /*
     * Force disablement status of the current flow
     */
    private List<ForceDisabledStatus> forceDisabledStatus;

    /*
     * Resource ID of the linked flow
     */
    private String linkedFlowId;

    /*
     * Link status of the current flow
     */
    private LinkStatusFlow linkStatus;

    /*
     * Dataflow GUID associated with this flow
     */
    private String flowId;

    /**
     * Creates an instance of PendingFlowInner class.
     */
    public PendingFlowInner() {
    }

    /**
     * Get the subscriptionId property: Subscription ID of the pending flow.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the connectionId property: Connection ID of the pending flow.
     * 
     * @return the connectionId value.
     */
    public String connectionId() {
        return this.connectionId;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The geo-location where the resource lives.
     * 
     * @param location the location value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the id property: the fully qualified resource ID for the resource.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: the name of the resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: the type of the resource.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the provisioningState property: Provisioning state of the flow.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the forceDisabledStatus property: Force disablement status of the current flow.
     * 
     * @return the forceDisabledStatus value.
     */
    @Override
    public List<ForceDisabledStatus> forceDisabledStatus() {
        return this.forceDisabledStatus;
    }

    /**
     * Get the linkedFlowId property: Resource ID of the linked flow.
     * 
     * @return the linkedFlowId value.
     */
    @Override
    public String linkedFlowId() {
        return this.linkedFlowId;
    }

    /**
     * Get the linkStatus property: Link status of the current flow.
     * 
     * @return the linkStatus value.
     */
    @Override
    public LinkStatusFlow linkStatus() {
        return this.linkStatus;
    }

    /**
     * Get the flowId property: Dataflow GUID associated with this flow.
     * 
     * @return the flowId value.
     */
    @Override
    public String flowId() {
        return this.flowId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withConnection(SelectedResource connection) {
        super.withConnection(connection);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withKeyVaultUri(String keyVaultUri) {
        super.withKeyVaultUri(keyVaultUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withStatus(FlowStatus status) {
        super.withStatus(status);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withStorageAccountName(String storageAccountName) {
        super.withStorageAccountName(storageAccountName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withStorageAccountId(String storageAccountId) {
        super.withStorageAccountId(storageAccountId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withStorageContainerName(String storageContainerName) {
        super.withStorageContainerName(storageContainerName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withStorageTableName(String storageTableName) {
        super.withStorageTableName(storageTableName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withServiceBusQueueId(String serviceBusQueueId) {
        super.withServiceBusQueueId(serviceBusQueueId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withFlowType(FlowType flowType) {
        super.withFlowType(flowType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withDataType(DataType dataType) {
        super.withDataType(dataType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withPolicies(List<String> policies) {
        super.withPolicies(policies);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withSchema(Schema schema) {
        super.withSchema(schema);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withMessagingOptions(MessagingOptions messagingOptions) {
        super.withMessagingOptions(messagingOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withApiFlowOptions(ApiFlowOptions apiFlowOptions) {
        super.withApiFlowOptions(apiFlowOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withCustomerManagedKeyVaultUri(String customerManagedKeyVaultUri) {
        super.withCustomerManagedKeyVaultUri(customerManagedKeyVaultUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withStreamId(String streamId) {
        super.withStreamId(streamId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withStreamProtocol(StreamProtocol streamProtocol) {
        super.withStreamProtocol(streamProtocol);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withStreamLatency(Long streamLatency) {
        super.withStreamLatency(streamLatency);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withPassphrase(String passphrase) {
        super.withPassphrase(passphrase);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withSourceAddresses(StreamSourceAddressesInner sourceAddresses) {
        super.withSourceAddresses(sourceAddresses);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withDestinationEndpoints(List<String> destinationEndpoints) {
        super.withDestinationEndpoints(destinationEndpoints);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withDestinationEndpointPorts(List<Long> destinationEndpointPorts) {
        super.withDestinationEndpointPorts(destinationEndpointPorts);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withEventHubId(String eventHubId) {
        super.withEventHubId(eventHubId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingFlowInner withConsumerGroup(String consumerGroup) {
        super.withConsumerGroup(consumerGroup);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property location in model PendingFlowInner"));
        }
        if (connection() != null) {
            connection().validate();
        }
        if (schema() != null) {
            schema().validate();
        }
        if (messagingOptions() != null) {
            messagingOptions().validate();
        }
        if (apiFlowOptions() != null) {
            apiFlowOptions().validate();
        }
        if (sourceAddresses() != null) {
            sourceAddresses().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PendingFlowInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("connection", connection());
        jsonWriter.writeStringField("keyVaultUri", keyVaultUri());
        jsonWriter.writeStringField("status", status() == null ? null : status().toString());
        jsonWriter.writeStringField("storageAccountName", storageAccountName());
        jsonWriter.writeStringField("storageAccountId", storageAccountId());
        jsonWriter.writeStringField("storageContainerName", storageContainerName());
        jsonWriter.writeStringField("storageTableName", storageTableName());
        jsonWriter.writeStringField("serviceBusQueueId", serviceBusQueueId());
        jsonWriter.writeStringField("flowType", flowType() == null ? null : flowType().toString());
        jsonWriter.writeStringField("dataType", dataType() == null ? null : dataType().toString());
        jsonWriter.writeArrayField("policies", policies(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("schema", schema());
        jsonWriter.writeJsonField("messagingOptions", messagingOptions());
        jsonWriter.writeJsonField("apiFlowOptions", apiFlowOptions());
        jsonWriter.writeStringField("customerManagedKeyVaultUri", customerManagedKeyVaultUri());
        jsonWriter.writeStringField("streamId", streamId());
        jsonWriter.writeStringField("streamProtocol", streamProtocol() == null ? null : streamProtocol().toString());
        jsonWriter.writeNumberField("streamLatency", streamLatency());
        jsonWriter.writeStringField("passphrase", passphrase());
        jsonWriter.writeJsonField("sourceAddresses", sourceAddresses());
        jsonWriter.writeArrayField("destinationEndpoints", destinationEndpoints(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("destinationEndpointPorts", destinationEndpointPorts(),
            (writer, element) -> writer.writeLong(element));
        jsonWriter.writeStringField("eventHubId", eventHubId());
        jsonWriter.writeStringField("consumerGroup", consumerGroup());
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PendingFlowInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PendingFlowInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PendingFlowInner.
     */
    public static PendingFlowInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PendingFlowInner deserializedPendingFlowInner = new PendingFlowInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connection".equals(fieldName)) {
                    deserializedPendingFlowInner.withConnection(SelectedResource.fromJson(reader));
                } else if ("flowId".equals(fieldName)) {
                    deserializedPendingFlowInner.flowId = reader.getString();
                } else if ("keyVaultUri".equals(fieldName)) {
                    deserializedPendingFlowInner.withKeyVaultUri(reader.getString());
                } else if ("linkStatus".equals(fieldName)) {
                    deserializedPendingFlowInner.linkStatus = LinkStatusFlow.fromString(reader.getString());
                } else if ("linkedFlowId".equals(fieldName)) {
                    deserializedPendingFlowInner.linkedFlowId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedPendingFlowInner.withStatus(FlowStatus.fromString(reader.getString()));
                } else if ("forceDisabledStatus".equals(fieldName)) {
                    List<ForceDisabledStatus> forceDisabledStatus
                        = reader.readArray(reader1 -> ForceDisabledStatus.fromString(reader1.getString()));
                    deserializedPendingFlowInner.forceDisabledStatus = forceDisabledStatus;
                } else if ("storageAccountName".equals(fieldName)) {
                    deserializedPendingFlowInner.withStorageAccountName(reader.getString());
                } else if ("storageAccountId".equals(fieldName)) {
                    deserializedPendingFlowInner.withStorageAccountId(reader.getString());
                } else if ("storageContainerName".equals(fieldName)) {
                    deserializedPendingFlowInner.withStorageContainerName(reader.getString());
                } else if ("storageTableName".equals(fieldName)) {
                    deserializedPendingFlowInner.withStorageTableName(reader.getString());
                } else if ("serviceBusQueueId".equals(fieldName)) {
                    deserializedPendingFlowInner.withServiceBusQueueId(reader.getString());
                } else if ("flowType".equals(fieldName)) {
                    deserializedPendingFlowInner.withFlowType(FlowType.fromString(reader.getString()));
                } else if ("dataType".equals(fieldName)) {
                    deserializedPendingFlowInner.withDataType(DataType.fromString(reader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPendingFlowInner.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("policies".equals(fieldName)) {
                    List<String> policies = reader.readArray(reader1 -> reader1.getString());
                    deserializedPendingFlowInner.withPolicies(policies);
                } else if ("schema".equals(fieldName)) {
                    deserializedPendingFlowInner.withSchema(Schema.fromJson(reader));
                } else if ("messagingOptions".equals(fieldName)) {
                    deserializedPendingFlowInner.withMessagingOptions(MessagingOptions.fromJson(reader));
                } else if ("apiFlowOptions".equals(fieldName)) {
                    deserializedPendingFlowInner.withApiFlowOptions(ApiFlowOptions.fromJson(reader));
                } else if ("customerManagedKeyVaultUri".equals(fieldName)) {
                    deserializedPendingFlowInner.withCustomerManagedKeyVaultUri(reader.getString());
                } else if ("streamId".equals(fieldName)) {
                    deserializedPendingFlowInner.withStreamId(reader.getString());
                } else if ("streamProtocol".equals(fieldName)) {
                    deserializedPendingFlowInner.withStreamProtocol(StreamProtocol.fromString(reader.getString()));
                } else if ("streamLatency".equals(fieldName)) {
                    deserializedPendingFlowInner.withStreamLatency(reader.getNullable(JsonReader::getLong));
                } else if ("passphrase".equals(fieldName)) {
                    deserializedPendingFlowInner.withPassphrase(reader.getString());
                } else if ("sourceAddresses".equals(fieldName)) {
                    deserializedPendingFlowInner.withSourceAddresses(StreamSourceAddressesInner.fromJson(reader));
                } else if ("destinationEndpoints".equals(fieldName)) {
                    List<String> destinationEndpoints = reader.readArray(reader1 -> reader1.getString());
                    deserializedPendingFlowInner.withDestinationEndpoints(destinationEndpoints);
                } else if ("destinationEndpointPorts".equals(fieldName)) {
                    List<Long> destinationEndpointPorts = reader.readArray(reader1 -> reader1.getLong());
                    deserializedPendingFlowInner.withDestinationEndpointPorts(destinationEndpointPorts);
                } else if ("eventHubId".equals(fieldName)) {
                    deserializedPendingFlowInner.withEventHubId(reader.getString());
                } else if ("consumerGroup".equals(fieldName)) {
                    deserializedPendingFlowInner.withConsumerGroup(reader.getString());
                } else if ("location".equals(fieldName)) {
                    deserializedPendingFlowInner.location = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedPendingFlowInner.subscriptionId = reader.getString();
                } else if ("connectionId".equals(fieldName)) {
                    deserializedPendingFlowInner.connectionId = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedPendingFlowInner.tags = tags;
                } else if ("systemData".equals(fieldName)) {
                    deserializedPendingFlowInner.systemData = SystemData.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    deserializedPendingFlowInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPendingFlowInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPendingFlowInner.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPendingFlowInner;
        });
    }
}
