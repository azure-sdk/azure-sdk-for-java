// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azuredatatransfer.models.ApiFlowOptions;
import com.azure.resourcemanager.azuredatatransfer.models.DataType;
import com.azure.resourcemanager.azuredatatransfer.models.FlowStatus;
import com.azure.resourcemanager.azuredatatransfer.models.FlowType;
import com.azure.resourcemanager.azuredatatransfer.models.ForceDisabledStatus;
import com.azure.resourcemanager.azuredatatransfer.models.LinkStatus;
import com.azure.resourcemanager.azuredatatransfer.models.MessagingOptions;
import com.azure.resourcemanager.azuredatatransfer.models.ProvisioningState;
import com.azure.resourcemanager.azuredatatransfer.models.Schema;
import com.azure.resourcemanager.azuredatatransfer.models.SelectedResource;
import com.azure.resourcemanager.azuredatatransfer.models.StreamProtocol;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Pending flow object.
 */
@Fluent
public final class PendingFlowInner implements JsonSerializable<PendingFlowInner> {
    /*
     * The connection associated with this flow
     */
    private SelectedResource connection;

    /*
     * Dataflow GUID associated with this flow
     */
    private String flowId;

    /*
     * AME, PME, or TORUS only! AKV Chain Containing SAS Token
     */
    private String keyVaultUri;

    /*
     * Link status of the current flow
     */
    private LinkStatus linkStatus;

    /*
     * Resource ID of the linked flow
     */
    private String linkedFlowId;

    /*
     * Status of the current flow
     */
    private FlowStatus status;

    /*
     * Force disablement status of the current flow
     */
    private List<ForceDisabledStatus> forceDisabledStatus;

    /*
     * Storage Account
     */
    private String storageAccountName;

    /*
     * Storage Account ID
     */
    private String storageAccountId;

    /*
     * Storage Container Name
     */
    private String storageContainerName;

    /*
     * Storage Table Name
     */
    private String storageTableName;

    /*
     * Service Bus Queue ID
     */
    private String serviceBusQueueId;

    /*
     * The flow type for this flow
     */
    private FlowType flowType;

    /*
     * Transfer Storage Blobs or Tables
     */
    private DataType dataType;

    /*
     * Provisioning state of the flow
     */
    private ProvisioningState provisioningState;

    /*
     * The policies for this flow
     */
    private List<String> policies;

    /*
     * The selected schema for this flow
     */
    private Schema schema;

    /*
     * The messaging options for this flow
     */
    private MessagingOptions messagingOptions;

    /*
     * The API Flow configuration options for Azure Data Transfer API Flow type.
     */
    private ApiFlowOptions apiFlowOptions;

    /*
     * The URI to the customer managed key for this flow
     */
    private String customerManagedKeyVaultUri;

    /*
     * The flow stream identifier
     */
    private String streamId;

    /*
     * The protocol of the stream
     */
    private StreamProtocol streamProtocol;

    /*
     * The latency of the stream in milliseconds
     */
    private Long streamLatency;

    /*
     * The passphrase used for SRT streams
     */
    private String passphrase;

    /*
     * The source IP address and CIDR ranges of the stream
     */
    private StreamSourceAddressesInner sourceAddresses;

    /*
     * The destination endpoints of the stream
     */
    private List<String> destinationEndpoints;

    /*
     * The destination endpoint ports of the stream
     */
    private List<Long> destinationEndpointPorts;

    /*
     * Event Hub ID
     */
    private String eventHubId;

    /*
     * Event Hub Consumer Group
     */
    private String consumerGroup;

    /*
     * The resource-specific properties for this resource.
     */
    private FlowInner properties;

    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The geo-location where the resource lives
     */
    private String location;

    /*
     * Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{
     * resourceType}/{resourceName}
     */
    private String id;

    /*
     * The name of the resource
     */
    private String name;

    /*
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    private String type;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * Subscription ID of the pending flow.
     */
    private String subscriptionId;

    /*
     * Connection ID of the pending flow.
     */
    private String connectionId;

    /**
     * Creates an instance of PendingFlowInner class.
     */
    public PendingFlowInner() {
    }

    /**
     * Get the connection property: The connection associated with this flow.
     * 
     * @return the connection value.
     */
    public SelectedResource connection() {
        return this.connection;
    }

    /**
     * Set the connection property: The connection associated with this flow.
     * 
     * @param connection the connection value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withConnection(SelectedResource connection) {
        this.connection = connection;
        return this;
    }

    /**
     * Get the flowId property: Dataflow GUID associated with this flow.
     * 
     * @return the flowId value.
     */
    public String flowId() {
        return this.flowId;
    }

    /**
     * Get the keyVaultUri property: AME, PME, or TORUS only! AKV Chain Containing SAS Token.
     * 
     * @return the keyVaultUri value.
     */
    public String keyVaultUri() {
        return this.keyVaultUri;
    }

    /**
     * Set the keyVaultUri property: AME, PME, or TORUS only! AKV Chain Containing SAS Token.
     * 
     * @param keyVaultUri the keyVaultUri value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withKeyVaultUri(String keyVaultUri) {
        this.keyVaultUri = keyVaultUri;
        return this;
    }

    /**
     * Get the linkStatus property: Link status of the current flow.
     * 
     * @return the linkStatus value.
     */
    public LinkStatus linkStatus() {
        return this.linkStatus;
    }

    /**
     * Get the linkedFlowId property: Resource ID of the linked flow.
     * 
     * @return the linkedFlowId value.
     */
    public String linkedFlowId() {
        return this.linkedFlowId;
    }

    /**
     * Get the status property: Status of the current flow.
     * 
     * @return the status value.
     */
    public FlowStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the current flow.
     * 
     * @param status the status value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withStatus(FlowStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the forceDisabledStatus property: Force disablement status of the current flow.
     * 
     * @return the forceDisabledStatus value.
     */
    public List<ForceDisabledStatus> forceDisabledStatus() {
        return this.forceDisabledStatus;
    }

    /**
     * Get the storageAccountName property: Storage Account.
     * 
     * @return the storageAccountName value.
     */
    public String storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * Set the storageAccountName property: Storage Account.
     * 
     * @param storageAccountName the storageAccountName value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withStorageAccountName(String storageAccountName) {
        this.storageAccountName = storageAccountName;
        return this;
    }

    /**
     * Get the storageAccountId property: Storage Account ID.
     * 
     * @return the storageAccountId value.
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * Set the storageAccountId property: Storage Account ID.
     * 
     * @param storageAccountId the storageAccountId value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withStorageAccountId(String storageAccountId) {
        this.storageAccountId = storageAccountId;
        return this;
    }

    /**
     * Get the storageContainerName property: Storage Container Name.
     * 
     * @return the storageContainerName value.
     */
    public String storageContainerName() {
        return this.storageContainerName;
    }

    /**
     * Set the storageContainerName property: Storage Container Name.
     * 
     * @param storageContainerName the storageContainerName value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withStorageContainerName(String storageContainerName) {
        this.storageContainerName = storageContainerName;
        return this;
    }

    /**
     * Get the storageTableName property: Storage Table Name.
     * 
     * @return the storageTableName value.
     */
    public String storageTableName() {
        return this.storageTableName;
    }

    /**
     * Set the storageTableName property: Storage Table Name.
     * 
     * @param storageTableName the storageTableName value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withStorageTableName(String storageTableName) {
        this.storageTableName = storageTableName;
        return this;
    }

    /**
     * Get the serviceBusQueueId property: Service Bus Queue ID.
     * 
     * @return the serviceBusQueueId value.
     */
    public String serviceBusQueueId() {
        return this.serviceBusQueueId;
    }

    /**
     * Set the serviceBusQueueId property: Service Bus Queue ID.
     * 
     * @param serviceBusQueueId the serviceBusQueueId value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withServiceBusQueueId(String serviceBusQueueId) {
        this.serviceBusQueueId = serviceBusQueueId;
        return this;
    }

    /**
     * Get the flowType property: The flow type for this flow.
     * 
     * @return the flowType value.
     */
    public FlowType flowType() {
        return this.flowType;
    }

    /**
     * Set the flowType property: The flow type for this flow.
     * 
     * @param flowType the flowType value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withFlowType(FlowType flowType) {
        this.flowType = flowType;
        return this;
    }

    /**
     * Get the dataType property: Transfer Storage Blobs or Tables.
     * 
     * @return the dataType value.
     */
    public DataType dataType() {
        return this.dataType;
    }

    /**
     * Set the dataType property: Transfer Storage Blobs or Tables.
     * 
     * @param dataType the dataType value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withDataType(DataType dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the flow.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the policies property: The policies for this flow.
     * 
     * @return the policies value.
     */
    public List<String> policies() {
        return this.policies;
    }

    /**
     * Set the policies property: The policies for this flow.
     * 
     * @param policies the policies value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withPolicies(List<String> policies) {
        this.policies = policies;
        return this;
    }

    /**
     * Get the schema property: The selected schema for this flow.
     * 
     * @return the schema value.
     */
    public Schema schema() {
        return this.schema;
    }

    /**
     * Set the schema property: The selected schema for this flow.
     * 
     * @param schema the schema value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withSchema(Schema schema) {
        this.schema = schema;
        return this;
    }

    /**
     * Get the messagingOptions property: The messaging options for this flow.
     * 
     * @return the messagingOptions value.
     */
    public MessagingOptions messagingOptions() {
        return this.messagingOptions;
    }

    /**
     * Set the messagingOptions property: The messaging options for this flow.
     * 
     * @param messagingOptions the messagingOptions value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withMessagingOptions(MessagingOptions messagingOptions) {
        this.messagingOptions = messagingOptions;
        return this;
    }

    /**
     * Get the apiFlowOptions property: The API Flow configuration options for Azure Data Transfer API Flow type.
     * 
     * @return the apiFlowOptions value.
     */
    public ApiFlowOptions apiFlowOptions() {
        return this.apiFlowOptions;
    }

    /**
     * Set the apiFlowOptions property: The API Flow configuration options for Azure Data Transfer API Flow type.
     * 
     * @param apiFlowOptions the apiFlowOptions value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withApiFlowOptions(ApiFlowOptions apiFlowOptions) {
        this.apiFlowOptions = apiFlowOptions;
        return this;
    }

    /**
     * Get the customerManagedKeyVaultUri property: The URI to the customer managed key for this flow.
     * 
     * @return the customerManagedKeyVaultUri value.
     */
    public String customerManagedKeyVaultUri() {
        return this.customerManagedKeyVaultUri;
    }

    /**
     * Set the customerManagedKeyVaultUri property: The URI to the customer managed key for this flow.
     * 
     * @param customerManagedKeyVaultUri the customerManagedKeyVaultUri value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withCustomerManagedKeyVaultUri(String customerManagedKeyVaultUri) {
        this.customerManagedKeyVaultUri = customerManagedKeyVaultUri;
        return this;
    }

    /**
     * Get the streamId property: The flow stream identifier.
     * 
     * @return the streamId value.
     */
    public String streamId() {
        return this.streamId;
    }

    /**
     * Set the streamId property: The flow stream identifier.
     * 
     * @param streamId the streamId value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withStreamId(String streamId) {
        this.streamId = streamId;
        return this;
    }

    /**
     * Get the streamProtocol property: The protocol of the stream.
     * 
     * @return the streamProtocol value.
     */
    public StreamProtocol streamProtocol() {
        return this.streamProtocol;
    }

    /**
     * Set the streamProtocol property: The protocol of the stream.
     * 
     * @param streamProtocol the streamProtocol value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withStreamProtocol(StreamProtocol streamProtocol) {
        this.streamProtocol = streamProtocol;
        return this;
    }

    /**
     * Get the streamLatency property: The latency of the stream in milliseconds.
     * 
     * @return the streamLatency value.
     */
    public Long streamLatency() {
        return this.streamLatency;
    }

    /**
     * Set the streamLatency property: The latency of the stream in milliseconds.
     * 
     * @param streamLatency the streamLatency value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withStreamLatency(Long streamLatency) {
        this.streamLatency = streamLatency;
        return this;
    }

    /**
     * Get the passphrase property: The passphrase used for SRT streams.
     * 
     * @return the passphrase value.
     */
    public String passphrase() {
        return this.passphrase;
    }

    /**
     * Set the passphrase property: The passphrase used for SRT streams.
     * 
     * @param passphrase the passphrase value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withPassphrase(String passphrase) {
        this.passphrase = passphrase;
        return this;
    }

    /**
     * Get the sourceAddresses property: The source IP address and CIDR ranges of the stream.
     * 
     * @return the sourceAddresses value.
     */
    public StreamSourceAddressesInner sourceAddresses() {
        return this.sourceAddresses;
    }

    /**
     * Set the sourceAddresses property: The source IP address and CIDR ranges of the stream.
     * 
     * @param sourceAddresses the sourceAddresses value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withSourceAddresses(StreamSourceAddressesInner sourceAddresses) {
        this.sourceAddresses = sourceAddresses;
        return this;
    }

    /**
     * Get the destinationEndpoints property: The destination endpoints of the stream.
     * 
     * @return the destinationEndpoints value.
     */
    public List<String> destinationEndpoints() {
        return this.destinationEndpoints;
    }

    /**
     * Set the destinationEndpoints property: The destination endpoints of the stream.
     * 
     * @param destinationEndpoints the destinationEndpoints value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withDestinationEndpoints(List<String> destinationEndpoints) {
        this.destinationEndpoints = destinationEndpoints;
        return this;
    }

    /**
     * Get the destinationEndpointPorts property: The destination endpoint ports of the stream.
     * 
     * @return the destinationEndpointPorts value.
     */
    public List<Long> destinationEndpointPorts() {
        return this.destinationEndpointPorts;
    }

    /**
     * Set the destinationEndpointPorts property: The destination endpoint ports of the stream.
     * 
     * @param destinationEndpointPorts the destinationEndpointPorts value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withDestinationEndpointPorts(List<Long> destinationEndpointPorts) {
        this.destinationEndpointPorts = destinationEndpointPorts;
        return this;
    }

    /**
     * Get the eventHubId property: Event Hub ID.
     * 
     * @return the eventHubId value.
     */
    public String eventHubId() {
        return this.eventHubId;
    }

    /**
     * Set the eventHubId property: Event Hub ID.
     * 
     * @param eventHubId the eventHubId value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withEventHubId(String eventHubId) {
        this.eventHubId = eventHubId;
        return this;
    }

    /**
     * Get the consumerGroup property: Event Hub Consumer Group.
     * 
     * @return the consumerGroup value.
     */
    public String consumerGroup() {
        return this.consumerGroup;
    }

    /**
     * Set the consumerGroup property: Event Hub Consumer Group.
     * 
     * @param consumerGroup the consumerGroup value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withConsumerGroup(String consumerGroup) {
        this.consumerGroup = consumerGroup;
        return this;
    }

    /**
     * Get the properties property: The resource-specific properties for this resource.
     * 
     * @return the properties value.
     */
    public FlowInner properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The resource-specific properties for this resource.
     * 
     * @param properties the properties value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withProperties(FlowInner properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The geo-location where the resource lives.
     * 
     * @param location the location value to set.
     * @return the PendingFlowInner object itself.
     */
    public PendingFlowInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the id property: Fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     * "Microsoft.Storage/storageAccounts".
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the subscriptionId property: Subscription ID of the pending flow.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the connectionId property: Connection ID of the pending flow.
     * 
     * @return the connectionId value.
     */
    public String connectionId() {
        return this.connectionId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connection() != null) {
            connection().validate();
        }
        if (schema() != null) {
            schema().validate();
        }
        if (messagingOptions() != null) {
            messagingOptions().validate();
        }
        if (apiFlowOptions() != null) {
            apiFlowOptions().validate();
        }
        if (sourceAddresses() != null) {
            sourceAddresses().validate();
        }
        if (properties() != null) {
            properties().validate();
        }
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property location in model PendingFlowInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PendingFlowInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeJsonField("connection", this.connection);
        jsonWriter.writeStringField("keyVaultUri", this.keyVaultUri);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("storageAccountName", this.storageAccountName);
        jsonWriter.writeStringField("storageAccountId", this.storageAccountId);
        jsonWriter.writeStringField("storageContainerName", this.storageContainerName);
        jsonWriter.writeStringField("storageTableName", this.storageTableName);
        jsonWriter.writeStringField("serviceBusQueueId", this.serviceBusQueueId);
        jsonWriter.writeStringField("flowType", this.flowType == null ? null : this.flowType.toString());
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        jsonWriter.writeArrayField("policies", this.policies, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("schema", this.schema);
        jsonWriter.writeJsonField("messagingOptions", this.messagingOptions);
        jsonWriter.writeJsonField("apiFlowOptions", this.apiFlowOptions);
        jsonWriter.writeStringField("customerManagedKeyVaultUri", this.customerManagedKeyVaultUri);
        jsonWriter.writeStringField("streamId", this.streamId);
        jsonWriter.writeStringField("streamProtocol",
            this.streamProtocol == null ? null : this.streamProtocol.toString());
        jsonWriter.writeNumberField("streamLatency", this.streamLatency);
        jsonWriter.writeStringField("passphrase", this.passphrase);
        jsonWriter.writeJsonField("sourceAddresses", this.sourceAddresses);
        jsonWriter.writeArrayField("destinationEndpoints", this.destinationEndpoints,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("destinationEndpointPorts", this.destinationEndpointPorts,
            (writer, element) -> writer.writeLong(element));
        jsonWriter.writeStringField("eventHubId", this.eventHubId);
        jsonWriter.writeStringField("consumerGroup", this.consumerGroup);
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PendingFlowInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PendingFlowInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PendingFlowInner.
     */
    public static PendingFlowInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PendingFlowInner deserializedPendingFlowInner = new PendingFlowInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    deserializedPendingFlowInner.location = reader.getString();
                } else if ("connection".equals(fieldName)) {
                    deserializedPendingFlowInner.connection = SelectedResource.fromJson(reader);
                } else if ("flowId".equals(fieldName)) {
                    deserializedPendingFlowInner.flowId = reader.getString();
                } else if ("keyVaultUri".equals(fieldName)) {
                    deserializedPendingFlowInner.keyVaultUri = reader.getString();
                } else if ("linkStatus".equals(fieldName)) {
                    deserializedPendingFlowInner.linkStatus = LinkStatus.fromString(reader.getString());
                } else if ("linkedFlowId".equals(fieldName)) {
                    deserializedPendingFlowInner.linkedFlowId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedPendingFlowInner.status = FlowStatus.fromString(reader.getString());
                } else if ("forceDisabledStatus".equals(fieldName)) {
                    List<ForceDisabledStatus> forceDisabledStatus
                        = reader.readArray(reader1 -> ForceDisabledStatus.fromString(reader1.getString()));
                    deserializedPendingFlowInner.forceDisabledStatus = forceDisabledStatus;
                } else if ("storageAccountName".equals(fieldName)) {
                    deserializedPendingFlowInner.storageAccountName = reader.getString();
                } else if ("storageAccountId".equals(fieldName)) {
                    deserializedPendingFlowInner.storageAccountId = reader.getString();
                } else if ("storageContainerName".equals(fieldName)) {
                    deserializedPendingFlowInner.storageContainerName = reader.getString();
                } else if ("storageTableName".equals(fieldName)) {
                    deserializedPendingFlowInner.storageTableName = reader.getString();
                } else if ("serviceBusQueueId".equals(fieldName)) {
                    deserializedPendingFlowInner.serviceBusQueueId = reader.getString();
                } else if ("flowType".equals(fieldName)) {
                    deserializedPendingFlowInner.flowType = FlowType.fromString(reader.getString());
                } else if ("dataType".equals(fieldName)) {
                    deserializedPendingFlowInner.dataType = DataType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPendingFlowInner.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("policies".equals(fieldName)) {
                    List<String> policies = reader.readArray(reader1 -> reader1.getString());
                    deserializedPendingFlowInner.policies = policies;
                } else if ("schema".equals(fieldName)) {
                    deserializedPendingFlowInner.schema = Schema.fromJson(reader);
                } else if ("messagingOptions".equals(fieldName)) {
                    deserializedPendingFlowInner.messagingOptions = MessagingOptions.fromJson(reader);
                } else if ("apiFlowOptions".equals(fieldName)) {
                    deserializedPendingFlowInner.apiFlowOptions = ApiFlowOptions.fromJson(reader);
                } else if ("customerManagedKeyVaultUri".equals(fieldName)) {
                    deserializedPendingFlowInner.customerManagedKeyVaultUri = reader.getString();
                } else if ("streamId".equals(fieldName)) {
                    deserializedPendingFlowInner.streamId = reader.getString();
                } else if ("streamProtocol".equals(fieldName)) {
                    deserializedPendingFlowInner.streamProtocol = StreamProtocol.fromString(reader.getString());
                } else if ("streamLatency".equals(fieldName)) {
                    deserializedPendingFlowInner.streamLatency = reader.getNullable(JsonReader::getLong);
                } else if ("passphrase".equals(fieldName)) {
                    deserializedPendingFlowInner.passphrase = reader.getString();
                } else if ("sourceAddresses".equals(fieldName)) {
                    deserializedPendingFlowInner.sourceAddresses = StreamSourceAddressesInner.fromJson(reader);
                } else if ("destinationEndpoints".equals(fieldName)) {
                    List<String> destinationEndpoints = reader.readArray(reader1 -> reader1.getString());
                    deserializedPendingFlowInner.destinationEndpoints = destinationEndpoints;
                } else if ("destinationEndpointPorts".equals(fieldName)) {
                    List<Long> destinationEndpointPorts = reader.readArray(reader1 -> reader1.getLong());
                    deserializedPendingFlowInner.destinationEndpointPorts = destinationEndpointPorts;
                } else if ("eventHubId".equals(fieldName)) {
                    deserializedPendingFlowInner.eventHubId = reader.getString();
                } else if ("consumerGroup".equals(fieldName)) {
                    deserializedPendingFlowInner.consumerGroup = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedPendingFlowInner.properties = FlowInner.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedPendingFlowInner.tags = tags;
                } else if ("id".equals(fieldName)) {
                    deserializedPendingFlowInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPendingFlowInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPendingFlowInner.type = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedPendingFlowInner.systemData = SystemData.fromJson(reader);
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedPendingFlowInner.subscriptionId = reader.getString();
                } else if ("connectionId".equals(fieldName)) {
                    deserializedPendingFlowInner.connectionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPendingFlowInner;
        });
    }
}
