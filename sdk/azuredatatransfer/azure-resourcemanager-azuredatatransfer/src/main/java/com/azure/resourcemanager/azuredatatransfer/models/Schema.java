// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The schema object.
 */
@Fluent
public final class Schema implements JsonSerializable<Schema> {
    /*
     * ID associated with this schema
     */
    private String id;

    /*
     * Connection ID associated with this schema
     */
    private String connectionId;

    /*
     * Status of the schema
     */
    private SchemaStatus status;

    /*
     * Name of the schema
     */
    private String name;

    /*
     * Content of the schema
     */
    private String content;

    /*
     * The direction of the schema.
     */
    private SchemaDirection direction;

    /**
     * Creates an instance of Schema class.
     */
    public Schema() {
    }

    /**
     * Get the id property: ID associated with this schema.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: ID associated with this schema.
     * 
     * @param id the id value to set.
     * @return the Schema object itself.
     */
    public Schema withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the connectionId property: Connection ID associated with this schema.
     * 
     * @return the connectionId value.
     */
    public String connectionId() {
        return this.connectionId;
    }

    /**
     * Set the connectionId property: Connection ID associated with this schema.
     * 
     * @param connectionId the connectionId value to set.
     * @return the Schema object itself.
     */
    public Schema withConnectionId(String connectionId) {
        this.connectionId = connectionId;
        return this;
    }

    /**
     * Get the status property: Status of the schema.
     * 
     * @return the status value.
     */
    public SchemaStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the schema.
     * 
     * @param status the status value to set.
     * @return the Schema object itself.
     */
    public Schema withStatus(SchemaStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the name property: Name of the schema.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the schema.
     * 
     * @param name the name value to set.
     * @return the Schema object itself.
     */
    public Schema withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the content property: Content of the schema.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Set the content property: Content of the schema.
     * 
     * @param content the content value to set.
     * @return the Schema object itself.
     */
    public Schema withContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the direction property: The direction of the schema.
     * 
     * @return the direction value.
     */
    public SchemaDirection direction() {
        return this.direction;
    }

    /**
     * Set the direction property: The direction of the schema.
     * 
     * @param direction the direction value to set.
     * @return the Schema object itself.
     */
    public Schema withDirection(SchemaDirection direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("connectionId", this.connectionId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Schema from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Schema if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Schema.
     */
    public static Schema fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Schema deserializedSchema = new Schema();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSchema.id = reader.getString();
                } else if ("connectionId".equals(fieldName)) {
                    deserializedSchema.connectionId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedSchema.status = SchemaStatus.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedSchema.name = reader.getString();
                } else if ("content".equals(fieldName)) {
                    deserializedSchema.content = reader.getString();
                } else if ("direction".equals(fieldName)) {
                    deserializedSchema.direction = SchemaDirection.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchema;
        });
    }
}
