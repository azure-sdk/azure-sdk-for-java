// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The request used to list approved schemas within the resource provider.
 */
@Fluent
public final class ListApprovedSchemasRequest implements JsonSerializable<ListApprovedSchemasRequest> {
    /*
     * The name of the pipeline to filter approved schemas.
     */
    private String pipeline;

    /*
     * The direction pipeline to filter approved schemas.
     */
    private Direction direction;

    /**
     * Creates an instance of ListApprovedSchemasRequest class.
     */
    public ListApprovedSchemasRequest() {
    }

    /**
     * Get the pipeline property: The name of the pipeline to filter approved schemas.
     * 
     * @return the pipeline value.
     */
    public String pipeline() {
        return this.pipeline;
    }

    /**
     * Set the pipeline property: The name of the pipeline to filter approved schemas.
     * 
     * @param pipeline the pipeline value to set.
     * @return the ListApprovedSchemasRequest object itself.
     */
    public ListApprovedSchemasRequest withPipeline(String pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /**
     * Get the direction property: The direction pipeline to filter approved schemas.
     * 
     * @return the direction value.
     */
    public Direction direction() {
        return this.direction;
    }

    /**
     * Set the direction property: The direction pipeline to filter approved schemas.
     * 
     * @param direction the direction value to set.
     * @return the ListApprovedSchemasRequest object itself.
     */
    public ListApprovedSchemasRequest withDirection(Direction direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pipeline", this.pipeline);
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ListApprovedSchemasRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ListApprovedSchemasRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ListApprovedSchemasRequest.
     */
    public static ListApprovedSchemasRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ListApprovedSchemasRequest deserializedListApprovedSchemasRequest = new ListApprovedSchemasRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pipeline".equals(fieldName)) {
                    deserializedListApprovedSchemasRequest.pipeline = reader.getString();
                } else if ("direction".equals(fieldName)) {
                    deserializedListApprovedSchemasRequest.direction = Direction.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedListApprovedSchemasRequest;
        });
    }
}
