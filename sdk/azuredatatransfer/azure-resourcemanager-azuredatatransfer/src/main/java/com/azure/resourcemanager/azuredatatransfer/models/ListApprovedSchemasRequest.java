// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The ListApprovedSchemasRequest model.
 */
@Fluent
public final class ListApprovedSchemasRequest {
    /*
     * The name of the pipeline to filter approved schemas.
     */
    @JsonProperty(value = "pipeline")
    private String pipeline;

    /*
     * The direction pipeline to filter approved schemas.
     */
    @JsonProperty(value = "direction")
    private ListApprovedSchemasDirection direction;

    /**
     * Creates an instance of ListApprovedSchemasRequest class.
     */
    public ListApprovedSchemasRequest() {
    }

    /**
     * Get the pipeline property: The name of the pipeline to filter approved schemas.
     * 
     * @return the pipeline value.
     */
    public String pipeline() {
        return this.pipeline;
    }

    /**
     * Set the pipeline property: The name of the pipeline to filter approved schemas.
     * 
     * @param pipeline the pipeline value to set.
     * @return the ListApprovedSchemasRequest object itself.
     */
    public ListApprovedSchemasRequest withPipeline(String pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /**
     * Get the direction property: The direction pipeline to filter approved schemas.
     * 
     * @return the direction value.
     */
    public ListApprovedSchemasDirection direction() {
        return this.direction;
    }

    /**
     * Set the direction property: The direction pipeline to filter approved schemas.
     * 
     * @param direction the direction value to set.
     * @return the ListApprovedSchemasRequest object itself.
     */
    public ListApprovedSchemasRequest withDirection(ListApprovedSchemasDirection direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
