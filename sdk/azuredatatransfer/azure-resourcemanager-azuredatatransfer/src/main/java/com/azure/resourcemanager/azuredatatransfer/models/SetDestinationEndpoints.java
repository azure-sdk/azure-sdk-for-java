// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Set the destination endpoints for the specified flow.
 */
@Fluent
public final class SetDestinationEndpoints implements JsonSerializable<SetDestinationEndpoints> {
    /*
     * The specified flow destination endpoints
     */
    private List<String> endpoints;

    /**
     * Creates an instance of SetDestinationEndpoints class.
     */
    public SetDestinationEndpoints() {
    }

    /**
     * Get the endpoints property: The specified flow destination endpoints.
     * 
     * @return the endpoints value.
     */
    public List<String> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: The specified flow destination endpoints.
     * 
     * @param endpoints the endpoints value to set.
     * @return the SetDestinationEndpoints object itself.
     */
    public SetDestinationEndpoints withEndpoints(List<String> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("endpoints", this.endpoints, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SetDestinationEndpoints from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SetDestinationEndpoints if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SetDestinationEndpoints.
     */
    public static SetDestinationEndpoints fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SetDestinationEndpoints deserializedSetDestinationEndpoints = new SetDestinationEndpoints();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpoints".equals(fieldName)) {
                    List<String> endpoints = reader.readArray(reader1 -> reader1.getString());
                    deserializedSetDestinationEndpoints.endpoints = endpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSetDestinationEndpoints;
        });
    }
}
