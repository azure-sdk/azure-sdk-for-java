// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuredatatransfer.fluent.PipelinesClient;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.ConnectionInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.ListFlowsByPipelineResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.PipelineInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.SchemasListResultInner;
import com.azure.resourcemanager.azuredatatransfer.models.Action;
import com.azure.resourcemanager.azuredatatransfer.models.Connection;
import com.azure.resourcemanager.azuredatatransfer.models.ConnectionIdList;
import com.azure.resourcemanager.azuredatatransfer.models.ListFlowsByPipelineResult;
import com.azure.resourcemanager.azuredatatransfer.models.Pipeline;
import com.azure.resourcemanager.azuredatatransfer.models.Pipelines;
import com.azure.resourcemanager.azuredatatransfer.models.ResourceBody;
import com.azure.resourcemanager.azuredatatransfer.models.Schema;
import com.azure.resourcemanager.azuredatatransfer.models.SchemasListResult;

public final class PipelinesImpl implements Pipelines {
    private static final ClientLogger LOGGER = new ClientLogger(PipelinesImpl.class);

    private final PipelinesClient innerClient;

    private final com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager;

    public PipelinesImpl(PipelinesClient innerClient,
        com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Pipeline> listBySubscription() {
        PagedIterable<PipelineInner> inner = this.serviceClient().listBySubscription();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PipelineImpl(inner1, this.manager()));
    }

    public PagedIterable<Pipeline> listBySubscription(Context context) {
        PagedIterable<PipelineInner> inner = this.serviceClient().listBySubscription(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PipelineImpl(inner1, this.manager()));
    }

    public PagedIterable<Pipeline> listByResourceGroup(String resourceGroupName) {
        PagedIterable<PipelineInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PipelineImpl(inner1, this.manager()));
    }

    public PagedIterable<Pipeline> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<PipelineInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PipelineImpl(inner1, this.manager()));
    }

    public Response<Pipeline> getByResourceGroupWithResponse(String resourceGroupName, String pipelineName,
        Context context) {
        Response<PipelineInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, pipelineName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PipelineImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Pipeline getByResourceGroup(String resourceGroupName, String pipelineName) {
        PipelineInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, pipelineName);
        if (inner != null) {
            return new PipelineImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String pipelineName) {
        this.serviceClient().delete(resourceGroupName, pipelineName);
    }

    public void delete(String resourceGroupName, String pipelineName, Context context) {
        this.serviceClient().delete(resourceGroupName, pipelineName, context);
    }

    public Connection approveConnection(String resourceGroupName, String pipelineName, ResourceBody body) {
        ConnectionInner inner = this.serviceClient().approveConnection(resourceGroupName, pipelineName, body);
        if (inner != null) {
            return new ConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Connection approveConnection(String resourceGroupName, String pipelineName, ResourceBody body,
        Context context) {
        ConnectionInner inner = this.serviceClient().approveConnection(resourceGroupName, pipelineName, body, context);
        if (inner != null) {
            return new ConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Pipeline executeAction(String resourceGroupName, String pipelineName, Action body) {
        PipelineInner inner = this.serviceClient().executeAction(resourceGroupName, pipelineName, body);
        if (inner != null) {
            return new PipelineImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Pipeline executeAction(String resourceGroupName, String pipelineName, Action body, Context context) {
        PipelineInner inner = this.serviceClient().executeAction(resourceGroupName, pipelineName, body, context);
        if (inner != null) {
            return new PipelineImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ListFlowsByPipelineResult> listWithResponse(String resourceGroupName, String pipelineName,
        ConnectionIdList connections, Context context) {
        Response<ListFlowsByPipelineResultInner> inner
            = this.serviceClient().listWithResponse(resourceGroupName, pipelineName, connections, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ListFlowsByPipelineResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ListFlowsByPipelineResult list(String resourceGroupName, String pipelineName) {
        ListFlowsByPipelineResultInner inner = this.serviceClient().list(resourceGroupName, pipelineName);
        if (inner != null) {
            return new ListFlowsByPipelineResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SchemasListResult> listSchemasListWithResponse(String resourceGroupName, String pipelineName,
        Schema body, Context context) {
        Response<SchemasListResultInner> inner
            = this.serviceClient().listSchemasListWithResponse(resourceGroupName, pipelineName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SchemasListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SchemasListResult listSchemasList(String resourceGroupName, String pipelineName, Schema body) {
        SchemasListResultInner inner = this.serviceClient().listSchemasList(resourceGroupName, pipelineName, body);
        if (inner != null) {
            return new SchemasListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Connection rejectConnection(String resourceGroupName, String pipelineName, ResourceBody body) {
        ConnectionInner inner = this.serviceClient().rejectConnection(resourceGroupName, pipelineName, body);
        if (inner != null) {
            return new ConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Connection rejectConnection(String resourceGroupName, String pipelineName, ResourceBody body,
        Context context) {
        ConnectionInner inner = this.serviceClient().rejectConnection(resourceGroupName, pipelineName, body, context);
        if (inner != null) {
            return new ConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Pipeline getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String pipelineName = ResourceManagerUtils.getValueFromIdByName(id, "pipelines");
        if (pipelineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'pipelines'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, pipelineName, Context.NONE).getValue();
    }

    public Response<Pipeline> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String pipelineName = ResourceManagerUtils.getValueFromIdByName(id, "pipelines");
        if (pipelineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'pipelines'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, pipelineName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String pipelineName = ResourceManagerUtils.getValueFromIdByName(id, "pipelines");
        if (pipelineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'pipelines'.", id)));
        }
        this.delete(resourceGroupName, pipelineName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String pipelineName = ResourceManagerUtils.getValueFromIdByName(id, "pipelines");
        if (pipelineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'pipelines'.", id)));
        }
        this.delete(resourceGroupName, pipelineName, context);
    }

    private PipelinesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager manager() {
        return this.serviceManager;
    }

    public PipelineImpl define(String name) {
        return new PipelineImpl(name, this.manager());
    }
}
