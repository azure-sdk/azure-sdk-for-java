// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;

/**
 * Resource collection API of ListPendingConnections.
 */
public interface ListPendingConnections {
    /**
     * Lists all pending remote connections that are linkable to this connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection to perform the operation on.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pending connections list result as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PendingConnection> list(String resourceGroupName, String connectionName);

    /**
     * Lists all pending remote connections that are linkable to this connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection to perform the operation on.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pending connections list result as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PendingConnection> list(String resourceGroupName, String connectionName, Context context);
}
