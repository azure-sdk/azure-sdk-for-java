// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The source IP address and CIDR ranges of the stream.
 */
@Fluent
public final class StreamSourceAddressesInner implements JsonSerializable<StreamSourceAddressesInner> {
    /*
     * A source IP address or CIDR range
     */
    private List<String> sourceAddresses;

    /**
     * Creates an instance of StreamSourceAddressesInner class.
     */
    public StreamSourceAddressesInner() {
    }

    /**
     * Get the sourceAddresses property: A source IP address or CIDR range.
     * 
     * @return the sourceAddresses value.
     */
    public List<String> sourceAddresses() {
        return this.sourceAddresses;
    }

    /**
     * Set the sourceAddresses property: A source IP address or CIDR range.
     * 
     * @param sourceAddresses the sourceAddresses value to set.
     * @return the StreamSourceAddressesInner object itself.
     */
    public StreamSourceAddressesInner withSourceAddresses(List<String> sourceAddresses) {
        this.sourceAddresses = sourceAddresses;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("sourceAddresses", this.sourceAddresses,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StreamSourceAddressesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StreamSourceAddressesInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StreamSourceAddressesInner.
     */
    public static StreamSourceAddressesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StreamSourceAddressesInner deserializedStreamSourceAddressesInner = new StreamSourceAddressesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceAddresses".equals(fieldName)) {
                    List<String> sourceAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedStreamSourceAddressesInner.sourceAddresses = sourceAddresses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStreamSourceAddressesInner;
        });
    }
}
