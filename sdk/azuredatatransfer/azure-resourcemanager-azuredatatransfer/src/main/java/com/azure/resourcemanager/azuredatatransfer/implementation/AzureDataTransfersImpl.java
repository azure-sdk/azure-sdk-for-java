// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuredatatransfer.fluent.AzureDataTransfersClient;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.SchemasListResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.ValidateSchemaResultInner;
import com.azure.resourcemanager.azuredatatransfer.models.AzureDataTransfers;
import com.azure.resourcemanager.azuredatatransfer.models.ListApprovedSchemasRequest;
import com.azure.resourcemanager.azuredatatransfer.models.Schema;
import com.azure.resourcemanager.azuredatatransfer.models.SchemasListResult;
import com.azure.resourcemanager.azuredatatransfer.models.ValidateSchemaResult;

public final class AzureDataTransfersImpl implements AzureDataTransfers {
    private static final ClientLogger LOGGER = new ClientLogger(AzureDataTransfersImpl.class);

    private final AzureDataTransfersClient innerClient;

    private final com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager;

    public AzureDataTransfersImpl(AzureDataTransfersClient innerClient,
        com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ValidateSchemaResult> validateSchemaWithResponse(Schema schema, Context context) {
        Response<ValidateSchemaResultInner> inner = this.serviceClient().validateSchemaWithResponse(schema, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ValidateSchemaResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ValidateSchemaResult validateSchema(Schema schema) {
        ValidateSchemaResultInner inner = this.serviceClient().validateSchema(schema);
        if (inner != null) {
            return new ValidateSchemaResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SchemasListResult> listApprovedSchemasWithResponse(ListApprovedSchemasRequest pipeline,
        Context context) {
        Response<SchemasListResultInner> inner
            = this.serviceClient().listApprovedSchemasWithResponse(pipeline, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SchemasListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SchemasListResult listApprovedSchemas(ListApprovedSchemasRequest pipeline) {
        SchemasListResultInner inner = this.serviceClient().listApprovedSchemas(pipeline);
        if (inner != null) {
            return new SchemasListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private AzureDataTransfersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager manager() {
        return this.serviceManager;
    }
}
