// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azuredatatransfer.fluent.PipelinesClient;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.ConnectionInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.PipelineInner;
import com.azure.resourcemanager.azuredatatransfer.models.PipelinesListResult;
import com.azure.resourcemanager.azuredatatransfer.models.PipelinesPatch;
import com.azure.resourcemanager.azuredatatransfer.models.ResourceBody;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PipelinesClient. */
public final class PipelinesClientImpl implements PipelinesClient {
    /** The proxy service used to perform REST calls. */
    private final PipelinesService service;

    /** The service client containing this operation class. */
    private final AzuredatatransferrpImpl client;

    /**
     * Initializes an instance of PipelinesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PipelinesClientImpl(AzuredatatransferrpImpl client) {
        this.service =
            RestProxy.create(PipelinesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzuredatatransferrpPipelines to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzuredatatransferrpP")
    public interface PipelinesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PipelineInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("pipelineName") String pipelineName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("pipelineName") String pipelineName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") PipelineInner pipeline,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("pipelineName") String pipelineName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("pipelineName") String pipelineName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") PipelinesPatch pipeline,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}/approveConnection")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> approveConnection(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("pipelineName") String pipelineName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ResourceBody connection,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}/rejectConnection")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> rejectConnection(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("pipelineName") String pipelineName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ResourceBody connection,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PipelinesListResult>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.AzureDataTransfer/pipelines")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PipelinesListResult>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PipelinesListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PipelinesListResult>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipeline resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PipelineInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String pipelineName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            pipelineName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipeline resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PipelineInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String pipelineName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                pipelineName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipeline resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PipelineInner> getByResourceGroupAsync(String resourceGroupName, String pipelineName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, pipelineName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipeline resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PipelineInner> getByResourceGroupWithResponse(
        String resourceGroupName, String pipelineName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, pipelineName, context).block();
    }

    /**
     * Gets pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipeline resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PipelineInner getByResourceGroup(String resourceGroupName, String pipelineName) {
        return getByResourceGroupWithResponse(resourceGroupName, pipelineName, Context.NONE).getValue();
    }

    /**
     * Creates or updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String pipelineName, PipelineInner pipeline) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (pipeline == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipeline is required and cannot be null."));
        } else {
            pipeline.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            pipelineName,
                            this.client.getApiVersion(),
                            pipeline,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String pipelineName, PipelineInner pipeline, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (pipeline == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipeline is required and cannot be null."));
        } else {
            pipeline.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                pipelineName,
                this.client.getApiVersion(),
                pipeline,
                accept,
                context);
    }

    /**
     * Creates or updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<PipelineInner>, PipelineInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String pipelineName, PipelineInner pipeline) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, pipelineName, pipeline);
        return this
            .client
            .<PipelineInner, PipelineInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                PipelineInner.class,
                PipelineInner.class,
                this.client.getContext());
    }

    /**
     * Creates or updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<PipelineInner>, PipelineInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String pipelineName, PipelineInner pipeline, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, pipelineName, pipeline, context);
        return this
            .client
            .<PipelineInner, PipelineInner>getLroResult(
                mono, this.client.getHttpPipeline(), PipelineInner.class, PipelineInner.class, context);
    }

    /**
     * Creates or updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PipelineInner>, PipelineInner> beginCreateOrUpdate(
        String resourceGroupName, String pipelineName, PipelineInner pipeline) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, pipelineName, pipeline).getSyncPoller();
    }

    /**
     * Creates or updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PipelineInner>, PipelineInner> beginCreateOrUpdate(
        String resourceGroupName, String pipelineName, PipelineInner pipeline, Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, pipelineName, pipeline, context).getSyncPoller();
    }

    /**
     * Creates or updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PipelineInner> createOrUpdateAsync(
        String resourceGroupName, String pipelineName, PipelineInner pipeline) {
        return beginCreateOrUpdateAsync(resourceGroupName, pipelineName, pipeline)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PipelineInner> createOrUpdateAsync(
        String resourceGroupName, String pipelineName, PipelineInner pipeline, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, pipelineName, pipeline, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PipelineInner createOrUpdate(String resourceGroupName, String pipelineName, PipelineInner pipeline) {
        return createOrUpdateAsync(resourceGroupName, pipelineName, pipeline).block();
    }

    /**
     * Creates or updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PipelineInner createOrUpdate(
        String resourceGroupName, String pipelineName, PipelineInner pipeline, Context context) {
        return createOrUpdateAsync(resourceGroupName, pipelineName, pipeline, context).block();
    }

    /**
     * Deletes the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String pipelineName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            pipelineName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String pipelineName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                pipelineName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String pipelineName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, pipelineName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String pipelineName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, pipelineName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String pipelineName) {
        return this.beginDeleteAsync(resourceGroupName, pipelineName).getSyncPoller();
    }

    /**
     * Deletes the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String pipelineName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, pipelineName, context).getSyncPoller();
    }

    /**
     * Deletes the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String pipelineName) {
        return beginDeleteAsync(resourceGroupName, pipelineName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String pipelineName, Context context) {
        return beginDeleteAsync(resourceGroupName, pipelineName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String pipelineName) {
        deleteAsync(resourceGroupName, pipelineName).block();
    }

    /**
     * Deletes the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String pipelineName, Context context) {
        deleteAsync(resourceGroupName, pipelineName, context).block();
    }

    /**
     * Updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String pipelineName, PipelinesPatch pipeline) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (pipeline == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipeline is required and cannot be null."));
        } else {
            pipeline.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            pipelineName,
                            this.client.getApiVersion(),
                            pipeline,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String pipelineName, PipelinesPatch pipeline, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (pipeline == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipeline is required and cannot be null."));
        } else {
            pipeline.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                pipelineName,
                this.client.getApiVersion(),
                pipeline,
                accept,
                context);
    }

    /**
     * Updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<PipelineInner>, PipelineInner> beginUpdateAsync(
        String resourceGroupName, String pipelineName, PipelinesPatch pipeline) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, pipelineName, pipeline);
        return this
            .client
            .<PipelineInner, PipelineInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                PipelineInner.class,
                PipelineInner.class,
                this.client.getContext());
    }

    /**
     * Updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<PipelineInner>, PipelineInner> beginUpdateAsync(
        String resourceGroupName, String pipelineName, PipelinesPatch pipeline, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, pipelineName, pipeline, context);
        return this
            .client
            .<PipelineInner, PipelineInner>getLroResult(
                mono, this.client.getHttpPipeline(), PipelineInner.class, PipelineInner.class, context);
    }

    /**
     * Updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PipelineInner>, PipelineInner> beginUpdate(
        String resourceGroupName, String pipelineName, PipelinesPatch pipeline) {
        return this.beginUpdateAsync(resourceGroupName, pipelineName, pipeline).getSyncPoller();
    }

    /**
     * Updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PipelineInner>, PipelineInner> beginUpdate(
        String resourceGroupName, String pipelineName, PipelinesPatch pipeline, Context context) {
        return this.beginUpdateAsync(resourceGroupName, pipelineName, pipeline, context).getSyncPoller();
    }

    /**
     * Updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PipelineInner> updateAsync(String resourceGroupName, String pipelineName, PipelinesPatch pipeline) {
        return beginUpdateAsync(resourceGroupName, pipelineName, pipeline)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PipelineInner> updateAsync(
        String resourceGroupName, String pipelineName, PipelinesPatch pipeline, Context context) {
        return beginUpdateAsync(resourceGroupName, pipelineName, pipeline, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PipelineInner update(String resourceGroupName, String pipelineName, PipelinesPatch pipeline) {
        return updateAsync(resourceGroupName, pipelineName, pipeline).block();
    }

    /**
     * Updates the pipeline resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param pipeline Pipeline body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipeline resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PipelineInner update(
        String resourceGroupName, String pipelineName, PipelinesPatch pipeline, Context context) {
        return updateAsync(resourceGroupName, pipelineName, pipeline, context).block();
    }

    /**
     * Approves the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> approveConnectionWithResponseAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (connection == null) {
            return Mono.error(new IllegalArgumentException("Parameter connection is required and cannot be null."));
        } else {
            connection.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .approveConnection(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            pipelineName,
                            this.client.getApiVersion(),
                            connection,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Approves the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> approveConnectionWithResponseAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (connection == null) {
            return Mono.error(new IllegalArgumentException("Parameter connection is required and cannot be null."));
        } else {
            connection.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .approveConnection(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                pipelineName,
                this.client.getApiVersion(),
                connection,
                accept,
                context);
    }

    /**
     * Approves the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ConnectionInner>, ConnectionInner> beginApproveConnectionAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            approveConnectionWithResponseAsync(resourceGroupName, pipelineName, connection);
        return this
            .client
            .<ConnectionInner, ConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ConnectionInner.class,
                ConnectionInner.class,
                this.client.getContext());
    }

    /**
     * Approves the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ConnectionInner>, ConnectionInner> beginApproveConnectionAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            approveConnectionWithResponseAsync(resourceGroupName, pipelineName, connection, context);
        return this
            .client
            .<ConnectionInner, ConnectionInner>getLroResult(
                mono, this.client.getHttpPipeline(), ConnectionInner.class, ConnectionInner.class, context);
    }

    /**
     * Approves the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ConnectionInner>, ConnectionInner> beginApproveConnection(
        String resourceGroupName, String pipelineName, ResourceBody connection) {
        return this.beginApproveConnectionAsync(resourceGroupName, pipelineName, connection).getSyncPoller();
    }

    /**
     * Approves the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ConnectionInner>, ConnectionInner> beginApproveConnection(
        String resourceGroupName, String pipelineName, ResourceBody connection, Context context) {
        return this.beginApproveConnectionAsync(resourceGroupName, pipelineName, connection, context).getSyncPoller();
    }

    /**
     * Approves the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectionInner> approveConnectionAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection) {
        return beginApproveConnectionAsync(resourceGroupName, pipelineName, connection)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Approves the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectionInner> approveConnectionAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection, Context context) {
        return beginApproveConnectionAsync(resourceGroupName, pipelineName, connection, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Approves the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionInner approveConnection(String resourceGroupName, String pipelineName, ResourceBody connection) {
        return approveConnectionAsync(resourceGroupName, pipelineName, connection).block();
    }

    /**
     * Approves the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionInner approveConnection(
        String resourceGroupName, String pipelineName, ResourceBody connection, Context context) {
        return approveConnectionAsync(resourceGroupName, pipelineName, connection, context).block();
    }

    /**
     * Rejects the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> rejectConnectionWithResponseAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (connection == null) {
            return Mono.error(new IllegalArgumentException("Parameter connection is required and cannot be null."));
        } else {
            connection.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .rejectConnection(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            pipelineName,
                            this.client.getApiVersion(),
                            connection,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Rejects the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> rejectConnectionWithResponseAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (pipelineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipelineName is required and cannot be null."));
        }
        if (connection == null) {
            return Mono.error(new IllegalArgumentException("Parameter connection is required and cannot be null."));
        } else {
            connection.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .rejectConnection(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                pipelineName,
                this.client.getApiVersion(),
                connection,
                accept,
                context);
    }

    /**
     * Rejects the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ConnectionInner>, ConnectionInner> beginRejectConnectionAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            rejectConnectionWithResponseAsync(resourceGroupName, pipelineName, connection);
        return this
            .client
            .<ConnectionInner, ConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ConnectionInner.class,
                ConnectionInner.class,
                this.client.getContext());
    }

    /**
     * Rejects the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ConnectionInner>, ConnectionInner> beginRejectConnectionAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            rejectConnectionWithResponseAsync(resourceGroupName, pipelineName, connection, context);
        return this
            .client
            .<ConnectionInner, ConnectionInner>getLroResult(
                mono, this.client.getHttpPipeline(), ConnectionInner.class, ConnectionInner.class, context);
    }

    /**
     * Rejects the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ConnectionInner>, ConnectionInner> beginRejectConnection(
        String resourceGroupName, String pipelineName, ResourceBody connection) {
        return this.beginRejectConnectionAsync(resourceGroupName, pipelineName, connection).getSyncPoller();
    }

    /**
     * Rejects the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ConnectionInner>, ConnectionInner> beginRejectConnection(
        String resourceGroupName, String pipelineName, ResourceBody connection, Context context) {
        return this.beginRejectConnectionAsync(resourceGroupName, pipelineName, connection, context).getSyncPoller();
    }

    /**
     * Rejects the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectionInner> rejectConnectionAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection) {
        return beginRejectConnectionAsync(resourceGroupName, pipelineName, connection)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Rejects the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectionInner> rejectConnectionAsync(
        String resourceGroupName, String pipelineName, ResourceBody connection, Context context) {
        return beginRejectConnectionAsync(resourceGroupName, pipelineName, connection, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Rejects the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionInner rejectConnection(String resourceGroupName, String pipelineName, ResourceBody connection) {
        return rejectConnectionAsync(resourceGroupName, pipelineName, connection).block();
    }

    /**
     * Rejects the specified connection in a pipeline.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pipelineName The name for the pipeline that is to be requested.
     * @param connection Connection body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionInner rejectConnection(
        String resourceGroupName, String pipelineName, ResourceBody connection, Context context) {
        return rejectConnectionAsync(resourceGroupName, pipelineName, connection, context).block();
    }

    /**
     * Gets pipelines in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a resource group along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<PipelineInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets pipelines in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a resource group along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets pipelines in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PipelineInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets pipelines in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PipelineInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets pipelines in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PipelineInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Gets pipelines in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PipelineInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Gets pipelines in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a subscription along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<PipelineInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets pipelines in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a subscription along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets pipelines in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PipelineInner> listAsync() {
        return new PagedFlux<>(
            () -> listSinglePageAsync(), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Gets pipelines in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PipelineInner> listAsync(Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(context), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets pipelines in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PipelineInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Gets pipelines in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pipelines in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PipelineInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipelines list result along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PipelineInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipelines list result along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipelines list result along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PipelineInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the pipelines list result along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PipelineInner>> listBySubscriptionNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
