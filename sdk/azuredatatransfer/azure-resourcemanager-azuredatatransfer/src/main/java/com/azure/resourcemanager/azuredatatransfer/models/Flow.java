// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.FlowInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.FlowPropertiesInner;
import java.util.Map;

/**
 * An immutable client-side representation of Flow.
 */
public interface Flow {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the properties property: Properties of flow.
     * 
     * @return the properties value.
     */
    FlowProperties properties();

    /**
     * Gets the plan property: Details of the resource plan.
     * 
     * @return the plan value.
     */
    Plan plan();

    /**
     * Gets the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    ManagedServiceIdentity identity();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.azuredatatransfer.fluent.models.FlowInner object.
     * 
     * @return the inner object.
     */
    FlowInner innerModel();

    /**
     * The entirety of the Flow definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The Flow definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the Flow definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the Flow definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }

        /**
         * The stage of the Flow definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, connectionName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param connectionName The name for the connection that is to be requested.
             * @return the next definition stage.
             */
            WithCreate withExistingConnection(String resourceGroupName, String connectionName);
        }

        /**
         * The stage of the Flow definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithProperties,
            DefinitionStages.WithPlan, DefinitionStages.WithIdentity {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            Flow create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Flow create(Context context);
        }

        /**
         * The stage of the Flow definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the Flow definition allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: Properties of flow.
             * 
             * @param properties Properties of flow.
             * @return the next definition stage.
             */
            WithCreate withProperties(FlowPropertiesInner properties);
        }

        /**
         * The stage of the Flow definition allowing to specify plan.
         */
        interface WithPlan {
            /**
             * Specifies the plan property: Details of the resource plan..
             * 
             * @param plan Details of the resource plan.
             * @return the next definition stage.
             */
            WithCreate withPlan(Plan plan);
        }

        /**
         * The stage of the Flow definition allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed service identities assigned to this resource..
             * 
             * @param identity The managed service identities assigned to this resource.
             * @return the next definition stage.
             */
            WithCreate withIdentity(ManagedServiceIdentity identity);
        }
    }

    /**
     * Begins update for the Flow resource.
     * 
     * @return the stage of resource update.
     */
    Flow.Update update();

    /**
     * The template for Flow update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithIdentity {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        Flow apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Flow apply(Context context);
    }

    /**
     * The Flow update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the Flow update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the Flow update allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed service identities assigned to this resource..
             * 
             * @param identity The managed service identities assigned to this resource.
             * @return the next definition stage.
             */
            Update withIdentity(ManagedServiceIdentity identity);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    Flow refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Flow refresh(Context context);

    /**
     * Disables the specified flow.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow disable();

    /**
     * Disables the specified flow.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow disable(Context context);

    /**
     * Enables the specified flow.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow enable();

    /**
     * Enables the specified flow.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow enable(Context context);

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow generatePassphrase();

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow generatePassphrase(Context context);

    /**
     * Get the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoint ports for the specified flow and stream ID along with {@link Response}.
     */
    Response<GetDestinationEndpointPortsResult> getDestinationEndpointPortsWithResponse(Context context);

    /**
     * Get the destination endpoint ports for the specified flow and stream ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoint ports for the specified flow and stream ID.
     */
    GetDestinationEndpointPortsResult getDestinationEndpointPorts();

    /**
     * Get the destination endpoints for the specified flow and stream ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoints for the specified flow and stream ID along with {@link Response}.
     */
    Response<GetDestinationEndpointsResult> getDestinationEndpointsWithResponse(Context context);

    /**
     * Get the destination endpoints for the specified flow and stream ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoints for the specified flow and stream ID.
     */
    GetDestinationEndpointsResult getDestinationEndpoints();

    /**
     * Get the source addresses for the specified flow.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source addresses for the specified flow along with {@link Response}.
     */
    Response<StreamSourceAddresses> getSourceAddressesWithResponse(Context context);

    /**
     * Get the source addresses for the specified flow.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source addresses for the specified flow.
     */
    StreamSourceAddresses getSourceAddresses();

    /**
     * Get the connection string for the specified flow.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection string for the specified flow along with {@link Response}.
     */
    Response<GetStreamConnectionStringResult> getStreamConnectionStringWithResponse(Context context);

    /**
     * Get the connection string for the specified flow.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection string for the specified flow.
     */
    GetStreamConnectionStringResult getStreamConnectionString();

    /**
     * Links the specified flow.
     * 
     * @param body Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow link(ResourceBody body);

    /**
     * Links the specified flow.
     * 
     * @param body Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow link(ResourceBody body, Context context);

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param body Stream ID destination endpoint ports wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow setDestinationEndpointPorts(SetDestinationEndpointPorts body);

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param body Stream ID destination endpoint ports wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow setDestinationEndpointPorts(SetDestinationEndpointPorts body, Context context);

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param body Stream ID destination endpoints wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow setDestinationEndpoints(SetDestinationEndpoints body);

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param body Stream ID destination endpoints wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow setDestinationEndpoints(SetDestinationEndpoints body, Context context);

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param body Passphrase to set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow setPassphrase(SetStreamPassphrase body);

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param body Passphrase to set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow setPassphrase(SetStreamPassphrase body, Context context);

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param body Source addresses wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow setSourceAddresses(SetSourceAddresses body);

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param body Source addresses wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    Flow setSourceAddresses(SetSourceAddresses body, Context context);
}
