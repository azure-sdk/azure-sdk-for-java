// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuredatatransfer.models.ConnectionProperties;
import com.azure.resourcemanager.azuredatatransfer.models.Direction;
import com.azure.resourcemanager.azuredatatransfer.models.FlowType;
import com.azure.resourcemanager.azuredatatransfer.models.Schema;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Pending connection object.
 */
@Fluent
public final class PendingConnectionInner extends ConnectionProperties {
    /*
     * Subscription ID of the pending connection.
     */
    @JsonProperty(value = "subscriptionId", access = JsonProperty.Access.WRITE_ONLY)
    private String subscriptionId;

    /*
     * Resource tags.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /*
     * The geo-location where the resource lives
     */
    @JsonProperty(value = "location", required = true)
    private String location;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * the fully qualified resource ID for the resource
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * the name of the resource
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /*
     * the type of the resource
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /**
     * Creates an instance of PendingConnectionInner class.
     */
    public PendingConnectionInner() {
    }

    /**
     * Get the subscriptionId property: Subscription ID of the pending connection.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the PendingConnectionInner object itself.
     */
    public PendingConnectionInner withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The geo-location where the resource lives.
     * 
     * @param location the location value to set.
     * @return the PendingConnectionInner object itself.
     */
    public PendingConnectionInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the id property: the fully qualified resource ID for the resource.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: the name of the resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: the type of the resource.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withPipeline(String pipeline) {
        super.withPipeline(pipeline);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withDirection(Direction direction) {
        super.withDirection(direction);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withJustification(String justification) {
        super.withJustification(justification);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withFlowTypes(List<FlowType> flowTypes) {
        super.withFlowTypes(flowTypes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withRequirementId(String requirementId) {
        super.withRequirementId(requirementId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withRemoteSubscriptionId(String remoteSubscriptionId) {
        super.withRemoteSubscriptionId(remoteSubscriptionId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withPin(String pin) {
        super.withPin(pin);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withPrimaryContact(String primaryContact) {
        super.withPrimaryContact(primaryContact);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withSecondaryContacts(List<String> secondaryContacts) {
        super.withSecondaryContacts(secondaryContacts);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withPolicies(List<String> policies) {
        super.withPolicies(policies);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withSchemas(List<Schema> schemas) {
        super.withSchemas(schemas);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (location() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property location in model PendingConnectionInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PendingConnectionInner.class);
}
