// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azuredatatransfer.models.ConnectionProperties;
import com.azure.resourcemanager.azuredatatransfer.models.Direction;
import com.azure.resourcemanager.azuredatatransfer.models.FlowType;
import com.azure.resourcemanager.azuredatatransfer.models.LinkStatus;
import com.azure.resourcemanager.azuredatatransfer.models.ProvisioningState;
import com.azure.resourcemanager.azuredatatransfer.models.Schema;
import com.azure.resourcemanager.azuredatatransfer.models.Status;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Pending connection object.
 */
@Fluent
public final class PendingConnectionInner extends ConnectionProperties {
    /*
     * Subscription ID of the pending connection.
     */
    private String subscriptionId;

    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The geo-location where the resource lives
     */
    private String location;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * the fully qualified resource ID for the resource
     */
    private String id;

    /*
     * the name of the resource
     */
    private String name;

    /*
     * the type of the resource
     */
    private String type;

    /*
     * Provisioning state of the connection
     */
    private ProvisioningState provisioningState;

    /*
     * The timestamp that this connection request was submitted at
     */
    private OffsetDateTime dateSubmitted;

    /*
     * Approver of this connection request
     */
    private String approver;

    /*
     * Resource ID of the linked connection
     */
    private String linkedConnectionId;

    /*
     * Link status of the current connection
     */
    private LinkStatus linkStatus;

    /*
     * Reason for status
     */
    private String statusReason;

    /*
     * Status of the connection
     */
    private Status status;

    /**
     * Creates an instance of PendingConnectionInner class.
     */
    public PendingConnectionInner() {
    }

    /**
     * Get the subscriptionId property: Subscription ID of the pending connection.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the PendingConnectionInner object itself.
     */
    public PendingConnectionInner withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The geo-location where the resource lives.
     * 
     * @param location the location value to set.
     * @return the PendingConnectionInner object itself.
     */
    public PendingConnectionInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the id property: the fully qualified resource ID for the resource.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: the name of the resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: the type of the resource.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the provisioningState property: Provisioning state of the connection.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the dateSubmitted property: The timestamp that this connection request was submitted at.
     * 
     * @return the dateSubmitted value.
     */
    @Override
    public OffsetDateTime dateSubmitted() {
        return this.dateSubmitted;
    }

    /**
     * Get the approver property: Approver of this connection request.
     * 
     * @return the approver value.
     */
    @Override
    public String approver() {
        return this.approver;
    }

    /**
     * Get the linkedConnectionId property: Resource ID of the linked connection.
     * 
     * @return the linkedConnectionId value.
     */
    @Override
    public String linkedConnectionId() {
        return this.linkedConnectionId;
    }

    /**
     * Get the linkStatus property: Link status of the current connection.
     * 
     * @return the linkStatus value.
     */
    @Override
    public LinkStatus linkStatus() {
        return this.linkStatus;
    }

    /**
     * Get the statusReason property: Reason for status.
     * 
     * @return the statusReason value.
     */
    @Override
    public String statusReason() {
        return this.statusReason;
    }

    /**
     * Get the status property: Status of the connection.
     * 
     * @return the status value.
     */
    @Override
    public Status status() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withPipeline(String pipeline) {
        super.withPipeline(pipeline);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withDirection(Direction direction) {
        super.withDirection(direction);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withJustification(String justification) {
        super.withJustification(justification);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withFlowTypes(List<FlowType> flowTypes) {
        super.withFlowTypes(flowTypes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withRequirementId(String requirementId) {
        super.withRequirementId(requirementId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withRemoteSubscriptionId(String remoteSubscriptionId) {
        super.withRemoteSubscriptionId(remoteSubscriptionId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withPin(String pin) {
        super.withPin(pin);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withPrimaryContact(String primaryContact) {
        super.withPrimaryContact(primaryContact);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withSecondaryContacts(List<String> secondaryContacts) {
        super.withSecondaryContacts(secondaryContacts);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withPolicies(List<String> policies) {
        super.withPolicies(policies);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withSchemas(List<Schema> schemas) {
        super.withSchemas(schemas);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PendingConnectionInner withSchemaUris(List<String> schemaUris) {
        super.withSchemaUris(schemaUris);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (location() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property location in model PendingConnectionInner"));
        }
        if (pipeline() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property pipeline in model PendingConnectionInner"));
        }
        if (schemas() != null) {
            schemas().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PendingConnectionInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pipeline", pipeline());
        jsonWriter.writeStringField("direction", direction() == null ? null : direction().toString());
        jsonWriter.writeStringField("justification", justification());
        jsonWriter.writeArrayField("flowTypes", flowTypes(),
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("requirementId", requirementId());
        jsonWriter.writeStringField("remoteSubscriptionId", remoteSubscriptionId());
        jsonWriter.writeStringField("pin", pin());
        jsonWriter.writeStringField("primaryContact", primaryContact());
        jsonWriter.writeArrayField("secondaryContacts", secondaryContacts(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("policies", policies(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("schemas", schemas(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("schemaUris", schemaUris(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PendingConnectionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PendingConnectionInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PendingConnectionInner.
     */
    public static PendingConnectionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PendingConnectionInner deserializedPendingConnectionInner = new PendingConnectionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pipeline".equals(fieldName)) {
                    deserializedPendingConnectionInner.withPipeline(reader.getString());
                } else if ("direction".equals(fieldName)) {
                    deserializedPendingConnectionInner.withDirection(Direction.fromString(reader.getString()));
                } else if ("justification".equals(fieldName)) {
                    deserializedPendingConnectionInner.withJustification(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedPendingConnectionInner.status = Status.fromString(reader.getString());
                } else if ("statusReason".equals(fieldName)) {
                    deserializedPendingConnectionInner.statusReason = reader.getString();
                } else if ("linkStatus".equals(fieldName)) {
                    deserializedPendingConnectionInner.linkStatus = LinkStatus.fromString(reader.getString());
                } else if ("linkedConnectionId".equals(fieldName)) {
                    deserializedPendingConnectionInner.linkedConnectionId = reader.getString();
                } else if ("flowTypes".equals(fieldName)) {
                    List<FlowType> flowTypes = reader.readArray(reader1 -> FlowType.fromString(reader1.getString()));
                    deserializedPendingConnectionInner.withFlowTypes(flowTypes);
                } else if ("requirementId".equals(fieldName)) {
                    deserializedPendingConnectionInner.withRequirementId(reader.getString());
                } else if ("remoteSubscriptionId".equals(fieldName)) {
                    deserializedPendingConnectionInner.withRemoteSubscriptionId(reader.getString());
                } else if ("approver".equals(fieldName)) {
                    deserializedPendingConnectionInner.approver = reader.getString();
                } else if ("pin".equals(fieldName)) {
                    deserializedPendingConnectionInner.withPin(reader.getString());
                } else if ("dateSubmitted".equals(fieldName)) {
                    deserializedPendingConnectionInner.dateSubmitted = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("primaryContact".equals(fieldName)) {
                    deserializedPendingConnectionInner.withPrimaryContact(reader.getString());
                } else if ("secondaryContacts".equals(fieldName)) {
                    List<String> secondaryContacts = reader.readArray(reader1 -> reader1.getString());
                    deserializedPendingConnectionInner.withSecondaryContacts(secondaryContacts);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPendingConnectionInner.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("policies".equals(fieldName)) {
                    List<String> policies = reader.readArray(reader1 -> reader1.getString());
                    deserializedPendingConnectionInner.withPolicies(policies);
                } else if ("schemas".equals(fieldName)) {
                    List<Schema> schemas = reader.readArray(reader1 -> Schema.fromJson(reader1));
                    deserializedPendingConnectionInner.withSchemas(schemas);
                } else if ("schemaUris".equals(fieldName)) {
                    List<String> schemaUris = reader.readArray(reader1 -> reader1.getString());
                    deserializedPendingConnectionInner.withSchemaUris(schemaUris);
                } else if ("location".equals(fieldName)) {
                    deserializedPendingConnectionInner.location = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedPendingConnectionInner.subscriptionId = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedPendingConnectionInner.tags = tags;
                } else if ("systemData".equals(fieldName)) {
                    deserializedPendingConnectionInner.systemData = SystemData.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    deserializedPendingConnectionInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPendingConnectionInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPendingConnectionInner.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPendingConnectionInner;
        });
    }
}
