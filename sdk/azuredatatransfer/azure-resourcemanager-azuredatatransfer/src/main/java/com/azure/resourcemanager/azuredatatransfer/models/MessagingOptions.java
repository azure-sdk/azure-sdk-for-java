// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The option associated with messaging flows.
 */
@Fluent
public final class MessagingOptions implements JsonSerializable<MessagingOptions> {
    /*
     * Billing tier for this messaging flow
     */
    private FlowBillingTier billingTier;

    /**
     * Creates an instance of MessagingOptions class.
     */
    public MessagingOptions() {
    }

    /**
     * Get the billingTier property: Billing tier for this messaging flow.
     * 
     * @return the billingTier value.
     */
    public FlowBillingTier billingTier() {
        return this.billingTier;
    }

    /**
     * Set the billingTier property: Billing tier for this messaging flow.
     * 
     * @param billingTier the billingTier value to set.
     * @return the MessagingOptions object itself.
     */
    public MessagingOptions withBillingTier(FlowBillingTier billingTier) {
        this.billingTier = billingTier;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("billingTier", this.billingTier == null ? null : this.billingTier.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessagingOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessagingOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MessagingOptions.
     */
    public static MessagingOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MessagingOptions deserializedMessagingOptions = new MessagingOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingTier".equals(fieldName)) {
                    deserializedMessagingOptions.billingTier = FlowBillingTier.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMessagingOptions;
        });
    }
}
