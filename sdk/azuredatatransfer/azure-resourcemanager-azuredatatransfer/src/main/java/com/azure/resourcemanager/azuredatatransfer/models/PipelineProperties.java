// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of pipeline.
 */
@Fluent
public final class PipelineProperties implements JsonSerializable<PipelineProperties> {
    /*
     * Remote cloud of the data to be transferred or received
     */
    private String remoteCloud;

    /*
     * Display name of this pipeline
     */
    private String displayName;

    /*
     * Connections associated with pipeline
     */
    private List<PipelineConnection> connections;

    /*
     * Subscribers of this resource
     */
    private List<Subscriber> subscribers;

    /*
     * Provisioning state of the pipeline
     */
    private ProvisioningState provisioningState;

    /*
     * The policies for this pipeline
     */
    private List<String> policies;

    /*
     * The flow types allowed for this pipeline
     */
    private List<FlowType> flowTypes;

    /*
     * The flow types that are disabled for this pipeline
     */
    private List<FlowType> disabledFlowTypes;

    /*
     * Quarantine Download Storage Account
     */
    private String quarantineDownloadStorageAccount;

    /*
     * Quarantine Download Storage Container
     */
    private String quarantineDownloadStorageContainer;

    /*
     * Status of the current pipeline
     */
    private PipelineStatus status;

    /**
     * Creates an instance of PipelineProperties class.
     */
    public PipelineProperties() {
    }

    /**
     * Get the remoteCloud property: Remote cloud of the data to be transferred or received.
     * 
     * @return the remoteCloud value.
     */
    public String remoteCloud() {
        return this.remoteCloud;
    }

    /**
     * Set the remoteCloud property: Remote cloud of the data to be transferred or received.
     * 
     * @param remoteCloud the remoteCloud value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withRemoteCloud(String remoteCloud) {
        this.remoteCloud = remoteCloud;
        return this;
    }

    /**
     * Get the displayName property: Display name of this pipeline.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of this pipeline.
     * 
     * @param displayName the displayName value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the connections property: Connections associated with pipeline.
     * 
     * @return the connections value.
     */
    public List<PipelineConnection> connections() {
        return this.connections;
    }

    /**
     * Get the subscribers property: Subscribers of this resource.
     * 
     * @return the subscribers value.
     */
    public List<Subscriber> subscribers() {
        return this.subscribers;
    }

    /**
     * Set the subscribers property: Subscribers of this resource.
     * 
     * @param subscribers the subscribers value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withSubscribers(List<Subscriber> subscribers) {
        this.subscribers = subscribers;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the pipeline.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the policies property: The policies for this pipeline.
     * 
     * @return the policies value.
     */
    public List<String> policies() {
        return this.policies;
    }

    /**
     * Set the policies property: The policies for this pipeline.
     * 
     * @param policies the policies value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withPolicies(List<String> policies) {
        this.policies = policies;
        return this;
    }

    /**
     * Get the flowTypes property: The flow types allowed for this pipeline.
     * 
     * @return the flowTypes value.
     */
    public List<FlowType> flowTypes() {
        return this.flowTypes;
    }

    /**
     * Set the flowTypes property: The flow types allowed for this pipeline.
     * 
     * @param flowTypes the flowTypes value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withFlowTypes(List<FlowType> flowTypes) {
        this.flowTypes = flowTypes;
        return this;
    }

    /**
     * Get the disabledFlowTypes property: The flow types that are disabled for this pipeline.
     * 
     * @return the disabledFlowTypes value.
     */
    public List<FlowType> disabledFlowTypes() {
        return this.disabledFlowTypes;
    }

    /**
     * Set the disabledFlowTypes property: The flow types that are disabled for this pipeline.
     * 
     * @param disabledFlowTypes the disabledFlowTypes value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withDisabledFlowTypes(List<FlowType> disabledFlowTypes) {
        this.disabledFlowTypes = disabledFlowTypes;
        return this;
    }

    /**
     * Get the quarantineDownloadStorageAccount property: Quarantine Download Storage Account.
     * 
     * @return the quarantineDownloadStorageAccount value.
     */
    public String quarantineDownloadStorageAccount() {
        return this.quarantineDownloadStorageAccount;
    }

    /**
     * Set the quarantineDownloadStorageAccount property: Quarantine Download Storage Account.
     * 
     * @param quarantineDownloadStorageAccount the quarantineDownloadStorageAccount value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withQuarantineDownloadStorageAccount(String quarantineDownloadStorageAccount) {
        this.quarantineDownloadStorageAccount = quarantineDownloadStorageAccount;
        return this;
    }

    /**
     * Get the quarantineDownloadStorageContainer property: Quarantine Download Storage Container.
     * 
     * @return the quarantineDownloadStorageContainer value.
     */
    public String quarantineDownloadStorageContainer() {
        return this.quarantineDownloadStorageContainer;
    }

    /**
     * Set the quarantineDownloadStorageContainer property: Quarantine Download Storage Container.
     * 
     * @param quarantineDownloadStorageContainer the quarantineDownloadStorageContainer value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withQuarantineDownloadStorageContainer(String quarantineDownloadStorageContainer) {
        this.quarantineDownloadStorageContainer = quarantineDownloadStorageContainer;
        return this;
    }

    /**
     * Get the status property: Status of the current pipeline.
     * 
     * @return the status value.
     */
    public PipelineStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the current pipeline.
     * 
     * @param status the status value to set.
     * @return the PipelineProperties object itself.
     */
    public PipelineProperties withStatus(PipelineStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (remoteCloud() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property remoteCloud in model PipelineProperties"));
        }
        if (connections() != null) {
            connections().forEach(e -> e.validate());
        }
        if (subscribers() != null) {
            subscribers().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PipelineProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("remoteCloud", this.remoteCloud);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeArrayField("subscribers", this.subscribers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("policies", this.policies, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("flowTypes", this.flowTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("disabledFlowTypes", this.disabledFlowTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("quarantineDownloadStorageAccount", this.quarantineDownloadStorageAccount);
        jsonWriter.writeStringField("quarantineDownloadStorageContainer", this.quarantineDownloadStorageContainer);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PipelineProperties.
     */
    public static PipelineProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineProperties deserializedPipelineProperties = new PipelineProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("remoteCloud".equals(fieldName)) {
                    deserializedPipelineProperties.remoteCloud = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedPipelineProperties.displayName = reader.getString();
                } else if ("connections".equals(fieldName)) {
                    List<PipelineConnection> connections
                        = reader.readArray(reader1 -> PipelineConnection.fromJson(reader1));
                    deserializedPipelineProperties.connections = connections;
                } else if ("subscribers".equals(fieldName)) {
                    List<Subscriber> subscribers = reader.readArray(reader1 -> Subscriber.fromJson(reader1));
                    deserializedPipelineProperties.subscribers = subscribers;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPipelineProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("policies".equals(fieldName)) {
                    List<String> policies = reader.readArray(reader1 -> reader1.getString());
                    deserializedPipelineProperties.policies = policies;
                } else if ("flowTypes".equals(fieldName)) {
                    List<FlowType> flowTypes = reader.readArray(reader1 -> FlowType.fromString(reader1.getString()));
                    deserializedPipelineProperties.flowTypes = flowTypes;
                } else if ("disabledFlowTypes".equals(fieldName)) {
                    List<FlowType> disabledFlowTypes
                        = reader.readArray(reader1 -> FlowType.fromString(reader1.getString()));
                    deserializedPipelineProperties.disabledFlowTypes = disabledFlowTypes;
                } else if ("quarantineDownloadStorageAccount".equals(fieldName)) {
                    deserializedPipelineProperties.quarantineDownloadStorageAccount = reader.getString();
                } else if ("quarantineDownloadStorageContainer".equals(fieldName)) {
                    deserializedPipelineProperties.quarantineDownloadStorageContainer = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedPipelineProperties.status = PipelineStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineProperties;
        });
    }
}
