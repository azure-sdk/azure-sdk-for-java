// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuredatatransfer.fluent.FlowsClient;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.FlowInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.GetDestinationEndpointPortsResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.GetDestinationEndpointsResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.GetStreamConnectionStringResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.StreamSourceAddressesInner;
import com.azure.resourcemanager.azuredatatransfer.models.Flow;
import com.azure.resourcemanager.azuredatatransfer.models.Flows;
import com.azure.resourcemanager.azuredatatransfer.models.GetDestinationEndpointPortsResult;
import com.azure.resourcemanager.azuredatatransfer.models.GetDestinationEndpointsResult;
import com.azure.resourcemanager.azuredatatransfer.models.GetStreamConnectionStringResult;
import com.azure.resourcemanager.azuredatatransfer.models.ResourceBody;
import com.azure.resourcemanager.azuredatatransfer.models.SetDestinationEndpointPorts;
import com.azure.resourcemanager.azuredatatransfer.models.SetDestinationEndpoints;
import com.azure.resourcemanager.azuredatatransfer.models.SetSourceAddresses;
import com.azure.resourcemanager.azuredatatransfer.models.SetStreamPassphrase;
import com.azure.resourcemanager.azuredatatransfer.models.StreamSourceAddresses;

public final class FlowsImpl implements Flows {
    private static final ClientLogger LOGGER = new ClientLogger(FlowsImpl.class);

    private final FlowsClient innerClient;

    private final com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager;

    public FlowsImpl(FlowsClient innerClient,
        com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Flow> listByConnection(String resourceGroupName, String connectionName) {
        PagedIterable<FlowInner> inner = this.serviceClient().listByConnection(resourceGroupName, connectionName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FlowImpl(inner1, this.manager()));
    }

    public PagedIterable<Flow> listByConnection(String resourceGroupName, String connectionName, Context context) {
        PagedIterable<FlowInner> inner
            = this.serviceClient().listByConnection(resourceGroupName, connectionName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FlowImpl(inner1, this.manager()));
    }

    public Response<Flow> getWithResponse(String resourceGroupName, String connectionName, String flowName,
        Context context) {
        Response<FlowInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, connectionName, flowName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FlowImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Flow get(String resourceGroupName, String connectionName, String flowName) {
        FlowInner inner = this.serviceClient().get(resourceGroupName, connectionName, flowName);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String connectionName, String flowName) {
        this.serviceClient().delete(resourceGroupName, connectionName, flowName);
    }

    public void delete(String resourceGroupName, String connectionName, String flowName, Context context) {
        this.serviceClient().delete(resourceGroupName, connectionName, flowName, context);
    }

    public Flow disable(String resourceGroupName, String connectionName, String flowName) {
        FlowInner inner = this.serviceClient().disable(resourceGroupName, connectionName, flowName);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow disable(String resourceGroupName, String connectionName, String flowName, Context context) {
        FlowInner inner = this.serviceClient().disable(resourceGroupName, connectionName, flowName, context);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow enable(String resourceGroupName, String connectionName, String flowName) {
        FlowInner inner = this.serviceClient().enable(resourceGroupName, connectionName, flowName);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow enable(String resourceGroupName, String connectionName, String flowName, Context context) {
        FlowInner inner = this.serviceClient().enable(resourceGroupName, connectionName, flowName, context);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow generatePassphrase(String resourceGroupName, String connectionName, String flowName) {
        FlowInner inner = this.serviceClient().generatePassphrase(resourceGroupName, connectionName, flowName);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow generatePassphrase(String resourceGroupName, String connectionName, String flowName, Context context) {
        FlowInner inner = this.serviceClient().generatePassphrase(resourceGroupName, connectionName, flowName, context);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetDestinationEndpointPortsResult> getDestinationEndpointPortsWithResponse(String resourceGroupName,
        String connectionName, String flowName, Context context) {
        Response<GetDestinationEndpointPortsResultInner> inner = this.serviceClient()
            .getDestinationEndpointPortsWithResponse(resourceGroupName, connectionName, flowName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GetDestinationEndpointPortsResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GetDestinationEndpointPortsResult getDestinationEndpointPorts(String resourceGroupName,
        String connectionName, String flowName) {
        GetDestinationEndpointPortsResultInner inner
            = this.serviceClient().getDestinationEndpointPorts(resourceGroupName, connectionName, flowName);
        if (inner != null) {
            return new GetDestinationEndpointPortsResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetDestinationEndpointsResult> getDestinationEndpointsWithResponse(String resourceGroupName,
        String connectionName, String flowName, Context context) {
        Response<GetDestinationEndpointsResultInner> inner = this.serviceClient()
            .getDestinationEndpointsWithResponse(resourceGroupName, connectionName, flowName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GetDestinationEndpointsResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GetDestinationEndpointsResult getDestinationEndpoints(String resourceGroupName, String connectionName,
        String flowName) {
        GetDestinationEndpointsResultInner inner
            = this.serviceClient().getDestinationEndpoints(resourceGroupName, connectionName, flowName);
        if (inner != null) {
            return new GetDestinationEndpointsResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StreamSourceAddresses> getSourceAddressesWithResponse(String resourceGroupName,
        String connectionName, String flowName, Context context) {
        Response<StreamSourceAddressesInner> inner
            = this.serviceClient().getSourceAddressesWithResponse(resourceGroupName, connectionName, flowName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StreamSourceAddressesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StreamSourceAddresses getSourceAddresses(String resourceGroupName, String connectionName, String flowName) {
        StreamSourceAddressesInner inner
            = this.serviceClient().getSourceAddresses(resourceGroupName, connectionName, flowName);
        if (inner != null) {
            return new StreamSourceAddressesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetStreamConnectionStringResult> getStreamConnectionStringWithResponse(String resourceGroupName,
        String connectionName, String flowName, Context context) {
        Response<GetStreamConnectionStringResultInner> inner = this.serviceClient()
            .getStreamConnectionStringWithResponse(resourceGroupName, connectionName, flowName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GetStreamConnectionStringResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GetStreamConnectionStringResult getStreamConnectionString(String resourceGroupName, String connectionName,
        String flowName) {
        GetStreamConnectionStringResultInner inner
            = this.serviceClient().getStreamConnectionString(resourceGroupName, connectionName, flowName);
        if (inner != null) {
            return new GetStreamConnectionStringResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow link(String resourceGroupName, String connectionName, String flowName, ResourceBody body) {
        FlowInner inner = this.serviceClient().link(resourceGroupName, connectionName, flowName, body);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow link(String resourceGroupName, String connectionName, String flowName, ResourceBody body,
        Context context) {
        FlowInner inner = this.serviceClient().link(resourceGroupName, connectionName, flowName, body, context);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow setDestinationEndpointPorts(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpointPorts body) {
        FlowInner inner
            = this.serviceClient().setDestinationEndpointPorts(resourceGroupName, connectionName, flowName, body);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow setDestinationEndpointPorts(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpointPorts body, Context context) {
        FlowInner inner = this.serviceClient()
            .setDestinationEndpointPorts(resourceGroupName, connectionName, flowName, body, context);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow setDestinationEndpoints(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpoints body) {
        FlowInner inner
            = this.serviceClient().setDestinationEndpoints(resourceGroupName, connectionName, flowName, body);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow setDestinationEndpoints(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpoints body, Context context) {
        FlowInner inner
            = this.serviceClient().setDestinationEndpoints(resourceGroupName, connectionName, flowName, body, context);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow setPassphrase(String resourceGroupName, String connectionName, String flowName,
        SetStreamPassphrase body) {
        FlowInner inner = this.serviceClient().setPassphrase(resourceGroupName, connectionName, flowName, body);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow setPassphrase(String resourceGroupName, String connectionName, String flowName,
        SetStreamPassphrase body, Context context) {
        FlowInner inner
            = this.serviceClient().setPassphrase(resourceGroupName, connectionName, flowName, body, context);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow setSourceAddresses(String resourceGroupName, String connectionName, String flowName,
        SetSourceAddresses body) {
        FlowInner inner = this.serviceClient().setSourceAddresses(resourceGroupName, connectionName, flowName, body);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow setSourceAddresses(String resourceGroupName, String connectionName, String flowName,
        SetSourceAddresses body, Context context) {
        FlowInner inner
            = this.serviceClient().setSourceAddresses(resourceGroupName, connectionName, flowName, body, context);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String flowName = ResourceManagerUtils.getValueFromIdByName(id, "flows");
        if (flowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'flows'.", id)));
        }
        return this.getWithResponse(resourceGroupName, connectionName, flowName, Context.NONE).getValue();
    }

    public Response<Flow> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String flowName = ResourceManagerUtils.getValueFromIdByName(id, "flows");
        if (flowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'flows'.", id)));
        }
        return this.getWithResponse(resourceGroupName, connectionName, flowName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String flowName = ResourceManagerUtils.getValueFromIdByName(id, "flows");
        if (flowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'flows'.", id)));
        }
        this.delete(resourceGroupName, connectionName, flowName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String flowName = ResourceManagerUtils.getValueFromIdByName(id, "flows");
        if (flowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'flows'.", id)));
        }
        this.delete(resourceGroupName, connectionName, flowName, context);
    }

    private FlowsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager manager() {
        return this.serviceManager;
    }

    public FlowImpl define(String name) {
        return new FlowImpl(name, this.manager());
    }
}
