// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azuredatatransfer.fluent.FlowsClient;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.FlowInner;
import com.azure.resourcemanager.azuredatatransfer.models.Flow;
import com.azure.resourcemanager.azuredatatransfer.models.Flows;
import com.azure.resourcemanager.azuredatatransfer.models.ResourceBody;

public final class FlowsImpl implements Flows {
    private static final ClientLogger LOGGER = new ClientLogger(FlowsImpl.class);

    private final FlowsClient innerClient;

    private final com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager;

    public FlowsImpl(FlowsClient innerClient,
        com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Flow> getWithResponse(String resourceGroupName, String connectionName, String flowName,
        Context context) {
        Response<FlowInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, connectionName, flowName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FlowImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Flow get(String resourceGroupName, String connectionName, String flowName) {
        FlowInner inner = this.serviceClient().get(resourceGroupName, connectionName, flowName);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String connectionName, String flowName) {
        this.serviceClient().delete(resourceGroupName, connectionName, flowName);
    }

    public void delete(String resourceGroupName, String connectionName, String flowName, Context context) {
        this.serviceClient().delete(resourceGroupName, connectionName, flowName, context);
    }

    public Flow enable(String resourceGroupName, String connectionName, String flowName) {
        FlowInner inner = this.serviceClient().enable(resourceGroupName, connectionName, flowName);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow enable(String resourceGroupName, String connectionName, String flowName, Context context) {
        FlowInner inner = this.serviceClient().enable(resourceGroupName, connectionName, flowName, context);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow disable(String resourceGroupName, String connectionName, String flowName) {
        FlowInner inner = this.serviceClient().disable(resourceGroupName, connectionName, flowName);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow disable(String resourceGroupName, String connectionName, String flowName, Context context) {
        FlowInner inner = this.serviceClient().disable(resourceGroupName, connectionName, flowName, context);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow link(String resourceGroupName, String connectionName, String flowName, ResourceBody flow) {
        FlowInner inner = this.serviceClient().link(resourceGroupName, connectionName, flowName, flow);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Flow link(String resourceGroupName, String connectionName, String flowName, ResourceBody flow,
        Context context) {
        FlowInner inner = this.serviceClient().link(resourceGroupName, connectionName, flowName, flow, context);
        if (inner != null) {
            return new FlowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Flow> listByConnection(String resourceGroupName, String connectionName) {
        PagedIterable<FlowInner> inner = this.serviceClient().listByConnection(resourceGroupName, connectionName);
        return Utils.mapPage(inner, inner1 -> new FlowImpl(inner1, this.manager()));
    }

    public PagedIterable<Flow> listByConnection(String resourceGroupName, String connectionName, Context context) {
        PagedIterable<FlowInner> inner
            = this.serviceClient().listByConnection(resourceGroupName, connectionName, context);
        return Utils.mapPage(inner, inner1 -> new FlowImpl(inner1, this.manager()));
    }

    public Flow getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = Utils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String flowName = Utils.getValueFromIdByName(id, "flows");
        if (flowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'flows'.", id)));
        }
        return this.getWithResponse(resourceGroupName, connectionName, flowName, Context.NONE).getValue();
    }

    public Response<Flow> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = Utils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String flowName = Utils.getValueFromIdByName(id, "flows");
        if (flowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'flows'.", id)));
        }
        return this.getWithResponse(resourceGroupName, connectionName, flowName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = Utils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String flowName = Utils.getValueFromIdByName(id, "flows");
        if (flowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'flows'.", id)));
        }
        this.delete(resourceGroupName, connectionName, flowName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectionName = Utils.getValueFromIdByName(id, "connections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connections'.", id)));
        }
        String flowName = Utils.getValueFromIdByName(id, "flows");
        if (flowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'flows'.", id)));
        }
        this.delete(resourceGroupName, connectionName, flowName, context);
    }

    private FlowsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager manager() {
        return this.serviceManager;
    }

    public FlowImpl define(String name) {
        return new FlowImpl(name, this.manager());
    }
}
