// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azuredatatransfer.models.ValidateSchemaStatus;
import java.io.IOException;

/**
 * Result of the schema validation.
 */
@Fluent
public final class ValidateSchemaResultInner implements JsonSerializable<ValidateSchemaResultInner> {
    /*
     * Validation status of the schema
     */
    private ValidateSchemaStatus status;

    /*
     * Message describing the schema validation
     */
    private String message;

    /**
     * Creates an instance of ValidateSchemaResultInner class.
     */
    public ValidateSchemaResultInner() {
    }

    /**
     * Get the status property: Validation status of the schema.
     * 
     * @return the status value.
     */
    public ValidateSchemaStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Validation status of the schema.
     * 
     * @param status the status value to set.
     * @return the ValidateSchemaResultInner object itself.
     */
    public ValidateSchemaResultInner withStatus(ValidateSchemaStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the message property: Message describing the schema validation.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: Message describing the schema validation.
     * 
     * @param message the message value to set.
     * @return the ValidateSchemaResultInner object itself.
     */
    public ValidateSchemaResultInner withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidateSchemaResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidateSchemaResultInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ValidateSchemaResultInner.
     */
    public static ValidateSchemaResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidateSchemaResultInner deserializedValidateSchemaResultInner = new ValidateSchemaResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedValidateSchemaResultInner.status = ValidateSchemaStatus.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedValidateSchemaResultInner.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidateSchemaResultInner;
        });
    }
}
