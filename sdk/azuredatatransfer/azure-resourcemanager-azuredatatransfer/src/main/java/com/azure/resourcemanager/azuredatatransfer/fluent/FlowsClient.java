// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.FlowInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.GetDestinationEndpointPortsResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.GetDestinationEndpointsResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.GetStreamConnectionStringResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.StreamSourceAddressesInner;
import com.azure.resourcemanager.azuredatatransfer.models.FlowsPatch;
import com.azure.resourcemanager.azuredatatransfer.models.ResourceBody;
import com.azure.resourcemanager.azuredatatransfer.models.SetDestinationEndpointPorts;
import com.azure.resourcemanager.azuredatatransfer.models.SetDestinationEndpoints;
import com.azure.resourcemanager.azuredatatransfer.models.SetSourceAddresses;
import com.azure.resourcemanager.azuredatatransfer.models.SetStreamPassphrase;

/**
 * An instance of this class provides access to all the operations defined in FlowsClient.
 */
public interface FlowsClient {
    /**
     * Gets flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flow resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FlowInner> getWithResponse(String resourceGroupName, String connectionName, String flowName,
        Context context);

    /**
     * Gets flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flow resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner get(String resourceGroupName, String connectionName, String flowName);

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginCreateOrUpdate(String resourceGroupName, String connectionName,
        String flowName, FlowInner flow);

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginCreateOrUpdate(String resourceGroupName, String connectionName,
        String flowName, FlowInner flow, Context context);

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner createOrUpdate(String resourceGroupName, String connectionName, String flowName, FlowInner flow);

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner createOrUpdate(String resourceGroupName, String connectionName, String flowName, FlowInner flow,
        Context context);

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String connectionName, String flowName);

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String connectionName, String flowName,
        Context context);

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String connectionName, String flowName);

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String connectionName, String flowName, Context context);

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginUpdate(String resourceGroupName, String connectionName,
        String flowName, FlowsPatch flow);

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginUpdate(String resourceGroupName, String connectionName,
        String flowName, FlowsPatch flow, Context context);

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner update(String resourceGroupName, String connectionName, String flowName, FlowsPatch flow);

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner update(String resourceGroupName, String connectionName, String flowName, FlowsPatch flow,
        Context context);

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginEnable(String resourceGroupName, String connectionName,
        String flowName);

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginEnable(String resourceGroupName, String connectionName,
        String flowName, Context context);

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner enable(String resourceGroupName, String connectionName, String flowName);

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner enable(String resourceGroupName, String connectionName, String flowName, Context context);

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginDisable(String resourceGroupName, String connectionName,
        String flowName);

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginDisable(String resourceGroupName, String connectionName,
        String flowName, Context context);

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner disable(String resourceGroupName, String connectionName, String flowName);

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner disable(String resourceGroupName, String connectionName, String flowName, Context context);

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginLink(String resourceGroupName, String connectionName,
        String flowName, ResourceBody flow);

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginLink(String resourceGroupName, String connectionName,
        String flowName, ResourceBody flow, Context context);

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner link(String resourceGroupName, String connectionName, String flowName, ResourceBody flow);

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner link(String resourceGroupName, String connectionName, String flowName, ResourceBody flow,
        Context context);

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginSetPassphrase(String resourceGroupName, String connectionName,
        String flowName, SetStreamPassphrase passphrase);

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginSetPassphrase(String resourceGroupName, String connectionName,
        String flowName, SetStreamPassphrase passphrase, Context context);

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner setPassphrase(String resourceGroupName, String connectionName, String flowName,
        SetStreamPassphrase passphrase);

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner setPassphrase(String resourceGroupName, String connectionName, String flowName,
        SetStreamPassphrase passphrase, Context context);

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginGeneratePassphrase(String resourceGroupName,
        String connectionName, String flowName);

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginGeneratePassphrase(String resourceGroupName,
        String connectionName, String flowName, Context context);

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner generatePassphrase(String resourceGroupName, String connectionName, String flowName);

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner generatePassphrase(String resourceGroupName, String connectionName, String flowName, Context context);

    /**
     * Get the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source addresses for the specified flow along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<StreamSourceAddressesInner> getSourceAddressesWithResponse(String resourceGroupName, String connectionName,
        String flowName, Context context);

    /**
     * Get the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source addresses for the specified flow.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StreamSourceAddressesInner getSourceAddresses(String resourceGroupName, String connectionName, String flowName);

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginSetSourceAddresses(String resourceGroupName,
        String connectionName, String flowName, SetSourceAddresses sourceAddresses);

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginSetSourceAddresses(String resourceGroupName,
        String connectionName, String flowName, SetSourceAddresses sourceAddresses, Context context);

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner setSourceAddresses(String resourceGroupName, String connectionName, String flowName,
        SetSourceAddresses sourceAddresses);

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner setSourceAddresses(String resourceGroupName, String connectionName, String flowName,
        SetSourceAddresses sourceAddresses, Context context);

    /**
     * Get the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoints for the specified flow and stream ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetDestinationEndpointsResultInner> getDestinationEndpointsWithResponse(String resourceGroupName,
        String connectionName, String flowName, Context context);

    /**
     * Get the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoints for the specified flow and stream ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetDestinationEndpointsResultInner getDestinationEndpoints(String resourceGroupName, String connectionName,
        String flowName);

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginSetDestinationEndpoints(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpoints streamDestinationEndpoints);

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginSetDestinationEndpoints(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpoints streamDestinationEndpoints, Context context);

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner setDestinationEndpoints(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpoints streamDestinationEndpoints);

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner setDestinationEndpoints(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpoints streamDestinationEndpoints, Context context);

    /**
     * Get the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoint ports for the specified flow and stream ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetDestinationEndpointPortsResultInner> getDestinationEndpointPortsWithResponse(String resourceGroupName,
        String connectionName, String flowName, Context context);

    /**
     * Get the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoint ports for the specified flow and stream ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetDestinationEndpointPortsResultInner getDestinationEndpointPorts(String resourceGroupName, String connectionName,
        String flowName);

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginSetDestinationEndpointPorts(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpointPorts streamDestinationEndpointPorts);

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FlowInner>, FlowInner> beginSetDestinationEndpointPorts(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpointPorts streamDestinationEndpointPorts,
        Context context);

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner setDestinationEndpointPorts(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpointPorts streamDestinationEndpointPorts);

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FlowInner setDestinationEndpointPorts(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpointPorts streamDestinationEndpointPorts, Context context);

    /**
     * Get the connection string for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection string for the specified flow along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetStreamConnectionStringResultInner> getStreamConnectionStringWithResponse(String resourceGroupName,
        String connectionName, String flowName, Context context);

    /**
     * Get the connection string for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection string for the specified flow.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetStreamConnectionStringResultInner getStreamConnectionString(String resourceGroupName, String connectionName,
        String flowName);

    /**
     * Gets flows in a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a connection as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FlowInner> listByConnection(String resourceGroupName, String connectionName);

    /**
     * Gets flows in a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a connection as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FlowInner> listByConnection(String resourceGroupName, String connectionName, Context context);
}
