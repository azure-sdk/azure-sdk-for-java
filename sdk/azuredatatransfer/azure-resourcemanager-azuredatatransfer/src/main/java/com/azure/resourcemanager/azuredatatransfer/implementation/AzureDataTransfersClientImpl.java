// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.azuredatatransfer.fluent.AzureDataTransfersClient;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.SchemasListResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.ValidateSchemaResultInner;
import com.azure.resourcemanager.azuredatatransfer.models.ListApprovedSchemasRequest;
import com.azure.resourcemanager.azuredatatransfer.models.Schema;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AzureDataTransfersClient.
 */
public final class AzureDataTransfersClientImpl implements AzureDataTransfersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AzureDataTransfersService service;

    /**
     * The service client containing this operation class.
     */
    private final AzuredatatransferrpImpl client;

    /**
     * Initializes an instance of AzureDataTransfersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AzureDataTransfersClientImpl(AzuredatatransferrpImpl client) {
        this.service = RestProxy.create(AzureDataTransfersService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzuredatatransferrpAzureDataTransfers to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzuredatatransferrpA")
    public interface AzureDataTransfersService {
        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.AzureDataTransfer/validateSchema")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ValidateSchemaResultInner>> validateSchema(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") Schema schema,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.AzureDataTransfer/listApprovedSchemas")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SchemasListResultInner>> listApprovedSchemas(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ListApprovedSchemasRequest pipeline, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Validates a schema for Azure Data Transfer.
     * 
     * @param schema The schema to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the schema validation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ValidateSchemaResultInner>> validateSchemaWithResponseAsync(Schema schema) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (schema == null) {
            return Mono.error(new IllegalArgumentException("Parameter schema is required and cannot be null."));
        } else {
            schema.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.validateSchema(this.client.getEndpoint(), this.client.getApiVersion(),
                schema, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Validates a schema for Azure Data Transfer.
     * 
     * @param schema The schema to validate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the schema validation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ValidateSchemaResultInner>> validateSchemaWithResponseAsync(Schema schema, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (schema == null) {
            return Mono.error(new IllegalArgumentException("Parameter schema is required and cannot be null."));
        } else {
            schema.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.validateSchema(this.client.getEndpoint(), this.client.getApiVersion(), schema, accept, context);
    }

    /**
     * Validates a schema for Azure Data Transfer.
     * 
     * @param schema The schema to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the schema validation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ValidateSchemaResultInner> validateSchemaAsync(Schema schema) {
        return validateSchemaWithResponseAsync(schema).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Validates a schema for Azure Data Transfer.
     * 
     * @param schema The schema to validate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the schema validation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ValidateSchemaResultInner> validateSchemaWithResponse(Schema schema, Context context) {
        return validateSchemaWithResponseAsync(schema, context).block();
    }

    /**
     * Validates a schema for Azure Data Transfer.
     * 
     * @param schema The schema to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the schema validation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ValidateSchemaResultInner validateSchema(Schema schema) {
        return validateSchemaWithResponse(schema, Context.NONE).getValue();
    }

    /**
     * Lists approved schemas for Azure Data Transfer.
     * 
     * @param pipeline The request to list approved schemas.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the schemas list result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SchemasListResultInner>>
        listApprovedSchemasWithResponseAsync(ListApprovedSchemasRequest pipeline) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (pipeline == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipeline is required and cannot be null."));
        } else {
            pipeline.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listApprovedSchemas(this.client.getEndpoint(), this.client.getApiVersion(),
                pipeline, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists approved schemas for Azure Data Transfer.
     * 
     * @param pipeline The request to list approved schemas.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the schemas list result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SchemasListResultInner>>
        listApprovedSchemasWithResponseAsync(ListApprovedSchemasRequest pipeline, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (pipeline == null) {
            return Mono.error(new IllegalArgumentException("Parameter pipeline is required and cannot be null."));
        } else {
            pipeline.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listApprovedSchemas(this.client.getEndpoint(), this.client.getApiVersion(), pipeline, accept,
            context);
    }

    /**
     * Lists approved schemas for Azure Data Transfer.
     * 
     * @param pipeline The request to list approved schemas.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the schemas list result on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SchemasListResultInner> listApprovedSchemasAsync(ListApprovedSchemasRequest pipeline) {
        return listApprovedSchemasWithResponseAsync(pipeline).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Lists approved schemas for Azure Data Transfer.
     * 
     * @param pipeline The request to list approved schemas.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the schemas list result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SchemasListResultInner> listApprovedSchemasWithResponse(ListApprovedSchemasRequest pipeline,
        Context context) {
        return listApprovedSchemasWithResponseAsync(pipeline, context).block();
    }

    /**
     * Lists approved schemas for Azure Data Transfer.
     * 
     * @param pipeline The request to list approved schemas.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the schemas list result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SchemasListResultInner listApprovedSchemas(ListApprovedSchemasRequest pipeline) {
        return listApprovedSchemasWithResponse(pipeline, Context.NONE).getValue();
    }
}
