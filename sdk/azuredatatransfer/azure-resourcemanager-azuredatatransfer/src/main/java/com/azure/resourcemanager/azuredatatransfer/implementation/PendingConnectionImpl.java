// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.implementation;

import com.azure.core.management.SystemData;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.ConnectionInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.PendingConnectionInner;
import com.azure.resourcemanager.azuredatatransfer.models.Connection;
import com.azure.resourcemanager.azuredatatransfer.models.ConnectionStatus;
import com.azure.resourcemanager.azuredatatransfer.models.Direction;
import com.azure.resourcemanager.azuredatatransfer.models.FlowType;
import com.azure.resourcemanager.azuredatatransfer.models.ForceDisabledStatus;
import com.azure.resourcemanager.azuredatatransfer.models.LinkStatus;
import com.azure.resourcemanager.azuredatatransfer.models.PendingConnection;
import com.azure.resourcemanager.azuredatatransfer.models.ProvisioningState;
import com.azure.resourcemanager.azuredatatransfer.models.Schema;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class PendingConnectionImpl implements PendingConnection {
    private PendingConnectionInner innerObject;

    private final com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager;

    PendingConnectionImpl(PendingConnectionInner innerObject,
        com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String pipeline() {
        return this.innerModel().pipeline();
    }

    public Direction direction() {
        return this.innerModel().direction();
    }

    public String justification() {
        return this.innerModel().justification();
    }

    public ConnectionStatus status() {
        return this.innerModel().status();
    }

    public List<ForceDisabledStatus> forceDisabledStatus() {
        List<ForceDisabledStatus> inner = this.innerModel().forceDisabledStatus();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String statusReason() {
        return this.innerModel().statusReason();
    }

    public LinkStatus linkStatus() {
        return this.innerModel().linkStatus();
    }

    public String linkedConnectionId() {
        return this.innerModel().linkedConnectionId();
    }

    public List<FlowType> flowTypes() {
        List<FlowType> inner = this.innerModel().flowTypes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String requirementId() {
        return this.innerModel().requirementId();
    }

    public String remoteSubscriptionId() {
        return this.innerModel().remoteSubscriptionId();
    }

    public String approver() {
        return this.innerModel().approver();
    }

    public String pin() {
        return this.innerModel().pin();
    }

    public OffsetDateTime dateSubmitted() {
        return this.innerModel().dateSubmitted();
    }

    public String primaryContact() {
        return this.innerModel().primaryContact();
    }

    public List<String> secondaryContacts() {
        List<String> inner = this.innerModel().secondaryContacts();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public List<String> policies() {
        List<String> inner = this.innerModel().policies();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<Schema> schemas() {
        List<Schema> inner = this.innerModel().schemas();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> schemaUris() {
        List<String> inner = this.innerModel().schemaUris();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Connection properties() {
        ConnectionInner inner = this.innerModel().properties();
        if (inner != null) {
            return new ConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String location() {
        return this.innerModel().location();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String subscriptionId() {
        return this.innerModel().subscriptionId();
    }

    public PendingConnectionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager manager() {
        return this.serviceManager;
    }
}
