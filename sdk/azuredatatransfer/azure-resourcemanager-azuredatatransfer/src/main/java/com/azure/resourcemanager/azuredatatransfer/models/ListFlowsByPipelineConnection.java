// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.FlowInner;
import java.io.IOException;
import java.util.List;

/**
 * The ListFlowsByPipelineConnection model.
 */
@Fluent
public final class ListFlowsByPipelineConnection implements JsonSerializable<ListFlowsByPipelineConnection> {
    /*
     * ID of the connection.
     */
    private String id;

    /*
     * List of flows associated with the connection.
     */
    private List<FlowInner> flows;

    /**
     * Creates an instance of ListFlowsByPipelineConnection class.
     */
    public ListFlowsByPipelineConnection() {
    }

    /**
     * Get the id property: ID of the connection.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: ID of the connection.
     * 
     * @param id the id value to set.
     * @return the ListFlowsByPipelineConnection object itself.
     */
    public ListFlowsByPipelineConnection withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the flows property: List of flows associated with the connection.
     * 
     * @return the flows value.
     */
    public List<FlowInner> flows() {
        return this.flows;
    }

    /**
     * Set the flows property: List of flows associated with the connection.
     * 
     * @param flows the flows value to set.
     * @return the ListFlowsByPipelineConnection object itself.
     */
    public ListFlowsByPipelineConnection withFlows(List<FlowInner> flows) {
        this.flows = flows;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (flows() != null) {
            flows().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("flows", this.flows, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ListFlowsByPipelineConnection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ListFlowsByPipelineConnection if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ListFlowsByPipelineConnection.
     */
    public static ListFlowsByPipelineConnection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ListFlowsByPipelineConnection deserializedListFlowsByPipelineConnection
                = new ListFlowsByPipelineConnection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedListFlowsByPipelineConnection.id = reader.getString();
                } else if ("flows".equals(fieldName)) {
                    List<FlowInner> flows = reader.readArray(reader1 -> FlowInner.fromJson(reader1));
                    deserializedListFlowsByPipelineConnection.flows = flows;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedListFlowsByPipelineConnection;
        });
    }
}
