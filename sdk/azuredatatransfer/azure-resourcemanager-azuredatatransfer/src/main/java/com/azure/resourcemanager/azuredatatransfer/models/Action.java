// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The action to be executed.
 */
@Fluent
public final class Action implements JsonSerializable<Action> {
    /*
     * Type of action to be executed
     */
    private ActionType actionType;

    /*
     * Type of target to execute the action on
     */
    private TargetType targetType;

    /*
     * Targets for the action
     */
    private List<String> targets;

    /*
     * Business justification for the action
     */
    private String justification;

    /**
     * Creates an instance of Action class.
     */
    public Action() {
    }

    /**
     * Get the actionType property: Type of action to be executed.
     * 
     * @return the actionType value.
     */
    public ActionType actionType() {
        return this.actionType;
    }

    /**
     * Set the actionType property: Type of action to be executed.
     * 
     * @param actionType the actionType value to set.
     * @return the Action object itself.
     */
    public Action withActionType(ActionType actionType) {
        this.actionType = actionType;
        return this;
    }

    /**
     * Get the targetType property: Type of target to execute the action on.
     * 
     * @return the targetType value.
     */
    public TargetType targetType() {
        return this.targetType;
    }

    /**
     * Set the targetType property: Type of target to execute the action on.
     * 
     * @param targetType the targetType value to set.
     * @return the Action object itself.
     */
    public Action withTargetType(TargetType targetType) {
        this.targetType = targetType;
        return this;
    }

    /**
     * Get the targets property: Targets for the action.
     * 
     * @return the targets value.
     */
    public List<String> targets() {
        return this.targets;
    }

    /**
     * Set the targets property: Targets for the action.
     * 
     * @param targets the targets value to set.
     * @return the Action object itself.
     */
    public Action withTargets(List<String> targets) {
        this.targets = targets;
        return this;
    }

    /**
     * Get the justification property: Business justification for the action.
     * 
     * @return the justification value.
     */
    public String justification() {
        return this.justification;
    }

    /**
     * Set the justification property: Business justification for the action.
     * 
     * @param justification the justification value to set.
     * @return the Action object itself.
     */
    public Action withJustification(String justification) {
        this.justification = justification;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (actionType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property actionType in model Action"));
        }
        if (targetType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property targetType in model Action"));
        }
        if (targets() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property targets in model Action"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Action.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("actionType", this.actionType == null ? null : this.actionType.toString());
        jsonWriter.writeStringField("targetType", this.targetType == null ? null : this.targetType.toString());
        jsonWriter.writeArrayField("targets", this.targets, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("justification", this.justification);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Action from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Action if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Action.
     */
    public static Action fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Action deserializedAction = new Action();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actionType".equals(fieldName)) {
                    deserializedAction.actionType = ActionType.fromString(reader.getString());
                } else if ("targetType".equals(fieldName)) {
                    deserializedAction.targetType = TargetType.fromString(reader.getString());
                } else if ("targets".equals(fieldName)) {
                    List<String> targets = reader.readArray(reader1 -> reader1.getString());
                    deserializedAction.targets = targets;
                } else if ("justification".equals(fieldName)) {
                    deserializedAction.justification = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAction;
        });
    }
}
