// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azuredatatransfer.fluent.FlowsClient;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.FlowInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.GetDestinationEndpointPortsResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.GetDestinationEndpointsResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.GetStreamConnectionStringResultInner;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.StreamSourceAddressesInner;
import com.azure.resourcemanager.azuredatatransfer.models.FlowsListResult;
import com.azure.resourcemanager.azuredatatransfer.models.FlowsPatch;
import com.azure.resourcemanager.azuredatatransfer.models.ResourceBody;
import com.azure.resourcemanager.azuredatatransfer.models.SetDestinationEndpointPorts;
import com.azure.resourcemanager.azuredatatransfer.models.SetDestinationEndpoints;
import com.azure.resourcemanager.azuredatatransfer.models.SetSourceAddresses;
import com.azure.resourcemanager.azuredatatransfer.models.SetStreamPassphrase;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in FlowsClient.
 */
public final class FlowsClientImpl implements FlowsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final FlowsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzuredatatransferrpImpl client;

    /**
     * Initializes an instance of FlowsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    FlowsClientImpl(AzuredatatransferrpImpl client) {
        this.service = RestProxy.create(FlowsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzuredatatransferrpFlows to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzuredatatransferrpF")
    public interface FlowsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FlowInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<FlowInner> getSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") FlowInner flow,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") FlowInner flow,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") FlowsPatch flow,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") FlowsPatch flow,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/enable")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> enable(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/enable")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> enableSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/disable")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> disable(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/disable")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> disableSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/link")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> link(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") ResourceBody flow,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/link")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> linkSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") ResourceBody flow,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setPassphrase")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> setPassphrase(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") SetStreamPassphrase passphrase,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setPassphrase")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> setPassphraseSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") SetStreamPassphrase passphrase,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/generatePassphrase")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> generatePassphrase(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/generatePassphrase")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> generatePassphraseSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getSourceAddresses")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StreamSourceAddressesInner>> getSourceAddresses(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getSourceAddresses")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<StreamSourceAddressesInner> getSourceAddressesSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setSourceAddresses")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> setSourceAddresses(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SetSourceAddresses sourceAddresses, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setSourceAddresses")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> setSourceAddressesSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SetSourceAddresses sourceAddresses, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getDestinationEndpoints")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GetDestinationEndpointsResultInner>> getDestinationEndpoints(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getDestinationEndpoints")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GetDestinationEndpointsResultInner> getDestinationEndpointsSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setDestinationEndpoints")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> setDestinationEndpoints(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SetDestinationEndpoints streamDestinationEndpoints,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setDestinationEndpoints")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> setDestinationEndpointsSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SetDestinationEndpoints streamDestinationEndpoints,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getDestinationEndpointPorts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GetDestinationEndpointPortsResultInner>> getDestinationEndpointPorts(
            @HostParam("$host") String endpoint, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getDestinationEndpointPorts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GetDestinationEndpointPortsResultInner> getDestinationEndpointPortsSync(
            @HostParam("$host") String endpoint, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setDestinationEndpointPorts")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> setDestinationEndpointPorts(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SetDestinationEndpointPorts streamDestinationEndpointPorts,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/setDestinationEndpointPorts")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> setDestinationEndpointPortsSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SetDestinationEndpointPorts streamDestinationEndpointPorts,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getStreamConnectionString")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GetStreamConnectionStringResultInner>> getStreamConnectionString(
            @HostParam("$host") String endpoint, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/getStreamConnectionString")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GetStreamConnectionStringResultInner> getStreamConnectionStringSync(
            @HostParam("$host") String endpoint, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectionName") String connectionName, @PathParam("flowName") String flowName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FlowsListResult>> listByConnection(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @PathParam("connectionName") String connectionName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<FlowsListResult> listByConnectionSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @PathParam("connectionName") String connectionName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FlowsListResult>> listByConnectionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<FlowsListResult> listByConnectionNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flow resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FlowInner>> getWithResponseAsync(String resourceGroupName, String connectionName,
        String flowName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flow resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FlowInner> getAsync(String resourceGroupName, String connectionName, String flowName) {
        return getWithResponseAsync(resourceGroupName, connectionName, flowName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flow resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FlowInner> getWithResponse(String resourceGroupName, String connectionName, String flowName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flow resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner get(String resourceGroupName, String connectionName, String flowName) {
        return getWithResponse(resourceGroupName, connectionName, flowName, Context.NONE).getValue();
    }

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String connectionName, String flowName, FlowInner flow) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (flow == null) {
            return Mono.error(new IllegalArgumentException("Parameter flow is required and cannot be null."));
        } else {
            flow.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, connectionName, flowName, this.client.getApiVersion(), flow, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String connectionName,
        String flowName, FlowInner flow) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (flow == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter flow is required and cannot be null."));
        } else {
            flow.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), flow, accept, Context.NONE);
    }

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String connectionName,
        String flowName, FlowInner flow, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (flow == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter flow is required and cannot be null."));
        } else {
            flow.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), flow, accept, context);
    }

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FlowInner>, FlowInner> beginCreateOrUpdateAsync(String resourceGroupName,
        String connectionName, String flowName, FlowInner flow) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, connectionName, flowName, flow);
        return this.client.<FlowInner, FlowInner>getLroResult(mono, this.client.getHttpPipeline(), FlowInner.class,
            FlowInner.class, this.client.getContext());
    }

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginCreateOrUpdate(String resourceGroupName,
        String connectionName, String flowName, FlowInner flow) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, connectionName, flowName, flow);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, Context.NONE);
    }

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginCreateOrUpdate(String resourceGroupName,
        String connectionName, String flowName, FlowInner flow, Context context) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, connectionName, flowName, flow, context);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, context);
    }

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FlowInner> createOrUpdateAsync(String resourceGroupName, String connectionName, String flowName,
        FlowInner flow) {
        return beginCreateOrUpdateAsync(resourceGroupName, connectionName, flowName, flow).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner createOrUpdate(String resourceGroupName, String connectionName, String flowName, FlowInner flow) {
        return beginCreateOrUpdate(resourceGroupName, connectionName, flowName, flow).getFinalResult();
    }

    /**
     * Creates or updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner createOrUpdate(String resourceGroupName, String connectionName, String flowName, FlowInner flow,
        Context context) {
        return beginCreateOrUpdate(resourceGroupName, connectionName, flowName, flow, context).getFinalResult();
    }

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String connectionName,
        String flowName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String connectionName, String flowName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), accept, Context.NONE);
    }

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String connectionName, String flowName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String connectionName,
        String flowName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, connectionName, flowName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String connectionName,
        String flowName) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, connectionName, flowName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String connectionName,
        String flowName, Context context) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, connectionName, flowName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String connectionName, String flowName) {
        return beginDeleteAsync(resourceGroupName, connectionName, flowName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String connectionName, String flowName) {
        beginDelete(resourceGroupName, connectionName, flowName).getFinalResult();
    }

    /**
     * Deletes the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String connectionName, String flowName, Context context) {
        beginDelete(resourceGroupName, connectionName, flowName, context).getFinalResult();
    }

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String connectionName,
        String flowName, FlowsPatch flow) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (flow == null) {
            return Mono.error(new IllegalArgumentException("Parameter flow is required and cannot be null."));
        } else {
            flow.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, connectionName, flowName, this.client.getApiVersion(), flow, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String connectionName, String flowName,
        FlowsPatch flow) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (flow == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter flow is required and cannot be null."));
        } else {
            flow.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), flow, accept, Context.NONE);
    }

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String connectionName, String flowName,
        FlowsPatch flow, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (flow == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter flow is required and cannot be null."));
        } else {
            flow.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), flow, accept, context);
    }

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FlowInner>, FlowInner> beginUpdateAsync(String resourceGroupName,
        String connectionName, String flowName, FlowsPatch flow) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, connectionName, flowName, flow);
        return this.client.<FlowInner, FlowInner>getLroResult(mono, this.client.getHttpPipeline(), FlowInner.class,
            FlowInner.class, this.client.getContext());
    }

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginUpdate(String resourceGroupName, String connectionName,
        String flowName, FlowsPatch flow) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, connectionName, flowName, flow);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, Context.NONE);
    }

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginUpdate(String resourceGroupName, String connectionName,
        String flowName, FlowsPatch flow, Context context) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, connectionName, flowName, flow, context);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, context);
    }

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FlowInner> updateAsync(String resourceGroupName, String connectionName, String flowName,
        FlowsPatch flow) {
        return beginUpdateAsync(resourceGroupName, connectionName, flowName, flow).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner update(String resourceGroupName, String connectionName, String flowName, FlowsPatch flow) {
        return beginUpdate(resourceGroupName, connectionName, flowName, flow).getFinalResult();
    }

    /**
     * Updates the flow resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner update(String resourceGroupName, String connectionName, String flowName, FlowsPatch flow,
        Context context) {
        return beginUpdate(resourceGroupName, connectionName, flowName, flow, context).getFinalResult();
    }

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> enableWithResponseAsync(String resourceGroupName, String connectionName,
        String flowName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.enable(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> enableWithResponse(String resourceGroupName, String connectionName, String flowName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.enableSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), accept, Context.NONE);
    }

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> enableWithResponse(String resourceGroupName, String connectionName, String flowName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.enableSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FlowInner>, FlowInner> beginEnableAsync(String resourceGroupName,
        String connectionName, String flowName) {
        Mono<Response<Flux<ByteBuffer>>> mono = enableWithResponseAsync(resourceGroupName, connectionName, flowName);
        return this.client.<FlowInner, FlowInner>getLroResult(mono, this.client.getHttpPipeline(), FlowInner.class,
            FlowInner.class, this.client.getContext());
    }

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginEnable(String resourceGroupName, String connectionName,
        String flowName) {
        Response<BinaryData> response = enableWithResponse(resourceGroupName, connectionName, flowName);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, Context.NONE);
    }

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginEnable(String resourceGroupName, String connectionName,
        String flowName, Context context) {
        Response<BinaryData> response = enableWithResponse(resourceGroupName, connectionName, flowName, context);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, context);
    }

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FlowInner> enableAsync(String resourceGroupName, String connectionName, String flowName) {
        return beginEnableAsync(resourceGroupName, connectionName, flowName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner enable(String resourceGroupName, String connectionName, String flowName) {
        return beginEnable(resourceGroupName, connectionName, flowName).getFinalResult();
    }

    /**
     * Enables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner enable(String resourceGroupName, String connectionName, String flowName, Context context) {
        return beginEnable(resourceGroupName, connectionName, flowName, context).getFinalResult();
    }

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> disableWithResponseAsync(String resourceGroupName, String connectionName,
        String flowName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.disable(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> disableWithResponse(String resourceGroupName, String connectionName, String flowName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.disableSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), accept, Context.NONE);
    }

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> disableWithResponse(String resourceGroupName, String connectionName, String flowName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.disableSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FlowInner>, FlowInner> beginDisableAsync(String resourceGroupName,
        String connectionName, String flowName) {
        Mono<Response<Flux<ByteBuffer>>> mono = disableWithResponseAsync(resourceGroupName, connectionName, flowName);
        return this.client.<FlowInner, FlowInner>getLroResult(mono, this.client.getHttpPipeline(), FlowInner.class,
            FlowInner.class, this.client.getContext());
    }

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginDisable(String resourceGroupName, String connectionName,
        String flowName) {
        Response<BinaryData> response = disableWithResponse(resourceGroupName, connectionName, flowName);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, Context.NONE);
    }

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginDisable(String resourceGroupName, String connectionName,
        String flowName, Context context) {
        Response<BinaryData> response = disableWithResponse(resourceGroupName, connectionName, flowName, context);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, context);
    }

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FlowInner> disableAsync(String resourceGroupName, String connectionName, String flowName) {
        return beginDisableAsync(resourceGroupName, connectionName, flowName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner disable(String resourceGroupName, String connectionName, String flowName) {
        return beginDisable(resourceGroupName, connectionName, flowName).getFinalResult();
    }

    /**
     * Disables the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner disable(String resourceGroupName, String connectionName, String flowName, Context context) {
        return beginDisable(resourceGroupName, connectionName, flowName, context).getFinalResult();
    }

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> linkWithResponseAsync(String resourceGroupName, String connectionName,
        String flowName, ResourceBody flow) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (flow == null) {
            return Mono.error(new IllegalArgumentException("Parameter flow is required and cannot be null."));
        } else {
            flow.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.link(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, connectionName, flowName, this.client.getApiVersion(), flow, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> linkWithResponse(String resourceGroupName, String connectionName, String flowName,
        ResourceBody flow) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (flow == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter flow is required and cannot be null."));
        } else {
            flow.validate();
        }
        final String accept = "application/json";
        return service.linkSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), flow, accept, Context.NONE);
    }

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> linkWithResponse(String resourceGroupName, String connectionName, String flowName,
        ResourceBody flow, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (flow == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter flow is required and cannot be null."));
        } else {
            flow.validate();
        }
        final String accept = "application/json";
        return service.linkSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), flow, accept, context);
    }

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FlowInner>, FlowInner> beginLinkAsync(String resourceGroupName, String connectionName,
        String flowName, ResourceBody flow) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = linkWithResponseAsync(resourceGroupName, connectionName, flowName, flow);
        return this.client.<FlowInner, FlowInner>getLroResult(mono, this.client.getHttpPipeline(), FlowInner.class,
            FlowInner.class, this.client.getContext());
    }

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginLink(String resourceGroupName, String connectionName,
        String flowName, ResourceBody flow) {
        Response<BinaryData> response = linkWithResponse(resourceGroupName, connectionName, flowName, flow);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, Context.NONE);
    }

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginLink(String resourceGroupName, String connectionName,
        String flowName, ResourceBody flow, Context context) {
        Response<BinaryData> response = linkWithResponse(resourceGroupName, connectionName, flowName, flow, context);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, context);
    }

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FlowInner> linkAsync(String resourceGroupName, String connectionName, String flowName,
        ResourceBody flow) {
        return beginLinkAsync(resourceGroupName, connectionName, flowName, flow).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner link(String resourceGroupName, String connectionName, String flowName, ResourceBody flow) {
        return beginLink(resourceGroupName, connectionName, flowName, flow).getFinalResult();
    }

    /**
     * Links the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param flow Flow body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner link(String resourceGroupName, String connectionName, String flowName, ResourceBody flow,
        Context context) {
        return beginLink(resourceGroupName, connectionName, flowName, flow, context).getFinalResult();
    }

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> setPassphraseWithResponseAsync(String resourceGroupName,
        String connectionName, String flowName, SetStreamPassphrase passphrase) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (passphrase == null) {
            return Mono.error(new IllegalArgumentException("Parameter passphrase is required and cannot be null."));
        } else {
            passphrase.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.setPassphrase(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, connectionName, flowName, this.client.getApiVersion(), passphrase, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> setPassphraseWithResponse(String resourceGroupName, String connectionName,
        String flowName, SetStreamPassphrase passphrase) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (passphrase == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter passphrase is required and cannot be null."));
        } else {
            passphrase.validate();
        }
        final String accept = "application/json";
        return service.setPassphraseSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), passphrase, accept, Context.NONE);
    }

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> setPassphraseWithResponse(String resourceGroupName, String connectionName,
        String flowName, SetStreamPassphrase passphrase, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (passphrase == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter passphrase is required and cannot be null."));
        } else {
            passphrase.validate();
        }
        final String accept = "application/json";
        return service.setPassphraseSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            connectionName, flowName, this.client.getApiVersion(), passphrase, accept, context);
    }

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FlowInner>, FlowInner> beginSetPassphraseAsync(String resourceGroupName,
        String connectionName, String flowName, SetStreamPassphrase passphrase) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = setPassphraseWithResponseAsync(resourceGroupName, connectionName, flowName, passphrase);
        return this.client.<FlowInner, FlowInner>getLroResult(mono, this.client.getHttpPipeline(), FlowInner.class,
            FlowInner.class, this.client.getContext());
    }

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginSetPassphrase(String resourceGroupName,
        String connectionName, String flowName, SetStreamPassphrase passphrase) {
        Response<BinaryData> response
            = setPassphraseWithResponse(resourceGroupName, connectionName, flowName, passphrase);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, Context.NONE);
    }

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginSetPassphrase(String resourceGroupName,
        String connectionName, String flowName, SetStreamPassphrase passphrase, Context context) {
        Response<BinaryData> response
            = setPassphraseWithResponse(resourceGroupName, connectionName, flowName, passphrase, context);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, context);
    }

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FlowInner> setPassphraseAsync(String resourceGroupName, String connectionName, String flowName,
        SetStreamPassphrase passphrase) {
        return beginSetPassphraseAsync(resourceGroupName, connectionName, flowName, passphrase).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner setPassphrase(String resourceGroupName, String connectionName, String flowName,
        SetStreamPassphrase passphrase) {
        return beginSetPassphrase(resourceGroupName, connectionName, flowName, passphrase).getFinalResult();
    }

    /**
     * Sets the passphrase of the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param passphrase Passphrase to set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner setPassphrase(String resourceGroupName, String connectionName, String flowName,
        SetStreamPassphrase passphrase, Context context) {
        return beginSetPassphrase(resourceGroupName, connectionName, flowName, passphrase, context).getFinalResult();
    }

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> generatePassphraseWithResponseAsync(String resourceGroupName,
        String connectionName, String flowName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.generatePassphrase(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> generatePassphraseWithResponse(String resourceGroupName, String connectionName,
        String flowName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.generatePassphraseSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, Context.NONE);
    }

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> generatePassphraseWithResponse(String resourceGroupName, String connectionName,
        String flowName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.generatePassphraseSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FlowInner>, FlowInner> beginGeneratePassphraseAsync(String resourceGroupName,
        String connectionName, String flowName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = generatePassphraseWithResponseAsync(resourceGroupName, connectionName, flowName);
        return this.client.<FlowInner, FlowInner>getLroResult(mono, this.client.getHttpPipeline(), FlowInner.class,
            FlowInner.class, this.client.getContext());
    }

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginGeneratePassphrase(String resourceGroupName,
        String connectionName, String flowName) {
        Response<BinaryData> response = generatePassphraseWithResponse(resourceGroupName, connectionName, flowName);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, Context.NONE);
    }

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginGeneratePassphrase(String resourceGroupName,
        String connectionName, String flowName, Context context) {
        Response<BinaryData> response
            = generatePassphraseWithResponse(resourceGroupName, connectionName, flowName, context);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, context);
    }

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FlowInner> generatePassphraseAsync(String resourceGroupName, String connectionName, String flowName) {
        return beginGeneratePassphraseAsync(resourceGroupName, connectionName, flowName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner generatePassphrase(String resourceGroupName, String connectionName, String flowName) {
        return beginGeneratePassphrase(resourceGroupName, connectionName, flowName).getFinalResult();
    }

    /**
     * Generate a compliant passphrase for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner generatePassphrase(String resourceGroupName, String connectionName, String flowName,
        Context context) {
        return beginGeneratePassphrase(resourceGroupName, connectionName, flowName, context).getFinalResult();
    }

    /**
     * Get the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source addresses for the specified flow along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StreamSourceAddressesInner>> getSourceAddressesWithResponseAsync(String resourceGroupName,
        String connectionName, String flowName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getSourceAddresses(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source addresses for the specified flow on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamSourceAddressesInner> getSourceAddressesAsync(String resourceGroupName, String connectionName,
        String flowName) {
        return getSourceAddressesWithResponseAsync(resourceGroupName, connectionName, flowName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source addresses for the specified flow along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StreamSourceAddressesInner> getSourceAddressesWithResponse(String resourceGroupName,
        String connectionName, String flowName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSourceAddressesSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the source addresses for the specified flow.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StreamSourceAddressesInner getSourceAddresses(String resourceGroupName, String connectionName,
        String flowName) {
        return getSourceAddressesWithResponse(resourceGroupName, connectionName, flowName, Context.NONE).getValue();
    }

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> setSourceAddressesWithResponseAsync(String resourceGroupName,
        String connectionName, String flowName, SetSourceAddresses sourceAddresses) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (sourceAddresses == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sourceAddresses is required and cannot be null."));
        } else {
            sourceAddresses.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.setSourceAddresses(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, connectionName, flowName,
                this.client.getApiVersion(), sourceAddresses, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> setSourceAddressesWithResponse(String resourceGroupName, String connectionName,
        String flowName, SetSourceAddresses sourceAddresses) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (sourceAddresses == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sourceAddresses is required and cannot be null."));
        } else {
            sourceAddresses.validate();
        }
        final String accept = "application/json";
        return service.setSourceAddressesSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), sourceAddresses, accept,
            Context.NONE);
    }

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> setSourceAddressesWithResponse(String resourceGroupName, String connectionName,
        String flowName, SetSourceAddresses sourceAddresses, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (sourceAddresses == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sourceAddresses is required and cannot be null."));
        } else {
            sourceAddresses.validate();
        }
        final String accept = "application/json";
        return service.setSourceAddressesSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), sourceAddresses, accept, context);
    }

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FlowInner>, FlowInner> beginSetSourceAddressesAsync(String resourceGroupName,
        String connectionName, String flowName, SetSourceAddresses sourceAddresses) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = setSourceAddressesWithResponseAsync(resourceGroupName, connectionName, flowName, sourceAddresses);
        return this.client.<FlowInner, FlowInner>getLroResult(mono, this.client.getHttpPipeline(), FlowInner.class,
            FlowInner.class, this.client.getContext());
    }

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginSetSourceAddresses(String resourceGroupName,
        String connectionName, String flowName, SetSourceAddresses sourceAddresses) {
        Response<BinaryData> response
            = setSourceAddressesWithResponse(resourceGroupName, connectionName, flowName, sourceAddresses);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, Context.NONE);
    }

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginSetSourceAddresses(String resourceGroupName,
        String connectionName, String flowName, SetSourceAddresses sourceAddresses, Context context) {
        Response<BinaryData> response
            = setSourceAddressesWithResponse(resourceGroupName, connectionName, flowName, sourceAddresses, context);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, context);
    }

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FlowInner> setSourceAddressesAsync(String resourceGroupName, String connectionName, String flowName,
        SetSourceAddresses sourceAddresses) {
        return beginSetSourceAddressesAsync(resourceGroupName, connectionName, flowName, sourceAddresses).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner setSourceAddresses(String resourceGroupName, String connectionName, String flowName,
        SetSourceAddresses sourceAddresses) {
        return beginSetSourceAddresses(resourceGroupName, connectionName, flowName, sourceAddresses).getFinalResult();
    }

    /**
     * Set the source addresses for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param sourceAddresses Source addresses wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner setSourceAddresses(String resourceGroupName, String connectionName, String flowName,
        SetSourceAddresses sourceAddresses, Context context) {
        return beginSetSourceAddresses(resourceGroupName, connectionName, flowName, sourceAddresses, context)
            .getFinalResult();
    }

    /**
     * Get the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoints for the specified flow and stream ID along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetDestinationEndpointsResultInner>>
        getDestinationEndpointsWithResponseAsync(String resourceGroupName, String connectionName, String flowName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getDestinationEndpoints(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoints for the specified flow and stream ID on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetDestinationEndpointsResultInner> getDestinationEndpointsAsync(String resourceGroupName,
        String connectionName, String flowName) {
        return getDestinationEndpointsWithResponseAsync(resourceGroupName, connectionName, flowName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoints for the specified flow and stream ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetDestinationEndpointsResultInner> getDestinationEndpointsWithResponse(String resourceGroupName,
        String connectionName, String flowName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getDestinationEndpointsSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoints for the specified flow and stream ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetDestinationEndpointsResultInner getDestinationEndpoints(String resourceGroupName, String connectionName,
        String flowName) {
        return getDestinationEndpointsWithResponse(resourceGroupName, connectionName, flowName, Context.NONE)
            .getValue();
    }

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> setDestinationEndpointsWithResponseAsync(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpoints streamDestinationEndpoints) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (streamDestinationEndpoints == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter streamDestinationEndpoints is required and cannot be null."));
        } else {
            streamDestinationEndpoints.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.setDestinationEndpoints(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, connectionName, flowName,
                this.client.getApiVersion(), streamDestinationEndpoints, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> setDestinationEndpointsWithResponse(String resourceGroupName, String connectionName,
        String flowName, SetDestinationEndpoints streamDestinationEndpoints) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (streamDestinationEndpoints == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter streamDestinationEndpoints is required and cannot be null."));
        } else {
            streamDestinationEndpoints.validate();
        }
        final String accept = "application/json";
        return service.setDestinationEndpointsSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), streamDestinationEndpoints,
            accept, Context.NONE);
    }

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> setDestinationEndpointsWithResponse(String resourceGroupName, String connectionName,
        String flowName, SetDestinationEndpoints streamDestinationEndpoints, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (streamDestinationEndpoints == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter streamDestinationEndpoints is required and cannot be null."));
        } else {
            streamDestinationEndpoints.validate();
        }
        final String accept = "application/json";
        return service.setDestinationEndpointsSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), streamDestinationEndpoints,
            accept, context);
    }

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FlowInner>, FlowInner> beginSetDestinationEndpointsAsync(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpoints streamDestinationEndpoints) {
        Mono<Response<Flux<ByteBuffer>>> mono = setDestinationEndpointsWithResponseAsync(resourceGroupName,
            connectionName, flowName, streamDestinationEndpoints);
        return this.client.<FlowInner, FlowInner>getLroResult(mono, this.client.getHttpPipeline(), FlowInner.class,
            FlowInner.class, this.client.getContext());
    }

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginSetDestinationEndpoints(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpoints streamDestinationEndpoints) {
        Response<BinaryData> response = setDestinationEndpointsWithResponse(resourceGroupName, connectionName, flowName,
            streamDestinationEndpoints);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, Context.NONE);
    }

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginSetDestinationEndpoints(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpoints streamDestinationEndpoints, Context context) {
        Response<BinaryData> response = setDestinationEndpointsWithResponse(resourceGroupName, connectionName, flowName,
            streamDestinationEndpoints, context);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, context);
    }

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FlowInner> setDestinationEndpointsAsync(String resourceGroupName, String connectionName,
        String flowName, SetDestinationEndpoints streamDestinationEndpoints) {
        return beginSetDestinationEndpointsAsync(resourceGroupName, connectionName, flowName,
            streamDestinationEndpoints).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner setDestinationEndpoints(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpoints streamDestinationEndpoints) {
        return beginSetDestinationEndpoints(resourceGroupName, connectionName, flowName, streamDestinationEndpoints)
            .getFinalResult();
    }

    /**
     * Set the destination endpoints for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpoints Stream ID destination endpoints wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner setDestinationEndpoints(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpoints streamDestinationEndpoints, Context context) {
        return beginSetDestinationEndpoints(resourceGroupName, connectionName, flowName, streamDestinationEndpoints,
            context).getFinalResult();
    }

    /**
     * Get the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoint ports for the specified flow and stream ID along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetDestinationEndpointPortsResultInner>>
        getDestinationEndpointPortsWithResponseAsync(String resourceGroupName, String connectionName, String flowName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getDestinationEndpointPorts(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, connectionName, flowName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoint ports for the specified flow and stream ID on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetDestinationEndpointPortsResultInner> getDestinationEndpointPortsAsync(String resourceGroupName,
        String connectionName, String flowName) {
        return getDestinationEndpointPortsWithResponseAsync(resourceGroupName, connectionName, flowName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoint ports for the specified flow and stream ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetDestinationEndpointPortsResultInner> getDestinationEndpointPortsWithResponse(
        String resourceGroupName, String connectionName, String flowName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getDestinationEndpointPortsSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the destination endpoint ports for the specified flow and stream ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetDestinationEndpointPortsResultInner getDestinationEndpointPorts(String resourceGroupName,
        String connectionName, String flowName) {
        return getDestinationEndpointPortsWithResponse(resourceGroupName, connectionName, flowName, Context.NONE)
            .getValue();
    }

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> setDestinationEndpointPortsWithResponseAsync(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpointPorts streamDestinationEndpointPorts) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (streamDestinationEndpointPorts == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter streamDestinationEndpointPorts is required and cannot be null."));
        } else {
            streamDestinationEndpointPorts.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.setDestinationEndpointPorts(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, connectionName, flowName,
                this.client.getApiVersion(), streamDestinationEndpointPorts, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> setDestinationEndpointPortsWithResponse(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpointPorts streamDestinationEndpointPorts) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (streamDestinationEndpointPorts == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter streamDestinationEndpointPorts is required and cannot be null."));
        } else {
            streamDestinationEndpointPorts.validate();
        }
        final String accept = "application/json";
        return service.setDestinationEndpointPortsSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), streamDestinationEndpointPorts,
            accept, Context.NONE);
    }

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> setDestinationEndpointPortsWithResponse(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpointPorts streamDestinationEndpointPorts,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        if (streamDestinationEndpointPorts == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter streamDestinationEndpointPorts is required and cannot be null."));
        } else {
            streamDestinationEndpointPorts.validate();
        }
        final String accept = "application/json";
        return service.setDestinationEndpointPortsSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), streamDestinationEndpointPorts,
            accept, context);
    }

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FlowInner>, FlowInner> beginSetDestinationEndpointPortsAsync(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpointPorts streamDestinationEndpointPorts) {
        Mono<Response<Flux<ByteBuffer>>> mono = setDestinationEndpointPortsWithResponseAsync(resourceGroupName,
            connectionName, flowName, streamDestinationEndpointPorts);
        return this.client.<FlowInner, FlowInner>getLroResult(mono, this.client.getHttpPipeline(), FlowInner.class,
            FlowInner.class, this.client.getContext());
    }

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginSetDestinationEndpointPorts(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpointPorts streamDestinationEndpointPorts) {
        Response<BinaryData> response = setDestinationEndpointPortsWithResponse(resourceGroupName, connectionName,
            flowName, streamDestinationEndpointPorts);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, Context.NONE);
    }

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FlowInner>, FlowInner> beginSetDestinationEndpointPorts(String resourceGroupName,
        String connectionName, String flowName, SetDestinationEndpointPorts streamDestinationEndpointPorts,
        Context context) {
        Response<BinaryData> response = setDestinationEndpointPortsWithResponse(resourceGroupName, connectionName,
            flowName, streamDestinationEndpointPorts, context);
        return this.client.<FlowInner, FlowInner>getLroResult(response, FlowInner.class, FlowInner.class, context);
    }

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FlowInner> setDestinationEndpointPortsAsync(String resourceGroupName, String connectionName,
        String flowName, SetDestinationEndpointPorts streamDestinationEndpointPorts) {
        return beginSetDestinationEndpointPortsAsync(resourceGroupName, connectionName, flowName,
            streamDestinationEndpointPorts).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner setDestinationEndpointPorts(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpointPorts streamDestinationEndpointPorts) {
        return beginSetDestinationEndpointPorts(resourceGroupName, connectionName, flowName,
            streamDestinationEndpointPorts).getFinalResult();
    }

    /**
     * Set the destination endpoint ports for the specified flow and stream ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param streamDestinationEndpointPorts Stream ID destination endpoint ports wanted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flow resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowInner setDestinationEndpointPorts(String resourceGroupName, String connectionName, String flowName,
        SetDestinationEndpointPorts streamDestinationEndpointPorts, Context context) {
        return beginSetDestinationEndpointPorts(resourceGroupName, connectionName, flowName,
            streamDestinationEndpointPorts, context).getFinalResult();
    }

    /**
     * Get the connection string for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection string for the specified flow along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetStreamConnectionStringResultInner>>
        getStreamConnectionStringWithResponseAsync(String resourceGroupName, String connectionName, String flowName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getStreamConnectionString(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the connection string for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection string for the specified flow on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetStreamConnectionStringResultInner> getStreamConnectionStringAsync(String resourceGroupName,
        String connectionName, String flowName) {
        return getStreamConnectionStringWithResponseAsync(resourceGroupName, connectionName, flowName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the connection string for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection string for the specified flow along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetStreamConnectionStringResultInner> getStreamConnectionStringWithResponse(
        String resourceGroupName, String connectionName, String flowName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        if (flowName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter flowName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getStreamConnectionStringSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, connectionName, flowName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get the connection string for the specified flow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param flowName The name for the flow that is to be onboarded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection string for the specified flow.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetStreamConnectionStringResultInner getStreamConnectionString(String resourceGroupName,
        String connectionName, String flowName) {
        return getStreamConnectionStringWithResponse(resourceGroupName, connectionName, flowName, Context.NONE)
            .getValue();
    }

    /**
     * Gets flows in a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a connection along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FlowInner>> listByConnectionSinglePageAsync(String resourceGroupName,
        String connectionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByConnection(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, this.client.getApiVersion(), connectionName, accept, context))
            .<PagedResponse<FlowInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets flows in a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a connection as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<FlowInner> listByConnectionAsync(String resourceGroupName, String connectionName) {
        return new PagedFlux<>(() -> listByConnectionSinglePageAsync(resourceGroupName, connectionName),
            nextLink -> listByConnectionNextSinglePageAsync(nextLink));
    }

    /**
     * Gets flows in a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a connection along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<FlowInner> listByConnectionSinglePage(String resourceGroupName, String connectionName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<FlowsListResult> res
            = service.listByConnectionSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, this.client.getApiVersion(), connectionName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Gets flows in a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a connection along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<FlowInner> listByConnectionSinglePage(String resourceGroupName, String connectionName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<FlowsListResult> res
            = service.listByConnectionSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, this.client.getApiVersion(), connectionName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Gets flows in a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a connection as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FlowInner> listByConnection(String resourceGroupName, String connectionName) {
        return new PagedIterable<>(() -> listByConnectionSinglePage(resourceGroupName, connectionName),
            nextLink -> listByConnectionNextSinglePage(nextLink));
    }

    /**
     * Gets flows in a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return flows in a connection as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FlowInner> listByConnection(String resourceGroupName, String connectionName, Context context) {
        return new PagedIterable<>(() -> listByConnectionSinglePage(resourceGroupName, connectionName, context),
            nextLink -> listByConnectionNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flows list result along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FlowInner>> listByConnectionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByConnectionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<FlowInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flows list result along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<FlowInner> listByConnectionNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<FlowsListResult> res
            = service.listByConnectionNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the flows list result along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<FlowInner> listByConnectionNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<FlowsListResult> res
            = service.listByConnectionNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(FlowsClientImpl.class);
}
