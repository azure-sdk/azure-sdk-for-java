// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A resource selected from ARM.
 */
@Fluent
public final class SelectedResource {
    /*
     * Name of the connection
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Id of the connection
     */
    @JsonProperty(value = "id", required = true)
    private String id;

    /*
     * Location of the connection
     */
    @JsonProperty(value = "location")
    private String location;

    /*
     * Name of the subscription with the connection
     */
    @JsonProperty(value = "subscriptionName")
    private String subscriptionName;

    /**
     * Creates an instance of SelectedResource class.
     */
    public SelectedResource() {
    }

    /**
     * Get the name property: Name of the connection.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the connection.
     * 
     * @param name the name value to set.
     * @return the SelectedResource object itself.
     */
    public SelectedResource withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the id property: Id of the connection.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Id of the connection.
     * 
     * @param id the id value to set.
     * @return the SelectedResource object itself.
     */
    public SelectedResource withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the location property: Location of the connection.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Location of the connection.
     * 
     * @param location the location value to set.
     * @return the SelectedResource object itself.
     */
    public SelectedResource withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the subscriptionName property: Name of the subscription with the connection.
     * 
     * @return the subscriptionName value.
     */
    public String subscriptionName() {
        return this.subscriptionName;
    }

    /**
     * Set the subscriptionName property: Name of the subscription with the connection.
     * 
     * @param subscriptionName the subscriptionName value to set.
     * @return the SelectedResource object itself.
     */
    public SelectedResource withSubscriptionName(String subscriptionName) {
        this.subscriptionName = subscriptionName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property id in model SelectedResource"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SelectedResource.class);
}
