// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties specific to API Flow Type.
 */
@Fluent
public final class ApiFlowOptions implements JsonSerializable<ApiFlowOptions> {
    /*
     * Remote host to which communication needs to be made
     */
    private String remoteEndpoint;

    /*
     * Unique CNAME to represent the Azure Data Transfer API Flow instance
     */
    private String cname;

    /*
     * Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked
     */
    private ApiMode apiMode;

    /*
     * Flag for if Azure Data Transfer API Flow should extract the user token
     */
    private IdentityTranslation identityTranslation;

    /*
     * Sender's app user assigned Manage Identity client ID
     */
    private String senderClientId;

    /*
     * Remote stub app registration Client ID
     */
    private String remoteCallingModeClientId;

    /*
     * Optional field to override the audience of the remote endpoint
     */
    private String audienceOverride;

    /**
     * Creates an instance of ApiFlowOptions class.
     */
    public ApiFlowOptions() {
    }

    /**
     * Get the remoteEndpoint property: Remote host to which communication needs to be made.
     * 
     * @return the remoteEndpoint value.
     */
    public String remoteEndpoint() {
        return this.remoteEndpoint;
    }

    /**
     * Set the remoteEndpoint property: Remote host to which communication needs to be made.
     * 
     * @param remoteEndpoint the remoteEndpoint value to set.
     * @return the ApiFlowOptions object itself.
     */
    public ApiFlowOptions withRemoteEndpoint(String remoteEndpoint) {
        this.remoteEndpoint = remoteEndpoint;
        return this;
    }

    /**
     * Get the cname property: Unique CNAME to represent the Azure Data Transfer API Flow instance.
     * 
     * @return the cname value.
     */
    public String cname() {
        return this.cname;
    }

    /**
     * Set the cname property: Unique CNAME to represent the Azure Data Transfer API Flow instance.
     * 
     * @param cname the cname value to set.
     * @return the ApiFlowOptions object itself.
     */
    public ApiFlowOptions withCname(String cname) {
        this.cname = cname;
        return this;
    }

    /**
     * Get the apiMode property: Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API
     * Flow will be invoked.
     * 
     * @return the apiMode value.
     */
    public ApiMode apiMode() {
        return this.apiMode;
    }

    /**
     * Set the apiMode property: Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API
     * Flow will be invoked.
     * 
     * @param apiMode the apiMode value to set.
     * @return the ApiFlowOptions object itself.
     */
    public ApiFlowOptions withApiMode(ApiMode apiMode) {
        this.apiMode = apiMode;
        return this;
    }

    /**
     * Get the identityTranslation property: Flag for if Azure Data Transfer API Flow should extract the user token.
     * 
     * @return the identityTranslation value.
     */
    public IdentityTranslation identityTranslation() {
        return this.identityTranslation;
    }

    /**
     * Set the identityTranslation property: Flag for if Azure Data Transfer API Flow should extract the user token.
     * 
     * @param identityTranslation the identityTranslation value to set.
     * @return the ApiFlowOptions object itself.
     */
    public ApiFlowOptions withIdentityTranslation(IdentityTranslation identityTranslation) {
        this.identityTranslation = identityTranslation;
        return this;
    }

    /**
     * Get the senderClientId property: Sender's app user assigned Manage Identity client ID.
     * 
     * @return the senderClientId value.
     */
    public String senderClientId() {
        return this.senderClientId;
    }

    /**
     * Set the senderClientId property: Sender's app user assigned Manage Identity client ID.
     * 
     * @param senderClientId the senderClientId value to set.
     * @return the ApiFlowOptions object itself.
     */
    public ApiFlowOptions withSenderClientId(String senderClientId) {
        this.senderClientId = senderClientId;
        return this;
    }

    /**
     * Get the remoteCallingModeClientId property: Remote stub app registration Client ID.
     * 
     * @return the remoteCallingModeClientId value.
     */
    public String remoteCallingModeClientId() {
        return this.remoteCallingModeClientId;
    }

    /**
     * Set the remoteCallingModeClientId property: Remote stub app registration Client ID.
     * 
     * @param remoteCallingModeClientId the remoteCallingModeClientId value to set.
     * @return the ApiFlowOptions object itself.
     */
    public ApiFlowOptions withRemoteCallingModeClientId(String remoteCallingModeClientId) {
        this.remoteCallingModeClientId = remoteCallingModeClientId;
        return this;
    }

    /**
     * Get the audienceOverride property: Optional field to override the audience of the remote endpoint.
     * 
     * @return the audienceOverride value.
     */
    public String audienceOverride() {
        return this.audienceOverride;
    }

    /**
     * Set the audienceOverride property: Optional field to override the audience of the remote endpoint.
     * 
     * @param audienceOverride the audienceOverride value to set.
     * @return the ApiFlowOptions object itself.
     */
    public ApiFlowOptions withAudienceOverride(String audienceOverride) {
        this.audienceOverride = audienceOverride;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("remoteEndpoint", this.remoteEndpoint);
        jsonWriter.writeStringField("cname", this.cname);
        jsonWriter.writeStringField("apiMode", this.apiMode == null ? null : this.apiMode.toString());
        jsonWriter.writeStringField("identityTranslation",
            this.identityTranslation == null ? null : this.identityTranslation.toString());
        jsonWriter.writeStringField("senderClientId", this.senderClientId);
        jsonWriter.writeStringField("remoteCallingModeClientId", this.remoteCallingModeClientId);
        jsonWriter.writeStringField("audienceOverride", this.audienceOverride);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiFlowOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiFlowOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApiFlowOptions.
     */
    public static ApiFlowOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiFlowOptions deserializedApiFlowOptions = new ApiFlowOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("remoteEndpoint".equals(fieldName)) {
                    deserializedApiFlowOptions.remoteEndpoint = reader.getString();
                } else if ("cname".equals(fieldName)) {
                    deserializedApiFlowOptions.cname = reader.getString();
                } else if ("apiMode".equals(fieldName)) {
                    deserializedApiFlowOptions.apiMode = ApiMode.fromString(reader.getString());
                } else if ("identityTranslation".equals(fieldName)) {
                    deserializedApiFlowOptions.identityTranslation = IdentityTranslation.fromString(reader.getString());
                } else if ("senderClientId".equals(fieldName)) {
                    deserializedApiFlowOptions.senderClientId = reader.getString();
                } else if ("remoteCallingModeClientId".equals(fieldName)) {
                    deserializedApiFlowOptions.remoteCallingModeClientId = reader.getString();
                } else if ("audienceOverride".equals(fieldName)) {
                    deserializedApiFlowOptions.audienceOverride = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiFlowOptions;
        });
    }
}
