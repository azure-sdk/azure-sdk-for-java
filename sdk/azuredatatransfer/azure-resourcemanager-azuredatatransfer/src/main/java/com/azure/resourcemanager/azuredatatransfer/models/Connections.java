// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Connections.
 */
public interface Connections {
    /**
     * Gets connections in a subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connections in a subscription as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Connection> listBySubscription();

    /**
     * Gets connections in a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connections in a subscription as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Connection> listBySubscription(Context context);

    /**
     * Gets connections in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connections in a resource group as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Connection> listByResourceGroup(String resourceGroupName);

    /**
     * Gets connections in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connections in a resource group as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Connection> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Gets connection resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connection resource along with {@link Response}.
     */
    Response<Connection> getByResourceGroupWithResponse(String resourceGroupName, String connectionName,
        Context context);

    /**
     * Gets connection resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connection resource.
     */
    Connection getByResourceGroup(String resourceGroupName, String connectionName);

    /**
     * Deletes the connection resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String connectionName);

    /**
     * Deletes the connection resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String connectionName, Context context);

    /**
     * Links the connection to its pending connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param body Connection body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition.
     */
    Connection link(String resourceGroupName, String connectionName, ResourceBody body);

    /**
     * Links the connection to its pending connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param body Connection body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection resource definition.
     */
    Connection link(String resourceGroupName, String connectionName, ResourceBody body, Context context);

    /**
     * Lists all pending connections for a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PendingConnection list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PendingConnection> list(String resourceGroupName, String connectionName);

    /**
     * Lists all pending connections for a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PendingConnection list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PendingConnection> list(String resourceGroupName, String connectionName, Context context);

    /**
     * Lists all pending flows for a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PendingFlow list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PendingFlow> listPendingFlowsList(String resourceGroupName, String connectionName);

    /**
     * Lists all pending flows for a connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectionName The name for the connection that is to be requested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PendingFlow list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PendingFlow> listPendingFlowsList(String resourceGroupName, String connectionName, Context context);

    /**
     * Gets connection resource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connection resource along with {@link Response}.
     */
    Connection getById(String id);

    /**
     * Gets connection resource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connection resource along with {@link Response}.
     */
    Response<Connection> getByIdWithResponse(String id, Context context);

    /**
     * Deletes the connection resource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes the connection resource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Connection resource.
     * 
     * @param name resource name.
     * @return the first stage of the new Connection definition.
     */
    Connection.DefinitionStages.Blank define(String name);
}
