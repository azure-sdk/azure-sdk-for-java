// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azuredatatransfer.fluent.models.ConnectionInner;
import com.azure.resourcemanager.azuredatatransfer.models.Connection;
import com.azure.resourcemanager.azuredatatransfer.models.ConnectionProperties;
import com.azure.resourcemanager.azuredatatransfer.models.ConnectionsPatch;
import com.azure.resourcemanager.azuredatatransfer.models.ManagedServiceIdentity;
import com.azure.resourcemanager.azuredatatransfer.models.ResourceBody;
import java.util.Collections;
import java.util.Map;

public final class ConnectionImpl implements Connection, Connection.Definition, Connection.Update {
    private ConnectionInner innerObject;

    private final com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ConnectionProperties properties() {
        return this.innerModel().properties();
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ConnectionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String connectionName;

    private ConnectionsPatch updateConnection;

    public ConnectionImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Connection create() {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .createOrUpdate(resourceGroupName, connectionName, this.innerModel(), Context.NONE);
        return this;
    }

    public Connection create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .createOrUpdate(resourceGroupName, connectionName, this.innerModel(), context);
        return this;
    }

    ConnectionImpl(String name, com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager) {
        this.innerObject = new ConnectionInner();
        this.serviceManager = serviceManager;
        this.connectionName = name;
    }

    public ConnectionImpl update() {
        this.updateConnection = new ConnectionsPatch();
        return this;
    }

    public Connection apply() {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .update(resourceGroupName, connectionName, updateConnection, Context.NONE);
        return this;
    }

    public Connection apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .update(resourceGroupName, connectionName, updateConnection, context);
        return this;
    }

    ConnectionImpl(ConnectionInner innerObject,
        com.azure.resourcemanager.azuredatatransfer.AzuredatatransferManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.connectionName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "connections");
    }

    public Connection refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .getByResourceGroupWithResponse(resourceGroupName, connectionName, Context.NONE)
            .getValue();
        return this;
    }

    public Connection refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConnections()
            .getByResourceGroupWithResponse(resourceGroupName, connectionName, context)
            .getValue();
        return this;
    }

    public Connection link(ResourceBody connection) {
        return serviceManager.connections().link(resourceGroupName, connectionName, connection);
    }

    public Connection link(ResourceBody connection, Context context) {
        return serviceManager.connections().link(resourceGroupName, connectionName, connection, context);
    }

    public ConnectionImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ConnectionImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ConnectionImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateConnection.withTags(tags);
            return this;
        }
    }

    public ConnectionImpl withProperties(ConnectionProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public ConnectionImpl withIdentity(ManagedServiceIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateConnection.withIdentity(identity);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
