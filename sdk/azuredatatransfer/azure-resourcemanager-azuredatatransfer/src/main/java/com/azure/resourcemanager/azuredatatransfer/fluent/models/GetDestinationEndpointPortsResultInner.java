// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * List of destination endpoint ports for the flow stream.
 */
@Fluent
public final class GetDestinationEndpointPortsResultInner
    implements JsonSerializable<GetDestinationEndpointPortsResultInner> {
    /*
     * The destination endpoint port for the flow stream
     */
    private List<Long> ports;

    /**
     * Creates an instance of GetDestinationEndpointPortsResultInner class.
     */
    public GetDestinationEndpointPortsResultInner() {
    }

    /**
     * Get the ports property: The destination endpoint port for the flow stream.
     * 
     * @return the ports value.
     */
    public List<Long> ports() {
        return this.ports;
    }

    /**
     * Set the ports property: The destination endpoint port for the flow stream.
     * 
     * @param ports the ports value to set.
     * @return the GetDestinationEndpointPortsResultInner object itself.
     */
    public GetDestinationEndpointPortsResultInner withPorts(List<Long> ports) {
        this.ports = ports;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ports", this.ports, (writer, element) -> writer.writeLong(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetDestinationEndpointPortsResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetDestinationEndpointPortsResultInner if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GetDestinationEndpointPortsResultInner.
     */
    public static GetDestinationEndpointPortsResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetDestinationEndpointPortsResultInner deserializedGetDestinationEndpointPortsResultInner
                = new GetDestinationEndpointPortsResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ports".equals(fieldName)) {
                    List<Long> ports = reader.readArray(reader1 -> reader1.getLong());
                    deserializedGetDestinationEndpointPortsResultInner.ports = ports;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetDestinationEndpointPortsResultInner;
        });
    }
}
