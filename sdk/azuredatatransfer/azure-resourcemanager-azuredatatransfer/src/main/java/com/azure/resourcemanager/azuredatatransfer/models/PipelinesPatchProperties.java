// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Properties of pipelines patch body.
 */
@Fluent
public final class PipelinesPatchProperties {
    /*
     * Connections associated with pipeline
     */
    @JsonProperty(value = "connections")
    private List<PipelineConnection> connections;

    /*
     * The flow types allowed for this pipeline
     */
    @JsonProperty(value = "flowTypes")
    private List<FlowType> flowTypes;

    /**
     * Creates an instance of PipelinesPatchProperties class.
     */
    public PipelinesPatchProperties() {
    }

    /**
     * Get the connections property: Connections associated with pipeline.
     * 
     * @return the connections value.
     */
    public List<PipelineConnection> connections() {
        return this.connections;
    }

    /**
     * Set the connections property: Connections associated with pipeline.
     * 
     * @param connections the connections value to set.
     * @return the PipelinesPatchProperties object itself.
     */
    public PipelinesPatchProperties withConnections(List<PipelineConnection> connections) {
        this.connections = connections;
        return this;
    }

    /**
     * Get the flowTypes property: The flow types allowed for this pipeline.
     * 
     * @return the flowTypes value.
     */
    public List<FlowType> flowTypes() {
        return this.flowTypes;
    }

    /**
     * Set the flowTypes property: The flow types allowed for this pipeline.
     * 
     * @param flowTypes the flowTypes value to set.
     * @return the PipelinesPatchProperties object itself.
     */
    public PipelinesPatchProperties withFlowTypes(List<FlowType> flowTypes) {
        this.flowTypes = flowTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connections() != null) {
            connections().forEach(e -> e.validate());
        }
    }
}
