// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of pipelines patch body.
 */
@Fluent
public final class PipelinesPatchProperties implements JsonSerializable<PipelinesPatchProperties> {
    /*
     * Connections associated with pipeline
     */
    private List<PipelineConnection> connections;

    /*
     * The flow types allowed for this pipeline
     */
    private List<FlowType> flowTypes;

    /**
     * Creates an instance of PipelinesPatchProperties class.
     */
    public PipelinesPatchProperties() {
    }

    /**
     * Get the connections property: Connections associated with pipeline.
     * 
     * @return the connections value.
     */
    public List<PipelineConnection> connections() {
        return this.connections;
    }

    /**
     * Set the connections property: Connections associated with pipeline.
     * 
     * @param connections the connections value to set.
     * @return the PipelinesPatchProperties object itself.
     */
    public PipelinesPatchProperties withConnections(List<PipelineConnection> connections) {
        this.connections = connections;
        return this;
    }

    /**
     * Get the flowTypes property: The flow types allowed for this pipeline.
     * 
     * @return the flowTypes value.
     */
    public List<FlowType> flowTypes() {
        return this.flowTypes;
    }

    /**
     * Set the flowTypes property: The flow types allowed for this pipeline.
     * 
     * @param flowTypes the flowTypes value to set.
     * @return the PipelinesPatchProperties object itself.
     */
    public PipelinesPatchProperties withFlowTypes(List<FlowType> flowTypes) {
        this.flowTypes = flowTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connections() != null) {
            connections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("connections", this.connections, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("flowTypes", this.flowTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelinesPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelinesPatchProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PipelinesPatchProperties.
     */
    public static PipelinesPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelinesPatchProperties deserializedPipelinesPatchProperties = new PipelinesPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connections".equals(fieldName)) {
                    List<PipelineConnection> connections
                        = reader.readArray(reader1 -> PipelineConnection.fromJson(reader1));
                    deserializedPipelinesPatchProperties.connections = connections;
                } else if ("flowTypes".equals(fieldName)) {
                    List<FlowType> flowTypes = reader.readArray(reader1 -> FlowType.fromString(reader1.getString()));
                    deserializedPipelinesPatchProperties.flowTypes = flowTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelinesPatchProperties;
        });
    }
}
