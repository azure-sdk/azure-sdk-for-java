// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredatatransfer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of flow.
 */
@Fluent
public class FlowProperties implements JsonSerializable<FlowProperties> {
    /*
     * The connection associated with this flow
     */
    private SelectedResource connection;

    /*
     * Dataflow GUID associated with this flow
     */
    private String flowId;

    /*
     * AME, PME, or TORUS only! AKV Chain Containing SAS Token
     */
    private String keyVaultUri;

    /*
     * Link status of the current flow
     */
    private LinkStatusFlow linkStatus;

    /*
     * Resource ID of the linked flow
     */
    private String linkedFlowId;

    /*
     * Status of the current flow
     */
    private FlowStatus status;

    /*
     * Storage Account
     */
    private String storageAccountName;

    /*
     * Storage Account ID
     */
    private String storageAccountId;

    /*
     * Storage Container Name
     */
    private String storageContainerName;

    /*
     * Service Bus Queue ID
     */
    private String serviceBusQueueId;

    /*
     * The flow type for this flow
     */
    private FlowType flowType;

    /*
     * Transfer Storage Blobs or Tables
     */
    private DataType dataType;

    /*
     * Provisioning state of the flow
     */
    private ProvisioningState provisioningState;

    /*
     * The policies for this flow
     */
    private List<String> policies;

    /*
     * The selected schema for this flow
     */
    private Schema schema;

    /*
     * The messaging options for this flow
     */
    private MessagingOptions messagingOptions;

    /**
     * Creates an instance of FlowProperties class.
     */
    public FlowProperties() {
    }

    /**
     * Get the connection property: The connection associated with this flow.
     * 
     * @return the connection value.
     */
    public SelectedResource connection() {
        return this.connection;
    }

    /**
     * Set the connection property: The connection associated with this flow.
     * 
     * @param connection the connection value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withConnection(SelectedResource connection) {
        this.connection = connection;
        return this;
    }

    /**
     * Get the flowId property: Dataflow GUID associated with this flow.
     * 
     * @return the flowId value.
     */
    public String flowId() {
        return this.flowId;
    }

    /**
     * Set the flowId property: Dataflow GUID associated with this flow.
     * 
     * @param flowId the flowId value to set.
     * @return the FlowProperties object itself.
     */
    FlowProperties withFlowId(String flowId) {
        this.flowId = flowId;
        return this;
    }

    /**
     * Get the keyVaultUri property: AME, PME, or TORUS only! AKV Chain Containing SAS Token.
     * 
     * @return the keyVaultUri value.
     */
    public String keyVaultUri() {
        return this.keyVaultUri;
    }

    /**
     * Set the keyVaultUri property: AME, PME, or TORUS only! AKV Chain Containing SAS Token.
     * 
     * @param keyVaultUri the keyVaultUri value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withKeyVaultUri(String keyVaultUri) {
        this.keyVaultUri = keyVaultUri;
        return this;
    }

    /**
     * Get the linkStatus property: Link status of the current flow.
     * 
     * @return the linkStatus value.
     */
    public LinkStatusFlow linkStatus() {
        return this.linkStatus;
    }

    /**
     * Set the linkStatus property: Link status of the current flow.
     * 
     * @param linkStatus the linkStatus value to set.
     * @return the FlowProperties object itself.
     */
    FlowProperties withLinkStatus(LinkStatusFlow linkStatus) {
        this.linkStatus = linkStatus;
        return this;
    }

    /**
     * Get the linkedFlowId property: Resource ID of the linked flow.
     * 
     * @return the linkedFlowId value.
     */
    public String linkedFlowId() {
        return this.linkedFlowId;
    }

    /**
     * Set the linkedFlowId property: Resource ID of the linked flow.
     * 
     * @param linkedFlowId the linkedFlowId value to set.
     * @return the FlowProperties object itself.
     */
    FlowProperties withLinkedFlowId(String linkedFlowId) {
        this.linkedFlowId = linkedFlowId;
        return this;
    }

    /**
     * Get the status property: Status of the current flow.
     * 
     * @return the status value.
     */
    public FlowStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the current flow.
     * 
     * @param status the status value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withStatus(FlowStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the storageAccountName property: Storage Account.
     * 
     * @return the storageAccountName value.
     */
    public String storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * Set the storageAccountName property: Storage Account.
     * 
     * @param storageAccountName the storageAccountName value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withStorageAccountName(String storageAccountName) {
        this.storageAccountName = storageAccountName;
        return this;
    }

    /**
     * Get the storageAccountId property: Storage Account ID.
     * 
     * @return the storageAccountId value.
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * Set the storageAccountId property: Storage Account ID.
     * 
     * @param storageAccountId the storageAccountId value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withStorageAccountId(String storageAccountId) {
        this.storageAccountId = storageAccountId;
        return this;
    }

    /**
     * Get the storageContainerName property: Storage Container Name.
     * 
     * @return the storageContainerName value.
     */
    public String storageContainerName() {
        return this.storageContainerName;
    }

    /**
     * Set the storageContainerName property: Storage Container Name.
     * 
     * @param storageContainerName the storageContainerName value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withStorageContainerName(String storageContainerName) {
        this.storageContainerName = storageContainerName;
        return this;
    }

    /**
     * Get the serviceBusQueueId property: Service Bus Queue ID.
     * 
     * @return the serviceBusQueueId value.
     */
    public String serviceBusQueueId() {
        return this.serviceBusQueueId;
    }

    /**
     * Set the serviceBusQueueId property: Service Bus Queue ID.
     * 
     * @param serviceBusQueueId the serviceBusQueueId value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withServiceBusQueueId(String serviceBusQueueId) {
        this.serviceBusQueueId = serviceBusQueueId;
        return this;
    }

    /**
     * Get the flowType property: The flow type for this flow.
     * 
     * @return the flowType value.
     */
    public FlowType flowType() {
        return this.flowType;
    }

    /**
     * Set the flowType property: The flow type for this flow.
     * 
     * @param flowType the flowType value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withFlowType(FlowType flowType) {
        this.flowType = flowType;
        return this;
    }

    /**
     * Get the dataType property: Transfer Storage Blobs or Tables.
     * 
     * @return the dataType value.
     */
    public DataType dataType() {
        return this.dataType;
    }

    /**
     * Set the dataType property: Transfer Storage Blobs or Tables.
     * 
     * @param dataType the dataType value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withDataType(DataType dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the flow.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Provisioning state of the flow.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the FlowProperties object itself.
     */
    FlowProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the policies property: The policies for this flow.
     * 
     * @return the policies value.
     */
    public List<String> policies() {
        return this.policies;
    }

    /**
     * Set the policies property: The policies for this flow.
     * 
     * @param policies the policies value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withPolicies(List<String> policies) {
        this.policies = policies;
        return this;
    }

    /**
     * Get the schema property: The selected schema for this flow.
     * 
     * @return the schema value.
     */
    public Schema schema() {
        return this.schema;
    }

    /**
     * Set the schema property: The selected schema for this flow.
     * 
     * @param schema the schema value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withSchema(Schema schema) {
        this.schema = schema;
        return this;
    }

    /**
     * Get the messagingOptions property: The messaging options for this flow.
     * 
     * @return the messagingOptions value.
     */
    public MessagingOptions messagingOptions() {
        return this.messagingOptions;
    }

    /**
     * Set the messagingOptions property: The messaging options for this flow.
     * 
     * @param messagingOptions the messagingOptions value to set.
     * @return the FlowProperties object itself.
     */
    public FlowProperties withMessagingOptions(MessagingOptions messagingOptions) {
        this.messagingOptions = messagingOptions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connection() != null) {
            connection().validate();
        }
        if (schema() != null) {
            schema().validate();
        }
        if (messagingOptions() != null) {
            messagingOptions().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("connection", this.connection);
        jsonWriter.writeStringField("keyVaultUri", this.keyVaultUri);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("storageAccountName", this.storageAccountName);
        jsonWriter.writeStringField("storageAccountId", this.storageAccountId);
        jsonWriter.writeStringField("storageContainerName", this.storageContainerName);
        jsonWriter.writeStringField("serviceBusQueueId", this.serviceBusQueueId);
        jsonWriter.writeStringField("flowType", this.flowType == null ? null : this.flowType.toString());
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        jsonWriter.writeArrayField("policies", this.policies, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("schema", this.schema);
        jsonWriter.writeJsonField("messagingOptions", this.messagingOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FlowProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FlowProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FlowProperties.
     */
    public static FlowProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FlowProperties deserializedFlowProperties = new FlowProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connection".equals(fieldName)) {
                    deserializedFlowProperties.connection = SelectedResource.fromJson(reader);
                } else if ("flowId".equals(fieldName)) {
                    deserializedFlowProperties.flowId = reader.getString();
                } else if ("keyVaultUri".equals(fieldName)) {
                    deserializedFlowProperties.keyVaultUri = reader.getString();
                } else if ("linkStatus".equals(fieldName)) {
                    deserializedFlowProperties.linkStatus = LinkStatusFlow.fromString(reader.getString());
                } else if ("linkedFlowId".equals(fieldName)) {
                    deserializedFlowProperties.linkedFlowId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedFlowProperties.status = FlowStatus.fromString(reader.getString());
                } else if ("storageAccountName".equals(fieldName)) {
                    deserializedFlowProperties.storageAccountName = reader.getString();
                } else if ("storageAccountId".equals(fieldName)) {
                    deserializedFlowProperties.storageAccountId = reader.getString();
                } else if ("storageContainerName".equals(fieldName)) {
                    deserializedFlowProperties.storageContainerName = reader.getString();
                } else if ("serviceBusQueueId".equals(fieldName)) {
                    deserializedFlowProperties.serviceBusQueueId = reader.getString();
                } else if ("flowType".equals(fieldName)) {
                    deserializedFlowProperties.flowType = FlowType.fromString(reader.getString());
                } else if ("dataType".equals(fieldName)) {
                    deserializedFlowProperties.dataType = DataType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFlowProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("policies".equals(fieldName)) {
                    List<String> policies = reader.readArray(reader1 -> reader1.getString());
                    deserializedFlowProperties.policies = policies;
                } else if ("schema".equals(fieldName)) {
                    deserializedFlowProperties.schema = Schema.fromJson(reader);
                } else if ("messagingOptions".equals(fieldName)) {
                    deserializedFlowProperties.messagingOptions = MessagingOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFlowProperties;
        });
    }
}
