// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The flow template connector details.
 */
@Fluent
public final class TemplateProperties implements JsonSerializable<TemplateProperties> {
    /*
     * The provisioning state.
     */
    private WorkflowProvisioningState provisioningState;

    /*
     * The flow template state.
     */
    private FlowTemplateState state;

    /*
     * The flow template type.
     */
    private FlowTemplateManifest manifest;

    /**
     * Creates an instance of TemplateProperties class.
     */
    public TemplateProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public WorkflowProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the state property: The flow template state.
     * 
     * @return the state value.
     */
    public FlowTemplateState state() {
        return this.state;
    }

    /**
     * Set the state property: The flow template state.
     * 
     * @param state the state value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withState(FlowTemplateState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the manifest property: The flow template type.
     * 
     * @return the manifest value.
     */
    public FlowTemplateManifest manifest() {
        return this.manifest;
    }

    /**
     * Set the manifest property: The flow template type.
     * 
     * @param manifest the manifest value to set.
     * @return the TemplateProperties object itself.
     */
    public TemplateProperties withManifest(FlowTemplateManifest manifest) {
        this.manifest = manifest;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (manifest() != null) {
            manifest().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeJsonField("manifest", this.manifest);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TemplateProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TemplateProperties.
     */
    public static TemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TemplateProperties deserializedTemplateProperties = new TemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedTemplateProperties.provisioningState
                        = WorkflowProvisioningState.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedTemplateProperties.state = FlowTemplateState.fromString(reader.getString());
                } else if ("manifest".equals(fieldName)) {
                    deserializedTemplateProperties.manifest = FlowTemplateManifest.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTemplateProperties;
        });
    }
}
