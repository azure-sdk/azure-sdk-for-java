// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The workflow export validity. */
@Fluent
public final class WorkflowExportValidity {
    /*
     * The validation state for the workflow.
     */
    @JsonProperty(value = "validationState")
    private ValidationState validationState;

    /*
     * The workflow operations export validity.
     */
    @JsonProperty(value = "workflowOperations")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, ResourceExportValidity> workflowOperations;

    /*
     * The connections export validity.
     */
    @JsonProperty(value = "connections")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, ConnectionExportValidity> connections;

    /*
     * The parameters export validity.
     */
    @JsonProperty(value = "parameters")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, ResourceExportValidity> parameters;

    /** Creates an instance of WorkflowExportValidity class. */
    public WorkflowExportValidity() {
    }

    /**
     * Get the validationState property: The validation state for the workflow.
     *
     * @return the validationState value.
     */
    public ValidationState validationState() {
        return this.validationState;
    }

    /**
     * Set the validationState property: The validation state for the workflow.
     *
     * @param validationState the validationState value to set.
     * @return the WorkflowExportValidity object itself.
     */
    public WorkflowExportValidity withValidationState(ValidationState validationState) {
        this.validationState = validationState;
        return this;
    }

    /**
     * Get the workflowOperations property: The workflow operations export validity.
     *
     * @return the workflowOperations value.
     */
    public Map<String, ResourceExportValidity> workflowOperations() {
        return this.workflowOperations;
    }

    /**
     * Set the workflowOperations property: The workflow operations export validity.
     *
     * @param workflowOperations the workflowOperations value to set.
     * @return the WorkflowExportValidity object itself.
     */
    public WorkflowExportValidity withWorkflowOperations(Map<String, ResourceExportValidity> workflowOperations) {
        this.workflowOperations = workflowOperations;
        return this;
    }

    /**
     * Get the connections property: The connections export validity.
     *
     * @return the connections value.
     */
    public Map<String, ConnectionExportValidity> connections() {
        return this.connections;
    }

    /**
     * Set the connections property: The connections export validity.
     *
     * @param connections the connections value to set.
     * @return the WorkflowExportValidity object itself.
     */
    public WorkflowExportValidity withConnections(Map<String, ConnectionExportValidity> connections) {
        this.connections = connections;
        return this;
    }

    /**
     * Get the parameters property: The parameters export validity.
     *
     * @return the parameters value.
     */
    public Map<String, ResourceExportValidity> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: The parameters export validity.
     *
     * @param parameters the parameters value to set.
     * @return the WorkflowExportValidity object itself.
     */
    public WorkflowExportValidity withParameters(Map<String, ResourceExportValidity> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (workflowOperations() != null) {
            workflowOperations()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (connections() != null) {
            connections()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (parameters() != null) {
            parameters()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
