// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.logic.fluent.WorkflowRunsOperationsClient;
import com.azure.resourcemanager.logic.fluent.models.WorkflowRunInner;
import com.azure.resourcemanager.logic.models.WorkflowRun;
import com.azure.resourcemanager.logic.models.WorkflowRunsOperations;

public final class WorkflowRunsOperationsImpl implements WorkflowRunsOperations {
    private static final ClientLogger LOGGER = new ClientLogger(WorkflowRunsOperationsImpl.class);

    private final WorkflowRunsOperationsClient innerClient;

    private final com.azure.resourcemanager.logic.LogicManager serviceManager;

    public WorkflowRunsOperationsImpl(WorkflowRunsOperationsClient innerClient,
        com.azure.resourcemanager.logic.LogicManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<WorkflowRun> list(String resourceGroupName, String workflowName) {
        PagedIterable<WorkflowRunInner> inner = this.serviceClient().list(resourceGroupName, workflowName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkflowRunImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkflowRun> list(String resourceGroupName, String workflowName, Integer top, String filter,
        Context context) {
        PagedIterable<WorkflowRunInner> inner
            = this.serviceClient().list(resourceGroupName, workflowName, top, filter, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkflowRunImpl(inner1, this.manager()));
    }

    private WorkflowRunsOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.logic.LogicManager manager() {
        return this.serviceManager;
    }
}
