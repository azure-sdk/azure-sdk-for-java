// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The flow template manifest.
 */
@Fluent
public final class FlowTemplateManifest implements JsonSerializable<FlowTemplateManifest> {
    /*
     * The title.
     */
    private String title;

    /*
     * The description.
     */
    private String description;

    /*
     * The summary.
     */
    private String summary;

    /*
     * The flow template type.
     */
    private FlowTemplateType type;

    /*
     * The flow template supported sku.
     */
    private FlowTemplateSku supportedSku;

    /*
     * The flow template connector details.
     */
    private FlowTemplateConnectorDetails featuredConnectors;

    /*
     * The flow template details.
     */
    private FlowTemplateDetails details;

    /**
     * Creates an instance of FlowTemplateManifest class.
     */
    public FlowTemplateManifest() {
    }

    /**
     * Get the title property: The title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: The title.
     * 
     * @param title the title value to set.
     * @return the FlowTemplateManifest object itself.
     */
    public FlowTemplateManifest withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: The description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description.
     * 
     * @param description the description value to set.
     * @return the FlowTemplateManifest object itself.
     */
    public FlowTemplateManifest withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the summary property: The summary.
     * 
     * @return the summary value.
     */
    public String summary() {
        return this.summary;
    }

    /**
     * Set the summary property: The summary.
     * 
     * @param summary the summary value to set.
     * @return the FlowTemplateManifest object itself.
     */
    public FlowTemplateManifest withSummary(String summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get the type property: The flow template type.
     * 
     * @return the type value.
     */
    public FlowTemplateType type() {
        return this.type;
    }

    /**
     * Set the type property: The flow template type.
     * 
     * @param type the type value to set.
     * @return the FlowTemplateManifest object itself.
     */
    public FlowTemplateManifest withType(FlowTemplateType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the supportedSku property: The flow template supported sku.
     * 
     * @return the supportedSku value.
     */
    public FlowTemplateSku supportedSku() {
        return this.supportedSku;
    }

    /**
     * Set the supportedSku property: The flow template supported sku.
     * 
     * @param supportedSku the supportedSku value to set.
     * @return the FlowTemplateManifest object itself.
     */
    public FlowTemplateManifest withSupportedSku(FlowTemplateSku supportedSku) {
        this.supportedSku = supportedSku;
        return this;
    }

    /**
     * Get the featuredConnectors property: The flow template connector details.
     * 
     * @return the featuredConnectors value.
     */
    public FlowTemplateConnectorDetails featuredConnectors() {
        return this.featuredConnectors;
    }

    /**
     * Set the featuredConnectors property: The flow template connector details.
     * 
     * @param featuredConnectors the featuredConnectors value to set.
     * @return the FlowTemplateManifest object itself.
     */
    public FlowTemplateManifest withFeaturedConnectors(FlowTemplateConnectorDetails featuredConnectors) {
        this.featuredConnectors = featuredConnectors;
        return this;
    }

    /**
     * Get the details property: The flow template details.
     * 
     * @return the details value.
     */
    public FlowTemplateDetails details() {
        return this.details;
    }

    /**
     * Set the details property: The flow template details.
     * 
     * @param details the details value to set.
     * @return the FlowTemplateManifest object itself.
     */
    public FlowTemplateManifest withDetails(FlowTemplateDetails details) {
        this.details = details;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (featuredConnectors() != null) {
            featuredConnectors().validate();
        }
        if (details() != null) {
            details().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("summary", this.summary);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("supportedSku", this.supportedSku == null ? null : this.supportedSku.toString());
        jsonWriter.writeJsonField("featuredConnectors", this.featuredConnectors);
        jsonWriter.writeJsonField("details", this.details);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FlowTemplateManifest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FlowTemplateManifest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FlowTemplateManifest.
     */
    public static FlowTemplateManifest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FlowTemplateManifest deserializedFlowTemplateManifest = new FlowTemplateManifest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedFlowTemplateManifest.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedFlowTemplateManifest.description = reader.getString();
                } else if ("summary".equals(fieldName)) {
                    deserializedFlowTemplateManifest.summary = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedFlowTemplateManifest.type = FlowTemplateType.fromString(reader.getString());
                } else if ("supportedSku".equals(fieldName)) {
                    deserializedFlowTemplateManifest.supportedSku = FlowTemplateSku.fromString(reader.getString());
                } else if ("featuredConnectors".equals(fieldName)) {
                    deserializedFlowTemplateManifest.featuredConnectors = FlowTemplateConnectorDetails.fromJson(reader);
                } else if ("details".equals(fieldName)) {
                    deserializedFlowTemplateManifest.details = FlowTemplateDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFlowTemplateManifest;
        });
    }
}
