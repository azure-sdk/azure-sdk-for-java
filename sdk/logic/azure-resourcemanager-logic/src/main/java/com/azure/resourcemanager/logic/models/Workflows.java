// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.logic.fluent.models.WorkflowInner;
import java.util.Map;

/**
 * Resource collection API of Workflows.
 */
public interface Workflows {
    /**
     * Gets a list of workflows by subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of workflows by subscription as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Workflow> list();

    /**
     * Gets a list of workflows by subscription.
     * 
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation. Options for filters include: State, Trigger, and
     * ReferencedResourceId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of workflows by subscription as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Workflow> list(Integer top, String filter, Context context);

    /**
     * Validates the workflow definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param workflowName The workflow name.
     * @param validate The workflow.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> validateByLocationWithResponse(String resourceGroupName, String location, String workflowName,
        WorkflowInner validate, Context context);

    /**
     * Validates the workflow definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of Azure region.
     * @param workflowName The workflow name.
     * @param validate The workflow.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void validateByLocation(String resourceGroupName, String location, String workflowName, WorkflowInner validate);

    /**
     * Gets a list of workflows by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of workflows by resource group as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Workflow> listByResourceGroup(String resourceGroupName);

    /**
     * Gets a list of workflows by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation. Options for filters include: State, Trigger, and
     * ReferencedResourceId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of workflows by resource group as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Workflow> listByResourceGroup(String resourceGroupName, Integer top, String filter, Context context);

    /**
     * Gets a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a workflow along with {@link Response}.
     */
    Response<Workflow> getByResourceGroupWithResponse(String resourceGroupName, String workflowName, Context context);

    /**
     * Gets a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a workflow.
     */
    Workflow getByResourceGroup(String resourceGroupName, String workflowName);

    /**
     * Updates a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the workflow type along with {@link Response}.
     */
    Response<Workflow> updateWithResponse(String resourceGroupName, String workflowName, Object properties,
        Context context);

    /**
     * Updates a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the workflow type.
     */
    Workflow update(String resourceGroupName, String workflowName, Object properties);

    /**
     * Deletes a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String workflowName, Context context);

    /**
     * Deletes a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String workflowName);

    /**
     * Disables a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> disableWithResponse(String resourceGroupName, String workflowName, Context context);

    /**
     * Disables a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void disable(String resourceGroupName, String workflowName);

    /**
     * Enables a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> enableWithResponse(String resourceGroupName, String workflowName, Context context);

    /**
     * Enables a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void enable(String resourceGroupName, String workflowName);

    /**
     * Generates the upgraded definition for a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param body Parameters for generating an upgraded definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dictionary of &lt;any&gt; along with {@link Response}.
     */
    Response<Map<String, Object>> generateUpgradedDefinitionWithResponse(String resourceGroupName, String workflowName,
        GenerateUpgradedDefinitionParameters body, Context context);

    /**
     * Generates the upgraded definition for a workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param body Parameters for generating an upgraded definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dictionary of &lt;any&gt;.
     */
    Map<String, Object> generateUpgradedDefinition(String resourceGroupName, String workflowName,
        GenerateUpgradedDefinitionParameters body);

    /**
     * Get the workflow callback Url.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param body Which callback url to list.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the workflow callback Url along with {@link Response}.
     */
    Response<WorkflowTriggerCallbackUrl> listCallbackUrlWithResponse(String resourceGroupName, String workflowName,
        GetCallbackUrlParameters body, Context context);

    /**
     * Get the workflow callback Url.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param body Which callback url to list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the workflow callback Url.
     */
    WorkflowTriggerCallbackUrl listCallbackUrl(String resourceGroupName, String workflowName,
        GetCallbackUrlParameters body);

    /**
     * Gets an OpenAPI definition for the workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an OpenAPI definition for the workflow along with {@link Response}.
     */
    Response<Map<String, Object>> listSwaggerWithResponse(String resourceGroupName, String workflowName,
        Context context);

    /**
     * Gets an OpenAPI definition for the workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an OpenAPI definition for the workflow.
     */
    Map<String, Object> listSwagger(String resourceGroupName, String workflowName);

    /**
     * Moves an existing workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param body The workflow to move.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void move(String resourceGroupName, String workflowName, WorkflowReference body);

    /**
     * Moves an existing workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param body The workflow to move.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void move(String resourceGroupName, String workflowName, WorkflowReference body, Context context);

    /**
     * Regenerates the callback URL access key for request triggers.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param body The access key type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> regenerateAccessKeyWithResponse(String resourceGroupName, String workflowName,
        RegenerateActionParameter body, Context context);

    /**
     * Regenerates the callback URL access key for request triggers.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param body The access key type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void regenerateAccessKey(String resourceGroupName, String workflowName, RegenerateActionParameter body);

    /**
     * Validates the workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param body The workflow.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> validateByResourceGroupWithResponse(String resourceGroupName, String workflowName,
        WorkflowInner body, Context context);

    /**
     * Validates the workflow.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The workflow name.
     * @param body The workflow.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void validateByResourceGroup(String resourceGroupName, String workflowName, WorkflowInner body);

    /**
     * Gets a workflow.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a workflow along with {@link Response}.
     */
    Workflow getById(String id);

    /**
     * Gets a workflow.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a workflow along with {@link Response}.
     */
    Response<Workflow> getByIdWithResponse(String id, Context context);

    /**
     * Deletes a workflow.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes a workflow.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Workflow resource.
     * 
     * @param name resource name.
     * @return the first stage of the new Workflow definition.
     */
    Workflow.DefinitionStages.Blank define(String name);
}
