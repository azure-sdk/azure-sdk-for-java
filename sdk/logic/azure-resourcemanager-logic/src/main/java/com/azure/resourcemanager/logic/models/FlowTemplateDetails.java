// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The template details.
 */
@Fluent
public final class FlowTemplateDetails implements JsonSerializable<FlowTemplateDetails> {
    /*
     * The template author.
     */
    private String by;

    /*
     * The template category.
     */
    private String category;

    /**
     * Creates an instance of FlowTemplateDetails class.
     */
    public FlowTemplateDetails() {
    }

    /**
     * Get the by property: The template author.
     * 
     * @return the by value.
     */
    public String by() {
        return this.by;
    }

    /**
     * Set the by property: The template author.
     * 
     * @param by the by value to set.
     * @return the FlowTemplateDetails object itself.
     */
    public FlowTemplateDetails withBy(String by) {
        this.by = by;
        return this;
    }

    /**
     * Get the category property: The template category.
     * 
     * @return the category value.
     */
    public String category() {
        return this.category;
    }

    /**
     * Set the category property: The template category.
     * 
     * @param category the category value to set.
     * @return the FlowTemplateDetails object itself.
     */
    public FlowTemplateDetails withCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("by", this.by);
        jsonWriter.writeStringField("category", this.category);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FlowTemplateDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FlowTemplateDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FlowTemplateDetails.
     */
    public static FlowTemplateDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FlowTemplateDetails deserializedFlowTemplateDetails = new FlowTemplateDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("by".equals(fieldName)) {
                    deserializedFlowTemplateDetails.by = reader.getString();
                } else if ("category".equals(fieldName)) {
                    deserializedFlowTemplateDetails.category = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFlowTemplateDetails;
        });
    }
}
