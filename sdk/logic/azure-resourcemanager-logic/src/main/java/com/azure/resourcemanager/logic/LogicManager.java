// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.logic.fluent.LogicManagementClient;
import com.azure.resourcemanager.logic.implementation.ApiOperationsImpl;
import com.azure.resourcemanager.logic.implementation.AssemblyDefinitionsImpl;
import com.azure.resourcemanager.logic.implementation.BatchConfigurationsImpl;
import com.azure.resourcemanager.logic.implementation.IntegrationAccountAgreementsImpl;
import com.azure.resourcemanager.logic.implementation.IntegrationAccountCertificatesImpl;
import com.azure.resourcemanager.logic.implementation.IntegrationAccountMapsImpl;
import com.azure.resourcemanager.logic.implementation.IntegrationAccountPartnersImpl;
import com.azure.resourcemanager.logic.implementation.IntegrationAccountSchemasImpl;
import com.azure.resourcemanager.logic.implementation.IntegrationAccountSessionsImpl;
import com.azure.resourcemanager.logic.implementation.IntegrationAccountsImpl;
import com.azure.resourcemanager.logic.implementation.IntegrationServiceEnvironmentManagedApisImpl;
import com.azure.resourcemanager.logic.implementation.IntegrationServiceEnvironmentsImpl;
import com.azure.resourcemanager.logic.implementation.LogicManagementClientBuilder;
import com.azure.resourcemanager.logic.implementation.OperationsImpl;
import com.azure.resourcemanager.logic.implementation.RequestHistoriesImpl;
import com.azure.resourcemanager.logic.implementation.TemplatesImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowRunActionRepetitionDefinitionsImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowRunActionRequestHistoriesOperationsImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowRunActionScopeRepetitionsOperationsImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowRunActionsImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowRunOperationsOperationsImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowRunsImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowRunsOperationsImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowTriggerHistoriesImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowTriggersImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowVersionsImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowsImpl;
import com.azure.resourcemanager.logic.implementation.WorkflowsOperationsImpl;
import com.azure.resourcemanager.logic.models.ApiOperations;
import com.azure.resourcemanager.logic.models.AssemblyDefinitions;
import com.azure.resourcemanager.logic.models.BatchConfigurations;
import com.azure.resourcemanager.logic.models.IntegrationAccountAgreements;
import com.azure.resourcemanager.logic.models.IntegrationAccountCertificates;
import com.azure.resourcemanager.logic.models.IntegrationAccountMaps;
import com.azure.resourcemanager.logic.models.IntegrationAccountPartners;
import com.azure.resourcemanager.logic.models.IntegrationAccountSchemas;
import com.azure.resourcemanager.logic.models.IntegrationAccountSessions;
import com.azure.resourcemanager.logic.models.IntegrationAccounts;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentManagedApis;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironments;
import com.azure.resourcemanager.logic.models.Operations;
import com.azure.resourcemanager.logic.models.RequestHistories;
import com.azure.resourcemanager.logic.models.Templates;
import com.azure.resourcemanager.logic.models.WorkflowRunActionRepetitionDefinitions;
import com.azure.resourcemanager.logic.models.WorkflowRunActionRequestHistoriesOperations;
import com.azure.resourcemanager.logic.models.WorkflowRunActionScopeRepetitionsOperations;
import com.azure.resourcemanager.logic.models.WorkflowRunActions;
import com.azure.resourcemanager.logic.models.WorkflowRunOperationsOperations;
import com.azure.resourcemanager.logic.models.WorkflowRuns;
import com.azure.resourcemanager.logic.models.WorkflowRunsOperations;
import com.azure.resourcemanager.logic.models.WorkflowTriggerHistories;
import com.azure.resourcemanager.logic.models.WorkflowTriggers;
import com.azure.resourcemanager.logic.models.WorkflowVersions;
import com.azure.resourcemanager.logic.models.Workflows;
import com.azure.resourcemanager.logic.models.WorkflowsOperations;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to LogicManager.
 * REST API for Azure Logic Apps.
 */
public final class LogicManager {
    private Operations operations;

    private IntegrationAccounts integrationAccounts;

    private IntegrationServiceEnvironments integrationServiceEnvironments;

    private IntegrationServiceEnvironmentManagedApis integrationServiceEnvironmentManagedApis;

    private ApiOperations apiOperations;

    private Templates templates;

    private Workflows workflows;

    private IntegrationAccountAgreements integrationAccountAgreements;

    private AssemblyDefinitions assemblyDefinitions;

    private BatchConfigurations batchConfigurations;

    private IntegrationAccountCertificates integrationAccountCertificates;

    private IntegrationAccountMaps integrationAccountMaps;

    private IntegrationAccountPartners integrationAccountPartners;

    private IntegrationAccountSchemas integrationAccountSchemas;

    private IntegrationAccountSessions integrationAccountSessions;

    private WorkflowsOperations workflowsOperations;

    private WorkflowRuns workflowRuns;

    private WorkflowRunActions workflowRunActions;

    private WorkflowRunActionRepetitionDefinitions workflowRunActionRepetitionDefinitions;

    private RequestHistories requestHistories;

    private WorkflowRunActionRequestHistoriesOperations workflowRunActionRequestHistoriesOperations;

    private WorkflowRunActionScopeRepetitionsOperations workflowRunActionScopeRepetitionsOperations;

    private WorkflowRunOperationsOperations workflowRunOperationsOperations;

    private WorkflowRunsOperations workflowRunsOperations;

    private WorkflowTriggers workflowTriggers;

    private WorkflowTriggerHistories workflowTriggerHistories;

    private WorkflowVersions workflowVersions;

    private final LogicManagementClient clientObject;

    private LogicManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new LogicManagementClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
            .subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval)
            .buildClient();
    }

    /**
     * Creates an instance of Logic service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Logic service API instance.
     */
    public static LogicManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Logic service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Logic service API instance.
     */
    public static LogicManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new LogicManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create LogicManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new LogicManager.Configurable();
    }

    /**
     * The Configurable allowing configurations to be set.
     */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);
        private static final String SDK_VERSION = "version";
        private static final Map<String, String> PROPERTIES
            = CoreUtils.getProperties("azure-resourcemanager-logic.properties");

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         * <p>
         * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval
                = Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Logic service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Logic service API instance.
         */
        public LogicManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder.append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.logic")
                .append("/")
                .append(clientVersion);
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder.append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new BearerTokenAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline = new HttpPipelineBuilder().httpClient(httpClient)
                .policies(policies.toArray(new HttpPipelinePolicy[0]))
                .build();
            return new LogicManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of Operations.
     * 
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of IntegrationAccounts. It manages IntegrationAccount.
     * 
     * @return Resource collection API of IntegrationAccounts.
     */
    public IntegrationAccounts integrationAccounts() {
        if (this.integrationAccounts == null) {
            this.integrationAccounts = new IntegrationAccountsImpl(clientObject.getIntegrationAccounts(), this);
        }
        return integrationAccounts;
    }

    /**
     * Gets the resource collection API of IntegrationServiceEnvironments. It manages IntegrationServiceEnvironment.
     * 
     * @return Resource collection API of IntegrationServiceEnvironments.
     */
    public IntegrationServiceEnvironments integrationServiceEnvironments() {
        if (this.integrationServiceEnvironments == null) {
            this.integrationServiceEnvironments
                = new IntegrationServiceEnvironmentsImpl(clientObject.getIntegrationServiceEnvironments(), this);
        }
        return integrationServiceEnvironments;
    }

    /**
     * Gets the resource collection API of IntegrationServiceEnvironmentManagedApis. It manages
     * IntegrationServiceEnvironmentManagedApi.
     * 
     * @return Resource collection API of IntegrationServiceEnvironmentManagedApis.
     */
    public IntegrationServiceEnvironmentManagedApis integrationServiceEnvironmentManagedApis() {
        if (this.integrationServiceEnvironmentManagedApis == null) {
            this.integrationServiceEnvironmentManagedApis = new IntegrationServiceEnvironmentManagedApisImpl(
                clientObject.getIntegrationServiceEnvironmentManagedApis(), this);
        }
        return integrationServiceEnvironmentManagedApis;
    }

    /**
     * Gets the resource collection API of ApiOperations.
     * 
     * @return Resource collection API of ApiOperations.
     */
    public ApiOperations apiOperations() {
        if (this.apiOperations == null) {
            this.apiOperations = new ApiOperationsImpl(clientObject.getApiOperations(), this);
        }
        return apiOperations;
    }

    /**
     * Gets the resource collection API of Templates. It manages Template.
     * 
     * @return Resource collection API of Templates.
     */
    public Templates templates() {
        if (this.templates == null) {
            this.templates = new TemplatesImpl(clientObject.getTemplates(), this);
        }
        return templates;
    }

    /**
     * Gets the resource collection API of Workflows. It manages Workflow.
     * 
     * @return Resource collection API of Workflows.
     */
    public Workflows workflows() {
        if (this.workflows == null) {
            this.workflows = new WorkflowsImpl(clientObject.getWorkflows(), this);
        }
        return workflows;
    }

    /**
     * Gets the resource collection API of IntegrationAccountAgreements. It manages IntegrationAccountAgreement.
     * 
     * @return Resource collection API of IntegrationAccountAgreements.
     */
    public IntegrationAccountAgreements integrationAccountAgreements() {
        if (this.integrationAccountAgreements == null) {
            this.integrationAccountAgreements
                = new IntegrationAccountAgreementsImpl(clientObject.getIntegrationAccountAgreements(), this);
        }
        return integrationAccountAgreements;
    }

    /**
     * Gets the resource collection API of AssemblyDefinitions. It manages AssemblyDefinition.
     * 
     * @return Resource collection API of AssemblyDefinitions.
     */
    public AssemblyDefinitions assemblyDefinitions() {
        if (this.assemblyDefinitions == null) {
            this.assemblyDefinitions = new AssemblyDefinitionsImpl(clientObject.getAssemblyDefinitions(), this);
        }
        return assemblyDefinitions;
    }

    /**
     * Gets the resource collection API of BatchConfigurations. It manages BatchConfiguration.
     * 
     * @return Resource collection API of BatchConfigurations.
     */
    public BatchConfigurations batchConfigurations() {
        if (this.batchConfigurations == null) {
            this.batchConfigurations = new BatchConfigurationsImpl(clientObject.getBatchConfigurations(), this);
        }
        return batchConfigurations;
    }

    /**
     * Gets the resource collection API of IntegrationAccountCertificates. It manages IntegrationAccountCertificate.
     * 
     * @return Resource collection API of IntegrationAccountCertificates.
     */
    public IntegrationAccountCertificates integrationAccountCertificates() {
        if (this.integrationAccountCertificates == null) {
            this.integrationAccountCertificates
                = new IntegrationAccountCertificatesImpl(clientObject.getIntegrationAccountCertificates(), this);
        }
        return integrationAccountCertificates;
    }

    /**
     * Gets the resource collection API of IntegrationAccountMaps. It manages IntegrationAccountMap.
     * 
     * @return Resource collection API of IntegrationAccountMaps.
     */
    public IntegrationAccountMaps integrationAccountMaps() {
        if (this.integrationAccountMaps == null) {
            this.integrationAccountMaps
                = new IntegrationAccountMapsImpl(clientObject.getIntegrationAccountMaps(), this);
        }
        return integrationAccountMaps;
    }

    /**
     * Gets the resource collection API of IntegrationAccountPartners. It manages IntegrationAccountPartner.
     * 
     * @return Resource collection API of IntegrationAccountPartners.
     */
    public IntegrationAccountPartners integrationAccountPartners() {
        if (this.integrationAccountPartners == null) {
            this.integrationAccountPartners
                = new IntegrationAccountPartnersImpl(clientObject.getIntegrationAccountPartners(), this);
        }
        return integrationAccountPartners;
    }

    /**
     * Gets the resource collection API of IntegrationAccountSchemas. It manages IntegrationAccountSchema.
     * 
     * @return Resource collection API of IntegrationAccountSchemas.
     */
    public IntegrationAccountSchemas integrationAccountSchemas() {
        if (this.integrationAccountSchemas == null) {
            this.integrationAccountSchemas
                = new IntegrationAccountSchemasImpl(clientObject.getIntegrationAccountSchemas(), this);
        }
        return integrationAccountSchemas;
    }

    /**
     * Gets the resource collection API of IntegrationAccountSessions. It manages IntegrationAccountSession.
     * 
     * @return Resource collection API of IntegrationAccountSessions.
     */
    public IntegrationAccountSessions integrationAccountSessions() {
        if (this.integrationAccountSessions == null) {
            this.integrationAccountSessions
                = new IntegrationAccountSessionsImpl(clientObject.getIntegrationAccountSessions(), this);
        }
        return integrationAccountSessions;
    }

    /**
     * Gets the resource collection API of WorkflowsOperations.
     * 
     * @return Resource collection API of WorkflowsOperations.
     */
    public WorkflowsOperations workflowsOperations() {
        if (this.workflowsOperations == null) {
            this.workflowsOperations = new WorkflowsOperationsImpl(clientObject.getWorkflowsOperations(), this);
        }
        return workflowsOperations;
    }

    /**
     * Gets the resource collection API of WorkflowRuns.
     * 
     * @return Resource collection API of WorkflowRuns.
     */
    public WorkflowRuns workflowRuns() {
        if (this.workflowRuns == null) {
            this.workflowRuns = new WorkflowRunsImpl(clientObject.getWorkflowRuns(), this);
        }
        return workflowRuns;
    }

    /**
     * Gets the resource collection API of WorkflowRunActions.
     * 
     * @return Resource collection API of WorkflowRunActions.
     */
    public WorkflowRunActions workflowRunActions() {
        if (this.workflowRunActions == null) {
            this.workflowRunActions = new WorkflowRunActionsImpl(clientObject.getWorkflowRunActions(), this);
        }
        return workflowRunActions;
    }

    /**
     * Gets the resource collection API of WorkflowRunActionRepetitionDefinitions.
     * 
     * @return Resource collection API of WorkflowRunActionRepetitionDefinitions.
     */
    public WorkflowRunActionRepetitionDefinitions workflowRunActionRepetitionDefinitions() {
        if (this.workflowRunActionRepetitionDefinitions == null) {
            this.workflowRunActionRepetitionDefinitions = new WorkflowRunActionRepetitionDefinitionsImpl(
                clientObject.getWorkflowRunActionRepetitionDefinitions(), this);
        }
        return workflowRunActionRepetitionDefinitions;
    }

    /**
     * Gets the resource collection API of RequestHistories.
     * 
     * @return Resource collection API of RequestHistories.
     */
    public RequestHistories requestHistories() {
        if (this.requestHistories == null) {
            this.requestHistories = new RequestHistoriesImpl(clientObject.getRequestHistories(), this);
        }
        return requestHistories;
    }

    /**
     * Gets the resource collection API of WorkflowRunActionRequestHistoriesOperations.
     * 
     * @return Resource collection API of WorkflowRunActionRequestHistoriesOperations.
     */
    public WorkflowRunActionRequestHistoriesOperations workflowRunActionRequestHistoriesOperations() {
        if (this.workflowRunActionRequestHistoriesOperations == null) {
            this.workflowRunActionRequestHistoriesOperations = new WorkflowRunActionRequestHistoriesOperationsImpl(
                clientObject.getWorkflowRunActionRequestHistoriesOperations(), this);
        }
        return workflowRunActionRequestHistoriesOperations;
    }

    /**
     * Gets the resource collection API of WorkflowRunActionScopeRepetitionsOperations.
     * 
     * @return Resource collection API of WorkflowRunActionScopeRepetitionsOperations.
     */
    public WorkflowRunActionScopeRepetitionsOperations workflowRunActionScopeRepetitionsOperations() {
        if (this.workflowRunActionScopeRepetitionsOperations == null) {
            this.workflowRunActionScopeRepetitionsOperations = new WorkflowRunActionScopeRepetitionsOperationsImpl(
                clientObject.getWorkflowRunActionScopeRepetitionsOperations(), this);
        }
        return workflowRunActionScopeRepetitionsOperations;
    }

    /**
     * Gets the resource collection API of WorkflowRunOperationsOperations.
     * 
     * @return Resource collection API of WorkflowRunOperationsOperations.
     */
    public WorkflowRunOperationsOperations workflowRunOperationsOperations() {
        if (this.workflowRunOperationsOperations == null) {
            this.workflowRunOperationsOperations
                = new WorkflowRunOperationsOperationsImpl(clientObject.getWorkflowRunOperationsOperations(), this);
        }
        return workflowRunOperationsOperations;
    }

    /**
     * Gets the resource collection API of WorkflowRunsOperations.
     * 
     * @return Resource collection API of WorkflowRunsOperations.
     */
    public WorkflowRunsOperations workflowRunsOperations() {
        if (this.workflowRunsOperations == null) {
            this.workflowRunsOperations
                = new WorkflowRunsOperationsImpl(clientObject.getWorkflowRunsOperations(), this);
        }
        return workflowRunsOperations;
    }

    /**
     * Gets the resource collection API of WorkflowTriggers.
     * 
     * @return Resource collection API of WorkflowTriggers.
     */
    public WorkflowTriggers workflowTriggers() {
        if (this.workflowTriggers == null) {
            this.workflowTriggers = new WorkflowTriggersImpl(clientObject.getWorkflowTriggers(), this);
        }
        return workflowTriggers;
    }

    /**
     * Gets the resource collection API of WorkflowTriggerHistories.
     * 
     * @return Resource collection API of WorkflowTriggerHistories.
     */
    public WorkflowTriggerHistories workflowTriggerHistories() {
        if (this.workflowTriggerHistories == null) {
            this.workflowTriggerHistories
                = new WorkflowTriggerHistoriesImpl(clientObject.getWorkflowTriggerHistories(), this);
        }
        return workflowTriggerHistories;
    }

    /**
     * Gets the resource collection API of WorkflowVersions.
     * 
     * @return Resource collection API of WorkflowVersions.
     */
    public WorkflowVersions workflowVersions() {
        if (this.workflowVersions == null) {
            this.workflowVersions = new WorkflowVersionsImpl(clientObject.getWorkflowVersions(), this);
        }
        return workflowVersions;
    }

    /**
     * Gets wrapped service client LogicManagementClient providing direct access to the underlying auto-generated API
     * implementation, based on Azure REST API.
     * 
     * @return Wrapped service client LogicManagementClient.
     */
    public LogicManagementClient serviceClient() {
        return this.clientObject;
    }
}
