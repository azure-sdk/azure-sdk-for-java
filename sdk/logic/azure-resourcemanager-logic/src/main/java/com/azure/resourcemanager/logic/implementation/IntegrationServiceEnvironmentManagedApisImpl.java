// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.logic.fluent.IntegrationServiceEnvironmentManagedApisClient;
import com.azure.resourcemanager.logic.fluent.models.IntegrationServiceEnvironmentManagedApiInner;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentManagedApi;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentManagedApis;

public final class IntegrationServiceEnvironmentManagedApisImpl implements IntegrationServiceEnvironmentManagedApis {
    private static final ClientLogger LOGGER = new ClientLogger(IntegrationServiceEnvironmentManagedApisImpl.class);

    private final IntegrationServiceEnvironmentManagedApisClient innerClient;

    private final com.azure.resourcemanager.logic.LogicManager serviceManager;

    public IntegrationServiceEnvironmentManagedApisImpl(IntegrationServiceEnvironmentManagedApisClient innerClient,
        com.azure.resourcemanager.logic.LogicManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<IntegrationServiceEnvironmentManagedApi> list(String integrationServiceEnvironmentName) {
        PagedIterable<IntegrationServiceEnvironmentManagedApiInner> inner
            = this.serviceClient().list(integrationServiceEnvironmentName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new IntegrationServiceEnvironmentManagedApiImpl(inner1, this.manager()));
    }

    public PagedIterable<IntegrationServiceEnvironmentManagedApi> list(String integrationServiceEnvironmentName,
        Context context) {
        PagedIterable<IntegrationServiceEnvironmentManagedApiInner> inner
            = this.serviceClient().list(integrationServiceEnvironmentName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new IntegrationServiceEnvironmentManagedApiImpl(inner1, this.manager()));
    }

    public Response<IntegrationServiceEnvironmentManagedApi> getWithResponse(String integrationServiceEnvironmentName,
        String apiName, Context context) {
        Response<IntegrationServiceEnvironmentManagedApiInner> inner
            = this.serviceClient().getWithResponse(integrationServiceEnvironmentName, apiName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new IntegrationServiceEnvironmentManagedApiImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IntegrationServiceEnvironmentManagedApi get(String integrationServiceEnvironmentName, String apiName) {
        IntegrationServiceEnvironmentManagedApiInner inner
            = this.serviceClient().get(integrationServiceEnvironmentName, apiName);
        if (inner != null) {
            return new IntegrationServiceEnvironmentManagedApiImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String integrationServiceEnvironmentName, String apiName) {
        this.serviceClient().delete(integrationServiceEnvironmentName, apiName);
    }

    public void delete(String integrationServiceEnvironmentName, String apiName, Context context) {
        this.serviceClient().delete(integrationServiceEnvironmentName, apiName, context);
    }

    public IntegrationServiceEnvironmentManagedApi getById(String id) {
        String integrationServiceEnvironmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "integrationServiceEnvironments");
        if (integrationServiceEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'integrationServiceEnvironments'.", id)));
        }
        String apiName = ResourceManagerUtils.getValueFromIdByName(id, "managedApis");
        if (apiName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedApis'.", id)));
        }
        return this.getWithResponse(integrationServiceEnvironmentName, apiName, Context.NONE).getValue();
    }

    public Response<IntegrationServiceEnvironmentManagedApi> getByIdWithResponse(String id, Context context) {
        String integrationServiceEnvironmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "integrationServiceEnvironments");
        if (integrationServiceEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'integrationServiceEnvironments'.", id)));
        }
        String apiName = ResourceManagerUtils.getValueFromIdByName(id, "managedApis");
        if (apiName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedApis'.", id)));
        }
        return this.getWithResponse(integrationServiceEnvironmentName, apiName, context);
    }

    public void deleteById(String id) {
        String integrationServiceEnvironmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "integrationServiceEnvironments");
        if (integrationServiceEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'integrationServiceEnvironments'.", id)));
        }
        String apiName = ResourceManagerUtils.getValueFromIdByName(id, "managedApis");
        if (apiName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedApis'.", id)));
        }
        this.delete(integrationServiceEnvironmentName, apiName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String integrationServiceEnvironmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "integrationServiceEnvironments");
        if (integrationServiceEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'integrationServiceEnvironments'.", id)));
        }
        String apiName = ResourceManagerUtils.getValueFromIdByName(id, "managedApis");
        if (apiName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedApis'.", id)));
        }
        this.delete(integrationServiceEnvironmentName, apiName, context);
    }

    private IntegrationServiceEnvironmentManagedApisClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.logic.LogicManager manager() {
        return this.serviceManager;
    }

    public IntegrationServiceEnvironmentManagedApiImpl define(String name) {
        return new IntegrationServiceEnvironmentManagedApiImpl(name, this.manager());
    }
}
