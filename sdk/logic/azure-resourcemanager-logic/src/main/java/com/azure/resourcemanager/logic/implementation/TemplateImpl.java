// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.logic.fluent.models.TemplateInner;
import com.azure.resourcemanager.logic.fluent.models.WorkflowInner;
import com.azure.resourcemanager.logic.models.GenerateUpgradedDefinitionParameters;
import com.azure.resourcemanager.logic.models.GetCallbackUrlParameters;
import com.azure.resourcemanager.logic.models.RegenerateActionParameter;
import com.azure.resourcemanager.logic.models.Template;
import com.azure.resourcemanager.logic.models.TemplateProperties;
import com.azure.resourcemanager.logic.models.TemplateUpdate;
import com.azure.resourcemanager.logic.models.WorkflowReference;
import com.azure.resourcemanager.logic.models.WorkflowTriggerCallbackUrl;
import java.util.Collections;
import java.util.Map;

public final class TemplateImpl implements Template, Template.Definition, Template.Update {
    private TemplateInner innerObject;

    private final com.azure.resourcemanager.logic.LogicManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public TemplateProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public TemplateInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.logic.LogicManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String templateName;

    private TemplateUpdate updateProperties;

    public TemplateImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Template create() {
        this.innerObject = serviceManager.serviceClient()
            .getTemplates()
            .createOrUpdateWithResponse(resourceGroupName, templateName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public Template create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getTemplates()
            .createOrUpdateWithResponse(resourceGroupName, templateName, this.innerModel(), context)
            .getValue();
        return this;
    }

    TemplateImpl(String name, com.azure.resourcemanager.logic.LogicManager serviceManager) {
        this.innerObject = new TemplateInner();
        this.serviceManager = serviceManager;
        this.templateName = name;
    }

    public TemplateImpl update() {
        this.updateProperties = new TemplateUpdate();
        return this;
    }

    public Template apply() {
        this.innerObject = serviceManager.serviceClient()
            .getTemplates()
            .updateWithResponse(resourceGroupName, templateName, updateProperties, Context.NONE)
            .getValue();
        return this;
    }

    public Template apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getTemplates()
            .updateWithResponse(resourceGroupName, templateName, updateProperties, context)
            .getValue();
        return this;
    }

    TemplateImpl(TemplateInner innerObject, com.azure.resourcemanager.logic.LogicManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.templateName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "templates");
    }

    public Template refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getTemplates()
            .getByResourceGroupWithResponse(resourceGroupName, templateName, Context.NONE)
            .getValue();
        return this;
    }

    public Template refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getTemplates()
            .getByResourceGroupWithResponse(resourceGroupName, templateName, context)
            .getValue();
        return this;
    }

    public Response<Void> disableWithResponse(Context context) {
        return serviceManager.templates().disableWithResponse(resourceGroupName, templateName, context);
    }

    public void disable() {
        serviceManager.templates().disable(resourceGroupName, templateName);
    }

    public Response<Void> enableWithResponse(Context context) {
        return serviceManager.templates().enableWithResponse(resourceGroupName, templateName, context);
    }

    public void enable() {
        serviceManager.templates().enable(resourceGroupName, templateName);
    }

    public Response<Map<String, Object>>
        generateUpgradedDefinitionWithResponse(GenerateUpgradedDefinitionParameters body, Context context) {
        return serviceManager.templates()
            .generateUpgradedDefinitionWithResponse(resourceGroupName, templateName, body, context);
    }

    public Map<String, Object> generateUpgradedDefinition(GenerateUpgradedDefinitionParameters body) {
        return serviceManager.templates().generateUpgradedDefinition(resourceGroupName, templateName, body);
    }

    public Response<WorkflowTriggerCallbackUrl> listCallbackUrlWithResponse(GetCallbackUrlParameters body,
        Context context) {
        return serviceManager.templates().listCallbackUrlWithResponse(resourceGroupName, templateName, body, context);
    }

    public WorkflowTriggerCallbackUrl listCallbackUrl(GetCallbackUrlParameters body) {
        return serviceManager.templates().listCallbackUrl(resourceGroupName, templateName, body);
    }

    public Response<Map<String, Object>> listSwaggerWithResponse(Context context) {
        return serviceManager.templates().listSwaggerWithResponse(resourceGroupName, templateName, context);
    }

    public Map<String, Object> listSwagger() {
        return serviceManager.templates().listSwagger(resourceGroupName, templateName);
    }

    public void move(WorkflowReference body) {
        serviceManager.templates().move(resourceGroupName, templateName, body);
    }

    public void move(WorkflowReference body, Context context) {
        serviceManager.templates().move(resourceGroupName, templateName, body, context);
    }

    public Response<Void> regenerateAccessKeyWithResponse(RegenerateActionParameter body, Context context) {
        return serviceManager.templates()
            .regenerateAccessKeyWithResponse(resourceGroupName, templateName, body, context);
    }

    public void regenerateAccessKey(RegenerateActionParameter body) {
        serviceManager.templates().regenerateAccessKey(resourceGroupName, templateName, body);
    }

    public Response<Void> validateByResourceGroupWithResponse(WorkflowInner body, Context context) {
        return serviceManager.templates()
            .validateByResourceGroupWithResponse(resourceGroupName, templateName, body, context);
    }

    public void validateByResourceGroup(WorkflowInner body) {
        serviceManager.templates().validateByResourceGroup(resourceGroupName, templateName, body);
    }

    public TemplateImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public TemplateImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public TemplateImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public TemplateImpl withProperties(TemplateProperties properties) {
        if (isInCreateMode()) {
            this.innerModel().withProperties(properties);
            return this;
        } else {
            this.updateProperties.withProperties(properties);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
