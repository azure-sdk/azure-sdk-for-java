// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.logic.fluent.WorkflowRunActionRepetitionsClient;
import com.azure.resourcemanager.logic.fluent.models.ExpressionTracesInner;
import com.azure.resourcemanager.logic.fluent.models.WorkflowRunActionRepetitionDefinitionInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in WorkflowRunActionRepetitionsClient.
 */
public final class WorkflowRunActionRepetitionsClientImpl implements WorkflowRunActionRepetitionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final WorkflowRunActionRepetitionsService service;

    /**
     * The service client containing this operation class.
     */
    private final LogicManagementClientImpl client;

    /**
     * Initializes an instance of WorkflowRunActionRepetitionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    WorkflowRunActionRepetitionsClientImpl(LogicManagementClientImpl client) {
        this.service = RestProxy.create(WorkflowRunActionRepetitionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for LogicManagementClientWorkflowRunActionRepetitions to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "LogicManagementClien")
    public interface WorkflowRunActionRepetitionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WorkflowRunActionRepetitionDefinitionInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workflowName") String workflowName,
            @PathParam("runName") String runName, @PathParam("actionName") String actionName,
            @PathParam("repetitionName") String repetitionName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/listExpressionTraces")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExpressionTracesInner>> listExpressionTraces(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workflowName") String workflowName,
            @PathParam("runName") String runName, @PathParam("actionName") String actionName,
            @PathParam("repetitionName") String repetitionName, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a workflow run action repetition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The name of the Workflow.
     * @param runName The name of the WorkflowRun.
     * @param actionName The name of the WorkflowRunAction.
     * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a workflow run action repetition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WorkflowRunActionRepetitionDefinitionInner>> getWithResponseAsync(String resourceGroupName,
        String workflowName, String runName, String actionName, String repetitionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workflowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workflowName is required and cannot be null."));
        }
        if (runName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runName is required and cannot be null."));
        }
        if (actionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter actionName is required and cannot be null."));
        }
        if (repetitionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter repetitionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, workflowName, runName, actionName, repetitionName,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a workflow run action repetition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The name of the Workflow.
     * @param runName The name of the WorkflowRun.
     * @param actionName The name of the WorkflowRunAction.
     * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a workflow run action repetition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WorkflowRunActionRepetitionDefinitionInner>> getWithResponseAsync(String resourceGroupName,
        String workflowName, String runName, String actionName, String repetitionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workflowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workflowName is required and cannot be null."));
        }
        if (runName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runName is required and cannot be null."));
        }
        if (actionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter actionName is required and cannot be null."));
        }
        if (repetitionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter repetitionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, workflowName, runName, actionName, repetitionName, accept, context);
    }

    /**
     * Get a workflow run action repetition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The name of the Workflow.
     * @param runName The name of the WorkflowRun.
     * @param actionName The name of the WorkflowRunAction.
     * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a workflow run action repetition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WorkflowRunActionRepetitionDefinitionInner> getAsync(String resourceGroupName, String workflowName,
        String runName, String actionName, String repetitionName) {
        return getWithResponseAsync(resourceGroupName, workflowName, runName, actionName, repetitionName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a workflow run action repetition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The name of the Workflow.
     * @param runName The name of the WorkflowRun.
     * @param actionName The name of the WorkflowRunAction.
     * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a workflow run action repetition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<WorkflowRunActionRepetitionDefinitionInner> getWithResponse(String resourceGroupName,
        String workflowName, String runName, String actionName, String repetitionName, Context context) {
        return getWithResponseAsync(resourceGroupName, workflowName, runName, actionName, repetitionName, context)
            .block();
    }

    /**
     * Get a workflow run action repetition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The name of the Workflow.
     * @param runName The name of the WorkflowRun.
     * @param actionName The name of the WorkflowRunAction.
     * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a workflow run action repetition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WorkflowRunActionRepetitionDefinitionInner get(String resourceGroupName, String workflowName, String runName,
        String actionName, String repetitionName) {
        return getWithResponse(resourceGroupName, workflowName, runName, actionName, repetitionName, Context.NONE)
            .getValue();
    }

    /**
     * Lists a workflow run expression trace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The name of the Workflow.
     * @param runName The name of the WorkflowRun.
     * @param actionName The name of the WorkflowRunAction.
     * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the expression traces along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExpressionTracesInner>> listExpressionTracesWithResponseAsync(String resourceGroupName,
        String workflowName, String runName, String actionName, String repetitionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workflowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workflowName is required and cannot be null."));
        }
        if (runName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runName is required and cannot be null."));
        }
        if (actionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter actionName is required and cannot be null."));
        }
        if (repetitionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter repetitionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listExpressionTraces(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, workflowName, runName, actionName, repetitionName,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists a workflow run expression trace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The name of the Workflow.
     * @param runName The name of the WorkflowRun.
     * @param actionName The name of the WorkflowRunAction.
     * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the expression traces along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExpressionTracesInner>> listExpressionTracesWithResponseAsync(String resourceGroupName,
        String workflowName, String runName, String actionName, String repetitionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workflowName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workflowName is required and cannot be null."));
        }
        if (runName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runName is required and cannot be null."));
        }
        if (actionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter actionName is required and cannot be null."));
        }
        if (repetitionName == null) {
            return Mono.error(new IllegalArgumentException("Parameter repetitionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listExpressionTraces(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, workflowName, runName, actionName, repetitionName,
            accept, context);
    }

    /**
     * Lists a workflow run expression trace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The name of the Workflow.
     * @param runName The name of the WorkflowRun.
     * @param actionName The name of the WorkflowRunAction.
     * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the expression traces on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExpressionTracesInner> listExpressionTracesAsync(String resourceGroupName, String workflowName,
        String runName, String actionName, String repetitionName) {
        return listExpressionTracesWithResponseAsync(resourceGroupName, workflowName, runName, actionName,
            repetitionName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Lists a workflow run expression trace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The name of the Workflow.
     * @param runName The name of the WorkflowRun.
     * @param actionName The name of the WorkflowRunAction.
     * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the expression traces along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExpressionTracesInner> listExpressionTracesWithResponse(String resourceGroupName,
        String workflowName, String runName, String actionName, String repetitionName, Context context) {
        return listExpressionTracesWithResponseAsync(resourceGroupName, workflowName, runName, actionName,
            repetitionName, context).block();
    }

    /**
     * Lists a workflow run expression trace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workflowName The name of the Workflow.
     * @param runName The name of the WorkflowRun.
     * @param actionName The name of the WorkflowRunAction.
     * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the expression traces.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExpressionTracesInner listExpressionTraces(String resourceGroupName, String workflowName, String runName,
        String actionName, String repetitionName) {
        return listExpressionTracesWithResponse(resourceGroupName, workflowName, runName, actionName, repetitionName,
            Context.NONE).getValue();
    }
}
