// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A collection of assembly definitions.
 */
@Fluent
public final class AssemblyCollectionInner implements JsonSerializable<AssemblyCollectionInner> {
    /*
     * The value property.
     */
    private List<AssemblyDefinitionInner> value;

    /**
     * Creates an instance of AssemblyCollectionInner class.
     */
    public AssemblyCollectionInner() {
    }

    /**
     * Get the value property: The value property.
     * 
     * @return the value value.
     */
    public List<AssemblyDefinitionInner> value() {
        return this.value;
    }

    /**
     * Set the value property: The value property.
     * 
     * @param value the value value to set.
     * @return the AssemblyCollectionInner object itself.
     */
    public AssemblyCollectionInner withValue(List<AssemblyDefinitionInner> value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssemblyCollectionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssemblyCollectionInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssemblyCollectionInner.
     */
    public static AssemblyCollectionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssemblyCollectionInner deserializedAssemblyCollectionInner = new AssemblyCollectionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    List<AssemblyDefinitionInner> value
                        = reader.readArray(reader1 -> AssemblyDefinitionInner.fromJson(reader1));
                    deserializedAssemblyCollectionInner.value = value;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssemblyCollectionInner;
        });
    }
}
