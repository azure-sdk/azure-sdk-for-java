// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.logic.fluent.models.WorkflowInner;
import java.util.Map;

/**
 * Resource collection API of Templates.
 */
public interface Templates {
    /**
     * Gets a list of templates by subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of templates by subscription as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Template> list();

    /**
     * Gets a list of templates by subscription.
     * 
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation. Options for filters include: State, Trigger, and
     * ReferencedResourceId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of templates by subscription as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Template> list(Integer top, String filter, Context context);

    /**
     * Gets a list of templates by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of templates by resource group as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Template> listByResourceGroup(String resourceGroupName);

    /**
     * Gets a list of templates by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation. Options for filters include: State, Trigger, and
     * ReferencedResourceId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of templates by resource group as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Template> listByResourceGroup(String resourceGroupName, Integer top, String filter, Context context);

    /**
     * Gets a template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a template along with {@link Response}.
     */
    Response<Template> getByResourceGroupWithResponse(String resourceGroupName, String templateName, Context context);

    /**
     * Gets a template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a template.
     */
    Template getByResourceGroup(String resourceGroupName, String templateName);

    /**
     * Deletes a template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String templateName, Context context);

    /**
     * Deletes a template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String templateName);

    /**
     * Disables a template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> disableWithResponse(String resourceGroupName, String templateName, Context context);

    /**
     * Disables a template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void disable(String resourceGroupName, String templateName);

    /**
     * Enables a template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> enableWithResponse(String resourceGroupName, String templateName, Context context);

    /**
     * Enables a template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void enable(String resourceGroupName, String templateName);

    /**
     * Generates the upgraded definition for a template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param body Parameters for generating an upgraded definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dictionary of &lt;any&gt; along with {@link Response}.
     */
    Response<Map<String, Object>> generateUpgradedDefinitionWithResponse(String resourceGroupName, String templateName,
        GenerateUpgradedDefinitionParameters body, Context context);

    /**
     * Generates the upgraded definition for a template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param body Parameters for generating an upgraded definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dictionary of &lt;any&gt;.
     */
    Map<String, Object> generateUpgradedDefinition(String resourceGroupName, String templateName,
        GenerateUpgradedDefinitionParameters body);

    /**
     * Get the template callback Url.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param body Which callback url to list.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the template callback Url along with {@link Response}.
     */
    Response<WorkflowTriggerCallbackUrl> listCallbackUrlWithResponse(String resourceGroupName, String templateName,
        GetCallbackUrlParameters body, Context context);

    /**
     * Get the template callback Url.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param body Which callback url to list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the template callback Url.
     */
    WorkflowTriggerCallbackUrl listCallbackUrl(String resourceGroupName, String templateName,
        GetCallbackUrlParameters body);

    /**
     * Gets an OpenAPI definition for the template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an OpenAPI definition for the template along with {@link Response}.
     */
    Response<Map<String, Object>> listSwaggerWithResponse(String resourceGroupName, String templateName,
        Context context);

    /**
     * Gets an OpenAPI definition for the template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an OpenAPI definition for the template.
     */
    Map<String, Object> listSwagger(String resourceGroupName, String templateName);

    /**
     * Moves an existing template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param body The template to move.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void move(String resourceGroupName, String templateName, WorkflowReference body);

    /**
     * Moves an existing template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param body The template to move.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void move(String resourceGroupName, String templateName, WorkflowReference body, Context context);

    /**
     * Regenerates the callback URL access key for request triggers.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param body The access key type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> regenerateAccessKeyWithResponse(String resourceGroupName, String templateName,
        RegenerateActionParameter body, Context context);

    /**
     * Regenerates the callback URL access key for request triggers.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param body The access key type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void regenerateAccessKey(String resourceGroupName, String templateName, RegenerateActionParameter body);

    /**
     * Validates the template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param body The template.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> validateByResourceGroupWithResponse(String resourceGroupName, String templateName,
        WorkflowInner body, Context context);

    /**
     * Validates the template.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param templateName The template name.
     * @param body The template.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void validateByResourceGroup(String resourceGroupName, String templateName, WorkflowInner body);

    /**
     * Gets a template.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a template along with {@link Response}.
     */
    Template getById(String id);

    /**
     * Gets a template.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a template along with {@link Response}.
     */
    Response<Template> getByIdWithResponse(String id, Context context);

    /**
     * Deletes a template.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes a template.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Template resource.
     * 
     * @param name resource name.
     * @return the first stage of the new Template definition.
     */
    Template.DefinitionStages.Blank define(String name);
}
