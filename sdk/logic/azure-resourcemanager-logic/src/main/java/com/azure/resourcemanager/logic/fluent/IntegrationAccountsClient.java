// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.logic.fluent.models.CallbackUrlInner;
import com.azure.resourcemanager.logic.fluent.models.IntegrationAccountInner;
import com.azure.resourcemanager.logic.fluent.models.KeyVaultKeyCollectionInner;
import com.azure.resourcemanager.logic.models.GetCallbackUrlParameters;
import com.azure.resourcemanager.logic.models.ListKeyVaultKeysDefinition;
import com.azure.resourcemanager.logic.models.RegenerateActionParameter;
import com.azure.resourcemanager.logic.models.TrackingEventsDefinition;

/**
 * An instance of this class provides access to all the operations defined in IntegrationAccountsClient.
 */
public interface IntegrationAccountsClient {
    /**
     * Gets a list of integration accounts by subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of integration accounts by subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<IntegrationAccountInner> list();

    /**
     * Gets a list of integration accounts by subscription.
     * 
     * @param top The number of items to be included in the result.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of integration accounts by subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<IntegrationAccountInner> list(Integer top, Context context);

    /**
     * Gets a list of integration accounts by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of integration accounts by resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<IntegrationAccountInner> listByResourceGroup(String resourceGroupName);

    /**
     * Gets a list of integration accounts by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The number of items to be included in the result.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of integration accounts by resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<IntegrationAccountInner> listByResourceGroup(String resourceGroupName, Integer top, Context context);

    /**
     * Gets an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<IntegrationAccountInner> getByResourceGroupWithResponse(String resourceGroupName,
        String integrationAccountName, Context context);

    /**
     * Gets an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an integration account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    IntegrationAccountInner getByResourceGroup(String resourceGroupName, String integrationAccountName);

    /**
     * Creates or updates an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param resource The integration account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<IntegrationAccountInner> createOrUpdateWithResponse(String resourceGroupName,
        String integrationAccountName, IntegrationAccountInner resource, Context context);

    /**
     * Creates or updates an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param resource The integration account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    IntegrationAccountInner createOrUpdate(String resourceGroupName, String integrationAccountName,
        IntegrationAccountInner resource);

    /**
     * Updates an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param properties The integration account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<IntegrationAccountInner> updateWithResponse(String resourceGroupName, String integrationAccountName,
        IntegrationAccountInner properties, Context context);

    /**
     * Updates an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param properties The integration account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    IntegrationAccountInner update(String resourceGroupName, String integrationAccountName,
        IntegrationAccountInner properties);

    /**
     * Deletes an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String integrationAccountName, Context context);

    /**
     * Deletes an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String integrationAccountName);

    /**
     * Gets the integration account callback URL.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param body The callback URL parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration account callback URL along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CallbackUrlInner> listCallbackUrlWithResponse(String resourceGroupName, String integrationAccountName,
        GetCallbackUrlParameters body, Context context);

    /**
     * Gets the integration account callback URL.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param body The callback URL parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration account callback URL.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CallbackUrlInner listCallbackUrl(String resourceGroupName, String integrationAccountName,
        GetCallbackUrlParameters body);

    /**
     * Gets the integration account's Key Vault keys.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param body The key vault parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration account's Key Vault keys along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<KeyVaultKeyCollectionInner> listKeyVaultKeysWithResponse(String resourceGroupName,
        String integrationAccountName, ListKeyVaultKeysDefinition body, Context context);

    /**
     * Gets the integration account's Key Vault keys.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param body The key vault parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration account's Key Vault keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    KeyVaultKeyCollectionInner listKeyVaultKeys(String resourceGroupName, String integrationAccountName,
        ListKeyVaultKeysDefinition body);

    /**
     * Logs the integration account's tracking events.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param body The callback URL parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> logTrackingEventsWithResponse(String resourceGroupName, String integrationAccountName,
        TrackingEventsDefinition body, Context context);

    /**
     * Logs the integration account's tracking events.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param body The callback URL parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void logTrackingEvents(String resourceGroupName, String integrationAccountName, TrackingEventsDefinition body);

    /**
     * Regenerates the integration account access key.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param body The access key type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<IntegrationAccountInner> regenerateAccessKeyWithResponse(String resourceGroupName,
        String integrationAccountName, RegenerateActionParameter body, Context context);

    /**
     * Regenerates the integration account access key.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param body The access key type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    IntegrationAccountInner regenerateAccessKey(String resourceGroupName, String integrationAccountName,
        RegenerateActionParameter body);
}
