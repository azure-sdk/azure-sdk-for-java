// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.logic.fluent.IntegrationServiceEnvironmentManagedApisClient;
import com.azure.resourcemanager.logic.fluent.models.IntegrationServiceEnvironmentManagedApiInner;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentManagedApiListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * IntegrationServiceEnvironmentManagedApisClient.
 */
public final class IntegrationServiceEnvironmentManagedApisClientImpl
    implements IntegrationServiceEnvironmentManagedApisClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final IntegrationServiceEnvironmentManagedApisService service;

    /**
     * The service client containing this operation class.
     */
    private final LogicManagementClientImpl client;

    /**
     * Initializes an instance of IntegrationServiceEnvironmentManagedApisClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    IntegrationServiceEnvironmentManagedApisClientImpl(LogicManagementClientImpl client) {
        this.service = RestProxy.create(IntegrationServiceEnvironmentManagedApisService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for LogicManagementClientIntegrationServiceEnvironmentManagedApis to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "LogicManagementClien")
    public interface IntegrationServiceEnvironmentManagedApisService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IntegrationServiceEnvironmentManagedApiListResult>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("integrationServiceEnvironmentName") String integrationServiceEnvironmentName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IntegrationServiceEnvironmentManagedApiInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("integrationServiceEnvironmentName") String integrationServiceEnvironmentName,
            @PathParam("apiName") String apiName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> put(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("integrationServiceEnvironmentName") String integrationServiceEnvironmentName,
            @PathParam("apiName") String apiName,
            @BodyParam("application/json") IntegrationServiceEnvironmentManagedApiInner resource,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("integrationServiceEnvironmentName") String integrationServiceEnvironmentName,
            @PathParam("apiName") String apiName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IntegrationServiceEnvironmentManagedApiListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets the integration service environment managed Apis.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed Apis along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IntegrationServiceEnvironmentManagedApiInner>>
        listSinglePageAsync(String integrationServiceEnvironmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (integrationServiceEnvironmentName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter integrationServiceEnvironmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), integrationServiceEnvironmentName, accept, context))
            .<PagedResponse<IntegrationServiceEnvironmentManagedApiInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the integration service environment managed Apis.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed Apis along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IntegrationServiceEnvironmentManagedApiInner>>
        listSinglePageAsync(String integrationServiceEnvironmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (integrationServiceEnvironmentName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter integrationServiceEnvironmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                integrationServiceEnvironmentName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets the integration service environment managed Apis.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed Apis as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<IntegrationServiceEnvironmentManagedApiInner>
        listAsync(String integrationServiceEnvironmentName) {
        return new PagedFlux<>(() -> listSinglePageAsync(integrationServiceEnvironmentName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the integration service environment managed Apis.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed Apis as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<IntegrationServiceEnvironmentManagedApiInner> listAsync(String integrationServiceEnvironmentName,
        Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(integrationServiceEnvironmentName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the integration service environment managed Apis.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed Apis as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<IntegrationServiceEnvironmentManagedApiInner> list(String integrationServiceEnvironmentName) {
        return new PagedIterable<>(listAsync(integrationServiceEnvironmentName));
    }

    /**
     * Gets the integration service environment managed Apis.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed Apis as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<IntegrationServiceEnvironmentManagedApiInner> list(String integrationServiceEnvironmentName,
        Context context) {
        return new PagedIterable<>(listAsync(integrationServiceEnvironmentName, context));
    }

    /**
     * Gets the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed Api along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IntegrationServiceEnvironmentManagedApiInner>>
        getWithResponseAsync(String integrationServiceEnvironmentName, String apiName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (integrationServiceEnvironmentName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter integrationServiceEnvironmentName is required and cannot be null."));
        }
        if (apiName == null) {
            return Mono.error(new IllegalArgumentException("Parameter apiName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), integrationServiceEnvironmentName, apiName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed Api along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IntegrationServiceEnvironmentManagedApiInner>>
        getWithResponseAsync(String integrationServiceEnvironmentName, String apiName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (integrationServiceEnvironmentName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter integrationServiceEnvironmentName is required and cannot be null."));
        }
        if (apiName == null) {
            return Mono.error(new IllegalArgumentException("Parameter apiName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            integrationServiceEnvironmentName, apiName, accept, context);
    }

    /**
     * Gets the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed Api on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IntegrationServiceEnvironmentManagedApiInner> getAsync(String integrationServiceEnvironmentName,
        String apiName) {
        return getWithResponseAsync(integrationServiceEnvironmentName, apiName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed Api along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IntegrationServiceEnvironmentManagedApiInner>
        getWithResponse(String integrationServiceEnvironmentName, String apiName, Context context) {
        return getWithResponseAsync(integrationServiceEnvironmentName, apiName, context).block();
    }

    /**
     * Gets the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed Api.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IntegrationServiceEnvironmentManagedApiInner get(String integrationServiceEnvironmentName, String apiName) {
        return getWithResponse(integrationServiceEnvironmentName, apiName, Context.NONE).getValue();
    }

    /**
     * Puts the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param resource The integration service environment managed api.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed api along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> putWithResponseAsync(String integrationServiceEnvironmentName,
        String apiName, IntegrationServiceEnvironmentManagedApiInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (integrationServiceEnvironmentName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter integrationServiceEnvironmentName is required and cannot be null."));
        }
        if (apiName == null) {
            return Mono.error(new IllegalArgumentException("Parameter apiName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.put(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), integrationServiceEnvironmentName, apiName, resource, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Puts the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param resource The integration service environment managed api.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed api along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> putWithResponseAsync(String integrationServiceEnvironmentName,
        String apiName, IntegrationServiceEnvironmentManagedApiInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (integrationServiceEnvironmentName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter integrationServiceEnvironmentName is required and cannot be null."));
        }
        if (apiName == null) {
            return Mono.error(new IllegalArgumentException("Parameter apiName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.put(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            integrationServiceEnvironmentName, apiName, resource, accept, context);
    }

    /**
     * Puts the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param resource The integration service environment managed api.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the integration service environment managed api.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<IntegrationServiceEnvironmentManagedApiInner>, IntegrationServiceEnvironmentManagedApiInner>
        beginPutAsync(String integrationServiceEnvironmentName, String apiName,
            IntegrationServiceEnvironmentManagedApiInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = putWithResponseAsync(integrationServiceEnvironmentName, apiName, resource);
        return this.client
            .<IntegrationServiceEnvironmentManagedApiInner, IntegrationServiceEnvironmentManagedApiInner>getLroResult(
                mono, this.client.getHttpPipeline(), IntegrationServiceEnvironmentManagedApiInner.class,
                IntegrationServiceEnvironmentManagedApiInner.class, this.client.getContext());
    }

    /**
     * Puts the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param resource The integration service environment managed api.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the integration service environment managed api.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<IntegrationServiceEnvironmentManagedApiInner>, IntegrationServiceEnvironmentManagedApiInner>
        beginPutAsync(String integrationServiceEnvironmentName, String apiName,
            IntegrationServiceEnvironmentManagedApiInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = putWithResponseAsync(integrationServiceEnvironmentName, apiName, resource, context);
        return this.client
            .<IntegrationServiceEnvironmentManagedApiInner, IntegrationServiceEnvironmentManagedApiInner>getLroResult(
                mono, this.client.getHttpPipeline(), IntegrationServiceEnvironmentManagedApiInner.class,
                IntegrationServiceEnvironmentManagedApiInner.class, context);
    }

    /**
     * Puts the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param resource The integration service environment managed api.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the integration service environment managed api.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<IntegrationServiceEnvironmentManagedApiInner>, IntegrationServiceEnvironmentManagedApiInner>
        beginPut(String integrationServiceEnvironmentName, String apiName,
            IntegrationServiceEnvironmentManagedApiInner resource) {
        return this.beginPutAsync(integrationServiceEnvironmentName, apiName, resource).getSyncPoller();
    }

    /**
     * Puts the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param resource The integration service environment managed api.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the integration service environment managed api.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<IntegrationServiceEnvironmentManagedApiInner>, IntegrationServiceEnvironmentManagedApiInner>
        beginPut(String integrationServiceEnvironmentName, String apiName,
            IntegrationServiceEnvironmentManagedApiInner resource, Context context) {
        return this.beginPutAsync(integrationServiceEnvironmentName, apiName, resource, context).getSyncPoller();
    }

    /**
     * Puts the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param resource The integration service environment managed api.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed api on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IntegrationServiceEnvironmentManagedApiInner> putAsync(String integrationServiceEnvironmentName,
        String apiName, IntegrationServiceEnvironmentManagedApiInner resource) {
        return beginPutAsync(integrationServiceEnvironmentName, apiName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Puts the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param resource The integration service environment managed api.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed api on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IntegrationServiceEnvironmentManagedApiInner> putAsync(String integrationServiceEnvironmentName,
        String apiName, IntegrationServiceEnvironmentManagedApiInner resource, Context context) {
        return beginPutAsync(integrationServiceEnvironmentName, apiName, resource, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Puts the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param resource The integration service environment managed api.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed api.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IntegrationServiceEnvironmentManagedApiInner put(String integrationServiceEnvironmentName, String apiName,
        IntegrationServiceEnvironmentManagedApiInner resource) {
        return putAsync(integrationServiceEnvironmentName, apiName, resource).block();
    }

    /**
     * Puts the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param resource The integration service environment managed api.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the integration service environment managed api.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IntegrationServiceEnvironmentManagedApiInner put(String integrationServiceEnvironmentName, String apiName,
        IntegrationServiceEnvironmentManagedApiInner resource, Context context) {
        return putAsync(integrationServiceEnvironmentName, apiName, resource, context).block();
    }

    /**
     * Deletes the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String integrationServiceEnvironmentName,
        String apiName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (integrationServiceEnvironmentName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter integrationServiceEnvironmentName is required and cannot be null."));
        }
        if (apiName == null) {
            return Mono.error(new IllegalArgumentException("Parameter apiName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), integrationServiceEnvironmentName, apiName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String integrationServiceEnvironmentName,
        String apiName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (integrationServiceEnvironmentName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter integrationServiceEnvironmentName is required and cannot be null."));
        }
        if (apiName == null) {
            return Mono.error(new IllegalArgumentException("Parameter apiName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            integrationServiceEnvironmentName, apiName, accept, context);
    }

    /**
     * Deletes the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String integrationServiceEnvironmentName,
        String apiName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(integrationServiceEnvironmentName, apiName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String integrationServiceEnvironmentName,
        String apiName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(integrationServiceEnvironmentName, apiName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String integrationServiceEnvironmentName, String apiName) {
        return this.beginDeleteAsync(integrationServiceEnvironmentName, apiName).getSyncPoller();
    }

    /**
     * Deletes the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String integrationServiceEnvironmentName, String apiName,
        Context context) {
        return this.beginDeleteAsync(integrationServiceEnvironmentName, apiName, context).getSyncPoller();
    }

    /**
     * Deletes the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String integrationServiceEnvironmentName, String apiName) {
        return beginDeleteAsync(integrationServiceEnvironmentName, apiName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String integrationServiceEnvironmentName, String apiName, Context context) {
        return beginDeleteAsync(integrationServiceEnvironmentName, apiName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String integrationServiceEnvironmentName, String apiName) {
        deleteAsync(integrationServiceEnvironmentName, apiName).block();
    }

    /**
     * Deletes the integration service environment managed Api.
     * 
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String integrationServiceEnvironmentName, String apiName, Context context) {
        deleteAsync(integrationServiceEnvironmentName, apiName, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a IntegrationServiceEnvironmentManagedApi list operation along with {@link PagedResponse}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IntegrationServiceEnvironmentManagedApiInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<IntegrationServiceEnvironmentManagedApiInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a IntegrationServiceEnvironmentManagedApi list operation along with {@link PagedResponse}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IntegrationServiceEnvironmentManagedApiInner>> listNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
