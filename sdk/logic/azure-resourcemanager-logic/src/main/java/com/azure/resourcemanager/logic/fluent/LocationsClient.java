// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.logic.fluent.models.WorkflowExportResultInner;
import com.azure.resourcemanager.logic.fluent.models.WorkflowExportValidityResultInner;
import com.azure.resourcemanager.logic.models.WorkflowExportRequest;

/** An instance of this class provides access to all the operations defined in LocationsClient. */
public interface LocationsClient {
    /**
     * Validates the workflow export.
     *
     * @param location The name of Azure region.
     * @param workflowExportRequest The workflow export request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the workflow export validity result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<WorkflowExportValidityResultInner> validateWorkflowExportWithResponse(
        String location, WorkflowExportRequest workflowExportRequest, Context context);

    /**
     * Validates the workflow export.
     *
     * @param location The name of Azure region.
     * @param workflowExportRequest The workflow export request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the workflow export validity result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkflowExportValidityResultInner validateWorkflowExport(
        String location, WorkflowExportRequest workflowExportRequest);

    /**
     * Executes the workflow export.
     *
     * @param location The name of Azure region.
     * @param workflowExportRequest The workflow export request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the workflow export result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<WorkflowExportResultInner> workflowExportWithResponse(
        String location, WorkflowExportRequest workflowExportRequest, Context context);

    /**
     * Executes the workflow export.
     *
     * @param location The name of Azure region.
     * @param workflowExportRequest The workflow export request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the workflow export result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkflowExportResultInner workflowExport(String location, WorkflowExportRequest workflowExportRequest);
}
