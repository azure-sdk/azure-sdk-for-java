// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.logic.fluent.models.IntegrationServiceEnvironmentInner;
import com.azure.resourcemanager.logic.models.FlowEndpointsConfiguration;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmenEncryptionConfiguration;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironment;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentSku;
import com.azure.resourcemanager.logic.models.ManagedServiceIdentity;
import com.azure.resourcemanager.logic.models.NetworkConfiguration;
import com.azure.resourcemanager.logic.models.WorkflowProvisioningState;
import com.azure.resourcemanager.logic.models.WorkflowState;
import java.util.Collections;
import java.util.Map;

public final class IntegrationServiceEnvironmentImpl implements IntegrationServiceEnvironment,
    IntegrationServiceEnvironment.Definition, IntegrationServiceEnvironment.Update {
    private IntegrationServiceEnvironmentInner innerObject;

    private final com.azure.resourcemanager.logic.LogicManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public IntegrationServiceEnvironmentSku sku() {
        return this.innerModel().sku();
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public WorkflowProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public WorkflowState state() {
        return this.innerModel().state();
    }

    public String integrationServiceEnvironmentId() {
        return this.innerModel().integrationServiceEnvironmentId();
    }

    public FlowEndpointsConfiguration endpointsConfiguration() {
        return this.innerModel().endpointsConfiguration();
    }

    public NetworkConfiguration networkConfiguration() {
        return this.innerModel().networkConfiguration();
    }

    public IntegrationServiceEnvironmenEncryptionConfiguration encryptionConfiguration() {
        return this.innerModel().encryptionConfiguration();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public IntegrationServiceEnvironmentInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.logic.LogicManager manager() {
        return this.serviceManager;
    }

    private String integrationServiceEnvironmentName;

    public IntegrationServiceEnvironment create() {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationServiceEnvironments()
            .createOrUpdate(integrationServiceEnvironmentName, this.innerModel(), Context.NONE);
        return this;
    }

    public IntegrationServiceEnvironment create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationServiceEnvironments()
            .createOrUpdate(integrationServiceEnvironmentName, this.innerModel(), context);
        return this;
    }

    IntegrationServiceEnvironmentImpl(String name, com.azure.resourcemanager.logic.LogicManager serviceManager) {
        this.innerObject = new IntegrationServiceEnvironmentInner();
        this.serviceManager = serviceManager;
        this.integrationServiceEnvironmentName = name;
    }

    public IntegrationServiceEnvironmentImpl update() {
        return this;
    }

    public IntegrationServiceEnvironment apply() {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationServiceEnvironments()
            .updateWithResponse(integrationServiceEnvironmentName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public IntegrationServiceEnvironment apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationServiceEnvironments()
            .updateWithResponse(integrationServiceEnvironmentName, this.innerModel(), context)
            .getValue();
        return this;
    }

    IntegrationServiceEnvironmentImpl(IntegrationServiceEnvironmentInner innerObject,
        com.azure.resourcemanager.logic.LogicManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.integrationServiceEnvironmentName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "integrationServiceEnvironments");
    }

    public IntegrationServiceEnvironment refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationServiceEnvironments()
            .getWithResponse(integrationServiceEnvironmentName, Context.NONE)
            .getValue();
        return this;
    }

    public IntegrationServiceEnvironment refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getIntegrationServiceEnvironments()
            .getWithResponse(integrationServiceEnvironmentName, context)
            .getValue();
        return this;
    }

    public Response<Void> restartWithResponse(Context context) {
        return serviceManager.integrationServiceEnvironments()
            .restartWithResponse(integrationServiceEnvironmentName, context);
    }

    public void restart() {
        serviceManager.integrationServiceEnvironments().restart(integrationServiceEnvironmentName);
    }

    public IntegrationServiceEnvironmentImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public IntegrationServiceEnvironmentImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public IntegrationServiceEnvironmentImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public IntegrationServiceEnvironmentImpl withSku(IntegrationServiceEnvironmentSku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public IntegrationServiceEnvironmentImpl withIdentity(ManagedServiceIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public IntegrationServiceEnvironmentImpl withState(WorkflowState state) {
        this.innerModel().withState(state);
        return this;
    }

    public IntegrationServiceEnvironmentImpl
        withIntegrationServiceEnvironmentId(String integrationServiceEnvironmentId) {
        this.innerModel().withIntegrationServiceEnvironmentId(integrationServiceEnvironmentId);
        return this;
    }

    public IntegrationServiceEnvironmentImpl
        withEndpointsConfiguration(FlowEndpointsConfiguration endpointsConfiguration) {
        this.innerModel().withEndpointsConfiguration(endpointsConfiguration);
        return this;
    }

    public IntegrationServiceEnvironmentImpl withNetworkConfiguration(NetworkConfiguration networkConfiguration) {
        this.innerModel().withNetworkConfiguration(networkConfiguration);
        return this;
    }

    public IntegrationServiceEnvironmentImpl
        withEncryptionConfiguration(IntegrationServiceEnvironmenEncryptionConfiguration encryptionConfiguration) {
        this.innerModel().withEncryptionConfiguration(encryptionConfiguration);
        return this;
    }
}
