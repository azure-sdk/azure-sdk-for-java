// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.logic.fluent.AssemblyDefinitionsClient;
import com.azure.resourcemanager.logic.fluent.models.AssemblyCollectionInner;
import com.azure.resourcemanager.logic.fluent.models.AssemblyDefinitionInner;
import com.azure.resourcemanager.logic.fluent.models.WorkflowTriggerCallbackUrlInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AssemblyDefinitionsClient.
 */
public final class AssemblyDefinitionsClientImpl implements AssemblyDefinitionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AssemblyDefinitionsService service;

    /**
     * The service client containing this operation class.
     */
    private final LogicManagementClientImpl client;

    /**
     * Initializes an instance of AssemblyDefinitionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AssemblyDefinitionsClientImpl(LogicManagementClientImpl client) {
        this.service = RestProxy.create(AssemblyDefinitionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for LogicManagementClientAssemblyDefinitions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "LogicManagementClien")
    public interface AssemblyDefinitionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AssemblyCollectionInner>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("integrationAccountName") String integrationAccountName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AssemblyDefinitionInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("integrationAccountName") String integrationAccountName,
            @PathParam("assemblyArtifactName") String assemblyArtifactName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AssemblyDefinitionInner>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("integrationAccountName") String integrationAccountName,
            @PathParam("assemblyArtifactName") String assemblyArtifactName,
            @BodyParam("application/json") AssemblyDefinitionInner resource, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("integrationAccountName") String integrationAccountName,
            @PathParam("assemblyArtifactName") String assemblyArtifactName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}/listContentCallbackUrl")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WorkflowTriggerCallbackUrlInner>> listContentCallbackUrl(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("integrationAccountName") String integrationAccountName,
            @PathParam("assemblyArtifactName") String assemblyArtifactName, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List the assemblies for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of assembly definitions along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AssemblyCollectionInner>> listWithResponseAsync(String resourceGroupName,
        String integrationAccountName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (integrationAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, integrationAccountName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the assemblies for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of assembly definitions along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AssemblyCollectionInner>> listWithResponseAsync(String resourceGroupName,
        String integrationAccountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (integrationAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, integrationAccountName, accept, context);
    }

    /**
     * List the assemblies for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of assembly definitions on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AssemblyCollectionInner> listAsync(String resourceGroupName, String integrationAccountName) {
        return listWithResponseAsync(resourceGroupName, integrationAccountName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * List the assemblies for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of assembly definitions along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AssemblyCollectionInner> listWithResponse(String resourceGroupName, String integrationAccountName,
        Context context) {
        return listWithResponseAsync(resourceGroupName, integrationAccountName, context).block();
    }

    /**
     * List the assemblies for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of assembly definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssemblyCollectionInner list(String resourceGroupName, String integrationAccountName) {
        return listWithResponse(resourceGroupName, integrationAccountName, Context.NONE).getValue();
    }

    /**
     * Get an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an assembly for an integration account along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AssemblyDefinitionInner>> getWithResponseAsync(String resourceGroupName,
        String integrationAccountName, String assemblyArtifactName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (integrationAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null."));
        }
        if (assemblyArtifactName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter assemblyArtifactName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, integrationAccountName, assemblyArtifactName,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an assembly for an integration account along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AssemblyDefinitionInner>> getWithResponseAsync(String resourceGroupName,
        String integrationAccountName, String assemblyArtifactName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (integrationAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null."));
        }
        if (assemblyArtifactName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter assemblyArtifactName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, integrationAccountName, assemblyArtifactName, accept, context);
    }

    /**
     * Get an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an assembly for an integration account on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AssemblyDefinitionInner> getAsync(String resourceGroupName, String integrationAccountName,
        String assemblyArtifactName) {
        return getWithResponseAsync(resourceGroupName, integrationAccountName, assemblyArtifactName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an assembly for an integration account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AssemblyDefinitionInner> getWithResponse(String resourceGroupName, String integrationAccountName,
        String assemblyArtifactName, Context context) {
        return getWithResponseAsync(resourceGroupName, integrationAccountName, assemblyArtifactName, context).block();
    }

    /**
     * Get an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an assembly for an integration account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssemblyDefinitionInner get(String resourceGroupName, String integrationAccountName,
        String assemblyArtifactName) {
        return getWithResponse(resourceGroupName, integrationAccountName, assemblyArtifactName, Context.NONE)
            .getValue();
    }

    /**
     * Create or update an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param resource The assembly artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the assembly definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AssemblyDefinitionInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String integrationAccountName, String assemblyArtifactName, AssemblyDefinitionInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (integrationAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null."));
        }
        if (assemblyArtifactName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter assemblyArtifactName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, integrationAccountName, assemblyArtifactName,
                resource, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param resource The assembly artifact.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the assembly definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AssemblyDefinitionInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String integrationAccountName, String assemblyArtifactName, AssemblyDefinitionInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (integrationAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null."));
        }
        if (assemblyArtifactName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter assemblyArtifactName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, integrationAccountName, assemblyArtifactName, resource,
            accept, context);
    }

    /**
     * Create or update an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param resource The assembly artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the assembly definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AssemblyDefinitionInner> createOrUpdateAsync(String resourceGroupName, String integrationAccountName,
        String assemblyArtifactName, AssemblyDefinitionInner resource) {
        return createOrUpdateWithResponseAsync(resourceGroupName, integrationAccountName, assemblyArtifactName,
            resource).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create or update an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param resource The assembly artifact.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the assembly definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AssemblyDefinitionInner> createOrUpdateWithResponse(String resourceGroupName,
        String integrationAccountName, String assemblyArtifactName, AssemblyDefinitionInner resource, Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, integrationAccountName, assemblyArtifactName,
            resource, context).block();
    }

    /**
     * Create or update an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param resource The assembly artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the assembly definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssemblyDefinitionInner createOrUpdate(String resourceGroupName, String integrationAccountName,
        String assemblyArtifactName, AssemblyDefinitionInner resource) {
        return createOrUpdateWithResponse(resourceGroupName, integrationAccountName, assemblyArtifactName, resource,
            Context.NONE).getValue();
    }

    /**
     * Delete an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String integrationAccountName,
        String assemblyArtifactName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (integrationAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null."));
        }
        if (assemblyArtifactName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter assemblyArtifactName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, integrationAccountName, assemblyArtifactName,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String integrationAccountName,
        String assemblyArtifactName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (integrationAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null."));
        }
        if (assemblyArtifactName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter assemblyArtifactName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, integrationAccountName, assemblyArtifactName, accept, context);
    }

    /**
     * Delete an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String integrationAccountName,
        String assemblyArtifactName) {
        return deleteWithResponseAsync(resourceGroupName, integrationAccountName, assemblyArtifactName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String integrationAccountName,
        String assemblyArtifactName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, integrationAccountName, assemblyArtifactName, context)
            .block();
    }

    /**
     * Delete an assembly for an integration account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String integrationAccountName, String assemblyArtifactName) {
        deleteWithResponse(resourceGroupName, integrationAccountName, assemblyArtifactName, Context.NONE);
    }

    /**
     * Get the content callback url for an integration account assembly.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the content callback url for an integration account assembly along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WorkflowTriggerCallbackUrlInner>> listContentCallbackUrlWithResponseAsync(
        String resourceGroupName, String integrationAccountName, String assemblyArtifactName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (integrationAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null."));
        }
        if (assemblyArtifactName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter assemblyArtifactName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listContentCallbackUrl(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, integrationAccountName,
                assemblyArtifactName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the content callback url for an integration account assembly.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the content callback url for an integration account assembly along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WorkflowTriggerCallbackUrlInner>> listContentCallbackUrlWithResponseAsync(
        String resourceGroupName, String integrationAccountName, String assemblyArtifactName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (integrationAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null."));
        }
        if (assemblyArtifactName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter assemblyArtifactName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listContentCallbackUrl(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, integrationAccountName, assemblyArtifactName, accept,
            context);
    }

    /**
     * Get the content callback url for an integration account assembly.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the content callback url for an integration account assembly on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WorkflowTriggerCallbackUrlInner> listContentCallbackUrlAsync(String resourceGroupName,
        String integrationAccountName, String assemblyArtifactName) {
        return listContentCallbackUrlWithResponseAsync(resourceGroupName, integrationAccountName, assemblyArtifactName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the content callback url for an integration account assembly.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the content callback url for an integration account assembly along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<WorkflowTriggerCallbackUrlInner> listContentCallbackUrlWithResponse(String resourceGroupName,
        String integrationAccountName, String assemblyArtifactName, Context context) {
        return listContentCallbackUrlWithResponseAsync(resourceGroupName, integrationAccountName, assemblyArtifactName,
            context).block();
    }

    /**
     * Get the content callback url for an integration account assembly.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the content callback url for an integration account assembly.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WorkflowTriggerCallbackUrlInner listContentCallbackUrl(String resourceGroupName,
        String integrationAccountName, String assemblyArtifactName) {
        return listContentCallbackUrlWithResponse(resourceGroupName, integrationAccountName, assemblyArtifactName,
            Context.NONE).getValue();
    }
}
