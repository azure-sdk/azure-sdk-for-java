// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.logic.fluent.IntegrationServiceEnvironmentsClient;
import com.azure.resourcemanager.logic.fluent.models.IntegrationServiceEnvironmentInner;
import com.azure.resourcemanager.logic.fluent.models.IntegrationServiceEnvironmentNetworkHealthInner;
import com.azure.resourcemanager.logic.fluent.models.IntegrationServiceEnvironmentSkuDefinitionInner;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironment;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentNetworkHealth;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentSkuDefinition;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironments;

public final class IntegrationServiceEnvironmentsImpl implements IntegrationServiceEnvironments {
    private static final ClientLogger LOGGER = new ClientLogger(IntegrationServiceEnvironmentsImpl.class);

    private final IntegrationServiceEnvironmentsClient innerClient;

    private final com.azure.resourcemanager.logic.LogicManager serviceManager;

    public IntegrationServiceEnvironmentsImpl(IntegrationServiceEnvironmentsClient innerClient,
        com.azure.resourcemanager.logic.LogicManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<IntegrationServiceEnvironment> listBySubscription() {
        PagedIterable<IntegrationServiceEnvironmentInner> inner = this.serviceClient().listBySubscription();
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new IntegrationServiceEnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<IntegrationServiceEnvironment> listBySubscription(Integer top, Context context) {
        PagedIterable<IntegrationServiceEnvironmentInner> inner = this.serviceClient().listBySubscription(top, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new IntegrationServiceEnvironmentImpl(inner1, this.manager()));
    }

    public Response<IntegrationServiceEnvironment> getWithResponse(String integrationServiceEnvironmentName,
        Context context) {
        Response<IntegrationServiceEnvironmentInner> inner
            = this.serviceClient().getWithResponse(integrationServiceEnvironmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new IntegrationServiceEnvironmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IntegrationServiceEnvironment get(String integrationServiceEnvironmentName) {
        IntegrationServiceEnvironmentInner inner = this.serviceClient().get(integrationServiceEnvironmentName);
        if (inner != null) {
            return new IntegrationServiceEnvironmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String integrationServiceEnvironmentName, Context context) {
        return this.serviceClient().deleteWithResponse(integrationServiceEnvironmentName, context);
    }

    public void delete(String integrationServiceEnvironmentName) {
        this.serviceClient().delete(integrationServiceEnvironmentName);
    }

    public Response<IntegrationServiceEnvironmentNetworkHealth>
        integrationServiceEnvironmentNetworkHealthGetWithResponse(String integrationServiceEnvironmentName,
            Context context) {
        Response<IntegrationServiceEnvironmentNetworkHealthInner> inner = this.serviceClient()
            .integrationServiceEnvironmentNetworkHealthGetWithResponse(integrationServiceEnvironmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new IntegrationServiceEnvironmentNetworkHealthImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IntegrationServiceEnvironmentNetworkHealth
        integrationServiceEnvironmentNetworkHealthGet(String integrationServiceEnvironmentName) {
        IntegrationServiceEnvironmentNetworkHealthInner inner
            = this.serviceClient().integrationServiceEnvironmentNetworkHealthGet(integrationServiceEnvironmentName);
        if (inner != null) {
            return new IntegrationServiceEnvironmentNetworkHealthImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> restartWithResponse(String integrationServiceEnvironmentName, Context context) {
        return this.serviceClient().restartWithResponse(integrationServiceEnvironmentName, context);
    }

    public void restart(String integrationServiceEnvironmentName) {
        this.serviceClient().restart(integrationServiceEnvironmentName);
    }

    public PagedIterable<IntegrationServiceEnvironmentSkuDefinition> list(String integrationServiceEnvironmentName) {
        PagedIterable<IntegrationServiceEnvironmentSkuDefinitionInner> inner
            = this.serviceClient().list(integrationServiceEnvironmentName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new IntegrationServiceEnvironmentSkuDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<IntegrationServiceEnvironmentSkuDefinition> list(String integrationServiceEnvironmentName,
        Context context) {
        PagedIterable<IntegrationServiceEnvironmentSkuDefinitionInner> inner
            = this.serviceClient().list(integrationServiceEnvironmentName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new IntegrationServiceEnvironmentSkuDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<IntegrationServiceEnvironment> listByResourceGroup(String resourceGroupName) {
        PagedIterable<IntegrationServiceEnvironmentInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new IntegrationServiceEnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<IntegrationServiceEnvironment> listByResourceGroup(String resourceGroupName, Integer top,
        Context context) {
        PagedIterable<IntegrationServiceEnvironmentInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, top, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new IntegrationServiceEnvironmentImpl(inner1, this.manager()));
    }

    public IntegrationServiceEnvironment getById(String id) {
        String integrationServiceEnvironmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "integrationServiceEnvironments");
        if (integrationServiceEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'integrationServiceEnvironments'.", id)));
        }
        return this.getWithResponse(integrationServiceEnvironmentName, Context.NONE).getValue();
    }

    public Response<IntegrationServiceEnvironment> getByIdWithResponse(String id, Context context) {
        String integrationServiceEnvironmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "integrationServiceEnvironments");
        if (integrationServiceEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'integrationServiceEnvironments'.", id)));
        }
        return this.getWithResponse(integrationServiceEnvironmentName, context);
    }

    public void deleteById(String id) {
        String integrationServiceEnvironmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "integrationServiceEnvironments");
        if (integrationServiceEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'integrationServiceEnvironments'.", id)));
        }
        this.deleteWithResponse(integrationServiceEnvironmentName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String integrationServiceEnvironmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "integrationServiceEnvironments");
        if (integrationServiceEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'integrationServiceEnvironments'.", id)));
        }
        return this.deleteWithResponse(integrationServiceEnvironmentName, context);
    }

    private IntegrationServiceEnvironmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.logic.LogicManager manager() {
        return this.serviceManager;
    }

    public IntegrationServiceEnvironmentImpl define(String name) {
        return new IntegrationServiceEnvironmentImpl(name, this.manager());
    }
}
