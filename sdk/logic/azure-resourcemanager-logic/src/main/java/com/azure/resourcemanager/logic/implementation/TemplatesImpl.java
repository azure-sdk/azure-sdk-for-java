// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.logic.fluent.TemplatesClient;
import com.azure.resourcemanager.logic.fluent.models.TemplateInner;
import com.azure.resourcemanager.logic.fluent.models.WorkflowInner;
import com.azure.resourcemanager.logic.fluent.models.WorkflowTriggerCallbackUrlInner;
import com.azure.resourcemanager.logic.models.GenerateUpgradedDefinitionParameters;
import com.azure.resourcemanager.logic.models.GetCallbackUrlParameters;
import com.azure.resourcemanager.logic.models.RegenerateActionParameter;
import com.azure.resourcemanager.logic.models.Template;
import com.azure.resourcemanager.logic.models.Templates;
import com.azure.resourcemanager.logic.models.WorkflowReference;
import com.azure.resourcemanager.logic.models.WorkflowTriggerCallbackUrl;
import java.util.Collections;
import java.util.Map;

public final class TemplatesImpl implements Templates {
    private static final ClientLogger LOGGER = new ClientLogger(TemplatesImpl.class);

    private final TemplatesClient innerClient;

    private final com.azure.resourcemanager.logic.LogicManager serviceManager;

    public TemplatesImpl(TemplatesClient innerClient, com.azure.resourcemanager.logic.LogicManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Template> list() {
        PagedIterable<TemplateInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TemplateImpl(inner1, this.manager()));
    }

    public PagedIterable<Template> list(Integer top, String filter, Context context) {
        PagedIterable<TemplateInner> inner = this.serviceClient().list(top, filter, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TemplateImpl(inner1, this.manager()));
    }

    public PagedIterable<Template> listByResourceGroup(String resourceGroupName) {
        PagedIterable<TemplateInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TemplateImpl(inner1, this.manager()));
    }

    public PagedIterable<Template> listByResourceGroup(String resourceGroupName, Integer top, String filter,
        Context context) {
        PagedIterable<TemplateInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, top, filter, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TemplateImpl(inner1, this.manager()));
    }

    public Response<Template> getByResourceGroupWithResponse(String resourceGroupName, String templateName,
        Context context) {
        Response<TemplateInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, templateName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TemplateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Template getByResourceGroup(String resourceGroupName, String templateName) {
        TemplateInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, templateName);
        if (inner != null) {
            return new TemplateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String templateName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, templateName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String templateName) {
        this.serviceClient().delete(resourceGroupName, templateName);
    }

    public Response<Void> disableWithResponse(String resourceGroupName, String templateName, Context context) {
        return this.serviceClient().disableWithResponse(resourceGroupName, templateName, context);
    }

    public void disable(String resourceGroupName, String templateName) {
        this.serviceClient().disable(resourceGroupName, templateName);
    }

    public Response<Void> enableWithResponse(String resourceGroupName, String templateName, Context context) {
        return this.serviceClient().enableWithResponse(resourceGroupName, templateName, context);
    }

    public void enable(String resourceGroupName, String templateName) {
        this.serviceClient().enable(resourceGroupName, templateName);
    }

    public Response<Map<String, Object>> generateUpgradedDefinitionWithResponse(String resourceGroupName,
        String templateName, GenerateUpgradedDefinitionParameters body, Context context) {
        return this.serviceClient()
            .generateUpgradedDefinitionWithResponse(resourceGroupName, templateName, body, context);
    }

    public Map<String, Object> generateUpgradedDefinition(String resourceGroupName, String templateName,
        GenerateUpgradedDefinitionParameters body) {
        Map<String, Object> inner
            = this.serviceClient().generateUpgradedDefinition(resourceGroupName, templateName, body);
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Response<WorkflowTriggerCallbackUrl> listCallbackUrlWithResponse(String resourceGroupName,
        String templateName, GetCallbackUrlParameters body, Context context) {
        Response<WorkflowTriggerCallbackUrlInner> inner
            = this.serviceClient().listCallbackUrlWithResponse(resourceGroupName, templateName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new WorkflowTriggerCallbackUrlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WorkflowTriggerCallbackUrl listCallbackUrl(String resourceGroupName, String templateName,
        GetCallbackUrlParameters body) {
        WorkflowTriggerCallbackUrlInner inner
            = this.serviceClient().listCallbackUrl(resourceGroupName, templateName, body);
        if (inner != null) {
            return new WorkflowTriggerCallbackUrlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Map<String, Object>> listSwaggerWithResponse(String resourceGroupName, String templateName,
        Context context) {
        return this.serviceClient().listSwaggerWithResponse(resourceGroupName, templateName, context);
    }

    public Map<String, Object> listSwagger(String resourceGroupName, String templateName) {
        Map<String, Object> inner = this.serviceClient().listSwagger(resourceGroupName, templateName);
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public void move(String resourceGroupName, String templateName, WorkflowReference body) {
        this.serviceClient().move(resourceGroupName, templateName, body);
    }

    public void move(String resourceGroupName, String templateName, WorkflowReference body, Context context) {
        this.serviceClient().move(resourceGroupName, templateName, body, context);
    }

    public Response<Void> regenerateAccessKeyWithResponse(String resourceGroupName, String templateName,
        RegenerateActionParameter body, Context context) {
        return this.serviceClient().regenerateAccessKeyWithResponse(resourceGroupName, templateName, body, context);
    }

    public void regenerateAccessKey(String resourceGroupName, String templateName, RegenerateActionParameter body) {
        this.serviceClient().regenerateAccessKey(resourceGroupName, templateName, body);
    }

    public Response<Void> validateByResourceGroupWithResponse(String resourceGroupName, String templateName,
        WorkflowInner body, Context context) {
        return this.serviceClient().validateByResourceGroupWithResponse(resourceGroupName, templateName, body, context);
    }

    public void validateByResourceGroup(String resourceGroupName, String templateName, WorkflowInner body) {
        this.serviceClient().validateByResourceGroup(resourceGroupName, templateName, body);
    }

    public Template getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String templateName = ResourceManagerUtils.getValueFromIdByName(id, "templates");
        if (templateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'templates'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, templateName, Context.NONE).getValue();
    }

    public Response<Template> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String templateName = ResourceManagerUtils.getValueFromIdByName(id, "templates");
        if (templateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'templates'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, templateName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String templateName = ResourceManagerUtils.getValueFromIdByName(id, "templates");
        if (templateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'templates'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, templateName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String templateName = ResourceManagerUtils.getValueFromIdByName(id, "templates");
        if (templateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'templates'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, templateName, context);
    }

    private TemplatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.logic.LogicManager manager() {
        return this.serviceManager;
    }

    public TemplateImpl define(String name) {
        return new TemplateImpl(name, this.manager());
    }
}
