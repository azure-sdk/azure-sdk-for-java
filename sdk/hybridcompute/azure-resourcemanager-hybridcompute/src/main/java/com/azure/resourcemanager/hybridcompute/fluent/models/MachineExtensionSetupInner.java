// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybridcompute.models.MachineExtensionProperties;
import java.io.IOException;
import java.util.List;

/**
 * The MachineExtensionSetup model.
 */
@Fluent
public final class MachineExtensionSetupInner implements JsonSerializable<MachineExtensionSetupInner> {
    /*
     * The list of extensions
     */
    private List<MachineExtensionProperties> extensionSetupList;

    /**
     * Creates an instance of MachineExtensionSetupInner class.
     */
    public MachineExtensionSetupInner() {
    }

    /**
     * Get the extensionSetupList property: The list of extensions.
     * 
     * @return the extensionSetupList value.
     */
    public List<MachineExtensionProperties> extensionSetupList() {
        return this.extensionSetupList;
    }

    /**
     * Set the extensionSetupList property: The list of extensions.
     * 
     * @param extensionSetupList the extensionSetupList value to set.
     * @return the MachineExtensionSetupInner object itself.
     */
    public MachineExtensionSetupInner withExtensionSetupList(List<MachineExtensionProperties> extensionSetupList) {
        this.extensionSetupList = extensionSetupList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extensionSetupList() != null) {
            extensionSetupList().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("extensionSetupList", this.extensionSetupList,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachineExtensionSetupInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachineExtensionSetupInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MachineExtensionSetupInner.
     */
    public static MachineExtensionSetupInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MachineExtensionSetupInner deserializedMachineExtensionSetupInner = new MachineExtensionSetupInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("extensionSetupList".equals(fieldName)) {
                    List<MachineExtensionProperties> extensionSetupList
                        = reader.readArray(reader1 -> MachineExtensionProperties.fromJson(reader1));
                    deserializedMachineExtensionSetupInner.extensionSetupList = extensionSetupList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMachineExtensionSetupInner;
        });
    }
}
