// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.hybridcompute.models.LicenseProfileSubscriptionStatusUpdate;
import com.azure.resourcemanager.hybridcompute.models.ProductFeatureUpdate;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The LicenseProfileUpdatePropertiesProducts model. */
@Fluent
public final class LicenseProfileUpdatePropertiesProducts {
    /*
     * Hybrid Compute Windows Server Profile Update properties
     */
    @JsonProperty(value = "windowsServerProfile")
    private WindowsServerProfileUpdateProperties innerWindowsServerProfile;

    /*
     * Hybrid Compute Windows IoT Enterprise Profile Update properties
     */
    @JsonProperty(value = "iotEnterpriseProfile")
    private IotEnterpriseProfileUpdateProperties innerIotEnterpriseProfile;

    /** Creates an instance of LicenseProfileUpdatePropertiesProducts class. */
    public LicenseProfileUpdatePropertiesProducts() {
    }

    /**
     * Get the innerWindowsServerProfile property: Hybrid Compute Windows Server Profile Update properties.
     *
     * @return the innerWindowsServerProfile value.
     */
    private WindowsServerProfileUpdateProperties innerWindowsServerProfile() {
        return this.innerWindowsServerProfile;
    }

    /**
     * Get the innerIotEnterpriseProfile property: Hybrid Compute Windows IoT Enterprise Profile Update properties.
     *
     * @return the innerIotEnterpriseProfile value.
     */
    private IotEnterpriseProfileUpdateProperties innerIotEnterpriseProfile() {
        return this.innerIotEnterpriseProfile;
    }

    /**
     * Get the subscriptionStatus property: Indicates the subscription status of the Windows Server.
     *
     * @return the subscriptionStatus value.
     */
    public LicenseProfileSubscriptionStatusUpdate subscriptionStatus() {
        return this.innerWindowsServerProfile() == null ? null : this.innerWindowsServerProfile().subscriptionStatus();
    }

    /**
     * Set the subscriptionStatus property: Indicates the subscription status of the Windows Server.
     *
     * @param subscriptionStatus the subscriptionStatus value to set.
     * @return the LicenseProfileUpdatePropertiesProducts object itself.
     */
    public LicenseProfileUpdatePropertiesProducts withSubscriptionStatus(
        LicenseProfileSubscriptionStatusUpdate subscriptionStatus) {
        if (this.innerWindowsServerProfile() == null) {
            this.innerWindowsServerProfile = new WindowsServerProfileUpdateProperties();
        }
        this.innerWindowsServerProfile().withSubscriptionStatus(subscriptionStatus);
        return this;
    }

    /**
     * Get the productFeatures property: The list of product feature updates.
     *
     * @return the productFeatures value.
     */
    public List<ProductFeatureUpdate> productFeatures() {
        return this.innerWindowsServerProfile() == null ? null : this.innerWindowsServerProfile().productFeatures();
    }

    /**
     * Set the productFeatures property: The list of product feature updates.
     *
     * @param productFeatures the productFeatures value to set.
     * @return the LicenseProfileUpdatePropertiesProducts object itself.
     */
    public LicenseProfileUpdatePropertiesProducts withProductFeatures(List<ProductFeatureUpdate> productFeatures) {
        if (this.innerWindowsServerProfile() == null) {
            this.innerWindowsServerProfile = new WindowsServerProfileUpdateProperties();
        }
        this.innerWindowsServerProfile().withProductFeatures(productFeatures);
        return this;
    }

    /**
     * Get the subscriptionStatus property: Indicates the subscription status of the Windows IoT Enterprise.
     *
     * @return the subscriptionStatus value.
     */
    public LicenseProfileSubscriptionStatusUpdate subscriptionStatusIotEnterpriseProfileSubscriptionStatus() {
        return this.innerIotEnterpriseProfile() == null ? null : this.innerIotEnterpriseProfile().subscriptionStatus();
    }

    /**
     * Set the subscriptionStatus property: Indicates the subscription status of the Windows IoT Enterprise.
     *
     * @param subscriptionStatus the subscriptionStatus value to set.
     * @return the LicenseProfileUpdatePropertiesProducts object itself.
     */
    public LicenseProfileUpdatePropertiesProducts withSubscriptionStatusIotEnterpriseProfileSubscriptionStatus(
        LicenseProfileSubscriptionStatusUpdate subscriptionStatus) {
        if (this.innerIotEnterpriseProfile() == null) {
            this.innerIotEnterpriseProfile = new IotEnterpriseProfileUpdateProperties();
        }
        this.innerIotEnterpriseProfile().withSubscriptionStatus(subscriptionStatus);
        return this;
    }

    /**
     * Get the productFeatures property: The list of product feature updates.
     *
     * @return the productFeatures value.
     */
    public List<ProductFeatureUpdate> productFeaturesIotEnterpriseProfileProductFeatures() {
        return this.innerIotEnterpriseProfile() == null ? null : this.innerIotEnterpriseProfile().productFeatures();
    }

    /**
     * Set the productFeatures property: The list of product feature updates.
     *
     * @param productFeatures the productFeatures value to set.
     * @return the LicenseProfileUpdatePropertiesProducts object itself.
     */
    public LicenseProfileUpdatePropertiesProducts withProductFeaturesIotEnterpriseProfileProductFeatures(
        List<ProductFeatureUpdate> productFeatures) {
        if (this.innerIotEnterpriseProfile() == null) {
            this.innerIotEnterpriseProfile = new IotEnterpriseProfileUpdateProperties();
        }
        this.innerIotEnterpriseProfile().withProductFeatures(productFeatures);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerWindowsServerProfile() != null) {
            innerWindowsServerProfile().validate();
        }
        if (innerIotEnterpriseProfile() != null) {
            innerIotEnterpriseProfile().validate();
        }
    }
}
