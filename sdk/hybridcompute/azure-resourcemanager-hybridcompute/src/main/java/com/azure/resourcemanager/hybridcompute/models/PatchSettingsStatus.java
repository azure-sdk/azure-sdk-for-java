// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Status of the hotpatch capability enrollment or disenrollment.
 */
@Fluent
public final class PatchSettingsStatus {
    /*
     * Indicates the current status of the hotpatch being enabled or disabled.
     */
    @JsonProperty(value = "hotpatchEnablementStatus")
    private HotpatchEnablementStatus hotpatchEnablementStatus;

    /*
     * The errors that were encountered during the hotpatch capability enrollment or disenrollment.
     */
    @JsonProperty(value = "error", access = JsonProperty.Access.WRITE_ONLY)
    private ManagementError error;

    /**
     * Creates an instance of PatchSettingsStatus class.
     */
    public PatchSettingsStatus() {
    }

    /**
     * Get the hotpatchEnablementStatus property: Indicates the current status of the hotpatch being enabled or
     * disabled.
     * 
     * @return the hotpatchEnablementStatus value.
     */
    public HotpatchEnablementStatus hotpatchEnablementStatus() {
        return this.hotpatchEnablementStatus;
    }

    /**
     * Set the hotpatchEnablementStatus property: Indicates the current status of the hotpatch being enabled or
     * disabled.
     * 
     * @param hotpatchEnablementStatus the hotpatchEnablementStatus value to set.
     * @return the PatchSettingsStatus object itself.
     */
    public PatchSettingsStatus withHotpatchEnablementStatus(HotpatchEnablementStatus hotpatchEnablementStatus) {
        this.hotpatchEnablementStatus = hotpatchEnablementStatus;
        return this;
    }

    /**
     * Get the error property: The errors that were encountered during the hotpatch capability enrollment or
     * disenrollment.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
