// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.hybridcompute.models.LicenseProfileSubscriptionStatus;
import com.azure.resourcemanager.hybridcompute.models.LicenseStatus;
import com.azure.resourcemanager.hybridcompute.models.ProductFeature;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** License Profile Instance View in Machine Properties. */
@Fluent
public final class LicenseProfileMachineInstanceViewInner {
    /*
     * Indicates the license status of the OS.
     */
    @JsonProperty(value = "licenseStatus", access = JsonProperty.Access.WRITE_ONLY)
    private LicenseStatus licenseStatus;

    /*
     * Indicates the license channel.
     */
    @JsonProperty(value = "licenseChannel", access = JsonProperty.Access.WRITE_ONLY)
    private String licenseChannel;

    /*
     * The softwareAssurance property.
     */
    @JsonProperty(value = "softwareAssurance", access = JsonProperty.Access.WRITE_ONLY)
    private LicenseProfileMachineInstanceViewSoftwareAssurance innerSoftwareAssurance;

    /*
     * Properties for the Machine ESU profile.
     */
    @JsonProperty(value = "esuProfile")
    private LicenseProfileMachineInstanceViewEsuPropertiesInner esuProfile;

    /*
     * The products property.
     */
    @JsonProperty(value = "products", access = JsonProperty.Access.WRITE_ONLY)
    private LicenseProfileMachineInstanceViewProducts innerProducts;

    /** Creates an instance of LicenseProfileMachineInstanceViewInner class. */
    public LicenseProfileMachineInstanceViewInner() {
    }

    /**
     * Get the licenseStatus property: Indicates the license status of the OS.
     *
     * @return the licenseStatus value.
     */
    public LicenseStatus licenseStatus() {
        return this.licenseStatus;
    }

    /**
     * Get the licenseChannel property: Indicates the license channel.
     *
     * @return the licenseChannel value.
     */
    public String licenseChannel() {
        return this.licenseChannel;
    }

    /**
     * Get the innerSoftwareAssurance property: The softwareAssurance property.
     *
     * @return the innerSoftwareAssurance value.
     */
    private LicenseProfileMachineInstanceViewSoftwareAssurance innerSoftwareAssurance() {
        return this.innerSoftwareAssurance;
    }

    /**
     * Get the esuProfile property: Properties for the Machine ESU profile.
     *
     * @return the esuProfile value.
     */
    public LicenseProfileMachineInstanceViewEsuPropertiesInner esuProfile() {
        return this.esuProfile;
    }

    /**
     * Set the esuProfile property: Properties for the Machine ESU profile.
     *
     * @param esuProfile the esuProfile value to set.
     * @return the LicenseProfileMachineInstanceViewInner object itself.
     */
    public LicenseProfileMachineInstanceViewInner withEsuProfile(
        LicenseProfileMachineInstanceViewEsuPropertiesInner esuProfile) {
        this.esuProfile = esuProfile;
        return this;
    }

    /**
     * Get the innerProducts property: The products property.
     *
     * @return the innerProducts value.
     */
    private LicenseProfileMachineInstanceViewProducts innerProducts() {
        return this.innerProducts;
    }

    /**
     * Get the softwareAssuranceCustomer property: Specifies if this machine is licensed as part of a Software Assurance
     * agreement.
     *
     * @return the softwareAssuranceCustomer value.
     */
    public Boolean softwareAssuranceCustomer() {
        return this.innerSoftwareAssurance() == null ? null : this.innerSoftwareAssurance().softwareAssuranceCustomer();
    }

    /**
     * Set the softwareAssuranceCustomer property: Specifies if this machine is licensed as part of a Software Assurance
     * agreement.
     *
     * @param softwareAssuranceCustomer the softwareAssuranceCustomer value to set.
     * @return the LicenseProfileMachineInstanceViewInner object itself.
     */
    public LicenseProfileMachineInstanceViewInner withSoftwareAssuranceCustomer(Boolean softwareAssuranceCustomer) {
        if (this.innerSoftwareAssurance() == null) {
            this.innerSoftwareAssurance = new LicenseProfileMachineInstanceViewSoftwareAssurance();
        }
        this.innerSoftwareAssurance().withSoftwareAssuranceCustomer(softwareAssuranceCustomer);
        return this;
    }

    /**
     * Get the subscriptionStatus property: Indicates the subscription status of the Windows Server.
     *
     * @return the subscriptionStatus value.
     */
    public LicenseProfileSubscriptionStatus subscriptionStatus() {
        return this.innerProducts() == null ? null : this.innerProducts().subscriptionStatus();
    }

    /**
     * Set the subscriptionStatus property: Indicates the subscription status of the Windows Server.
     *
     * @param subscriptionStatus the subscriptionStatus value to set.
     * @return the LicenseProfileMachineInstanceViewInner object itself.
     */
    public LicenseProfileMachineInstanceViewInner withSubscriptionStatus(
        LicenseProfileSubscriptionStatus subscriptionStatus) {
        if (this.innerProducts() == null) {
            this.innerProducts = new LicenseProfileMachineInstanceViewProducts();
        }
        this.innerProducts().withSubscriptionStatus(subscriptionStatus);
        return this;
    }

    /**
     * Get the billingStartDate property: The timestamp in UTC when the billing starts.
     *
     * @return the billingStartDate value.
     */
    public OffsetDateTime billingStartDate() {
        return this.innerProducts() == null ? null : this.innerProducts().billingStartDate();
    }

    /**
     * Get the disenrollmentDate property: The timestamp in UTC when the user disenrolled the feature.
     *
     * @return the disenrollmentDate value.
     */
    public OffsetDateTime disenrollmentDate() {
        return this.innerProducts() == null ? null : this.innerProducts().disenrollmentDate();
    }

    /**
     * Get the productFeatures property: The list of product features.
     *
     * @return the productFeatures value.
     */
    public List<ProductFeature> productFeatures() {
        return this.innerProducts() == null ? null : this.innerProducts().productFeatures();
    }

    /**
     * Set the productFeatures property: The list of product features.
     *
     * @param productFeatures the productFeatures value to set.
     * @return the LicenseProfileMachineInstanceViewInner object itself.
     */
    public LicenseProfileMachineInstanceViewInner withProductFeatures(List<ProductFeature> productFeatures) {
        if (this.innerProducts() == null) {
            this.innerProducts = new LicenseProfileMachineInstanceViewProducts();
        }
        this.innerProducts().withProductFeatures(productFeatures);
        return this;
    }

    /**
     * Get the subscriptionStatusIotEnterpriseProfileSubscriptionStatus property: Indicates the subscription status of
     * the Windows IoT Enterprise.
     *
     * @return the subscriptionStatusIotEnterpriseProfileSubscriptionStatus value.
     */
    public LicenseProfileSubscriptionStatus subscriptionStatusIotEnterpriseProfileSubscriptionStatus() {
        return this.innerProducts() == null
            ? null
            : this.innerProducts().subscriptionStatusIotEnterpriseProfileSubscriptionStatus();
    }

    /**
     * Set the subscriptionStatusIotEnterpriseProfileSubscriptionStatus property: Indicates the subscription status of
     * the Windows IoT Enterprise.
     *
     * @param subscriptionStatusIotEnterpriseProfileSubscriptionStatus the
     *     subscriptionStatusIotEnterpriseProfileSubscriptionStatus value to set.
     * @return the LicenseProfileMachineInstanceViewInner object itself.
     */
    public LicenseProfileMachineInstanceViewInner withSubscriptionStatusIotEnterpriseProfileSubscriptionStatus(
        LicenseProfileSubscriptionStatus subscriptionStatusIotEnterpriseProfileSubscriptionStatus) {
        if (this.innerProducts() == null) {
            this.innerProducts = new LicenseProfileMachineInstanceViewProducts();
        }
        this
            .innerProducts()
            .withSubscriptionStatusIotEnterpriseProfileSubscriptionStatus(
                subscriptionStatusIotEnterpriseProfileSubscriptionStatus);
        return this;
    }

    /**
     * Get the billingStartDateIotEnterpriseProfileBillingStartDate property: The timestamp in UTC when the billing
     * starts.
     *
     * @return the billingStartDateIotEnterpriseProfileBillingStartDate value.
     */
    public OffsetDateTime billingStartDateIotEnterpriseProfileBillingStartDate() {
        return this.innerProducts() == null
            ? null
            : this.innerProducts().billingStartDateIotEnterpriseProfileBillingStartDate();
    }

    /**
     * Get the disenrollmentDateIotEnterpriseProfileDisenrollmentDate property: The timestamp in UTC when the user
     * disenrolled the feature.
     *
     * @return the disenrollmentDateIotEnterpriseProfileDisenrollmentDate value.
     */
    public OffsetDateTime disenrollmentDateIotEnterpriseProfileDisenrollmentDate() {
        return this.innerProducts() == null
            ? null
            : this.innerProducts().disenrollmentDateIotEnterpriseProfileDisenrollmentDate();
    }

    /**
     * Get the productFeaturesIotEnterpriseProfileProductFeatures property: The list of product features.
     *
     * @return the productFeaturesIotEnterpriseProfileProductFeatures value.
     */
    public List<ProductFeature> productFeaturesIotEnterpriseProfileProductFeatures() {
        return this.innerProducts() == null
            ? null
            : this.innerProducts().productFeaturesIotEnterpriseProfileProductFeatures();
    }

    /**
     * Set the productFeaturesIotEnterpriseProfileProductFeatures property: The list of product features.
     *
     * @param productFeaturesIotEnterpriseProfileProductFeatures the productFeaturesIotEnterpriseProfileProductFeatures
     *     value to set.
     * @return the LicenseProfileMachineInstanceViewInner object itself.
     */
    public LicenseProfileMachineInstanceViewInner withProductFeaturesIotEnterpriseProfileProductFeatures(
        List<ProductFeature> productFeaturesIotEnterpriseProfileProductFeatures) {
        if (this.innerProducts() == null) {
            this.innerProducts = new LicenseProfileMachineInstanceViewProducts();
        }
        this
            .innerProducts()
            .withProductFeaturesIotEnterpriseProfileProductFeatures(productFeaturesIotEnterpriseProfileProductFeatures);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerSoftwareAssurance() != null) {
            innerSoftwareAssurance().validate();
        }
        if (esuProfile() != null) {
            esuProfile().validate();
        }
        if (innerProducts() != null) {
            innerProducts().validate();
        }
    }
}
