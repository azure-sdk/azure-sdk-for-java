// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.hybridcompute.models.AssessmentModeTypes;
import com.azure.resourcemanager.hybridcompute.models.PatchModeTypes;
import com.azure.resourcemanager.hybridcompute.models.PatchSettingsStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Specifies the patch settings.
 */
@Fluent
public final class PatchSettings {
    /*
     * Specifies the assessment mode.
     */
    @JsonProperty(value = "assessmentMode")
    private AssessmentModeTypes assessmentMode;

    /*
     * Specifies the patch mode.
     */
    @JsonProperty(value = "patchMode")
    private PatchModeTypes patchMode;

    /*
     * Captures the hotpatch capability enrollment intent of the customers, which enables customers to patch their Windows machines without requiring a reboot.
     */
    @JsonProperty(value = "enableHotpatching")
    private Boolean enableHotpatching;

    /*
     * Status of the hotpatch capability enrollment or disenrollment.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private PatchSettingsStatus status;

    /**
     * Creates an instance of PatchSettings class.
     */
    public PatchSettings() {
    }

    /**
     * Get the assessmentMode property: Specifies the assessment mode.
     * 
     * @return the assessmentMode value.
     */
    public AssessmentModeTypes assessmentMode() {
        return this.assessmentMode;
    }

    /**
     * Set the assessmentMode property: Specifies the assessment mode.
     * 
     * @param assessmentMode the assessmentMode value to set.
     * @return the PatchSettings object itself.
     */
    public PatchSettings withAssessmentMode(AssessmentModeTypes assessmentMode) {
        this.assessmentMode = assessmentMode;
        return this;
    }

    /**
     * Get the patchMode property: Specifies the patch mode.
     * 
     * @return the patchMode value.
     */
    public PatchModeTypes patchMode() {
        return this.patchMode;
    }

    /**
     * Set the patchMode property: Specifies the patch mode.
     * 
     * @param patchMode the patchMode value to set.
     * @return the PatchSettings object itself.
     */
    public PatchSettings withPatchMode(PatchModeTypes patchMode) {
        this.patchMode = patchMode;
        return this;
    }

    /**
     * Get the enableHotpatching property: Captures the hotpatch capability enrollment intent of the customers, which
     * enables customers to patch their Windows machines without requiring a reboot.
     * 
     * @return the enableHotpatching value.
     */
    public Boolean enableHotpatching() {
        return this.enableHotpatching;
    }

    /**
     * Set the enableHotpatching property: Captures the hotpatch capability enrollment intent of the customers, which
     * enables customers to patch their Windows machines without requiring a reboot.
     * 
     * @param enableHotpatching the enableHotpatching value to set.
     * @return the PatchSettings object itself.
     */
    public PatchSettings withEnableHotpatching(Boolean enableHotpatching) {
        this.enableHotpatching = enableHotpatching;
        return this;
    }

    /**
     * Get the status property: Status of the hotpatch capability enrollment or disenrollment.
     * 
     * @return the status value.
     */
    public PatchSettingsStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }
}
