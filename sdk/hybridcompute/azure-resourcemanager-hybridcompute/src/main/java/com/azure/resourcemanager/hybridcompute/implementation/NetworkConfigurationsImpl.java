// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcompute.fluent.NetworkConfigurationsClient;
import com.azure.resourcemanager.hybridcompute.fluent.models.NetworkConfigurationInner;
import com.azure.resourcemanager.hybridcompute.models.NetworkConfiguration;
import com.azure.resourcemanager.hybridcompute.models.NetworkConfigurations;

public final class NetworkConfigurationsImpl implements NetworkConfigurations {
    private static final ClientLogger LOGGER = new ClientLogger(NetworkConfigurationsImpl.class);

    private final NetworkConfigurationsClient innerClient;

    private final com.azure.resourcemanager.hybridcompute.HybridComputeManager serviceManager;

    public NetworkConfigurationsImpl(
        NetworkConfigurationsClient innerClient,
        com.azure.resourcemanager.hybridcompute.HybridComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NetworkConfiguration> getWithResponse(String resourceUri, Context context) {
        Response<NetworkConfigurationInner> inner = this.serviceClient().getWithResponse(resourceUri, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkConfiguration get(String resourceUri) {
        NetworkConfigurationInner inner = this.serviceClient().get(resourceUri);
        if (inner != null) {
            return new NetworkConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NetworkConfiguration> createOrUpdateWithResponse(
        String resourceUri, NetworkConfigurationInner parameters, Context context) {
        Response<NetworkConfigurationInner> inner =
            this.serviceClient().createOrUpdateWithResponse(resourceUri, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkConfiguration createOrUpdate(String resourceUri, NetworkConfigurationInner parameters) {
        NetworkConfigurationInner inner = this.serviceClient().createOrUpdate(resourceUri, parameters);
        if (inner != null) {
            return new NetworkConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NetworkConfiguration> updateWithResponse(
        String resourceUri, NetworkConfigurationInner parameters, Context context) {
        Response<NetworkConfigurationInner> inner =
            this.serviceClient().updateWithResponse(resourceUri, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkConfiguration update(String resourceUri, NetworkConfigurationInner parameters) {
        NetworkConfigurationInner inner = this.serviceClient().update(resourceUri, parameters);
        if (inner != null) {
            return new NetworkConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private NetworkConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridcompute.HybridComputeManager manager() {
        return this.serviceManager;
    }
}
