// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.hybridcompute.models.LicenseProfileSubscriptionStatus;
import com.azure.resourcemanager.hybridcompute.models.ProductFeature;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** The LicenseProfileMachineInstanceViewProducts model. */
@Fluent
public final class LicenseProfileMachineInstanceViewProducts {
    /*
     * Hybrid Compute Windows Server Profile properties
     */
    @JsonProperty(value = "windowsServerProfile")
    private LicenseProfileArmWindowsServerProperties innerWindowsServerProfile;

    /*
     * Hybrid Compute Windows IoT Enterprise Profile properties
     */
    @JsonProperty(value = "iotEnterpriseProfile")
    private LicenseProfileArmIoTEnterpriseProperties innerIotEnterpriseProfile;

    /** Creates an instance of LicenseProfileMachineInstanceViewProducts class. */
    public LicenseProfileMachineInstanceViewProducts() {
    }

    /**
     * Get the innerWindowsServerProfile property: Hybrid Compute Windows Server Profile properties.
     *
     * @return the innerWindowsServerProfile value.
     */
    private LicenseProfileArmWindowsServerProperties innerWindowsServerProfile() {
        return this.innerWindowsServerProfile;
    }

    /**
     * Get the innerIotEnterpriseProfile property: Hybrid Compute Windows IoT Enterprise Profile properties.
     *
     * @return the innerIotEnterpriseProfile value.
     */
    private LicenseProfileArmIoTEnterpriseProperties innerIotEnterpriseProfile() {
        return this.innerIotEnterpriseProfile;
    }

    /**
     * Get the subscriptionStatus property: Indicates the subscription status of the Windows Server.
     *
     * @return the subscriptionStatus value.
     */
    public LicenseProfileSubscriptionStatus subscriptionStatus() {
        return this.innerWindowsServerProfile() == null ? null : this.innerWindowsServerProfile().subscriptionStatus();
    }

    /**
     * Set the subscriptionStatus property: Indicates the subscription status of the Windows Server.
     *
     * @param subscriptionStatus the subscriptionStatus value to set.
     * @return the LicenseProfileMachineInstanceViewProducts object itself.
     */
    public LicenseProfileMachineInstanceViewProducts withSubscriptionStatus(
        LicenseProfileSubscriptionStatus subscriptionStatus) {
        if (this.innerWindowsServerProfile() == null) {
            this.innerWindowsServerProfile = new LicenseProfileArmWindowsServerProperties();
        }
        this.innerWindowsServerProfile().withSubscriptionStatus(subscriptionStatus);
        return this;
    }

    /**
     * Get the billingStartDate property: The timestamp in UTC when the billing starts.
     *
     * @return the billingStartDate value.
     */
    public OffsetDateTime billingStartDate() {
        return this.innerWindowsServerProfile() == null ? null : this.innerWindowsServerProfile().billingStartDate();
    }

    /**
     * Get the disenrollmentDate property: The timestamp in UTC when the user disenrolled the feature.
     *
     * @return the disenrollmentDate value.
     */
    public OffsetDateTime disenrollmentDate() {
        return this.innerWindowsServerProfile() == null ? null : this.innerWindowsServerProfile().disenrollmentDate();
    }

    /**
     * Get the productFeatures property: The list of product features.
     *
     * @return the productFeatures value.
     */
    public List<ProductFeature> productFeatures() {
        return this.innerWindowsServerProfile() == null ? null : this.innerWindowsServerProfile().productFeatures();
    }

    /**
     * Set the productFeatures property: The list of product features.
     *
     * @param productFeatures the productFeatures value to set.
     * @return the LicenseProfileMachineInstanceViewProducts object itself.
     */
    public LicenseProfileMachineInstanceViewProducts withProductFeatures(List<ProductFeature> productFeatures) {
        if (this.innerWindowsServerProfile() == null) {
            this.innerWindowsServerProfile = new LicenseProfileArmWindowsServerProperties();
        }
        this.innerWindowsServerProfile().withProductFeatures(productFeatures);
        return this;
    }

    /**
     * Get the subscriptionStatus property: Indicates the subscription status of the Windows IoT Enterprise.
     *
     * @return the subscriptionStatus value.
     */
    public LicenseProfileSubscriptionStatus subscriptionStatusIotEnterpriseProfileSubscriptionStatus() {
        return this.innerIotEnterpriseProfile() == null ? null : this.innerIotEnterpriseProfile().subscriptionStatus();
    }

    /**
     * Set the subscriptionStatus property: Indicates the subscription status of the Windows IoT Enterprise.
     *
     * @param subscriptionStatus the subscriptionStatus value to set.
     * @return the LicenseProfileMachineInstanceViewProducts object itself.
     */
    public LicenseProfileMachineInstanceViewProducts withSubscriptionStatusIotEnterpriseProfileSubscriptionStatus(
        LicenseProfileSubscriptionStatus subscriptionStatus) {
        if (this.innerIotEnterpriseProfile() == null) {
            this.innerIotEnterpriseProfile = new LicenseProfileArmIoTEnterpriseProperties();
        }
        this.innerIotEnterpriseProfile().withSubscriptionStatus(subscriptionStatus);
        return this;
    }

    /**
     * Get the billingStartDate property: The timestamp in UTC when the billing starts.
     *
     * @return the billingStartDate value.
     */
    public OffsetDateTime billingStartDateIotEnterpriseProfileBillingStartDate() {
        return this.innerIotEnterpriseProfile() == null ? null : this.innerIotEnterpriseProfile().billingStartDate();
    }

    /**
     * Get the disenrollmentDate property: The timestamp in UTC when the user disenrolled the feature.
     *
     * @return the disenrollmentDate value.
     */
    public OffsetDateTime disenrollmentDateIotEnterpriseProfileDisenrollmentDate() {
        return this.innerIotEnterpriseProfile() == null ? null : this.innerIotEnterpriseProfile().disenrollmentDate();
    }

    /**
     * Get the productFeatures property: The list of product features.
     *
     * @return the productFeatures value.
     */
    public List<ProductFeature> productFeaturesIotEnterpriseProfileProductFeatures() {
        return this.innerIotEnterpriseProfile() == null ? null : this.innerIotEnterpriseProfile().productFeatures();
    }

    /**
     * Set the productFeatures property: The list of product features.
     *
     * @param productFeatures the productFeatures value to set.
     * @return the LicenseProfileMachineInstanceViewProducts object itself.
     */
    public LicenseProfileMachineInstanceViewProducts withProductFeaturesIotEnterpriseProfileProductFeatures(
        List<ProductFeature> productFeatures) {
        if (this.innerIotEnterpriseProfile() == null) {
            this.innerIotEnterpriseProfile = new LicenseProfileArmIoTEnterpriseProperties();
        }
        this.innerIotEnterpriseProfile().withProductFeatures(productFeatures);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerWindowsServerProfile() != null) {
            innerWindowsServerProfile().validate();
        }
        if (innerIotEnterpriseProfile() != null) {
            innerIotEnterpriseProfile().validate();
        }
    }
}
