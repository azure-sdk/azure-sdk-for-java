// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the assets of an orchestration project.
 */
@Fluent
public final class AnalyzeConversationAuthoringOrchestrationExportedProjectAssets
    extends AnalyzeConversationAuthoringExportedProjectAssets {
    /*
     * The type of project containing the assets.
     */
    @Generated
    private ProjectKind projectKind = ProjectKind.ORCHESTRATION;

    /*
     * Represents the intents of the project.
     */
    @Generated
    private List<AnalyzeConversationAuthoringOrchestrationExportedIntent> intents;

    /*
     * Represents the utterances of the project.
     */
    @Generated
    private List<AnalyzeConversationAuthoringOrchestrationExportedUtterance> utterances;

    /**
     * Creates an instance of AnalyzeConversationAuthoringOrchestrationExportedProjectAssets class.
     */
    @Generated
    public AnalyzeConversationAuthoringOrchestrationExportedProjectAssets() {
    }

    /**
     * Get the projectKind property: The type of project containing the assets.
     * 
     * @return the projectKind value.
     */
    @Generated
    @Override
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * Get the intents property: Represents the intents of the project.
     * 
     * @return the intents value.
     */
    @Generated
    public List<AnalyzeConversationAuthoringOrchestrationExportedIntent> getIntents() {
        return this.intents;
    }

    /**
     * Set the intents property: Represents the intents of the project.
     * 
     * @param intents the intents value to set.
     * @return the AnalyzeConversationAuthoringOrchestrationExportedProjectAssets object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringOrchestrationExportedProjectAssets
        setIntents(List<AnalyzeConversationAuthoringOrchestrationExportedIntent> intents) {
        this.intents = intents;
        return this;
    }

    /**
     * Get the utterances property: Represents the utterances of the project.
     * 
     * @return the utterances value.
     */
    @Generated
    public List<AnalyzeConversationAuthoringOrchestrationExportedUtterance> getUtterances() {
        return this.utterances;
    }

    /**
     * Set the utterances property: Represents the utterances of the project.
     * 
     * @param utterances the utterances value to set.
     * @return the AnalyzeConversationAuthoringOrchestrationExportedProjectAssets object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringOrchestrationExportedProjectAssets
        setUtterances(List<AnalyzeConversationAuthoringOrchestrationExportedUtterance> utterances) {
        this.utterances = utterances;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
        jsonWriter.writeArrayField("intents", this.intents, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("utterances", this.utterances, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringOrchestrationExportedProjectAssets from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringOrchestrationExportedProjectAssets if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * AnalyzeConversationAuthoringOrchestrationExportedProjectAssets.
     */
    @Generated
    public static AnalyzeConversationAuthoringOrchestrationExportedProjectAssets fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeConversationAuthoringOrchestrationExportedProjectAssets deserializedAnalyzeConversationAuthoringOrchestrationExportedProjectAssets
                = new AnalyzeConversationAuthoringOrchestrationExportedProjectAssets();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectKind".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringOrchestrationExportedProjectAssets.projectKind
                        = ProjectKind.fromString(reader.getString());
                } else if ("intents".equals(fieldName)) {
                    List<AnalyzeConversationAuthoringOrchestrationExportedIntent> intents = reader.readArray(
                        reader1 -> AnalyzeConversationAuthoringOrchestrationExportedIntent.fromJson(reader1));
                    deserializedAnalyzeConversationAuthoringOrchestrationExportedProjectAssets.intents = intents;
                } else if ("utterances".equals(fieldName)) {
                    List<AnalyzeConversationAuthoringOrchestrationExportedUtterance> utterances = reader.readArray(
                        reader1 -> AnalyzeConversationAuthoringOrchestrationExportedUtterance.fromJson(reader1));
                    deserializedAnalyzeConversationAuthoringOrchestrationExportedProjectAssets.utterances = utterances;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzeConversationAuthoringOrchestrationExportedProjectAssets;
        });
    }
}
