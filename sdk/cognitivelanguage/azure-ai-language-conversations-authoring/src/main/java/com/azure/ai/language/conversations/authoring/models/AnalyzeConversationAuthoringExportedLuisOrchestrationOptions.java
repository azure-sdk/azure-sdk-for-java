// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the orchestration options for a LUIS application target.
 */
@Immutable
public final class AnalyzeConversationAuthoringExportedLuisOrchestrationOptions
    extends AnalyzeConversationAuthoringExportedOrchestrationOptions {
    /*
     * The targetProjectKind property.
     */
    @Generated
    private OrchestrationTargetProjectKind targetProjectKind = OrchestrationTargetProjectKind.LUIS;

    /*
     * The LUIS application target details.
     */
    @Generated
    private final AnalyzeConversationAuthoringExportedLuisOrchestration luisOrchestration;

    /**
     * Creates an instance of AnalyzeConversationAuthoringExportedLuisOrchestrationOptions class.
     * 
     * @param luisOrchestration the luisOrchestration value to set.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedLuisOrchestrationOptions(
        AnalyzeConversationAuthoringExportedLuisOrchestration luisOrchestration) {
        this.luisOrchestration = luisOrchestration;
    }

    /**
     * Get the targetProjectKind property: The targetProjectKind property.
     * 
     * @return the targetProjectKind value.
     */
    @Generated
    @Override
    public OrchestrationTargetProjectKind getTargetProjectKind() {
        return this.targetProjectKind;
    }

    /**
     * Get the luisOrchestration property: The LUIS application target details.
     * 
     * @return the luisOrchestration value.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedLuisOrchestration getLuisOrchestration() {
        return this.luisOrchestration;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("luisOrchestration", this.luisOrchestration);
        jsonWriter.writeStringField("targetProjectKind",
            this.targetProjectKind == null ? null : this.targetProjectKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringExportedLuisOrchestrationOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringExportedLuisOrchestrationOptions if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * AnalyzeConversationAuthoringExportedLuisOrchestrationOptions.
     */
    @Generated
    public static AnalyzeConversationAuthoringExportedLuisOrchestrationOptions fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeConversationAuthoringExportedLuisOrchestration luisOrchestration = null;
            OrchestrationTargetProjectKind targetProjectKind = OrchestrationTargetProjectKind.LUIS;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("luisOrchestration".equals(fieldName)) {
                    luisOrchestration = AnalyzeConversationAuthoringExportedLuisOrchestration.fromJson(reader);
                } else if ("targetProjectKind".equals(fieldName)) {
                    targetProjectKind = OrchestrationTargetProjectKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            AnalyzeConversationAuthoringExportedLuisOrchestrationOptions deserializedAnalyzeConversationAuthoringExportedLuisOrchestrationOptions
                = new AnalyzeConversationAuthoringExportedLuisOrchestrationOptions(luisOrchestration);
            deserializedAnalyzeConversationAuthoringExportedLuisOrchestrationOptions.targetProjectKind
                = targetProjectKind;

            return deserializedAnalyzeConversationAuthoringExportedLuisOrchestrationOptions;
        });
    }
}
