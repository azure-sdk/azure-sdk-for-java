// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Objects;

/**
 * Represents a training config version.
 */
@Immutable
public final class AnalyzeConversationAuthoringTrainingConfigVersion
    implements JsonSerializable<AnalyzeConversationAuthoringTrainingConfigVersion> {
    /*
     * Represents the version of the config.
     */
    @Generated
    private final String trainingConfigVersion;

    /*
     * Represents the training config version expiration date.
     */
    @Generated
    private final LocalDate modelExpirationDate;

    /**
     * Creates an instance of AnalyzeConversationAuthoringTrainingConfigVersion class.
     * 
     * @param trainingConfigVersion the trainingConfigVersion value to set.
     * @param modelExpirationDate the modelExpirationDate value to set.
     */
    @Generated
    private AnalyzeConversationAuthoringTrainingConfigVersion(String trainingConfigVersion,
        LocalDate modelExpirationDate) {
        this.trainingConfigVersion = trainingConfigVersion;
        this.modelExpirationDate = modelExpirationDate;
    }

    /**
     * Get the trainingConfigVersion property: Represents the version of the config.
     * 
     * @return the trainingConfigVersion value.
     */
    @Generated
    public String getTrainingConfigVersion() {
        return this.trainingConfigVersion;
    }

    /**
     * Get the modelExpirationDate property: Represents the training config version expiration date.
     * 
     * @return the modelExpirationDate value.
     */
    @Generated
    public LocalDate getModelExpirationDate() {
        return this.modelExpirationDate;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("trainingConfigVersion", this.trainingConfigVersion);
        jsonWriter.writeStringField("modelExpirationDate", Objects.toString(this.modelExpirationDate, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringTrainingConfigVersion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringTrainingConfigVersion if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringTrainingConfigVersion.
     */
    @Generated
    public static AnalyzeConversationAuthoringTrainingConfigVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String trainingConfigVersion = null;
            LocalDate modelExpirationDate = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("trainingConfigVersion".equals(fieldName)) {
                    trainingConfigVersion = reader.getString();
                } else if ("modelExpirationDate".equals(fieldName)) {
                    modelExpirationDate
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return new AnalyzeConversationAuthoringTrainingConfigVersion(trainingConfigVersion, modelExpirationDate);
        });
    }
}
