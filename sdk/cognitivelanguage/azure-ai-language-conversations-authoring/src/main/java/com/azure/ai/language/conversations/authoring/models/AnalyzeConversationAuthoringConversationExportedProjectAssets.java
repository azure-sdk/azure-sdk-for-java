// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the exported assets of a conversational project.
 */
@Fluent
public final class AnalyzeConversationAuthoringConversationExportedProjectAssets
    extends AnalyzeConversationAuthoringExportedProjectAssets {
    /*
     * The type of project containing the assets.
     */
    @Generated
    private ProjectKind projectKind = ProjectKind.CONVERSATION;

    /*
     * The intents defined in the project.
     */
    @Generated
    private List<AnalyzeConversationAuthoringConversationExportedIntent> intents;

    /*
     * The entities defined in the project.
     */
    @Generated
    private List<AnalyzeConversationAuthoringConversationExportedEntity> entities;

    /*
     * The utterances defined in the project.
     */
    @Generated
    private List<AnalyzeConversationAuthoringConversationExportedUtterance> utterances;

    /**
     * Creates an instance of AnalyzeConversationAuthoringConversationExportedProjectAssets class.
     */
    @Generated
    public AnalyzeConversationAuthoringConversationExportedProjectAssets() {
    }

    /**
     * Get the projectKind property: The type of project containing the assets.
     * 
     * @return the projectKind value.
     */
    @Generated
    @Override
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * Get the intents property: The intents defined in the project.
     * 
     * @return the intents value.
     */
    @Generated
    public List<AnalyzeConversationAuthoringConversationExportedIntent> getIntents() {
        return this.intents;
    }

    /**
     * Set the intents property: The intents defined in the project.
     * 
     * @param intents the intents value to set.
     * @return the AnalyzeConversationAuthoringConversationExportedProjectAssets object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringConversationExportedProjectAssets
        setIntents(List<AnalyzeConversationAuthoringConversationExportedIntent> intents) {
        this.intents = intents;
        return this;
    }

    /**
     * Get the entities property: The entities defined in the project.
     * 
     * @return the entities value.
     */
    @Generated
    public List<AnalyzeConversationAuthoringConversationExportedEntity> getEntities() {
        return this.entities;
    }

    /**
     * Set the entities property: The entities defined in the project.
     * 
     * @param entities the entities value to set.
     * @return the AnalyzeConversationAuthoringConversationExportedProjectAssets object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringConversationExportedProjectAssets
        setEntities(List<AnalyzeConversationAuthoringConversationExportedEntity> entities) {
        this.entities = entities;
        return this;
    }

    /**
     * Get the utterances property: The utterances defined in the project.
     * 
     * @return the utterances value.
     */
    @Generated
    public List<AnalyzeConversationAuthoringConversationExportedUtterance> getUtterances() {
        return this.utterances;
    }

    /**
     * Set the utterances property: The utterances defined in the project.
     * 
     * @param utterances the utterances value to set.
     * @return the AnalyzeConversationAuthoringConversationExportedProjectAssets object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringConversationExportedProjectAssets
        setUtterances(List<AnalyzeConversationAuthoringConversationExportedUtterance> utterances) {
        this.utterances = utterances;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
        jsonWriter.writeArrayField("intents", this.intents, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("entities", this.entities, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("utterances", this.utterances, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringConversationExportedProjectAssets from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringConversationExportedProjectAssets if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * AnalyzeConversationAuthoringConversationExportedProjectAssets.
     */
    @Generated
    public static AnalyzeConversationAuthoringConversationExportedProjectAssets fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeConversationAuthoringConversationExportedProjectAssets deserializedAnalyzeConversationAuthoringConversationExportedProjectAssets
                = new AnalyzeConversationAuthoringConversationExportedProjectAssets();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectKind".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringConversationExportedProjectAssets.projectKind
                        = ProjectKind.fromString(reader.getString());
                } else if ("intents".equals(fieldName)) {
                    List<AnalyzeConversationAuthoringConversationExportedIntent> intents = reader
                        .readArray(reader1 -> AnalyzeConversationAuthoringConversationExportedIntent.fromJson(reader1));
                    deserializedAnalyzeConversationAuthoringConversationExportedProjectAssets.intents = intents;
                } else if ("entities".equals(fieldName)) {
                    List<AnalyzeConversationAuthoringConversationExportedEntity> entities = reader
                        .readArray(reader1 -> AnalyzeConversationAuthoringConversationExportedEntity.fromJson(reader1));
                    deserializedAnalyzeConversationAuthoringConversationExportedProjectAssets.entities = entities;
                } else if ("utterances".equals(fieldName)) {
                    List<AnalyzeConversationAuthoringConversationExportedUtterance> utterances = reader.readArray(
                        reader1 -> AnalyzeConversationAuthoringConversationExportedUtterance.fromJson(reader1));
                    deserializedAnalyzeConversationAuthoringConversationExportedProjectAssets.utterances = utterances;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzeConversationAuthoringConversationExportedProjectAssets;
        });
    }
}
