// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the options for swapping two deployments together.
 */
@Immutable
public final class AnalyzeConversationAuthoringSwapDeploymentsOptions
    implements JsonSerializable<AnalyzeConversationAuthoringSwapDeploymentsOptions> {
    /*
     * Represents the first deployment name.
     */
    @Generated
    private final String firstDeploymentName;

    /*
     * Represents the second deployment name.
     */
    @Generated
    private final String secondDeploymentName;

    /**
     * Creates an instance of AnalyzeConversationAuthoringSwapDeploymentsOptions class.
     * 
     * @param firstDeploymentName the firstDeploymentName value to set.
     * @param secondDeploymentName the secondDeploymentName value to set.
     */
    @Generated
    public AnalyzeConversationAuthoringSwapDeploymentsOptions(String firstDeploymentName, String secondDeploymentName) {
        this.firstDeploymentName = firstDeploymentName;
        this.secondDeploymentName = secondDeploymentName;
    }

    /**
     * Get the firstDeploymentName property: Represents the first deployment name.
     * 
     * @return the firstDeploymentName value.
     */
    @Generated
    public String getFirstDeploymentName() {
        return this.firstDeploymentName;
    }

    /**
     * Get the secondDeploymentName property: Represents the second deployment name.
     * 
     * @return the secondDeploymentName value.
     */
    @Generated
    public String getSecondDeploymentName() {
        return this.secondDeploymentName;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("firstDeploymentName", this.firstDeploymentName);
        jsonWriter.writeStringField("secondDeploymentName", this.secondDeploymentName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringSwapDeploymentsOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringSwapDeploymentsOptions if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringSwapDeploymentsOptions.
     */
    @Generated
    public static AnalyzeConversationAuthoringSwapDeploymentsOptions fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String firstDeploymentName = null;
            String secondDeploymentName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("firstDeploymentName".equals(fieldName)) {
                    firstDeploymentName = reader.getString();
                } else if ("secondDeploymentName".equals(fieldName)) {
                    secondDeploymentName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new AnalyzeConversationAuthoringSwapDeploymentsOptions(firstDeploymentName, secondDeploymentName);
        });
    }
}
