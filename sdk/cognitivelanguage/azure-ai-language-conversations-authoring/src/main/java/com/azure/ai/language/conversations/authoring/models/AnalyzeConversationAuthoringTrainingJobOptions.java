// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the options for starting a new training job.
 */
@Fluent
public final class AnalyzeConversationAuthoringTrainingJobOptions
    implements JsonSerializable<AnalyzeConversationAuthoringTrainingJobOptions> {
    /*
     * Represents the output model label.
     */
    @Generated
    private final String modelLabel;

    /*
     * Represents training config version. By default, "latest" value is used which uses the latest released training
     * config version.
     */
    @Generated
    private String trainingConfigVersion;

    /*
     * Represents the mode of the training operation.
     */
    @Generated
    private final TrainingMode trainingMode;

    /*
     * Represents the evaluation options. By default, the evaluation kind is percentage, with training split percentage
     * as 80, and testing split percentage as 20.
     */
    @Generated
    private AnalyzeConversationAuthoringEvaluationOptions evaluationOptions;

    /**
     * Creates an instance of AnalyzeConversationAuthoringTrainingJobOptions class.
     * 
     * @param modelLabel the modelLabel value to set.
     * @param trainingMode the trainingMode value to set.
     */
    @Generated
    public AnalyzeConversationAuthoringTrainingJobOptions(String modelLabel, TrainingMode trainingMode) {
        this.modelLabel = modelLabel;
        this.trainingMode = trainingMode;
    }

    /**
     * Get the modelLabel property: Represents the output model label.
     * 
     * @return the modelLabel value.
     */
    @Generated
    public String getModelLabel() {
        return this.modelLabel;
    }

    /**
     * Get the trainingConfigVersion property: Represents training config version. By default, "latest" value is used
     * which uses the latest released training config version.
     * 
     * @return the trainingConfigVersion value.
     */
    @Generated
    public String getTrainingConfigVersion() {
        return this.trainingConfigVersion;
    }

    /**
     * Set the trainingConfigVersion property: Represents training config version. By default, "latest" value is used
     * which uses the latest released training config version.
     * 
     * @param trainingConfigVersion the trainingConfigVersion value to set.
     * @return the AnalyzeConversationAuthoringTrainingJobOptions object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringTrainingJobOptions setTrainingConfigVersion(String trainingConfigVersion) {
        this.trainingConfigVersion = trainingConfigVersion;
        return this;
    }

    /**
     * Get the trainingMode property: Represents the mode of the training operation.
     * 
     * @return the trainingMode value.
     */
    @Generated
    public TrainingMode getTrainingMode() {
        return this.trainingMode;
    }

    /**
     * Get the evaluationOptions property: Represents the evaluation options. By default, the evaluation kind is
     * percentage, with training split percentage as 80, and testing split percentage as 20.
     * 
     * @return the evaluationOptions value.
     */
    @Generated
    public AnalyzeConversationAuthoringEvaluationOptions getEvaluationOptions() {
        return this.evaluationOptions;
    }

    /**
     * Set the evaluationOptions property: Represents the evaluation options. By default, the evaluation kind is
     * percentage, with training split percentage as 80, and testing split percentage as 20.
     * 
     * @param evaluationOptions the evaluationOptions value to set.
     * @return the AnalyzeConversationAuthoringTrainingJobOptions object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringTrainingJobOptions
        setEvaluationOptions(AnalyzeConversationAuthoringEvaluationOptions evaluationOptions) {
        this.evaluationOptions = evaluationOptions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("modelLabel", this.modelLabel);
        jsonWriter.writeStringField("trainingMode", this.trainingMode == null ? null : this.trainingMode.toString());
        jsonWriter.writeStringField("trainingConfigVersion", this.trainingConfigVersion);
        jsonWriter.writeJsonField("evaluationOptions", this.evaluationOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringTrainingJobOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringTrainingJobOptions if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringTrainingJobOptions.
     */
    @Generated
    public static AnalyzeConversationAuthoringTrainingJobOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String modelLabel = null;
            TrainingMode trainingMode = null;
            String trainingConfigVersion = null;
            AnalyzeConversationAuthoringEvaluationOptions evaluationOptions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("modelLabel".equals(fieldName)) {
                    modelLabel = reader.getString();
                } else if ("trainingMode".equals(fieldName)) {
                    trainingMode = TrainingMode.fromString(reader.getString());
                } else if ("trainingConfigVersion".equals(fieldName)) {
                    trainingConfigVersion = reader.getString();
                } else if ("evaluationOptions".equals(fieldName)) {
                    evaluationOptions = AnalyzeConversationAuthoringEvaluationOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            AnalyzeConversationAuthoringTrainingJobOptions deserializedAnalyzeConversationAuthoringTrainingJobOptions
                = new AnalyzeConversationAuthoringTrainingJobOptions(modelLabel, trainingMode);
            deserializedAnalyzeConversationAuthoringTrainingJobOptions.trainingConfigVersion = trainingConfigVersion;
            deserializedAnalyzeConversationAuthoringTrainingJobOptions.evaluationOptions = evaluationOptions;

            return deserializedAnalyzeConversationAuthoringTrainingJobOptions;
        });
    }
}
