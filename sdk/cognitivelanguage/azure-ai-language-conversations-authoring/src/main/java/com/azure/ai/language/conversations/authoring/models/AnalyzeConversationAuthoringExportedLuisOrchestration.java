// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the orchestration details for a LUIS application target.
 */
@Fluent
public final class AnalyzeConversationAuthoringExportedLuisOrchestration
    implements JsonSerializable<AnalyzeConversationAuthoringExportedLuisOrchestration> {
    /*
     * The LUIS application ID.
     */
    @Generated
    private final String appId;

    /*
     * The targeted version Id.
     */
    @Generated
    private String appVersion;

    /*
     * The targeted slot name.
     */
    @Generated
    private String slotName;

    /**
     * Creates an instance of AnalyzeConversationAuthoringExportedLuisOrchestration class.
     * 
     * @param appId the appId value to set.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedLuisOrchestration(String appId) {
        this.appId = appId;
    }

    /**
     * Get the appId property: The LUIS application ID.
     * 
     * @return the appId value.
     */
    @Generated
    public String getAppId() {
        return this.appId;
    }

    /**
     * Get the appVersion property: The targeted version Id.
     * 
     * @return the appVersion value.
     */
    @Generated
    public String getAppVersion() {
        return this.appVersion;
    }

    /**
     * Set the appVersion property: The targeted version Id.
     * 
     * @param appVersion the appVersion value to set.
     * @return the AnalyzeConversationAuthoringExportedLuisOrchestration object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedLuisOrchestration setAppVersion(String appVersion) {
        this.appVersion = appVersion;
        return this;
    }

    /**
     * Get the slotName property: The targeted slot name.
     * 
     * @return the slotName value.
     */
    @Generated
    public String getSlotName() {
        return this.slotName;
    }

    /**
     * Set the slotName property: The targeted slot name.
     * 
     * @param slotName the slotName value to set.
     * @return the AnalyzeConversationAuthoringExportedLuisOrchestration object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedLuisOrchestration setSlotName(String slotName) {
        this.slotName = slotName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("appId", this.appId);
        jsonWriter.writeStringField("appVersion", this.appVersion);
        jsonWriter.writeStringField("slotName", this.slotName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringExportedLuisOrchestration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringExportedLuisOrchestration if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringExportedLuisOrchestration.
     */
    @Generated
    public static AnalyzeConversationAuthoringExportedLuisOrchestration fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String appId = null;
            String appVersion = null;
            String slotName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("appId".equals(fieldName)) {
                    appId = reader.getString();
                } else if ("appVersion".equals(fieldName)) {
                    appVersion = reader.getString();
                } else if ("slotName".equals(fieldName)) {
                    slotName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AnalyzeConversationAuthoringExportedLuisOrchestration deserializedAnalyzeConversationAuthoringExportedLuisOrchestration
                = new AnalyzeConversationAuthoringExportedLuisOrchestration(appId);
            deserializedAnalyzeConversationAuthoringExportedLuisOrchestration.appVersion = appVersion;
            deserializedAnalyzeConversationAuthoringExportedLuisOrchestration.slotName = slotName;

            return deserializedAnalyzeConversationAuthoringExportedLuisOrchestration;
        });
    }
}
