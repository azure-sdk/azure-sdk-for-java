// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents a list of synonyms inside a list component.
 */
@Fluent
public final class AnalyzeConversationAuthoringExportedEntityListSynonym
    implements JsonSerializable<AnalyzeConversationAuthoringExportedEntityListSynonym> {
    /*
     * Represents the language of the synonyms. This is BCP-47 representation of a language. For example, use "en" for
     * English, "en-gb" for English (UK), "es" for Spanish etc.
     */
    @Generated
    private String language;

    /*
     * The list of synonyms.
     */
    @Generated
    private List<String> values;

    /**
     * Creates an instance of AnalyzeConversationAuthoringExportedEntityListSynonym class.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedEntityListSynonym() {
    }

    /**
     * Get the language property: Represents the language of the synonyms. This is BCP-47 representation of a language.
     * For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
     * 
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Set the language property: Represents the language of the synonyms. This is BCP-47 representation of a language.
     * For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
     * 
     * @param language the language value to set.
     * @return the AnalyzeConversationAuthoringExportedEntityListSynonym object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedEntityListSynonym setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Get the values property: The list of synonyms.
     * 
     * @return the values value.
     */
    @Generated
    public List<String> getValues() {
        return this.values;
    }

    /**
     * Set the values property: The list of synonyms.
     * 
     * @param values the values value to set.
     * @return the AnalyzeConversationAuthoringExportedEntityListSynonym object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedEntityListSynonym setValues(List<String> values) {
        this.values = values;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("language", this.language);
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringExportedEntityListSynonym from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringExportedEntityListSynonym if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringExportedEntityListSynonym.
     */
    @Generated
    public static AnalyzeConversationAuthoringExportedEntityListSynonym fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeConversationAuthoringExportedEntityListSynonym deserializedAnalyzeConversationAuthoringExportedEntityListSynonym
                = new AnalyzeConversationAuthoringExportedEntityListSynonym();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("language".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringExportedEntityListSynonym.language = reader.getString();
                } else if ("values".equals(fieldName)) {
                    List<String> values = reader.readArray(reader1 -> reader1.getString());
                    deserializedAnalyzeConversationAuthoringExportedEntityListSynonym.values = values;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzeConversationAuthoringExportedEntityListSynonym;
        });
    }
}
