// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the options used to define the orchestration behavior of an intent.
 */
@Immutable
public class AnalyzeConversationAuthoringExportedOrchestrationOptions
    implements JsonSerializable<AnalyzeConversationAuthoringExportedOrchestrationOptions> {
    /*
     * The targetProjectKind property.
     */
    @Generated
    private OrchestrationTargetProjectKind targetProjectKind
        = OrchestrationTargetProjectKind.fromString("AnalyzeConversationAuthoringExportedOrchestrationOptions");

    /**
     * Creates an instance of AnalyzeConversationAuthoringExportedOrchestrationOptions class.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedOrchestrationOptions() {
    }

    /**
     * Get the targetProjectKind property: The targetProjectKind property.
     * 
     * @return the targetProjectKind value.
     */
    @Generated
    public OrchestrationTargetProjectKind getTargetProjectKind() {
        return this.targetProjectKind;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetProjectKind",
            this.targetProjectKind == null ? null : this.targetProjectKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringExportedOrchestrationOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringExportedOrchestrationOptions if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * AnalyzeConversationAuthoringExportedOrchestrationOptions.
     */
    @Generated
    public static AnalyzeConversationAuthoringExportedOrchestrationOptions fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("targetProjectKind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Conversation".equals(discriminatorValue)) {
                    return AnalyzeConversationAuthoringExportedConversationOrchestrationOptions
                        .fromJson(readerToUse.reset());
                } else if ("Luis".equals(discriminatorValue)) {
                    return AnalyzeConversationAuthoringExportedLuisOrchestrationOptions.fromJson(readerToUse.reset());
                } else if ("QuestionAnswering".equals(discriminatorValue)) {
                    return AnalyzeConversationAuthoringExportedQuestionAnsweringOrchestrationOptions
                        .fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static AnalyzeConversationAuthoringExportedOrchestrationOptions fromJsonKnownDiscriminator(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeConversationAuthoringExportedOrchestrationOptions deserializedAnalyzeConversationAuthoringExportedOrchestrationOptions
                = new AnalyzeConversationAuthoringExportedOrchestrationOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetProjectKind".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringExportedOrchestrationOptions.targetProjectKind
                        = OrchestrationTargetProjectKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzeConversationAuthoringExportedOrchestrationOptions;
        });
    }
}
