// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Represents the options for copying an existing project to another Azure resource.
 */
@Immutable
public final class AnalyzeConversationAuthoringCopyProjectOptions
    implements JsonSerializable<AnalyzeConversationAuthoringCopyProjectOptions> {
    /*
     * Represents the project kind.
     */
    @Generated
    private final ProjectKind projectKind;

    /*
     * The project name to be copied-into.
     */
    @Generated
    private final String targetProjectName;

    /*
     * The access token.
     */
    @Generated
    private final String accessToken;

    /*
     * The expiration of the access token.
     */
    @Generated
    private final OffsetDateTime expiresAt;

    /*
     * Represents the target Azure resource ID.
     */
    @Generated
    private final String targetResourceId;

    /*
     * Represents the target Azure resource region.
     */
    @Generated
    private final String targetResourceRegion;

    /**
     * Creates an instance of AnalyzeConversationAuthoringCopyProjectOptions class.
     * 
     * @param projectKind the projectKind value to set.
     * @param targetProjectName the targetProjectName value to set.
     * @param accessToken the accessToken value to set.
     * @param expiresAt the expiresAt value to set.
     * @param targetResourceId the targetResourceId value to set.
     * @param targetResourceRegion the targetResourceRegion value to set.
     */
    @Generated
    public AnalyzeConversationAuthoringCopyProjectOptions(ProjectKind projectKind, String targetProjectName,
        String accessToken, OffsetDateTime expiresAt, String targetResourceId, String targetResourceRegion) {
        this.projectKind = projectKind;
        this.targetProjectName = targetProjectName;
        this.accessToken = accessToken;
        this.expiresAt = expiresAt;
        this.targetResourceId = targetResourceId;
        this.targetResourceRegion = targetResourceRegion;
    }

    /**
     * Get the projectKind property: Represents the project kind.
     * 
     * @return the projectKind value.
     */
    @Generated
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * Get the targetProjectName property: The project name to be copied-into.
     * 
     * @return the targetProjectName value.
     */
    @Generated
    public String getTargetProjectName() {
        return this.targetProjectName;
    }

    /**
     * Get the accessToken property: The access token.
     * 
     * @return the accessToken value.
     */
    @Generated
    public String getAccessToken() {
        return this.accessToken;
    }

    /**
     * Get the expiresAt property: The expiration of the access token.
     * 
     * @return the expiresAt value.
     */
    @Generated
    public OffsetDateTime getExpiresAt() {
        return this.expiresAt;
    }

    /**
     * Get the targetResourceId property: Represents the target Azure resource ID.
     * 
     * @return the targetResourceId value.
     */
    @Generated
    public String getTargetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Get the targetResourceRegion property: Represents the target Azure resource region.
     * 
     * @return the targetResourceRegion value.
     */
    @Generated
    public String getTargetResourceRegion() {
        return this.targetResourceRegion;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
        jsonWriter.writeStringField("targetProjectName", this.targetProjectName);
        jsonWriter.writeStringField("accessToken", this.accessToken);
        jsonWriter.writeStringField("expiresAt",
            this.expiresAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiresAt));
        jsonWriter.writeStringField("targetResourceId", this.targetResourceId);
        jsonWriter.writeStringField("targetResourceRegion", this.targetResourceRegion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringCopyProjectOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringCopyProjectOptions if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringCopyProjectOptions.
     */
    @Generated
    public static AnalyzeConversationAuthoringCopyProjectOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectKind projectKind = null;
            String targetProjectName = null;
            String accessToken = null;
            OffsetDateTime expiresAt = null;
            String targetResourceId = null;
            String targetResourceRegion = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectKind".equals(fieldName)) {
                    projectKind = ProjectKind.fromString(reader.getString());
                } else if ("targetProjectName".equals(fieldName)) {
                    targetProjectName = reader.getString();
                } else if ("accessToken".equals(fieldName)) {
                    accessToken = reader.getString();
                } else if ("expiresAt".equals(fieldName)) {
                    expiresAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("targetResourceId".equals(fieldName)) {
                    targetResourceId = reader.getString();
                } else if ("targetResourceRegion".equals(fieldName)) {
                    targetResourceRegion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new AnalyzeConversationAuthoringCopyProjectOptions(projectKind, targetProjectName, accessToken,
                expiresAt, targetResourceId, targetResourceRegion);
        });
    }
}
