// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the evaluation result for an entity.
 */
@Immutable
public final class AnalyzeConversationAuthoringEntityEvaluationSummary
    implements JsonSerializable<AnalyzeConversationAuthoringEntityEvaluationSummary> {
    /*
     * Represents the model precision
     */
    @Generated
    private final double f1;

    /*
     * Represents the model recall
     */
    @Generated
    private final double precision;

    /*
     * Represents the model F1 score
     */
    @Generated
    private final double recall;

    /*
     * Represents the count of true positive
     */
    @Generated
    private final int truePositiveCount;

    /*
     * Represents the count of true negative
     */
    @Generated
    private final int trueNegativeCount;

    /*
     * Represents the count of false positive
     */
    @Generated
    private final int falsePositiveCount;

    /*
     * Represents the count of false negative
     */
    @Generated
    private final int falseNegativeCount;

    /**
     * Creates an instance of AnalyzeConversationAuthoringEntityEvaluationSummary class.
     * 
     * @param f1 the f1 value to set.
     * @param precision the precision value to set.
     * @param recall the recall value to set.
     * @param truePositiveCount the truePositiveCount value to set.
     * @param trueNegativeCount the trueNegativeCount value to set.
     * @param falsePositiveCount the falsePositiveCount value to set.
     * @param falseNegativeCount the falseNegativeCount value to set.
     */
    @Generated
    private AnalyzeConversationAuthoringEntityEvaluationSummary(double f1, double precision, double recall,
        int truePositiveCount, int trueNegativeCount, int falsePositiveCount, int falseNegativeCount) {
        this.f1 = f1;
        this.precision = precision;
        this.recall = recall;
        this.truePositiveCount = truePositiveCount;
        this.trueNegativeCount = trueNegativeCount;
        this.falsePositiveCount = falsePositiveCount;
        this.falseNegativeCount = falseNegativeCount;
    }

    /**
     * Get the f1 property: Represents the model precision.
     * 
     * @return the f1 value.
     */
    @Generated
    public double getF1() {
        return this.f1;
    }

    /**
     * Get the precision property: Represents the model recall.
     * 
     * @return the precision value.
     */
    @Generated
    public double getPrecision() {
        return this.precision;
    }

    /**
     * Get the recall property: Represents the model F1 score.
     * 
     * @return the recall value.
     */
    @Generated
    public double getRecall() {
        return this.recall;
    }

    /**
     * Get the truePositiveCount property: Represents the count of true positive.
     * 
     * @return the truePositiveCount value.
     */
    @Generated
    public int getTruePositiveCount() {
        return this.truePositiveCount;
    }

    /**
     * Get the trueNegativeCount property: Represents the count of true negative.
     * 
     * @return the trueNegativeCount value.
     */
    @Generated
    public int getTrueNegativeCount() {
        return this.trueNegativeCount;
    }

    /**
     * Get the falsePositiveCount property: Represents the count of false positive.
     * 
     * @return the falsePositiveCount value.
     */
    @Generated
    public int getFalsePositiveCount() {
        return this.falsePositiveCount;
    }

    /**
     * Get the falseNegativeCount property: Represents the count of false negative.
     * 
     * @return the falseNegativeCount value.
     */
    @Generated
    public int getFalseNegativeCount() {
        return this.falseNegativeCount;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("f1", this.f1);
        jsonWriter.writeDoubleField("precision", this.precision);
        jsonWriter.writeDoubleField("recall", this.recall);
        jsonWriter.writeIntField("truePositiveCount", this.truePositiveCount);
        jsonWriter.writeIntField("trueNegativeCount", this.trueNegativeCount);
        jsonWriter.writeIntField("falsePositiveCount", this.falsePositiveCount);
        jsonWriter.writeIntField("falseNegativeCount", this.falseNegativeCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringEntityEvaluationSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringEntityEvaluationSummary if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringEntityEvaluationSummary.
     */
    @Generated
    public static AnalyzeConversationAuthoringEntityEvaluationSummary fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            double f1 = 0.0;
            double precision = 0.0;
            double recall = 0.0;
            int truePositiveCount = 0;
            int trueNegativeCount = 0;
            int falsePositiveCount = 0;
            int falseNegativeCount = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("f1".equals(fieldName)) {
                    f1 = reader.getDouble();
                } else if ("precision".equals(fieldName)) {
                    precision = reader.getDouble();
                } else if ("recall".equals(fieldName)) {
                    recall = reader.getDouble();
                } else if ("truePositiveCount".equals(fieldName)) {
                    truePositiveCount = reader.getInt();
                } else if ("trueNegativeCount".equals(fieldName)) {
                    trueNegativeCount = reader.getInt();
                } else if ("falsePositiveCount".equals(fieldName)) {
                    falsePositiveCount = reader.getInt();
                } else if ("falseNegativeCount".equals(fieldName)) {
                    falseNegativeCount = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new AnalyzeConversationAuthoringEntityEvaluationSummary(f1, precision, recall, truePositiveCount,
                trueNegativeCount, falsePositiveCount, falseNegativeCount);
        });
    }
}
