// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Objects;

/**
 * Represents a project deployment.
 */
@Immutable
public final class AnalyzeConversationAuthoringProjectDeployment
    implements JsonSerializable<AnalyzeConversationAuthoringProjectDeployment> {
    /*
     * Represents deployment name.
     */
    @Generated
    private String deploymentName;

    /*
     * Represents deployment modelId.
     */
    @Generated
    private final String modelId;

    /*
     * Represents deployment last trained time.
     */
    @Generated
    private final OffsetDateTime lastTrainedDateTime;

    /*
     * Represents deployment last deployed time.
     */
    @Generated
    private final OffsetDateTime lastDeployedDateTime;

    /*
     * Represents deployment expiration date in the runtime.
     */
    @Generated
    private final LocalDate deploymentExpirationDate;

    /*
     * Represents model training config version.
     */
    @Generated
    private final String modelTrainingConfigVersion;

    /*
     * Represents the metadata of the assigned Azure resources.
     */
    @Generated
    private final List<AnalyzeConversationAuthoringDeploymentResource> assignedResources;

    /**
     * Creates an instance of AnalyzeConversationAuthoringProjectDeployment class.
     * 
     * @param modelId the modelId value to set.
     * @param lastTrainedDateTime the lastTrainedDateTime value to set.
     * @param lastDeployedDateTime the lastDeployedDateTime value to set.
     * @param deploymentExpirationDate the deploymentExpirationDate value to set.
     * @param modelTrainingConfigVersion the modelTrainingConfigVersion value to set.
     * @param assignedResources the assignedResources value to set.
     */
    @Generated
    private AnalyzeConversationAuthoringProjectDeployment(String modelId, OffsetDateTime lastTrainedDateTime,
        OffsetDateTime lastDeployedDateTime, LocalDate deploymentExpirationDate, String modelTrainingConfigVersion,
        List<AnalyzeConversationAuthoringDeploymentResource> assignedResources) {
        this.modelId = modelId;
        this.lastTrainedDateTime = lastTrainedDateTime;
        this.lastDeployedDateTime = lastDeployedDateTime;
        this.deploymentExpirationDate = deploymentExpirationDate;
        this.modelTrainingConfigVersion = modelTrainingConfigVersion;
        this.assignedResources = assignedResources;
    }

    /**
     * Get the deploymentName property: Represents deployment name.
     * 
     * @return the deploymentName value.
     */
    @Generated
    public String getDeploymentName() {
        return this.deploymentName;
    }

    /**
     * Get the modelId property: Represents deployment modelId.
     * 
     * @return the modelId value.
     */
    @Generated
    public String getModelId() {
        return this.modelId;
    }

    /**
     * Get the lastTrainedDateTime property: Represents deployment last trained time.
     * 
     * @return the lastTrainedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastTrainedDateTime() {
        return this.lastTrainedDateTime;
    }

    /**
     * Get the lastDeployedDateTime property: Represents deployment last deployed time.
     * 
     * @return the lastDeployedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastDeployedDateTime() {
        return this.lastDeployedDateTime;
    }

    /**
     * Get the deploymentExpirationDate property: Represents deployment expiration date in the runtime.
     * 
     * @return the deploymentExpirationDate value.
     */
    @Generated
    public LocalDate getDeploymentExpirationDate() {
        return this.deploymentExpirationDate;
    }

    /**
     * Get the modelTrainingConfigVersion property: Represents model training config version.
     * 
     * @return the modelTrainingConfigVersion value.
     */
    @Generated
    public String getModelTrainingConfigVersion() {
        return this.modelTrainingConfigVersion;
    }

    /**
     * Get the assignedResources property: Represents the metadata of the assigned Azure resources.
     * 
     * @return the assignedResources value.
     */
    @Generated
    public List<AnalyzeConversationAuthoringDeploymentResource> getAssignedResources() {
        return this.assignedResources;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("modelId", this.modelId);
        jsonWriter.writeStringField("lastTrainedDateTime",
            this.lastTrainedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastTrainedDateTime));
        jsonWriter.writeStringField("lastDeployedDateTime",
            this.lastDeployedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastDeployedDateTime));
        jsonWriter.writeStringField("deploymentExpirationDate", Objects.toString(this.deploymentExpirationDate, null));
        jsonWriter.writeStringField("modelTrainingConfigVersion", this.modelTrainingConfigVersion);
        jsonWriter.writeArrayField("assignedResources", this.assignedResources,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringProjectDeployment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringProjectDeployment if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringProjectDeployment.
     */
    @Generated
    public static AnalyzeConversationAuthoringProjectDeployment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String deploymentName = null;
            String modelId = null;
            OffsetDateTime lastTrainedDateTime = null;
            OffsetDateTime lastDeployedDateTime = null;
            LocalDate deploymentExpirationDate = null;
            String modelTrainingConfigVersion = null;
            List<AnalyzeConversationAuthoringDeploymentResource> assignedResources = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deploymentName".equals(fieldName)) {
                    deploymentName = reader.getString();
                } else if ("modelId".equals(fieldName)) {
                    modelId = reader.getString();
                } else if ("lastTrainedDateTime".equals(fieldName)) {
                    lastTrainedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastDeployedDateTime".equals(fieldName)) {
                    lastDeployedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("deploymentExpirationDate".equals(fieldName)) {
                    deploymentExpirationDate
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else if ("modelTrainingConfigVersion".equals(fieldName)) {
                    modelTrainingConfigVersion = reader.getString();
                } else if ("assignedResources".equals(fieldName)) {
                    assignedResources
                        = reader.readArray(reader1 -> AnalyzeConversationAuthoringDeploymentResource.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            AnalyzeConversationAuthoringProjectDeployment deserializedAnalyzeConversationAuthoringProjectDeployment
                = new AnalyzeConversationAuthoringProjectDeployment(modelId, lastTrainedDateTime, lastDeployedDateTime,
                    deploymentExpirationDate, modelTrainingConfigVersion, assignedResources);
            deserializedAnalyzeConversationAuthoringProjectDeployment.deploymentName = deploymentName;

            return deserializedAnalyzeConversationAuthoringProjectDeployment;
        });
    }
}
