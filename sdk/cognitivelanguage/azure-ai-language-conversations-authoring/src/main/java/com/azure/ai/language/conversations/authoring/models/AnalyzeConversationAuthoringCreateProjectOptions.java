// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.ai.language.conversations.authoring.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Represents the options used to create or update a project.
 */
@Fluent
public final class AnalyzeConversationAuthoringCreateProjectOptions
    implements JsonSerializable<AnalyzeConversationAuthoringCreateProjectOptions> {
    /*
     * Represents the project kind.
     */
    @Generated
    private ProjectKind projectKind;

    /*
     * The project settings.
     */
    @Generated
    private AnalyzeConversationAuthoringProjectSettings settings;

    /*
     * The storage container name in case of conversation summarization.
     */
    @Generated
    private String storageInputContainerName;

    /*
     * The new project name.
     */
    @Generated
    private String projectName;

    /*
     * Whether the project would be used for multiple languages or not.
     */
    @Generated
    private Boolean multilingual;

    /*
     * The project description.
     */
    @Generated
    private String description;

    /*
     * The project language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for
     * English (UK), "es" for Spanish etc.
     */
    @Generated
    private String language;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setAnalyzeConversationAuthoringCreateProjectOptionsAccessor(
            new JsonMergePatchHelper.AnalyzeConversationAuthoringCreateProjectOptionsAccessor() {
                @Override
                public AnalyzeConversationAuthoringCreateProjectOptions prepareModelForJsonMergePatch(
                    AnalyzeConversationAuthoringCreateProjectOptions model, boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(AnalyzeConversationAuthoringCreateProjectOptions model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * Creates an instance of AnalyzeConversationAuthoringCreateProjectOptions class.
     */
    @Generated
    public AnalyzeConversationAuthoringCreateProjectOptions() {
    }

    /**
     * Get the projectKind property: Represents the project kind.
     * 
     * @return the projectKind value.
     */
    @Generated
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * Set the projectKind property: Represents the project kind.
     * <p>Required when create the resource.</p>
     * 
     * @param projectKind the projectKind value to set.
     * @return the AnalyzeConversationAuthoringCreateProjectOptions object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringCreateProjectOptions setProjectKind(ProjectKind projectKind) {
        this.projectKind = projectKind;
        this.updatedProperties.add("projectKind");
        return this;
    }

    /**
     * Get the settings property: The project settings.
     * 
     * @return the settings value.
     */
    @Generated
    public AnalyzeConversationAuthoringProjectSettings getSettings() {
        return this.settings;
    }

    /**
     * Set the settings property: The project settings.
     * 
     * @param settings the settings value to set.
     * @return the AnalyzeConversationAuthoringCreateProjectOptions object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringCreateProjectOptions
        setSettings(AnalyzeConversationAuthoringProjectSettings settings) {
        this.settings = settings;
        this.updatedProperties.add("settings");
        return this;
    }

    /**
     * Get the storageInputContainerName property: The storage container name in case of conversation summarization.
     * 
     * @return the storageInputContainerName value.
     */
    @Generated
    public String getStorageInputContainerName() {
        return this.storageInputContainerName;
    }

    /**
     * Set the storageInputContainerName property: The storage container name in case of conversation summarization.
     * 
     * @param storageInputContainerName the storageInputContainerName value to set.
     * @return the AnalyzeConversationAuthoringCreateProjectOptions object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringCreateProjectOptions
        setStorageInputContainerName(String storageInputContainerName) {
        this.storageInputContainerName = storageInputContainerName;
        this.updatedProperties.add("storageInputContainerName");
        return this;
    }

    /**
     * Get the projectName property: The new project name.
     * 
     * @return the projectName value.
     */
    @Generated
    public String getProjectName() {
        return this.projectName;
    }

    /**
     * Set the projectName property: The new project name.
     * <p>Required when create the resource.</p>
     * 
     * @param projectName the projectName value to set.
     * @return the AnalyzeConversationAuthoringCreateProjectOptions object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringCreateProjectOptions setProjectName(String projectName) {
        this.projectName = projectName;
        this.updatedProperties.add("projectName");
        return this;
    }

    /**
     * Get the multilingual property: Whether the project would be used for multiple languages or not.
     * 
     * @return the multilingual value.
     */
    @Generated
    public Boolean isMultilingual() {
        return this.multilingual;
    }

    /**
     * Set the multilingual property: Whether the project would be used for multiple languages or not.
     * 
     * @param multilingual the multilingual value to set.
     * @return the AnalyzeConversationAuthoringCreateProjectOptions object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringCreateProjectOptions setMultilingual(Boolean multilingual) {
        this.multilingual = multilingual;
        this.updatedProperties.add("multilingual");
        return this;
    }

    /**
     * Get the description property: The project description.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The project description.
     * 
     * @param description the description value to set.
     * @return the AnalyzeConversationAuthoringCreateProjectOptions object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringCreateProjectOptions setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the language property: The project language. This is BCP-47 representation of a language. For example, use
     * "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
     * 
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Set the language property: The project language. This is BCP-47 representation of a language. For example, use
     * "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
     * <p>Required when create the resource.</p>
     * 
     * @param language the language value to set.
     * @return the AnalyzeConversationAuthoringCreateProjectOptions object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringCreateProjectOptions setLanguage(String language) {
        this.language = language;
        this.updatedProperties.add("language");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
            jsonWriter.writeJsonField("settings", this.settings);
            jsonWriter.writeStringField("storageInputContainerName", this.storageInputContainerName);
            jsonWriter.writeStringField("projectName", this.projectName);
            jsonWriter.writeBooleanField("multilingual", this.multilingual);
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeStringField("language", this.language);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("projectKind")) {
            if (this.projectKind == null) {
                jsonWriter.writeNullField("projectKind");
            } else {
                jsonWriter.writeStringField("projectKind", this.projectKind.toString());
            }
        }
        if (updatedProperties.contains("settings")) {
            if (this.settings == null) {
                jsonWriter.writeNullField("settings");
            } else {
                JsonMergePatchHelper.getAnalyzeConversationAuthoringProjectSettingsAccessor()
                    .prepareModelForJsonMergePatch(this.settings, true);
                jsonWriter.writeJsonField("settings", this.settings);
                JsonMergePatchHelper.getAnalyzeConversationAuthoringProjectSettingsAccessor()
                    .prepareModelForJsonMergePatch(this.settings, false);
            }
        }
        if (updatedProperties.contains("storageInputContainerName")) {
            if (this.storageInputContainerName == null) {
                jsonWriter.writeNullField("storageInputContainerName");
            } else {
                jsonWriter.writeStringField("storageInputContainerName", this.storageInputContainerName);
            }
        }
        if (updatedProperties.contains("projectName")) {
            if (this.projectName == null) {
                jsonWriter.writeNullField("projectName");
            } else {
                jsonWriter.writeStringField("projectName", this.projectName);
            }
        }
        if (updatedProperties.contains("multilingual")) {
            if (this.multilingual == null) {
                jsonWriter.writeNullField("multilingual");
            } else {
                jsonWriter.writeBooleanField("multilingual", this.multilingual);
            }
        }
        if (updatedProperties.contains("description")) {
            if (this.description == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", this.description);
            }
        }
        if (updatedProperties.contains("language")) {
            if (this.language == null) {
                jsonWriter.writeNullField("language");
            } else {
                jsonWriter.writeStringField("language", this.language);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringCreateProjectOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringCreateProjectOptions if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringCreateProjectOptions.
     */
    @Generated
    public static AnalyzeConversationAuthoringCreateProjectOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeConversationAuthoringCreateProjectOptions deserializedAnalyzeConversationAuthoringCreateProjectOptions
                = new AnalyzeConversationAuthoringCreateProjectOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectKind".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringCreateProjectOptions.projectKind
                        = ProjectKind.fromString(reader.getString());
                } else if ("settings".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringCreateProjectOptions.settings
                        = AnalyzeConversationAuthoringProjectSettings.fromJson(reader);
                } else if ("storageInputContainerName".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringCreateProjectOptions.storageInputContainerName
                        = reader.getString();
                } else if ("projectName".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringCreateProjectOptions.projectName = reader.getString();
                } else if ("multilingual".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringCreateProjectOptions.multilingual
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("description".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringCreateProjectOptions.description = reader.getString();
                } else if ("language".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringCreateProjectOptions.language = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzeConversationAuthoringCreateProjectOptions;
        });
    }
}
