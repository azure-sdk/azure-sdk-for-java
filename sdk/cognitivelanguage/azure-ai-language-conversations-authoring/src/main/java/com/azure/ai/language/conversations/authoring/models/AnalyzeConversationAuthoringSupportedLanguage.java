// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a supported language.
 */
@Immutable
public final class AnalyzeConversationAuthoringSupportedLanguage
    implements JsonSerializable<AnalyzeConversationAuthoringSupportedLanguage> {
    /*
     * The language name.
     */
    @Generated
    private final String languageName;

    /*
     * The language code. This is BCP-47 representation of a language. For example, "en" for English, "en-gb" for
     * English (UK), "es" for Spanish etc.
     */
    @Generated
    private final String languageCode;

    /**
     * Creates an instance of AnalyzeConversationAuthoringSupportedLanguage class.
     * 
     * @param languageName the languageName value to set.
     * @param languageCode the languageCode value to set.
     */
    @Generated
    private AnalyzeConversationAuthoringSupportedLanguage(String languageName, String languageCode) {
        this.languageName = languageName;
        this.languageCode = languageCode;
    }

    /**
     * Get the languageName property: The language name.
     * 
     * @return the languageName value.
     */
    @Generated
    public String getLanguageName() {
        return this.languageName;
    }

    /**
     * Get the languageCode property: The language code. This is BCP-47 representation of a language. For example, "en"
     * for English, "en-gb" for English (UK), "es" for Spanish etc.
     * 
     * @return the languageCode value.
     */
    @Generated
    public String getLanguageCode() {
        return this.languageCode;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("languageName", this.languageName);
        jsonWriter.writeStringField("languageCode", this.languageCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringSupportedLanguage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringSupportedLanguage if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringSupportedLanguage.
     */
    @Generated
    public static AnalyzeConversationAuthoringSupportedLanguage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String languageName = null;
            String languageCode = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("languageName".equals(fieldName)) {
                    languageName = reader.getString();
                } else if ("languageCode".equals(fieldName)) {
                    languageCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new AnalyzeConversationAuthoringSupportedLanguage(languageName, languageCode);
        });
    }
}
