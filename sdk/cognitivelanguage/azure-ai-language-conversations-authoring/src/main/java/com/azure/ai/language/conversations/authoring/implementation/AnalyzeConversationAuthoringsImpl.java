// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.implementation;

import com.azure.ai.language.conversations.authoring.AuthoringServiceVersion;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringCopyProjectJobState;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringDeploymentJobState;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringDeploymentResourcesJobState;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringEvaluationJobResult;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringEvaluationJobState;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportProjectJobState;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedModelJobState;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringImportProjectJobState;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringLoadSnapshotJobState;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringProjectDeletionJobState;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringSwapDeploymentsJobState;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringTrainingJobResult;
import com.azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringTrainingJobState;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.UrlBuilder;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncDefaultPollingStrategy;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AnalyzeConversationAuthorings.
 */
public final class AnalyzeConversationAuthoringsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AnalyzeConversationAuthoringsService service;

    /**
     * The service client containing this operation class.
     */
    private final AuthoringClientImpl client;

    /**
     * Initializes an instance of AnalyzeConversationAuthoringsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AnalyzeConversationAuthoringsImpl(AuthoringClientImpl client) {
        this.service = RestProxy.create(AnalyzeConversationAuthoringsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AuthoringServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AuthoringClientAnalyzeConversationAuthorings to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{Endpoint}/language")
    @ServiceInterface(name = "AuthoringClientAnaly")
    public interface AnalyzeConversationAuthoringsService {
        @Get("/authoring/analyze-conversations/projects")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listProjects(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listProjectsSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getProject(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getProjectSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Patch("/authoring/analyze-conversations/projects/{projectName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createProject(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData body, RequestOptions requestOptions, Context context);

        @Patch("/authoring/analyze-conversations/projects/{projectName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createProjectSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData body, RequestOptions requestOptions, Context context);

        @Delete("/authoring/analyze-conversations/projects/{projectName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteProject(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/authoring/analyze-conversations/projects/{projectName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteProjectSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/:authorize-copy")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> copyProjectAuthorization(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData copyProjectAuthorizationRequest, RequestOptions requestOptions,
            Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/:authorize-copy")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> copyProjectAuthorizationSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData copyProjectAuthorizationRequest, RequestOptions requestOptions,
            Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/:copy")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> copyProject(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/:copy")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> copyProjectSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/:export")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> export(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @QueryParam("stringIndexType") String stringIndexType, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/:export")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> exportSync(@HostParam("Endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("projectName") String projectName, @QueryParam("stringIndexType") String stringIndexType,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/:import")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> importMethod(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/:import")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> importMethodSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/:train")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> train(@HostParam("Endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("projectName") String projectName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/:train")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> trainSync(@HostParam("Endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("projectName") String projectName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/copy/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getCopyProjectStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/copy/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getCopyProjectStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/deployments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeployments(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/deployments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeploymentsSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/deployments/:swap")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> swapDeployments(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/deployments/:swap")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> swapDeploymentsSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployment(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeploymentSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deployProject(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Put("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deployProjectSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Delete("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeployment(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteDeploymentSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}/:delete-from-resources")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeploymentFromResources(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}/:delete-from-resources")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteDeploymentFromResourcesSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}/delete-from-resources/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeploymentDeleteFromResourcesStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}/delete-from-resources/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeploymentDeleteFromResourcesStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeploymentStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/deployments/{deploymentName}/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDeploymentStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("deploymentName") String deploymentName, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/deployments/swap/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSwapDeploymentsStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/deployments/swap/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSwapDeploymentsStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/export/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getExportStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/export/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getExportStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/import/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getImportStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/import/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getImportStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTrainedModels(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTrainedModelsSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTrainedModel(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTrainedModelSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteTrainedModel(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteTrainedModelSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/:evaluate")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> evaluateModel(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/:evaluate")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> evaluateModelSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/:load-snapshot")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> loadSnapshot(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/:load-snapshot")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> loadSnapshotSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/evaluate/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getEvaluationStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/evaluate/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getEvaluationStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/evaluation/result")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getModelEvaluationResults(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel,
            @QueryParam("stringIndexType") String stringIndexType, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/evaluation/result")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getModelEvaluationResultsSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel,
            @QueryParam("stringIndexType") String stringIndexType, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/evaluation/summary-result")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getModelEvaluationSummary(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/evaluation/summary-result")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getModelEvaluationSummarySync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/load-snapshot/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLoadSnapshotStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/models/{trainedModelLabel}/load-snapshot/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLoadSnapshotStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("trainedModelLabel") String trainedModelLabel, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/resources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeploymentResources(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/resources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeploymentResourcesSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/resources/:assign")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> assignDeploymentResources(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/resources/:assign")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> assignDeploymentResourcesSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/resources/:unassign")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> unassignDeploymentResources(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/resources/:unassign")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> unassignDeploymentResourcesSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/resources/assign/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAssignDeploymentResourcesStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/resources/assign/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAssignDeploymentResourcesStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/resources/unassign/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getUnassignDeploymentResourcesStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/resources/unassign/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getUnassignDeploymentResourcesStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/train/jobs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTrainingJobs(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/train/jobs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTrainingJobsSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/train/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTrainingStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/train/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTrainingStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/train/jobs/{jobId}/:cancel")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> cancelTrainingJob(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/authoring/analyze-conversations/projects/{projectName}/train/jobs/{jobId}/:cancel")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> cancelTrainingJobSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("jobId") String jobId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/authoring/analyze-conversations/projects/global/deletion-jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getProjectDeletionStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/global/deletion-jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getProjectDeletionStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/global/deployments/resources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listAssignedResourceDeployments(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/global/deployments/resources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listAssignedResourceDeploymentsSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/global/languages")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSupportedLanguages(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("projectKind") String projectKind,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/global/languages")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSupportedLanguagesSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("projectKind") String projectKind,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/global/prebuilt-entities")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSupportedPrebuiltEntities(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/global/prebuilt-entities")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSupportedPrebuiltEntitiesSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/global/training-config-versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTrainingConfigVersions(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("projectKind") String projectKind,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/global/training-config-versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTrainingConfigVersionsSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("projectKind") String projectKind,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/exported-models/{exportedModelName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getExportedModel(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("exportedModelName") String exportedModelName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/exported-models/{exportedModelName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getExportedModelSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("exportedModelName") String exportedModelName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/exported-models")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listExportedModels(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/exported-models")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listExportedModelsSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/authoring/analyze-conversations/projects/{projectName}/exported-models/{exportedModelName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteExportedModel(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("exportedModelName") String exportedModelName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/authoring/analyze-conversations/projects/{projectName}/exported-models/{exportedModelName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteExportedModelSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("exportedModelName") String exportedModelName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/authoring/analyze-conversations/projects/{projectName}/exported-models/{exportedModelName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createOrUpdateExportedModel(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("exportedModelName") String exportedModelName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Put("/authoring/analyze-conversations/projects/{projectName}/exported-models/{exportedModelName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> createOrUpdateExportedModelSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("exportedModelName") String exportedModelName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/exported-models/{exportedModelName}/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getExportedModelJobStatus(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("exportedModelName") String exportedModelName, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/authoring/analyze-conversations/projects/{projectName}/exported-models/{exportedModelName}/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getExportedModelJobStatusSync(@HostParam("Endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("projectName") String projectName,
            @PathParam("exportedModelName") String exportedModelName, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listProjectsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("Endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listProjectsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("Endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeploymentsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("Endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeploymentsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("Endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTrainedModelsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("Endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTrainedModelsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("Endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getModelEvaluationResultsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("Endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getModelEvaluationResultsNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("Endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeploymentResourcesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("Endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listDeploymentResourcesNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("Endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTrainingJobsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("Endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTrainingJobsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("Endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listExportedModelsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("Endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listExportedModelsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("Endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Lists the existing projects.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectMetadata items along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listProjectsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listProjects(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists the existing projects.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectMetadata items as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listProjectsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listProjectsSinglePageAsync(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listProjectsNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists the existing projects.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectMetadata items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listProjectsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listProjectsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists the existing projects.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectMetadata items as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listProjects(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listProjectsSinglePage(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listProjectsNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets the details of a project.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a project along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getProjectWithResponseAsync(String projectName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getProject(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, context));
    }

    /**
     * Gets the details of a project.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a project along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getProjectWithResponse(String projectName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getProjectSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, accept, requestOptions, Context.NONE);
    }

    /**
     * Creates a new project or updates an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Optional, Required on create)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Optional, Required on create)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param body The request body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the metadata of a project along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createProjectWithResponseAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createProject(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, contentType, accept, body, requestOptions, context));
    }

    /**
     * Creates a new project or updates an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Optional, Required on create)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Optional, Required on create)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param body The request body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the metadata of a project along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createProjectWithResponse(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.createProjectSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Deletes a project.
     * 
     * @param projectName The name of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteProjectWithResponseAsync(String projectName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteProject(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, context));
    }

    /**
     * Deletes a project.
     * 
     * @param projectName The name of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> deleteProjectWithResponse(String projectName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteProjectSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, accept, requestOptions, Context.NONE);
    }

    /**
     * Deletes a project.
     * 
     * @param projectName The name of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteProjectAsync(String projectName, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteProjectWithResponseAsync(projectName, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes a project.
     * 
     * @param projectName The name of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteProject(String projectName, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteProjectWithResponse(projectName, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes a project.
     * 
     * @param projectName The name of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringProjectDeletionJobState, Void>
        beginDeleteProjectWithModelAsync(String projectName, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteProjectWithResponseAsync(projectName, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringProjectDeletionJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes a project.
     * 
     * @param projectName The name of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringProjectDeletionJobState, Void>
        beginDeleteProjectWithModel(String projectName, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteProjectWithResponse(projectName, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringProjectDeletionJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Generates a copy project operation authorization to the current target Azure resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     storageInputContainerName: String (Optional)
     *     allowOverwrite: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     targetProjectName: String (Required)
     *     accessToken: String (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param copyProjectAuthorizationRequest The copyProjectAuthorizationRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the options for copying an existing project to another Azure resource along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> copyProjectAuthorizationWithResponseAsync(String projectName,
        BinaryData copyProjectAuthorizationRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.copyProjectAuthorization(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, contentType, accept,
            copyProjectAuthorizationRequest, requestOptions, context));
    }

    /**
     * Generates a copy project operation authorization to the current target Azure resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     storageInputContainerName: String (Optional)
     *     allowOverwrite: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     targetProjectName: String (Required)
     *     accessToken: String (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param copyProjectAuthorizationRequest The copyProjectAuthorizationRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the options for copying an existing project to another Azure resource along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> copyProjectAuthorizationWithResponse(String projectName,
        BinaryData copyProjectAuthorizationRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.copyProjectAuthorizationSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, contentType, accept,
            copyProjectAuthorizationRequest, requestOptions, Context.NONE);
    }

    /**
     * Copies an existing project to another Azure resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     targetProjectName: String (Required)
     *     accessToken: String (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The copy project info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> copyProjectWithResponseAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.copyProject(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, contentType, accept, body, requestOptions, context));
    }

    /**
     * Copies an existing project to another Azure resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     targetProjectName: String (Required)
     *     accessToken: String (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The copy project info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> copyProjectWithResponse(String projectName, BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.copyProjectSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Copies an existing project to another Azure resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     targetProjectName: String (Required)
     *     accessToken: String (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The copy project info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCopyProjectAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.copyProjectWithResponseAsync(projectName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Copies an existing project to another Azure resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     targetProjectName: String (Required)
     *     accessToken: String (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The copy project info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCopyProject(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.copyProjectWithResponse(projectName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Copies an existing project to another Azure resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     targetProjectName: String (Required)
     *     accessToken: String (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The copy project info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringCopyProjectJobState, Void>
        beginCopyProjectWithModelAsync(String projectName, BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.copyProjectWithResponseAsync(projectName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringCopyProjectJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Copies an existing project to another Azure resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     targetProjectName: String (Required)
     *     accessToken: String (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The copy project info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringCopyProjectJobState, Void>
        beginCopyProjectWithModel(String projectName, BinaryData body, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.copyProjectWithResponse(projectName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringCopyProjectJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Triggers a job to export a project's data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * <tr><td>assetKind</td><td>String</td><td>No</td><td>Kind of asset to export.</td></tr>
     * <tr><td>trainedModelLabel</td><td>String</td><td>No</td><td>Trained model label to export. If the
     * trainedModelLabel is null, the default behavior is to export the current working copy.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param projectName The name of the project to use.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> exportWithResponseAsync(String projectName, String stringIndexType,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.export(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, stringIndexType, accept, requestOptions, context));
    }

    /**
     * Triggers a job to export a project's data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * <tr><td>assetKind</td><td>String</td><td>No</td><td>Kind of asset to export.</td></tr>
     * <tr><td>trainedModelLabel</td><td>String</td><td>No</td><td>Trained model label to export. If the
     * trainedModelLabel is null, the default behavior is to export the current working copy.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param projectName The name of the project to use.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> exportWithResponse(String projectName, String stringIndexType,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.exportSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), projectName,
            stringIndexType, accept, requestOptions, Context.NONE);
    }

    /**
     * Triggers a job to export a project's data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * <tr><td>assetKind</td><td>String</td><td>No</td><td>Kind of asset to export.</td></tr>
     * <tr><td>trainedModelLabel</td><td>String</td><td>No</td><td>Trained model label to export. If the
     * trainedModelLabel is null, the default behavior is to export the current working copy.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param projectName The name of the project to use.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginExportAsync(String projectName, String stringIndexType,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.exportWithResponseAsync(projectName, stringIndexType, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Triggers a job to export a project's data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * <tr><td>assetKind</td><td>String</td><td>No</td><td>Kind of asset to export.</td></tr>
     * <tr><td>trainedModelLabel</td><td>String</td><td>No</td><td>Trained model label to export. If the
     * trainedModelLabel is null, the default behavior is to export the current working copy.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param projectName The name of the project to use.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginExport(String projectName, String stringIndexType,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.exportWithResponse(projectName, stringIndexType, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Triggers a job to export a project's data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * <tr><td>assetKind</td><td>String</td><td>No</td><td>Kind of asset to export.</td></tr>
     * <tr><td>trainedModelLabel</td><td>String</td><td>No</td><td>Trained model label to export. If the
     * trainedModelLabel is null, the default behavior is to export the current working copy.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param projectName The name of the project to use.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringExportProjectJobState, Void>
        beginExportWithModelAsync(String projectName, String stringIndexType, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.exportWithResponseAsync(projectName, stringIndexType, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringExportProjectJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Triggers a job to export a project's data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * <tr><td>assetKind</td><td>String</td><td>No</td><td>Kind of asset to export.</td></tr>
     * <tr><td>trainedModelLabel</td><td>String</td><td>No</td><td>Trained model label to export. If the
     * trainedModelLabel is null, the default behavior is to export the current working copy.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param projectName The name of the project to use.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringExportProjectJobState, Void> beginExportWithModel(String projectName,
        String stringIndexType, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.exportWithResponse(projectName, stringIndexType, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringExportProjectJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Triggers a job to import a project. If a project with the same name already exists, the data of that project is
     * replaced.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectFileVersion: String (Required)
     *     stringIndexType: String(Utf16CodeUnit) (Required)
     *     metadata (Required): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Optional, Required on create)
     *         settings (Optional): {
     *             confidenceThreshold: double (Optional, Required on create)
     *         }
     *         storageInputContainerName: String (Optional)
     *         projectName: String (Optional, Required on create)
     *         multilingual: Boolean (Optional)
     *         description: String (Optional)
     *         language: String (Optional, Required on create)
     *     }
     *     assets (Optional): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The project data to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> importMethodWithResponseAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.importMethod(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, contentType, accept, body, requestOptions, context));
    }

    /**
     * Triggers a job to import a project. If a project with the same name already exists, the data of that project is
     * replaced.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectFileVersion: String (Required)
     *     stringIndexType: String(Utf16CodeUnit) (Required)
     *     metadata (Required): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Optional, Required on create)
     *         settings (Optional): {
     *             confidenceThreshold: double (Optional, Required on create)
     *         }
     *         storageInputContainerName: String (Optional)
     *         projectName: String (Optional, Required on create)
     *         multilingual: Boolean (Optional)
     *         description: String (Optional)
     *         language: String (Optional, Required on create)
     *     }
     *     assets (Optional): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The project data to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> importMethodWithResponse(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.importMethodSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Triggers a job to import a project. If a project with the same name already exists, the data of that project is
     * replaced.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectFileVersion: String (Required)
     *     stringIndexType: String(Utf16CodeUnit) (Required)
     *     metadata (Required): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Optional, Required on create)
     *         settings (Optional): {
     *             confidenceThreshold: double (Optional, Required on create)
     *         }
     *         storageInputContainerName: String (Optional)
     *         projectName: String (Optional, Required on create)
     *         multilingual: Boolean (Optional)
     *         description: String (Optional)
     *         language: String (Optional, Required on create)
     *     }
     *     assets (Optional): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The project data to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginImportMethodAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.importMethodWithResponseAsync(projectName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Triggers a job to import a project. If a project with the same name already exists, the data of that project is
     * replaced.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectFileVersion: String (Required)
     *     stringIndexType: String(Utf16CodeUnit) (Required)
     *     metadata (Required): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Optional, Required on create)
     *         settings (Optional): {
     *             confidenceThreshold: double (Optional, Required on create)
     *         }
     *         storageInputContainerName: String (Optional)
     *         projectName: String (Optional, Required on create)
     *         multilingual: Boolean (Optional)
     *         description: String (Optional)
     *         language: String (Optional, Required on create)
     *     }
     *     assets (Optional): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The project data to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginImportMethod(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.importMethodWithResponse(projectName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Triggers a job to import a project. If a project with the same name already exists, the data of that project is
     * replaced.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectFileVersion: String (Required)
     *     stringIndexType: String(Utf16CodeUnit) (Required)
     *     metadata (Required): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Optional, Required on create)
     *         settings (Optional): {
     *             confidenceThreshold: double (Optional, Required on create)
     *         }
     *         storageInputContainerName: String (Optional)
     *         projectName: String (Optional, Required on create)
     *         multilingual: Boolean (Optional)
     *         description: String (Optional)
     *         language: String (Optional, Required on create)
     *     }
     *     assets (Optional): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The project data to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringImportProjectJobState, Void>
        beginImportMethodWithModelAsync(String projectName, BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.importMethodWithResponseAsync(projectName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringImportProjectJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Triggers a job to import a project. If a project with the same name already exists, the data of that project is
     * replaced.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the exported project file to use. Allowed values:
     * "Conversation", "Luis".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectFileVersion: String (Required)
     *     stringIndexType: String(Utf16CodeUnit) (Required)
     *     metadata (Required): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Optional, Required on create)
     *         settings (Optional): {
     *             confidenceThreshold: double (Optional, Required on create)
     *         }
     *         storageInputContainerName: String (Optional)
     *         projectName: String (Optional, Required on create)
     *         multilingual: Boolean (Optional)
     *         description: String (Optional)
     *         language: String (Optional, Required on create)
     *     }
     *     assets (Optional): {
     *         projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The project data to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringImportProjectJobState, Void>
        beginImportMethodWithModel(String projectName, BinaryData body, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.importMethodWithResponse(projectName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringImportProjectJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Triggers a training job for a project.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     modelLabel: String (Required)
     *     trainingConfigVersion: String (Optional)
     *     trainingMode: String(advanced/standard) (Required)
     *     evaluationOptions (Optional): {
     *         kind: String(percentage/manual) (Optional)
     *         trainingSplitPercentage: Integer (Optional)
     *         testingSplitPercentage: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> trainWithResponseAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.train(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, contentType, accept, body, requestOptions, context));
    }

    /**
     * Triggers a training job for a project.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     modelLabel: String (Required)
     *     trainingConfigVersion: String (Optional)
     *     trainingMode: String(advanced/standard) (Required)
     *     evaluationOptions (Optional): {
     *         kind: String(percentage/manual) (Optional)
     *         trainingSplitPercentage: Integer (Optional)
     *         testingSplitPercentage: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> trainWithResponse(String projectName, BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.trainSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), projectName,
            contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Triggers a training job for a project.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     modelLabel: String (Required)
     *     trainingConfigVersion: String (Optional)
     *     trainingMode: String(advanced/standard) (Required)
     *     evaluationOptions (Optional): {
     *         kind: String(percentage/manual) (Optional)
     *         trainingSplitPercentage: Integer (Optional)
     *         testingSplitPercentage: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginTrainAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.trainWithResponseAsync(projectName, body, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.OperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Triggers a training job for a project.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     modelLabel: String (Required)
     *     trainingConfigVersion: String (Optional)
     *     trainingMode: String(advanced/standard) (Required)
     *     evaluationOptions (Optional): {
     *         kind: String(percentage/manual) (Optional)
     *         trainingSplitPercentage: Integer (Optional)
     *         testingSplitPercentage: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginTrain(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.trainWithResponse(projectName, body, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.SyncOperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Triggers a training job for a project.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     modelLabel: String (Required)
     *     trainingConfigVersion: String (Optional)
     *     trainingMode: String(advanced/standard) (Required)
     *     evaluationOptions (Optional): {
     *         kind: String(percentage/manual) (Optional)
     *         trainingSplitPercentage: Integer (Optional)
     *         testingSplitPercentage: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringTrainingJobState, AnalyzeConversationAuthoringTrainingJobResult>
        beginTrainWithModelAsync(String projectName, BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.trainWithResponseAsync(projectName, body, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.OperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(AnalyzeConversationAuthoringTrainingJobState.class),
            TypeReference.createInstance(AnalyzeConversationAuthoringTrainingJobResult.class));
    }

    /**
     * Triggers a training job for a project.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     modelLabel: String (Required)
     *     trainingConfigVersion: String (Optional)
     *     trainingMode: String(advanced/standard) (Required)
     *     evaluationOptions (Optional): {
     *         kind: String(percentage/manual) (Optional)
     *         trainingSplitPercentage: Integer (Optional)
     *         testingSplitPercentage: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringTrainingJobState, AnalyzeConversationAuthoringTrainingJobResult>
        beginTrainWithModel(String projectName, BinaryData body, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.trainWithResponse(projectName, body, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.SyncOperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(AnalyzeConversationAuthoringTrainingJobState.class),
            TypeReference.createInstance(AnalyzeConversationAuthoringTrainingJobResult.class));
    }

    /**
     * Gets the status of an existing copy project job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing copy project job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCopyProjectStatusWithResponseAsync(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getCopyProjectStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, jobId, accept, requestOptions, context));
    }

    /**
     * Gets the status of an existing copy project job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing copy project job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCopyProjectStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getCopyProjectStatusSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists the deployments belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     deploymentName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastDeployedDateTime: OffsetDateTime (Required)
     *     deploymentExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     assignedResources (Required): [
     *          (Required){
     *             resourceId: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectDeployment items along with {@link PagedResponse}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeploymentsSinglePageAsync(String projectName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeployments(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists the deployments belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     deploymentName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastDeployedDateTime: OffsetDateTime (Required)
     *     deploymentExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     assignedResources (Required): [
     *          (Required){
     *             resourceId: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectDeployment items as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeploymentsAsync(String projectName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listDeploymentsSinglePageAsync(projectName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listDeploymentsNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists the deployments belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     deploymentName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastDeployedDateTime: OffsetDateTime (Required)
     *     deploymentExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     assignedResources (Required): [
     *          (Required){
     *             resourceId: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectDeployment items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeploymentsSinglePage(String projectName, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeploymentsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists the deployments belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     deploymentName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastDeployedDateTime: OffsetDateTime (Required)
     *     deploymentExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     assignedResources (Required): [
     *          (Required){
     *             resourceId: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectDeployment items as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeployments(String projectName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listDeploymentsSinglePage(projectName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listDeploymentsNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Swaps two existing deployments with each other.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     firstDeploymentName: String (Required)
     *     secondDeploymentName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The job object to swap two deployments.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> swapDeploymentsWithResponseAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.swapDeployments(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, contentType, accept, body, requestOptions, context));
    }

    /**
     * Swaps two existing deployments with each other.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     firstDeploymentName: String (Required)
     *     secondDeploymentName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The job object to swap two deployments.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> swapDeploymentsWithResponse(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.swapDeploymentsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Swaps two existing deployments with each other.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     firstDeploymentName: String (Required)
     *     secondDeploymentName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The job object to swap two deployments.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginSwapDeploymentsAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.swapDeploymentsWithResponseAsync(projectName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Swaps two existing deployments with each other.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     firstDeploymentName: String (Required)
     *     secondDeploymentName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The job object to swap two deployments.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginSwapDeployments(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.swapDeploymentsWithResponse(projectName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Swaps two existing deployments with each other.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     firstDeploymentName: String (Required)
     *     secondDeploymentName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The job object to swap two deployments.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringSwapDeploymentsJobState, Void>
        beginSwapDeploymentsWithModelAsync(String projectName, BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.swapDeploymentsWithResponseAsync(projectName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringSwapDeploymentsJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Swaps two existing deployments with each other.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     firstDeploymentName: String (Required)
     *     secondDeploymentName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The job object to swap two deployments.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringSwapDeploymentsJobState, Void>
        beginSwapDeploymentsWithModel(String projectName, BinaryData body, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.swapDeploymentsWithResponse(projectName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringSwapDeploymentsJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Gets the details of a deployment.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     deploymentName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastDeployedDateTime: OffsetDateTime (Required)
     *     deploymentExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     assignedResources (Required): [
     *          (Required){
     *             resourceId: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a deployment along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentWithResponseAsync(String projectName, String deploymentName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getDeployment(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, deploymentName, accept, requestOptions, context));
    }

    /**
     * Gets the details of a deployment.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     deploymentName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastDeployedDateTime: OffsetDateTime (Required)
     *     deploymentExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     assignedResources (Required): [
     *          (Required){
     *             resourceId: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a deployment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentWithResponse(String projectName, String deploymentName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeploymentSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, deploymentName, accept, requestOptions, Context.NONE);
    }

    /**
     * Creates a new deployment or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The new deployment info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deployProjectWithResponseAsync(String projectName, String deploymentName,
        BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.deployProject(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, deploymentName, contentType, accept, body, requestOptions, context));
    }

    /**
     * Creates a new deployment or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The new deployment info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> deployProjectWithResponse(String projectName, String deploymentName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.deployProjectSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, deploymentName, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Creates a new deployment or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The new deployment info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginDeployProjectAsync(String projectName, String deploymentName,
        BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deployProjectWithResponseAsync(projectName, deploymentName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Creates a new deployment or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The new deployment info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginDeployProject(String projectName, String deploymentName,
        BinaryData body, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deployProjectWithResponse(projectName, deploymentName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Creates a new deployment or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The new deployment info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringDeploymentJobState, Void> beginDeployProjectWithModelAsync(
        String projectName, String deploymentName, BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deployProjectWithResponseAsync(projectName, deploymentName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringDeploymentJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Creates a new deployment or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The new deployment info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringDeploymentJobState, Void> beginDeployProjectWithModel(
        String projectName, String deploymentName, BinaryData body, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deployProjectWithResponse(projectName, deploymentName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringDeploymentJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes a project deployment.
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteDeploymentWithResponseAsync(String projectName, String deploymentName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.deleteDeployment(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, deploymentName, accept, requestOptions, context));
    }

    /**
     * Deletes a project deployment.
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> deleteDeploymentWithResponse(String projectName, String deploymentName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteDeploymentSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, deploymentName, accept, requestOptions, Context.NONE);
    }

    /**
     * Deletes a project deployment.
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteDeploymentAsync(String projectName, String deploymentName,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteDeploymentWithResponseAsync(projectName, deploymentName, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes a project deployment.
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteDeployment(String projectName, String deploymentName,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteDeploymentWithResponse(projectName, deploymentName, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes a project deployment.
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringDeploymentJobState, Void>
        beginDeleteDeploymentWithModelAsync(String projectName, String deploymentName, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteDeploymentWithResponseAsync(projectName, deploymentName, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringDeploymentJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes a project deployment.
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringDeploymentJobState, Void>
        beginDeleteDeploymentWithModel(String projectName, String deploymentName, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteDeploymentWithResponse(projectName, deploymentName, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringDeploymentJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes a project deployment from the specified assigned resources.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The options for deleting the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteDeploymentFromResourcesWithResponseAsync(String projectName,
        String deploymentName, BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteDeploymentFromResources(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, deploymentName, contentType, accept, body,
            requestOptions, context));
    }

    /**
     * Deletes a project deployment from the specified assigned resources.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The options for deleting the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> deleteDeploymentFromResourcesWithResponse(String projectName, String deploymentName,
        BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.deleteDeploymentFromResourcesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, deploymentName, contentType, accept, body,
            requestOptions, Context.NONE);
    }

    /**
     * Deletes a project deployment from the specified assigned resources.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The options for deleting the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginDeleteDeploymentFromResourcesAsync(String projectName,
        String deploymentName, BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteDeploymentFromResourcesWithResponseAsync(projectName, deploymentName, body,
                requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Deletes a project deployment from the specified assigned resources.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The options for deleting the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginDeleteDeploymentFromResources(String projectName,
        String deploymentName, BinaryData body, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteDeploymentFromResourcesWithResponse(projectName, deploymentName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Deletes a project deployment from the specified assigned resources.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The options for deleting the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState, Void>
        beginDeleteDeploymentFromResourcesWithModelAsync(String projectName, String deploymentName, BinaryData body,
            RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteDeploymentFromResourcesWithResponseAsync(projectName, deploymentName, body,
                requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes a project deployment from the specified assigned resources.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The options for deleting the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState, Void>
        beginDeleteDeploymentFromResourcesWithModel(String projectName, String deploymentName, BinaryData body,
            RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteDeploymentFromResourcesWithResponse(projectName, deploymentName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Gets the status of an existing delete deployment from specific resources job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing delete deployment from specific resources job along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentDeleteFromResourcesStatusWithResponseAsync(String projectName,
        String deploymentName, String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDeploymentDeleteFromResourcesStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, deploymentName, jobId, accept, requestOptions,
            context));
    }

    /**
     * Gets the status of an existing delete deployment from specific resources job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing delete deployment from specific resources job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentDeleteFromResourcesStatusWithResponse(String projectName,
        String deploymentName, String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeploymentDeleteFromResourcesStatusSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, deploymentName, jobId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Gets the status of an existing deployment job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing deployment job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentStatusWithResponseAsync(String projectName, String deploymentName,
        String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDeploymentStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, deploymentName, jobId, accept, requestOptions,
            context));
    }

    /**
     * Gets the status of an existing deployment job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing deployment job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentStatusWithResponse(String projectName, String deploymentName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDeploymentStatusSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, deploymentName, jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the status of an existing swap deployment job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing swap deployment job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSwapDeploymentsStatusWithResponseAsync(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSwapDeploymentsStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, jobId, accept, requestOptions, context));
    }

    /**
     * Gets the status of an existing swap deployment job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing swap deployment job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSwapDeploymentsStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSwapDeploymentsStatusSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the status of an export job. Once job completes, returns the project metadata, and assets.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     resultUrl: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an export job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getExportStatusWithResponseAsync(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getExportStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, jobId, accept, requestOptions, context));
    }

    /**
     * Gets the status of an export job. Once job completes, returns the project metadata, and assets.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     resultUrl: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an export job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getExportStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getExportStatusSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the status for an import.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for an import along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getImportStatusWithResponseAsync(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getImportStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, jobId, accept, requestOptions, context));
    }

    /**
     * Gets the status for an import.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for an import along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getImportStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getImportStatusSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists the trained models belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     label: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastTrainingDurationInSeconds: int (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     hasSnapshot: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectTrainedModel items along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTrainedModelsSinglePageAsync(String projectName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listTrainedModels(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists the trained models belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     label: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastTrainingDurationInSeconds: int (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     hasSnapshot: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectTrainedModel items as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listTrainedModelsAsync(String projectName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listTrainedModelsSinglePageAsync(projectName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listTrainedModelsNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists the trained models belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     label: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastTrainingDurationInSeconds: int (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     hasSnapshot: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectTrainedModel items along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listTrainedModelsSinglePage(String projectName, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listTrainedModelsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists the trained models belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     label: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastTrainingDurationInSeconds: int (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     hasSnapshot: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectTrainedModel items as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTrainedModels(String projectName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listTrainedModelsSinglePage(projectName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listTrainedModelsNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets the details of a trained model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     label: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastTrainingDurationInSeconds: int (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     hasSnapshot: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a trained model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTrainedModelWithResponseAsync(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getTrainedModel(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, trainedModelLabel, accept, requestOptions, context));
    }

    /**
     * Gets the details of a trained model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     label: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastTrainingDurationInSeconds: int (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     hasSnapshot: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a trained model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTrainedModelWithResponse(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTrainedModelSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, trainedModelLabel, accept, requestOptions, Context.NONE);
    }

    /**
     * Deletes an existing trained model.
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTrainedModelWithResponseAsync(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteTrainedModel(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, trainedModelLabel, accept, requestOptions,
            context));
    }

    /**
     * Deletes an existing trained model.
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTrainedModelWithResponse(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteTrainedModelSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, trainedModelLabel, accept, requestOptions, Context.NONE);
    }

    /**
     * Triggers evaluation operation on a trained model.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(percentage/manual) (Optional)
     *     trainingSplitPercentage: Integer (Optional)
     *     testingSplitPercentage: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> evaluateModelWithResponseAsync(String projectName, String trainedModelLabel,
        BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.evaluateModel(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, trainedModelLabel, contentType, accept, body, requestOptions, context));
    }

    /**
     * Triggers evaluation operation on a trained model.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(percentage/manual) (Optional)
     *     trainingSplitPercentage: Integer (Optional)
     *     testingSplitPercentage: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> evaluateModelWithResponse(String projectName, String trainedModelLabel, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.evaluateModelSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, trainedModelLabel, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Triggers evaluation operation on a trained model.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(percentage/manual) (Optional)
     *     trainingSplitPercentage: Integer (Optional)
     *     testingSplitPercentage: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginEvaluateModelAsync(String projectName, String trainedModelLabel,
        BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.evaluateModelWithResponseAsync(projectName, trainedModelLabel, body, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.OperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Triggers evaluation operation on a trained model.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(percentage/manual) (Optional)
     *     trainingSplitPercentage: Integer (Optional)
     *     testingSplitPercentage: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginEvaluateModel(String projectName, String trainedModelLabel,
        BinaryData body, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.evaluateModelWithResponse(projectName, trainedModelLabel, body, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.SyncOperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Triggers evaluation operation on a trained model.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(percentage/manual) (Optional)
     *     trainingSplitPercentage: Integer (Optional)
     *     testingSplitPercentage: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringEvaluationJobState, AnalyzeConversationAuthoringEvaluationJobResult>
        beginEvaluateModelWithModelAsync(String projectName, String trainedModelLabel, BinaryData body,
            RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.evaluateModelWithResponseAsync(projectName, trainedModelLabel, body, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.OperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(AnalyzeConversationAuthoringEvaluationJobState.class),
            TypeReference.createInstance(AnalyzeConversationAuthoringEvaluationJobResult.class));
    }

    /**
     * Triggers evaluation operation on a trained model.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(percentage/manual) (Optional)
     *     trainingSplitPercentage: Integer (Optional)
     *     testingSplitPercentage: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringEvaluationJobState, AnalyzeConversationAuthoringEvaluationJobResult>
        beginEvaluateModelWithModel(String projectName, String trainedModelLabel, BinaryData body,
            RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.evaluateModelWithResponse(projectName, trainedModelLabel, body, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.SyncOperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(AnalyzeConversationAuthoringEvaluationJobState.class),
            TypeReference.createInstance(AnalyzeConversationAuthoringEvaluationJobResult.class));
    }

    /**
     * Restores the snapshot of this trained model to be the current working directory of the project.
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> loadSnapshotWithResponseAsync(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.loadSnapshot(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, trainedModelLabel, accept, requestOptions, context));
    }

    /**
     * Restores the snapshot of this trained model to be the current working directory of the project.
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> loadSnapshotWithResponse(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.loadSnapshotSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, trainedModelLabel, accept, requestOptions, Context.NONE);
    }

    /**
     * Restores the snapshot of this trained model to be the current working directory of the project.
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginLoadSnapshotAsync(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.loadSnapshotWithResponseAsync(projectName, trainedModelLabel, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Restores the snapshot of this trained model to be the current working directory of the project.
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginLoadSnapshot(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.loadSnapshotWithResponse(projectName, trainedModelLabel, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Restores the snapshot of this trained model to be the current working directory of the project.
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringLoadSnapshotJobState, Void>
        beginLoadSnapshotWithModelAsync(String projectName, String trainedModelLabel, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.loadSnapshotWithResponseAsync(projectName, trainedModelLabel, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringLoadSnapshotJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Restores the snapshot of this trained model to be the current working directory of the project.
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringLoadSnapshotJobState, Void>
        beginLoadSnapshotWithModel(String projectName, String trainedModelLabel, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.loadSnapshotWithResponse(projectName, trainedModelLabel, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringLoadSnapshotJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Gets the status for an evaluation job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         evaluationOptions (Required): {
     *             kind: String(percentage/manual) (Optional)
     *             trainingSplitPercentage: Integer (Optional)
     *             testingSplitPercentage: Integer (Optional)
     *         }
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         percentComplete: int (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for an evaluation job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEvaluationStatusWithResponseAsync(String projectName, String trainedModelLabel,
        String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getEvaluationStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, trainedModelLabel, jobId, accept, requestOptions,
            context));
    }

    /**
     * Gets the status for an evaluation job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         evaluationOptions (Required): {
     *             kind: String(percentage/manual) (Optional)
     *             trainingSplitPercentage: Integer (Optional)
     *             testingSplitPercentage: Integer (Optional)
     *         }
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         percentComplete: int (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for an evaluation job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEvaluationStatusWithResponse(String projectName, String trainedModelLabel,
        String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getEvaluationStatusSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, trainedModelLabel, jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the detailed results of the evaluation for a trained model. This includes the raw inference results for the
     * data included in the evaluation process.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     text: String (Required)
     *     language: String (Required)
     *     entitiesResult (Required): {
     *         expectedEntities (Required): [
     *              (Required){
     *                 category: String (Required)
     *                 offset: int (Required)
     *                 length: int (Required)
     *             }
     *         ]
     *         predictedEntities (Required): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     intentsResult (Required): {
     *         expectedIntent: String (Required)
     *         predictedIntent: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the detailed results of the evaluation for a trained model along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> getModelEvaluationResultsSinglePageAsync(String projectName,
        String trainedModelLabel, String stringIndexType, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getModelEvaluationResults(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), projectName, trainedModelLabel, stringIndexType, accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Gets the detailed results of the evaluation for a trained model. This includes the raw inference results for the
     * data included in the evaluation process.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     text: String (Required)
     *     language: String (Required)
     *     entitiesResult (Required): {
     *         expectedEntities (Required): [
     *              (Required){
     *                 category: String (Required)
     *                 offset: int (Required)
     *                 length: int (Required)
     *             }
     *         ]
     *         predictedEntities (Required): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     intentsResult (Required): {
     *         expectedIntent: String (Required)
     *         predictedIntent: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the detailed results of the evaluation for a trained model as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getModelEvaluationResultsAsync(String projectName, String trainedModelLabel,
        String stringIndexType, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getModelEvaluationResultsSinglePageAsync(projectName, trainedModelLabel, stringIndexType,
                requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getModelEvaluationResultsNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets the detailed results of the evaluation for a trained model. This includes the raw inference results for the
     * data included in the evaluation process.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     text: String (Required)
     *     language: String (Required)
     *     entitiesResult (Required): {
     *         expectedEntities (Required): [
     *              (Required){
     *                 category: String (Required)
     *                 offset: int (Required)
     *                 length: int (Required)
     *             }
     *         ]
     *         predictedEntities (Required): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     intentsResult (Required): {
     *         expectedIntent: String (Required)
     *         predictedIntent: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the detailed results of the evaluation for a trained model along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> getModelEvaluationResultsSinglePage(String projectName, String trainedModelLabel,
        String stringIndexType, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.getModelEvaluationResultsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, trainedModelLabel, stringIndexType, accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Gets the detailed results of the evaluation for a trained model. This includes the raw inference results for the
     * data included in the evaluation process.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     text: String (Required)
     *     language: String (Required)
     *     entitiesResult (Required): {
     *         expectedEntities (Required): [
     *              (Required){
     *                 category: String (Required)
     *                 offset: int (Required)
     *                 length: int (Required)
     *             }
     *         ]
     *         predictedEntities (Required): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     intentsResult (Required): {
     *         expectedIntent: String (Required)
     *         predictedIntent: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the detailed results of the evaluation for a trained model as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getModelEvaluationResults(String projectName, String trainedModelLabel,
        String stringIndexType, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getModelEvaluationResultsSinglePage(projectName, trainedModelLabel, stringIndexType,
                requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return getModelEvaluationResultsNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets the evaluation summary of a trained model. The summary includes high level performance measurements of the
     * model e.g., F1, Precision, Recall, etc.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entitiesEvaluation (Required): {
     *         confusionMatrix (Required): {
     *              (Optional): {
     *                 String (Required): {
     *                      (Optional): {
     *                         String (Required): {
     *                             normalizedValue: double (Required)
     *                             rawValue: double (Required)
     *                         }
     *                     }
     *                 }
     *             }
     *         }
     *         entities (Required): {
     *             String (Required): {
     *                 f1: double (Required)
     *                 precision: double (Required)
     *                 recall: double (Required)
     *                 truePositiveCount: int (Required)
     *                 trueNegativeCount: int (Required)
     *                 falsePositiveCount: int (Required)
     *                 falseNegativeCount: int (Required)
     *             }
     *         }
     *         microF1: double (Required)
     *         microPrecision: double (Required)
     *         microRecall: double (Required)
     *         macroF1: double (Required)
     *         macroPrecision: double (Required)
     *         macroRecall: double (Required)
     *     }
     *     intentsEvaluation (Required): {
     *         confusionMatrix (Required): (recursive schema, see confusionMatrix above)
     *         intents (Required): {
     *             String (Required): {
     *                 f1: double (Required)
     *                 precision: double (Required)
     *                 recall: double (Required)
     *                 truePositiveCount: int (Required)
     *                 trueNegativeCount: int (Required)
     *                 falsePositiveCount: int (Required)
     *                 falseNegativeCount: int (Required)
     *             }
     *         }
     *         microF1: double (Required)
     *         microPrecision: double (Required)
     *         microRecall: double (Required)
     *         macroF1: double (Required)
     *         macroPrecision: double (Required)
     *         macroRecall: double (Required)
     *     }
     *     evaluationOptions (Optional): {
     *         kind: String(percentage/manual) (Optional)
     *         trainingSplitPercentage: Integer (Optional)
     *         testingSplitPercentage: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the evaluation summary of a trained model along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getModelEvaluationSummaryWithResponseAsync(String projectName,
        String trainedModelLabel, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getModelEvaluationSummary(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, trainedModelLabel, accept, requestOptions,
            context));
    }

    /**
     * Gets the evaluation summary of a trained model. The summary includes high level performance measurements of the
     * model e.g., F1, Precision, Recall, etc.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entitiesEvaluation (Required): {
     *         confusionMatrix (Required): {
     *              (Optional): {
     *                 String (Required): {
     *                      (Optional): {
     *                         String (Required): {
     *                             normalizedValue: double (Required)
     *                             rawValue: double (Required)
     *                         }
     *                     }
     *                 }
     *             }
     *         }
     *         entities (Required): {
     *             String (Required): {
     *                 f1: double (Required)
     *                 precision: double (Required)
     *                 recall: double (Required)
     *                 truePositiveCount: int (Required)
     *                 trueNegativeCount: int (Required)
     *                 falsePositiveCount: int (Required)
     *                 falseNegativeCount: int (Required)
     *             }
     *         }
     *         microF1: double (Required)
     *         microPrecision: double (Required)
     *         microRecall: double (Required)
     *         macroF1: double (Required)
     *         macroPrecision: double (Required)
     *         macroRecall: double (Required)
     *     }
     *     intentsEvaluation (Required): {
     *         confusionMatrix (Required): (recursive schema, see confusionMatrix above)
     *         intents (Required): {
     *             String (Required): {
     *                 f1: double (Required)
     *                 precision: double (Required)
     *                 recall: double (Required)
     *                 truePositiveCount: int (Required)
     *                 trueNegativeCount: int (Required)
     *                 falsePositiveCount: int (Required)
     *                 falseNegativeCount: int (Required)
     *             }
     *         }
     *         microF1: double (Required)
     *         microPrecision: double (Required)
     *         microRecall: double (Required)
     *         macroF1: double (Required)
     *         macroPrecision: double (Required)
     *         macroRecall: double (Required)
     *     }
     *     evaluationOptions (Optional): {
     *         kind: String(percentage/manual) (Optional)
     *         trainingSplitPercentage: Integer (Optional)
     *         testingSplitPercentage: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the evaluation summary of a trained model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getModelEvaluationSummaryWithResponse(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getModelEvaluationSummarySync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, trainedModelLabel, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Gets the status for loading a snapshot.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for loading a snapshot along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLoadSnapshotStatusWithResponseAsync(String projectName,
        String trainedModelLabel, String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getLoadSnapshotStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, trainedModelLabel, jobId, accept, requestOptions,
            context));
    }

    /**
     * Gets the status for loading a snapshot.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for loading a snapshot along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLoadSnapshotStatusWithResponse(String projectName, String trainedModelLabel,
        String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLoadSnapshotStatusSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, trainedModelLabel, jobId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Lists the deployments resources assigned to the project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     azureResourceId: String (Required)
     *     region: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringAssignedDeploymentResource items along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeploymentResourcesSinglePageAsync(String projectName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeploymentResources(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists the deployments resources assigned to the project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     azureResourceId: String (Required)
     *     region: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringAssignedDeploymentResource items as paginated response
     * with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeploymentResourcesAsync(String projectName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listDeploymentResourcesSinglePageAsync(projectName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listDeploymentResourcesNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists the deployments resources assigned to the project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     azureResourceId: String (Required)
     *     region: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringAssignedDeploymentResource items along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeploymentResourcesSinglePage(String projectName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeploymentResourcesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists the deployments resources assigned to the project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     azureResourceId: String (Required)
     *     region: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringAssignedDeploymentResource items as paginated response
     * with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeploymentResources(String projectName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listDeploymentResourcesSinglePage(projectName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listDeploymentResourcesNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Assign new Azure resources to a project to allow deploying new deployments to them. This API is available only
     * via AAD authentication and not supported via subscription key authentication. For more details about AAD
     * authentication, check here:
     * https://learn.microsoft.com/en-us/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-azure-active-directory.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     resourcesMetadata (Required): [
     *          (Required){
     *             azureResourceId: String (Required)
     *             customDomain: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The new project resources info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> assignDeploymentResourcesWithResponseAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.assignDeploymentResources(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, contentType, accept, body, requestOptions,
            context));
    }

    /**
     * Assign new Azure resources to a project to allow deploying new deployments to them. This API is available only
     * via AAD authentication and not supported via subscription key authentication. For more details about AAD
     * authentication, check here:
     * https://learn.microsoft.com/en-us/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-azure-active-directory.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     resourcesMetadata (Required): [
     *          (Required){
     *             azureResourceId: String (Required)
     *             customDomain: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The new project resources info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> assignDeploymentResourcesWithResponse(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.assignDeploymentResourcesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, contentType, accept, body, requestOptions,
            Context.NONE);
    }

    /**
     * Assign new Azure resources to a project to allow deploying new deployments to them. This API is available only
     * via AAD authentication and not supported via subscription key authentication. For more details about AAD
     * authentication, check here:
     * https://learn.microsoft.com/en-us/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-azure-active-directory.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     resourcesMetadata (Required): [
     *          (Required){
     *             azureResourceId: String (Required)
     *             customDomain: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The new project resources info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginAssignDeploymentResourcesAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.assignDeploymentResourcesWithResponseAsync(projectName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Assign new Azure resources to a project to allow deploying new deployments to them. This API is available only
     * via AAD authentication and not supported via subscription key authentication. For more details about AAD
     * authentication, check here:
     * https://learn.microsoft.com/en-us/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-azure-active-directory.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     resourcesMetadata (Required): [
     *          (Required){
     *             azureResourceId: String (Required)
     *             customDomain: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The new project resources info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginAssignDeploymentResources(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.assignDeploymentResourcesWithResponse(projectName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Assign new Azure resources to a project to allow deploying new deployments to them. This API is available only
     * via AAD authentication and not supported via subscription key authentication. For more details about AAD
     * authentication, check here:
     * https://learn.microsoft.com/en-us/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-azure-active-directory.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     resourcesMetadata (Required): [
     *          (Required){
     *             azureResourceId: String (Required)
     *             customDomain: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The new project resources info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringDeploymentResourcesJobState, Void>
        beginAssignDeploymentResourcesWithModelAsync(String projectName, BinaryData body,
            RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.assignDeploymentResourcesWithResponseAsync(projectName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringDeploymentResourcesJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Assign new Azure resources to a project to allow deploying new deployments to them. This API is available only
     * via AAD authentication and not supported via subscription key authentication. For more details about AAD
     * authentication, check here:
     * https://learn.microsoft.com/en-us/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-azure-active-directory.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     resourcesMetadata (Required): [
     *          (Required){
     *             azureResourceId: String (Required)
     *             customDomain: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The new project resources info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringDeploymentResourcesJobState, Void>
        beginAssignDeploymentResourcesWithModel(String projectName, BinaryData body, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.assignDeploymentResourcesWithResponse(projectName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringDeploymentResourcesJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Unassign resources from a project. This disallows deploying new deployments to these resources, and deletes
     * existing deployments assigned to them.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The info for the deployment resources to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> unassignDeploymentResourcesWithResponseAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.unassignDeploymentResources(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, contentType, accept, body, requestOptions,
            context));
    }

    /**
     * Unassign resources from a project. This disallows deploying new deployments to these resources, and deletes
     * existing deployments assigned to them.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The info for the deployment resources to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> unassignDeploymentResourcesWithResponse(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.unassignDeploymentResourcesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, contentType, accept, body, requestOptions,
            Context.NONE);
    }

    /**
     * Unassign resources from a project. This disallows deploying new deployments to these resources, and deletes
     * existing deployments assigned to them.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The info for the deployment resources to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginUnassignDeploymentResourcesAsync(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.unassignDeploymentResourcesWithResponseAsync(projectName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Unassign resources from a project. This disallows deploying new deployments to these resources, and deletes
     * existing deployments assigned to them.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The info for the deployment resources to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginUnassignDeploymentResources(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.unassignDeploymentResourcesWithResponse(projectName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Unassign resources from a project. This disallows deploying new deployments to these resources, and deletes
     * existing deployments assigned to them.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The info for the deployment resources to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringDeploymentResourcesJobState, Void>
        beginUnassignDeploymentResourcesWithModelAsync(String projectName, BinaryData body,
            RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.unassignDeploymentResourcesWithResponseAsync(projectName, body, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringDeploymentResourcesJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Unassign resources from a project. This disallows deploying new deployments to these resources, and deletes
     * existing deployments assigned to them.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The info for the deployment resources to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringDeploymentResourcesJobState, Void>
        beginUnassignDeploymentResourcesWithModel(String projectName, BinaryData body, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.unassignDeploymentResourcesWithResponse(projectName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringDeploymentResourcesJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Gets the status of an existing assign deployment resources job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing assign deployment resources job along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAssignDeploymentResourcesStatusWithResponseAsync(String projectName,
        String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAssignDeploymentResourcesStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, jobId, accept, requestOptions, context));
    }

    /**
     * Gets the status of an existing assign deployment resources job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing assign deployment resources job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAssignDeploymentResourcesStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAssignDeploymentResourcesStatusSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the status of an existing unassign deployment resources job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing unassign deployment resources job along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUnassignDeploymentResourcesStatusWithResponseAsync(String projectName,
        String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getUnassignDeploymentResourcesStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, jobId, accept, requestOptions, context));
    }

    /**
     * Gets the status of an existing unassign deployment resources job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing unassign deployment resources job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getUnassignDeploymentResourcesStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getUnassignDeploymentResourcesStatusSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists the non-expired training jobs created for a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         trainingMode: String(advanced/standard) (Optional)
     *         trainingStatus (Required): {
     *             percentComplete: int (Required)
     *             startDateTime: OffsetDateTime (Optional)
     *             endDateTime: OffsetDateTime (Optional)
     *             status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *         }
     *         evaluationStatus (Optional): (recursive schema, see evaluationStatus above)
     *         estimatedEndDateTime: OffsetDateTime (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringTrainingJobState items along with {@link PagedResponse}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTrainingJobsSinglePageAsync(String projectName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listTrainingJobs(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists the non-expired training jobs created for a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         trainingMode: String(advanced/standard) (Optional)
     *         trainingStatus (Required): {
     *             percentComplete: int (Required)
     *             startDateTime: OffsetDateTime (Optional)
     *             endDateTime: OffsetDateTime (Optional)
     *             status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *         }
     *         evaluationStatus (Optional): (recursive schema, see evaluationStatus above)
     *         estimatedEndDateTime: OffsetDateTime (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringTrainingJobState items as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listTrainingJobsAsync(String projectName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listTrainingJobsSinglePageAsync(projectName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listTrainingJobsNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists the non-expired training jobs created for a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         trainingMode: String(advanced/standard) (Optional)
     *         trainingStatus (Required): {
     *             percentComplete: int (Required)
     *             startDateTime: OffsetDateTime (Optional)
     *             endDateTime: OffsetDateTime (Optional)
     *             status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *         }
     *         evaluationStatus (Optional): (recursive schema, see evaluationStatus above)
     *         estimatedEndDateTime: OffsetDateTime (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringTrainingJobState items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listTrainingJobsSinglePage(String projectName, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listTrainingJobsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists the non-expired training jobs created for a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         trainingMode: String(advanced/standard) (Optional)
     *         trainingStatus (Required): {
     *             percentComplete: int (Required)
     *             startDateTime: OffsetDateTime (Optional)
     *             endDateTime: OffsetDateTime (Optional)
     *             status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *         }
     *         evaluationStatus (Optional): (recursive schema, see evaluationStatus above)
     *         estimatedEndDateTime: OffsetDateTime (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringTrainingJobState items as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTrainingJobs(String projectName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listTrainingJobsSinglePage(projectName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listTrainingJobsNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets the status for a training job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         trainingMode: String(advanced/standard) (Optional)
     *         trainingStatus (Required): {
     *             percentComplete: int (Required)
     *             startDateTime: OffsetDateTime (Optional)
     *             endDateTime: OffsetDateTime (Optional)
     *             status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *         }
     *         evaluationStatus (Optional): (recursive schema, see evaluationStatus above)
     *         estimatedEndDateTime: OffsetDateTime (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for a training job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTrainingStatusWithResponseAsync(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTrainingStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, jobId, accept, requestOptions, context));
    }

    /**
     * Gets the status for a training job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         trainingMode: String(advanced/standard) (Optional)
     *         trainingStatus (Required): {
     *             percentComplete: int (Required)
     *             startDateTime: OffsetDateTime (Optional)
     *             endDateTime: OffsetDateTime (Optional)
     *             status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *         }
     *         evaluationStatus (Optional): (recursive schema, see evaluationStatus above)
     *         estimatedEndDateTime: OffsetDateTime (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for a training job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTrainingStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTrainingStatusSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Triggers a cancellation for a running training job.
     * 
     * @param projectName The name of the project to use.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> cancelTrainingJobWithResponseAsync(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.cancelTrainingJob(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, jobId, accept, requestOptions, context));
    }

    /**
     * Triggers a cancellation for a running training job.
     * 
     * @param projectName The name of the project to use.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> cancelTrainingJobWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.cancelTrainingJobSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Triggers a cancellation for a running training job.
     * 
     * @param projectName The name of the project to use.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCancelTrainingJobAsync(String projectName, String jobId,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.cancelTrainingJobWithResponseAsync(projectName, jobId, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.OperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Triggers a cancellation for a running training job.
     * 
     * @param projectName The name of the project to use.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCancelTrainingJob(String projectName, String jobId,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.cancelTrainingJobWithResponse(projectName, jobId, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.SyncOperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Triggers a cancellation for a running training job.
     * 
     * @param projectName The name of the project to use.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringTrainingJobState, AnalyzeConversationAuthoringTrainingJobResult>
        beginCancelTrainingJobWithModelAsync(String projectName, String jobId, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.cancelTrainingJobWithResponseAsync(projectName, jobId, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.OperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(AnalyzeConversationAuthoringTrainingJobState.class),
            TypeReference.createInstance(AnalyzeConversationAuthoringTrainingJobResult.class));
    }

    /**
     * Triggers a cancellation for a running training job.
     * 
     * @param projectName The name of the project to use.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringTrainingJobState, AnalyzeConversationAuthoringTrainingJobResult>
        beginCancelTrainingJobWithModel(String projectName, String jobId, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.cancelTrainingJobWithResponse(projectName, jobId, requestOptions),
            new com.azure.ai.language.conversations.authoring.implementation.SyncOperationLocationPollingStrategy<>(
                new PollingStrategyOptions(this.client.getHttpPipeline())
                    .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                    .setContext(requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE)
                    .setServiceVersion(this.client.getServiceVersion().getVersion()),
                "result"),
            TypeReference.createInstance(AnalyzeConversationAuthoringTrainingJobState.class),
            TypeReference.createInstance(AnalyzeConversationAuthoringTrainingJobResult.class));
    }

    /**
     * Gets the status for a project deletion job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for a project deletion job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getProjectDeletionStatusWithResponseAsync(String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getProjectDeletionStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), jobId, accept, requestOptions, context));
    }

    /**
     * Gets the status for a project deletion job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for a project deletion job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getProjectDeletionStatusWithResponse(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getProjectDeletionStatusSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists the deployments to which an Azure resource is assigned. This doesn't return deployments belonging to
     * projects owned by this resource. It only returns deployments belonging to projects owned by other resources.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of resources to return from the
     * collection.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>An offset into the collection of the first resource to be
     * returned.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of resources to include in a single
     * response.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             projectName: String (Required)
     *             deploymentsMetadata (Required): [
     *                  (Required){
     *                     deploymentName: String (Required)
     *                     lastDeployedDateTime: OffsetDateTime (Required)
     *                     deploymentExpirationDate: LocalDate (Required)
     *                 }
     *             ]
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the metadata for deployments assigned to a resource along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listAssignedResourceDeploymentsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listAssignedResourceDeployments(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Lists the deployments to which an Azure resource is assigned. This doesn't return deployments belonging to
     * projects owned by this resource. It only returns deployments belonging to projects owned by other resources.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of resources to return from the
     * collection.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>An offset into the collection of the first resource to be
     * returned.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of resources to include in a single
     * response.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             projectName: String (Required)
     *             deploymentsMetadata (Required): [
     *                  (Required){
     *                     deploymentName: String (Required)
     *                     lastDeployedDateTime: OffsetDateTime (Required)
     *                     deploymentExpirationDate: LocalDate (Required)
     *                 }
     *             ]
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the metadata for deployments assigned to a resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listAssignedResourceDeploymentsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listAssignedResourceDeploymentsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
    }

    /**
     * Lists the supported languages for the given project type.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of resources to return from the
     * collection.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>An offset into the collection of the first resource to be
     * returned.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of resources to include in a single
     * response.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             languageName: String (Required)
     *             languageCode: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectKind The project kind. Allowed values: "Conversation", "Orchestration",
     * "CustomConversationSummarization".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a list of retrieved languages along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSupportedLanguagesWithResponseAsync(String projectKind,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSupportedLanguages(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectKind, accept, requestOptions, context));
    }

    /**
     * Lists the supported languages for the given project type.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of resources to return from the
     * collection.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>An offset into the collection of the first resource to be
     * returned.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of resources to include in a single
     * response.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             languageName: String (Required)
     *             languageCode: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectKind The project kind. Allowed values: "Conversation", "Orchestration",
     * "CustomConversationSummarization".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a list of retrieved languages along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSupportedLanguagesWithResponse(String projectKind, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSupportedLanguagesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectKind, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists the supported prebuilt entities that can be used while creating composed entities.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>language</td><td>String</td><td>No</td><td>The language to get supported prebuilt entities for. Required
     * if multilingual is false. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb"
     * for English (UK), "es" for Spanish etc.</td></tr>
     * <tr><td>multilingual</td><td>String</td><td>No</td><td>Whether to get the support prebuilt entities for
     * multilingual or monolingual projects. If true, the language parameter is ignored.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of resources to return from the
     * collection.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>An offset into the collection of the first resource to be
     * returned.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of resources to include in a single
     * response.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             category: String (Required)
     *             description: String (Required)
     *             examples: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a list of the retrieved supported prebuilt entities along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSupportedPrebuiltEntitiesWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSupportedPrebuiltEntities(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Lists the supported prebuilt entities that can be used while creating composed entities.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>language</td><td>String</td><td>No</td><td>The language to get supported prebuilt entities for. Required
     * if multilingual is false. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb"
     * for English (UK), "es" for Spanish etc.</td></tr>
     * <tr><td>multilingual</td><td>String</td><td>No</td><td>Whether to get the support prebuilt entities for
     * multilingual or monolingual projects. If true, the language parameter is ignored.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of resources to return from the
     * collection.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>An offset into the collection of the first resource to be
     * returned.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of resources to include in a single
     * response.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             category: String (Required)
     *             description: String (Required)
     *             examples: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a list of the retrieved supported prebuilt entities along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSupportedPrebuiltEntitiesWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSupportedPrebuiltEntitiesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
    }

    /**
     * Lists the support training config version for a given project type.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of resources to return from the
     * collection.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>An offset into the collection of the first resource to be
     * returned.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of resources to include in a single
     * response.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             trainingConfigVersion: String (Required)
     *             modelExpirationDate: LocalDate (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectKind The project kind. Allowed values: "Conversation", "Orchestration",
     * "CustomConversationSummarization".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a list of training config versions along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listTrainingConfigVersionsWithResponseAsync(String projectKind,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listTrainingConfigVersions(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectKind, accept, requestOptions, context));
    }

    /**
     * Lists the support training config version for a given project type.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of resources to return from the
     * collection.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>An offset into the collection of the first resource to be
     * returned.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of resources to include in a single
     * response.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             trainingConfigVersion: String (Required)
     *             modelExpirationDate: LocalDate (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectKind The project kind. Allowed values: "Conversation", "Orchestration",
     * "CustomConversationSummarization".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a list of training config versions along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listTrainingConfigVersionsWithResponse(String projectKind,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listTrainingConfigVersionsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectKind, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets the details of an exported model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exportedModelName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastExportedModelDateTime: OffsetDateTime (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param exportedModelName The exported model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of an exported model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getExportedModelWithResponseAsync(String projectName, String exportedModelName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getExportedModel(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                projectName, exportedModelName, accept, requestOptions, context));
    }

    /**
     * Gets the details of an exported model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exportedModelName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastExportedModelDateTime: OffsetDateTime (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param exportedModelName The exported model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of an exported model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getExportedModelWithResponse(String projectName, String exportedModelName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getExportedModelSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, exportedModelName, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists the exported models belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exportedModelName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastExportedModelDateTime: OffsetDateTime (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringExportedTrainedModel items along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listExportedModelsSinglePageAsync(String projectName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listExportedModels(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists the exported models belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exportedModelName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastExportedModelDateTime: OffsetDateTime (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringExportedTrainedModel items as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listExportedModelsAsync(String projectName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listExportedModelsSinglePageAsync(projectName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listExportedModelsNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists the exported models belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exportedModelName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastExportedModelDateTime: OffsetDateTime (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringExportedTrainedModel items along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listExportedModelsSinglePage(String projectName, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listExportedModelsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists the exported models belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exportedModelName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastExportedModelDateTime: OffsetDateTime (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringExportedTrainedModel items as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listExportedModels(String projectName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listExportedModelsSinglePage(projectName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listExportedModelsNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Deletes an existing exported model.
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteExportedModelWithResponseAsync(String projectName, String exportedModelName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteExportedModel(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, exportedModelName, accept, requestOptions,
            context));
    }

    /**
     * Deletes an existing exported model.
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> deleteExportedModelWithResponse(String projectName, String exportedModelName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteExportedModelSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            projectName, exportedModelName, accept, requestOptions, Context.NONE);
    }

    /**
     * Deletes an existing exported model.
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteExportedModelAsync(String projectName, String exportedModelName,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteExportedModelWithResponseAsync(projectName, exportedModelName, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes an existing exported model.
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteExportedModel(String projectName, String exportedModelName,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteExportedModelWithResponse(projectName, exportedModelName, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes an existing exported model.
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringExportedModelJobState, Void> beginDeleteExportedModelWithModelAsync(
        String projectName, String exportedModelName, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.deleteExportedModelWithResponseAsync(projectName, exportedModelName, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringExportedModelJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Deletes an existing exported model.
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringExportedModelJobState, Void>
        beginDeleteExportedModelWithModel(String projectName, String exportedModelName, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.deleteExportedModelWithResponse(projectName, exportedModelName, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringExportedModelJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Creates a new exported model or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param body The exported model info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> createOrUpdateExportedModelWithResponseAsync(String projectName,
        String exportedModelName, BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createOrUpdateExportedModel(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, exportedModelName, contentType, accept, body,
            requestOptions, context));
    }

    /**
     * Creates a new exported model or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param body The exported model info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> createOrUpdateExportedModelWithResponse(String projectName, String exportedModelName,
        BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateExportedModelSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, exportedModelName, contentType, accept, body,
            requestOptions, Context.NONE);
    }

    /**
     * Creates a new exported model or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param body The exported model info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateOrUpdateExportedModelAsync(String projectName,
        String exportedModelName, BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.createOrUpdateExportedModelWithResponseAsync(projectName, exportedModelName, body,
                requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Creates a new exported model or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param body The exported model info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateOrUpdateExportedModel(String projectName,
        String exportedModelName, BinaryData body, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.createOrUpdateExportedModelWithResponse(projectName, exportedModelName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Creates a new exported model or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param body The exported model info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<AnalyzeConversationAuthoringExportedModelJobState, Void>
        beginCreateOrUpdateExportedModelWithModelAsync(String projectName, String exportedModelName, BinaryData body,
            RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.createOrUpdateExportedModelWithResponseAsync(projectName, exportedModelName, body,
                requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringExportedModelJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Creates a new exported model or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param body The exported model info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeConversationAuthoringExportedModelJobState, Void>
        beginCreateOrUpdateExportedModelWithModel(String projectName, String exportedModelName, BinaryData body,
            RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.createOrUpdateExportedModelWithResponse(projectName, exportedModelName, body, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{Endpoint}/language".replace("{Endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(AnalyzeConversationAuthoringExportedModelJobState.class),
            TypeReference.createInstance(Void.class));
    }

    /**
     * Gets the status for an existing job to create or update an exported model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param exportedModelName The exported model name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for an existing job to create or update an exported model along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getExportedModelJobStatusWithResponseAsync(String projectName,
        String exportedModelName, String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getExportedModelJobStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, exportedModelName, jobId, accept, requestOptions,
            context));
    }

    /**
     * Gets the status for an existing job to create or update an exported model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param exportedModelName The exported model name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for an existing job to create or update an exported model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getExportedModelJobStatusWithResponse(String projectName, String exportedModelName,
        String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getExportedModelJobStatusSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), projectName, exportedModelName, jobId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectMetadata items along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listProjectsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listProjectsNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(Conversation/Orchestration/CustomConversationSummarization) (Required)
     *     settings (Optional): {
     *         confidenceThreshold: double (Optional, Required on create)
     *     }
     *     storageInputContainerName: String (Optional)
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectMetadata items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listProjectsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listProjectsNextSync(nextLink, this.client.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     deploymentName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastDeployedDateTime: OffsetDateTime (Required)
     *     deploymentExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     assignedResources (Required): [
     *          (Required){
     *             resourceId: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectDeployment items along with {@link PagedResponse}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeploymentsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeploymentsNext(nextLink, this.client.getEndpoint(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     deploymentName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastDeployedDateTime: OffsetDateTime (Required)
     *     deploymentExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     assignedResources (Required): [
     *          (Required){
     *             resourceId: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectDeployment items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeploymentsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeploymentsNextSync(nextLink, this.client.getEndpoint(), accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     label: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastTrainingDurationInSeconds: int (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     hasSnapshot: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectTrainedModel items along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTrainedModelsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listTrainedModelsNext(nextLink, this.client.getEndpoint(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     label: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastTrainingDurationInSeconds: int (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     hasSnapshot: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringProjectTrainedModel items along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listTrainedModelsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listTrainedModelsNextSync(nextLink, this.client.getEndpoint(), accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     text: String (Required)
     *     language: String (Required)
     *     entitiesResult (Required): {
     *         expectedEntities (Required): [
     *              (Required){
     *                 category: String (Required)
     *                 offset: int (Required)
     *                 length: int (Required)
     *             }
     *         ]
     *         predictedEntities (Required): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     intentsResult (Required): {
     *         expectedIntent: String (Required)
     *         predictedIntent: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringUtteranceEvaluationResult items along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> getModelEvaluationResultsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getModelEvaluationResultsNext(nextLink, this.client.getEndpoint(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     text: String (Required)
     *     language: String (Required)
     *     entitiesResult (Required): {
     *         expectedEntities (Required): [
     *              (Required){
     *                 category: String (Required)
     *                 offset: int (Required)
     *                 length: int (Required)
     *             }
     *         ]
     *         predictedEntities (Required): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     intentsResult (Required): {
     *         expectedIntent: String (Required)
     *         predictedIntent: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringUtteranceEvaluationResult items along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> getModelEvaluationResultsNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.getModelEvaluationResultsNextSync(nextLink, this.client.getEndpoint(),
            accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     azureResourceId: String (Required)
     *     region: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringAssignedDeploymentResource items along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listDeploymentResourcesNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listDeploymentResourcesNext(nextLink, this.client.getEndpoint(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     azureResourceId: String (Required)
     *     region: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringAssignedDeploymentResource items along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listDeploymentResourcesNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listDeploymentResourcesNextSync(nextLink, this.client.getEndpoint(), accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         trainingMode: String(advanced/standard) (Optional)
     *         trainingStatus (Required): {
     *             percentComplete: int (Required)
     *             startDateTime: OffsetDateTime (Optional)
     *             endDateTime: OffsetDateTime (Optional)
     *             status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *         }
     *         evaluationStatus (Optional): (recursive schema, see evaluationStatus above)
     *         estimatedEndDateTime: OffsetDateTime (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringTrainingJobState items along with {@link PagedResponse}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTrainingJobsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listTrainingJobsNext(nextLink, this.client.getEndpoint(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         trainingMode: String(advanced/standard) (Optional)
     *         trainingStatus (Required): {
     *             percentComplete: int (Required)
     *             startDateTime: OffsetDateTime (Optional)
     *             endDateTime: OffsetDateTime (Optional)
     *             status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *         }
     *         evaluationStatus (Optional): (recursive schema, see evaluationStatus above)
     *         estimatedEndDateTime: OffsetDateTime (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringTrainingJobState items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listTrainingJobsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listTrainingJobsNextSync(nextLink, this.client.getEndpoint(), accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exportedModelName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastExportedModelDateTime: OffsetDateTime (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringExportedTrainedModel items along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listExportedModelsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listExportedModelsNext(nextLink, this.client.getEndpoint(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exportedModelName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastExportedModelDateTime: OffsetDateTime (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeConversationAuthoringExportedTrainedModel items along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listExportedModelsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listExportedModelsNextSync(nextLink, this.client.getEndpoint(), accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
