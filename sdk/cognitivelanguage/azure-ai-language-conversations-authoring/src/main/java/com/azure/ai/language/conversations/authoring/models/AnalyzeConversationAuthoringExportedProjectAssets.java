// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the assets of an exported project.
 */
@Immutable
public class AnalyzeConversationAuthoringExportedProjectAssets
    implements JsonSerializable<AnalyzeConversationAuthoringExportedProjectAssets> {
    /*
     * The type of project containing the assets.
     */
    @Generated
    private ProjectKind projectKind = ProjectKind.fromString("AnalyzeConversationAuthoringExportedProjectAssets");

    /**
     * Creates an instance of AnalyzeConversationAuthoringExportedProjectAssets class.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedProjectAssets() {
    }

    /**
     * Get the projectKind property: The type of project containing the assets.
     * 
     * @return the projectKind value.
     */
    @Generated
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringExportedProjectAssets from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringExportedProjectAssets if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringExportedProjectAssets.
     */
    @Generated
    public static AnalyzeConversationAuthoringExportedProjectAssets fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("projectKind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Conversation".equals(discriminatorValue)) {
                    return AnalyzeConversationAuthoringConversationExportedProjectAssets.fromJson(readerToUse.reset());
                } else if ("Orchestration".equals(discriminatorValue)) {
                    return AnalyzeConversationAuthoringOrchestrationExportedProjectAssets.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static AnalyzeConversationAuthoringExportedProjectAssets fromJsonKnownDiscriminator(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeConversationAuthoringExportedProjectAssets deserializedAnalyzeConversationAuthoringExportedProjectAssets
                = new AnalyzeConversationAuthoringExportedProjectAssets();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectKind".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringExportedProjectAssets.projectKind
                        = ProjectKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzeConversationAuthoringExportedProjectAssets;
        });
    }
}
