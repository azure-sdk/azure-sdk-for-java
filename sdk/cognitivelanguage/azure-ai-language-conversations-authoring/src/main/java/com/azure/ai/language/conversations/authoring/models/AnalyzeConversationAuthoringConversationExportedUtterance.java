// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents an exported utterance for a conversational project.
 */
@Fluent
public final class AnalyzeConversationAuthoringConversationExportedUtterance
    implements JsonSerializable<AnalyzeConversationAuthoringConversationExportedUtterance> {
    /*
     * Represents the entity labels of the utterance.
     */
    @Generated
    private List<AnalyzeConversationAuthoringExportedUtteranceEntityLabel> entities;

    /*
     * The utterance text.
     */
    @Generated
    private final String text;

    /*
     * Represents the utterance's language. This is BCP-47 representation of a language. For example, use "en" for
     * English, "en-gb" for English (UK), "es" for Spanish etc.
     */
    @Generated
    private String language;

    /*
     * The intent of the utterance.
     */
    @Generated
    private final String intent;

    /*
     * The dataset for this utterance. Allowed values are 'Train' and 'Test'.
     */
    @Generated
    private String dataset;

    /**
     * Creates an instance of AnalyzeConversationAuthoringConversationExportedUtterance class.
     * 
     * @param text the text value to set.
     * @param intent the intent value to set.
     */
    @Generated
    public AnalyzeConversationAuthoringConversationExportedUtterance(String text, String intent) {
        this.text = text;
        this.intent = intent;
    }

    /**
     * Get the entities property: Represents the entity labels of the utterance.
     * 
     * @return the entities value.
     */
    @Generated
    public List<AnalyzeConversationAuthoringExportedUtteranceEntityLabel> getEntities() {
        return this.entities;
    }

    /**
     * Set the entities property: Represents the entity labels of the utterance.
     * 
     * @param entities the entities value to set.
     * @return the AnalyzeConversationAuthoringConversationExportedUtterance object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringConversationExportedUtterance
        setEntities(List<AnalyzeConversationAuthoringExportedUtteranceEntityLabel> entities) {
        this.entities = entities;
        return this;
    }

    /**
     * Get the text property: The utterance text.
     * 
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Get the language property: Represents the utterance's language. This is BCP-47 representation of a language. For
     * example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
     * 
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Set the language property: Represents the utterance's language. This is BCP-47 representation of a language. For
     * example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
     * 
     * @param language the language value to set.
     * @return the AnalyzeConversationAuthoringConversationExportedUtterance object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringConversationExportedUtterance setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Get the intent property: The intent of the utterance.
     * 
     * @return the intent value.
     */
    @Generated
    public String getIntent() {
        return this.intent;
    }

    /**
     * Get the dataset property: The dataset for this utterance. Allowed values are 'Train' and 'Test'.
     * 
     * @return the dataset value.
     */
    @Generated
    public String getDataset() {
        return this.dataset;
    }

    /**
     * Set the dataset property: The dataset for this utterance. Allowed values are 'Train' and 'Test'.
     * 
     * @param dataset the dataset value to set.
     * @return the AnalyzeConversationAuthoringConversationExportedUtterance object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringConversationExportedUtterance setDataset(String dataset) {
        this.dataset = dataset;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeStringField("intent", this.intent);
        jsonWriter.writeArrayField("entities", this.entities, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("language", this.language);
        jsonWriter.writeStringField("dataset", this.dataset);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringConversationExportedUtterance from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringConversationExportedUtterance if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * AnalyzeConversationAuthoringConversationExportedUtterance.
     */
    @Generated
    public static AnalyzeConversationAuthoringConversationExportedUtterance fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String text = null;
            String intent = null;
            List<AnalyzeConversationAuthoringExportedUtteranceEntityLabel> entities = null;
            String language = null;
            String dataset = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else if ("intent".equals(fieldName)) {
                    intent = reader.getString();
                } else if ("entities".equals(fieldName)) {
                    entities = reader.readArray(
                        reader1 -> AnalyzeConversationAuthoringExportedUtteranceEntityLabel.fromJson(reader1));
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("dataset".equals(fieldName)) {
                    dataset = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AnalyzeConversationAuthoringConversationExportedUtterance deserializedAnalyzeConversationAuthoringConversationExportedUtterance
                = new AnalyzeConversationAuthoringConversationExportedUtterance(text, intent);
            deserializedAnalyzeConversationAuthoringConversationExportedUtterance.entities = entities;
            deserializedAnalyzeConversationAuthoringConversationExportedUtterance.language = language;
            deserializedAnalyzeConversationAuthoringConversationExportedUtterance.dataset = dataset;

            return deserializedAnalyzeConversationAuthoringConversationExportedUtterance;
        });
    }
}
