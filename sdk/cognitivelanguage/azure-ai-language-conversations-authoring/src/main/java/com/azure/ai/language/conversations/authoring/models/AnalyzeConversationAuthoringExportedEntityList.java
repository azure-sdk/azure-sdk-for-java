// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents a list component of an entity.
 */
@Fluent
public final class AnalyzeConversationAuthoringExportedEntityList
    implements JsonSerializable<AnalyzeConversationAuthoringExportedEntityList> {
    /*
     * The sub-lists of the list component.
     */
    @Generated
    private List<AnalyzeConversationAuthoringExportedEntitySublist> sublists;

    /**
     * Creates an instance of AnalyzeConversationAuthoringExportedEntityList class.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedEntityList() {
    }

    /**
     * Get the sublists property: The sub-lists of the list component.
     * 
     * @return the sublists value.
     */
    @Generated
    public List<AnalyzeConversationAuthoringExportedEntitySublist> getSublists() {
        return this.sublists;
    }

    /**
     * Set the sublists property: The sub-lists of the list component.
     * 
     * @param sublists the sublists value to set.
     * @return the AnalyzeConversationAuthoringExportedEntityList object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedEntityList
        setSublists(List<AnalyzeConversationAuthoringExportedEntitySublist> sublists) {
        this.sublists = sublists;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("sublists", this.sublists, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringExportedEntityList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringExportedEntityList if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringExportedEntityList.
     */
    @Generated
    public static AnalyzeConversationAuthoringExportedEntityList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeConversationAuthoringExportedEntityList deserializedAnalyzeConversationAuthoringExportedEntityList
                = new AnalyzeConversationAuthoringExportedEntityList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sublists".equals(fieldName)) {
                    List<AnalyzeConversationAuthoringExportedEntitySublist> sublists = reader
                        .readArray(reader1 -> AnalyzeConversationAuthoringExportedEntitySublist.fromJson(reader1));
                    deserializedAnalyzeConversationAuthoringExportedEntityList.sublists = sublists;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzeConversationAuthoringExportedEntityList;
        });
    }
}
