// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the metadata for assigned deployments for a project.
 */
@Immutable
public final class AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata
    implements JsonSerializable<AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata> {
    /*
     * Represents the project name.
     */
    @Generated
    private final String projectName;

    /*
     * Represents the resource region.
     */
    @Generated
    private final List<AnalyzeConversationAuthoringAssignedProjectDeploymentMetadata> deploymentsMetadata;

    /**
     * Creates an instance of AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata class.
     * 
     * @param projectName the projectName value to set.
     * @param deploymentsMetadata the deploymentsMetadata value to set.
     */
    @Generated
    private AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata(String projectName,
        List<AnalyzeConversationAuthoringAssignedProjectDeploymentMetadata> deploymentsMetadata) {
        this.projectName = projectName;
        this.deploymentsMetadata = deploymentsMetadata;
    }

    /**
     * Get the projectName property: Represents the project name.
     * 
     * @return the projectName value.
     */
    @Generated
    public String getProjectName() {
        return this.projectName;
    }

    /**
     * Get the deploymentsMetadata property: Represents the resource region.
     * 
     * @return the deploymentsMetadata value.
     */
    @Generated
    public List<AnalyzeConversationAuthoringAssignedProjectDeploymentMetadata> getDeploymentsMetadata() {
        return this.deploymentsMetadata;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectName", this.projectName);
        jsonWriter.writeArrayField("deploymentsMetadata", this.deploymentsMetadata,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata.
     */
    @Generated
    public static AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String projectName = null;
            List<AnalyzeConversationAuthoringAssignedProjectDeploymentMetadata> deploymentsMetadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectName".equals(fieldName)) {
                    projectName = reader.getString();
                } else if ("deploymentsMetadata".equals(fieldName)) {
                    deploymentsMetadata = reader.readArray(
                        reader1 -> AnalyzeConversationAuthoringAssignedProjectDeploymentMetadata.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata(projectName, deploymentsMetadata);
        });
    }
}
