// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents a list of retrieved languages.
 */
@Immutable
public final class AnalyzeConversationAuthoringSupportedLanguages
    implements JsonSerializable<AnalyzeConversationAuthoringSupportedLanguages> {
    /*
     * The list of the languages.
     */
    @Generated
    private final List<AnalyzeConversationAuthoringSupportedLanguage> value;

    /*
     * The next page link.
     */
    @Generated
    private String nextLink;

    /**
     * Creates an instance of AnalyzeConversationAuthoringSupportedLanguages class.
     * 
     * @param value the value value to set.
     */
    @Generated
    private AnalyzeConversationAuthoringSupportedLanguages(List<AnalyzeConversationAuthoringSupportedLanguage> value) {
        this.value = value;
    }

    /**
     * Get the value property: The list of the languages.
     * 
     * @return the value value.
     */
    @Generated
    public List<AnalyzeConversationAuthoringSupportedLanguage> getValue() {
        return this.value;
    }

    /**
     * Get the nextLink property: The next page link.
     * 
     * @return the nextLink value.
     */
    @Generated
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("nextLink", this.nextLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringSupportedLanguages from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringSupportedLanguages if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringSupportedLanguages.
     */
    @Generated
    public static AnalyzeConversationAuthoringSupportedLanguages fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<AnalyzeConversationAuthoringSupportedLanguage> value = null;
            String nextLink = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    value
                        = reader.readArray(reader1 -> AnalyzeConversationAuthoringSupportedLanguage.fromJson(reader1));
                } else if ("nextLink".equals(fieldName)) {
                    nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AnalyzeConversationAuthoringSupportedLanguages deserializedAnalyzeConversationAuthoringSupportedLanguages
                = new AnalyzeConversationAuthoringSupportedLanguages(value);
            deserializedAnalyzeConversationAuthoringSupportedLanguages.nextLink = nextLink;

            return deserializedAnalyzeConversationAuthoringSupportedLanguages;
        });
    }
}
