// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.ai.language.conversations.authoring.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Represents the settings used to define the project behavior.
 */
@Fluent
public final class AnalyzeConversationAuthoringProjectSettings
    implements JsonSerializable<AnalyzeConversationAuthoringProjectSettings> {
    /*
     * The threshold of the intent with the highest confidence, at which the prediction will automatically be changed to
     * "None". The value of the threshold should be between 0 and 1 inclusive.
     */
    @Generated
    private double confidenceThreshold;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setAnalyzeConversationAuthoringProjectSettingsAccessor(
            new JsonMergePatchHelper.AnalyzeConversationAuthoringProjectSettingsAccessor() {
                @Override
                public AnalyzeConversationAuthoringProjectSettings prepareModelForJsonMergePatch(
                    AnalyzeConversationAuthoringProjectSettings model, boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(AnalyzeConversationAuthoringProjectSettings model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * Creates an instance of AnalyzeConversationAuthoringProjectSettings class.
     */
    @Generated
    public AnalyzeConversationAuthoringProjectSettings() {
    }

    /**
     * Get the confidenceThreshold property: The threshold of the intent with the highest confidence, at which the
     * prediction will automatically be changed to "None". The value of the threshold should be between 0 and 1
     * inclusive.
     * 
     * @return the confidenceThreshold value.
     */
    @Generated
    public double getConfidenceThreshold() {
        return this.confidenceThreshold;
    }

    /**
     * Set the confidenceThreshold property: The threshold of the intent with the highest confidence, at which the
     * prediction will automatically be changed to "None". The value of the threshold should be between 0 and 1
     * inclusive.
     * <p>Required when create the resource.</p>
     * 
     * @param confidenceThreshold the confidenceThreshold value to set.
     * @return the AnalyzeConversationAuthoringProjectSettings object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringProjectSettings setConfidenceThreshold(double confidenceThreshold) {
        this.confidenceThreshold = confidenceThreshold;
        this.updatedProperties.add("confidenceThreshold");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeDoubleField("confidenceThreshold", this.confidenceThreshold);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("confidenceThreshold")) {
            jsonWriter.writeDoubleField("confidenceThreshold", this.confidenceThreshold);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringProjectSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringProjectSettings if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringProjectSettings.
     */
    @Generated
    public static AnalyzeConversationAuthoringProjectSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeConversationAuthoringProjectSettings deserializedAnalyzeConversationAuthoringProjectSettings
                = new AnalyzeConversationAuthoringProjectSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("confidenceThreshold".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringProjectSettings.confidenceThreshold = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzeConversationAuthoringProjectSettings;
        });
    }
}
