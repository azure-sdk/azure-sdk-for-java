// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a regex expression inside a regex component. This expression follows the .NET regex syntax. For reference,
 * check here: https://learn.microsoft.com/dotnet/standard/base-types/regular-expressions.
 */
@Fluent
public final class AnalyzeConversationAuthoringExportedEntityRegexExpression
    implements JsonSerializable<AnalyzeConversationAuthoringExportedEntityRegexExpression> {
    /*
     * The key of the regex expression.
     */
    @Generated
    private String regexKey;

    /*
     * Represents the language of the regex expression. This is BCP-47 representation of a language. For example, use
     * "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
     */
    @Generated
    private String language;

    /*
     * The regex pattern.
     */
    @Generated
    private String regexPattern;

    /**
     * Creates an instance of AnalyzeConversationAuthoringExportedEntityRegexExpression class.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedEntityRegexExpression() {
    }

    /**
     * Get the regexKey property: The key of the regex expression.
     * 
     * @return the regexKey value.
     */
    @Generated
    public String getRegexKey() {
        return this.regexKey;
    }

    /**
     * Set the regexKey property: The key of the regex expression.
     * 
     * @param regexKey the regexKey value to set.
     * @return the AnalyzeConversationAuthoringExportedEntityRegexExpression object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedEntityRegexExpression setRegexKey(String regexKey) {
        this.regexKey = regexKey;
        return this;
    }

    /**
     * Get the language property: Represents the language of the regex expression. This is BCP-47 representation of a
     * language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
     * 
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Set the language property: Represents the language of the regex expression. This is BCP-47 representation of a
     * language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
     * 
     * @param language the language value to set.
     * @return the AnalyzeConversationAuthoringExportedEntityRegexExpression object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedEntityRegexExpression setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Get the regexPattern property: The regex pattern.
     * 
     * @return the regexPattern value.
     */
    @Generated
    public String getRegexPattern() {
        return this.regexPattern;
    }

    /**
     * Set the regexPattern property: The regex pattern.
     * 
     * @param regexPattern the regexPattern value to set.
     * @return the AnalyzeConversationAuthoringExportedEntityRegexExpression object itself.
     */
    @Generated
    public AnalyzeConversationAuthoringExportedEntityRegexExpression setRegexPattern(String regexPattern) {
        this.regexPattern = regexPattern;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("regexKey", this.regexKey);
        jsonWriter.writeStringField("language", this.language);
        jsonWriter.writeStringField("regexPattern", this.regexPattern);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringExportedEntityRegexExpression from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringExportedEntityRegexExpression if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * AnalyzeConversationAuthoringExportedEntityRegexExpression.
     */
    @Generated
    public static AnalyzeConversationAuthoringExportedEntityRegexExpression fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeConversationAuthoringExportedEntityRegexExpression deserializedAnalyzeConversationAuthoringExportedEntityRegexExpression
                = new AnalyzeConversationAuthoringExportedEntityRegexExpression();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("regexKey".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringExportedEntityRegexExpression.regexKey = reader.getString();
                } else if ("language".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringExportedEntityRegexExpression.language = reader.getString();
                } else if ("regexPattern".equals(fieldName)) {
                    deserializedAnalyzeConversationAuthoringExportedEntityRegexExpression.regexPattern
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzeConversationAuthoringExportedEntityRegexExpression;
        });
    }
}
