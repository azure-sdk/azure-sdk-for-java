// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.conversations.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Represents the state of loading a snapshot job.
 */
@Immutable
public final class AnalyzeConversationAuthoringLoadSnapshotJobState
    implements JsonSerializable<AnalyzeConversationAuthoringLoadSnapshotJobState> {
    /*
     * The job ID.
     */
    @Generated
    private String jobId;

    /*
     * The creation date time of the job.
     */
    @Generated
    private final OffsetDateTime createdDateTime;

    /*
     * The last date time the job was updated.
     */
    @Generated
    private final OffsetDateTime lastUpdatedDateTime;

    /*
     * The expiration date time of the job.
     */
    @Generated
    private OffsetDateTime expirationDateTime;

    /*
     * The job status.
     */
    @Generated
    private final JobStatus status;

    /*
     * The warnings that were encountered while executing the job.
     */
    @Generated
    private List<Warning> warnings;

    /*
     * The errors encountered while executing the job.
     */
    @Generated
    private List<Error> errors;

    /**
     * Creates an instance of AnalyzeConversationAuthoringLoadSnapshotJobState class.
     * 
     * @param createdDateTime the createdDateTime value to set.
     * @param lastUpdatedDateTime the lastUpdatedDateTime value to set.
     * @param status the status value to set.
     */
    @Generated
    private AnalyzeConversationAuthoringLoadSnapshotJobState(OffsetDateTime createdDateTime,
        OffsetDateTime lastUpdatedDateTime, JobStatus status) {
        this.createdDateTime = createdDateTime;
        this.lastUpdatedDateTime = lastUpdatedDateTime;
        this.status = status;
    }

    /**
     * Get the jobId property: The job ID.
     * 
     * @return the jobId value.
     */
    @Generated
    public String getJobId() {
        return this.jobId;
    }

    /**
     * Get the createdDateTime property: The creation date time of the job.
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the lastUpdatedDateTime property: The last date time the job was updated.
     * 
     * @return the lastUpdatedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastUpdatedDateTime() {
        return this.lastUpdatedDateTime;
    }

    /**
     * Get the expirationDateTime property: The expiration date time of the job.
     * 
     * @return the expirationDateTime value.
     */
    @Generated
    public OffsetDateTime getExpirationDateTime() {
        return this.expirationDateTime;
    }

    /**
     * Get the status property: The job status.
     * 
     * @return the status value.
     */
    @Generated
    public JobStatus getStatus() {
        return this.status;
    }

    /**
     * Get the warnings property: The warnings that were encountered while executing the job.
     * 
     * @return the warnings value.
     */
    @Generated
    public List<Warning> getWarnings() {
        return this.warnings;
    }

    /**
     * Get the errors property: The errors encountered while executing the job.
     * 
     * @return the errors value.
     */
    @Generated
    public List<Error> getErrors() {
        return this.errors;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createdDateTime",
            this.createdDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdDateTime));
        jsonWriter.writeStringField("lastUpdatedDateTime",
            this.lastUpdatedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedDateTime));
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("expirationDateTime",
            this.expirationDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationDateTime));
        jsonWriter.writeArrayField("warnings", this.warnings, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeConversationAuthoringLoadSnapshotJobState from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeConversationAuthoringLoadSnapshotJobState if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeConversationAuthoringLoadSnapshotJobState.
     */
    @Generated
    public static AnalyzeConversationAuthoringLoadSnapshotJobState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String jobId = null;
            OffsetDateTime createdDateTime = null;
            OffsetDateTime lastUpdatedDateTime = null;
            JobStatus status = null;
            OffsetDateTime expirationDateTime = null;
            List<Warning> warnings = null;
            List<Error> errors = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobId".equals(fieldName)) {
                    jobId = reader.getString();
                } else if ("createdDateTime".equals(fieldName)) {
                    createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdatedDateTime".equals(fieldName)) {
                    lastUpdatedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    status = JobStatus.fromString(reader.getString());
                } else if ("expirationDateTime".equals(fieldName)) {
                    expirationDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("warnings".equals(fieldName)) {
                    warnings = reader.readArray(reader1 -> Warning.fromJson(reader1));
                } else if ("errors".equals(fieldName)) {
                    errors = reader.readArray(reader1 -> Error.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            AnalyzeConversationAuthoringLoadSnapshotJobState deserializedAnalyzeConversationAuthoringLoadSnapshotJobState
                = new AnalyzeConversationAuthoringLoadSnapshotJobState(createdDateTime, lastUpdatedDateTime, status);
            deserializedAnalyzeConversationAuthoringLoadSnapshotJobState.jobId = jobId;
            deserializedAnalyzeConversationAuthoringLoadSnapshotJobState.expirationDateTime = expirationDateTime;
            deserializedAnalyzeConversationAuthoringLoadSnapshotJobState.warnings = warnings;
            deserializedAnalyzeConversationAuthoringLoadSnapshotJobState.errors = errors;

            return deserializedAnalyzeConversationAuthoringLoadSnapshotJobState;
        });
    }
}
