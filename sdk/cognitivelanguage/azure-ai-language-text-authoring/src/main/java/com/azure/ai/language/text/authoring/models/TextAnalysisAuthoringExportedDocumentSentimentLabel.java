// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents an entity label for a document.
 */
@Fluent
public final class TextAnalysisAuthoringExportedDocumentSentimentLabel
    implements JsonSerializable<TextAnalysisAuthoringExportedDocumentSentimentLabel> {
    /*
     * The sentiment category.
     */
    @Generated
    private Sentiment category;

    /*
     * Start position for the sentiment text.
     */
    @Generated
    private Integer offset;

    /*
     * Length for the sentiment text.
     */
    @Generated
    private Integer length;

    /**
     * Creates an instance of TextAnalysisAuthoringExportedDocumentSentimentLabel class.
     */
    @Generated
    public TextAnalysisAuthoringExportedDocumentSentimentLabel() {
    }

    /**
     * Get the category property: The sentiment category.
     * 
     * @return the category value.
     */
    @Generated
    public Sentiment getCategory() {
        return this.category;
    }

    /**
     * Set the category property: The sentiment category.
     * 
     * @param category the category value to set.
     * @return the TextAnalysisAuthoringExportedDocumentSentimentLabel object itself.
     */
    @Generated
    public TextAnalysisAuthoringExportedDocumentSentimentLabel setCategory(Sentiment category) {
        this.category = category;
        return this;
    }

    /**
     * Get the offset property: Start position for the sentiment text.
     * 
     * @return the offset value.
     */
    @Generated
    public Integer getOffset() {
        return this.offset;
    }

    /**
     * Set the offset property: Start position for the sentiment text.
     * 
     * @param offset the offset value to set.
     * @return the TextAnalysisAuthoringExportedDocumentSentimentLabel object itself.
     */
    @Generated
    public TextAnalysisAuthoringExportedDocumentSentimentLabel setOffset(Integer offset) {
        this.offset = offset;
        return this;
    }

    /**
     * Get the length property: Length for the sentiment text.
     * 
     * @return the length value.
     */
    @Generated
    public Integer getLength() {
        return this.length;
    }

    /**
     * Set the length property: Length for the sentiment text.
     * 
     * @param length the length value to set.
     * @return the TextAnalysisAuthoringExportedDocumentSentimentLabel object itself.
     */
    @Generated
    public TextAnalysisAuthoringExportedDocumentSentimentLabel setLength(Integer length) {
        this.length = length;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeNumberField("offset", this.offset);
        jsonWriter.writeNumberField("length", this.length);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringExportedDocumentSentimentLabel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringExportedDocumentSentimentLabel if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringExportedDocumentSentimentLabel.
     */
    @Generated
    public static TextAnalysisAuthoringExportedDocumentSentimentLabel fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            TextAnalysisAuthoringExportedDocumentSentimentLabel deserializedTextAnalysisAuthoringExportedDocumentSentimentLabel
                = new TextAnalysisAuthoringExportedDocumentSentimentLabel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("category".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringExportedDocumentSentimentLabel.category
                        = Sentiment.fromString(reader.getString());
                } else if ("offset".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringExportedDocumentSentimentLabel.offset
                        = reader.getNullable(JsonReader::getInt);
                } else if ("length".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringExportedDocumentSentimentLabel.length
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTextAnalysisAuthoringExportedDocumentSentimentLabel;
        });
    }
}
