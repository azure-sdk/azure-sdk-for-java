// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents an entity in an exported project with composite entities enabled.
 */
@Fluent
public final class TextAnalysisAuthoringExportedCompositeEntity
    implements JsonSerializable<TextAnalysisAuthoringExportedCompositeEntity> {
    /*
     * The behavior to follow when the entity's components overlap with each other.
     */
    @Generated
    private CompositionSetting compositionSetting;

    /*
     * The list component of the entity.
     */
    @Generated
    private TextAnalysisAuthoringExportedEntityList list;

    /*
     * The prebuilt entities components.
     */
    @Generated
    private List<TextAnalysisAuthoringExportedPrebuiltEntity> prebuilts;

    /*
     * The entity category.
     */
    @Generated
    private String category;

    /**
     * Creates an instance of TextAnalysisAuthoringExportedCompositeEntity class.
     */
    @Generated
    public TextAnalysisAuthoringExportedCompositeEntity() {
    }

    /**
     * Get the compositionSetting property: The behavior to follow when the entity's components overlap with each other.
     * 
     * @return the compositionSetting value.
     */
    @Generated
    public CompositionSetting getCompositionSetting() {
        return this.compositionSetting;
    }

    /**
     * Set the compositionSetting property: The behavior to follow when the entity's components overlap with each other.
     * 
     * @param compositionSetting the compositionSetting value to set.
     * @return the TextAnalysisAuthoringExportedCompositeEntity object itself.
     */
    @Generated
    public TextAnalysisAuthoringExportedCompositeEntity setCompositionSetting(CompositionSetting compositionSetting) {
        this.compositionSetting = compositionSetting;
        return this;
    }

    /**
     * Get the list property: The list component of the entity.
     * 
     * @return the list value.
     */
    @Generated
    public TextAnalysisAuthoringExportedEntityList getList() {
        return this.list;
    }

    /**
     * Set the list property: The list component of the entity.
     * 
     * @param list the list value to set.
     * @return the TextAnalysisAuthoringExportedCompositeEntity object itself.
     */
    @Generated
    public TextAnalysisAuthoringExportedCompositeEntity setList(TextAnalysisAuthoringExportedEntityList list) {
        this.list = list;
        return this;
    }

    /**
     * Get the prebuilts property: The prebuilt entities components.
     * 
     * @return the prebuilts value.
     */
    @Generated
    public List<TextAnalysisAuthoringExportedPrebuiltEntity> getPrebuilts() {
        return this.prebuilts;
    }

    /**
     * Set the prebuilts property: The prebuilt entities components.
     * 
     * @param prebuilts the prebuilts value to set.
     * @return the TextAnalysisAuthoringExportedCompositeEntity object itself.
     */
    @Generated
    public TextAnalysisAuthoringExportedCompositeEntity
        setPrebuilts(List<TextAnalysisAuthoringExportedPrebuiltEntity> prebuilts) {
        this.prebuilts = prebuilts;
        return this;
    }

    /**
     * Get the category property: The entity category.
     * 
     * @return the category value.
     */
    @Generated
    public String getCategory() {
        return this.category;
    }

    /**
     * Set the category property: The entity category.
     * 
     * @param category the category value to set.
     * @return the TextAnalysisAuthoringExportedCompositeEntity object itself.
     */
    @Generated
    public TextAnalysisAuthoringExportedCompositeEntity setCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("compositionSetting",
            this.compositionSetting == null ? null : this.compositionSetting.toString());
        jsonWriter.writeJsonField("list", this.list);
        jsonWriter.writeArrayField("prebuilts", this.prebuilts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("category", this.category);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringExportedCompositeEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringExportedCompositeEntity if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringExportedCompositeEntity.
     */
    @Generated
    public static TextAnalysisAuthoringExportedCompositeEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TextAnalysisAuthoringExportedCompositeEntity deserializedTextAnalysisAuthoringExportedCompositeEntity
                = new TextAnalysisAuthoringExportedCompositeEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("compositionSetting".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringExportedCompositeEntity.compositionSetting
                        = CompositionSetting.fromString(reader.getString());
                } else if ("list".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringExportedCompositeEntity.list
                        = TextAnalysisAuthoringExportedEntityList.fromJson(reader);
                } else if ("prebuilts".equals(fieldName)) {
                    List<TextAnalysisAuthoringExportedPrebuiltEntity> prebuilts
                        = reader.readArray(reader1 -> TextAnalysisAuthoringExportedPrebuiltEntity.fromJson(reader1));
                    deserializedTextAnalysisAuthoringExportedCompositeEntity.prebuilts = prebuilts;
                } else if ("category".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringExportedCompositeEntity.category = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTextAnalysisAuthoringExportedCompositeEntity;
        });
    }
}
