// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.ai.language.text.authoring.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Represents the settings used to define the project behavior.
 */
@Fluent
public final class ProjectSettings implements JsonSerializable<ProjectSettings> {
    /*
     * The threshold of the class with the highest confidence, at which the prediction will automatically be changed to
     * "None". The value of the threshold should be between 0 and 1 inclusive.
     */
    @Generated
    private Double confidenceThreshold;

    /*
     * The path to the AML connected project.
     */
    @Generated
    private String amlProjectPath;

    /*
     * Indicates whether the labeling experience can be modified or not.
     */
    @Generated
    private Boolean isLabelingLocked;

    /*
     * Indicates whether to run GPT predictions or not.
     */
    @Generated
    private Boolean runGptPredictions;

    /*
     * The predictive lookahead for GPT predictions that is specified by the user.
     */
    @Generated
    private Integer gptPredictiveLookahead;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setProjectSettingsAccessor(new JsonMergePatchHelper.ProjectSettingsAccessor() {
            @Override
            public ProjectSettings prepareModelForJsonMergePatch(ProjectSettings model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(ProjectSettings model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of ProjectSettings class.
     */
    @Generated
    public ProjectSettings() {
    }

    /**
     * Get the confidenceThreshold property: The threshold of the class with the highest confidence, at which the
     * prediction will automatically be changed to "None". The value of the threshold should be between 0 and 1
     * inclusive.
     * 
     * @return the confidenceThreshold value.
     */
    @Generated
    public Double getConfidenceThreshold() {
        return this.confidenceThreshold;
    }

    /**
     * Set the confidenceThreshold property: The threshold of the class with the highest confidence, at which the
     * prediction will automatically be changed to "None". The value of the threshold should be between 0 and 1
     * inclusive.
     * 
     * @param confidenceThreshold the confidenceThreshold value to set.
     * @return the ProjectSettings object itself.
     */
    @Generated
    public ProjectSettings setConfidenceThreshold(Double confidenceThreshold) {
        this.confidenceThreshold = confidenceThreshold;
        this.updatedProperties.add("confidenceThreshold");
        return this;
    }

    /**
     * Get the amlProjectPath property: The path to the AML connected project.
     * 
     * @return the amlProjectPath value.
     */
    @Generated
    public String getAmlProjectPath() {
        return this.amlProjectPath;
    }

    /**
     * Set the amlProjectPath property: The path to the AML connected project.
     * 
     * @param amlProjectPath the amlProjectPath value to set.
     * @return the ProjectSettings object itself.
     */
    @Generated
    public ProjectSettings setAmlProjectPath(String amlProjectPath) {
        this.amlProjectPath = amlProjectPath;
        this.updatedProperties.add("amlProjectPath");
        return this;
    }

    /**
     * Get the isLabelingLocked property: Indicates whether the labeling experience can be modified or not.
     * 
     * @return the isLabelingLocked value.
     */
    @Generated
    public Boolean isLabelingLocked() {
        return this.isLabelingLocked;
    }

    /**
     * Set the isLabelingLocked property: Indicates whether the labeling experience can be modified or not.
     * 
     * @param isLabelingLocked the isLabelingLocked value to set.
     * @return the ProjectSettings object itself.
     */
    @Generated
    public ProjectSettings setIsLabelingLocked(Boolean isLabelingLocked) {
        this.isLabelingLocked = isLabelingLocked;
        this.updatedProperties.add("isLabelingLocked");
        return this;
    }

    /**
     * Get the runGptPredictions property: Indicates whether to run GPT predictions or not.
     * 
     * @return the runGptPredictions value.
     */
    @Generated
    public Boolean isRunGptPredictions() {
        return this.runGptPredictions;
    }

    /**
     * Set the runGptPredictions property: Indicates whether to run GPT predictions or not.
     * 
     * @param runGptPredictions the runGptPredictions value to set.
     * @return the ProjectSettings object itself.
     */
    @Generated
    public ProjectSettings setRunGptPredictions(Boolean runGptPredictions) {
        this.runGptPredictions = runGptPredictions;
        this.updatedProperties.add("runGptPredictions");
        return this;
    }

    /**
     * Get the gptPredictiveLookahead property: The predictive lookahead for GPT predictions that is specified by the
     * user.
     * 
     * @return the gptPredictiveLookahead value.
     */
    @Generated
    public Integer getGptPredictiveLookahead() {
        return this.gptPredictiveLookahead;
    }

    /**
     * Set the gptPredictiveLookahead property: The predictive lookahead for GPT predictions that is specified by the
     * user.
     * 
     * @param gptPredictiveLookahead the gptPredictiveLookahead value to set.
     * @return the ProjectSettings object itself.
     */
    @Generated
    public ProjectSettings setGptPredictiveLookahead(Integer gptPredictiveLookahead) {
        this.gptPredictiveLookahead = gptPredictiveLookahead;
        this.updatedProperties.add("gptPredictiveLookahead");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeNumberField("confidenceThreshold", this.confidenceThreshold);
            jsonWriter.writeStringField("amlProjectPath", this.amlProjectPath);
            jsonWriter.writeBooleanField("isLabelingLocked", this.isLabelingLocked);
            jsonWriter.writeBooleanField("runGptPredictions", this.runGptPredictions);
            jsonWriter.writeNumberField("gptPredictiveLookahead", this.gptPredictiveLookahead);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("confidenceThreshold")) {
            if (this.confidenceThreshold == null) {
                jsonWriter.writeNullField("confidenceThreshold");
            } else {
                jsonWriter.writeNumberField("confidenceThreshold", this.confidenceThreshold);
            }
        }
        if (updatedProperties.contains("amlProjectPath")) {
            if (this.amlProjectPath == null) {
                jsonWriter.writeNullField("amlProjectPath");
            } else {
                jsonWriter.writeStringField("amlProjectPath", this.amlProjectPath);
            }
        }
        if (updatedProperties.contains("isLabelingLocked")) {
            if (this.isLabelingLocked == null) {
                jsonWriter.writeNullField("isLabelingLocked");
            } else {
                jsonWriter.writeBooleanField("isLabelingLocked", this.isLabelingLocked);
            }
        }
        if (updatedProperties.contains("runGptPredictions")) {
            if (this.runGptPredictions == null) {
                jsonWriter.writeNullField("runGptPredictions");
            } else {
                jsonWriter.writeBooleanField("runGptPredictions", this.runGptPredictions);
            }
        }
        if (updatedProperties.contains("gptPredictiveLookahead")) {
            if (this.gptPredictiveLookahead == null) {
                jsonWriter.writeNullField("gptPredictiveLookahead");
            } else {
                jsonWriter.writeNumberField("gptPredictiveLookahead", this.gptPredictiveLookahead);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectSettings.
     */
    @Generated
    public static ProjectSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectSettings deserializedProjectSettings = new ProjectSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("confidenceThreshold".equals(fieldName)) {
                    deserializedProjectSettings.confidenceThreshold = reader.getNullable(JsonReader::getDouble);
                } else if ("amlProjectPath".equals(fieldName)) {
                    deserializedProjectSettings.amlProjectPath = reader.getString();
                } else if ("isLabelingLocked".equals(fieldName)) {
                    deserializedProjectSettings.isLabelingLocked = reader.getNullable(JsonReader::getBoolean);
                } else if ("runGptPredictions".equals(fieldName)) {
                    deserializedProjectSettings.runGptPredictions = reader.getNullable(JsonReader::getBoolean);
                } else if ("gptPredictiveLookahead".equals(fieldName)) {
                    deserializedProjectSettings.gptPredictiveLookahead = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectSettings;
        });
    }
}
