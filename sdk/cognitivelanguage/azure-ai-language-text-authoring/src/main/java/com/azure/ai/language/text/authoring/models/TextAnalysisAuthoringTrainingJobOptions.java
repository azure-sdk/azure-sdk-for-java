// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the options for starting a new training job.
 */
@Fluent
public final class TextAnalysisAuthoringTrainingJobOptions
    implements JsonSerializable<TextAnalysisAuthoringTrainingJobOptions> {
    /*
     * Represents the output model label.
     */
    @Generated
    private final String modelLabel;

    /*
     * Represents training config version.
     */
    @Generated
    private final String trainingConfigVersion;

    /*
     * Represents the evaluation options. By default, the evaluation kind is percentage, with training split percentage
     * as 80, and testing split percentage as 20.
     */
    @Generated
    private TextAnalysisAuthoringEvaluationOptions evaluationOptions;

    /*
     * Represents the settings for using data generation as part of training a custom model.
     */
    @Generated
    private DataGenerationSettings dataGenerationSettings;

    /**
     * Creates an instance of TextAnalysisAuthoringTrainingJobOptions class.
     * 
     * @param modelLabel the modelLabel value to set.
     * @param trainingConfigVersion the trainingConfigVersion value to set.
     */
    @Generated
    public TextAnalysisAuthoringTrainingJobOptions(String modelLabel, String trainingConfigVersion) {
        this.modelLabel = modelLabel;
        this.trainingConfigVersion = trainingConfigVersion;
    }

    /**
     * Get the modelLabel property: Represents the output model label.
     * 
     * @return the modelLabel value.
     */
    @Generated
    public String getModelLabel() {
        return this.modelLabel;
    }

    /**
     * Get the trainingConfigVersion property: Represents training config version.
     * 
     * @return the trainingConfigVersion value.
     */
    @Generated
    public String getTrainingConfigVersion() {
        return this.trainingConfigVersion;
    }

    /**
     * Get the evaluationOptions property: Represents the evaluation options. By default, the evaluation kind is
     * percentage, with training split percentage as 80, and testing split percentage as 20.
     * 
     * @return the evaluationOptions value.
     */
    @Generated
    public TextAnalysisAuthoringEvaluationOptions getEvaluationOptions() {
        return this.evaluationOptions;
    }

    /**
     * Set the evaluationOptions property: Represents the evaluation options. By default, the evaluation kind is
     * percentage, with training split percentage as 80, and testing split percentage as 20.
     * 
     * @param evaluationOptions the evaluationOptions value to set.
     * @return the TextAnalysisAuthoringTrainingJobOptions object itself.
     */
    @Generated
    public TextAnalysisAuthoringTrainingJobOptions
        setEvaluationOptions(TextAnalysisAuthoringEvaluationOptions evaluationOptions) {
        this.evaluationOptions = evaluationOptions;
        return this;
    }

    /**
     * Get the dataGenerationSettings property: Represents the settings for using data generation as part of training a
     * custom model.
     * 
     * @return the dataGenerationSettings value.
     */
    @Generated
    public DataGenerationSettings getDataGenerationSettings() {
        return this.dataGenerationSettings;
    }

    /**
     * Set the dataGenerationSettings property: Represents the settings for using data generation as part of training a
     * custom model.
     * 
     * @param dataGenerationSettings the dataGenerationSettings value to set.
     * @return the TextAnalysisAuthoringTrainingJobOptions object itself.
     */
    @Generated
    public TextAnalysisAuthoringTrainingJobOptions
        setDataGenerationSettings(DataGenerationSettings dataGenerationSettings) {
        this.dataGenerationSettings = dataGenerationSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("modelLabel", this.modelLabel);
        jsonWriter.writeStringField("trainingConfigVersion", this.trainingConfigVersion);
        jsonWriter.writeJsonField("evaluationOptions", this.evaluationOptions);
        jsonWriter.writeJsonField("dataGenerationSettings", this.dataGenerationSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringTrainingJobOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringTrainingJobOptions if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringTrainingJobOptions.
     */
    @Generated
    public static TextAnalysisAuthoringTrainingJobOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String modelLabel = null;
            String trainingConfigVersion = null;
            TextAnalysisAuthoringEvaluationOptions evaluationOptions = null;
            DataGenerationSettings dataGenerationSettings = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("modelLabel".equals(fieldName)) {
                    modelLabel = reader.getString();
                } else if ("trainingConfigVersion".equals(fieldName)) {
                    trainingConfigVersion = reader.getString();
                } else if ("evaluationOptions".equals(fieldName)) {
                    evaluationOptions = TextAnalysisAuthoringEvaluationOptions.fromJson(reader);
                } else if ("dataGenerationSettings".equals(fieldName)) {
                    dataGenerationSettings = DataGenerationSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            TextAnalysisAuthoringTrainingJobOptions deserializedTextAnalysisAuthoringTrainingJobOptions
                = new TextAnalysisAuthoringTrainingJobOptions(modelLabel, trainingConfigVersion);
            deserializedTextAnalysisAuthoringTrainingJobOptions.evaluationOptions = evaluationOptions;
            deserializedTextAnalysisAuthoringTrainingJobOptions.dataGenerationSettings = dataGenerationSettings;

            return deserializedTextAnalysisAuthoringTrainingJobOptions;
        });
    }
}
