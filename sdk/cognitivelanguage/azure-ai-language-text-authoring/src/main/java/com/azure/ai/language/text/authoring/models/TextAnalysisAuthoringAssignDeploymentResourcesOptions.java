// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the options for assigning Azure resources to a project.
 */
@Immutable
public final class TextAnalysisAuthoringAssignDeploymentResourcesOptions
    implements JsonSerializable<TextAnalysisAuthoringAssignDeploymentResourcesOptions> {
    /*
     * Represents the metadata for the resources to be assigned.
     */
    @Generated
    private final List<ResourceMetadata> resourcesMetadata;

    /**
     * Creates an instance of TextAnalysisAuthoringAssignDeploymentResourcesOptions class.
     * 
     * @param resourcesMetadata the resourcesMetadata value to set.
     */
    @Generated
    public TextAnalysisAuthoringAssignDeploymentResourcesOptions(List<ResourceMetadata> resourcesMetadata) {
        this.resourcesMetadata = resourcesMetadata;
    }

    /**
     * Get the resourcesMetadata property: Represents the metadata for the resources to be assigned.
     * 
     * @return the resourcesMetadata value.
     */
    @Generated
    public List<ResourceMetadata> getResourcesMetadata() {
        return this.resourcesMetadata;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourcesMetadata", this.resourcesMetadata,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringAssignDeploymentResourcesOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringAssignDeploymentResourcesOptions if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringAssignDeploymentResourcesOptions.
     */
    @Generated
    public static TextAnalysisAuthoringAssignDeploymentResourcesOptions fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            List<ResourceMetadata> resourcesMetadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourcesMetadata".equals(fieldName)) {
                    resourcesMetadata = reader.readArray(reader1 -> ResourceMetadata.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new TextAnalysisAuthoringAssignDeploymentResourcesOptions(resourcesMetadata);
        });
    }
}
