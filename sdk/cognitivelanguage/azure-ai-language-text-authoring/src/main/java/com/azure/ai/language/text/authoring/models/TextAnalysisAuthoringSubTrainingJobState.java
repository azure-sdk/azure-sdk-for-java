// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Represents the detailed state of a training sub-operation.
 */
@Immutable
public final class TextAnalysisAuthoringSubTrainingJobState
    implements JsonSerializable<TextAnalysisAuthoringSubTrainingJobState> {
    /*
     * Represents progress percentage.
     */
    @Generated
    private final int percentComplete;

    /*
     * Represents the start date time.
     */
    @Generated
    private OffsetDateTime startDateTime;

    /*
     * Represents the end date time.
     */
    @Generated
    private OffsetDateTime endDateTime;

    /*
     * Represents the status of the sub-operation.
     */
    @Generated
    private final JobStatus status;

    /**
     * Creates an instance of TextAnalysisAuthoringSubTrainingJobState class.
     * 
     * @param percentComplete the percentComplete value to set.
     * @param status the status value to set.
     */
    @Generated
    private TextAnalysisAuthoringSubTrainingJobState(int percentComplete, JobStatus status) {
        this.percentComplete = percentComplete;
        this.status = status;
    }

    /**
     * Get the percentComplete property: Represents progress percentage.
     * 
     * @return the percentComplete value.
     */
    @Generated
    public int getPercentComplete() {
        return this.percentComplete;
    }

    /**
     * Get the startDateTime property: Represents the start date time.
     * 
     * @return the startDateTime value.
     */
    @Generated
    public OffsetDateTime getStartDateTime() {
        return this.startDateTime;
    }

    /**
     * Get the endDateTime property: Represents the end date time.
     * 
     * @return the endDateTime value.
     */
    @Generated
    public OffsetDateTime getEndDateTime() {
        return this.endDateTime;
    }

    /**
     * Get the status property: Represents the status of the sub-operation.
     * 
     * @return the status value.
     */
    @Generated
    public JobStatus getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("percentComplete", this.percentComplete);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("startDateTime",
            this.startDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDateTime));
        jsonWriter.writeStringField("endDateTime",
            this.endDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDateTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringSubTrainingJobState from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringSubTrainingJobState if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringSubTrainingJobState.
     */
    @Generated
    public static TextAnalysisAuthoringSubTrainingJobState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int percentComplete = 0;
            JobStatus status = null;
            OffsetDateTime startDateTime = null;
            OffsetDateTime endDateTime = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("percentComplete".equals(fieldName)) {
                    percentComplete = reader.getInt();
                } else if ("status".equals(fieldName)) {
                    status = JobStatus.fromString(reader.getString());
                } else if ("startDateTime".equals(fieldName)) {
                    startDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endDateTime".equals(fieldName)) {
                    endDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            TextAnalysisAuthoringSubTrainingJobState deserializedTextAnalysisAuthoringSubTrainingJobState
                = new TextAnalysisAuthoringSubTrainingJobState(percentComplete, status);
            deserializedTextAnalysisAuthoringSubTrainingJobState.startDateTime = startDateTime;
            deserializedTextAnalysisAuthoringSubTrainingJobState.endDateTime = endDateTime;

            return deserializedTextAnalysisAuthoringSubTrainingJobState;
        });
    }
}
