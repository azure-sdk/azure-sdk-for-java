// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a class of an exported project.
 */
@Fluent
public final class TextAnalysisAuthoringExportedClass implements JsonSerializable<TextAnalysisAuthoringExportedClass> {
    /*
     * The class category.
     */
    @Generated
    private String category;

    /**
     * Creates an instance of TextAnalysisAuthoringExportedClass class.
     */
    @Generated
    public TextAnalysisAuthoringExportedClass() {
    }

    /**
     * Get the category property: The class category.
     * 
     * @return the category value.
     */
    @Generated
    public String getCategory() {
        return this.category;
    }

    /**
     * Set the category property: The class category.
     * 
     * @param category the category value to set.
     * @return the TextAnalysisAuthoringExportedClass object itself.
     */
    @Generated
    public TextAnalysisAuthoringExportedClass setCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("category", this.category);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringExportedClass from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringExportedClass if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringExportedClass.
     */
    @Generated
    public static TextAnalysisAuthoringExportedClass fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TextAnalysisAuthoringExportedClass deserializedTextAnalysisAuthoringExportedClass
                = new TextAnalysisAuthoringExportedClass();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("category".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringExportedClass.category = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTextAnalysisAuthoringExportedClass;
        });
    }
}
