// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the document evaluation result for a custom entity recognition project.
 */
@Immutable
public final class TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult
    extends TextAnalysisAuthoringDocumentEvaluationResult {
    /*
     * Represents the project kind.
     */
    @Generated
    private ProjectKind projectKind = ProjectKind.CUSTOM_ENTITY_RECOGNITION;

    /*
     * Represents the evaluation prediction for entity recognition.
     */
    @Generated
    private final TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult customEntityRecognitionResult;

    /**
     * Creates an instance of TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult class.
     * 
     * @param location the location value to set.
     * @param language the language value to set.
     * @param customEntityRecognitionResult the customEntityRecognitionResult value to set.
     */
    @Generated
    private TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult(String location, String language,
        TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult customEntityRecognitionResult) {
        super(location, language);
        this.customEntityRecognitionResult = customEntityRecognitionResult;
    }

    /**
     * Get the projectKind property: Represents the project kind.
     * 
     * @return the projectKind value.
     */
    @Generated
    @Override
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * Get the customEntityRecognitionResult property: Represents the evaluation prediction for entity recognition.
     * 
     * @return the customEntityRecognitionResult value.
     */
    @Generated
    public TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult getCustomEntityRecognitionResult() {
        return this.customEntityRecognitionResult;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", getLocation());
        jsonWriter.writeStringField("language", getLanguage());
        jsonWriter.writeJsonField("customEntityRecognitionResult", this.customEntityRecognitionResult);
        jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult.
     */
    @Generated
    public static TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String location = null;
            String language = null;
            TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult customEntityRecognitionResult = null;
            ProjectKind projectKind = ProjectKind.CUSTOM_ENTITY_RECOGNITION;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    location = reader.getString();
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("customEntityRecognitionResult".equals(fieldName)) {
                    customEntityRecognitionResult
                        = TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult.fromJson(reader);
                } else if ("projectKind".equals(fieldName)) {
                    projectKind = ProjectKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult deserializedTextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult
                = new TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult(location, language,
                    customEntityRecognitionResult);
            deserializedTextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult.projectKind = projectKind;

            return deserializedTextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult;
        });
    }
}
