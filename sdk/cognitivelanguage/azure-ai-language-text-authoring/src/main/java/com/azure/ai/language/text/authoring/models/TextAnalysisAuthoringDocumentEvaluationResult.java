// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the evaluation result of a document.
 */
@Immutable
public class TextAnalysisAuthoringDocumentEvaluationResult
    implements JsonSerializable<TextAnalysisAuthoringDocumentEvaluationResult> {
    /*
     * Represents the project kind.
     */
    @Generated
    private ProjectKind projectKind = ProjectKind.fromString("TextAnalysisAuthoringDocumentEvaluationResult");

    /*
     * Represents the document path.
     */
    @Generated
    private final String location;

    /*
     * Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English,
     * "en-gb" for English (UK), "es" for Spanish etc.
     */
    @Generated
    private final String language;

    /**
     * Creates an instance of TextAnalysisAuthoringDocumentEvaluationResult class.
     * 
     * @param location the location value to set.
     * @param language the language value to set.
     */
    @Generated
    protected TextAnalysisAuthoringDocumentEvaluationResult(String location, String language) {
        this.location = location;
        this.language = language;
    }

    /**
     * Get the projectKind property: Represents the project kind.
     * 
     * @return the projectKind value.
     */
    @Generated
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * Get the location property: Represents the document path.
     * 
     * @return the location value.
     */
    @Generated
    public String getLocation() {
        return this.location;
    }

    /**
     * Get the language property: Represents the document language. This is BCP-47 representation of a language. For
     * example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
     * 
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeStringField("language", this.language);
        jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringDocumentEvaluationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringDocumentEvaluationResult if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringDocumentEvaluationResult.
     */
    @Generated
    public static TextAnalysisAuthoringDocumentEvaluationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("projectKind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("CustomEntityRecognition".equals(discriminatorValue)) {
                    return TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult
                        .fromJson(readerToUse.reset());
                } else if ("CustomHealthcare".equals(discriminatorValue)) {
                    return TextAnalysisAuthoringCustomHealthcareDocumentEvaluationResult.fromJson(readerToUse.reset());
                } else if ("CustomMultiLabelClassification".equals(discriminatorValue)) {
                    return TextAnalysisAuthoringCustomMultiLabelClassificationDocumentEvaluationResult
                        .fromJson(readerToUse.reset());
                } else if ("CustomSingleLabelClassification".equals(discriminatorValue)) {
                    return TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult
                        .fromJson(readerToUse.reset());
                } else if ("CustomTextSentiment".equals(discriminatorValue)) {
                    return TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult
                        .fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static TextAnalysisAuthoringDocumentEvaluationResult fromJsonKnownDiscriminator(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String location = null;
            String language = null;
            ProjectKind projectKind = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    location = reader.getString();
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("projectKind".equals(fieldName)) {
                    projectKind = ProjectKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TextAnalysisAuthoringDocumentEvaluationResult deserializedTextAnalysisAuthoringDocumentEvaluationResult
                = new TextAnalysisAuthoringDocumentEvaluationResult(location, language);
            deserializedTextAnalysisAuthoringDocumentEvaluationResult.projectKind = projectKind;

            return deserializedTextAnalysisAuthoringDocumentEvaluationResult;
        });
    }
}
