// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the document evaluation result for a custom single-label classification project.
 */
@Immutable
public final class TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult
    extends TextAnalysisAuthoringDocumentEvaluationResult {
    /*
     * Represents the project kind.
     */
    @Generated
    private ProjectKind projectKind = ProjectKind.CUSTOM_SINGLE_LABEL_CLASSIFICATION;

    /*
     * Represents the evaluation prediction for single label classification.
     */
    @Generated
    private final TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult customSingleLabelClassificationResult;

    /**
     * Creates an instance of TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult class.
     * 
     * @param location the location value to set.
     * @param language the language value to set.
     * @param customSingleLabelClassificationResult the customSingleLabelClassificationResult value to set.
     */
    @Generated
    private TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult(String location,
        String language,
        TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult customSingleLabelClassificationResult) {
        super(location, language);
        this.customSingleLabelClassificationResult = customSingleLabelClassificationResult;
    }

    /**
     * Get the projectKind property: Represents the project kind.
     * 
     * @return the projectKind value.
     */
    @Generated
    @Override
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * Get the customSingleLabelClassificationResult property: Represents the evaluation prediction for single label
     * classification.
     * 
     * @return the customSingleLabelClassificationResult value.
     */
    @Generated
    public TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult
        getCustomSingleLabelClassificationResult() {
        return this.customSingleLabelClassificationResult;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", getLocation());
        jsonWriter.writeStringField("language", getLanguage());
        jsonWriter.writeJsonField("customSingleLabelClassificationResult", this.customSingleLabelClassificationResult);
        jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult from the
     * JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult if the
     * JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult.
     */
    @Generated
    public static TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult
        fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String location = null;
            String language = null;
            TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult customSingleLabelClassificationResult
                = null;
            ProjectKind projectKind = ProjectKind.CUSTOM_SINGLE_LABEL_CLASSIFICATION;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    location = reader.getString();
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("customSingleLabelClassificationResult".equals(fieldName)) {
                    customSingleLabelClassificationResult
                        = TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult.fromJson(reader);
                } else if ("projectKind".equals(fieldName)) {
                    projectKind = ProjectKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult deserializedTextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult
                = new TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult(location, language,
                    customSingleLabelClassificationResult);
            deserializedTextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult.projectKind
                = projectKind;

            return deserializedTextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult;
        });
    }
}
