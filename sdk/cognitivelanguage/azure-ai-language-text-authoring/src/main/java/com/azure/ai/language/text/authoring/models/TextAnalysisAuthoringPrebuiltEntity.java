// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a supported prebuilt entity.
 */
@Immutable
public final class TextAnalysisAuthoringPrebuiltEntity
    implements JsonSerializable<TextAnalysisAuthoringPrebuiltEntity> {
    /*
     * The prebuilt entity category.
     */
    @Generated
    private String category;

    /*
     * The description.
     */
    @Generated
    private final String description;

    /*
     * English examples for the entity.
     */
    @Generated
    private final String examples;

    /**
     * Creates an instance of TextAnalysisAuthoringPrebuiltEntity class.
     * 
     * @param description the description value to set.
     * @param examples the examples value to set.
     */
    @Generated
    private TextAnalysisAuthoringPrebuiltEntity(String description, String examples) {
        this.description = description;
        this.examples = examples;
    }

    /**
     * Get the category property: The prebuilt entity category.
     * 
     * @return the category value.
     */
    @Generated
    public String getCategory() {
        return this.category;
    }

    /**
     * Get the description property: The description.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the examples property: English examples for the entity.
     * 
     * @return the examples value.
     */
    @Generated
    public String getExamples() {
        return this.examples;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("examples", this.examples);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringPrebuiltEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringPrebuiltEntity if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringPrebuiltEntity.
     */
    @Generated
    public static TextAnalysisAuthoringPrebuiltEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String category = null;
            String description = null;
            String examples = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("category".equals(fieldName)) {
                    category = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("examples".equals(fieldName)) {
                    examples = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            TextAnalysisAuthoringPrebuiltEntity deserializedTextAnalysisAuthoringPrebuiltEntity
                = new TextAnalysisAuthoringPrebuiltEntity(description, examples);
            deserializedTextAnalysisAuthoringPrebuiltEntity.category = category;

            return deserializedTextAnalysisAuthoringPrebuiltEntity;
        });
    }
}
