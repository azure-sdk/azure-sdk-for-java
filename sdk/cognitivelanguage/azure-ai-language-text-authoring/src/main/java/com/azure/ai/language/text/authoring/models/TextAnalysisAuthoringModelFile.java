// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the properties for the model file.
 */
@Immutable
public final class TextAnalysisAuthoringModelFile implements JsonSerializable<TextAnalysisAuthoringModelFile> {
    /*
     * The name of the file.
     */
    @Generated
    private final String name;

    /*
     * The URI to retrieve the content of the file.
     */
    @Generated
    private final String contentUri;

    /**
     * Creates an instance of TextAnalysisAuthoringModelFile class.
     * 
     * @param name the name value to set.
     * @param contentUri the contentUri value to set.
     */
    @Generated
    private TextAnalysisAuthoringModelFile(String name, String contentUri) {
        this.name = name;
        this.contentUri = contentUri;
    }

    /**
     * Get the name property: The name of the file.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the contentUri property: The URI to retrieve the content of the file.
     * 
     * @return the contentUri value.
     */
    @Generated
    public String getContentUri() {
        return this.contentUri;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("contentUri", this.contentUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringModelFile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringModelFile if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringModelFile.
     */
    @Generated
    public static TextAnalysisAuthoringModelFile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String contentUri = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("contentUri".equals(fieldName)) {
                    contentUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new TextAnalysisAuthoringModelFile(name, contentUri);
        });
    }
}
