// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the exported assets for a custom text sentiment project.
 */
@Fluent
public final class TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets extends ExportedProjectAssets {
    /*
     * The projectKind property.
     */
    @Generated
    private ProjectKind projectKind = ProjectKind.CUSTOM_TEXT_SENTIMENT;

    /*
     * The list of documents belonging to the project.
     */
    @Generated
    private List<TextAnalysisAuthoringExportedCustomTextSentimentDocument> documents;

    /**
     * Creates an instance of TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets class.
     */
    @Generated
    public TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets() {
    }

    /**
     * Get the projectKind property: The projectKind property.
     * 
     * @return the projectKind value.
     */
    @Generated
    @Override
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * Get the documents property: The list of documents belonging to the project.
     * 
     * @return the documents value.
     */
    @Generated
    public List<TextAnalysisAuthoringExportedCustomTextSentimentDocument> getDocuments() {
        return this.documents;
    }

    /**
     * Set the documents property: The list of documents belonging to the project.
     * 
     * @param documents the documents value to set.
     * @return the TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets object itself.
     */
    @Generated
    public TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets
        setDocuments(List<TextAnalysisAuthoringExportedCustomTextSentimentDocument> documents) {
        this.documents = documents;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
        jsonWriter.writeArrayField("documents", this.documents, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets.
     */
    @Generated
    public static TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets deserializedTextAnalysisAuthoringExportedCustomTextSentimentProjectAssets
                = new TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectKind".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringExportedCustomTextSentimentProjectAssets.projectKind
                        = ProjectKind.fromString(reader.getString());
                } else if ("documents".equals(fieldName)) {
                    List<TextAnalysisAuthoringExportedCustomTextSentimentDocument> documents = reader.readArray(
                        reader1 -> TextAnalysisAuthoringExportedCustomTextSentimentDocument.fromJson(reader1));
                    deserializedTextAnalysisAuthoringExportedCustomTextSentimentProjectAssets.documents = documents;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTextAnalysisAuthoringExportedCustomTextSentimentProjectAssets;
        });
    }
}
